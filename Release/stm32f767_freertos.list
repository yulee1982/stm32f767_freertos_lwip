
stm32f767_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156d4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00079744  080158d4  080158d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808f018  0808f018  00091204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0808f018  0808f018  00090018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808f020  0808f020  00091204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808f020  0808f020  00090020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0808f024  0808f024  00090024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0808f028  00091000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDescripSection 000000a0  200000c4  0808f0ec  000910c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDescripSection 000000a0  20000164  0808f18c  00091164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f6c0  20000208  0808f22c  00091208  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  2000f8c8  0808f22c  000918c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00091204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005d95d  00000000  00000000  00091232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000e3b8  00000000  00000000  000eeb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00026f85  00000000  00000000  000fcf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c28  00000000  00000000  00123ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003bb0  00000000  00000000  00126af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000404a3  00000000  00000000  0012a6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00057ed2  00000000  00000000  0016ab47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0014428f  00000000  00000000  001c2a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00306ca8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008fb0  00000000  00000000  00306cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000208 	.word	0x20000208
 800021c:	00000000 	.word	0x00000000
 8000220:	080158bc 	.word	0x080158bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000020c 	.word	0x2000020c
 800023c:	080158bc 	.word	0x080158bc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <prvLedBreathTask>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800063c:	4c0b      	ldr	r4, [pc, #44]	@ (800066c <prvLedBreathTask+0x30>)
 800063e:	2601      	movs	r6, #1
static uint32_t getkeyval(void);
static void keyscan(void);
static void keyproc(void);

void prvLedBreathTask( void * pvParameters )
{
 8000640:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000642:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  for(;;)
  {
    //LL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
    //vTaskDelay(400);
    LL_GPIO_SetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(80);
 8000646:	2050      	movs	r0, #80	@ 0x50
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000648:	61a6      	str	r6, [r4, #24]
 800064a:	f008 fa6b 	bl	8008b24 <vTaskDelay>
    LL_GPIO_ResetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(80);
 800064e:	2050      	movs	r0, #80	@ 0x50
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000650:	61a5      	str	r5, [r4, #24]
 8000652:	f008 fa67 	bl	8008b24 <vTaskDelay>
    LL_GPIO_SetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(80);
 8000656:	2050      	movs	r0, #80	@ 0x50
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000658:	61a6      	str	r6, [r4, #24]
 800065a:	f008 fa63 	bl	8008b24 <vTaskDelay>
    LL_GPIO_ResetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(760);
 800065e:	f44f 703e 	mov.w	r0, #760	@ 0x2f8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000662:	61a5      	str	r5, [r4, #24]
 8000664:	f008 fa5e 	bl	8008b24 <vTaskDelay>
  for(;;)
 8000668:	e7eb      	b.n	8000642 <prvLedBreathTask+0x6>
 800066a:	bf00      	nop
 800066c:	40020400 	.word	0x40020400

08000670 <prvButtonTask>:
  }
}
void prvButtonTask( void * pvParameters )
{
 8000670:	e92d 4887 	stmdb	sp!, {r0, r1, r2, r7, fp, lr}
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000674:	4a8d      	ldr	r2, [pc, #564]	@ (80008ac <prvButtonTask+0x23c>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800067a:	f8df 8254 	ldr.w	r8, [pc, #596]	@ 80008d0 <prvButtonTask+0x260>
 800067e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000686:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	f8d8 0000 	ldr.w	r0, [r8]
 8000694:	fa91 f3a1 	rbit	r3, r1
 8000698:	fab3 f383 	clz	r3, r3
 800069c:	f04f 0903 	mov.w	r9, #3
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	fa09 f303 	lsl.w	r3, r9, r3
 80006a6:	ea20 0303 	bic.w	r3, r0, r3
 80006aa:	fa91 f0a1 	rbit	r0, r1
 80006ae:	f8c8 3000 	str.w	r3, [r8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006b2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80006b6:	fa91 f3a1 	rbit	r3, r1
 80006ba:	fab3 f383 	clz	r3, r3
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	fa09 f303 	lsl.w	r3, r9, r3
 80006c4:	ea20 0303 	bic.w	r3, r0, r3
 80006c8:	fa91 f1a1 	rbit	r1, r1
 80006cc:	f8c8 300c 	str.w	r3, [r8, #12]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006d0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80006d2:	4877      	ldr	r0, [pc, #476]	@ (80008b0 <prvButtonTask+0x240>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6453      	str	r3, [r2, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006da:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80006dc:	22f0      	movs	r2, #240	@ 0xf0
 80006de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80006e4:	9b00      	ldr	r3, [sp, #0]
 80006e6:	6943      	ldr	r3, [r0, #20]
 80006e8:	fa92 f2a2 	rbit	r2, r2
 80006ec:	2102      	movs	r1, #2
 80006ee:	fab2 f282 	clz	r2, r2
 80006f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
{
  keyval = 0;
  prevkeyval = 0;
  keystatus = 0;
  keyscancnt = 0;
  keyflag.keypressed = 0;
 80006f6:	4c6f      	ldr	r4, [pc, #444]	@ (80008b4 <prvButtonTask+0x244>)
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
  keyval = 0;
 80006fc:	4e6e      	ldr	r6, [pc, #440]	@ (80008b8 <prvButtonTask+0x248>)
  keystatus = 0;
 80006fe:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 80008d4 <prvButtonTask+0x264>
            keyflag.keypressed = 1;
            keyval = (KEY_STATUS_DOWN << 8) | tempkeyval;
          }else if(keyscancnt == KEY_TIME_PRESS_START){
            keystatus = KEY_STATUS_PRESS;
            keyflag.keypressed = 1;
            keyval = (KEY_STATUS_PRESS_START << 8) | tempkeyval;
 8000702:	f240 2101 	movw	r1, #513	@ 0x201
 8000706:	4313      	orrs	r3, r2
  keyscancnt = 0;
 8000708:	4d6c      	ldr	r5, [pc, #432]	@ (80008bc <prvButtonTask+0x24c>)
  keydoublecnt = 0;
 800070a:	4f6d      	ldr	r7, [pc, #436]	@ (80008c0 <prvButtonTask+0x250>)
 800070c:	6143      	str	r3, [r0, #20]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 800070e:	4b6d      	ldr	r3, [pc, #436]	@ (80008c4 <prvButtonTask+0x254>)
 8000710:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 80008d8 <prvButtonTask+0x268>
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800071a:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000722:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	2250      	movs	r2, #80	@ 0x50
 8000726:	4b68      	ldr	r3, [pc, #416]	@ (80008c8 <prvButtonTask+0x258>)
 8000728:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000730:	605a      	str	r2, [r3, #4]
  keyval = 0;
 8000732:	2300      	movs	r3, #0
  prevkeyval = 0;
 8000734:	4a65      	ldr	r2, [pc, #404]	@ (80008cc <prvButtonTask+0x25c>)
  keyval = 0;
 8000736:	6033      	str	r3, [r6, #0]
  prevkeyval = 0;
 8000738:	6013      	str	r3, [r2, #0]
  keystatus = 0;
 800073a:	f8ca 3000 	str.w	r3, [sl]
  keyscancnt = 0;
 800073e:	602b      	str	r3, [r5, #0]
  keyflag.keypressed = 0;
 8000740:	7023      	strb	r3, [r4, #0]
  keyflag.reserved = 0;
 8000742:	70a3      	strb	r3, [r4, #2]
  keyflag.bholdon = 0;
 8000744:	7063      	strb	r3, [r4, #1]
  keydoublecnt = 0;
 8000746:	603b      	str	r3, [r7, #0]
  if(keyflag.keypressed == 0){
 8000748:	7823      	ldrb	r3, [r4, #0]
 800074a:	bb8b      	cbnz	r3, 80007b0 <prvButtonTask+0x140>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800074c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  if(LL_GPIO_IsInputPinSet(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN) == 1)
 8000750:	f413 5300 	ands.w	r3, r3, #8192	@ 0x2000
 8000754:	d110      	bne.n	8000778 <prvButtonTask+0x108>
        default:
          //;keyscancnt = 0;
           break;
      }
    }else{
      keyflag.bholdon = 0;
 8000756:	7063      	strb	r3, [r4, #1]
      if(keyscancnt > KEY_TIME_PRESS_START){
 8000758:	6828      	ldr	r0, [r5, #0]
 800075a:	2814      	cmp	r0, #20
 800075c:	f200 8081 	bhi.w	8000862 <prvButtonTask+0x1f2>
        keyflag.keypressed = 1;
        keyval = (KEY_STATUS_LONG_UP << 8) | (keyval & 0x0003);
      }else if(keyscancnt > KEY_TIME_DOWN) {
 8000760:	6828      	ldr	r0, [r5, #0]
 8000762:	2802      	cmp	r0, #2
 8000764:	f240 8085 	bls.w	8000872 <prvButtonTask+0x202>
        keyflag.keypressed = 1;
 8000768:	2001      	movs	r0, #1
 800076a:	7020      	strb	r0, [r4, #0]
        keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x0003);
 800076c:	6830      	ldr	r0, [r6, #0]
 800076e:	f000 0003 	and.w	r0, r0, #3
 8000772:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8000776:	e07b      	b.n	8000870 <prvButtonTask+0x200>
      if (tempkeyval != prevkeyval){
 8000778:	6813      	ldr	r3, [r2, #0]
 800077a:	2b01      	cmp	r3, #1
        if(keyscancnt > KEY_TIME_PRESS_START){
 800077c:	682b      	ldr	r3, [r5, #0]
      if (tempkeyval != prevkeyval){
 800077e:	d04a      	beq.n	8000816 <prvButtonTask+0x1a6>
        if(keyscancnt > KEY_TIME_PRESS_START){
 8000780:	2b14      	cmp	r3, #20
 8000782:	f04f 0301 	mov.w	r3, #1
 8000786:	d93c      	bls.n	8000802 <prvButtonTask+0x192>
          keyflag.keypressed = 1;
 8000788:	7023      	strb	r3, [r4, #0]
          keyval = (KEY_STATUS_LONG_UP << 8) | (keyval & 0x00000003);
 800078a:	6833      	ldr	r3, [r6, #0]
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
          keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x00000003);
 8000794:	6033      	str	r3, [r6, #0]
        keyscancnt = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	602b      	str	r3, [r5, #0]
        keystatus = KEY_STATUS_DOWN;
 800079a:	2301      	movs	r3, #1
 800079c:	f8ca 3000 	str.w	r3, [sl]
      switch(keystatus){
 80007a0:	f8da 3000 	ldr.w	r3, [sl]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d03e      	beq.n	8000826 <prvButtonTask+0x1b6>
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d04c      	beq.n	8000846 <prvButtonTask+0x1d6>
    tempkeyval |= (1<<0);
 80007ac:	2301      	movs	r3, #1
        keydoublecnt--;

      keyscancnt = 0;
      keystatus = KEY_STATUS_NONE;
    }
    prevkeyval = tempkeyval;
 80007ae:	6013      	str	r3, [r2, #0]

static void keyproc(void)
{
  //uint32_t tempkeyval;

  if(keyflag.keypressed == 0)
 80007b0:	7823      	ldrb	r3, [r4, #0]
 80007b2:	b1fb      	cbz	r3, 80007f4 <prvButtonTask+0x184>
    return;
  else
    keyflag.keypressed = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	7023      	strb	r3, [r4, #0]

  if(keyflag.bholdon)
 80007b8:	7863      	ldrb	r3, [r4, #1]
 80007ba:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 80007be:	b9cb      	cbnz	r3, 80007f4 <prvButtonTask+0x184>
    return;

  switch (keyval)
 80007c0:	6833      	ldr	r3, [r6, #0]
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d06d      	beq.n	80008a2 <prvButtonTask+0x232>
 80007c6:	f240 4c01 	movw	ip, #1025	@ 0x401
 80007ca:	4563      	cmp	r3, ip
 80007cc:	d066      	beq.n	800089c <prvButtonTask+0x22c>
 80007ce:	f240 1c01 	movw	ip, #257	@ 0x101
 80007d2:	4563      	cmp	r3, ip
 80007d4:	d10e      	bne.n	80007f4 <prvButtonTask+0x184>
  {
    case KEY_VAL_KEY1_DOWN:
      if(keydoublecnt > 0)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d056      	beq.n	800088a <prvButtonTask+0x21a>
      {
        keydoublecnt = 0; //双击
 80007dc:	6038      	str	r0, [r7, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007de:	f8db 3014 	ldr.w	r3, [fp, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007e2:	0418      	lsls	r0, r3, #16
 80007e4:	43db      	mvns	r3, r3
 80007e6:	f000 4080 	and.w	r0, r0, #1073741824	@ 0x40000000
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	4303      	orrs	r3, r0
 80007f0:	f8cb 3018 	str.w	r3, [fp, #24]
    vTaskDelay(20);
 80007f4:	2014      	movs	r0, #20
 80007f6:	f008 f995 	bl	8008b24 <vTaskDelay>
  for(;;)
 80007fa:	4a34      	ldr	r2, [pc, #208]	@ (80008cc <prvButtonTask+0x25c>)
 80007fc:	f240 2101 	movw	r1, #513	@ 0x201
 8000800:	e7a2      	b.n	8000748 <prvButtonTask+0xd8>
        }else if(keyscancnt > KEY_TIME_DOWN){
 8000802:	6828      	ldr	r0, [r5, #0]
 8000804:	2802      	cmp	r0, #2
 8000806:	d9c6      	bls.n	8000796 <prvButtonTask+0x126>
          keyflag.keypressed = 1;
 8000808:	7023      	strb	r3, [r4, #0]
          keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x00000003);
 800080a:	6833      	ldr	r3, [r6, #0]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000814:	e7be      	b.n	8000794 <prvButtonTask+0x124>
        if(++keyscancnt == 0){
 8000816:	3301      	adds	r3, #1
 8000818:	602b      	str	r3, [r5, #0]
 800081a:	b913      	cbnz	r3, 8000822 <prvButtonTask+0x1b2>
          keyscancnt = KEY_TIME_PRESS_START + KEY_TIME_PRESS_STEP;
 800081c:	231a      	movs	r3, #26
 800081e:	602b      	str	r3, [r5, #0]
 8000820:	e7be      	b.n	80007a0 <prvButtonTask+0x130>
        }else if(keyscancnt == KEY_TIME_DOWN){
 8000822:	682b      	ldr	r3, [r5, #0]
 8000824:	e7bc      	b.n	80007a0 <prvButtonTask+0x130>
          if(keyscancnt == KEY_TIME_DOWN){
 8000826:	6828      	ldr	r0, [r5, #0]
 8000828:	2802      	cmp	r0, #2
 800082a:	d104      	bne.n	8000836 <prvButtonTask+0x1c6>
            keyflag.keypressed = 1;
 800082c:	7023      	strb	r3, [r4, #0]
            keyval = (KEY_STATUS_DOWN << 8) | tempkeyval;
 800082e:	f240 1301 	movw	r3, #257	@ 0x101
            keyval = (KEY_STATUS_PRESS << 8) | tempkeyval;
 8000832:	6033      	str	r3, [r6, #0]
 8000834:	e7ba      	b.n	80007ac <prvButtonTask+0x13c>
          }else if(keyscancnt == KEY_TIME_PRESS_START){
 8000836:	6828      	ldr	r0, [r5, #0]
 8000838:	2814      	cmp	r0, #20
 800083a:	d1b7      	bne.n	80007ac <prvButtonTask+0x13c>
            keystatus = KEY_STATUS_PRESS;
 800083c:	f8ca 9000 	str.w	r9, [sl]
            keyflag.keypressed = 1;
 8000840:	7023      	strb	r3, [r4, #0]
            keyval = (KEY_STATUS_PRESS_START << 8) | tempkeyval;
 8000842:	6031      	str	r1, [r6, #0]
 8000844:	e7b2      	b.n	80007ac <prvButtonTask+0x13c>
          if(((keyscancnt - KEY_TIME_PRESS_START) % KEY_TIME_PRESS_STEP) == 0){
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	2006      	movs	r0, #6
 800084a:	3b14      	subs	r3, #20
 800084c:	fbb3 fcf0 	udiv	ip, r3, r0
 8000850:	fb00 331c 	mls	r3, r0, ip, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1a9      	bne.n	80007ac <prvButtonTask+0x13c>
            keyflag.keypressed = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	7023      	strb	r3, [r4, #0]
            keyval = (KEY_STATUS_PRESS << 8) | tempkeyval;
 800085c:	f240 3301 	movw	r3, #769	@ 0x301
 8000860:	e7e7      	b.n	8000832 <prvButtonTask+0x1c2>
        keyflag.keypressed = 1;
 8000862:	2001      	movs	r0, #1
 8000864:	7020      	strb	r0, [r4, #0]
        keyval = (KEY_STATUS_LONG_UP << 8) | (keyval & 0x0003);
 8000866:	6830      	ldr	r0, [r6, #0]
 8000868:	f000 0003 	and.w	r0, r0, #3
 800086c:	f440 60a0 	orr.w	r0, r0, #1280	@ 0x500
        keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x0003);
 8000870:	6030      	str	r0, [r6, #0]
      if(keydoublecnt > 0)
 8000872:	6838      	ldr	r0, [r7, #0]
 8000874:	b110      	cbz	r0, 800087c <prvButtonTask+0x20c>
        keydoublecnt--;
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	3801      	subs	r0, #1
 800087a:	6038      	str	r0, [r7, #0]
      keyscancnt = 0;
 800087c:	2000      	movs	r0, #0
 800087e:	6028      	str	r0, [r5, #0]
      keystatus = KEY_STATUS_NONE;
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f8ca 0000 	str.w	r0, [sl]
 8000888:	e791      	b.n	80007ae <prvButtonTask+0x13e>
  uint32_t odr = READ_REG(GPIOx->ODR);
 800088a:	f8db 3014 	ldr.w	r3, [fp, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800088e:	0418      	lsls	r0, r3, #16
 8000890:	43db      	mvns	r3, r3
 8000892:	f400 0000 	and.w	r0, r0, #8388608	@ 0x800000
 8000896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089a:	e7a8      	b.n	80007ee <prvButtonTask+0x17e>
      //----------------------------------------
      LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
      break;

    case KEY_VAL_KEY1_SHORT_UP:
      keydoublecnt = KEY_TIME_DOUBLEDOWN;
 800089c:	2306      	movs	r3, #6
 800089e:	603b      	str	r3, [r7, #0]
      break;
 80008a0:	e7a8      	b.n	80007f4 <prvButtonTask+0x184>

    case KEY_VAL_KEY1_PRESS_START:
      keyflag.bholdon |= 1<<0;
 80008a2:	7863      	ldrb	r3, [r4, #1]
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	7063      	strb	r3, [r4, #1]
	  break;
 80008aa:	e7a3      	b.n	80007f4 <prvButtonTask+0x184>
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40013800 	.word	0x40013800
 80008b4:	20000238 	.word	0x20000238
 80008b8:	20000234 	.word	0x20000234
 80008bc:	20000228 	.word	0x20000228
 80008c0:	20000224 	.word	0x20000224
 80008c4:	40013c00 	.word	0x40013c00
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	20000230 	.word	0x20000230
 80008d0:	40020800 	.word	0x40020800
 80008d4:	2000022c 	.word	0x2000022c
 80008d8:	40020400 	.word	0x40020400

080008dc <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80008dc:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80008de:	b170      	cbz	r0, 80008fe <LAN8742_RegisterBusIO+0x22>
 80008e0:	68cc      	ldr	r4, [r1, #12]
 80008e2:	b164      	cbz	r4, 80008fe <LAN8742_RegisterBusIO+0x22>
 80008e4:	688a      	ldr	r2, [r1, #8]
 80008e6:	b152      	cbz	r2, 80008fe <LAN8742_RegisterBusIO+0x22>
 80008e8:	690b      	ldr	r3, [r1, #16]
 80008ea:	b143      	cbz	r3, 80008fe <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 80008ec:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80008ee:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80008f0:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80008f2:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 80008f4:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80008f6:	e9c0 2404 	strd	r2, r4, [r0, #16]

  return LAN8742_STATUS_OK;
 80008fa:	2000      	movs	r0, #0
}
 80008fc:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 80008fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000902:	e7fb      	b.n	80008fc <LAN8742_RegisterBusIO+0x20>

08000904 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000904:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8000906:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 8000908:	6845      	ldr	r5, [r0, #4]
 {
 800090a:	4604      	mov	r4, r0
   uint32_t regvalue = 0, addr = 0;
 800090c:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 800090e:	b9a5      	cbnz	r5, 800093a <LAN8742_Init+0x36>
   {
     if(pObj->IO.Init != 0)
 8000910:	6883      	ldr	r3, [r0, #8]
 8000912:	b103      	cbz	r3, 8000916 <LAN8742_Init+0x12>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000914:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000916:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8000918:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800091a:	6023      	str	r3, [r4, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800091c:	6963      	ldr	r3, [r4, #20]
 800091e:	aa01      	add	r2, sp, #4
 8000920:	2112      	movs	r1, #18
 8000922:	4628      	mov	r0, r5
 8000924:	4798      	blx	r3
 8000926:	2800      	cmp	r0, #0
 8000928:	db09      	blt.n	800093e <LAN8742_Init+0x3a>
         /* Can't read from this device address
            continue with next address */
         continue;
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800092a:	9b01      	ldr	r3, [sp, #4]
 800092c:	f003 031f 	and.w	r3, r3, #31
 8000930:	42ab      	cmp	r3, r5
 8000932:	d106      	bne.n	8000942 <LAN8742_Init+0x3e>
       {
         pObj->DevAddr = addr;
 8000934:	6025      	str	r5, [r4, #0]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       pObj->Is_Initialized = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	6063      	str	r3, [r4, #4]
   int32_t status = LAN8742_STATUS_OK;
 800093a:	2600      	movs	r6, #0
 800093c:	e009      	b.n	8000952 <LAN8742_Init+0x4e>
         status = LAN8742_STATUS_READ_ERROR;
 800093e:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000942:	3501      	adds	r5, #1
 8000944:	2d20      	cmp	r5, #32
 8000946:	d1e9      	bne.n	800091c <LAN8742_Init+0x18>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	2b1f      	cmp	r3, #31
 800094c:	d804      	bhi.n	8000958 <LAN8742_Init+0x54>
     if(status == LAN8742_STATUS_OK)
 800094e:	2e00      	cmp	r6, #0
 8000950:	d0f1      	beq.n	8000936 <LAN8742_Init+0x32>
     }
   }

   return status;
 }
 8000952:	4630      	mov	r0, r6
 8000954:	b002      	add	sp, #8
 8000956:	bd70      	pop	{r4, r5, r6, pc}
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000958:	f06f 0602 	mvn.w	r6, #2
   return status;
 800095c:	e7f9      	b.n	8000952 <LAN8742_Init+0x4e>

0800095e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800095e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 8000960:	2500      	movs	r5, #0

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000962:	6943      	ldr	r3, [r0, #20]
{
 8000964:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000966:	aa01      	add	r2, sp, #4
 8000968:	2101      	movs	r1, #1
 800096a:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 800096c:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800096e:	4798      	blx	r3
 8000970:	42a8      	cmp	r0, r5
 8000972:	da03      	bge.n	800097c <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000974:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 8000978:	b003      	add	sp, #12
 800097a:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	aa01      	add	r2, sp, #4
 8000980:	2101      	movs	r1, #1
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	4798      	blx	r3
 8000986:	2800      	cmp	r0, #0
 8000988:	dbf4      	blt.n	8000974 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800098a:	9b01      	ldr	r3, [sp, #4]
 800098c:	075b      	lsls	r3, r3, #29
 800098e:	d52c      	bpl.n	80009ea <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000990:	6963      	ldr	r3, [r4, #20]
 8000992:	aa01      	add	r2, sp, #4
 8000994:	4629      	mov	r1, r5
 8000996:	6820      	ldr	r0, [r4, #0]
 8000998:	4798      	blx	r3
 800099a:	2800      	cmp	r0, #0
 800099c:	dbea      	blt.n	8000974 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800099e:	9b01      	ldr	r3, [sp, #4]
 80009a0:	04dd      	lsls	r5, r3, #19
 80009a2:	d40e      	bmi.n	80009c2 <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80009a4:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 80009a8:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 80009ac:	d101      	bne.n	80009b2 <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80009ae:	2002      	movs	r0, #2
 80009b0:	e7e2      	b.n	8000978 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80009b2:	0498      	lsls	r0, r3, #18
 80009b4:	d501      	bpl.n	80009ba <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80009b6:	2003      	movs	r0, #3
 80009b8:	e7de      	b.n	8000978 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80009ba:	05d9      	lsls	r1, r3, #23
 80009bc:	d413      	bmi.n	80009e6 <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80009be:	2005      	movs	r0, #5
 80009c0:	e7da      	b.n	8000978 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80009c2:	6963      	ldr	r3, [r4, #20]
 80009c4:	aa01      	add	r2, sp, #4
 80009c6:	211f      	movs	r1, #31
 80009c8:	6820      	ldr	r0, [r4, #0]
 80009ca:	4798      	blx	r3
 80009cc:	2800      	cmp	r0, #0
 80009ce:	dbd1      	blt.n	8000974 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	04da      	lsls	r2, r3, #19
 80009d4:	d50b      	bpl.n	80009ee <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80009d6:	f003 031c 	and.w	r3, r3, #28
 80009da:	2b18      	cmp	r3, #24
 80009dc:	d0e7      	beq.n	80009ae <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d0e9      	beq.n	80009b6 <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80009e2:	2b14      	cmp	r3, #20
 80009e4:	d1eb      	bne.n	80009be <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80009e6:	2004      	movs	r0, #4
 80009e8:	e7c6      	b.n	8000978 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;
 80009ea:	2001      	movs	r0, #1
 80009ec:	e7c4      	b.n	8000978 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80009ee:	2006      	movs	r0, #6
 80009f0:	e7c2      	b.n	8000978 <LAN8742_GetLinkState+0x1a>

080009f2 <ethernet_link_status_updated>:
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif /* LWIP_DHCP */
  }
}
 80009f2:	4770      	bx	lr

080009f4 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80009f4:	2000      	movs	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <low_level_output>:
{
 80009f8:	b530      	push	{r4, r5, lr}
 80009fa:	b08d      	sub	sp, #52	@ 0x34
 80009fc:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80009fe:	2230      	movs	r2, #48	@ 0x30
 8000a00:	2100      	movs	r1, #0
 8000a02:	4668      	mov	r0, sp
 8000a04:	f014 f84e 	bl	8014aa4 <memset>
  for(q = p; q != NULL; q = q->next)
 8000a08:	466a      	mov	r2, sp
 8000a0a:	4623      	mov	r3, r4
  uint32_t i = 0U;
 8000a0c:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 8000a0e:	b9d3      	cbnz	r3, 8000a46 <low_level_output+0x4e>
  TxConfig.Length = p->tot_len;
 8000a10:	4d16      	ldr	r5, [pc, #88]	@ (8000a6c <low_level_output+0x74>)
  pbuf_ref(p);
 8000a12:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8000a14:	8923      	ldrh	r3, [r4, #8]
  TxConfig.pData = p;
 8000a16:	636c      	str	r4, [r5, #52]	@ 0x34
  while (xSemaphoreTake(TxPktSemaphore, portMAX_DELAY) != pdTRUE)
 8000a18:	4c15      	ldr	r4, [pc, #84]	@ (8000a70 <low_level_output+0x78>)
  TxConfig.Length = p->tot_len;
 8000a1a:	606b      	str	r3, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000a1c:	f8c5 d008 	str.w	sp, [r5, #8]
  pbuf_ref(p);
 8000a20:	f00d fa52 	bl	800dec8 <pbuf_ref>
  HAL_ETH_Transmit_IT(&EthHandle, &TxConfig);
 8000a24:	4629      	mov	r1, r5
 8000a26:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <low_level_output+0x7c>)
 8000a28:	f001 fbc7 	bl	80021ba <HAL_ETH_Transmit_IT>
  while (xSemaphoreTake(TxPktSemaphore, portMAX_DELAY) != pdTRUE)
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	6820      	ldr	r0, [r4, #0]
 8000a32:	f007 fb96 	bl	8008162 <xQueueSemaphoreTake>
 8000a36:	2801      	cmp	r0, #1
 8000a38:	d1f8      	bne.n	8000a2c <low_level_output+0x34>
  HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <low_level_output+0x7c>)
 8000a3c:	f001 fc5f 	bl	80022fe <HAL_ETH_ReleaseTxPacket>
  return errval;
 8000a40:	2000      	movs	r0, #0
}
 8000a42:	b00d      	add	sp, #52	@ 0x34
 8000a44:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 8000a46:	2904      	cmp	r1, #4
 8000a48:	d00c      	beq.n	8000a64 <low_level_output+0x6c>
    Txbuffer[i].buffer = q->payload;
 8000a4a:	6858      	ldr	r0, [r3, #4]
 8000a4c:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 8000a4e:	8958      	ldrh	r0, [r3, #10]
 8000a50:	6050      	str	r0, [r2, #4]
    if(i>0)
 8000a52:	b109      	cbz	r1, 8000a58 <low_level_output+0x60>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000a54:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	b903      	cbnz	r3, 8000a5e <low_level_output+0x66>
      Txbuffer[i].next = NULL;
 8000a5c:	6093      	str	r3, [r2, #8]
    i++;
 8000a5e:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 8000a60:	320c      	adds	r2, #12
 8000a62:	e7d4      	b.n	8000a0e <low_level_output+0x16>
      return ERR_IF;
 8000a64:	f06f 000b 	mvn.w	r0, #11
 8000a68:	e7eb      	b.n	8000a42 <low_level_output+0x4a>
 8000a6a:	bf00      	nop
 8000a6c:	2000025c 	.word	0x2000025c
 8000a70:	20000344 	.word	0x20000344
 8000a74:	20000294 	.word	0x20000294

08000a78 <RMII_Thread>:
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000a78:	4d10      	ldr	r5, [pc, #64]	@ (8000abc <RMII_Thread+0x44>)
      vTaskDelete(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000a7a:	4c11      	ldr	r4, [pc, #68]	@ (8000ac0 <RMII_Thread+0x48>)
{
 8000a7c:	b508      	push	{r3, lr}
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8000a84:	b11a      	cbz	r2, 8000a8e <RMII_Thread+0x16>
      vTaskDelete(NULL);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f007 fe3e 	bl	8008708 <vTaskDelete>
 8000a8c:	e7f7      	b.n	8000a7e <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 8000a8e:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 8000a92:	2a0a      	cmp	r2, #10
 8000a94:	d90e      	bls.n	8000ab4 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000a96:	6862      	ldr	r2, [r4, #4]
 8000a98:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000a9c:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8000a9e:	6862      	ldr	r2, [r4, #4]
 8000aa0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000aa4:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 8000aa6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000ab2:	e7e4      	b.n	8000a7e <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      vTaskDelay(200);
 8000ab4:	20c8      	movs	r0, #200	@ 0xc8
 8000ab6:	f008 f835 	bl	8008b24 <vTaskDelay>
 8000aba:	e7e0      	b.n	8000a7e <RMII_Thread+0x6>
 8000abc:	20000294 	.word	0x20000294
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <ETH_PHY_IO_Init+0xc>)
{
 8000ac6:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000ac8:	f001 fd76 	bl	80025b8 <HAL_ETH_SetMDIOClockRange>
}
 8000acc:	2000      	movs	r0, #0
 8000ace:	bd08      	pop	{r3, pc}
 8000ad0:	20000294 	.word	0x20000294

08000ad4 <ETH_PHY_IO_ReadReg>:
{
 8000ad4:	b508      	push	{r3, lr}
 8000ad6:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000ad8:	460a      	mov	r2, r1
 8000ada:	4601      	mov	r1, r0
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <ETH_PHY_IO_ReadReg+0x18>)
 8000ade:	f001 fcad 	bl	800243c <HAL_ETH_ReadPHYRegister>
 8000ae2:	3800      	subs	r0, #0
 8000ae4:	bf18      	it	ne
 8000ae6:	2001      	movne	r0, #1
}
 8000ae8:	4240      	negs	r0, r0
 8000aea:	bd08      	pop	{r3, pc}
 8000aec:	20000294 	.word	0x20000294

08000af0 <ETH_PHY_IO_WriteReg>:
{
 8000af0:	b508      	push	{r3, lr}
 8000af2:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000af4:	460a      	mov	r2, r1
 8000af6:	4601      	mov	r1, r0
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <ETH_PHY_IO_WriteReg+0x18>)
 8000afa:	f001 fcc6 	bl	800248a <HAL_ETH_WritePHYRegister>
 8000afe:	3800      	subs	r0, #0
 8000b00:	bf18      	it	ne
 8000b02:	2001      	movne	r0, #1
}
 8000b04:	4240      	negs	r0, r0
 8000b06:	bd08      	pop	{r3, pc}
 8000b08:	20000294 	.word	0x20000294

08000b0c <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 8000b0c:	f000 bf42 	b.w	8001994 <HAL_GetTick>

08000b10 <pbuf_free_custom>:
{
 8000b10:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <pbuf_free_custom+0x28>)
{
 8000b14:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000b16:	f00c fe7d 	bl	800d814 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <pbuf_free_custom+0x2c>)
 8000b1c:	7813      	ldrb	r3, [r2, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d109      	bne.n	8000b36 <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 8000b22:	2300      	movs	r3, #0
    xSemaphoreGive(RxPktSemaphore);
 8000b24:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <pbuf_free_custom+0x30>)
    RxAllocStatus = RX_ALLOC_OK;
 8000b26:	7013      	strb	r3, [r2, #0]
    xSemaphoreGive(RxPktSemaphore);
 8000b28:	4619      	mov	r1, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	6800      	ldr	r0, [r0, #0]
}
 8000b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xSemaphoreGive(RxPktSemaphore);
 8000b32:	f007 b91b 	b.w	8007d6c <xQueueGenericSend>
}
 8000b36:	bd10      	pop	{r4, pc}
 8000b38:	080183bc 	.word	0x080183bc
 8000b3c:	2000034c 	.word	0x2000034c
 8000b40:	20000348 	.word	0x20000348

08000b44 <ethernetif_input>:
{
 8000b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000b48:	4604      	mov	r4, r0
    if(xSemaphoreTake( RxPktSemaphore, TIME_WAITING_FOR_INPUT ) == pdTRUE)
 8000b4a:	4e11      	ldr	r6, [pc, #68]	@ (8000b90 <ethernetif_input+0x4c>)
  if(RxAllocStatus == RX_ALLOC_OK)
 8000b4c:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8000b94 <ethernetif_input+0x50>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000b50:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 8000b98 <ethernetif_input+0x54>
    if(xSemaphoreTake( RxPktSemaphore, TIME_WAITING_FOR_INPUT ) == pdTRUE)
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	6830      	ldr	r0, [r6, #0]
 8000b5a:	f007 fb02 	bl	8008162 <xQueueSemaphoreTake>
 8000b5e:	2801      	cmp	r0, #1
 8000b60:	d1f8      	bne.n	8000b54 <ethernetif_input+0x10>
  struct pbuf *p = NULL;
 8000b62:	2700      	movs	r7, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000b64:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8000b68:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8000b6a:	b91b      	cbnz	r3, 8000b74 <ethernetif_input+0x30>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000b6c:	a901      	add	r1, sp, #4
 8000b6e:	4648      	mov	r0, r9
 8000b70:	f001 fb51 	bl	8002216 <HAL_ETH_ReadData>
  return p;
 8000b74:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d0ec      	beq.n	8000b54 <ethernetif_input+0x10>
          if (netif->input( p, netif) != ERR_OK )
 8000b7a:	6923      	ldr	r3, [r4, #16]
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	4628      	mov	r0, r5
 8000b80:	4798      	blx	r3
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d0ee      	beq.n	8000b64 <ethernetif_input+0x20>
            pbuf_free(p);
 8000b86:	4628      	mov	r0, r5
 8000b88:	f00d f852 	bl	800dc30 <pbuf_free>
 8000b8c:	e7ea      	b.n	8000b64 <ethernetif_input+0x20>
 8000b8e:	bf00      	nop
 8000b90:	20000348 	.word	0x20000348
 8000b94:	2000034c 	.word	0x2000034c
 8000b98:	20000294 	.word	0x20000294

08000b9c <ethernetif_init>:
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000b9e:	4604      	mov	r4, r0
{
 8000ba0:	b09e      	sub	sp, #120	@ 0x78
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000ba2:	b930      	cbnz	r0, 8000bb2 <ethernetif_init+0x16>
 8000ba4:	4b59      	ldr	r3, [pc, #356]	@ (8000d0c <ethernetif_init+0x170>)
 8000ba6:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8000baa:	4959      	ldr	r1, [pc, #356]	@ (8000d10 <ethernetif_init+0x174>)
 8000bac:	4859      	ldr	r0, [pc, #356]	@ (8000d14 <ethernetif_init+0x178>)
 8000bae:	f013 fd73 	bl	8014698 <iprintf>
  netif->name[0] = IFNAME0;
 8000bb2:	f247 4373 	movw	r3, #29811	@ 0x7473
  ETH_MACConfigTypeDef MACConf = {0};
 8000bb6:	2264      	movs	r2, #100	@ 0x64
 8000bb8:	2100      	movs	r1, #0
 8000bba:	a805      	add	r0, sp, #20
  netif->name[0] = IFNAME0;
 8000bbc:	85e3      	strh	r3, [r4, #46]	@ 0x2e
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 8000bbe:	2500      	movs	r5, #0
  netif->output = etharp_output;
 8000bc0:	4b55      	ldr	r3, [pc, #340]	@ (8000d18 <ethernetif_init+0x17c>)
 8000bc2:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8000bc4:	4b55      	ldr	r3, [pc, #340]	@ (8000d1c <ethernetif_init+0x180>)
 8000bc6:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8000bc8:	f013 ff6c 	bl	8014aa4 <memset>
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 8000bcc:	2302      	movs	r3, #2
  EthHandle.Instance = ETH;
 8000bce:	4854      	ldr	r0, [pc, #336]	@ (8000d20 <ethernetif_init+0x184>)
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 8000bd0:	9303      	str	r3, [sp, #12]
  EthHandle.Instance = ETH;
 8000bd2:	4b54      	ldr	r3, [pc, #336]	@ (8000d24 <ethernetif_init+0x188>)
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 8000bd4:	f8ad 5010 	strh.w	r5, [sp, #16]
  EthHandle.Instance = ETH;
 8000bd8:	6003      	str	r3, [r0, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000bda:	ab03      	add	r3, sp, #12
 8000bdc:	6043      	str	r3, [r0, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bde:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000be2:	6083      	str	r3, [r0, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000be4:	4b50      	ldr	r3, [pc, #320]	@ (8000d28 <ethernetif_init+0x18c>)
 8000be6:	6103      	str	r3, [r0, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000be8:	4b50      	ldr	r3, [pc, #320]	@ (8000d2c <ethernetif_init+0x190>)
 8000bea:	60c3      	str	r3, [r0, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUF_SIZE;
 8000bec:	f44f 63bf 	mov.w	r3, #1528	@ 0x5f8
 8000bf0:	6143      	str	r3, [r0, #20]
  HAL_ETH_Init(&EthHandle);
 8000bf2:	f001 f961 	bl	8001eb8 <HAL_ETH_Init>
  netif->mtu = ETH_MAX_PAYLOAD;
 8000bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8000d30 <ethernetif_init+0x194>)
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000bf8:	484e      	ldr	r0, [pc, #312]	@ (8000d34 <ethernetif_init+0x198>)
  netif->hwaddr[2] =  MAC_ADDR2;
 8000bfa:	e9c4 3509 	strd	r3, r5, [r4, #36]	@ 0x24
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000c04:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8000c08:	f043 030a 	orr.w	r3, r3, #10
 8000c0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000c10:	f00c fdbc 	bl	800d78c <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c14:	4b48      	ldr	r3, [pc, #288]	@ (8000d38 <ethernetif_init+0x19c>)
 8000c16:	4629      	mov	r1, r5
 8000c18:	2234      	movs	r2, #52	@ 0x34
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f013 ff42 	bl	8014aa4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c20:	2221      	movs	r2, #33	@ 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000c22:	4629      	mov	r1, r5
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c24:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c28:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c2c:	6102      	str	r2, [r0, #16]
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000c2e:	2203      	movs	r2, #3
 8000c30:	2001      	movs	r0, #1
 8000c32:	f007 f86f 	bl	8007d14 <xQueueGenericCreate>
 8000c36:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <ethernetif_init+0x1a0>)
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000c38:	4629      	mov	r1, r5
 8000c3a:	2203      	movs	r2, #3
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000c3c:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f007 f868 	bl	8007d14 <xQueueGenericCreate>
 8000c44:	4b3e      	ldr	r3, [pc, #248]	@ (8000d40 <ethernetif_init+0x1a4>)
  xTaskCreate(ethernetif_input,		/* Function that implements the task. */
 8000c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c4a:	493e      	ldr	r1, [pc, #248]	@ (8000d44 <ethernetif_init+0x1a8>)
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000c4c:	6018      	str	r0, [r3, #0]
  xTaskCreate(ethernetif_input,		/* Function that implements the task. */
 8000c4e:	2303      	movs	r3, #3
 8000c50:	9501      	str	r5, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	483c      	ldr	r0, [pc, #240]	@ (8000d48 <ethernetif_init+0x1ac>)
 8000c58:	f007 fc6c 	bl	8008534 <xTaskCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000c5c:	493b      	ldr	r1, [pc, #236]	@ (8000d4c <ethernetif_init+0x1b0>)
 8000c5e:	483c      	ldr	r0, [pc, #240]	@ (8000d50 <ethernetif_init+0x1b4>)
 8000c60:	f7ff fe3c 	bl	80008dc <LAN8742_RegisterBusIO>
  PHYInit_result = LAN8742_Init(&LAN8742);
 8000c64:	483a      	ldr	r0, [pc, #232]	@ (8000d50 <ethernetif_init+0x1b4>)
 8000c66:	f7ff fe4d 	bl	8000904 <LAN8742_Init>
  if(PHYInit_result != LAN8742_STATUS_OK)
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	b190      	cbz	r0, 8000c94 <ethernetif_init+0xf8>
    netif_set_link_down(netif);
 8000c6e:	4620      	mov	r0, r4
    printf(PHYLinkStateStr[(uint8_t)(PHYInit_result + 5)]);
 8000c70:	3505      	adds	r5, #5
    netif_set_link_down(netif);
 8000c72:	f00c ff0f 	bl	800da94 <netif_set_link_down>
    netif_set_down(netif);
 8000c76:	4620      	mov	r0, r4
 8000c78:	f00c fee9 	bl	800da4e <netif_set_down>
    printf("STM32F7xx LAN8742 init status != OK ! ");
 8000c7c:	4835      	ldr	r0, [pc, #212]	@ (8000d54 <ethernetif_init+0x1b8>)
    printf(PHYLinkStateStr[(uint8_t)(PHYInit_result + 5)]);
 8000c7e:	b2ed      	uxtb	r5, r5
    printf("STM32F7xx LAN8742 init status != OK ! ");
 8000c80:	f013 fd0a 	bl	8014698 <iprintf>
    printf(PHYLinkStateStr[(uint8_t)(PHYInit_result + 5)]);
 8000c84:	4834      	ldr	r0, [pc, #208]	@ (8000d58 <ethernetif_init+0x1bc>)
 8000c86:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8000c8a:	f013 fd05 	bl	8014698 <iprintf>
}
 8000c8e:	2000      	movs	r0, #0
 8000c90:	b01e      	add	sp, #120	@ 0x78
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c94:	482e      	ldr	r0, [pc, #184]	@ (8000d50 <ethernetif_init+0x1b4>)
 8000c96:	f7ff fe62 	bl	800095e <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000c9a:	2801      	cmp	r0, #1
 8000c9c:	dc14      	bgt.n	8000cc8 <ethernetif_init+0x12c>
    netif_set_link_down(netif);
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f00c fef8 	bl	800da94 <netif_set_link_down>
    netif_set_down(netif);
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f00c fed2 	bl	800da4e <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 8000caa:	f000 fe8b 	bl	80019c4 <HAL_GetREVID>
 8000cae:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8000cb2:	d1ec      	bne.n	8000c8e <ethernetif_init+0xf2>
    xTaskCreate(RMII_Thread, 		/* Function that implements the task. */
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	4928      	ldr	r1, [pc, #160]	@ (8000d5c <ethernetif_init+0x1c0>)
 8000cba:	4829      	ldr	r0, [pc, #164]	@ (8000d60 <ethernetif_init+0x1c4>)
 8000cbc:	e9cd 2300 	strd	r2, r3, [sp]
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	f007 fc37 	bl	8008534 <xTaskCreate>
 8000cc6:	e7e2      	b.n	8000c8e <ethernetif_init+0xf2>
    switch (PHYLinkState)
 8000cc8:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000cca:	a905      	add	r1, sp, #20
 8000ccc:	2802      	cmp	r0, #2
 8000cce:	bf93      	iteet	ls
 8000cd0:	4b24      	ldrls	r3, [pc, #144]	@ (8000d64 <ethernetif_init+0x1c8>)
    switch (PHYLinkState)
 8000cd2:	f44f 4580 	movhi.w	r5, #16384	@ 0x4000
 8000cd6:	f44f 6600 	movhi.w	r6, #2048	@ 0x800
 8000cda:	f833 6010 	ldrhls.w	r6, [r3, r0, lsl #1]
 8000cde:	bf9c      	itt	ls
 8000ce0:	4b21      	ldrls	r3, [pc, #132]	@ (8000d68 <ethernetif_init+0x1cc>)
 8000ce2:	f833 5010 	ldrhls.w	r5, [r3, r0, lsl #1]
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000ce6:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <ethernetif_init+0x184>)
 8000ce8:	f001 fbf3 	bl	80024d2 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000cec:	a905      	add	r1, sp, #20
 8000cee:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <ethernetif_init+0x184>)
    MACConf.Speed = speed;
 8000cf0:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000cf4:	f001 fc53 	bl	800259e <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000cf8:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <ethernetif_init+0x184>)
 8000cfa:	f001 f9d9 	bl	80020b0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f00c fe98 	bl	800da34 <netif_set_up>
    netif_set_link_up(netif);
 8000d04:	4620      	mov	r0, r4
 8000d06:	f00c feb0 	bl	800da6a <netif_set_link_up>
 8000d0a:	e7ce      	b.n	8000caa <ethernetif_init+0x10e>
 8000d0c:	08015900 	.word	0x08015900
 8000d10:	08015919 	.word	0x08015919
 8000d14:	08015927 	.word	0x08015927
 8000d18:	080121c5 	.word	0x080121c5
 8000d1c:	080009f9 	.word	0x080009f9
 8000d20:	20000294 	.word	0x20000294
 8000d24:	40028000 	.word	0x40028000
 8000d28:	20000164 	.word	0x20000164
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	000205dc 	.word	0x000205dc
 8000d34:	080183bc 	.word	0x080183bc
 8000d38:	20000260 	.word	0x20000260
 8000d3c:	20000348 	.word	0x20000348
 8000d40:	20000344 	.word	0x20000344
 8000d44:	0801594f 	.word	0x0801594f
 8000d48:	08000b45 	.word	0x08000b45
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	2000023c 	.word	0x2000023c
 8000d54:	08015955 	.word	0x08015955
 8000d58:	0801825c 	.word	0x0801825c
 8000d5c:	0801597c 	.word	0x0801597c
 8000d60:	08000a79 	.word	0x08000a79
 8000d64:	08018256 	.word	0x08018256
 8000d68:	08018250 	.word	0x08018250

08000d6c <HAL_ETH_MspInit>:
{
 8000d6c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4c36      	ldr	r4, [pc, #216]	@ (8000e48 <HAL_ETH_MspInit+0xdc>)
{
 8000d70:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000d72:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d74:	4835      	ldr	r0, [pc, #212]	@ (8000e4c <HAL_ETH_MspInit+0xe0>)
 8000d76:	a907      	add	r1, sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000d78:	9509      	str	r5, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000da6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db6:	6323      	str	r3, [r4, #48]	@ 0x30
 8000db8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dbe:	9303      	str	r3, [sp, #12]
 8000dc0:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000dca:	230b      	movs	r3, #11
 8000dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000dce:	2386      	movs	r3, #134	@ 0x86
 8000dd0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000dd2:	f001 fc1f 	bl	8002614 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000dda:	a907      	add	r1, sp, #28
 8000ddc:	481c      	ldr	r0, [pc, #112]	@ (8000e50 <HAL_ETH_MspInit+0xe4>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000dde:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000de0:	f001 fc18 	bl	8002614 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000de4:	2332      	movs	r3, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000de6:	a907      	add	r1, sp, #28
 8000de8:	481a      	ldr	r0, [pc, #104]	@ (8000e54 <HAL_ETH_MspInit+0xe8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000dea:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000dec:	f001 fc12 	bl	8002614 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13;
 8000df0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000df4:	a907      	add	r1, sp, #28
 8000df6:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <HAL_ETH_MspInit+0xec>)
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13;
 8000df8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000dfa:	f001 fc0b 	bl	8002614 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000dfe:	462a      	mov	r2, r5
 8000e00:	2107      	movs	r1, #7
 8000e02:	203d      	movs	r0, #61	@ 0x3d
 8000e04:	f000 fdf6 	bl	80019f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000e08:	203d      	movs	r0, #61	@ 0x3d
 8000e0a:	f000 fe25 	bl	8001a58 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000e0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e14:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e1c:	9304      	str	r3, [sp, #16]
 8000e1e:	9b04      	ldr	r3, [sp, #16]
 8000e20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e26:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e2e:	9305      	str	r3, [sp, #20]
 8000e30:	9b05      	ldr	r3, [sp, #20]
 8000e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e40:	9306      	str	r3, [sp, #24]
 8000e42:	9b06      	ldr	r3, [sp, #24]
}
 8000e44:	b00d      	add	sp, #52	@ 0x34
 8000e46:	bd30      	pop	{r4, r5, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40021800 	.word	0x40021800

08000e5c <HAL_ETH_RxCpltCallback>:
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e5c:	2300      	movs	r3, #0
{
 8000e5e:	b507      	push	{r0, r1, r2, lr}
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e60:	9301      	str	r3, [sp, #4]
  xSemaphoreGiveFromISR(RxPktSemaphore, &xHigherPriorityTaskWoken);
 8000e62:	a901      	add	r1, sp, #4
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_ETH_RxCpltCallback+0x30>)
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f007 f86d 	bl	8007f46 <xQueueGiveFromISR>
  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000e6c:	9b01      	ldr	r3, [sp, #4]
 8000e6e:	b14b      	cbz	r3, 8000e84 <HAL_ETH_RxCpltCallback+0x28>
 8000e70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000e7c:	f3bf 8f4f 	dsb	sy
 8000e80:	f3bf 8f6f 	isb	sy
}
 8000e84:	b003      	add	sp, #12
 8000e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e8a:	bf00      	nop
 8000e8c:	20000348 	.word	0x20000348

08000e90 <HAL_ETH_TxCpltCallback>:
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e90:	2300      	movs	r3, #0
{
 8000e92:	b507      	push	{r0, r1, r2, lr}
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000e94:	9301      	str	r3, [sp, #4]
  xSemaphoreGiveFromISR(TxPktSemaphore, &xHigherPriorityTaskWoken);
 8000e96:	a901      	add	r1, sp, #4
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_ETH_TxCpltCallback+0x30>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f007 f853 	bl	8007f46 <xQueueGiveFromISR>
  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000ea0:	9b01      	ldr	r3, [sp, #4]
 8000ea2:	b14b      	cbz	r3, 8000eb8 <HAL_ETH_TxCpltCallback+0x28>
 8000ea4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000eac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000eb0:	f3bf 8f4f 	dsb	sy
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	b003      	add	sp, #12
 8000eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ebe:	bf00      	nop
 8000ec0:	20000344 	.word	0x20000344

08000ec4 <HAL_ETH_ErrorCallback>:
{
 8000ec4:	b507      	push	{r0, r1, r2, lr}
  if ((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8000ec6:	f001 fba1 	bl	800260c <HAL_ETH_GetDMAError>
 8000eca:	0603      	lsls	r3, r0, #24
 8000ecc:	d512      	bpl.n	8000ef4 <HAL_ETH_ErrorCallback+0x30>
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ece:	2300      	movs	r3, #0
    xSemaphoreGiveFromISR(RxPktSemaphore, &xHigherPriorityTaskWoken); // 释放一个信号量，带中断保护
 8000ed0:	a901      	add	r1, sp, #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ed2:	9301      	str	r3, [sp, #4]
    xSemaphoreGiveFromISR(RxPktSemaphore, &xHigherPriorityTaskWoken); // 释放一个信号量，带中断保护
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_ETH_ErrorCallback+0x38>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	f007 f835 	bl	8007f46 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);  // 使能PendSV中断
 8000edc:	9b01      	ldr	r3, [sp, #4]
 8000ede:	b14b      	cbz	r3, 8000ef4 <HAL_ETH_ErrorCallback+0x30>
 8000ee0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ee8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000eec:	f3bf 8f4f 	dsb	sy
 8000ef0:	f3bf 8f6f 	isb	sy
}
 8000ef4:	b003      	add	sp, #12
 8000ef6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000efa:	bf00      	nop
 8000efc:	20000348 	.word	0x20000348

08000f00 <ethernet_link_thread>:
{
 8000f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t PHYLinkStatetemp = 0;
 8000f04:	f04f 0900 	mov.w	r9, #0
{
 8000f08:	b09b      	sub	sp, #108	@ 0x6c
      printf("STM32F7xx PHYLink State : ");
 8000f0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 8000ff0 <ethernet_link_thread+0xf0>
{
 8000f0e:	4605      	mov	r5, r0
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000f10:	46c8      	mov	r8, r9
 8000f12:	464f      	mov	r7, r9
 8000f14:	464e      	mov	r6, r9
      printf(PHYLinkStateStr[(uint16_t)(PHYLinkState + 5)]);
 8000f16:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8000ff4 <ethernet_link_thread+0xf4>
  ETH_MACConfigTypeDef MACConf = {0};
 8000f1a:	2264      	movs	r2, #100	@ 0x64
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	a801      	add	r0, sp, #4
 8000f20:	f013 fdc0 	bl	8014aa4 <memset>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000f24:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <ethernet_link_thread+0xcc>)
 8000f26:	f7ff fd1a 	bl	800095e <LAN8742_GetLinkState>
    if(PHYLinkState != PHYLinkStatetemp)
 8000f2a:	4581      	cmp	r9, r0
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000f2c:	4604      	mov	r4, r0
    if(PHYLinkState != PHYLinkStatetemp)
 8000f2e:	d008      	beq.n	8000f42 <ethernet_link_thread+0x42>
      printf("STM32F7xx PHYLink State : ");
 8000f30:	4650      	mov	r0, sl
 8000f32:	f013 fbb1 	bl	8014698 <iprintf>
      printf(PHYLinkStateStr[(uint16_t)(PHYLinkState + 5)]);
 8000f36:	1d60      	adds	r0, r4, #5
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
 8000f3e:	f013 fbab 	bl	8014698 <iprintf>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000f42:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8000f46:	075a      	lsls	r2, r3, #29
 8000f48:	d518      	bpl.n	8000f7c <ethernet_link_thread+0x7c>
 8000f4a:	2c01      	cmp	r4, #1
 8000f4c:	dc14      	bgt.n	8000f78 <ethernet_link_thread+0x78>
      HAL_ETH_Stop_IT(&EthHandle);
 8000f4e:	4820      	ldr	r0, [pc, #128]	@ (8000fd0 <ethernet_link_thread+0xd0>)
 8000f50:	f001 f8ee 	bl	8002130 <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 8000f54:	2200      	movs	r2, #0
 8000f56:	491f      	ldr	r1, [pc, #124]	@ (8000fd4 <ethernet_link_thread+0xd4>)
 8000f58:	4628      	mov	r0, r5
 8000f5a:	f00b fc51 	bl	800c800 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	491d      	ldr	r1, [pc, #116]	@ (8000fd8 <ethernet_link_thread+0xd8>)
 8000f62:	4628      	mov	r0, r5
 8000f64:	f00b fc4c 	bl	800c800 <netifapi_netif_common>
      printf("ETH and netif down!!!\r\n");
 8000f68:	481c      	ldr	r0, [pc, #112]	@ (8000fdc <ethernet_link_thread+0xdc>)
 8000f6a:	f013 fbfd 	bl	8014768 <puts>
    vTaskDelay(100);
 8000f6e:	2064      	movs	r0, #100	@ 0x64
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000f70:	46a1      	mov	r9, r4
    vTaskDelay(100);
 8000f72:	f007 fdd7 	bl	8008b24 <vTaskDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000f76:	e7d5      	b.n	8000f24 <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000f78:	075b      	lsls	r3, r3, #29
 8000f7a:	d4f8      	bmi.n	8000f6e <ethernet_link_thread+0x6e>
 8000f7c:	2c01      	cmp	r4, #1
 8000f7e:	ddf6      	ble.n	8000f6e <ethernet_link_thread+0x6e>
      switch (PHYLinkState)
 8000f80:	1ea3      	subs	r3, r4, #2
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d81e      	bhi.n	8000fc4 <ethernet_link_thread+0xc4>
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <ethernet_link_thread+0xe0>)
 8000f88:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <ethernet_link_thread+0xe4>)
 8000f8e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000f92:	a901      	add	r1, sp, #4
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <ethernet_link_thread+0xd0>)
 8000f96:	f001 fa9c 	bl	80024d2 <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000f9a:	a901      	add	r1, sp, #4
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <ethernet_link_thread+0xd0>)
        netifapi_netif_set_link_up(netif);
 8000f9e:	2601      	movs	r6, #1
        MACConf.Speed = speed;
 8000fa0:	e9cd 7806 	strd	r7, r8, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000fa4:	f001 fafb 	bl	800259e <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000fa8:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <ethernet_link_thread+0xd0>)
 8000faa:	f001 f881 	bl	80020b0 <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <ethernet_link_thread+0xe8>)
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f00b fc24 	bl	800c800 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	490c      	ldr	r1, [pc, #48]	@ (8000fec <ethernet_link_thread+0xec>)
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f00b fc1f 	bl	800c800 <netifapi_netif_common>
 8000fc2:	e7d4      	b.n	8000f6e <ethernet_link_thread+0x6e>
      if(linkchanged)
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d0d2      	beq.n	8000f6e <ethernet_link_thread+0x6e>
 8000fc8:	e7e3      	b.n	8000f92 <ethernet_link_thread+0x92>
 8000fca:	bf00      	nop
 8000fcc:	2000023c 	.word	0x2000023c
 8000fd0:	20000294 	.word	0x20000294
 8000fd4:	0800da4f 	.word	0x0800da4f
 8000fd8:	0800da95 	.word	0x0800da95
 8000fdc:	080159a5 	.word	0x080159a5
 8000fe0:	08018248 	.word	0x08018248
 8000fe4:	08018240 	.word	0x08018240
 8000fe8:	0800da35 	.word	0x0800da35
 8000fec:	0800da6b 	.word	0x0800da6b
 8000ff0:	0801598a 	.word	0x0801598a
 8000ff4:	0801825c 	.word	0x0801825c

08000ff8 <HAL_ETH_RxAllocateCallback>:
{
 8000ff8:	b513      	push	{r0, r1, r4, lr}
 8000ffa:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <HAL_ETH_RxAllocateCallback+0x38>)
 8000ffe:	f00c fbe7 	bl	800d7d0 <memp_malloc_pool>
  if (p)
 8001002:	4603      	mov	r3, r0
 8001004:	b178      	cbz	r0, 8001026 <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001006:	f100 0214 	add.w	r2, r0, #20
    p->custom_free_function = pbuf_free_custom;
 800100a:	490a      	ldr	r1, [pc, #40]	@ (8001034 <HAL_ETH_RxAllocateCallback+0x3c>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800100c:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 800100e:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8001010:	f44f 61bf 	mov.w	r1, #1528	@ 0x5f8
 8001014:	e9cd 2100 	strd	r2, r1, [sp]
 8001018:	2100      	movs	r1, #0
 800101a:	2241      	movs	r2, #65	@ 0x41
 800101c:	4608      	mov	r0, r1
 800101e:	f00c fdbf 	bl	800dba0 <pbuf_alloced_custom>
}
 8001022:	b002      	add	sp, #8
 8001024:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8001026:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_ETH_RxAllocateCallback+0x40>)
 8001028:	2101      	movs	r1, #1
    *buff = NULL;
 800102a:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 800102c:	7011      	strb	r1, [r2, #0]
}
 800102e:	e7f8      	b.n	8001022 <HAL_ETH_RxAllocateCallback+0x2a>
 8001030:	080183bc 	.word	0x080183bc
 8001034:	08000b11 	.word	0x08000b11
 8001038:	2000034c 	.word	0x2000034c

0800103c <HAL_ETH_RxLinkCallback>:
{
 800103c:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 800103e:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001040:	f1a2 0414 	sub.w	r4, r2, #20
  p->len = Length;
 8001044:	f822 3c0a 	strh.w	r3, [r2, #-10]
  p->next = NULL;
 8001048:	f842 5c14 	str.w	r5, [r2, #-20]
  p->tot_len = 0;
 800104c:	f822 5c0c 	strh.w	r5, [r2, #-12]
  if (!*ppStart)
 8001050:	6802      	ldr	r2, [r0, #0]
 8001052:	b922      	cbnz	r2, 800105e <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 8001054:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 8001056:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 8001058:	6802      	ldr	r2, [r0, #0]
 800105a:	b91a      	cbnz	r2, 8001064 <HAL_ETH_RxLinkCallback+0x28>
}
 800105c:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 800105e:	680a      	ldr	r2, [r1, #0]
 8001060:	6014      	str	r4, [r2, #0]
 8001062:	e7f8      	b.n	8001056 <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8001064:	8911      	ldrh	r1, [r2, #8]
 8001066:	4419      	add	r1, r3
 8001068:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	e7f5      	b.n	800105a <HAL_ETH_RxLinkCallback+0x1e>

0800106e <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 800106e:	f00c bddf 	b.w	800dc30 <pbuf_free>
	...

08001074 <http_server_netconn_thread>:
  /* Bind to port 80 (HTTP) with default IP address */
#if LWIP_IPV6
  conn = netconn_new(NETCONN_TCP_IPV6);
  netconn_bind(conn, IP6_ADDR_ANY, 80);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_TCP);
 8001074:	2200      	movs	r2, #0
 8001076:	2010      	movs	r0, #16
{
 8001078:	b570      	push	{r4, r5, r6, lr}
  conn = netconn_new(NETCONN_TCP);
 800107a:	4611      	mov	r1, r2
{
 800107c:	b086      	sub	sp, #24
  conn = netconn_new(NETCONN_TCP);
 800107e:	f00a f9f7 	bl	800b470 <netconn_new_with_proto_and_callback>
 8001082:	4605      	mov	r5, r0
  netconn_bind(conn, IP_ADDR_ANY, 80);
 8001084:	2250      	movs	r2, #80	@ 0x50
 8001086:	4925      	ldr	r1, [pc, #148]	@ (800111c <http_server_netconn_thread+0xa8>)
 8001088:	f00a fa60 	bl	800b54c <netconn_bind>
#endif /* LWIP_IPV6 */
  LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 800108c:	2d00      	cmp	r5, #0
 800108e:	d042      	beq.n	8001116 <http_server_netconn_thread+0xa2>

  /* Put the connection into LISTEN state */
  netconn_listen(conn);
 8001090:	21ff      	movs	r1, #255	@ 0xff
 8001092:	4628      	mov	r0, r5
 8001094:	f00a fa74 	bl	800b580 <netconn_listen_with_backlog>
  } while(err == ERR_OK);
  */
  while(1) 
  {
	/* accept any icoming connection */
	err = netconn_accept(conn, &newconn);
 8001098:	a903      	add	r1, sp, #12
 800109a:	4628      	mov	r0, r5
 800109c:	f00a fafc 	bl	800b698 <netconn_accept>
	if(err == ERR_OK)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d1f9      	bne.n	8001098 <http_server_netconn_thread+0x24>
	{
	  /* serve connection */
	  http_server_netconn_serve(newconn);
 80010a4:	9e03      	ldr	r6, [sp, #12]
  err = netconn_recv(conn, &inbuf);
 80010a6:	a904      	add	r1, sp, #16
 80010a8:	4630      	mov	r0, r6
 80010aa:	f00a fbe7 	bl	800b87c <netconn_recv>
  if (err == ERR_OK) {
 80010ae:	4604      	mov	r4, r0
 80010b0:	bb38      	cbnz	r0, 8001102 <http_server_netconn_thread+0x8e>
    netbuf_data(inbuf, (void**)&buf, &buflen);
 80010b2:	f10d 020a 	add.w	r2, sp, #10
 80010b6:	a905      	add	r1, sp, #20
 80010b8:	9804      	ldr	r0, [sp, #16]
 80010ba:	f00b fb82 	bl	800c7c2 <netbuf_data>
    if (buflen>=5 &&
 80010be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d91d      	bls.n	8001102 <http_server_netconn_thread+0x8e>
        buf[0]=='G' &&
 80010c6:	9b05      	ldr	r3, [sp, #20]
    if (buflen>=5 &&
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	2a47      	cmp	r2, #71	@ 0x47
 80010cc:	d119      	bne.n	8001102 <http_server_netconn_thread+0x8e>
        buf[0]=='G' &&
 80010ce:	785a      	ldrb	r2, [r3, #1]
 80010d0:	2a45      	cmp	r2, #69	@ 0x45
 80010d2:	d116      	bne.n	8001102 <http_server_netconn_thread+0x8e>
        buf[1]=='E' &&
 80010d4:	789a      	ldrb	r2, [r3, #2]
 80010d6:	2a54      	cmp	r2, #84	@ 0x54
 80010d8:	d113      	bne.n	8001102 <http_server_netconn_thread+0x8e>
        buf[2]=='T' &&
 80010da:	78da      	ldrb	r2, [r3, #3]
 80010dc:	2a20      	cmp	r2, #32
 80010de:	d110      	bne.n	8001102 <http_server_netconn_thread+0x8e>
        buf[3]==' ' &&
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80010e4:	d10d      	bne.n	8001102 <http_server_netconn_thread+0x8e>
      netconn_write(conn, http_html_hdr, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
 80010e6:	4623      	mov	r3, r4
 80010e8:	222c      	movs	r2, #44	@ 0x2c
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <http_server_netconn_thread+0xac>)
 80010ec:	4630      	mov	r0, r6
 80010ee:	9400      	str	r4, [sp, #0]
 80010f0:	f00a fab4 	bl	800b65c <netconn_write_partly>
      netconn_write(conn, http_index_html, sizeof(http_index_html)-1, NETCONN_NOCOPY);
 80010f4:	4623      	mov	r3, r4
 80010f6:	22a3      	movs	r2, #163	@ 0xa3
 80010f8:	490a      	ldr	r1, [pc, #40]	@ (8001124 <http_server_netconn_thread+0xb0>)
 80010fa:	4630      	mov	r0, r6
 80010fc:	9400      	str	r4, [sp, #0]
 80010fe:	f00a faad 	bl	800b65c <netconn_write_partly>
  netconn_close(conn);
 8001102:	4630      	mov	r0, r6
 8001104:	f00a fab6 	bl	800b674 <netconn_close>
  netbuf_delete(inbuf);
 8001108:	9804      	ldr	r0, [sp, #16]
 800110a:	f00b fb49 	bl	800c7a0 <netbuf_delete>
	  /* delete connection */
	  netconn_delete(newconn);
 800110e:	9803      	ldr	r0, [sp, #12]
 8001110:	f00a fa0e 	bl	800b530 <netconn_delete>
 8001114:	e7c0      	b.n	8001098 <http_server_netconn_thread+0x24>
  LWIP_DEBUGF(HTTPD_DEBUG,
    ("http_server_netconn_thread: netconn_accept received error %d, shutting down\n",
    err));
  netconn_close(conn);
  netconn_delete(conn);
}
 8001116:	b006      	add	sp, #24
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	bf00      	nop
 800111c:	0808ed34 	.word	0x0808ed34
 8001120:	0801846c 	.word	0x0801846c
 8001124:	080183c8 	.word	0x080183c8

08001128 <http_server_netconn_init>:

/** Initialize the HTTP server (start its thread) */
void http_server_netconn_init(void)
{
  sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);
 8001128:	2301      	movs	r3, #1
{
 800112a:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);
 800112c:	2200      	movs	r2, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4904      	ldr	r1, [pc, #16]	@ (8001144 <http_server_netconn_init+0x1c>)
 8001132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001136:	4804      	ldr	r0, [pc, #16]	@ (8001148 <http_server_netconn_init+0x20>)
 8001138:	f012 fa46 	bl	80135c8 <sys_thread_new>
}
 800113c:	b003      	add	sp, #12
 800113e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001142:	bf00      	nop
 8001144:	08001075 	.word	0x08001075
 8001148:	080159bc 	.word	0x080159bc

0800114c <lwiperf_report>:
#include "lwiperf_example.h"

static void lwiperf_report(void *arg, enum lwiperf_report_type report_type,
  const ip_addr_t* local_addr, u16_t local_port, const ip_addr_t* remote_addr, u16_t remote_port,
  u32_t bytes_transferred, u32_t ms_duration, u32_t bandwidth_kbitpsec)
{
 800114c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001150:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8001154:	460c      	mov	r4, r1
 8001156:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(local_addr);
  LWIP_UNUSED_ARG(local_port);

  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 800115a:	9806      	ldr	r0, [sp, #24]
{
 800115c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 8001160:	f011 fbb6 	bl	80128d0 <ip4addr_ntoa>
 8001164:	462b      	mov	r3, r5
 8001166:	4602      	mov	r2, r0
 8001168:	4621      	mov	r1, r4
 800116a:	9606      	str	r6, [sp, #24]
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <lwiperf_report+0x30>)
 800116e:	e9cd 7807 	strd	r7, r8, [sp, #28]
    (int)report_type, ipaddr_ntoa(remote_addr), (int)remote_port, bytes_transferred, ms_duration, bandwidth_kbitpsec));
}
 8001172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 8001176:	f013 ba8f 	b.w	8014698 <iprintf>
 800117a:	bf00      	nop
 800117c:	080159d0 	.word	0x080159d0

08001180 <lwiperf_example_init>:

void lwiperf_example_init(void)
{
  lwiperf_start_tcp_server_default(lwiperf_report, NULL);
 8001180:	2100      	movs	r1, #0
 8001182:	4801      	ldr	r0, [pc, #4]	@ (8001188 <lwiperf_example_init+0x8>)
 8001184:	f00b bff2 	b.w	800d16c <lwiperf_start_tcp_server_default>
 8001188:	0800114d 	.word	0x0800114d

0800118c <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 800118e:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001192:	4302      	orrs	r2, r0
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4003      	ands	r3, r0
 800119a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800119c:	9b01      	ldr	r3, [sp, #4]
}
 800119e:	b002      	add	sp, #8
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <lwipinitTask>:
#endif
}
void lwipinitTask( void *pvParameters )
{
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80011a8:	2100      	movs	r1, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80011aa:	2400      	movs	r4, #0
{
 80011ac:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 80011ae:	4608      	mov	r0, r1
{
 80011b0:	b089      	sub	sp, #36	@ 0x24
  tcpip_init(NULL, NULL);
 80011b2:	f00b fbf7 	bl	800c9a4 <tcpip_init>
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <lwipinitTask+0x6c>)
 80011b8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80011bc:	a905      	add	r1, sp, #20
 80011be:	4816      	ldr	r0, [pc, #88]	@ (8001218 <lwipinitTask+0x70>)
 80011c0:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 80011c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80011c6:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80011ca:	aa06      	add	r2, sp, #24
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80011cc:	33c1      	adds	r3, #193	@ 0xc1
 80011ce:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <lwipinitTask+0x74>)
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <lwipinitTask+0x78>)
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	ab07      	add	r3, sp, #28
 80011da:	f00c fba7 	bl	800d92c <netif_add>
  netif_set_default(&gnetif);
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <lwipinitTask+0x70>)
 80011e0:	f00c fc22 	bl	800da28 <netif_set_default>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80011e4:	490f      	ldr	r1, [pc, #60]	@ (8001224 <lwipinitTask+0x7c>)
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <lwipinitTask+0x70>)
 80011e8:	f00c fc61 	bl	800daae <netif_set_link_callback>
  ethernet_link_status_updated(&gnetif);
 80011ec:	480a      	ldr	r0, [pc, #40]	@ (8001218 <lwipinitTask+0x70>)
 80011ee:	f7ff fc00 	bl	80009f2 <ethernet_link_status_updated>
  xTaskCreate(ethernet_link_thread, "EthLink", configMINIMAL_STACK_SIZE * 2, &gnetif, 0, NULL);
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <lwipinitTask+0x70>)
 80011f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f8:	490b      	ldr	r1, [pc, #44]	@ (8001228 <lwipinitTask+0x80>)
 80011fa:	480c      	ldr	r0, [pc, #48]	@ (800122c <lwipinitTask+0x84>)
 80011fc:	e9cd 4400 	strd	r4, r4, [sp]
 8001200:	f007 f998 	bl	8008534 <xTaskCreate>
  /* Initialize the LwIP stack  and io init*/
  netif_config();
  /* Initialize webserver demo */
  http_server_netconn_init();
 8001204:	f7ff ff90 	bl	8001128 <http_server_netconn_init>
  /* Initialize tpcserver demo 性能测试 */
  lwiperf_example_init();
 8001208:	f7ff ffba 	bl	8001180 <lwiperf_example_init>
  for (;;)
  {
    /* Delete the Init Thread */
    vTaskDelete(NULL);
 800120c:	2000      	movs	r0, #0
 800120e:	f007 fa7b 	bl	8008708 <vTaskDelete>
  for (;;)
 8001212:	e7fb      	b.n	800120c <lwipinitTask+0x64>
 8001214:	0a00a8c0 	.word	0x0a00a8c0
 8001218:	20004020 	.word	0x20004020
 800121c:	0800c945 	.word	0x0800c945
 8001220:	08000b9d 	.word	0x08000b9d
 8001224:	080009f3 	.word	0x080009f3
 8001228:	08015a2b 	.word	0x08015a2b
 800122c:	08000f01 	.word	0x08000f01

08001230 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001230:	4a35      	ldr	r2, [pc, #212]	@ (8001308 <SystemClock_Config+0xd8>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	f043 0307 	orr.w	r3, r3, #7
{
 800123c:	b510      	push	{r4, lr}
 800123e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_7)
 8001246:	2b07      	cmp	r3, #7
 8001248:	d1fa      	bne.n	8001240 <SystemClock_Config+0x10>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <SystemClock_Config+0xdc>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001252:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800125a:	601a      	str	r2, [r3, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800125c:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001266:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800126a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001274:	681a      	ldr	r2, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 8001276:	0790      	lsls	r0, r2, #30
 8001278:	d5fc      	bpl.n	8001274 <SystemClock_Config+0x44>
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	4a24      	ldr	r2, [pc, #144]	@ (8001310 <SystemClock_Config+0xe0>)
 800127e:	400a      	ands	r2, r1
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8001280:	4924      	ldr	r1, [pc, #144]	@ (8001314 <SystemClock_Config+0xe4>)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8001282:	f442 5258 	orr.w	r2, r2, #13824	@ 0x3600
 8001286:	f042 0208 	orr.w	r2, r2, #8
 800128a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4011      	ands	r1, r2
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <SystemClock_Config+0xe8>)
 8001292:	430a      	orrs	r2, r1
 8001294:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800129c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <SystemClock_Config+0xec>)
 80012a0:	681a      	ldr	r2, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 80012a2:	0191      	lsls	r1, r2, #6
 80012a4:	d5fc      	bpl.n	80012a0 <SystemClock_Config+0x70>
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 80012a6:	4919      	ldr	r1, [pc, #100]	@ (800130c <SystemClock_Config+0xdc>)
 80012a8:	684a      	ldr	r2, [r1, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80012aa:	0452      	lsls	r2, r2, #17
 80012ac:	d5fc      	bpl.n	80012a8 <SystemClock_Config+0x78>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012ae:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012b0:	4c1a      	ldr	r4, [pc, #104]	@ (800131c <SystemClock_Config+0xec>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012b2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80012b6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80012be:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 80012c2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80012ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012ce:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	f022 0203 	bic.w	r2, r2, #3
 80012d6:	f042 0202 	orr.w	r2, r2, #2
 80012da:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012dc:	68a3      	ldr	r3, [r4, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d1fa      	bne.n	80012dc <SystemClock_Config+0xac>
  LL_SetSystemCoreClock(216000000);
 80012e6:	480e      	ldr	r0, [pc, #56]	@ (8001320 <SystemClock_Config+0xf0>)
 80012e8:	f001 fef0 	bl	80030cc <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80012ec:	200f      	movs	r0, #15
 80012ee:	f000 fa21 	bl	8001734 <HAL_InitTick>
 80012f2:	b108      	cbz	r0, 80012f8 <SystemClock_Config+0xc8>
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <SystemClock_Config+0xc6>
  MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE, Prescaler);
 80012f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80012fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001300:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
}
 8001304:	bd10      	pop	{r4, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00
 800130c:	40007000 	.word	0x40007000
 8001310:	ffbc8000 	.word	0xffbc8000
 8001314:	f0bf8000 	.word	0xf0bf8000
 8001318:	09003608 	.word	0x09003608
 800131c:	40023800 	.word	0x40023800
 8001320:	0cdfe600 	.word	0x0cdfe600

08001324 <MX_LED_Init>:
{
 8001324:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001326:	4d0c      	ldr	r5, [pc, #48]	@ (8001358 <MX_LED_Init+0x34>)
  LED1_GPIO_CLK_ENABLE();
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff ff2f 	bl	800118c <LL_AHB1_GRP1_EnableClock>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	2201      	movs	r2, #1
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	fa92 f0a2 	rbit	r0, r2
 8001336:	fab0 f080 	clz	r0, r0
 800133a:	fa92 f1a2 	rbit	r1, r2
 800133e:	2403      	movs	r4, #3
 8001340:	4090      	lsls	r0, r2
 8001342:	fab1 f181 	clz	r1, r1
 8001346:	fa04 f000 	lsl.w	r0, r4, r0
 800134a:	4091      	lsls	r1, r2
 800134c:	ea23 0300 	bic.w	r3, r3, r0
 8001350:	408a      	lsls	r2, r1
 8001352:	4313      	orrs	r3, r2
 8001354:	602b      	str	r3, [r5, #0]
}
 8001356:	bd38      	pop	{r3, r4, r5, pc}
 8001358:	40020400 	.word	0x40020400

0800135c <main>:
{
 800135c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001360:	b091      	sub	sp, #68	@ 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001362:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8001364:	f000 fb86 	bl	8001a74 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001368:	2301      	movs	r3, #1
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800136a:	f240 1501 	movw	r5, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800136e:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001370:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001374:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001378:	950c      	str	r5, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800137a:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800137e:	f000 fb97 	bl	8001ab0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001382:	4abc      	ldr	r2, [pc, #752]	@ (8001674 <main+0x318>)
 8001384:	4bbc      	ldr	r3, [pc, #752]	@ (8001678 <main+0x31c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001386:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001388:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800138c:	940c      	str	r4, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800138e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001392:	f000 fb8d 	bl	8001ab0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001396:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB; //MPU_REGION_SIZE_1KB
 800139a:	49b8      	ldr	r1, [pc, #736]	@ (800167c <main+0x320>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800139c:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800139e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB; //MPU_REGION_SIZE_1KB
 80013a2:	4bb7      	ldr	r3, [pc, #732]	@ (8001680 <main+0x324>)
 80013a4:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013a8:	f04f 2301 	mov.w	r3, #16777472	@ 0x1000100
 80013ac:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013ae:	f000 fb7f 	bl	8001ab0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013b2:	2004      	movs	r0, #4
 80013b4:	f000 fb6c 	bl	8001a90 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 80013b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013bc:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013c0:	4ab0      	ldr	r2, [pc, #704]	@ (8001684 <main+0x328>)
 80013c2:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013ca:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013ce:	6953      	ldr	r3, [r2, #20]
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013da:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80013de:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80013e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80013e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013ea:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013ee:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80013f2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80013f6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013f8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80013fc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80013fe:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001402:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001404:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8001408:	d2f9      	bcs.n	80013fe <main+0xa2>
    } while(sets-- != 0U);
 800140a:	3b20      	subs	r3, #32
 800140c:	f113 0f20 	cmn.w	r3, #32
 8001410:	d1f2      	bne.n	80013f8 <main+0x9c>
 8001412:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001416:	6953      	ldr	r3, [r2, #20]
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001422:	f3bf 8f6f 	isb	sy
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001426:	2400      	movs	r4, #0
  HAL_Init();
 8001428:	f000 fa9d 	bl	8001966 <HAL_Init>
  SystemClock_Config();
 800142c:	f7ff ff00 	bl	8001230 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	2218      	movs	r2, #24
 8001432:	4621      	mov	r1, r4
 8001434:	a809      	add	r0, sp, #36	@ 0x24
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001436:	f88d 4013 	strb.w	r4, [sp, #19]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f013 fb33 	bl	8014aa4 <memset>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800143e:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001440:	4d91      	ldr	r5, [pc, #580]	@ (8001688 <main+0x32c>)
 8001442:	f7ff fea3 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001446:	2080      	movs	r0, #128	@ 0x80
 8001448:	f7ff fea0 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff fe9d 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001452:	2002      	movs	r0, #2
 8001454:	f7ff fe9a 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001458:	2008      	movs	r0, #8
 800145a:	f7ff fe97 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800145e:	2040      	movs	r0, #64	@ 0x40
 8001460:	f7ff fe94 	bl	800118c <LL_AHB1_GRP1_EnableClock>
 8001464:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001468:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 80016bc <main+0x360>
 800146c:	61ab      	str	r3, [r5, #24]
 800146e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001472:	4986      	ldr	r1, [pc, #536]	@ (800168c <main+0x330>)
 8001474:	61ab      	str	r3, [r5, #24]
 8001476:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800147a:	f8c9 3018 	str.w	r3, [r9, #24]
 800147e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001482:	61ab      	str	r3, [r5, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	23f0      	movs	r3, #240	@ 0xf0
 8001486:	694a      	ldr	r2, [r1, #20]
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	f04f 0802 	mov.w	r8, #2
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  EXTI_InitStruct.LineCommand = ENABLE;
 8001498:	2601      	movs	r6, #1
 800149a:	fa08 f303 	lsl.w	r3, r8, r3
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800149e:	f44f 5a00 	mov.w	sl, #8192	@ 0x2000
  LL_EXTI_Init(&EXTI_InitStruct);
 80014a2:	a803      	add	r0, sp, #12
 80014a4:	4313      	orrs	r3, r2
 80014a6:	614b      	str	r3, [r1, #20]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80014a8:	f8cd a00c 	str.w	sl, [sp, #12]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014ac:	f8ad 6010 	strh.w	r6, [sp, #16]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014b0:	f88d 6012 	strb.w	r6, [sp, #18]
  LL_EXTI_Init(&EXTI_InitStruct);
 80014b4:	f001 fb36 	bl	8002b24 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80014b8:	4a75      	ldr	r2, [pc, #468]	@ (8001690 <main+0x334>)
 80014ba:	68d1      	ldr	r1, [r2, #12]
 80014bc:	fa9a f3aa 	rbit	r3, sl
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	2703      	movs	r7, #3
 80014c6:	40b3      	lsls	r3, r6
 80014c8:	fa07 f303 	lsl.w	r3, r7, r3
 80014cc:	ea21 0303 	bic.w	r3, r1, r3
 80014d0:	fa9a f1aa 	rbit	r1, sl
 80014d4:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014d6:	6811      	ldr	r1, [r2, #0]
 80014d8:	fa9a f3aa 	rbit	r3, sl
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	40b3      	lsls	r3, r6
 80014e2:	fa07 f303 	lsl.w	r3, r7, r3
 80014e6:	ea21 0303 	bic.w	r3, r1, r3
 80014ea:	fa9a faaa 	rbit	sl, sl
 80014ee:	6013      	str	r3, [r2, #0]
  LL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	a909      	add	r1, sp, #36	@ 0x24
 80014f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f4:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014f6:	f04f 0b40 	mov.w	fp, #64	@ 0x40
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014fa:	f04f 0a80 	mov.w	sl, #128	@ 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014fe:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001502:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f001 fb61 	bl	8002bcc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 800150a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800150e:	a909      	add	r1, sp, #36	@ 0x24
 8001510:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001512:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001514:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001518:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800151c:	f001 fb56 	bl	8002bcc <LL_GPIO_Init>
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001520:	a909      	add	r1, sp, #36	@ 0x24
 8001522:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001524:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001526:	e9cd b609 	strd	fp, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800152a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800152e:	f001 fb4d 	bl	8002bcc <LL_GPIO_Init>
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001532:	a909      	add	r1, sp, #36	@ 0x24
 8001534:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001536:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001538:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800153c:	e9cd a409 	strd	sl, r4, [sp, #36]	@ 0x24
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001540:	f001 fb44 	bl	8002bcc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001544:	2320      	movs	r3, #32
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001546:	a909      	add	r1, sp, #36	@ 0x24
 8001548:	4852      	ldr	r0, [pc, #328]	@ (8001694 <main+0x338>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800154a:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800154c:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001550:	e9cd 3809 	strd	r3, r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001554:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001558:	f001 fb38 	bl	8002bcc <LL_GPIO_Init>
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155c:	a909      	add	r1, sp, #36	@ 0x24
 800155e:	484d      	ldr	r0, [pc, #308]	@ (8001694 <main+0x338>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001560:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001564:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001568:	e9cd 490d 	strd	r4, r9, [sp, #52]	@ 0x34
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156c:	f001 fb2e 	bl	8002bcc <LL_GPIO_Init>
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001570:	a909      	add	r1, sp, #36	@ 0x24
 8001572:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001574:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001576:	e9cd a609 	strd	sl, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800157a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800157e:	f001 fb25 	bl	8002bcc <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001582:	f8c5 a018 	str.w	sl, [r5, #24]
  MX_LED_Init();
 8001586:	f7ff fecd 	bl	8001324 <MX_LED_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800158a:	221c      	movs	r2, #28
 800158c:	4621      	mov	r1, r4
 800158e:	a809      	add	r0, sp, #36	@ 0x24
 8001590:	f013 fa88 	bl	8014aa4 <memset>
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001594:	4b40      	ldr	r3, [pc, #256]	@ (8001698 <main+0x33c>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001596:	2008      	movs	r0, #8
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8001598:	a903      	add	r1, sp, #12
 800159a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  LL_USART_Init(USART3, &USART_InitStruct);
 800159e:	f5a5 35de 	sub.w	r5, r5, #113664	@ 0x1bc00
 80015a2:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80015a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR, Periphs);
 80015aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80015ba:	9b02      	ldr	r3, [sp, #8]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80015bc:	f7ff fde6 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Pin = STLK_RX_Pin;
 80015c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 80015c4:	4833      	ldr	r0, [pc, #204]	@ (8001694 <main+0x338>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015c6:	e9cd 3803 	strd	r3, r8, [sp, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015ca:	e9cd 7405 	strd	r7, r4, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80015ce:	e9cd 4907 	strd	r4, r9, [sp, #28]
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f001 fafb 	bl	8002bcc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_TX_Pin;
 80015d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  LL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 80015da:	a903      	add	r1, sp, #12
 80015dc:	482d      	ldr	r0, [pc, #180]	@ (8001694 <main+0x338>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015de:	e9cd 3803 	strd	r3, r8, [sp, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e2:	e9cd 7405 	strd	r7, r4, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80015e6:	e9cd 4907 	strd	r4, r9, [sp, #28]
  LL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f001 faef 	bl	8002bcc <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80015ee:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  LL_USART_Init(USART3, &USART_InitStruct);
 80015f2:	a909      	add	r1, sp, #36	@ 0x24
 80015f4:	4628      	mov	r0, r5
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80015f6:	940f      	str	r4, [sp, #60]	@ 0x3c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80015f8:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80015fc:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80015fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001602:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001606:	f001 fce3 	bl	8002fd0 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800160a:	686b      	ldr	r3, [r5, #4]
 800160c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001610:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001612:	68ab      	ldr	r3, [r5, #8]
 8001614:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001618:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800161a:	682b      	ldr	r3, [r5, #0]
 800161c:	4333      	orrs	r3, r6
 800161e:	602b      	str	r3, [r5, #0]
  sd_card_fatfs_test();
 8001620:	f002 fd3c 	bl	800409c <sd_card_fatfs_test>
  userShellInit();
 8001624:	f008 f982 	bl	800992c <userShellInit>
  xTaskCreate(prvButtonTask, 			/* Function that implements the task. */
 8001628:	4623      	mov	r3, r4
 800162a:	4652      	mov	r2, sl
 800162c:	491b      	ldr	r1, [pc, #108]	@ (800169c <main+0x340>)
 800162e:	481c      	ldr	r0, [pc, #112]	@ (80016a0 <main+0x344>)
 8001630:	e9cd 4400 	strd	r4, r4, [sp]
 8001634:	f006 ff7e 	bl	8008534 <xTaskCreate>
  xTaskCreate(prvLedBreathTask, 		/* Function that implements the task. */
 8001638:	4623      	mov	r3, r4
 800163a:	4652      	mov	r2, sl
 800163c:	4919      	ldr	r1, [pc, #100]	@ (80016a4 <main+0x348>)
 800163e:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <main+0x34c>)
 8001640:	e9cd 4400 	strd	r4, r4, [sp]
 8001644:	f006 ff76 	bl	8008534 <xTaskCreate>
  xTaskCreate(lwipinitTask, 			/* Function that implements the task. */
 8001648:	4623      	mov	r3, r4
 800164a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800164e:	4917      	ldr	r1, [pc, #92]	@ (80016ac <main+0x350>)
 8001650:	4817      	ldr	r0, [pc, #92]	@ (80016b0 <main+0x354>)
 8001652:	e9cd 4400 	strd	r4, r4, [sp]
 8001656:	f006 ff6d 	bl	8008534 <xTaskCreate>
  xTaskCreate(prvUSBappTask, 			/* Function that implements the task. */
 800165a:	4623      	mov	r3, r4
 800165c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001660:	4914      	ldr	r1, [pc, #80]	@ (80016b4 <main+0x358>)
 8001662:	4815      	ldr	r0, [pc, #84]	@ (80016b8 <main+0x35c>)
 8001664:	e9cd 4400 	strd	r4, r4, [sp]
 8001668:	f006 ff64 	bl	8008534 <xTaskCreate>
  vTaskStartScheduler();
 800166c:	f007 f8ac 	bl	80087c8 <vTaskStartScheduler>
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x314>
 8001672:	bf00      	nop
 8001674:	20078000 	.word	0x20078000
 8001678:	0301000d 	.word	0x0301000d
 800167c:	2007c000 	.word	0x2007c000
 8001680:	0300000d 	.word	0x0300000d
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	40020400 	.word	0x40020400
 800168c:	40013800 	.word	0x40013800
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40023800 	.word	0x40023800
 800169c:	08015a33 	.word	0x08015a33
 80016a0:	08000671 	.word	0x08000671
 80016a4:	08015a3e 	.word	0x08015a3e
 80016a8:	0800063d 	.word	0x0800063d
 80016ac:	08015a4c 	.word	0x08015a4c
 80016b0:	080011a9 	.word	0x080011a9
 80016b4:	08015a59 	.word	0x08015a59
 80016b8:	080142d5 	.word	0x080142d5
 80016bc:	40021800 	.word	0x40021800

080016c0 <UserButton_Callback>:
void UserButton_Callback(void)
 80016c0:	4770      	bx	lr

080016c2 <USART_TransferError_Callback>:
}
 80016c2:	4770      	bx	lr

080016c4 <vApplicationMallocFailedHook>:

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80016c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c8:	b672      	cpsid	i
 80016ca:	f383 8811 	msr	BASEPRI, r3
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	b662      	cpsie	i
	for( ;; );
 80016d8:	e7fe      	b.n	80016d8 <vApplicationMallocFailedHook+0x14>

080016da <vApplicationStackOverflowHook>:
 80016da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016de:	b672      	cpsid	i
 80016e0:	f383 8811 	msr	BASEPRI, r3
 80016e4:	f3bf 8f6f 	isb	sy
 80016e8:	f3bf 8f4f 	dsb	sy
 80016ec:	b662      	cpsie	i
	for( ;; );
 80016ee:	e7fe      	b.n	80016ee <vApplicationStackOverflowHook+0x14>

080016f0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM7)
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d101      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80016f8:	f000 b940 	b.w	800197c <HAL_IncTick>
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40001400 	.word	0x40001400

08001704 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_MspInit+0x2c>)
{
 8001706:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800170a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800170e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001712:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001716:	9200      	str	r2, [sp, #0]
 8001718:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800171c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001720:	645a      	str	r2, [r3, #68]	@ 0x44
 8001722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	b002      	add	sp, #8
 800172e:	4770      	bx	lr
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_InitTick>:
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <HAL_InitTick+0x88>)
 8001736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001738:	f042 0220 	orr.w	r2, r2, #32
{
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001740:	641a      	str	r2, [r3, #64]	@ 0x40
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8001744:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001746:	a901      	add	r1, sp, #4
 8001748:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001752:	f001 f859 	bl	8002808 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001756:	9b06      	ldr	r3, [sp, #24]
 8001758:	bb4b      	cbnz	r3, 80017ae <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800175a:	f001 f845 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800175e:	4e18      	ldr	r6, [pc, #96]	@ (80017c0 <HAL_InitTick+0x8c>)
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_InitTick+0x90>)
 8001762:	6033      	str	r3, [r6, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001764:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001768:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_InitTick+0x94>)
 800176c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001770:	3b01      	subs	r3, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 8001772:	4630      	mov	r0, r6
  htim7.Init.Prescaler = uwPrescalerValue;
 8001774:	6073      	str	r3, [r6, #4]
  htim7.Init.ClockDivision = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	6133      	str	r3, [r6, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	60b3      	str	r3, [r6, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim7);
 800177e:	f001 f99d 	bl	8002abc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001782:	4604      	mov	r4, r0
 8001784:	b980      	cbnz	r0, 80017a8 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001786:	4630      	mov	r0, r6
 8001788:	f001 f85e 	bl	8002848 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800178c:	4604      	mov	r4, r0
 800178e:	b958      	cbnz	r0, 80017a8 <HAL_InitTick+0x74>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001790:	2037      	movs	r0, #55	@ 0x37
 8001792:	f000 f961 	bl	8001a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	2d0f      	cmp	r5, #15
 8001798:	d80d      	bhi.n	80017b6 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800179a:	4622      	mov	r2, r4
 800179c:	4629      	mov	r1, r5
 800179e:	2037      	movs	r0, #55	@ 0x37
 80017a0:	f000 f928 	bl	80019f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_InitTick+0x98>)
 80017a6:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80017a8:	4620      	mov	r0, r4
 80017aa:	b008      	add	sp, #32
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ae:	f001 f81b 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 80017b2:	0040      	lsls	r0, r0, #1
 80017b4:	e7d3      	b.n	800175e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80017b6:	2401      	movs	r4, #1
 80017b8:	e7f6      	b.n	80017a8 <HAL_InitTick+0x74>
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	20004054 	.word	0x20004054
 80017c4:	40001400 	.word	0x40001400
 80017c8:	000f4240 	.word	0x000f4240
 80017cc:	2000001c 	.word	0x2000001c

080017d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler>

080017d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler>

080017d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler>
	...

080017d8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  //uint32_t ulReturn;

  //ulReturn = taskENTER_CRITICAL_FROM_ISR();
  USART_IRQHandler(USART2);
 80017d8:	4801      	ldr	r0, [pc, #4]	@ (80017e0 <USART2_IRQHandler+0x8>)
 80017da:	f008 bb63 	b.w	8009ea4 <USART_IRQHandler>
 80017de:	bf00      	nop
 80017e0:	40004400 	.word	0x40004400

080017e4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <BusFault_Handler>

080017e6 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <UsageFault_Handler>

080017e8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	4770      	bx	lr
	...

080017ec <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017ec:	4801      	ldr	r0, [pc, #4]	@ (80017f4 <TIM7_IRQHandler+0x8>)
 80017ee:	f001 b86d 	b.w	80028cc <HAL_TIM_IRQHandler>
 80017f2:	bf00      	nop
 80017f4:	20004054 	.word	0x20004054

080017f8 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <EXTI15_10_IRQHandler+0x14>)
 80017fa:	695a      	ldr	r2, [r3, #20]

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80017fc:	0492      	lsls	r2, r2, #18
 80017fe:	d504      	bpl.n	800180a <EXTI15_10_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001804:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);

    /* Handle user button press in dedicated function */
    UserButton_Callback();
 8001806:	f7ff bf5b 	b.w	80016c0 <UserButton_Callback>
  }
}
 800180a:	4770      	bx	lr
 800180c:	40013c00 	.word	0x40013c00

08001810 <DMA1_Stream6_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <DMA1_Stream6_IRQHandler+0x28>)
 8001812:	685a      	ldr	r2, [r3, #4]
  * @retval None
  */
void DMA1_Stream6_IRQHandler(void)
{

  if(LL_DMA_IsActiveFlag_TC6(DMA1))
 8001814:	0290      	lsls	r0, r2, #10
 8001816:	d506      	bpl.n	8001826 <DMA1_Stream6_IRQHandler+0x16>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001818:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800181c:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 800181e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001822:	60da      	str	r2, [r3, #12]
  else if(LL_DMA_IsActiveFlag_HT6(DMA1))
  {
    /* Call Error function */
    LL_DMA_ClearFlag_HT6(DMA1);
  }
}
 8001824:	e007      	b.n	8001836 <DMA1_Stream6_IRQHandler+0x26>
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
 8001826:	685a      	ldr	r2, [r3, #4]
  else if(LL_DMA_IsActiveFlag_TE6(DMA1))
 8001828:	0311      	lsls	r1, r2, #12
 800182a:	d501      	bpl.n	8001830 <DMA1_Stream6_IRQHandler+0x20>
    USART_TransferError_Callback();
 800182c:	f7ff bf49 	b.w	80016c2 <USART_TransferError_Callback>
  return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF6)==(DMA_HISR_HTIF6));
 8001830:	685a      	ldr	r2, [r3, #4]
  else if(LL_DMA_IsActiveFlag_HT6(DMA1))
 8001832:	02d2      	lsls	r2, r2, #11
 8001834:	d4f3      	bmi.n	800181e <DMA1_Stream6_IRQHandler+0xe>
}
 8001836:	4770      	bx	lr
 8001838:	40026000 	.word	0x40026000

0800183c <DMA1_Stream5_IRQHandler>:
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <DMA1_Stream5_IRQHandler+0x1c>)
 800183e:	685a      	ldr	r2, [r3, #4]
  * @retval None
  */
void DMA1_Stream5_IRQHandler(void)
{

  if(LL_DMA_IsActiveFlag_TC5(DMA1))
 8001840:	0512      	lsls	r2, r2, #20
 8001842:	d503      	bpl.n	800184c <DMA1_Stream5_IRQHandler+0x10>
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8001844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001848:	60da      	str	r2, [r3, #12]
}
 800184a:	4770      	bx	lr
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
 800184c:	685b      	ldr	r3, [r3, #4]
  {
    LL_DMA_ClearFlag_TC5(DMA1);
    /* Call function Reception complete Callback */
    //DMA1_ReceiveComplete_Callback();
  }
  else if(LL_DMA_IsActiveFlag_TE5(DMA1))
 800184e:	059b      	lsls	r3, r3, #22
 8001850:	d501      	bpl.n	8001856 <DMA1_Stream5_IRQHandler+0x1a>
  {
    /* Call Error function */
    USART_TransferError_Callback();
 8001852:	f7ff bf36 	b.w	80016c2 <USART_TransferError_Callback>
  }
}
 8001856:	4770      	bx	lr
 8001858:	40026000 	.word	0x40026000

0800185c <ETH_IRQHandler>:

extern ETH_HandleTypeDef EthHandle;
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 800185c:	4801      	ldr	r0, [pc, #4]	@ (8001864 <ETH_IRQHandler+0x8>)
 800185e:	f000 bd7f 	b.w	8002360 <HAL_ETH_IRQHandler>
 8001862:	bf00      	nop
 8001864:	20000294 	.word	0x20000294

08001868 <DMA2_Stream4_IRQHandler>:
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
//}

void DMA2_Stream4_IRQHandler(void)
 8001868:	4770      	bx	lr

0800186a <DMA2_Stream6_IRQHandler>:
//}

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
 800186a:	4770      	bx	lr

0800186c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800186c:	2001      	movs	r0, #1
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001872:	f013 f995 	bl	8014ba0 <__errno>
 8001876:	2316      	movs	r3, #22
 8001878:	6003      	str	r3, [r0, #0]
  return -1;
}
 800187a:	f04f 30ff 	mov.w	r0, #4294967295
 800187e:	bd08      	pop	{r3, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001882:	f013 f98d 	bl	8014ba0 <__errno>
 8001886:	2316      	movs	r3, #22
 8001888:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800188a:	e7fe      	b.n	800188a <_exit+0xa>

0800188c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	460d      	mov	r5, r1
 8001890:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	460e      	mov	r6, r1
 8001894:	1b73      	subs	r3, r6, r5
 8001896:	429c      	cmp	r4, r3
 8001898:	dc01      	bgt.n	800189e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800189a:	4620      	mov	r0, r4
 800189c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800189e:	f3af 8000 	nop.w
 80018a2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	e7f5      	b.n	8001894 <_read+0x8>

080018a8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	4770      	bx	lr

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80018b2:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80018b4:	604b      	str	r3, [r1, #4]
}
 80018b6:	4770      	bx	lr

080018b8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018b8:	2001      	movs	r0, #1
 80018ba:	4770      	bx	lr

080018bc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018bc:	2000      	movs	r0, #0
 80018be:	4770      	bx	lr

080018c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <_sbrk+0x30>)
{
 80018c2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80018c4:	6811      	ldr	r1, [r2, #0]
{
 80018c6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80018c8:	b909      	cbnz	r1, 80018ce <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <_sbrk+0x34>)
 80018cc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	6810      	ldr	r0, [r2, #0]
 80018d0:	4909      	ldr	r1, [pc, #36]	@ (80018f8 <_sbrk+0x38>)
 80018d2:	4c0a      	ldr	r4, [pc, #40]	@ (80018fc <_sbrk+0x3c>)
 80018d4:	4403      	add	r3, r0
 80018d6:	1b09      	subs	r1, r1, r4
 80018d8:	428b      	cmp	r3, r1
 80018da:	d906      	bls.n	80018ea <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80018dc:	f013 f960 	bl	8014ba0 <__errno>
 80018e0:	230c      	movs	r3, #12
 80018e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80018e8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80018ea:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80018ec:	e7fc      	b.n	80018e8 <_sbrk+0x28>
 80018ee:	bf00      	nop
 80018f0:	200040a0 	.word	0x200040a0
 80018f4:	2000f8c8 	.word	0x2000f8c8
 80018f8:	20080000 	.word	0x20080000
 80018fc:	00000400 	.word	0x00000400

08001900 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4a03      	ldr	r2, [pc, #12]	@ (8001910 <SystemInit+0x10>)
 8001902:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001906:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800190a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800194c <LoopFillZerobss+0xe>
 8001918:	f7ff fff2 	bl	8001900 <SystemInit>
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <LoopFillZerobss+0x12>)
 800191e:	490d      	ldr	r1, [pc, #52]	@ (8001954 <LoopFillZerobss+0x16>)
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <LoopFillZerobss+0x1a>)
 8001922:	2300      	movs	r3, #0
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:
 8001926:	58d4      	ldr	r4, [r2, r3]
 8001928:	50c4      	str	r4, [r0, r3]
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:
 800192c:	18c4      	adds	r4, r0, r3
 800192e:	428c      	cmp	r4, r1
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <LoopFillZerobss+0x1e>)
 8001934:	4c0a      	ldr	r4, [pc, #40]	@ (8001960 <LoopFillZerobss+0x22>)
 8001936:	2300      	movs	r3, #0
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:
 800193e:	42a2      	cmp	r2, r4
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>
 8001942:	f013 f933 	bl	8014bac <__libc_init_array>
 8001946:	f7ff fd09 	bl	800135c <main>
 800194a:	4770      	bx	lr
 800194c:	20080000 	.word	0x20080000
 8001950:	20000000 	.word	0x20000000
 8001954:	200000c4 	.word	0x200000c4
 8001958:	0808f028 	.word	0x0808f028
 800195c:	20000208 	.word	0x20000208
 8001960:	2000f8c8 	.word	0x2000f8c8

08001964 <ADC_IRQHandler>:
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>

08001966 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 f831 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	200f      	movs	r0, #15
 8001970:	f7ff fee0 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fec6 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001978:	2000      	movs	r0, #0
 800197a:	bd08      	pop	{r3, pc}

0800197c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800197c:	4a03      	ldr	r2, [pc, #12]	@ (800198c <HAL_IncTick+0x10>)
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <HAL_IncTick+0x14>)
 8001980:	6811      	ldr	r1, [r2, #0]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	440b      	add	r3, r1
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	200040a4 	.word	0x200040a4
 8001990:	20000018 	.word	0x20000018

08001994 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001994:	4b01      	ldr	r3, [pc, #4]	@ (800199c <HAL_GetTick+0x8>)
 8001996:	6818      	ldr	r0, [r3, #0]
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200040a4 	.word	0x200040a4

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fff6 	bl	8001994 <HAL_GetTick>
 80019a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80019ac:	bf1e      	ittt	ne
 80019ae:	4b04      	ldrne	r3, [pc, #16]	@ (80019c0 <HAL_Delay+0x20>)
 80019b0:	781b      	ldrbne	r3, [r3, #0]
 80019b2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	1b43      	subs	r3, r0, r5
 80019ba:	42a3      	cmp	r3, r4
 80019bc:	d3fa      	bcc.n	80019b4 <HAL_Delay+0x14>
  {
  }
}
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	20000018 	.word	0x20000018

080019c4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80019c4:	4b01      	ldr	r3, [pc, #4]	@ (80019cc <HAL_GetREVID+0x8>)
 80019c6:	6818      	ldr	r0, [r3, #0]
}
 80019c8:	0c00      	lsrs	r0, r0, #16
 80019ca:	4770      	bx	lr
 80019cc:	e0042000 	.word	0xe0042000

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019de:	0412      	lsls	r2, r2, #16
 80019e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80019ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b530      	push	{r4, r5, lr}
 80019f8:	68dc      	ldr	r4, [r3, #12]
 80019fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	bf28      	it	cs
 8001a08:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a10:	bf8c      	ite	hi
 8001a12:	3c03      	subhi	r4, #3
 8001a14:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a16:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	fa03 f304 	lsl.w	r3, r3, r4
 8001a2c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001a34:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001a36:	db06      	blt.n	8001a46 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a3c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a40:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a44:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	f000 000f 	and.w	r0, r0, #15
 8001a4a:	4a02      	ldr	r2, [pc, #8]	@ (8001a54 <HAL_NVIC_SetPriority+0x60>)
 8001a4c:	5413      	strb	r3, [r2, r0]
 8001a4e:	e7f9      	b.n	8001a44 <HAL_NVIC_SetPriority+0x50>
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	e000ed14 	.word	0xe000ed14

08001a58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	db07      	blt.n	8001a6c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5c:	0941      	lsrs	r1, r0, #5
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f000 001f 	and.w	r0, r0, #31
 8001a64:	4a02      	ldr	r2, [pc, #8]	@ (8001a70 <HAL_NVIC_EnableIRQ+0x18>)
 8001a66:	4083      	lsls	r3, r0
 8001a68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001a74:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <HAL_MPU_Disable+0x18>)
 8001a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a7c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_MPU_Enable+0x1c>)
 8001a92:	f040 0001 	orr.w	r0, r0, #1
 8001a96:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aa6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ab0:	7843      	ldrb	r3, [r0, #1]
 8001ab2:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <HAL_MPU_ConfigRegion+0x54>)
 8001ab4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ab8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ac4:	6843      	ldr	r3, [r0, #4]
 8001ac6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aca:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001acc:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ace:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ad0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ad4:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ad6:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ad8:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ada:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ade:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ae0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ae4:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ae6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aea:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001af0:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001af2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001af6:	7a01      	ldrb	r1, [r0, #8]
 8001af8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001afc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8001b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001b0c:	6a85      	ldr	r5, [r0, #40]	@ 0x28
{
 8001b0e:	4691      	mov	r9, r2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001b10:	688c      	ldr	r4, [r1, #8]
 8001b12:	eb00 0685 	add.w	r6, r0, r5, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b16:	69b3      	ldr	r3, [r6, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001b18:	681f      	ldr	r7, [r3, #0]
 8001b1a:	2f00      	cmp	r7, #0
 8001b1c:	da02      	bge.n	8001b24 <ETH_Prepare_Tx_Descriptors+0x1c>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 8001b1e:	2002      	movs	r0, #2
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8001b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001b24:	6af7      	ldr	r7, [r6, #44]	@ 0x2c
 8001b26:	2f00      	cmp	r7, #0
 8001b28:	d1f9      	bne.n	8001b1e <ETH_Prepare_Tx_Descriptors+0x16>
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001b2a:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b2c:	6862      	ldr	r2, [r4, #4]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001b2e:	609f      	str	r7, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b30:	685f      	ldr	r7, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001b32:	f8d1 c000 	ldr.w	ip, [r1]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b36:	f36f 070c 	bfc	r7, #0, #13
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001b3a:	f01c 0f01 	tst.w	ip, #1
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b3e:	ea47 0702 	orr.w	r7, r7, r2
 8001b42:	605f      	str	r7, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001b44:	d005      	beq.n	8001b52 <ETH_Prepare_Tx_Descriptors+0x4a>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001b46:	681f      	ldr	r7, [r3, #0]
 8001b48:	694a      	ldr	r2, [r1, #20]
 8001b4a:	f427 0740 	bic.w	r7, r7, #12582912	@ 0xc00000
 8001b4e:	4317      	orrs	r7, r2
 8001b50:	601f      	str	r7, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001b52:	f01c 0f20 	tst.w	ip, #32
 8001b56:	d005      	beq.n	8001b64 <ETH_Prepare_Tx_Descriptors+0x5c>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001b58:	681f      	ldr	r7, [r3, #0]
 8001b5a:	6909      	ldr	r1, [r1, #16]
 8001b5c:	f027 6740 	bic.w	r7, r7, #201326592	@ 0xc000000
 8001b60:	4339      	orrs	r1, r7
 8001b62:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001b64:	f01c 0f04 	tst.w	ip, #4
 8001b68:	d003      	beq.n	8001b72 <ETH_Prepare_Tx_Descriptors+0x6a>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001b70:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001b72:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 8001b74:	2700      	movs	r7, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b76:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8001c68 <ETH_Prepare_Tx_Descriptors+0x160>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001b7a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001b7e:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001b80:	4629      	mov	r1, r5
  while (txbuffer->next != NULL)
 8001b82:	68a4      	ldr	r4, [r4, #8]
 8001b84:	f107 0e01 	add.w	lr, r7, #1
 8001b88:	bb1c      	cbnz	r4, 8001bd2 <ETH_Prepare_Tx_Descriptors+0xca>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b8a:	681a      	ldr	r2, [r3, #0]
  if (ItMode != ((uint32_t)RESET))
 8001b8c:	f1b9 0f00 	cmp.w	r9, #0
 8001b90:	d066      	beq.n	8001c60 <ETH_Prepare_Tx_Descriptors+0x158>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b96:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001b9e:	601a      	str	r2, [r3, #0]
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001ba0:	69b2      	ldr	r2, [r6, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001ba2:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bac:	6013      	str	r3, [r2, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001bae:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001bb2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8001bb6:	6281      	str	r1, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f383 8810 	msr	PRIMASK, r3
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001bc2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	443b      	add	r3, r7
 8001bc8:	6403      	str	r3, [r0, #64]	@ 0x40
 8001bca:	f382 8810 	msr	PRIMASK, r2
  return HAL_ETH_ERROR_NONE;
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e7a6      	b.n	8001b20 <ETH_Prepare_Tx_Descriptors+0x18>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001bd2:	681f      	ldr	r7, [r3, #0]
 8001bd4:	f027 5700 	bic.w	r7, r7, #536870912	@ 0x20000000
 8001bd8:	601f      	str	r7, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001bda:	681f      	ldr	r7, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001bdc:	f1b9 0f00 	cmp.w	r9, #0
 8001be0:	d023      	beq.n	8001c2a <ETH_Prepare_Tx_Descriptors+0x122>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001be2:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001be6:	f101 0c01 	add.w	ip, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001bea:	601f      	str	r7, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001bec:	f1bc 0f03 	cmp.w	ip, #3
 8001bf0:	bf88      	it	hi
 8001bf2:	f1a1 0c03 	subhi.w	ip, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001bf6:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8001bfa:	698b      	ldr	r3, [r1, #24]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001bfc:	681f      	ldr	r7, [r3, #0]
 8001bfe:	2f00      	cmp	r7, #0
 8001c00:	da16      	bge.n	8001c30 <ETH_Prepare_Tx_Descriptors+0x128>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c02:	69b1      	ldr	r1, [r6, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001c04:	2200      	movs	r2, #0
 8001c06:	4572      	cmp	r2, lr
 8001c08:	d089      	beq.n	8001b1e <ETH_Prepare_Tx_Descriptors+0x16>
  __ASM volatile ("dmb 0xF":::"memory");
 8001c0a:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c0e:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 8001c10:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c16:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001c18:	1c6b      	adds	r3, r5, #1
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	bf88      	it	hi
 8001c1e:	1eeb      	subhi	r3, r5, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8001c24:	461d      	mov	r5, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c26:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001c28:	e7ed      	b.n	8001c06 <ETH_Prepare_Tx_Descriptors+0xfe>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001c2a:	f027 4780 	bic.w	r7, r7, #1073741824	@ 0x40000000
 8001c2e:	e7da      	b.n	8001be6 <ETH_Prepare_Tx_Descriptors+0xde>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001c30:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8001c32:	2900      	cmp	r1, #0
 8001c34:	d1e5      	bne.n	8001c02 <ETH_Prepare_Tx_Descriptors+0xfa>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001c36:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001c38:	6867      	ldr	r7, [r4, #4]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001c3a:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 8001c3e:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001c40:	6821      	ldr	r1, [r4, #0]
 8001c42:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	ea01 0108 	and.w	r1, r1, r8
 8001c4a:	4339      	orrs	r1, r7
 8001c4c:	6059      	str	r1, [r3, #4]
 8001c4e:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c52:	6819      	ldr	r1, [r3, #0]
    bd_count += 1U;
 8001c54:	4677      	mov	r7, lr
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c56:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8001c5a:	6019      	str	r1, [r3, #0]
 8001c5c:	4661      	mov	r1, ip
 8001c5e:	e790      	b.n	8001b82 <ETH_Prepare_Tx_Descriptors+0x7a>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001c60:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001c64:	e797      	b.n	8001b96 <ETH_Prepare_Tx_Descriptors+0x8e>
 8001c66:	bf00      	nop
 8001c68:	ffffe000 	.word	0xffffe000

08001c6c <ETH_SetMACConfig>:
{
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	460d      	mov	r5, r1
  tmpreg1 = (heth->Instance)->MACCR;
 8001c70:	6802      	ldr	r2, [r0, #0]
{
 8001c72:	4604      	mov	r4, r0
 8001c74:	68ab      	ldr	r3, [r5, #8]
 8001c76:	6968      	ldr	r0, [r5, #20]
  tmpreg1 = (heth->Instance)->MACCR;
 8001c78:	6811      	ldr	r1, [r2, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c7a:	4303      	orrs	r3, r0
 8001c7c:	69a8      	ldr	r0, [r5, #24]
 8001c7e:	4303      	orrs	r3, r0
 8001c80:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001c82:	4303      	orrs	r3, r0
 8001c84:	7ba8      	ldrb	r0, [r5, #14]
 8001c86:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c8a:	7fe8      	ldrb	r0, [r5, #31]
 8001c8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c90:	7f28      	ldrb	r0, [r5, #28]
 8001c92:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c96:	7928      	ldrb	r0, [r5, #4]
 8001c98:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c9c:	7be8      	ldrb	r0, [r5, #15]
 8001c9e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ca2:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 8001ca6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001caa:	482a      	ldr	r0, [pc, #168]	@ (8001d54 <ETH_SetMACConfig+0xe8>)
 8001cac:	4008      	ands	r0, r1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cae:	7c29      	ldrb	r1, [r5, #16]
 8001cb0:	fab1 f181 	clz	r1, r1
 8001cb4:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb6:	2001      	movs	r0, #1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cb8:	0949      	lsrs	r1, r1, #5
 8001cba:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cbe:	7c69      	ldrb	r1, [r5, #17]
 8001cc0:	fab1 f181 	clz	r1, r1
 8001cc4:	0949      	lsrs	r1, r1, #5
 8001cc6:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cca:	7fa9      	ldrb	r1, [r5, #30]
 8001ccc:	fab1 f181 	clz	r1, r1
 8001cd0:	0949      	lsrs	r1, r1, #5
 8001cd2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cd6:	f895 1020 	ldrb.w	r1, [r5, #32]
 8001cda:	fab1 f181 	clz	r1, r1
 8001cde:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ce0:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ce4:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001ce6:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce8:	f7ff fe5a 	bl	80019a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cec:	6821      	ldr	r1, [r4, #0]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cee:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
  (heth->Instance)->MACCR = tmpreg1;
 8001cf0:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf2:	698a      	ldr	r2, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cf4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cf6:	f022 02be 	bic.w	r2, r2, #190	@ 0xbe
 8001cfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001cfe:	0412      	lsls	r2, r2, #16
 8001d00:	0c12      	lsrs	r2, r2, #16
 8001d02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d04:	f895 204c 	ldrb.w	r2, [r5, #76]	@ 0x4c
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	0952      	lsrs	r2, r2, #5
 8001d0e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d12:	f895 2055 	ldrb.w	r2, [r5, #85]	@ 0x55
 8001d16:	1e50      	subs	r0, r2, #1
 8001d18:	4242      	negs	r2, r0
 8001d1a:	4142      	adcs	r2, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d22:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8001d26:	1e56      	subs	r6, r2, #1
 8001d28:	4272      	negs	r2, r6
 8001d2a:	4172      	adcs	r2, r6
 8001d2c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d30:	f895 2054 	ldrb.w	r2, [r5, #84]	@ 0x54
 8001d34:	f102 3cff 	add.w	ip, r2, #4294967295
 8001d38:	f1dc 0200 	rsbs	r2, ip, #0
 8001d3c:	eb42 020c 	adc.w	r2, r2, ip
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d40:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d44:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d46:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d48:	f7ff fe2a 	bl	80019a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	619d      	str	r5, [r3, #24]
}
 8001d50:	bd70      	pop	{r4, r5, r6, pc}
 8001d52:	bf00      	nop
 8001d54:	fd20810f 	.word	0xfd20810f

08001d58 <ETH_SetDMAConfig>:
{
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	694b      	ldr	r3, [r1, #20]
 8001d5c:	460d      	mov	r5, r1
 8001d5e:	6a09      	ldr	r1, [r1, #32]
 8001d60:	4604      	mov	r4, r0
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	430b      	orrs	r3, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d66:	7b69      	ldrb	r1, [r5, #13]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d6c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d70:	7ba9      	ldrb	r1, [r5, #14]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d72:	6990      	ldr	r0, [r2, #24]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d74:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d78:	7f29      	ldrb	r1, [r5, #28]
 8001d7a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d7e:	7fa9      	ldrb	r1, [r5, #30]
 8001d80:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d84:	f895 1024 	ldrb.w	r1, [r5, #36]	@ 0x24
 8001d88:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d8c:	491a      	ldr	r1, [pc, #104]	@ (8001df8 <ETH_SetDMAConfig+0xa0>)
 8001d8e:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d90:	2001      	movs	r0, #1
 8001d92:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d94:	7b29      	ldrb	r1, [r5, #12]
 8001d96:	fab1 f181 	clz	r1, r1
 8001d9a:	0949      	lsrs	r1, r1, #5
 8001d9c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001da0:	7f69      	ldrb	r1, [r5, #29]
 8001da2:	fab1 f181 	clz	r1, r1
 8001da6:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dac:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dae:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db0:	f7ff fdf6 	bl	80019a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001db4:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db6:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001db8:	69a9      	ldr	r1, [r5, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dbe:	68ab      	ldr	r3, [r5, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001dc0:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dc2:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001dc4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dc8:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8001dcc:	6929      	ldr	r1, [r5, #16]
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	6829      	ldr	r1, [r5, #0]
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8001dd6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dda:	7929      	ldrb	r1, [r5, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ddc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001de0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001de4:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 8001de6:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de8:	f7ff fdda 	bl	80019a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df2:	601d      	str	r5, [r3, #0]
}
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
 8001df6:	bf00      	nop
 8001df8:	f8de3f23 	.word	0xf8de3f23

08001dfc <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 8001dfc:	2300      	movs	r3, #0
{
 8001dfe:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 8001e00:	9301      	str	r3, [sp, #4]
{
 8001e02:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e04:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e06:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e12:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e18:	f7ff fdc2 	bl	80019a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	9a01      	ldr	r2, [sp, #4]
 8001e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	b002      	add	sp, #8
 8001e28:	bd10      	pop	{r4, pc}
	...

08001e2c <ETH_UpdateDescriptor>:
{
 8001e2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t *buff = NULL;
 8001e30:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 8001e32:	6e86      	ldr	r6, [r0, #104]	@ 0x68
{
 8001e34:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e36:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
  uint8_t *buff = NULL;
 8001e38:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e3a:	f106 0312 	add.w	r3, r6, #18
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001e3e:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8001eb4 <ETH_UpdateDescriptor+0x88>
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e42:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e46:	b137      	cbz	r7, 8001e56 <ETH_UpdateDescriptor+0x2a>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e48:	6a2b      	ldr	r3, [r5, #32]
 8001e4a:	b9db      	cbnz	r3, 8001e84 <ETH_UpdateDescriptor+0x58>
      HAL_ETH_RxAllocateCallback(&buff);
 8001e4c:	a801      	add	r0, sp, #4
 8001e4e:	f7ff f8d3 	bl	8000ff8 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001e52:	9b01      	ldr	r3, [sp, #4]
 8001e54:	b9a3      	cbnz	r3, 8001e80 <ETH_UpdateDescriptor+0x54>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e56:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001e58:	42bb      	cmp	r3, r7
 8001e5a:	d00e      	beq.n	8001e7a <ETH_UpdateDescriptor+0x4e>
 8001e5c:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001e60:	1c71      	adds	r1, r6, #1
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	6922      	ldr	r2, [r4, #16]
 8001e66:	2028      	movs	r0, #40	@ 0x28
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001e68:	f001 0103 	and.w	r1, r1, #3
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e70:	fb00 2201 	mla	r2, r0, r1, r2
 8001e74:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e76:	e9c4 671a 	strd	r6, r7, [r4, #104]	@ 0x68
}
 8001e7a:	b002      	add	sp, #8
 8001e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e80:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001e82:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 8001e84:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001e86:	6963      	ldr	r3, [r4, #20]
      if (heth->RxDescList.ItMode == 0U)
 8001e88:	b98a      	cbnz	r2, 8001eae <ETH_UpdateDescriptor+0x82>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001e8a:	ea43 0308 	orr.w	r3, r3, r8
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001e8e:	606b      	str	r3, [r5, #4]
      desccount--;
 8001e90:	3f01      	subs	r7, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e98:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e9a:	1c73      	adds	r3, r6, #1
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	bf88      	it	hi
 8001ea0:	1ef3      	subhi	r3, r6, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ea2:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8001ea6:	461e      	mov	r6, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ea8:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 8001eac:	e7cb      	b.n	8001e46 <ETH_UpdateDescriptor+0x1a>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb2:	e7ec      	b.n	8001e8e <ETH_UpdateDescriptor+0x62>
 8001eb4:	80004000 	.word	0x80004000

08001eb8 <HAL_ETH_Init>:
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 8001eba:	4604      	mov	r4, r0
{
 8001ebc:	b0a7      	sub	sp, #156	@ 0x9c
  if (heth == NULL)
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	f000 80e8 	beq.w	8002094 <HAL_ETH_Init+0x1dc>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ec4:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001ec8:	b923      	cbnz	r3, 8001ed4 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001eca:	2323      	movs	r3, #35	@ 0x23
 8001ecc:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8001ed0:	f7fe ff4c 	bl	8000d6c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed4:	4b73      	ldr	r3, [pc, #460]	@ (80020a4 <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ed6:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001eea:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_ETH_Init+0x1f0>)
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001ef2:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8001efa:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001f0a:	f7ff fd43 	bl	8001994 <HAL_GetTick>
 8001f0e:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f16:	681d      	ldr	r5, [r3, #0]
 8001f18:	f015 0501 	ands.w	r5, r5, #1
 8001f1c:	f040 80ad 	bne.w	800207a <HAL_ETH_Init+0x1c2>
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f20:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8001f26:	f240 1701 	movw	r7, #257	@ 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f2e:	a90d      	add	r1, sp, #52	@ 0x34
 8001f30:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f32:	f88d 6038 	strb.w	r6, [sp, #56]	@ 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f36:	f8ad 6052 	strh.w	r6, [sp, #82]	@ 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f3a:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f3e:	950f      	str	r5, [sp, #60]	@ 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8001f40:	f88d 5050 	strb.w	r5, [sp, #80]	@ 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8001f44:	f88d 5054 	strb.w	r5, [sp, #84]	@ 0x54
  macDefaultConf.Watchdog = ENABLE;
 8001f48:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f4c:	9516      	str	r5, [sp, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f4e:	f88d 505c 	strb.w	r5, [sp, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f52:	951f      	str	r5, [sp, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f54:	f88d 5080 	strb.w	r5, [sp, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f58:	9521      	str	r5, [sp, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f5a:	f8ad 5088 	strh.w	r5, [sp, #136]	@ 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f5e:	f88d 508a 	strb.w	r5, [sp, #138]	@ 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f62:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f66:	f7ff fe81 	bl	8001c6c <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f72:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f78:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f7c:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f80:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f84:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f88:	950a      	str	r5, [sp, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f8a:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f8e:	950c      	str	r5, [sp, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f90:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f92:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f9a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fa4:	f7ff fed8 	bl	8001d58 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fa8:	68e6      	ldr	r6, [r4, #12]
 8001faa:	f104 0c14 	add.w	ip, r4, #20
    dmatxdesc = heth->Init.TxDesc + i;
 8001fae:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fb0:	4628      	mov	r0, r5
    dmatxdesc = heth->Init.TxDesc + i;
 8001fb2:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fb4:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001fb6:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001fb8:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001fba:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001fbc:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001fbe:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fc0:	f84c 3f04 	str.w	r3, [ip, #4]!
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001fc4:	681f      	ldr	r7, [r3, #0]
 8001fc6:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 8001fca:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001fce:	d064      	beq.n	800209a <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001fd0:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fd2:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fd4:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fd6:	f447 0740 	orr.w	r7, r7, #12582912	@ 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fda:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fdc:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fde:	460b      	mov	r3, r1
 8001fe0:	d1e8      	bne.n	8001fb4 <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001fe2:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f104 0c44 	add.w	ip, r4, #68	@ 0x44
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fea:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001fee:	f502 5780 	add.w	r7, r2, #4096	@ 0x1000
  heth->TxDescList.CurTxDesc = 0;
 8001ff2:	62a1      	str	r1, [r4, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ff4:	613e      	str	r6, [r7, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ff6:	6926      	ldr	r6, [r4, #16]
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ff8:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ffa:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ffc:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ffe:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002000:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002002:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002004:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002008:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800200c:	6960      	ldr	r0, [r4, #20]
 800200e:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8002012:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002014:	6858      	ldr	r0, [r3, #4]
 8002016:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800201a:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800201c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002020:	f84c 3f04 	str.w	r3, [ip, #4]!
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002024:	d03b      	beq.n	800209e <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002026:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002028:	3501      	adds	r5, #1
 800202a:	4603      	mov	r3, r0
 800202c:	2d04      	cmp	r5, #4
 800202e:	d1e4      	bne.n	8001ffa <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002030:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002032:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002036:	65a0      	str	r0, [r4, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002038:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800203c:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002040:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002042:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002044:	641d      	str	r5, [r3, #64]	@ 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002046:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002048:	6459      	str	r1, [r3, #68]	@ 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800204a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800204c:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 8002050:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002052:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
 8002056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800205e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002062:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
 8002066:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
 800206a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  heth->gState = HAL_ETH_STATE_READY;
 800206e:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002070:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002074:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 8002078:	e00d      	b.n	8002096 <HAL_ETH_Init+0x1de>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800207a:	f7ff fc8b 	bl	8001994 <HAL_GetTick>
 800207e:	1b80      	subs	r0, r0, r6
 8002080:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002084:	f67f af44 	bls.w	8001f10 <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002088:	2304      	movs	r3, #4
 800208a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 800208e:	23e0      	movs	r3, #224	@ 0xe0
 8002090:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
}
 8002096:	b027      	add	sp, #156	@ 0x9c
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800209a:	60de      	str	r6, [r3, #12]
 800209c:	e799      	b.n	8001fd2 <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800209e:	60de      	str	r6, [r3, #12]
 80020a0:	e7c2      	b.n	8002028 <HAL_ETH_Init+0x170>
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40028000 	.word	0x40028000

080020b0 <HAL_ETH_Start_IT>:
{
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80020b2:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80020b6:	4604      	mov	r4, r0
 80020b8:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d136      	bne.n	800212c <HAL_ETH_Start_IT+0x7c>
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80020be:	2304      	movs	r3, #4
    heth->gState = HAL_ETH_STATE_BUSY;
 80020c0:	2623      	movs	r6, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 80020c2:	6585      	str	r5, [r0, #88]	@ 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80020c4:	66c3      	str	r3, [r0, #108]	@ 0x6c
    heth->gState = HAL_ETH_STATE_BUSY;
 80020c6:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
    ETH_UpdateDescriptor(heth);
 80020ca:	f7ff feaf 	bl	8001e2c <ETH_UpdateDescriptor>
    tmpreg1 = (heth->Instance)->MACCR;
 80020ce:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d0:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 80020d2:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d4:	f7ff fc64 	bl	80019a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020d8:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 80020da:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 80020dc:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020e8:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	f042 0202 	orr.w	r2, r2, #2
 80020f0:	619a      	str	r2, [r3, #24]
    ETH_FlushTransmitFIFO(heth);
 80020f2:	f7ff fe83 	bl	8001dfc <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020f6:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f8:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	f042 0208 	orr.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8002102:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002104:	f7ff fc4c 	bl	80019a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002108:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800210a:	2000      	movs	r0, #0
    (heth->Instance)->MACCR = tmpreg1;
 800210c:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f042 0204 	orr.w	r2, r2, #4
 8002114:	601a      	str	r2, [r3, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	f442 32d0 	orr.w	r2, r2, #106496	@ 0x1a000
 8002120:	f042 02c1 	orr.w	r2, r2, #193	@ 0xc1
 8002124:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8002126:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
}
 800212a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800212c:	4628      	mov	r0, r5
 800212e:	e7fc      	b.n	800212a <HAL_ETH_Start_IT+0x7a>

08002130 <HAL_ETH_Stop_IT>:
{
 8002130:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002132:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8002136:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002138:	2b23      	cmp	r3, #35	@ 0x23
 800213a:	d13c      	bne.n	80021b6 <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800213c:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 800213e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002142:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002144:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	f422 32d0 	bic.w	r2, r2, #106496	@ 0x1a000
 800214e:	f022 02c1 	bic.w	r2, r2, #193	@ 0xc1
 8002152:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800215a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	f022 0202 	bic.w	r2, r2, #2
 8002162:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002164:	680b      	ldr	r3, [r1, #0]
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800216c:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800216e:	f7ff fc17 	bl	80019a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002172:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8002174:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8002176:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8002178:	f7ff fe40 	bl	8001dfc <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800217c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800217e:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f022 0208 	bic.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8002188:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800218a:	f7ff fc09 	bl	80019a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800218e:	4623      	mov	r3, r4
 8002190:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8002194:	f853 2b44 	ldr.w	r2, [r3], #68
 8002198:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800219a:	f853 1f04 	ldr.w	r1, [r3, #4]!
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800219e:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80021a0:	4283      	cmp	r3, r0
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80021a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80021a6:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80021a8:	d1f7      	bne.n	800219a <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 80021aa:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 80021ac:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 80021ae:	65a0      	str	r0, [r4, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80021b0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
}
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
 80021b8:	e7fc      	b.n	80021b4 <HAL_ETH_Stop_IT+0x84>

080021ba <HAL_ETH_Transmit_IT>:
{
 80021ba:	b510      	push	{r4, lr}
 80021bc:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80021be:	b939      	cbnz	r1, 80021d0 <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021c0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80021c4:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021c8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_ERROR;
 80021cc:	2001      	movs	r0, #1
}
 80021ce:	bd10      	pop	{r4, pc}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021d0:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80021d4:	2a23      	cmp	r2, #35	@ 0x23
 80021d6:	d1f9      	bne.n	80021cc <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80021d8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80021da:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80021dc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80021de:	f7ff fc93 	bl	8001b08 <ETH_Prepare_Tx_Descriptors>
 80021e2:	b120      	cbz	r0, 80021ee <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021e4:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	e7ec      	b.n	80021c8 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 80021ee:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80021f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80021f4:	1c53      	adds	r3, r2, #1
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	bf88      	it	hi
 80021fa:	1ed3      	subhi	r3, r2, #3
 80021fc:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	0752      	lsls	r2, r2, #29
 8002208:	d503      	bpl.n	8002212 <HAL_ETH_Transmit_IT+0x58>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800220a:	2204      	movs	r2, #4
 800220c:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8002212:	2000      	movs	r0, #0
 8002214:	e7db      	b.n	80021ce <HAL_ETH_Transmit_IT+0x14>

08002216 <HAL_ETH_ReadData>:
{
 8002216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221a:	4604      	mov	r4, r0
 800221c:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 800221e:	4689      	mov	r9, r1
 8002220:	b949      	cbnz	r1, 8002236 <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002222:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 800222e:	2001      	movs	r0, #1
}
 8002230:	b005      	add	sp, #20
 8002232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002236:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800223a:	2b23      	cmp	r3, #35	@ 0x23
 800223c:	d1f7      	bne.n	800222e <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 800223e:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
  uint8_t rxdataready = 0U;
 8002242:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002244:	f100 0180 	add.w	r1, r0, #128	@ 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002248:	f108 0312 	add.w	r3, r8, #18
  uint32_t desccnt = 0U;
 800224c:	463e      	mov	r6, r7
      dmarxdesc->BackupAddr0 = 0;
 800224e:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002250:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002254:	307c      	adds	r0, #124	@ 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002256:	f850 3c10 	ldr.w	r3, [r0, #-16]
 800225a:	f1c3 0a04 	rsb	sl, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800225e:	682b      	ldr	r3, [r5, #0]
         && (rxdataready == 0U))
 8002260:	2b00      	cmp	r3, #0
 8002262:	db02      	blt.n	800226a <HAL_ETH_ReadData+0x54>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002264:	4556      	cmp	r6, sl
 8002266:	d000      	beq.n	800226a <HAL_ETH_ReadData+0x54>
         && (rxdataready == 0U))
 8002268:	b187      	cbz	r7, 800228c <HAL_ETH_ReadData+0x76>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 800226a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800226c:	441e      	add	r6, r3
 800226e:	66e6      	str	r6, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002270:	b116      	cbz	r6, 8002278 <HAL_ETH_ReadData+0x62>
    ETH_UpdateDescriptor(heth);
 8002272:	4620      	mov	r0, r4
 8002274:	f7ff fdda 	bl	8001e2c <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002278:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 800227c:	2f00      	cmp	r7, #0
 800227e:	d0d6      	beq.n	800222e <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8002280:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8002282:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8002284:	f8c9 3000 	str.w	r3, [r9]
    heth->RxDescList.pRxStart = NULL;
 8002288:	67e0      	str	r0, [r4, #124]	@ 0x7c
    return HAL_OK;
 800228a:	e7d1      	b.n	8002230 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	05db      	lsls	r3, r3, #23
 8002290:	d503      	bpl.n	800229a <HAL_ETH_ReadData+0x84>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002292:	69eb      	ldr	r3, [r5, #28]
 8002294:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002296:	69ab      	ldr	r3, [r5, #24]
 8002298:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800229a:	682b      	ldr	r3, [r5, #0]
 800229c:	059a      	lsls	r2, r3, #22
 800229e:	d401      	bmi.n	80022a4 <HAL_ETH_ReadData+0x8e>
 80022a0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80022a2:	b1fb      	cbz	r3, 80022e4 <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	059b      	lsls	r3, r3, #22
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80022a8:	682b      	ldr	r3, [r5, #0]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80022aa:	682a      	ldr	r2, [r5, #0]
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80022ac:	f3c3 430d 	ubfx	r3, r3, #16, #14
        heth->RxDescList.RxDataLength = 0;
 80022b0:	bf48      	it	mi
 80022b2:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80022b6:	05d2      	lsls	r2, r2, #23
 80022b8:	d502      	bpl.n	80022c0 <HAL_ETH_ReadData+0xaa>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80022ba:	682a      	ldr	r2, [r5, #0]
        rxdataready = 1;
 80022bc:	2701      	movs	r7, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80022be:	6722      	str	r2, [r4, #112]	@ 0x70
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80022c0:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80022c2:	9001      	str	r0, [sp, #4]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80022c4:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80022c6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80022ca:	f7fe feb7 	bl	800103c <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80022ce:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80022d0:	9b03      	ldr	r3, [sp, #12]
      heth->RxDescList.RxDescCnt++;
 80022d2:	3201      	adds	r2, #1
 80022d4:	6622      	str	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80022d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 80022d8:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
      heth->RxDescList.RxDataLength += bufflength;
 80022dc:	441a      	add	r2, r3
 80022de:	6662      	str	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 80022e0:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022e4:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 80022e8:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	bf88      	it	hi
 80022ee:	f1a8 0303 	subhi.w	r3, r8, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022f2:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 80022f6:	4698      	mov	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022f8:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 80022fc:	e7af      	b.n	800225e <HAL_ETH_ReadData+0x48>

080022fe <HAL_ETH_ReleaseTxPacket>:
{
 80022fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002302:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8002304:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002306:	f04f 0928 	mov.w	r9, #40	@ 0x28
 800230a:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800230e:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002312:	b106      	cbz	r6, 8002316 <HAL_ETH_ReleaseTxPacket+0x18>
 8002314:	b917      	cbnz	r7, 800231c <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8002316:	2000      	movs	r0, #0
 8002318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 800231c:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8002320:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002322:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002326:	b928      	cbnz	r0, 8002334 <HAL_ETH_ReleaseTxPacket+0x36>
      INCR_TX_DESC_INDEX(idx, 1U);
 8002328:	1c63      	adds	r3, r4, #1
 800232a:	2b03      	cmp	r3, #3
 800232c:	d900      	bls.n	8002330 <HAL_ETH_ReleaseTxPacket+0x32>
 800232e:	1ee3      	subs	r3, r4, #3
        pktTxStatus = 0U;
 8002330:	461c      	mov	r4, r3
 8002332:	e7ee      	b.n	8002312 <HAL_ETH_ReleaseTxPacket+0x14>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002334:	fb09 f304 	mul.w	r3, r9, r4
 8002338:	68ea      	ldr	r2, [r5, #12]
 800233a:	58d3      	ldr	r3, [r2, r3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <HAL_ETH_ReleaseTxPacket+0x58>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002340:	f7fe fe95 	bl	800106e <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8002344:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002346:	f8c8 a02c 	str.w	sl, [r8, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 800234a:	2b03      	cmp	r3, #3
 800234c:	bf88      	it	hi
 800234e:	1ee3      	subhi	r3, r4, #3
        dmatxdesclist->releaseIndex = idx;
 8002350:	e9c5 6310 	strd	r6, r3, [r5, #64]	@ 0x40
 8002354:	e7ec      	b.n	8002330 <HAL_ETH_ReleaseTxPacket+0x32>
 8002356:	4623      	mov	r3, r4
        pktTxStatus = 0U;
 8002358:	2700      	movs	r7, #0
 800235a:	e7e9      	b.n	8002330 <HAL_ETH_ReleaseTxPacket+0x32>

0800235c <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 800235c:	4770      	bx	lr

0800235e <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 800235e:	4770      	bx	lr

08002360 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002360:	6803      	ldr	r3, [r0, #0]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002362:	4a34      	ldr	r2, [pc, #208]	@ (8002434 <HAL_ETH_IRQHandler+0xd4>)
{
 8002364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002368:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800236a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
{
 800236e:	4604      	mov	r4, r0
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002370:	695d      	ldr	r5, [r3, #20]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002372:	f8d3 801c 	ldr.w	r8, [r3, #28]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002376:	6956      	ldr	r6, [r2, #20]
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002378:	066a      	lsls	r2, r5, #25
 800237a:	d506      	bpl.n	800238a <HAL_ETH_IRQHandler+0x2a>
 800237c:	f018 0f40 	tst.w	r8, #64	@ 0x40
 8002380:	d003      	beq.n	800238a <HAL_ETH_IRQHandler+0x2a>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002382:	4a2d      	ldr	r2, [pc, #180]	@ (8002438 <HAL_ETH_IRQHandler+0xd8>)
 8002384:	615a      	str	r2, [r3, #20]
    HAL_ETH_RxCpltCallback(heth);
 8002386:	f7fe fd69 	bl	8000e5c <HAL_ETH_RxCpltCallback>
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800238a:	07e8      	lsls	r0, r5, #31
 800238c:	d50b      	bpl.n	80023a6 <HAL_ETH_IRQHandler+0x46>
 800238e:	f018 0f01 	tst.w	r8, #1
 8002392:	d008      	beq.n	80023a6 <HAL_ETH_IRQHandler+0x46>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
    HAL_ETH_TxCpltCallback(heth);
 800239a:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800239c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a0:	615a      	str	r2, [r3, #20]
    HAL_ETH_TxCpltCallback(heth);
 80023a2:	f7fe fd75 	bl	8000e90 <HAL_ETH_TxCpltCallback>
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80023a6:	0429      	lsls	r1, r5, #16
 80023a8:	d523      	bpl.n	80023f2 <HAL_ETH_IRQHandler+0x92>
 80023aa:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 80023ae:	d020      	beq.n	80023f2 <HAL_ETH_IRQHandler+0x92>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80023b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80023b4:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c6:	695a      	ldr	r2, [r3, #20]
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80023c8:	d02c      	beq.n	8002424 <HAL_ETH_IRQHandler+0xc4>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80023ca:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80023ce:	f422 0201 	bic.w	r2, r2, #8454144	@ 0x810000
 80023d2:	f422 425f 	bic.w	r2, r2, #57088	@ 0xdf00
 80023d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023da:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
 80023e4:	61da      	str	r2, [r3, #28]
      heth->gState = HAL_ETH_STATE_ERROR;
 80023e6:	23e0      	movs	r3, #224	@ 0xe0
 80023e8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fd69 	bl	8000ec4 <HAL_ETH_ErrorCallback>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80023f2:	073a      	lsls	r2, r7, #28
 80023f4:	d50b      	bpl.n	800240e <HAL_ETH_IRQHandler+0xae>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80023f6:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 80023f8:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002400:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8002404:	f7ff ffaa 	bl	800235c <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002408:	2300      	movs	r3, #0
 800240a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800240e:	0333      	lsls	r3, r6, #12
 8002410:	d506      	bpl.n	8002420 <HAL_ETH_IRQHandler+0xc0>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <HAL_ETH_IRQHandler+0xd4>)
 8002414:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8002418:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800241a:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 800241c:	f7ff ff9f 	bl	800235e <HAL_ETH_WakeUpCallback>
}
 8002420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002424:	f248 6180 	movw	r1, #34432	@ 0x8680
 8002428:	400a      	ands	r2, r1
 800242a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800242e:	6159      	str	r1, [r3, #20]
 8002430:	e7dc      	b.n	80023ec <HAL_ETH_IRQHandler+0x8c>
 8002432:	bf00      	nop
 8002434:	40013c00 	.word	0x40013c00
 8002438:	00010040 	.word	0x00010040

0800243c <HAL_ETH_ReadPHYRegister>:
{
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8002440:	6800      	ldr	r0, [r0, #0]
{
 8002442:	461e      	mov	r6, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002444:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002446:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002448:	02cc      	lsls	r4, r1, #11
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800244a:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800244e:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002452:	b2a4      	uxth	r4, r4
 8002454:	431a      	orrs	r2, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002456:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002458:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 800245c:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 800245e:	f7ff fa99 	bl	8001994 <HAL_GetTick>
 8002462:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002464:	f014 0001 	ands.w	r0, r4, #1
 8002468:	d104      	bne.n	8002474 <HAL_ETH_ReadPHYRegister+0x38>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	b29b      	uxth	r3, r3
 8002470:	6033      	str	r3, [r6, #0]
}
 8002472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002474:	f7ff fa8e 	bl	8001994 <HAL_GetTick>
 8002478:	1bc0      	subs	r0, r0, r7
 800247a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800247e:	d202      	bcs.n	8002486 <HAL_ETH_ReadPHYRegister+0x4a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	691c      	ldr	r4, [r3, #16]
 8002484:	e7ee      	b.n	8002464 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8002486:	2001      	movs	r0, #1
 8002488:	e7f3      	b.n	8002472 <HAL_ETH_ReadPHYRegister+0x36>

0800248a <HAL_ETH_WritePHYRegister>:
{
 800248a:	b570      	push	{r4, r5, r6, lr}
 800248c:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 800248e:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002490:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002492:	6904      	ldr	r4, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002494:	b29b      	uxth	r3, r3
 8002496:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800249a:	f004 041c 	and.w	r4, r4, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800249e:	6143      	str	r3, [r0, #20]
 80024a0:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80024a2:	02cc      	lsls	r4, r1, #11
 80024a4:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80024a6:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80024a8:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 80024ac:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80024ae:	f7ff fa71 	bl	8001994 <HAL_GetTick>
 80024b2:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024b4:	f014 0001 	ands.w	r0, r4, #1
 80024b8:	d100      	bne.n	80024bc <HAL_ETH_WritePHYRegister+0x32>
}
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80024bc:	f7ff fa6a 	bl	8001994 <HAL_GetTick>
 80024c0:	1b80      	subs	r0, r0, r6
 80024c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80024c6:	d202      	bcs.n	80024ce <HAL_ETH_WritePHYRegister+0x44>
    tmpreg1 = heth->Instance->MACMIIAR;
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	691c      	ldr	r4, [r3, #16]
 80024cc:	e7f2      	b.n	80024b4 <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
 80024d0:	e7f3      	b.n	80024ba <HAL_ETH_WritePHYRegister+0x30>

080024d2 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d061      	beq.n	800259a <HAL_ETH_GetMACConfig+0xc8>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024d6:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80024e0:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80024ea:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f482 7200 	eor.w	r2, r2, #512	@ 0x200
 80024f2:	f3c2 2240 	ubfx	r2, r2, #9, #1
 80024f6:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024fa:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 80024fc:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002500:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8002508:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800250c:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002514:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800251c:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002524:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f482 0280 	eor.w	r2, r2, #4194304	@ 0x400000
 800252c:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8002530:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f482 0200 	eor.w	r2, r2, #8388608	@ 0x800000
 8002538:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800253c:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002544:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800254c:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002554:	710a      	strb	r2, [r1, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f3c2 6240 	ubfx	r2, r2, #25, #1
 800255c:	738a      	strb	r2, [r1, #14]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002564:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 800256e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002572:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800257c:	650a      	str	r2, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	0c12      	lsrs	r2, r2, #16
 8002582:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800258a:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800258e:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8002590:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002594:	f881 3055 	strb.w	r3, [r1, #85]	@ 0x55
  return HAL_OK;
 8002598:	4770      	bx	lr
    return HAL_ERROR;
 800259a:	2001      	movs	r0, #1
}
 800259c:	4770      	bx	lr

0800259e <HAL_ETH_SetMACConfig>:
{
 800259e:	b508      	push	{r3, lr}
  if (macconf == NULL)
 80025a0:	b139      	cbz	r1, 80025b2 <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 80025a2:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d103      	bne.n	80025b2 <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 80025aa:	f7ff fb5f 	bl	8001c6c <ETH_SetMACConfig>
    return HAL_OK;
 80025ae:	2000      	movs	r0, #0
}
 80025b0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e7fc      	b.n	80025b0 <HAL_ETH_SetMACConfig+0x12>
	...

080025b8 <HAL_ETH_SetMDIOClockRange>:
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 80025ba:	6803      	ldr	r3, [r0, #0]
{
 80025bc:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 80025be:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80025c0:	f000 f90c 	bl	80027dc <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 80025c4:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <HAL_ETH_SetMDIOClockRange+0x44>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80025c6:	f024 041c 	bic.w	r4, r4, #28
  if (hclk < 35000000U)
 80025ca:	4298      	cmp	r0, r3
 80025cc:	d804      	bhi.n	80025d8 <HAL_ETH_SetMDIOClockRange+0x20>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025ce:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025d2:	682b      	ldr	r3, [r5, #0]
 80025d4:	611c      	str	r4, [r3, #16]
}
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_ETH_SetMDIOClockRange+0x48>)
 80025da:	4298      	cmp	r0, r3
 80025dc:	d202      	bcs.n	80025e4 <HAL_ETH_SetMDIOClockRange+0x2c>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025de:	f044 040c 	orr.w	r4, r4, #12
 80025e2:	e7f6      	b.n	80025d2 <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 100000000U)
 80025e4:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <HAL_ETH_SetMDIOClockRange+0x4c>)
 80025e6:	4298      	cmp	r0, r3
 80025e8:	d9f3      	bls.n	80025d2 <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 150000000U)
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <HAL_ETH_SetMDIOClockRange+0x50>)
 80025ec:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025ee:	bf94      	ite	ls
 80025f0:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025f4:	f044 0410 	orrhi.w	r4, r4, #16
 80025f8:	e7eb      	b.n	80025d2 <HAL_ETH_SetMDIOClockRange+0x1a>
 80025fa:	bf00      	nop
 80025fc:	02160ebf 	.word	0x02160ebf
 8002600:	03938700 	.word	0x03938700
 8002604:	05f5e0ff 	.word	0x05f5e0ff
 8002608:	08f0d17f 	.word	0x08f0d17f

0800260c <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 800260c:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 8002610:	4770      	bx	lr
	...

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002618:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80027d8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261e:	4a6c      	ldr	r2, [pc, #432]	@ (80027d0 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002620:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002622:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002624:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 800262a:	43ac      	bics	r4, r5
 800262c:	f040 80b7 	bne.w	800279e <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002630:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002632:	2703      	movs	r7, #3
 8002634:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800263c:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002640:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002642:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002646:	2f01      	cmp	r7, #1
 8002648:	d834      	bhi.n	80026b4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 800264a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800264c:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8002650:	68cf      	ldr	r7, [r1, #12]
 8002652:	fa07 f70e 	lsl.w	r7, r7, lr
 8002656:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800265a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800265c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265e:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002662:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002666:	409f      	lsls	r7, r3
 8002668:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800266c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800266e:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002670:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002672:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002676:	688f      	ldr	r7, [r1, #8]
 8002678:	fa07 f70e 	lsl.w	r7, r7, lr
 800267c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8002680:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	d119      	bne.n	80026b8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8002684:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002688:	f003 0a07 	and.w	sl, r3, #7
 800268c:	f04f 0b0f 	mov.w	fp, #15
 8002690:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002694:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002698:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800269c:	fa0b fb0a 	lsl.w	fp, fp, sl
 80026a0:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026a4:	690f      	ldr	r7, [r1, #16]
 80026a6:	fa07 f70a 	lsl.w	r7, r7, sl
 80026aa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 80026ae:	f8c8 7020 	str.w	r7, [r8, #32]
 80026b2:	e001      	b.n	80026b8 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	2c03      	cmp	r4, #3
 80026b6:	d1da      	bne.n	800266e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80026b8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026ba:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026be:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026c2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026c6:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80026ca:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026cc:	d067      	beq.n	800279e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80026d2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026d6:	f003 0c03 	and.w	ip, r3, #3
 80026da:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80026e2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026e6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80026ee:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80026f2:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026f6:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80026fe:	9401      	str	r4, [sp, #4]
 8002700:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002702:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002704:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002708:	4c32      	ldr	r4, [pc, #200]	@ (80027d4 <HAL_GPIO_Init+0x1c0>)
 800270a:	42a0      	cmp	r0, r4
 800270c:	d04e      	beq.n	80027ac <HAL_GPIO_Init+0x198>
 800270e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002712:	42a0      	cmp	r0, r4
 8002714:	d04c      	beq.n	80027b0 <HAL_GPIO_Init+0x19c>
 8002716:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800271a:	42a0      	cmp	r0, r4
 800271c:	d04a      	beq.n	80027b4 <HAL_GPIO_Init+0x1a0>
 800271e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002722:	42a0      	cmp	r0, r4
 8002724:	d048      	beq.n	80027b8 <HAL_GPIO_Init+0x1a4>
 8002726:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800272a:	42a0      	cmp	r0, r4
 800272c:	d046      	beq.n	80027bc <HAL_GPIO_Init+0x1a8>
 800272e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002732:	42a0      	cmp	r0, r4
 8002734:	d044      	beq.n	80027c0 <HAL_GPIO_Init+0x1ac>
 8002736:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800273a:	42a0      	cmp	r0, r4
 800273c:	d042      	beq.n	80027c4 <HAL_GPIO_Init+0x1b0>
 800273e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002742:	42a0      	cmp	r0, r4
 8002744:	d040      	beq.n	80027c8 <HAL_GPIO_Init+0x1b4>
 8002746:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800274a:	42a0      	cmp	r0, r4
 800274c:	d03e      	beq.n	80027cc <HAL_GPIO_Init+0x1b8>
 800274e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002752:	42a0      	cmp	r0, r4
 8002754:	bf14      	ite	ne
 8002756:	240a      	movne	r4, #10
 8002758:	2409      	moveq	r4, #9
 800275a:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002762:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002766:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002768:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 800276c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800276e:	bf0c      	ite	eq
 8002770:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002772:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002774:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8002778:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800277a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800277c:	bf0c      	ite	eq
 800277e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002780:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002782:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8002786:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8002788:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800278a:	bf0c      	ite	eq
 800278c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800278e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002790:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002792:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002794:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002796:	bf54      	ite	pl
 8002798:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800279a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800279c:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800279e:	3301      	adds	r3, #1
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	f47f af3d 	bne.w	8002620 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80027a6:	b003      	add	sp, #12
 80027a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027ac:	2400      	movs	r4, #0
 80027ae:	e7d4      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027b0:	2401      	movs	r4, #1
 80027b2:	e7d2      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027b4:	2402      	movs	r4, #2
 80027b6:	e7d0      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027b8:	2403      	movs	r4, #3
 80027ba:	e7ce      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027bc:	2404      	movs	r4, #4
 80027be:	e7cc      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027c0:	2405      	movs	r4, #5
 80027c2:	e7ca      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027c4:	2406      	movs	r4, #6
 80027c6:	e7c8      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027c8:	2407      	movs	r4, #7
 80027ca:	e7c6      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027cc:	2408      	movs	r4, #8
 80027ce:	e7c4      	b.n	800275a <HAL_GPIO_Init+0x146>
 80027d0:	40013c00 	.word	0x40013c00
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80027dc:	4b01      	ldr	r3, [pc, #4]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000014 	.word	0x20000014

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80027ea:	4a05      	ldr	r2, [pc, #20]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x18>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	4a03      	ldr	r2, [pc, #12]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027f6:	6810      	ldr	r0, [r2, #0]
}
 80027f8:	40d8      	lsrs	r0, r3
 80027fa:	4770      	bx	lr
 80027fc:	40023800 	.word	0x40023800
 8002800:	08018499 	.word	0x08018499
 8002804:	20000014 	.word	0x20000014

08002808 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002808:	230f      	movs	r3, #15
 800280a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_GetClockConfig+0x34>)
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	f002 0203 	and.w	r2, r2, #3
 8002814:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800281c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002824:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800282e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_GetClockConfig+0x38>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	600b      	str	r3, [r1, #0]
}
 800283a:	4770      	bx	lr
 800283c:	40023800 	.word	0x40023800
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002844:	4770      	bx	lr
	...

08002848 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800284c:	2b01      	cmp	r3, #1
 800284e:	d133      	bne.n	80028b8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	2302      	movs	r3, #2
 8002852:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002856:	6803      	ldr	r3, [r0, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002860:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_TIM_Base_Start_IT+0x74>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01a      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286a:	d017      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 800286c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 8002874:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002878:	4293      	cmp	r3, r2
 800287a:	d00f      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 800287c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002880:	4293      	cmp	r3, r2
 8002882:	d00b      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 8002884:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 800288c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x54>
 8002894:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002898:	4293      	cmp	r3, r2
 800289a:	d107      	bne.n	80028ac <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <HAL_TIM_Base_Start_IT+0x78>)
 80028a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	2a06      	cmp	r2, #6
 80028a4:	d006      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x6c>
 80028a6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80028aa:	d003      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80028b4:	2000      	movs	r0, #0
 80028b6:	4770      	bx	lr
    return HAL_ERROR;
 80028b8:	2001      	movs	r0, #1
}
 80028ba:	4770      	bx	lr
 80028bc:	40010000 	.word	0x40010000
 80028c0:	00010007 	.word	0x00010007

080028c4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80028c8:	4770      	bx	lr

080028ca <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80028cc:	6803      	ldr	r3, [r0, #0]
{
 80028ce:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80028d0:	68dd      	ldr	r5, [r3, #12]
{
 80028d2:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 80028d4:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028d6:	07b2      	lsls	r2, r6, #30
 80028d8:	d50d      	bpl.n	80028f6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028da:	07a9      	lsls	r1, r5, #30
 80028dc:	d50b      	bpl.n	80028f6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028de:	f06f 0202 	mvn.w	r2, #2
 80028e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e4:	2201      	movs	r2, #1
 80028e6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	079a      	lsls	r2, r3, #30
 80028ec:	d075      	beq.n	80029da <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	f7ff ffea 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	2300      	movs	r3, #0
 80028f4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028f6:	0773      	lsls	r3, r6, #29
 80028f8:	d510      	bpl.n	800291c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028fa:	0768      	lsls	r0, r5, #29
 80028fc:	d50e      	bpl.n	800291c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002904:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002908:	2202      	movs	r2, #2
 800290a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002912:	d068      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002914:	f7ff ffd7 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002918:	2300      	movs	r3, #0
 800291a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800291c:	0731      	lsls	r1, r6, #28
 800291e:	d50f      	bpl.n	8002940 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002920:	072a      	lsls	r2, r5, #28
 8002922:	d50d      	bpl.n	8002940 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800292a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292e:	2204      	movs	r2, #4
 8002930:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	079b      	lsls	r3, r3, #30
 8002936:	d05c      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002938:	f7ff ffc5 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293c:	2300      	movs	r3, #0
 800293e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002940:	06f1      	lsls	r1, r6, #27
 8002942:	d510      	bpl.n	8002966 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002944:	06ea      	lsls	r2, r5, #27
 8002946:	d50e      	bpl.n	8002966 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002952:	2208      	movs	r2, #8
 8002954:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800295c:	d04f      	beq.n	80029fe <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	f7ff ffb2 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	2300      	movs	r3, #0
 8002964:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002966:	07f3      	lsls	r3, r6, #31
 8002968:	d508      	bpl.n	800297c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800296a:	07e8      	lsls	r0, r5, #31
 800296c:	d506      	bpl.n	800297c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002974:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002976:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002978:	f7fe feba 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800297c:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8002980:	d008      	beq.n	8002994 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002982:	0629      	lsls	r1, r5, #24
 8002984:	d506      	bpl.n	8002994 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800298c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800298e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002990:	f000 f8c5 	bl	8002b1e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002994:	05f2      	lsls	r2, r6, #23
 8002996:	d508      	bpl.n	80029aa <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002998:	062b      	lsls	r3, r5, #24
 800299a:	d506      	bpl.n	80029aa <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80029a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80029a6:	f000 f8bb 	bl	8002b20 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029aa:	0670      	lsls	r0, r6, #25
 80029ac:	d508      	bpl.n	80029c0 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029ae:	0669      	lsls	r1, r5, #25
 80029b0:	d506      	bpl.n	80029c0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80029b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029bc:	f7ff ff85 	bl	80028ca <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029c0:	06b2      	lsls	r2, r6, #26
 80029c2:	d522      	bpl.n	8002a0a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029c4:	06ab      	lsls	r3, r5, #26
 80029c6:	d520      	bpl.n	8002a0a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80029ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029d0:	611a      	str	r2, [r3, #16]
}
 80029d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80029d6:	f000 b8a1 	b.w	8002b1c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	f7ff ff73 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff ff72 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80029e4:	e785      	b.n	80028f2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	f7ff ff6d 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7ff ff6c 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80029f0:	e792      	b.n	8002918 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	f7ff ff67 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	4620      	mov	r0, r4
 80029f8:	f7ff ff66 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80029fc:	e79e      	b.n	800293c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	f7ff ff61 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff ff60 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a08:	e7ab      	b.n	8002962 <HAL_TIM_IRQHandler+0x96>
}
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}

08002a0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	4a29      	ldr	r2, [pc, #164]	@ (8002ab4 <TIM_Base_SetConfig+0xa8>)
  tmpcr1 = TIMx->CR1;
 8002a0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	4290      	cmp	r0, r2
 8002a12:	d012      	beq.n	8002a3a <TIM_Base_SetConfig+0x2e>
 8002a14:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a18:	d00f      	beq.n	8002a3a <TIM_Base_SetConfig+0x2e>
 8002a1a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002a1e:	4290      	cmp	r0, r2
 8002a20:	d00b      	beq.n	8002a3a <TIM_Base_SetConfig+0x2e>
 8002a22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a26:	4290      	cmp	r0, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0x2e>
 8002a2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a2e:	4290      	cmp	r0, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0x2e>
 8002a32:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a36:	4290      	cmp	r0, r2
 8002a38:	d108      	bne.n	8002a4c <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a3e:	684a      	ldr	r2, [r1, #4]
 8002a40:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	68ca      	ldr	r2, [r1, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	e016      	b.n	8002a7a <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <TIM_Base_SetConfig+0xac>)
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d0f7      	beq.n	8002a42 <TIM_Base_SetConfig+0x36>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a56:	4290      	cmp	r0, r2
 8002a58:	d0f3      	beq.n	8002a42 <TIM_Base_SetConfig+0x36>
 8002a5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a5e:	4290      	cmp	r0, r2
 8002a60:	d0ef      	beq.n	8002a42 <TIM_Base_SetConfig+0x36>
 8002a62:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002a66:	4290      	cmp	r0, r2
 8002a68:	d0eb      	beq.n	8002a42 <TIM_Base_SetConfig+0x36>
 8002a6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a6e:	4290      	cmp	r0, r2
 8002a70:	d0e7      	beq.n	8002a42 <TIM_Base_SetConfig+0x36>
 8002a72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a76:	4290      	cmp	r0, r2
 8002a78:	d0e3      	beq.n	8002a42 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a7a:	694a      	ldr	r2, [r1, #20]
 8002a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a80:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002a82:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a84:	688b      	ldr	r3, [r1, #8]
 8002a86:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a88:	680b      	ldr	r3, [r1, #0]
 8002a8a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <TIM_Base_SetConfig+0xa8>)
 8002a8e:	4298      	cmp	r0, r3
 8002a90:	d003      	beq.n	8002a9a <TIM_Base_SetConfig+0x8e>
 8002a92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d101      	bne.n	8002a9e <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9a:	690b      	ldr	r3, [r1, #16]
 8002a9c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aa2:	6903      	ldr	r3, [r0, #16]
 8002aa4:	07db      	lsls	r3, r3, #31
 8002aa6:	d503      	bpl.n	8002ab0 <TIM_Base_SetConfig+0xa4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002aa8:	6903      	ldr	r3, [r0, #16]
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6103      	str	r3, [r0, #16]
  }
}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40014000 	.word	0x40014000

08002abc <HAL_TIM_Base_Init>:
{
 8002abc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002abe:	4604      	mov	r4, r0
 8002ac0:	b350      	cbz	r0, 8002b18 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002ac6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002aca:	b91b      	cbnz	r3, 8002ad4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002acc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ad0:	f7ff feb8 	bl	8002844 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad6:	6820      	ldr	r0, [r4, #0]
 8002ad8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ade:	f7ff ff95 	bl	8002a0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae2:	2301      	movs	r3, #1
  return HAL_OK;
 8002ae4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002aee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002af2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002af6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002afa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002afe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002b06:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002b0a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002b0e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8002b16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
 8002b1a:	e7fc      	b.n	8002b16 <HAL_TIM_Base_Init+0x5a>

08002b1c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002b20:	4770      	bx	lr
	...

08002b24 <LL_EXTI_Init>:
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b24:	7901      	ldrb	r1, [r0, #4]
{
 8002b26:	4602      	mov	r2, r0
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b28:	6803      	ldr	r3, [r0, #0]
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d03f      	beq.n	8002bae <LL_EXTI_Init+0x8a>
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b2e:	b90b      	cbnz	r3, 8002b34 <LL_EXTI_Init+0x10>
  ErrorStatus status = SUCCESS;
 8002b30:	2000      	movs	r0, #0
 8002b32:	4770      	bx	lr
    {
      switch (EXTI_InitStruct->Mode)
 8002b34:	7941      	ldrb	r1, [r0, #5]
 8002b36:	2901      	cmp	r1, #1
 8002b38:	d01d      	beq.n	8002b76 <LL_EXTI_Init+0x52>
 8002b3a:	2902      	cmp	r1, #2
 8002b3c:	d024      	beq.n	8002b88 <LL_EXTI_Init+0x64>
 8002b3e:	bb39      	cbnz	r1, 8002b90 <LL_EXTI_Init+0x6c>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002b40:	4921      	ldr	r1, [pc, #132]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002b42:	6848      	ldr	r0, [r1, #4]
 8002b44:	ea20 0003 	bic.w	r0, r0, r3
 8002b48:	6048      	str	r0, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002b4a:	6808      	ldr	r0, [r1, #0]
 8002b4c:	4318      	orrs	r0, r3
 8002b4e:	6008      	str	r0, [r1, #0]
  ErrorStatus status = SUCCESS;
 8002b50:	2000      	movs	r0, #0
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002b52:	7992      	ldrb	r2, [r2, #6]
 8002b54:	2a00      	cmp	r2, #0
 8002b56:	d035      	beq.n	8002bc4 <LL_EXTI_Init+0xa0>
      {
        switch (EXTI_InitStruct->Trigger)
 8002b58:	2a02      	cmp	r2, #2
 8002b5a:	d01b      	beq.n	8002b94 <LL_EXTI_Init+0x70>
 8002b5c:	2a03      	cmp	r2, #3
 8002b5e:	d022      	beq.n	8002ba6 <LL_EXTI_Init+0x82>
 8002b60:	2a01      	cmp	r2, #1
 8002b62:	d12e      	bne.n	8002bc2 <LL_EXTI_Init+0x9e>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002b66:	68d1      	ldr	r1, [r2, #12]
 8002b68:	ea21 0103 	bic.w	r1, r1, r3
 8002b6c:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002b6e:	6891      	ldr	r1, [r2, #8]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6093      	str	r3, [r2, #8]
}
 8002b74:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002b76:	4914      	ldr	r1, [pc, #80]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002b78:	6808      	ldr	r0, [r1, #0]
 8002b7a:	ea20 0003 	bic.w	r0, r0, r3
 8002b7e:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002b80:	6848      	ldr	r0, [r1, #4]
 8002b82:	4318      	orrs	r0, r3
 8002b84:	6048      	str	r0, [r1, #4]
}
 8002b86:	e7e3      	b.n	8002b50 <LL_EXTI_Init+0x2c>
  SET_BIT(EXTI->IMR, ExtiLine);
 8002b88:	490f      	ldr	r1, [pc, #60]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002b8a:	6808      	ldr	r0, [r1, #0]
 8002b8c:	4318      	orrs	r0, r3
 8002b8e:	e7f6      	b.n	8002b7e <LL_EXTI_Init+0x5a>
      switch (EXTI_InitStruct->Mode)
 8002b90:	2001      	movs	r0, #1
 8002b92:	e7de      	b.n	8002b52 <LL_EXTI_Init+0x2e>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002b94:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002b96:	6891      	ldr	r1, [r2, #8]
 8002b98:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002b9c:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b9e:	68d1      	ldr	r1, [r2, #12]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002ba8:	6891      	ldr	r1, [r2, #8]
 8002baa:	4319      	orrs	r1, r3
 8002bac:	e7f6      	b.n	8002b9c <LL_EXTI_Init+0x78>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002bae:	4a06      	ldr	r2, [pc, #24]	@ (8002bc8 <LL_EXTI_Init+0xa4>)
 8002bb0:	6811      	ldr	r1, [r2, #0]
 8002bb2:	ea21 0103 	bic.w	r1, r1, r3
 8002bb6:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002bb8:	6851      	ldr	r1, [r2, #4]
 8002bba:	ea21 0303 	bic.w	r3, r1, r3
 8002bbe:	6053      	str	r3, [r2, #4]
}
 8002bc0:	e7b6      	b.n	8002b30 <LL_EXTI_Init+0xc>
        switch (EXTI_InitStruct->Trigger)
 8002bc2:	2001      	movs	r0, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002bd2:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	fa95 f4a5 	rbit	r4, r5

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002bd8:	f04f 0c01 	mov.w	ip, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002bdc:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002be0:	2603      	movs	r6, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002be2:	ea6f 0e05 	mvn.w	lr, r5
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002be6:	fa35 f004 	lsrs.w	r0, r5, r4
 8002bea:	d101      	bne.n	8002bf0 <LL_GPIO_Init+0x24>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8002bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002bf0:	fa0c f304 	lsl.w	r3, ip, r4
    if (currentpin)
 8002bf4:	402b      	ands	r3, r5
 8002bf6:	d06f      	beq.n	8002cd8 <LL_GPIO_Init+0x10c>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002bf8:	6848      	ldr	r0, [r1, #4]
 8002bfa:	1e47      	subs	r7, r0, #1
 8002bfc:	2f01      	cmp	r7, #1
 8002bfe:	d81e      	bhi.n	8002c3e <LL_GPIO_Init+0x72>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002c00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002c04:	fa93 f7a3 	rbit	r7, r3
 8002c08:	fab7 f787 	clz	r7, r7
 8002c0c:	fa93 f9a3 	rbit	r9, r3
 8002c10:	007f      	lsls	r7, r7, #1
 8002c12:	fab9 f989 	clz	r9, r9
 8002c16:	fa06 f707 	lsl.w	r7, r6, r7
 8002c1a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002c1e:	ea28 0807 	bic.w	r8, r8, r7
 8002c22:	688f      	ldr	r7, [r1, #8]
 8002c24:	fa07 f709 	lsl.w	r7, r7, r9
 8002c28:	ea48 0707 	orr.w	r7, r8, r7
 8002c2c:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c2e:	6857      	ldr	r7, [r2, #4]
 8002c30:	ea0e 0807 	and.w	r8, lr, r7
 8002c34:	68cf      	ldr	r7, [r1, #12]
 8002c36:	436f      	muls	r7, r5
 8002c38:	ea48 0707 	orr.w	r7, r8, r7
 8002c3c:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002c3e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002c42:	fa93 f7a3 	rbit	r7, r3
 8002c46:	fab7 f787 	clz	r7, r7
 8002c4a:	fa93 f9a3 	rbit	r9, r3
 8002c4e:	007f      	lsls	r7, r7, #1
 8002c50:	fab9 f989 	clz	r9, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002c54:	2802      	cmp	r0, #2
 8002c56:	fa06 f707 	lsl.w	r7, r6, r7
 8002c5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002c5e:	ea28 0807 	bic.w	r8, r8, r7
 8002c62:	690f      	ldr	r7, [r1, #16]
 8002c64:	fa07 f709 	lsl.w	r7, r7, r9
 8002c68:	ea48 0707 	orr.w	r7, r8, r7
 8002c6c:	60d7      	str	r7, [r2, #12]
 8002c6e:	d11f      	bne.n	8002cb0 <LL_GPIO_Init+0xe4>
 8002c70:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c74:	fab7 f787 	clz	r7, r7
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c78:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c7c:	2f07      	cmp	r7, #7
 8002c7e:	dc2d      	bgt.n	8002cdc <LL_GPIO_Init+0x110>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002c80:	6a17      	ldr	r7, [r2, #32]
 8002c82:	fa93 faa3 	rbit	sl, r3
 8002c86:	faba fa8a 	clz	sl, sl
 8002c8a:	fa93 f8a3 	rbit	r8, r3
 8002c8e:	f04f 0b0f 	mov.w	fp, #15
 8002c92:	fab8 f888 	clz	r8, r8
 8002c96:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002c9a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002c9e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002ca2:	fa09 f808 	lsl.w	r8, r9, r8
 8002ca6:	ea27 070a 	bic.w	r7, r7, sl
 8002caa:	ea47 0708 	orr.w	r7, r7, r8
 8002cae:	6217      	str	r7, [r2, #32]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002cb0:	f8d2 8000 	ldr.w	r8, [r2]
 8002cb4:	fa93 f7a3 	rbit	r7, r3
 8002cb8:	fab7 f787 	clz	r7, r7
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	007f      	lsls	r7, r7, #1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa06 f707 	lsl.w	r7, r6, r7
 8002ccc:	4098      	lsls	r0, r3
 8002cce:	ea28 0807 	bic.w	r8, r8, r7
 8002cd2:	ea48 0000 	orr.w	r0, r8, r0
 8002cd6:	6010      	str	r0, [r2, #0]
    pinpos++;
 8002cd8:	3401      	adds	r4, #1
 8002cda:	e784      	b.n	8002be6 <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002cdc:	6a57      	ldr	r7, [r2, #36]	@ 0x24
 8002cde:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8002ce2:	fa98 faa8 	rbit	sl, r8
 8002ce6:	faba fa8a 	clz	sl, sl
 8002cea:	fa98 f8a8 	rbit	r8, r8
 8002cee:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8002cf2:	fab8 f888 	clz	r8, r8
 8002cf6:	f04f 0a0f 	mov.w	sl, #15
 8002cfa:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002cfe:	fa0a fa0b 	lsl.w	sl, sl, fp
 8002d02:	fa09 f908 	lsl.w	r9, r9, r8
 8002d06:	ea27 070a 	bic.w	r7, r7, sl
 8002d0a:	ea47 0709 	orr.w	r7, r7, r9
 8002d0e:	6257      	str	r7, [r2, #36]	@ 0x24
}
 8002d10:	e7ce      	b.n	8002cb0 <LL_GPIO_Init+0xe4>
	...

08002d14 <LL_RCC_HSI_IsReady>:
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002d14:	4b02      	ldr	r3, [pc, #8]	@ (8002d20 <LL_RCC_HSI_IsReady+0xc>)
 8002d16:	6818      	ldr	r0, [r3, #0]
}
 8002d18:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800

08002d24 <LL_RCC_LSE_IsReady>:
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002d24:	4b02      	ldr	r3, [pc, #8]	@ (8002d30 <LL_RCC_LSE_IsReady+0xc>)
 8002d26:	6f18      	ldr	r0, [r3, #112]	@ 0x70
}
 8002d28:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002d36:	4a04      	ldr	r2, [pc, #16]	@ (8002d48 <RCC_GetHCLKClockFreq+0x14>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d40:	40d8      	lsrs	r0, r3
 8002d42:	4770      	bx	lr
 8002d44:	40023800 	.word	0x40023800
 8002d48:	080184a1 	.word	0x080184a1

08002d4c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002d4e:	4a04      	ldr	r2, [pc, #16]	@ (8002d60 <RCC_GetPCLK1ClockFreq+0x14>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d58:	40d8      	lsrs	r0, r3
 8002d5a:	4770      	bx	lr
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08018499 	.word	0x08018499

08002d64 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d66:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <RCC_GetPCLK2ClockFreq+0x14>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d70:	40d8      	lsrs	r0, r3
 8002d72:	4770      	bx	lr
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08018499 	.word	0x08018499

08002d7c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <RCC_PLL_GetFreqDomain_SYS+0x34>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002d7e:	480d      	ldr	r0, [pc, #52]	@ (8002db4 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 8002d80:	685a      	ldr	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002d88:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002d8a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8002d8e:	bf08      	it	eq
 8002d90:	4610      	moveq	r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d92:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002d94:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d96:	f3c2 1288 	ubfx	r2, r2, #6, #9

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d9e:	fbb0 f0f1 	udiv	r0, r0, r1
 8002da2:	3301      	adds	r3, #1
 8002da4:	4350      	muls	r0, r2
 8002da6:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8002da8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	00f42400 	.word	0x00f42400

08002dbc <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <RCC_GetSystemClockFreq+0x1c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d003      	beq.n	8002dd0 <RCC_GetSystemClockFreq+0x14>
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d103      	bne.n	8002dd4 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002dcc:	f7ff bfd6 	b.w	8002d7c <RCC_PLL_GetFreqDomain_SYS>
  switch (LL_RCC_GetSysClkSource())
 8002dd0:	4802      	ldr	r0, [pc, #8]	@ (8002ddc <RCC_GetSystemClockFreq+0x20>)
 8002dd2:	4770      	bx	lr
      frequency = HSI_VALUE;
 8002dd4:	4802      	ldr	r0, [pc, #8]	@ (8002de0 <RCC_GetSystemClockFreq+0x24>)
}
 8002dd6:	4770      	bx	lr
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	007a1200 	.word	0x007a1200
 8002de0:	00f42400 	.word	0x00f42400

08002de4 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002de4:	2803      	cmp	r0, #3
{
 8002de6:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002de8:	d128      	bne.n	8002e3c <LL_RCC_GetUSARTClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8002dea:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002dec:	4a34      	ldr	r2, [pc, #208]	@ (8002ec0 <LL_RCC_GetUSARTClockFreq+0xdc>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <LL_RCC_GetUSARTClockFreq+0x2e>
 8002dfe:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8002e02:	d00c      	beq.n	8002e1e <LL_RCC_GetUSARTClockFreq+0x3a>
 8002e04:	3a01      	subs	r2, #1
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d110      	bne.n	8002e2c <LL_RCC_GetUSARTClockFreq+0x48>
}
 8002e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 8002e0e:	f7ff bfd5 	b.w	8002dbc <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 8002e12:	f7ff ff7f 	bl	8002d14 <LL_RCC_HSI_IsReady>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d14e      	bne.n	8002eb8 <LL_RCC_GetUSARTClockFreq+0xd4>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e1a:	2000      	movs	r0, #0
}
 8002e1c:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 8002e1e:	f7ff ff81 	bl	8002d24 <LL_RCC_LSE_IsReady>
 8002e22:	3800      	subs	r0, #0
 8002e24:	bf18      	it	ne
 8002e26:	2001      	movne	r0, #1
 8002e28:	03c0      	lsls	r0, r0, #15
 8002e2a:	e7f7      	b.n	8002e1c <LL_RCC_GetUSARTClockFreq+0x38>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e2c:	f7ff ffc6 	bl	8002dbc <RCC_GetSystemClockFreq>
 8002e30:	f7ff ff80 	bl	8002d34 <RCC_GetHCLKClockFreq>
}
 8002e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e38:	f7ff bf94 	b.w	8002d64 <RCC_GetPCLK2ClockFreq>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002e3c:	280c      	cmp	r0, #12
 8002e3e:	d117      	bne.n	8002e70 <LL_RCC_GetUSARTClockFreq+0x8c>
 8002e40:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002e42:	4a20      	ldr	r2, [pc, #128]	@ (8002ec4 <LL_RCC_GetUSARTClockFreq+0xe0>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d0de      	beq.n	8002e12 <LL_RCC_GetUSARTClockFreq+0x2e>
 8002e54:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8002e58:	d0e1      	beq.n	8002e1e <LL_RCC_GetUSARTClockFreq+0x3a>
 8002e5a:	3a04      	subs	r2, #4
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d0d4      	beq.n	8002e0a <LL_RCC_GetUSARTClockFreq+0x26>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e60:	f7ff ffac 	bl	8002dbc <RCC_GetSystemClockFreq>
 8002e64:	f7ff ff66 	bl	8002d34 <RCC_GetHCLKClockFreq>
}
 8002e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e6c:	f7ff bf6e 	b.w	8002d4c <RCC_GetPCLK1ClockFreq>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8002e70:	f5b0 6f40 	cmp.w	r0, #3072	@ 0xc00
 8002e74:	d10f      	bne.n	8002e96 <LL_RCC_GetUSARTClockFreq+0xb2>
 8002e76:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002e78:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <LL_RCC_GetUSARTClockFreq+0xe4>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e82:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d0c3      	beq.n	8002e12 <LL_RCC_GetUSARTClockFreq+0x2e>
 8002e8a:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8002e8e:	d0c6      	beq.n	8002e1e <LL_RCC_GetUSARTClockFreq+0x3a>
 8002e90:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8002e94:	e7b7      	b.n	8002e06 <LL_RCC_GetUSARTClockFreq+0x22>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002e96:	2830      	cmp	r0, #48	@ 0x30
 8002e98:	d1bf      	bne.n	8002e1a <LL_RCC_GetUSARTClockFreq+0x36>
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <LL_RCC_GetUSARTClockFreq+0xd8>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <LL_RCC_GetUSARTClockFreq+0xe8>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ea6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d0b1      	beq.n	8002e12 <LL_RCC_GetUSARTClockFreq+0x2e>
 8002eae:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002eb2:	d0b4      	beq.n	8002e1e <LL_RCC_GetUSARTClockFreq+0x3a>
 8002eb4:	3a10      	subs	r2, #16
 8002eb6:	e7d1      	b.n	8002e5c <LL_RCC_GetUSARTClockFreq+0x78>
          usart_frequency = HSI_VALUE;
 8002eb8:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <LL_RCC_GetUSARTClockFreq+0xec>)
  return usart_frequency;
 8002eba:	e7af      	b.n	8002e1c <LL_RCC_GetUSARTClockFreq+0x38>
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	00030002 	.word	0x00030002
 8002ec4:	000c0008 	.word	0x000c0008
 8002ec8:	0c000800 	.word	0x0c000800
 8002ecc:	00300020 	.word	0x00300020
 8002ed0:	00f42400 	.word	0x00f42400

08002ed4 <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002ed4:	28c0      	cmp	r0, #192	@ 0xc0
{
 8002ed6:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002ed8:	d128      	bne.n	8002f2c <LL_RCC_GetUARTClockFreq+0x58>
 8002eda:	4b32      	ldr	r3, [pc, #200]	@ (8002fa4 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002edc:	4a32      	ldr	r2, [pc, #200]	@ (8002fa8 <LL_RCC_GetUARTClockFreq+0xd4>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ee6:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <LL_RCC_GetUARTClockFreq+0x2e>
 8002eee:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002ef2:	d00c      	beq.n	8002f0e <LL_RCC_GetUARTClockFreq+0x3a>
 8002ef4:	3a40      	subs	r2, #64	@ 0x40
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d110      	bne.n	8002f1c <LL_RCC_GetUARTClockFreq+0x48>
}
 8002efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetSystemClockFreq();
 8002efe:	f7ff bf5d 	b.w	8002dbc <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 8002f02:	f7ff ff07 	bl	8002d14 <LL_RCC_HSI_IsReady>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d149      	bne.n	8002f9e <LL_RCC_GetUARTClockFreq+0xca>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f0a:	2000      	movs	r0, #0
}
 8002f0c:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 8002f0e:	f7ff ff09 	bl	8002d24 <LL_RCC_LSE_IsReady>
 8002f12:	3800      	subs	r0, #0
 8002f14:	bf18      	it	ne
 8002f16:	2001      	movne	r0, #1
 8002f18:	03c0      	lsls	r0, r0, #15
 8002f1a:	e7f7      	b.n	8002f0c <LL_RCC_GetUARTClockFreq+0x38>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002f1c:	f7ff ff4e 	bl	8002dbc <RCC_GetSystemClockFreq>
 8002f20:	f7ff ff08 	bl	8002d34 <RCC_GetHCLKClockFreq>
}
 8002f24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002f28:	f7ff bf10 	b.w	8002d4c <RCC_GetPCLK1ClockFreq>
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002f2c:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
 8002f30:	d10f      	bne.n	8002f52 <LL_RCC_GetUARTClockFreq+0x7e>
 8002f32:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa4 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <LL_RCC_GetUARTClockFreq+0xd8>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d0dd      	beq.n	8002f02 <LL_RCC_GetUARTClockFreq+0x2e>
 8002f46:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8002f4a:	d0e0      	beq.n	8002f0e <LL_RCC_GetUARTClockFreq+0x3a>
 8002f4c:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8002f50:	e7d1      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x22>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8002f52:	f5b0 5f40 	cmp.w	r0, #12288	@ 0x3000
 8002f56:	d10f      	bne.n	8002f78 <LL_RCC_GetUARTClockFreq+0xa4>
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002f5a:	4a15      	ldr	r2, [pc, #84]	@ (8002fb0 <LL_RCC_GetUARTClockFreq+0xdc>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f60:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f64:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d0ca      	beq.n	8002f02 <LL_RCC_GetUARTClockFreq+0x2e>
 8002f6c:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8002f70:	d0cd      	beq.n	8002f0e <LL_RCC_GetUARTClockFreq+0x3a>
 8002f72:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 8002f76:	e7be      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x22>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8002f78:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8002f7c:	d1c5      	bne.n	8002f0a <LL_RCC_GetUARTClockFreq+0x36>
 8002f7e:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <LL_RCC_GetUARTClockFreq+0xd0>)
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002f80:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <LL_RCC_GetUARTClockFreq+0xe0>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f8a:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d0b7      	beq.n	8002f02 <LL_RCC_GetUARTClockFreq+0x2e>
 8002f92:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8002f96:	d0ba      	beq.n	8002f0e <LL_RCC_GetUARTClockFreq+0x3a>
 8002f98:	f5a2 4280 	sub.w	r2, r2, #16384	@ 0x4000
 8002f9c:	e7ab      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x22>
          uart_frequency = HSI_VALUE;
 8002f9e:	4806      	ldr	r0, [pc, #24]	@ (8002fb8 <LL_RCC_GetUARTClockFreq+0xe4>)
  return uart_frequency;
 8002fa0:	e7b4      	b.n	8002f0c <LL_RCC_GetUARTClockFreq+0x38>
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	00c00080 	.word	0x00c00080
 8002fac:	03000200 	.word	0x03000200
 8002fb0:	30002000 	.word	0x30002000
 8002fb4:	c0008000 	.word	0xc0008000
 8002fb8:	00f42400 	.word	0x00f42400

08002fbc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8002fbc:	6800      	ldr	r0, [r0, #0]
}
 8002fbe:	f000 0003 	and.w	r0, r0, #3
 8002fc2:	4770      	bx	lr

08002fc4 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 8002fc4:	6900      	ldr	r0, [r0, #16]
}
 8002fc6:	b2c0      	uxtb	r0, r0
 8002fc8:	4770      	bx	lr

08002fca <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8002fca:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8002fcc:	5840      	ldr	r0, [r0, r1]
}  
 8002fce:	4770      	bx	lr

08002fd0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002fd0:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002fd2:	6803      	ldr	r3, [r0, #0]
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	460d      	mov	r5, r1
 8002fd8:	07db      	lsls	r3, r3, #31
 8002fda:	d501      	bpl.n	8002fe0 <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 8002fdc:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002fde:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8002fe0:	68ea      	ldr	r2, [r5, #12]
 8002fe2:	686b      	ldr	r3, [r5, #4]
 8002fe4:	6801      	ldr	r1, [r0, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	692a      	ldr	r2, [r5, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	69aa      	ldr	r2, [r5, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <LL_USART_Init+0xd8>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ff6:	68aa      	ldr	r2, [r5, #8]
 8002ff8:	6003      	str	r3, [r0, #0]
 8002ffa:	6843      	ldr	r3, [r0, #4]
 8002ffc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003000:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003002:	696a      	ldr	r2, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003004:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003006:	6883      	ldr	r3, [r0, #8]
 8003008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300c:	4313      	orrs	r3, r2
 800300e:	6083      	str	r3, [r0, #8]
    if (USARTx == USART1)
 8003010:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <LL_USART_Init+0xdc>)
 8003012:	4298      	cmp	r0, r3
 8003014:	d119      	bne.n	800304a <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003016:	2003      	movs	r0, #3
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003018:	f7ff fee4 	bl	8002de4 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800301c:	2800      	cmp	r0, #0
 800301e:	d0dd      	beq.n	8002fdc <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 8003020:	682a      	ldr	r2, [r5, #0]
 8003022:	2a00      	cmp	r2, #0
 8003024:	d0da      	beq.n	8002fdc <LL_USART_Init+0xc>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003026:	69a9      	ldr	r1, [r5, #24]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003028:	0853      	lsrs	r3, r2, #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800302a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800302e:	d135      	bne.n	800309c <LL_USART_Init+0xcc>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003030:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003034:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 8003038:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800303c:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800303e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003042:	4313      	orrs	r3, r2
      status = SUCCESS;
 8003044:	2000      	movs	r0, #0
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003046:	60e3      	str	r3, [r4, #12]
 8003048:	e7c9      	b.n	8002fde <LL_USART_Init+0xe>
    else if (USARTx == USART2)
 800304a:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <LL_USART_Init+0xe0>)
 800304c:	4298      	cmp	r0, r3
 800304e:	d101      	bne.n	8003054 <LL_USART_Init+0x84>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003050:	200c      	movs	r0, #12
 8003052:	e7e1      	b.n	8003018 <LL_USART_Init+0x48>
    else if (USARTx == USART3)
 8003054:	4b17      	ldr	r3, [pc, #92]	@ (80030b4 <LL_USART_Init+0xe4>)
 8003056:	4298      	cmp	r0, r3
 8003058:	d101      	bne.n	800305e <LL_USART_Init+0x8e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800305a:	2030      	movs	r0, #48	@ 0x30
 800305c:	e7dc      	b.n	8003018 <LL_USART_Init+0x48>
    else if (USARTx == UART4)
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <LL_USART_Init+0xe8>)
 8003060:	4298      	cmp	r0, r3
 8003062:	d103      	bne.n	800306c <LL_USART_Init+0x9c>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003064:	20c0      	movs	r0, #192	@ 0xc0
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8003066:	f7ff ff35 	bl	8002ed4 <LL_RCC_GetUARTClockFreq>
 800306a:	e7d7      	b.n	800301c <LL_USART_Init+0x4c>
    else if (USARTx == UART5)
 800306c:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <LL_USART_Init+0xec>)
 800306e:	4298      	cmp	r0, r3
 8003070:	d102      	bne.n	8003078 <LL_USART_Init+0xa8>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003072:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8003076:	e7f6      	b.n	8003066 <LL_USART_Init+0x96>
    else if (USARTx == USART6)
 8003078:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <LL_USART_Init+0xf0>)
 800307a:	4298      	cmp	r0, r3
 800307c:	d102      	bne.n	8003084 <LL_USART_Init+0xb4>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 800307e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003082:	e7c9      	b.n	8003018 <LL_USART_Init+0x48>
    else if (USARTx == UART7)
 8003084:	4b0f      	ldr	r3, [pc, #60]	@ (80030c4 <LL_USART_Init+0xf4>)
 8003086:	4298      	cmp	r0, r3
 8003088:	d102      	bne.n	8003090 <LL_USART_Init+0xc0>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800308a:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800308e:	e7ea      	b.n	8003066 <LL_USART_Init+0x96>
    else if (USARTx == UART8)
 8003090:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <LL_USART_Init+0xf8>)
 8003092:	4298      	cmp	r0, r3
 8003094:	d1a2      	bne.n	8002fdc <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8003096:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800309a:	e7e4      	b.n	8003066 <LL_USART_Init+0x96>
 800309c:	4403      	add	r3, r0
 800309e:	fbb3 f3f2 	udiv	r3, r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	e7ce      	b.n	8003044 <LL_USART_Init+0x74>
 80030a6:	bf00      	nop
 80030a8:	efff69f3 	.word	0xefff69f3
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40004400 	.word	0x40004400
 80030b4:	40004800 	.word	0x40004800
 80030b8:	40004c00 	.word	0x40004c00
 80030bc:	40005000 	.word	0x40005000
 80030c0:	40011400 	.word	0x40011400
 80030c4:	40007800 	.word	0x40007800
 80030c8:	40007c00 	.word	0x40007c00

080030cc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80030cc:	4b01      	ldr	r3, [pc, #4]	@ (80030d4 <LL_SetSystemCoreClock+0x8>)
 80030ce:	6018      	str	r0, [r3, #0]
}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000014 	.word	0x20000014

080030d8 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 80030da:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 80030dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030de:	4302      	orrs	r2, r0
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	4003      	ands	r3, r0
 80030e6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80030e8:	9b01      	ldr	r3, [sp, #4]
}
 80030ea:	b002      	add	sp, #8
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <CmdResp2Error>:
static SD_Error CmdResp2Error(void)
{
  SD_Error errorstatus = SDMMC_OK;
  uint32_t status;

  status = SDMMC1->STA;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <CmdResp2Error+0x2c>)

  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND)))
  {
    status = SDMMC1->STA;
 80030f6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND)))
 80030f8:	f010 0f45 	tst.w	r0, #69	@ 0x45
 80030fc:	d0fb      	beq.n	80030f6 <CmdResp2Error+0x2>
  }

  if (status & SDMMC_STA_CTIMEOUT)
 80030fe:	f010 0f04 	tst.w	r0, #4
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <CmdResp2Error+0x2c>)
 8003104:	d003      	beq.n	800310e <CmdResp2Error+0x1a>
  {
    errorstatus = SDMMC_CMD_RSP_TIMEOUT;
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003106:	2204      	movs	r2, #4
    return(errorstatus);
 8003108:	2003      	movs	r0, #3
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38
    return(errorstatus);
 800310c:	4770      	bx	lr
  }
  else if (status & SDMMC_STA_CCRCFAIL)
 800310e:	f010 0001 	ands.w	r0, r0, #1
 8003112:	d002      	beq.n	800311a <CmdResp2Error+0x26>
  {
    errorstatus = SDMMC_CMD_CRC_FAIL;
    SDMMC1->ICR = SDMMC_ICR_CCRCFAILC;
 8003114:	2001      	movs	r0, #1
 8003116:	6398      	str	r0, [r3, #56]	@ 0x38
    return(errorstatus);
 8003118:	4770      	bx	lr
  }

  /*!< Clear all the static flags */
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 800311a:	4a02      	ldr	r2, [pc, #8]	@ (8003124 <CmdResp2Error+0x30>)
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38

  return(errorstatus);
}
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00
 8003124:	004005ff 	.word	0x004005ff

08003128 <CmdResp1Error>:
{
 8003128:	b508      	push	{r3, lr}
  status = SDMMC1->STA;
 800312a:	4a37      	ldr	r2, [pc, #220]	@ (8003208 <CmdResp1Error+0xe0>)
{
 800312c:	4603      	mov	r3, r0
    status = SDMMC1->STA;
 800312e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT)))
 8003130:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8003134:	d0fb      	beq.n	800312e <CmdResp1Error+0x6>
  if (status & SDMMC_STA_CTIMEOUT)
 8003136:	f011 0f04 	tst.w	r1, #4
 800313a:	4833      	ldr	r0, [pc, #204]	@ (8003208 <CmdResp1Error+0xe0>)
 800313c:	d003      	beq.n	8003146 <CmdResp1Error+0x1e>
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 800313e:	2304      	movs	r3, #4
 8003140:	6383      	str	r3, [r0, #56]	@ 0x38
    return(errorstatus);
 8003142:	2003      	movs	r0, #3
}
 8003144:	bd08      	pop	{r3, pc}
  else if (status & SDMMC_STA_CCRCFAIL)
 8003146:	f011 0101 	ands.w	r1, r1, #1
 800314a:	d003      	beq.n	8003154 <CmdResp1Error+0x2c>
    SDMMC1->ICR = SDMMC_ICR_CCRCFAILC;
 800314c:	2301      	movs	r3, #1
 800314e:	6383      	str	r3, [r0, #56]	@ 0x38
    return(errorstatus);
 8003150:	4618      	mov	r0, r3
 8003152:	e7f7      	b.n	8003144 <CmdResp1Error+0x1c>
  if ((SDMMC1->RESPCMD) != cmd)
 8003154:	6902      	ldr	r2, [r0, #16]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <CmdResp1Error+0x36>
    return(errorstatus);
 800315a:	2010      	movs	r0, #16
 800315c:	e7f2      	b.n	8003144 <CmdResp1Error+0x1c>
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 800315e:	4b2b      	ldr	r3, [pc, #172]	@ (800320c <CmdResp1Error+0xe4>)
 8003160:	6383      	str	r3, [r0, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);  //stm32f7xx_ll_sdmmc.h 446 SDMMC_RESP1 = 0x00000000U
 8003162:	f7ff ff32 	bl	8002fca <SDMMC_GetResponse>
 8003166:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003168:	4829      	ldr	r0, [pc, #164]	@ (8003210 <CmdResp1Error+0xe8>)
 800316a:	4018      	ands	r0, r3
 800316c:	2800      	cmp	r0, #0
 800316e:	d0e9      	beq.n	8003144 <CmdResp1Error+0x1c>
  if (response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003170:	2b00      	cmp	r3, #0
 8003172:	db27      	blt.n	80031c4 <CmdResp1Error+0x9c>
  if (response_r1 & SDMMC_OCR_ADDR_MISALIGNED)
 8003174:	005a      	lsls	r2, r3, #1
 8003176:	d427      	bmi.n	80031c8 <CmdResp1Error+0xa0>
  if (response_r1 & SDMMC_OCR_BLOCK_LEN_ERR)
 8003178:	0099      	lsls	r1, r3, #2
 800317a:	d427      	bmi.n	80031cc <CmdResp1Error+0xa4>
  if (response_r1 & SDMMC_OCR_ERASE_SEQ_ERR)
 800317c:	00da      	lsls	r2, r3, #3
 800317e:	d427      	bmi.n	80031d0 <CmdResp1Error+0xa8>
  if (response_r1 & SDMMC_OCR_BAD_ERASE_PARAM)
 8003180:	0119      	lsls	r1, r3, #4
 8003182:	d427      	bmi.n	80031d4 <CmdResp1Error+0xac>
  if (response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	d427      	bmi.n	80031d8 <CmdResp1Error+0xb0>
  if (response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003188:	01d9      	lsls	r1, r3, #7
 800318a:	d427      	bmi.n	80031dc <CmdResp1Error+0xb4>
  if (response_r1 & SDMMC_OCR_COM_CRC_FAILED)
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	d427      	bmi.n	80031e0 <CmdResp1Error+0xb8>
  if (response_r1 & SDMMC_OCR_ILLEGAL_CMD)
 8003190:	0259      	lsls	r1, r3, #9
 8003192:	d4e2      	bmi.n	800315a <CmdResp1Error+0x32>
  if (response_r1 & SDMMC_OCR_CARD_ECC_FAILED)
 8003194:	029a      	lsls	r2, r3, #10
 8003196:	d425      	bmi.n	80031e4 <CmdResp1Error+0xbc>
  if (response_r1 & SDMMC_OCR_CC_ERROR)
 8003198:	02d9      	lsls	r1, r3, #11
 800319a:	d425      	bmi.n	80031e8 <CmdResp1Error+0xc0>
  if (response_r1 & SDMMC_OCR_GENERAL_UNKNOWN_ERROR)
 800319c:	031a      	lsls	r2, r3, #12
 800319e:	d425      	bmi.n	80031ec <CmdResp1Error+0xc4>
  if (response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN)
 80031a0:	0359      	lsls	r1, r3, #13
 80031a2:	d425      	bmi.n	80031f0 <CmdResp1Error+0xc8>
  if (response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) //SD_OCR_STREAM_WRITE_OVERRUN
 80031a4:	039a      	lsls	r2, r3, #14
 80031a6:	d425      	bmi.n	80031f4 <CmdResp1Error+0xcc>
  if (response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE)//SD_OCR_CID_CSD_OVERWRIETE
 80031a8:	03d9      	lsls	r1, r3, #15
 80031aa:	d425      	bmi.n	80031f8 <CmdResp1Error+0xd0>
  if (response_r1 & SDMMC_OCR_WP_ERASE_SKIP)
 80031ac:	041a      	lsls	r2, r3, #16
 80031ae:	d425      	bmi.n	80031fc <CmdResp1Error+0xd4>
  if (response_r1 & SDMMC_OCR_CARD_ECC_DISABLED)
 80031b0:	0459      	lsls	r1, r3, #17
 80031b2:	d425      	bmi.n	8003200 <CmdResp1Error+0xd8>
  if (response_r1 & SDMMC_OCR_ERASE_RESET)
 80031b4:	049a      	lsls	r2, r3, #18
 80031b6:	d425      	bmi.n	8003204 <CmdResp1Error+0xdc>
    return(errorstatus);
 80031b8:	f013 0f08 	tst.w	r3, #8
 80031bc:	bf14      	ite	ne
 80031be:	201a      	movne	r0, #26
 80031c0:	2000      	moveq	r0, #0
 80031c2:	e7bf      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_ADDR_OUT_OF_RANGE);
 80031c4:	201c      	movs	r0, #28
 80031c6:	e7bd      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_ADDR_MISALIGNED);
 80031c8:	2009      	movs	r0, #9
 80031ca:	e7bb      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_BLOCK_LEN_ERR);
 80031cc:	200a      	movs	r0, #10
 80031ce:	e7b9      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_ERASE_SEQ_ERR);
 80031d0:	200b      	movs	r0, #11
 80031d2:	e7b7      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_BAD_ERASE_PARAM);
 80031d4:	200c      	movs	r0, #12
 80031d6:	e7b5      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_WRITE_PROT_VIOLATION);
 80031d8:	200d      	movs	r0, #13
 80031da:	e7b3      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_LOCK_UNLOCK_FAILED);
 80031dc:	200e      	movs	r0, #14
 80031de:	e7b1      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_COM_CRC_FAILED);
 80031e0:	200f      	movs	r0, #15
 80031e2:	e7af      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_CARD_ECC_FAILED);
 80031e4:	2011      	movs	r0, #17
 80031e6:	e7ad      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_CC_ERROR);
 80031e8:	2012      	movs	r0, #18
 80031ea:	e7ab      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_GENERAL_UNKNOWN_ERROR);
 80031ec:	2013      	movs	r0, #19
 80031ee:	e7a9      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_STREAM_READ_UNDERRUN);
 80031f0:	2014      	movs	r0, #20
 80031f2:	e7a7      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_STREAM_WRITE_OVERRUN);
 80031f4:	2015      	movs	r0, #21
 80031f6:	e7a5      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_CID_CSD_OVERWRITE);
 80031f8:	2016      	movs	r0, #22
 80031fa:	e7a3      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_WP_ERASE_SKIP);
 80031fc:	2017      	movs	r0, #23
 80031fe:	e7a1      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_CARD_ECC_DISABLED);
 8003200:	2018      	movs	r0, #24
 8003202:	e79f      	b.n	8003144 <CmdResp1Error+0x1c>
    return(SDMMC_ERASE_RESET);
 8003204:	2019      	movs	r0, #25
 8003206:	e79d      	b.n	8003144 <CmdResp1Error+0x1c>
 8003208:	40012c00 	.word	0x40012c00
 800320c:	004005ff 	.word	0x004005ff
 8003210:	fdffe008 	.word	0xfdffe008

08003214 <FindSCR.constprop.0>:
  */
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
  uint32_t tmpreg, index = 0;
  SD_Error errorstatus = SDMMC_OK;
  uint32_t tempscr[2] = {0, 0};
 8003214:	2300      	movs	r3, #0
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
 8003216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003218:	4c2a      	ldr	r4, [pc, #168]	@ (80032c4 <FindSCR.constprop.0+0xb0>)
 800321a:	2708      	movs	r7, #8
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
 800321c:	4605      	mov	r5, r0

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDMMC1_Command(SDMMC_CMD_SET_BLOCKLEN, SDMMC_RESPONSE_SHORT, (uint32_t)8);
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 800321e:	2010      	movs	r0, #16
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
 8003220:	460e      	mov	r6, r1
  uint32_t tempscr[2] = {0, 0};
 8003222:	e9cd 3300 	strd	r3, r3, [sp]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003226:	f44f 638a 	mov.w	r3, #1104	@ 0x450
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800322a:	60a7      	str	r7, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800322c:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 800322e:	f7ff ff7b 	bl	8003128 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 8003232:	bb30      	cbnz	r0, 8003282 <FindSCR.constprop.0+0x6e>
  {
    return(errorstatus);
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t)(((uint32_t) rca) << 16)));
 8003234:	042d      	lsls	r5, r5, #16
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003236:	f240 4377 	movw	r3, #1143	@ 0x477
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 800323a:	2037      	movs	r0, #55	@ 0x37
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800323c:	60a5      	str	r5, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800323e:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003240:	f7ff ff72 	bl	8003128 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 8003244:	b9e8      	cbnz	r0, 8003282 <FindSCR.constprop.0+0x6e>
  //SDIO_DataInitStructure.TransferDir = SDIO_TransferDir_ToSDIO;
  //SDIO_DataInitStructure.TransferMode = SDIO_TransferMode_Block;SDIO_TRANSFER_MODE_BLOCK=0
  //SDIO_DataInitStructure.DPSM = SDIO_DPSM_Enable;SDIO_DPSM_ENABLE=SDIO_DCTRL_DTEN=1
  //SDMMC_ConfigData(SDMMC1, &SDIO_DataInitStructure);
  /* Set the SDMMC Data TimeOut value */
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	6263      	str	r3, [r4, #36]	@ 0x24
  /* Set the SDMMC DataLength value */
  SDMMC1->DLEN = 8;
 800324c:	62a7      	str	r7, [r4, #40]	@ 0x28
  /* Get the SDIO DCTRL value */
  tmpreg = SDMMC1->DCTRL;
 800324e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= ((uint32_t)0xFFFFFF08);
 8003250:	f023 03f7 	bic.w	r3, r3, #247	@ 0xf7
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (SDMMC_DATABLOCK_SIZE_8B) & SDMMC_DCTRL_DBLOCKSIZE;  //data block length when the block data transfer mode is selected
  tmpreg |= (0x0UL<<2) & SDMMC_DCTRL_DTMODE; //0: Block data transfer 1: Stream or SDIO multibyte data transfer
  tmpreg |= (0x1UL<<1) & SDMMC_DCTRL_DTDIR;  //Data transfer direction selection. from sdcard to mcu
  tmpreg |= (0x1UL<<0) & SDMMC_DCTRL_DTEN;   //Data transfer enabled bit
 8003254:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
  /* Write to SDMMC DCTRL */
  SDMMC1->DCTRL = tmpreg;
 8003258:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800325a:	f240 4373 	movw	r3, #1139	@ 0x473
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800325e:	60a0      	str	r0, [r4, #8]

  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDMMC1_Command(SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_RESPONSE_SHORT, 0x0);
  errorstatus = CmdResp1Error(SDMMC_CMD_SD_APP_SEND_SCR);
 8003260:	2033      	movs	r0, #51	@ 0x33
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003262:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SD_APP_SEND_SCR);
 8003264:	f7ff ff60 	bl	8003128 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 8003268:	b958      	cbnz	r0, 8003282 <FindSCR.constprop.0+0x6e>
  {
    return(errorstatus);
  }

  tmpreg = SDMMC1->STA;
 800326a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  uint32_t tmpreg, index = 0;
 800326c:	4602      	mov	r2, r0
  while (!(tmpreg & (SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_DBCKEND))) //| SDMMC_STA_STBITERR
 800326e:	f240 412a 	movw	r1, #1066	@ 0x42a
 8003272:	420b      	tst	r3, r1
  {
    tmpreg = SDMMC1->STA;
 8003274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  while (!(tmpreg & (SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_DBCKEND))) //| SDMMC_STA_STBITERR
 8003276:	d006      	beq.n	8003286 <FindSCR.constprop.0+0x72>
      index++;
    }
  }

  tmpreg = SDMMC1->STA;
  if ((tmpreg & SDMMC_STA_DTIMEOUT) != RESET)
 8003278:	0719      	lsls	r1, r3, #28
 800327a:	d50f      	bpl.n	800329c <FindSCR.constprop.0+0x88>
  {
    SDMMC1->ICR = SDMMC_ICR_DTIMEOUTC;
 800327c:	2308      	movs	r3, #8
    errorstatus = SDMMC_DATA_TIMEOUT;
    return(errorstatus);
 800327e:	2004      	movs	r0, #4
    SDMMC1->ICR = SDMMC_ICR_DTIMEOUTC;
 8003280:	63a3      	str	r3, [r4, #56]	@ 0x38
  *(pscr + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24) | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);

  *(pscr) = ((tempscr[1] & SDMMC_0TO7BITS) << 24) | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);

  return(errorstatus);
}
 8003282:	b003      	add	sp, #12
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpreg & SDMMC_STA_RXDAVL) != RESET)
 8003286:	029d      	lsls	r5, r3, #10
 8003288:	d5f3      	bpl.n	8003272 <FindSCR.constprop.0+0x5e>
      *(tempscr + index) = SDMMC1->FIFO;
 800328a:	ad02      	add	r5, sp, #8
 800328c:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8003290:	eb05 0582 	add.w	r5, r5, r2, lsl #2
      index++;
 8003294:	3201      	adds	r2, #1
      *(tempscr + index) = SDMMC1->FIFO;
 8003296:	f845 7c08 	str.w	r7, [r5, #-8]
      index++;
 800329a:	e7ea      	b.n	8003272 <FindSCR.constprop.0+0x5e>
  else if ((tmpreg & SDMMC_STA_DCRCFAIL) != RESET)
 800329c:	079a      	lsls	r2, r3, #30
 800329e:	d502      	bpl.n	80032a6 <FindSCR.constprop.0+0x92>
    SDMMC1->ICR = SDMMC_ICR_DCRCFAILC;
 80032a0:	2002      	movs	r0, #2
 80032a2:	63a0      	str	r0, [r4, #56]	@ 0x38
    return(errorstatus);
 80032a4:	e7ed      	b.n	8003282 <FindSCR.constprop.0+0x6e>
  else if ((tmpreg & SDMMC_STA_RXOVERR) != RESET)
 80032a6:	069b      	lsls	r3, r3, #26
 80032a8:	d503      	bpl.n	80032b2 <FindSCR.constprop.0+0x9e>
    SDMMC1->ICR = SDMMC_ICR_RXOVERRC;
 80032aa:	2320      	movs	r3, #32
    return(errorstatus);
 80032ac:	2006      	movs	r0, #6
    SDMMC1->ICR = SDMMC_ICR_RXOVERRC;
 80032ae:	63a3      	str	r3, [r4, #56]	@ 0x38
    return(errorstatus);
 80032b0:	e7e7      	b.n	8003282 <FindSCR.constprop.0+0x6e>
  SDMMC1->ICR = SDMMC_STATIC_FLAGS;
 80032b2:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <FindSCR.constprop.0+0xb4>)
 80032b4:	63a3      	str	r3, [r4, #56]	@ 0x38
  *(pscr + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24) | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80032b6:	9b00      	ldr	r3, [sp, #0]
 80032b8:	ba1b      	rev	r3, r3
 80032ba:	6073      	str	r3, [r6, #4]
  *(pscr) = ((tempscr[1] & SDMMC_0TO7BITS) << 24) | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	ba1b      	rev	r3, r3
 80032c0:	6033      	str	r3, [r6, #0]
  return(errorstatus);
 80032c2:	e7de      	b.n	8003282 <FindSCR.constprop.0+0x6e>
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	004005ff 	.word	0x004005ff

080032cc <SDEnWideBus>:
{
 80032cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if((SDMMC_GetResponse(SDMMC1, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032ce:	4c1f      	ldr	r4, [pc, #124]	@ (800334c <SDEnWideBus+0x80>)
  uint32_t scr[2] = {0, 0};
 80032d0:	2100      	movs	r1, #0
{
 80032d2:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(SDMMC1, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032d4:	4620      	mov	r0, r4
  uint32_t scr[2] = {0, 0};
 80032d6:	e9cd 1100 	strd	r1, r1, [sp]
  if((SDMMC_GetResponse(SDMMC1, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032da:	f7ff fe76 	bl	8002fca <SDMMC_GetResponse>
 80032de:	0181      	lsls	r1, r0, #6
 80032e0:	d42f      	bmi.n	8003342 <SDEnWideBus+0x76>
  errorstatus = FindSCR(RCA, scr);
 80032e2:	4d1b      	ldr	r5, [pc, #108]	@ (8003350 <SDEnWideBus+0x84>)
 80032e4:	4669      	mov	r1, sp
 80032e6:	8828      	ldrh	r0, [r5, #0]
 80032e8:	f7ff ff94 	bl	8003214 <FindSCR.constprop.0>
  if (errorstatus != SDMMC_OK)
 80032ec:	bb38      	cbnz	r0, 800333e <SDEnWideBus+0x72>
  if (NewState == ENABLE)
 80032ee:	2e01      	cmp	r6, #1
    if ((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80032f0:	9b01      	ldr	r3, [sp, #4]
  if (NewState == ENABLE)
 80032f2:	d116      	bne.n	8003322 <SDEnWideBus+0x56>
    if ((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80032f4:	035a      	lsls	r2, r3, #13
 80032f6:	d526      	bpl.n	8003346 <SDEnWideBus+0x7a>
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 80032f8:	682b      	ldr	r3, [r5, #0]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80032fa:	2037      	movs	r0, #55	@ 0x37
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 80032fc:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80032fe:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003300:	f240 4377 	movw	r3, #1143	@ 0x477
 8003304:	60e3      	str	r3, [r4, #12]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003306:	f7ff ff0f 	bl	8003128 <CmdResp1Error>
      if (errorstatus != SDMMC_OK)
 800330a:	b9c0      	cbnz	r0, 800333e <SDEnWideBus+0x72>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800330c:	2302      	movs	r3, #2
 800330e:	60a3      	str	r3, [r4, #8]
      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 8003310:	2006      	movs	r0, #6
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003312:	f240 4346 	movw	r3, #1094	@ 0x446
 8003316:	60e3      	str	r3, [r4, #12]
}
 8003318:	b002      	add	sp, #8
 800331a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 800331e:	f7ff bf03 	b.w	8003128 <CmdResp1Error>
    if ((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003322:	03db      	lsls	r3, r3, #15
 8003324:	d50f      	bpl.n	8003346 <SDEnWideBus+0x7a>
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 8003326:	682b      	ldr	r3, [r5, #0]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003328:	2037      	movs	r0, #55	@ 0x37
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 800332a:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800332c:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800332e:	f240 4377 	movw	r3, #1143	@ 0x477
 8003332:	60e3      	str	r3, [r4, #12]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003334:	f7ff fef8 	bl	8003128 <CmdResp1Error>
 8003338:	4603      	mov	r3, r0
      if (errorstatus != SDMMC_OK)
 800333a:	2800      	cmp	r0, #0
 800333c:	d0e7      	beq.n	800330e <SDEnWideBus+0x42>
}
 800333e:	b002      	add	sp, #8
 8003340:	bd70      	pop	{r4, r5, r6, pc}
    return errorstatus;
 8003342:	200e      	movs	r0, #14
 8003344:	e7fb      	b.n	800333e <SDEnWideBus+0x72>
      return(errorstatus);
 8003346:	2025      	movs	r0, #37	@ 0x25
 8003348:	e7f9      	b.n	800333e <SDEnWideBus+0x72>
 800334a:	bf00      	nop
 800334c:	40012c00 	.word	0x40012c00
 8003350:	20004110 	.word	0x20004110

08003354 <TM_FATFS_CheckCardDetectPin>:
  tempreg = GPIOG->IDR;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <TM_FATFS_CheckCardDetectPin+0x10>)
 8003356:	6918      	ldr	r0, [r3, #16]
  if ((tempreg & 0x0004) != 0)
 8003358:	f080 0004 	eor.w	r0, r0, #4
}
 800335c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021800 	.word	0x40021800

08003368 <TM_FATFS_SD_SDIO_disk_ioctl>:
  switch(cmd)
 8003368:	2802      	cmp	r0, #2
 800336a:	d003      	beq.n	8003374 <TM_FATFS_SD_SDIO_disk_ioctl+0xc>
 800336c:	2803      	cmp	r0, #3
 800336e:	d005      	beq.n	800337c <TM_FATFS_SD_SDIO_disk_ioctl+0x14>
}
 8003370:	2000      	movs	r0, #0
 8003372:	4770      	bx	lr
      *(WORD *) buff = 512;
 8003374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003378:	800b      	strh	r3, [r1, #0]
      break;
 800337a:	e7f9      	b.n	8003370 <TM_FATFS_SD_SDIO_disk_ioctl+0x8>
      *(DWORD *) buff = 32;
 800337c:	2320      	movs	r3, #32
 800337e:	600b      	str	r3, [r1, #0]
      break;
 8003380:	e7f6      	b.n	8003370 <TM_FATFS_SD_SDIO_disk_ioctl+0x8>
	...

08003384 <get_fattime>:
}
 8003384:	4800      	ldr	r0, [pc, #0]	@ (8003388 <get_fattime+0x4>)
 8003386:	4770      	bx	lr
 8003388:	5b018a80 	.word	0x5b018a80

0800338c <SD_Detect>:
  __IO uint8_t status = SD_PRESENT;
 800338c:	2301      	movs	r3, #1
{
 800338e:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8003390:	f88d 3007 	strb.w	r3, [sp, #7]
  if (!TM_FATFS_CheckCardDetectPin())
 8003394:	f7ff ffde 	bl	8003354 <TM_FATFS_CheckCardDetectPin>
 8003398:	b908      	cbnz	r0, 800339e <SD_Detect+0x12>
    status = SD_NOT_PRESENT;
 800339a:	f88d 0007 	strb.w	r0, [sp, #7]
  return status;
 800339e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80033a2:	b003      	add	sp, #12
 80033a4:	f85d fb04 	ldr.w	pc, [sp], #4

080033a8 <TM_FATFS_SD_SDIO_disk_status>:
{
 80033a8:	b508      	push	{r3, lr}
  if (SD_Detect() != SD_PRESENT) {
 80033aa:	f7ff ffef 	bl	800338c <SD_Detect>
 80033ae:	2801      	cmp	r0, #1
 80033b0:	d107      	bne.n	80033c2 <TM_FATFS_SD_SDIO_disk_status+0x1a>
    TM_FATFS_SD_SDIO_Stat &= ~STA_PROTECT;
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <TM_FATFS_SD_SDIO_disk_status+0x20>)
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 80033ba:	701a      	strb	r2, [r3, #0]
  return TM_FATFS_SD_SDIO_Stat;
 80033bc:	7818      	ldrb	r0, [r3, #0]
 80033be:	b2c0      	uxtb	r0, r0
}
 80033c0:	bd08      	pop	{r3, pc}
    return STA_NOINIT;
 80033c2:	2001      	movs	r0, #1
 80033c4:	e7fc      	b.n	80033c0 <TM_FATFS_SD_SDIO_disk_status+0x18>
 80033c6:	bf00      	nop
 80033c8:	20000020 	.word	0x20000020

080033cc <SD_LowLevel_DeInit>:
  tempreg = SDMMC1->CLKCR;
 80033cc:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <SD_LowLevel_DeInit+0x64>)
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ce:	4819      	ldr	r0, [pc, #100]	@ (8003434 <SD_LowLevel_DeInit+0x68>)
  tempreg = SDMMC1->CLKCR;
 80033d0:	685a      	ldr	r2, [r3, #4]
{
 80033d2:	b530      	push	{r4, r5, lr}
  tempreg &= ~SDMMC_CLKCR_CLKEN; //(uint32_t)1<<8;  //Clock is disable
 80033d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
  SDMMC1->POWER = 0;
 80033d8:	2400      	movs	r4, #0
{
 80033da:	b087      	sub	sp, #28
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2503      	movs	r5, #3
  SDMMC1->CLKCR = tempreg;
 80033de:	605a      	str	r2, [r3, #4]
  SDMMC1->POWER = 0;
 80033e0:	601c      	str	r4, [r3, #0]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 80033e2:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e6:	4669      	mov	r1, sp
 80033e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80033f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80033f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033fe:	645a      	str	r2, [r3, #68]	@ 0x44
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003400:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;    // 推挽输出模式
 8003404:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003408:	e9cd 3400 	strd	r3, r4, [sp]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800340c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003410:	f7ff fbdc 	bl	8002bcc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003414:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003416:	4669      	mov	r1, sp
 8003418:	4807      	ldr	r0, [pc, #28]	@ (8003438 <SD_LowLevel_DeInit+0x6c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800341a:	e9cd 3400 	strd	r3, r4, [sp]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	e9cd 5402 	strd	r5, r4, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003422:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003426:	f7ff fbd1 	bl	8002bcc <LL_GPIO_Init>
}
 800342a:	b007      	add	sp, #28
 800342c:	bd30      	pop	{r4, r5, pc}
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00

0800343c <SD_LowLevel_Init>:
{
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800343e:	2004      	movs	r0, #4
{
 8003440:	b089      	sub	sp, #36	@ 0x24
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003442:	f7ff fe49 	bl	80030d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003446:	2008      	movs	r0, #8
 8003448:	f7ff fe46 	bl	80030d8 <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;  // 备用功能模式
 800344e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003452:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003456:	250c      	movs	r5, #12
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003458:	eb0d 0100 	add.w	r1, sp, r0
 800345c:	4818      	ldr	r0, [pc, #96]	@ (80034c0 <SD_LowLevel_Init+0x84>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;    // 无上下拉
 800345e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003460:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;  // 备用功能模式
 8003462:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	e9cd 6404 	strd	r6, r4, [sp, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346a:	f7ff fbaf 	bl	8002bcc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800346e:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003470:	a902      	add	r1, sp, #8
 8003472:	4814      	ldr	r0, [pc, #80]	@ (80034c4 <SD_LowLevel_Init+0x88>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;  // 备用功能模式
 8003474:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	e9cd 6404 	strd	r6, r4, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800347c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003480:	f7ff fba4 	bl	8002bcc <LL_GPIO_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <SD_LowLevel_Init+0x8c>)
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003486:	4911      	ldr	r1, [pc, #68]	@ (80034cc <SD_LowLevel_Init+0x90>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8003488:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800348c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800348e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003492:	645a      	str	r2, [r3, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800349a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800349c:	9b01      	ldr	r3, [sp, #4]
 800349e:	2350      	movs	r3, #80	@ 0x50
 80034a0:	f881 3331 	strb.w	r3, [r1, #817]	@ 0x331
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	f7ff fe15 	bl	80030d8 <LL_AHB1_GRP1_EnableClock>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ae:	2360      	movs	r3, #96	@ 0x60
 80034b0:	f881 333b 	strb.w	r3, [r1, #827]	@ 0x33b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80034b8:	604b      	str	r3, [r1, #4]
}
 80034ba:	b009      	add	sp, #36	@ 0x24
 80034bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034be:	bf00      	nop
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	e000e100 	.word	0xe000e100

080034d0 <SD_PowerON>:
{
 80034d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SDMMC1->CLKCR = tempreg;
 80034d4:	2376      	movs	r3, #118	@ 0x76
 80034d6:	4c57      	ldr	r4, [pc, #348]	@ (8003634 <SD_PowerON+0x164>)
  __IO SD_Error errorstatus = SDMMC_OK;
 80034d8:	2500      	movs	r5, #0
  HAL_Delay(1);
 80034da:	2001      	movs	r0, #1
  __IO SD_Error errorstatus = SDMMC_OK;
 80034dc:	f88d 5007 	strb.w	r5, [sp, #7]
  SDMMC1->CLKCR = tempreg;
 80034e0:	6063      	str	r3, [r4, #4]
  SDMMC1->POWER = 0x3UL;
 80034e2:	2303      	movs	r3, #3
 80034e4:	6023      	str	r3, [r4, #0]
  HAL_Delay(1);
 80034e6:	f7fe fa5b 	bl	80019a0 <HAL_Delay>
  SDMMC1->CLKCR |= (0x1UL<<8) & SDMMC_CLKCR_CLKEN_Msk;  //SDMMC_CK en
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	6063      	str	r3, [r4, #4]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80034f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80034f6:	60a5      	str	r5, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80034f8:	60e3      	str	r3, [r4, #12]
  status = SDMMC1->STA;
 80034fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  while ((timeout > 0) && ((status & SDMMC_STA_CMDSENT) == RESET))
 80034fc:	061e      	lsls	r6, r3, #24
 80034fe:	d406      	bmi.n	800350e <SD_PowerON+0x3e>
  timeout = ((uint32_t)0x00010000); //SDIO_CMD0TIMEOUT; /*!< 10000 */
 8003500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  while ((timeout > 0) && ((status & SDMMC_STA_CMDSENT) == RESET))
 8003504:	3b01      	subs	r3, #1
    status = SDMMC1->STA;
 8003506:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  while ((timeout > 0) && ((status & SDMMC_STA_CMDSENT) == RESET))
 8003508:	d012      	beq.n	8003530 <SD_PowerON+0x60>
 800350a:	0615      	lsls	r5, r2, #24
 800350c:	d5fa      	bpl.n	8003504 <SD_PowerON+0x34>
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 800350e:	4b49      	ldr	r3, [pc, #292]	@ (8003634 <SD_PowerON+0x164>)
 8003510:	4a49      	ldr	r2, [pc, #292]	@ (8003638 <SD_PowerON+0x168>)
 8003512:	639a      	str	r2, [r3, #56]	@ 0x38
  return(errorstatus);
 8003514:	2300      	movs	r3, #0
  errorstatus = CmdError();
 8003516:	f88d 3007 	strb.w	r3, [sp, #7]
  if (errorstatus != SDMMC_OK)
 800351a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800351e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003522:	b13b      	cbz	r3, 8003534 <SD_PowerON+0x64>
  return(errorstatus);
 8003524:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003528:	b2c0      	uxtb	r0, r0
}
 800352a:	b002      	add	sp, #8
 800352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return(errorstatus);
 8003530:	2303      	movs	r3, #3
 8003532:	e7f0      	b.n	8003516 <SD_PowerON+0x46>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003534:	4b3f      	ldr	r3, [pc, #252]	@ (8003634 <SD_PowerON+0x164>)
 8003536:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800353a:	6099      	str	r1, [r3, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800353c:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 8003540:	60d9      	str	r1, [r3, #12]
  uint32_t timeout = ((uint32_t)0x00010000); //SDIO_CMD0TIMEOUT;
 8003542:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  status = SDMMC1->STA;
 8003546:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT)) && (timeout > 0))
 8003548:	f010 0f45 	tst.w	r0, #69	@ 0x45
 800354c:	d15a      	bne.n	8003604 <SD_PowerON+0x134>
 800354e:	2900      	cmp	r1, #0
 8003550:	d155      	bne.n	80035fe <SD_PowerON+0x12e>
  status = SDMMC1->STA;
 8003552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003554:	2204      	movs	r2, #4
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38
  errorstatus = CmdResp7Error();
 8003558:	f88d 2007 	strb.w	r2, [sp, #7]
  if (errorstatus == SDMMC_OK)
 800355c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d159      	bne.n	8003618 <SD_PowerON+0x148>
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0;
 8003564:	4b35      	ldr	r3, [pc, #212]	@ (800363c <SD_PowerON+0x16c>)
 8003566:	2201      	movs	r2, #1
    SDType = SDMMC_HIGH_CAPACITY;
 8003568:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0;
 800356c:	601a      	str	r2, [r3, #0]
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800356e:	4c31      	ldr	r4, [pc, #196]	@ (8003634 <SD_PowerON+0x164>)
 8003570:	2300      	movs	r3, #0
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003572:	2037      	movs	r0, #55	@ 0x37
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003574:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003576:	f240 4377 	movw	r3, #1143	@ 0x477
 800357a:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 800357c:	f7ff fdd4 	bl	8003128 <CmdResp1Error>
 8003580:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus == SDMMC_OK)
 8003584:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003588:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1c9      	bne.n	8003524 <SD_PowerON+0x54>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003590:	462f      	mov	r7, r5
      SDMMC1_Command(SDMMC_CMD_SD_APP_OP_COND, SDMMC_RESPONSE_SHORT, (SDMMC_VOLTAGE_WINDOW_SD | SDType));
 8003592:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8003640 <SD_PowerON+0x170>
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003596:	f240 4377 	movw	r3, #1143	@ 0x477
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800359a:	60a7      	str	r7, [r4, #8]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 800359c:	2037      	movs	r0, #55	@ 0x37
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800359e:	60e3      	str	r3, [r4, #12]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80035a0:	f7ff fdc2 	bl	8003128 <CmdResp1Error>
 80035a4:	f88d 0007 	strb.w	r0, [sp, #7]
      if (errorstatus != SDMMC_OK)
 80035a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1b7      	bne.n	8003524 <SD_PowerON+0x54>
      SDMMC1_Command(SDMMC_CMD_SD_APP_OP_COND, SDMMC_RESPONSE_SHORT, (SDMMC_VOLTAGE_WINDOW_SD | SDType));
 80035b4:	ea46 0308 	orr.w	r3, r6, r8
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80035b8:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80035ba:	f240 4369 	movw	r3, #1129	@ 0x469
 80035be:	60e3      	str	r3, [r4, #12]
    status = SDMMC1->STA;
 80035c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT)))
 80035c2:	f013 0f45 	tst.w	r3, #69	@ 0x45
 80035c6:	d0fb      	beq.n	80035c0 <SD_PowerON+0xf0>
  if (status & SDMMC_STA_CTIMEOUT)
 80035c8:	0759      	lsls	r1, r3, #29
 80035ca:	d527      	bpl.n	800361c <SD_PowerON+0x14c>
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 80035cc:	2304      	movs	r3, #4
    return(errorstatus);
 80035ce:	2203      	movs	r2, #3
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 80035d0:	63a3      	str	r3, [r4, #56]	@ 0x38
      errorstatus = CmdResp3Error();
 80035d2:	f88d 2007 	strb.w	r2, [sp, #7]
      if (errorstatus != SDMMC_OK)
 80035d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035da:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1a0      	bne.n	8003524 <SD_PowerON+0x54>
      response = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 80035e2:	4620      	mov	r0, r4
      count++;
 80035e4:	3501      	adds	r5, #1
      response = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 80035e6:	f7ff fcf0 	bl	8002fca <SDMMC_GetResponse>
    while ((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80035ea:	2800      	cmp	r0, #0
 80035ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035f0:	db17      	blt.n	8003622 <SD_PowerON+0x152>
 80035f2:	429d      	cmp	r5, r3
 80035f4:	d1cf      	bne.n	8003596 <SD_PowerON+0xc6>
      errorstatus = SDMMC_INVALID_VOLTRANGE;
 80035f6:	231b      	movs	r3, #27
 80035f8:	f88d 3007 	strb.w	r3, [sp, #7]
      return(errorstatus);
 80035fc:	e792      	b.n	8003524 <SD_PowerON+0x54>
    status = SDMMC1->STA;
 80035fe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    timeout--;
 8003600:	3901      	subs	r1, #1
 8003602:	e7a1      	b.n	8003548 <SD_PowerON+0x78>
  status = SDMMC1->STA;
 8003604:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  if ((timeout == 0) || (status & SDMMC_STA_CTIMEOUT))
 8003606:	2900      	cmp	r1, #0
 8003608:	d0a4      	beq.n	8003554 <SD_PowerON+0x84>
 800360a:	0744      	lsls	r4, r0, #29
 800360c:	d4a2      	bmi.n	8003554 <SD_PowerON+0x84>
  if (status & SDMMC_STA_CMDREND)
 800360e:	0640      	lsls	r0, r0, #25
 8003610:	d5a2      	bpl.n	8003558 <SD_PowerON+0x88>
    SDMMC1->ICR = SDMMC_ICR_CMDRENDC;
 8003612:	2140      	movs	r1, #64	@ 0x40
 8003614:	6399      	str	r1, [r3, #56]	@ 0x38
    return(errorstatus);
 8003616:	e79f      	b.n	8003558 <SD_PowerON+0x88>
  uint32_t SDType = SDMMC_STD_CAPACITY;
 8003618:	2600      	movs	r6, #0
 800361a:	e7a8      	b.n	800356e <SD_PowerON+0x9e>
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <SD_PowerON+0x168>)
 800361e:	63a3      	str	r3, [r4, #56]	@ 0x38
  return(errorstatus);
 8003620:	e7d7      	b.n	80035d2 <SD_PowerON+0x102>
    if (count >= SDMMC_MAX_VOLT_TRIAL)
 8003622:	429d      	cmp	r5, r3
 8003624:	d0e7      	beq.n	80035f6 <SD_PowerON+0x126>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) //if (response &= SD_HIGH_CAPACITY)
 8003626:	0043      	lsls	r3, r0, #1
      CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8003628:	bf42      	ittt	mi
 800362a:	4b04      	ldrmi	r3, [pc, #16]	@ (800363c <SD_PowerON+0x16c>)
 800362c:	2202      	movmi	r2, #2
 800362e:	601a      	strmi	r2, [r3, #0]
 8003630:	e778      	b.n	8003524 <SD_PowerON+0x54>
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	004005ff 	.word	0x004005ff
 800363c:	20004134 	.word	0x20004134
 8003640:	80100000 	.word	0x80100000

08003644 <SD_InitializeCards>:
{
 8003644:	b570      	push	{r4, r5, r6, lr}
  if (SDMMC_GetPowerState(SDMMC1) == 0) //SDIO_PowerState_OFF
 8003646:	4e47      	ldr	r6, [pc, #284]	@ (8003764 <SD_InitializeCards+0x120>)
 8003648:	4630      	mov	r0, r6
 800364a:	f7ff fcb7 	bl	8002fbc <SDMMC_GetPowerState>
 800364e:	2800      	cmp	r0, #0
 8003650:	f000 8081 	beq.w	8003756 <SD_InitializeCards+0x112>
  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8003654:	4d44      	ldr	r5, [pc, #272]	@ (8003768 <SD_InitializeCards+0x124>)
 8003656:	682b      	ldr	r3, [r5, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d01e      	beq.n	800369a <SD_InitializeCards+0x56>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800365c:	2300      	movs	r3, #0
 800365e:	60b3      	str	r3, [r6, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003660:	f240 43c2 	movw	r3, #1218	@ 0x4c2
 8003664:	60f3      	str	r3, [r6, #12]
    errorstatus = CmdResp2Error();
 8003666:	f7ff fd45 	bl	80030f4 <CmdResp2Error>
    if (SDMMC_OK != errorstatus)
 800366a:	4604      	mov	r4, r0
 800366c:	2800      	cmp	r0, #0
 800366e:	d150      	bne.n	8003712 <SD_InitializeCards+0xce>
    CID_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003670:	4c3e      	ldr	r4, [pc, #248]	@ (800376c <SD_InitializeCards+0x128>)
 8003672:	4601      	mov	r1, r0
 8003674:	4630      	mov	r0, r6
 8003676:	f7ff fca8 	bl	8002fca <SDMMC_GetResponse>
    CID_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 800367a:	2104      	movs	r1, #4
    CID_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 800367c:	6020      	str	r0, [r4, #0]
    CID_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 800367e:	4630      	mov	r0, r6
 8003680:	f7ff fca3 	bl	8002fca <SDMMC_GetResponse>
    CID_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003684:	2108      	movs	r1, #8
    CID_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003686:	6060      	str	r0, [r4, #4]
    CID_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003688:	4630      	mov	r0, r6
 800368a:	f7ff fc9e 	bl	8002fca <SDMMC_GetResponse>
    CID_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 800368e:	210c      	movs	r1, #12
    CID_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003690:	60a0      	str	r0, [r4, #8]
    CID_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 8003692:	4630      	mov	r0, r6
 8003694:	f7ff fc99 	bl	8002fca <SDMMC_GetResponse>
 8003698:	60e0      	str	r0, [r4, #12]
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType)
 800369a:	682b      	ldr	r3, [r5, #0]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d927      	bls.n	80036f0 <SD_InitializeCards+0xac>
      || (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d025      	beq.n	80036f0 <SD_InitializeCards+0xac>
  uint16_t rca = 0x01;
 80036a4:	2001      	movs	r0, #1
  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 80036a6:	682b      	ldr	r3, [r5, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d058      	beq.n	800375e <SD_InitializeCards+0x11a>
    RCA = rca;
 80036ac:	4b30      	ldr	r3, [pc, #192]	@ (8003770 <SD_InitializeCards+0x12c>)
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80036ae:	4d2d      	ldr	r5, [pc, #180]	@ (8003764 <SD_InitializeCards+0x120>)
    RCA = rca;
 80036b0:	6018      	str	r0, [r3, #0]
    SDMMC1_Command(SDMMC_CMD_SEND_CSD, SDMMC_RESPONSE_LONG, (uint32_t)(rca << 16));
 80036b2:	0400      	lsls	r0, r0, #16
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80036b4:	f240 43c9 	movw	r3, #1225	@ 0x4c9
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80036b8:	60a8      	str	r0, [r5, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80036ba:	60eb      	str	r3, [r5, #12]
    errorstatus = CmdResp2Error();
 80036bc:	f7ff fd1a 	bl	80030f4 <CmdResp2Error>
    if (SDMMC_OK != errorstatus)
 80036c0:	4604      	mov	r4, r0
 80036c2:	bb30      	cbnz	r0, 8003712 <SD_InitializeCards+0xce>
    CSD_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 80036c4:	4e2b      	ldr	r6, [pc, #172]	@ (8003774 <SD_InitializeCards+0x130>)
 80036c6:	4601      	mov	r1, r0
 80036c8:	4628      	mov	r0, r5
 80036ca:	f7ff fc7e 	bl	8002fca <SDMMC_GetResponse>
    CSD_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 80036ce:	2104      	movs	r1, #4
    CSD_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 80036d0:	6030      	str	r0, [r6, #0]
    CSD_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 80036d2:	4628      	mov	r0, r5
 80036d4:	f7ff fc79 	bl	8002fca <SDMMC_GetResponse>
    CSD_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 80036d8:	2108      	movs	r1, #8
    CSD_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 80036da:	6070      	str	r0, [r6, #4]
    CSD_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 80036dc:	4628      	mov	r0, r5
 80036de:	f7ff fc74 	bl	8002fca <SDMMC_GetResponse>
    CSD_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 80036e2:	210c      	movs	r1, #12
    CSD_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 80036e4:	60b0      	str	r0, [r6, #8]
    CSD_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 80036e6:	4628      	mov	r0, r5
 80036e8:	f7ff fc6f 	bl	8002fca <SDMMC_GetResponse>
 80036ec:	60f0      	str	r0, [r6, #12]
 80036ee:	e010      	b.n	8003712 <SD_InitializeCards+0xce>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80036f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <SD_InitializeCards+0x120>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80036f6:	f240 4243 	movw	r2, #1091	@ 0x443
 80036fa:	60da      	str	r2, [r3, #12]
    status = SDMMC1->STA;
 80036fc:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND)))
 80036fe:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8003702:	d0fb      	beq.n	80036fc <SD_InitializeCards+0xb8>
  if (status & SDMMC_STA_CTIMEOUT)
 8003704:	f014 0f04 	tst.w	r4, #4
 8003708:	4e16      	ldr	r6, [pc, #88]	@ (8003764 <SD_InitializeCards+0x120>)
 800370a:	d004      	beq.n	8003716 <SD_InitializeCards+0xd2>
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 800370c:	2304      	movs	r3, #4
      return(errorstatus);
 800370e:	2403      	movs	r4, #3
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003710:	63b3      	str	r3, [r6, #56]	@ 0x38
}
 8003712:	4620      	mov	r0, r4
 8003714:	bd70      	pop	{r4, r5, r6, pc}
  else if (status & SDMMC_STA_CCRCFAIL)
 8003716:	f014 0401 	ands.w	r4, r4, #1
 800371a:	d002      	beq.n	8003722 <SD_InitializeCards+0xde>
    SDMMC1->ICR = SDMMC_ICR_CCRCFAILC;
 800371c:	2401      	movs	r4, #1
 800371e:	63b4      	str	r4, [r6, #56]	@ 0x38
    if (SDMMC_OK != errorstatus)
 8003720:	e7f7      	b.n	8003712 <SD_InitializeCards+0xce>
  if (SDMMC_GetCommandResponse(SDMMC1) != cmd)
 8003722:	4630      	mov	r0, r6
 8003724:	f7ff fc4e 	bl	8002fc4 <SDMMC_GetCommandResponse>
 8003728:	2803      	cmp	r0, #3
 800372a:	d001      	beq.n	8003730 <SD_InitializeCards+0xec>
      return(errorstatus);
 800372c:	2410      	movs	r4, #16
 800372e:	e7f0      	b.n	8003712 <SD_InitializeCards+0xce>
  SDMMC1->ICR = SDMMC_STATIC_FLAGS;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <SD_InitializeCards+0x134>)
  response_r1 = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003732:	4621      	mov	r1, r4
 8003734:	4630      	mov	r0, r6
  SDMMC1->ICR = SDMMC_STATIC_FLAGS;
 8003736:	63b3      	str	r3, [r6, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003738:	f7ff fc47 	bl	8002fca <SDMMC_GetResponse>
  if (SDMMC_ALLZERO == (response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)))
 800373c:	f410 4f60 	tst.w	r0, #57344	@ 0xe000
 8003740:	d101      	bne.n	8003746 <SD_InitializeCards+0x102>
    *prca = (uint16_t) (response_r1 >> 16);
 8003742:	0c00      	lsrs	r0, r0, #16
    if (SDMMC_OK != errorstatus)
 8003744:	e7af      	b.n	80036a6 <SD_InitializeCards+0x62>
  if (response_r1 & SDMMC_R6_GENERAL_UNKNOWN_ERROR)
 8003746:	0481      	lsls	r1, r0, #18
 8003748:	d407      	bmi.n	800375a <SD_InitializeCards+0x116>
  if (response_r1 & SDMMC_R6_ILLEGAL_CMD)
 800374a:	0442      	lsls	r2, r0, #17
 800374c:	d4ee      	bmi.n	800372c <SD_InitializeCards+0xe8>
  if (response_r1 & SDMMC_R6_COM_CRC_FAILED)
 800374e:	0403      	lsls	r3, r0, #16
 8003750:	d5a8      	bpl.n	80036a4 <SD_InitializeCards+0x60>
      return(errorstatus);
 8003752:	240f      	movs	r4, #15
 8003754:	e7dd      	b.n	8003712 <SD_InitializeCards+0xce>
    return(errorstatus);
 8003756:	2425      	movs	r4, #37	@ 0x25
 8003758:	e7db      	b.n	8003712 <SD_InitializeCards+0xce>
      return(errorstatus);
 800375a:	2413      	movs	r4, #19
 800375c:	e7d9      	b.n	8003712 <SD_InitializeCards+0xce>
  return(errorstatus);
 800375e:	2400      	movs	r4, #0
 8003760:	e7d7      	b.n	8003712 <SD_InitializeCards+0xce>
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	20004134 	.word	0x20004134
 800376c:	20004114 	.word	0x20004114
 8003770:	20004110 	.word	0x20004110
 8003774:	20004124 	.word	0x20004124
 8003778:	004005ff 	.word	0x004005ff

0800377c <SD_GetCardInfo>:
  cardinfo->CardType = (uint8_t)CardType;
 800377c:	4a9d      	ldr	r2, [pc, #628]	@ (80039f4 <SD_GetCardInfo+0x278>)
{
 800377e:	4603      	mov	r3, r0
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
  cardinfo->CardType = (uint8_t)CardType;
 8003782:	6816      	ldr	r6, [r2, #0]
  cardinfo->RCA = (uint16_t)RCA;
 8003784:	4a9c      	ldr	r2, [pc, #624]	@ (80039f8 <SD_GetCardInfo+0x27c>)
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8003786:	4c9d      	ldr	r4, [pc, #628]	@ (80039fc <SD_GetCardInfo+0x280>)
  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8003788:	2e01      	cmp	r6, #1
  cardinfo->RCA = (uint16_t)RCA;
 800378a:	6812      	ldr	r2, [r2, #0]
  cardinfo->CardType = (uint8_t)CardType;
 800378c:	f880 6056 	strb.w	r6, [r0, #86]	@ 0x56
  cardinfo->RCA = (uint16_t)RCA;
 8003790:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8003794:	6822      	ldr	r2, [r4, #0]
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 8003796:	ea4f 7192 	mov.w	r1, r2, lsr #30
 800379a:	7001      	strb	r1, [r0, #0]
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 800379c:	f3c2 6183 	ubfx	r1, r2, #26, #4
 80037a0:	7041      	strb	r1, [r0, #1]
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 80037a2:	f3c2 6101 	ubfx	r1, r2, #24, #2
 80037a6:	7081      	strb	r1, [r0, #2]
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 80037a8:	f3c2 4107 	ubfx	r1, r2, #16, #8
  cardinfo->SD_csd.TAAC = tmp;
 80037ac:	70c1      	strb	r1, [r0, #3]
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 80037ae:	f3c2 2107 	ubfx	r1, r2, #8, #8
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 80037b2:	b2d2      	uxtb	r2, r2
  cardinfo->SD_csd.NSAC = tmp;
 80037b4:	7101      	strb	r1, [r0, #4]
  cardinfo->SD_csd.MaxBusClkFrec = tmp;
 80037b6:	7142      	strb	r2, [r0, #5]
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	ea4f 6112 	mov.w	r1, r2, lsr #24
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 80037be:	ea4f 2512 	mov.w	r5, r2, lsr #8
  cardinfo->SD_csd.CardComdClasses = tmp << 4;
 80037c2:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80037c6:	80c1      	strh	r1, [r0, #6]
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 80037c8:	88c1      	ldrh	r1, [r0, #6]
 80037ca:	f3c2 5003 	ubfx	r0, r2, #20, #4
 80037ce:	b289      	uxth	r1, r1
 80037d0:	ea41 0100 	orr.w	r1, r1, r0
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 80037d4:	f3c2 30c0 	ubfx	r0, r2, #15, #1
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 80037d8:	80d9      	strh	r1, [r3, #6]
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 80037da:	f3c2 4103 	ubfx	r1, r2, #16, #4
 80037de:	7219      	strb	r1, [r3, #8]
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 80037e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 80037e4:	7258      	strb	r0, [r3, #9]
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 80037e6:	f3c2 3080 	ubfx	r0, r2, #14, #1
 80037ea:	7298      	strb	r0, [r3, #10]
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 80037ec:	f3c2 3040 	ubfx	r0, r2, #13, #1
 80037f0:	72d8      	strb	r0, [r3, #11]
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 80037f2:	f3c2 3000 	ubfx	r0, r2, #12, #1
 80037f6:	7318      	strb	r0, [r3, #12]
  cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 80037f8:	f04f 0000 	mov.w	r0, #0
 80037fc:	7358      	strb	r0, [r3, #13]
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 80037fe:	68a0      	ldr	r0, [r4, #8]
  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8003800:	f200 80db 	bhi.w	80039ba <SD_GetCardInfo+0x23e>
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8003804:	02a9      	lsls	r1, r5, #10
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003806:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 800380a:	0092      	lsls	r2, r2, #2
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800380c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8003810:	f402 727f 	and.w	r2, r2, #1020	@ 0x3fc
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8003814:	6119      	str	r1, [r3, #16]
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8003816:	6919      	ldr	r1, [r3, #16]
 8003818:	430a      	orrs	r2, r1
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 800381a:	f3c0 2107 	ubfx	r1, r0, #8, #8
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 800381e:	611a      	str	r2, [r3, #16]
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8003826:	611a      	str	r2, [r3, #16]
    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003828:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 800382c:	751a      	strb	r2, [r3, #20]
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 800382e:	f3c0 6202 	ubfx	r2, r0, #24, #3
 8003832:	755a      	strb	r2, [r3, #21]
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8003834:	f3c0 5242 	ubfx	r2, r0, #21, #3
 8003838:	759a      	strb	r2, [r3, #22]
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800383a:	f3c0 4282 	ubfx	r2, r0, #18, #3
 800383e:	75da      	strb	r2, [r3, #23]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 8003840:	0bc2      	lsrs	r2, r0, #15
 8003842:	f002 0206 	and.w	r2, r2, #6
 8003846:	761a      	strb	r2, [r3, #24]
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003848:	7e1a      	ldrb	r2, [r3, #24]
 800384a:	432a      	orrs	r2, r5
 800384c:	761a      	strb	r2, [r3, #24]
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 800384e:	2201      	movs	r2, #1
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8003850:	691f      	ldr	r7, [r3, #16]
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003852:	7e1d      	ldrb	r5, [r3, #24]
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8003854:	7a1e      	ldrb	r6, [r3, #8]
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003856:	3502      	adds	r5, #2
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8003858:	fa02 f606 	lsl.w	r6, r2, r6
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 800385c:	40aa      	lsls	r2, r5
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 800385e:	651e      	str	r6, [r3, #80]	@ 0x50
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003860:	ea4f 7ce2 	mov.w	ip, r2, asr #31
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8003864:	fba2 2506 	umull	r2, r5, r2, r6
 8003868:	fb06 550c 	mla	r5, r6, ip, r5
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 800386c:	1c7e      	adds	r6, r7, #1
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 800386e:	fb07 5505 	mla	r5, r7, r5, r5
 8003872:	fba2 2606 	umull	r2, r6, r2, r6
 8003876:	4435      	add	r5, r6
 8003878:	e9c3 2512 	strd	r2, r5, [r3, #72]	@ 0x48
  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800387c:	f3c1 1280 	ubfx	r2, r1, #6, #1
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8003880:	0049      	lsls	r1, r1, #1
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8003882:	4d5f      	ldr	r5, [pc, #380]	@ (8003a00 <SD_GetCardInfo+0x284>)
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8003884:	f001 017e 	and.w	r1, r1, #126	@ 0x7e
  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8003888:	765a      	strb	r2, [r3, #25]
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 800388a:	7699      	strb	r1, [r3, #26]
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 800388c:	f3c0 11c0 	ubfx	r1, r0, #7, #1
 8003890:	7e9a      	ldrb	r2, [r3, #26]
 8003892:	430a      	orrs	r2, r1
 8003894:	769a      	strb	r2, [r3, #26]
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8003896:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
 800389a:	76da      	strb	r2, [r3, #27]
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 800389c:	68e2      	ldr	r2, [r4, #12]
  cardinfo->SD_csd.Reserved4 = 1;
 800389e:	2401      	movs	r4, #1
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 80038a0:	0fd1      	lsrs	r1, r2, #31
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 80038a2:	f3c2 5081 	ubfx	r0, r2, #22, #2
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 80038a6:	7719      	strb	r1, [r3, #28]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 80038a8:	f3c2 7141 	ubfx	r1, r2, #29, #2
 80038ac:	7759      	strb	r1, [r3, #29]
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 80038ae:	f3c2 6182 	ubfx	r1, r2, #26, #3
 80038b2:	7799      	strb	r1, [r3, #30]
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 80038b4:	0d91      	lsrs	r1, r2, #22
 80038b6:	f001 010c 	and.w	r1, r1, #12
 80038ba:	77d9      	strb	r1, [r3, #31]
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 80038bc:	7fd9      	ldrb	r1, [r3, #31]
 80038be:	4301      	orrs	r1, r0
  cardinfo->SD_csd.Reserved3 = 0;
 80038c0:	2000      	movs	r0, #0
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 80038c2:	77d9      	strb	r1, [r3, #31]
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80038c4:	f3c2 5140 	ubfx	r1, r2, #21, #1
 80038c8:	f883 1020 	strb.w	r1, [r3, #32]
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80038cc:	f3c2 4100 	ubfx	r1, r2, #16, #1
  cardinfo->SD_csd.Reserved3 = 0;
 80038d0:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80038d4:	f883 1022 	strb.w	r1, [r3, #34]	@ 0x22
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80038d8:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 80038dc:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 80038e0:	f3c2 3180 	ubfx	r1, r2, #14, #1
 80038e4:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 80038e8:	f3c2 3140 	ubfx	r1, r2, #13, #1
 80038ec:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 80038f0:	f3c2 3100 	ubfx	r1, r2, #12, #1
 80038f4:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 80038f8:	f3c2 2181 	ubfx	r1, r2, #10, #2
 80038fc:	f883 1027 	strb.w	r1, [r3, #39]	@ 0x27
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 8003900:	f3c2 2101 	ubfx	r1, r2, #8, #2
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8003904:	f3c2 0246 	ubfx	r2, r2, #1, #7
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 8003908:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 800390c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8003910:	682a      	ldr	r2, [r5, #0]
  cardinfo->SD_csd.Reserved4 = 1;
 8003912:	f883 402a 	strb.w	r4, [r3, #42]	@ 0x2a
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8003916:	0e11      	lsrs	r1, r2, #24
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8003918:	f3c2 2607 	ubfx	r6, r2, #8, #8
  cardinfo->SD_cid.ManufacturerID = tmp;
 800391c:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 8003920:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003924:	0612      	lsls	r2, r2, #24
 8003926:	0209      	lsls	r1, r1, #8
 8003928:	85d9      	strh	r1, [r3, #46]	@ 0x2e
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 800392a:	8dd9      	ldrh	r1, [r3, #46]	@ 0x2e
 800392c:	b289      	uxth	r1, r1
 800392e:	4331      	orrs	r1, r6
 8003930:	85d9      	strh	r1, [r3, #46]	@ 0x2e
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 8003934:	686a      	ldr	r2, [r5, #4]
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 8003936:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 8003938:	0e16      	lsrs	r6, r2, #24
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 800393a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800393e:	6319      	str	r1, [r3, #48]	@ 0x30
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 8003940:	0a11      	lsrs	r1, r2, #8
 8003942:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003944:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8003948:	4331      	orrs	r1, r6
 800394a:	6319      	str	r1, [r3, #48]	@ 0x30
  cardinfo->SD_cid.ProdName1 |= tmp;
 800394c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003950:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 8003952:	b2d2      	uxtb	r2, r2
  cardinfo->SD_cid.ProdName1 |= tmp;
 8003954:	4331      	orrs	r1, r6
 8003956:	6319      	str	r1, [r3, #48]	@ 0x30
  cardinfo->SD_cid.ProdName2 = tmp;
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 800395c:	68aa      	ldr	r2, [r5, #8]
 800395e:	0e11      	lsrs	r1, r2, #24
  cardinfo->SD_cid.ProdRev = tmp;
 8003960:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 8003964:	0c11      	lsrs	r1, r2, #16
 8003966:	0609      	lsls	r1, r1, #24
  cardinfo->SD_cid.ProdSN = tmp << 24;
 8003968:	6399      	str	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 800396a:	0211      	lsls	r1, r2, #8
 800396c:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 800396e:	0212      	lsls	r2, r2, #8
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8003970:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8003974:	b292      	uxth	r2, r2
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8003976:	4331      	orrs	r1, r6
 8003978:	6399      	str	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 800397a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800397c:	430a      	orrs	r2, r1
 800397e:	639a      	str	r2, [r3, #56]	@ 0x38
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 8003980:	68ea      	ldr	r2, [r5, #12]
  cardinfo->SD_cid.ProdSN |= tmp;
 8003982:	6b99      	ldr	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8003984:	f3c2 5503 	ubfx	r5, r2, #20, #4
  cardinfo->SD_cid.ProdSN |= tmp;
 8003988:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800398c:	6399      	str	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 800398e:	f893 103c 	ldrb.w	r1, [r3, #60]	@ 0x3c
 8003992:	4329      	orrs	r1, r5
  cardinfo->SD_cid.ManufactDate |= tmp;
 8003994:	f3c2 2507 	ubfx	r5, r2, #8, #8
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8003998:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800399c:	0a11      	lsrs	r1, r2, #8
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 800399e:	f3c2 0246 	ubfx	r2, r2, #1, #7
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 80039a2:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80039a6:	87d9      	strh	r1, [r3, #62]	@ 0x3e
  cardinfo->SD_cid.ManufactDate |= tmp;
 80039a8:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 80039aa:	b289      	uxth	r1, r1
 80039ac:	4329      	orrs	r1, r5
 80039ae:	87d9      	strh	r1, [r3, #62]	@ 0x3e
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  cardinfo->SD_cid.Reserved2 = 1;
 80039b4:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
}
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80039ba:	2e02      	cmp	r6, #2
 80039bc:	f47f af5e 	bne.w	800387c <SD_GetCardInfo+0x100>
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80039c0:	0411      	lsls	r1, r2, #16
 80039c2:	f401 117c 	and.w	r1, r1, #4128768	@ 0x3f0000
 80039c6:	6119      	str	r1, [r3, #16]
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 80039c8:	0e01      	lsrs	r1, r0, #24
    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039d0:	611a      	str	r2, [r3, #16]
    cardinfo->SD_csd.DeviceSize |= (tmp);
 80039d2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80039d6:	6919      	ldr	r1, [r3, #16]
 80039d8:	430a      	orrs	r2, r1
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 80039da:	f3c0 2107 	ubfx	r1, r0, #8, #8
    cardinfo->SD_csd.DeviceSize |= (tmp);
 80039de:	611a      	str	r2, [r3, #16]
    cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * (uint64_t)(512 * 1024);
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	3201      	adds	r2, #1
 80039e4:	0b55      	lsrs	r5, r2, #13
 80039e6:	04d2      	lsls	r2, r2, #19
 80039e8:	e9c3 2512 	strd	r2, r5, [r3, #72]	@ 0x48
    cardinfo->CardBlockSize = 512;
 80039ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80039f2:	e743      	b.n	800387c <SD_GetCardInfo+0x100>
 80039f4:	20004134 	.word	0x20004134
 80039f8:	20004110 	.word	0x20004110
 80039fc:	20004124 	.word	0x20004124
 8003a00:	20004114 	.word	0x20004114

08003a04 <SD_SelectDeselect>:
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <SD_SelectDeselect+0x10>)
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003a06:	f240 4247 	movw	r2, #1095	@ 0x447
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003a0a:	6098      	str	r0, [r3, #8]
  errorstatus = CmdResp1Error(SDMMC_CMD_SEL_DESEL_CARD);
 8003a0c:	2007      	movs	r0, #7
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003a0e:	60da      	str	r2, [r3, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SEL_DESEL_CARD);
 8003a10:	f7ff bb8a 	b.w	8003128 <CmdResp1Error>
 8003a14:	40012c00 	.word	0x40012c00

08003a18 <SD_EnableWideBusOperation>:
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8003a18:	4a0e      	ldr	r2, [pc, #56]	@ (8003a54 <SD_EnableWideBusOperation+0x3c>)
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	2a03      	cmp	r2, #3
{
 8003a1e:	b508      	push	{r3, lr}
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8003a20:	d016      	beq.n	8003a50 <SD_EnableWideBusOperation+0x38>
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8003a22:	2a02      	cmp	r2, #2
 8003a24:	d812      	bhi.n	8003a4c <SD_EnableWideBusOperation+0x34>
    if (SDMMC_BUS_WIDE_8B == WideMode) //SDMMC_BUS_WIDE_8B  SDIO_BusWide_8b
 8003a26:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003a2a:	d011      	beq.n	8003a50 <SD_EnableWideBusOperation+0x38>
    else if (SDMMC_BUS_WIDE_4B == WideMode)
 8003a2c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8003a30:	d108      	bne.n	8003a44 <SD_EnableWideBusOperation+0x2c>
      errorstatus = SDEnWideBus(ENABLE);
 8003a32:	2001      	movs	r0, #1
      errorstatus = SDEnWideBus(DISABLE);//SD_WideBus_Disable(hsd);
 8003a34:	f7ff fc4a 	bl	80032cc <SDEnWideBus>
    if (errorstatus == SDMMC_OK)
 8003a38:	b918      	cbnz	r0, 8003a42 <SD_EnableWideBusOperation+0x2a>
      SDMMC1->CLKCR = tempreg;
 8003a3a:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <SD_EnableWideBusOperation+0x40>)
 8003a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a40:	605a      	str	r2, [r3, #4]
}
 8003a42:	bd08      	pop	{r3, pc}
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d0f5      	beq.n	8003a34 <SD_EnableWideBusOperation+0x1c>
      errorstatus = SDMMC_INVALID_PARAMETER;
 8003a48:	2026      	movs	r0, #38	@ 0x26
 8003a4a:	e7fa      	b.n	8003a42 <SD_EnableWideBusOperation+0x2a>
  SD_Error errorstatus = SDMMC_OK;
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	e7f8      	b.n	8003a42 <SD_EnableWideBusOperation+0x2a>
    return(errorstatus);
 8003a50:	2027      	movs	r0, #39	@ 0x27
 8003a52:	e7f6      	b.n	8003a42 <SD_EnableWideBusOperation+0x2a>
 8003a54:	20004134 	.word	0x20004134
 8003a58:	40012c00 	.word	0x40012c00

08003a5c <SD_Init>:
  __IO SD_Error errorstatus = SDMMC_OK;
 8003a5c:	2300      	movs	r3, #0
{
 8003a5e:	b513      	push	{r0, r1, r4, lr}
  __IO SD_Error errorstatus = SDMMC_OK;
 8003a60:	f88d 3007 	strb.w	r3, [sp, #7]
  SD_LowLevel_DeInit();
 8003a64:	f7ff fcb2 	bl	80033cc <SD_LowLevel_DeInit>
  SD_LowLevel_Init();
 8003a68:	f7ff fce8 	bl	800343c <SD_LowLevel_Init>
  errorstatus = SD_PowerON();
 8003a6c:	f7ff fd30 	bl	80034d0 <SD_PowerON>
 8003a70:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus != SDMMC_OK)
 8003a74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a78:	b123      	cbz	r3, 8003a84 <SD_Init+0x28>
  return(errorstatus);
 8003a7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003a7e:	b2c0      	uxtb	r0, r0
}
 8003a80:	b002      	add	sp, #8
 8003a82:	bd10      	pop	{r4, pc}
  errorstatus = SD_InitializeCards();
 8003a84:	f7ff fdde 	bl	8003644 <SD_InitializeCards>
 8003a88:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus != SDMMC_OK)
 8003a8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f2      	bne.n	8003a7a <SD_Init+0x1e>
  errorstatus = SD_GetCardInfo(&SDCardInfo);
 8003a94:	4c19      	ldr	r4, [pc, #100]	@ (8003afc <SD_Init+0xa0>)
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff fe70 	bl	800377c <SD_GetCardInfo>
 8003a9c:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus == SDMMC_OK)
 8003aa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003aa4:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003aa8:	bb1b      	cbnz	r3, 8003af2 <SD_Init+0x96>
    errorstatus = SD_SelectDeselect((uint32_t) (((uint32_t)SDCardInfo.RCA) << 16));
 8003aaa:	f8b4 0054 	ldrh.w	r0, [r4, #84]	@ 0x54
 8003aae:	0400      	lsls	r0, r0, #16
 8003ab0:	f7ff ffa8 	bl	8003a04 <SD_SelectDeselect>
 8003ab4:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus == SDMMC_OK)
 8003ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003abc:	b9b3      	cbnz	r3, 8003aec <SD_Init+0x90>
    errorstatus = SD_EnableWideBusOperation(SDMMC_BUS_WIDE_4B); //4 bit data width
 8003abe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ac2:	f7ff ffa9 	bl	8003a18 <SD_EnableWideBusOperation>
 8003ac6:	f88d 0007 	strb.w	r0, [sp, #7]
    if((errorstatus == SDMMC_OK) ||(CardType == SDIO_MULTIMEDIA_CARD))
 8003aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ace:	b11b      	cbz	r3, 8003ad8 <SD_Init+0x7c>
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <SD_Init+0xa4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d109      	bne.n	8003aec <SD_Init+0x90>
      if((SDCardInfo.CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (SDCardInfo.CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8003ad8:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
      SDMMC1->CLKCR = tempreg;
 8003adc:	4a09      	ldr	r2, [pc, #36]	@ (8003b04 <SD_Init+0xa8>)
        tempreg |= SDMMC_TRANSFER_CLK_DIV + 2;	//V1.1/V2.0卡，设置最高48/4=12Mhz
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	f640 1302 	movw	r3, #2306	@ 0x902
 8003ae4:	bf88      	it	hi
 8003ae6:	f44f 6310 	movhi.w	r3, #2304	@ 0x900
      SDMMC1->CLKCR = tempreg;
 8003aea:	6053      	str	r3, [r2, #4]
  if (errorstatus == SDMMC_OK)
 8003aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003af0:	e7c3      	b.n	8003a7a <SD_Init+0x1e>
    printf("SD_SelectDeselect failed\r\n");
 8003af2:	4805      	ldr	r0, [pc, #20]	@ (8003b08 <SD_Init+0xac>)
 8003af4:	f010 fe38 	bl	8014768 <puts>
 8003af8:	e7de      	b.n	8003ab8 <SD_Init+0x5c>
 8003afa:	bf00      	nop
 8003afc:	200040a8 	.word	0x200040a8
 8003b00:	20004134 	.word	0x20004134
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	08015a64 	.word	0x08015a64

08003b0c <TM_FATFS_SD_SDIO_disk_initialize>:
{
 8003b0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0e:	2100      	movs	r1, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8003b10:	2040      	movs	r0, #64	@ 0x40
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b12:	e9cd 1102 	strd	r1, r1, [sp, #8]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8003b16:	f7ff fadf 	bl	80030d8 <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003b1a:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b1c:	480f      	ldr	r0, [pc, #60]	@ (8003b5c <TM_FATFS_SD_SDIO_disk_initialize+0x50>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003b1e:	e9cd 3100 	strd	r3, r1, [sp]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003b22:	2301      	movs	r3, #1
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b24:	e9cd 3104 	strd	r3, r1, [sp, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b28:	4669      	mov	r1, sp
 8003b2a:	f7ff f84f 	bl	8002bcc <LL_GPIO_Init>
  SD_LowLevel_DeInit();
 8003b2e:	f7ff fc4d 	bl	80033cc <SD_LowLevel_DeInit>
  SD_LowLevel_Init();
 8003b32:	f7ff fc83 	bl	800343c <SD_LowLevel_Init>
  if (SD_Init() == SDMMC_OK) {
 8003b36:	f7ff ff91 	bl	8003a5c <SD_Init>
 8003b3a:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <TM_FATFS_SD_SDIO_disk_initialize+0x54>)
    TM_FATFS_SD_SDIO_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003b3c:	781a      	ldrb	r2, [r3, #0]
  if (SD_Init() == SDMMC_OK) {
 8003b3e:	b950      	cbnz	r0, 8003b56 <TM_FATFS_SD_SDIO_disk_initialize+0x4a>
    TM_FATFS_SD_SDIO_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003b40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
    TM_FATFS_SD_SDIO_Stat |= STA_NOINIT;
 8003b44:	701a      	strb	r2, [r3, #0]
    TM_FATFS_SD_SDIO_Stat &= ~STA_PROTECT;
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 8003b4c:	701a      	strb	r2, [r3, #0]
  return TM_FATFS_SD_SDIO_Stat;
 8003b4e:	7818      	ldrb	r0, [r3, #0]
}
 8003b50:	b007      	add	sp, #28
 8003b52:	f85d fb04 	ldr.w	pc, [sp], #4
    TM_FATFS_SD_SDIO_Stat |= STA_NOINIT;
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	e7f3      	b.n	8003b44 <TM_FATFS_SD_SDIO_disk_initialize+0x38>
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	20000020 	.word	0x20000020

08003b64 <SD_SendStatus>:
 * @param  pcardstatus: pointer to the buffer that will contain the SD card
 *         status (Card Status register).
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_SendStatus (uint32_t *pcardstatus)
{
 8003b64:	b570      	push	{r4, r5, r6, lr}
  SD_Error errorstatus = SDMMC_OK;

  if (pcardstatus == 0) {
 8003b66:	4605      	mov	r5, r0
 8003b68:	b198      	cbz	r0, 8003b92 <SD_SendStatus+0x2e>
    errorstatus = SDMMC_INVALID_PARAMETER;
    return (errorstatus);
  }

  /*!< Send ACMD13 SD_APP_SEND_SCR with argument as RCA<<16 */
  SDMMC1_Command(SDMMC_CMD_SEND_STATUS, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA<<16));
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <SD_SendStatus+0x34>)
  errorstatus = CmdResp1Error(SDMMC_CMD_SEND_STATUS);
 8003b6c:	200d      	movs	r0, #13
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003b6e:	4e0b      	ldr	r6, [pc, #44]	@ (8003b9c <SD_SendStatus+0x38>)
  SDMMC1_Command(SDMMC_CMD_SEND_STATUS, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA<<16));
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003b74:	60b3      	str	r3, [r6, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003b76:	f240 434d 	movw	r3, #1101	@ 0x44d
 8003b7a:	60f3      	str	r3, [r6, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SEND_STATUS);
 8003b7c:	f7ff fad4 	bl	8003128 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 8003b80:	4604      	mov	r4, r0
 8003b82:	b920      	cbnz	r0, 8003b8e <SD_SendStatus+0x2a>
  {
    return(errorstatus);
  }

  *pcardstatus = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003b84:	4601      	mov	r1, r0
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff fa1f 	bl	8002fca <SDMMC_GetResponse>
 8003b8c:	6028      	str	r0, [r5, #0]

  return (errorstatus);
}
 8003b8e:	4620      	mov	r0, r4
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
    return (errorstatus);
 8003b92:	2426      	movs	r4, #38	@ 0x26
 8003b94:	e7fb      	b.n	8003b8e <SD_SendStatus+0x2a>
 8003b96:	bf00      	nop
 8003b98:	20004110 	.word	0x20004110
 8003b9c:	40012c00 	.word	0x40012c00

08003ba0 <SD_GetState>:
  uint32_t resp1 = 0;
 8003ba0:	2300      	movs	r3, #0
{
 8003ba2:	b507      	push	{r0, r1, r2, lr}
  uint32_t resp1 = 0;
 8003ba4:	9301      	str	r3, [sp, #4]
  if(SD_Detect() == SD_PRESENT ) {
 8003ba6:	f7ff fbf1 	bl	800338c <SD_Detect>
 8003baa:	2801      	cmp	r0, #1
 8003bac:	d003      	beq.n	8003bb6 <SD_GetState+0x16>
      return SDMMC_CARD_ERROR;
 8003bae:	20ff      	movs	r0, #255	@ 0xff
}
 8003bb0:	b003      	add	sp, #12
 8003bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    if(SD_SendStatus(&resp1) != SDMMC_OK)
 8003bb6:	a801      	add	r0, sp, #4
 8003bb8:	f7ff ffd4 	bl	8003b64 <SD_SendStatus>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d1f6      	bne.n	8003bae <SD_GetState+0xe>
      return (SDCardState) ((resp1 >> 9) & 0x0F);
 8003bc0:	9801      	ldr	r0, [sp, #4]
 8003bc2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003bc6:	e7f3      	b.n	8003bb0 <SD_GetState+0x10>

08003bc8 <SD_GetStatus>:
{
 8003bc8:	b508      	push	{r3, lr}
  cardstate = SD_GetState();
 8003bca:	f7ff ffe9 	bl	8003ba0 <SD_GetState>
  if (cardstate == SDMMC_CARD_TRANSFER)
 8003bce:	2804      	cmp	r0, #4
 8003bd0:	d004      	beq.n	8003bdc <SD_GetStatus+0x14>
    return (SDMMC_TRANSFER_ERROR);
 8003bd2:	28ff      	cmp	r0, #255	@ 0xff
 8003bd4:	bf14      	ite	ne
 8003bd6:	2001      	movne	r0, #1
 8003bd8:	2002      	moveq	r0, #2
}
 8003bda:	bd08      	pop	{r3, pc}
    return (SDMMC_TRANSFER_OK);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e7fc      	b.n	8003bda <SD_GetStatus+0x12>

08003be0 <SD_StopTransfer>:
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <SD_StopTransfer+0x14>)
 8003be2:	2200      	movs	r2, #0
{
  SD_Error errorstatus = SDMMC_OK;

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDMMC1_Command(SDMMC_CMD_STOP_TRANSMISSION, SDMMC_RESPONSE_SHORT, 0x0);
  errorstatus = CmdResp1Error(SDMMC_CMD_STOP_TRANSMISSION);
 8003be4:	200c      	movs	r0, #12
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003be6:	609a      	str	r2, [r3, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003be8:	f240 424c 	movw	r2, #1100	@ 0x44c
 8003bec:	60da      	str	r2, [r3, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_STOP_TRANSMISSION);
 8003bee:	f7ff ba9b 	b.w	8003128 <CmdResp1Error>
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00

08003bf8 <SD_WaitReadOperation>:
{
 8003bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  timeout = SDMMC_DATATIMEOUT;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c78 <SD_WaitReadOperation+0x80>)
 8003c00:	491e      	ldr	r1, [pc, #120]	@ (8003c7c <SD_WaitReadOperation+0x84>)
 8003c02:	481f      	ldr	r0, [pc, #124]	@ (8003c80 <SD_WaitReadOperation+0x88>)
  timeout = SDMMC_DATATIMEOUT;
 8003c04:	9301      	str	r3, [sp, #4]
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	b1eb      	cbz	r3, 8003c46 <SD_WaitReadOperation+0x4e>
  DMAEndOfTransfer = 0x00;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6013      	str	r3, [r2, #0]
  timeout = SDMMC_DATATIMEOUT;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
  tempreg = SDMMC1->STA;
 8003c12:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <SD_WaitReadOperation+0x8c>)
  timeout = SDMMC_DATATIMEOUT;
 8003c14:	9301      	str	r3, [sp, #4]
  tempreg = SDMMC1->STA;
 8003c16:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  while((tempreg & SDMMC_STA_RXACT) && (timeout > 0))
 8003c18:	048b      	lsls	r3, r1, #18
 8003c1a:	d421      	bmi.n	8003c60 <SD_WaitReadOperation+0x68>
  if(StopCondition == 1)
 8003c1c:	4c1a      	ldr	r4, [pc, #104]	@ (8003c88 <SD_WaitReadOperation+0x90>)
 8003c1e:	2500      	movs	r5, #0
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d024      	beq.n	8003c70 <SD_WaitReadOperation+0x78>
  SD_Error errorstatus = SDMMC_OK;
 8003c26:	4628      	mov	r0, r5
  if((timeout == 0) && (errorstatus == SDMMC_OK))
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	b913      	cbnz	r3, 8003c32 <SD_WaitReadOperation+0x3a>
    errorstatus = SDMMC_DATA_TIMEOUT;
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	bf08      	it	eq
 8003c30:	2004      	moveq	r0, #4
  SDMMC1->ICR = (SDMMC_STATIC_FLAGS);
 8003c32:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <SD_WaitReadOperation+0x8c>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <SD_WaitReadOperation+0x94>)
 8003c36:	639a      	str	r2, [r3, #56]	@ 0x38
  if(TransferError != SDMMC_OK)
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <SD_WaitReadOperation+0x88>)
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	b10a      	cbz	r2, 8003c42 <SD_WaitReadOperation+0x4a>
    return (TransferError);
 8003c3e:	7818      	ldrb	r0, [r3, #0]
 8003c40:	b2c0      	uxtb	r0, r0
}
 8003c42:	b003      	add	sp, #12
 8003c44:	bd30      	pop	{r4, r5, pc}
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8003c46:	680b      	ldr	r3, [r1, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1de      	bne.n	8003c0a <SD_WaitReadOperation+0x12>
 8003c4c:	7803      	ldrb	r3, [r0, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1db      	bne.n	8003c0a <SD_WaitReadOperation+0x12>
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0d8      	beq.n	8003c0a <SD_WaitReadOperation+0x12>
    timeout--;
 8003c58:	9b01      	ldr	r3, [sp, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	e7d2      	b.n	8003c06 <SD_WaitReadOperation+0xe>
  while((tempreg & SDMMC_STA_RXACT) && (timeout > 0))
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0da      	beq.n	8003c1c <SD_WaitReadOperation+0x24>
    tempreg = SDMMC1->STA;
 8003c66:	6b51      	ldr	r1, [r2, #52]	@ 0x34
    timeout--;
 8003c68:	9b01      	ldr	r3, [sp, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	e7d3      	b.n	8003c18 <SD_WaitReadOperation+0x20>
    errorstatus = SD_StopTransfer();
 8003c70:	f7ff ffb6 	bl	8003be0 <SD_StopTransfer>
    StopCondition = 0;
 8003c74:	6025      	str	r5, [r4, #0]
 8003c76:	e7d7      	b.n	8003c28 <SD_WaitReadOperation+0x30>
 8003c78:	20004100 	.word	0x20004100
 8003c7c:	20004104 	.word	0x20004104
 8003c80:	20004108 	.word	0x20004108
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	2000410c 	.word	0x2000410c
 8003c8c:	004005ff 	.word	0x004005ff

08003c90 <SD_WaitWriteOperation>:
{
 8003c90:	b538      	push	{r3, r4, r5, lr}
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8003c92:	4a19      	ldr	r2, [pc, #100]	@ (8003cf8 <SD_WaitWriteOperation+0x68>)
  timeout = SDMMC_DATATIMEOUT;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8003c98:	4918      	ldr	r1, [pc, #96]	@ (8003cfc <SD_WaitWriteOperation+0x6c>)
 8003c9a:	4819      	ldr	r0, [pc, #100]	@ (8003d00 <SD_WaitWriteOperation+0x70>)
 8003c9c:	6814      	ldr	r4, [r2, #0]
 8003c9e:	b924      	cbnz	r4, 8003caa <SD_WaitWriteOperation+0x1a>
 8003ca0:	680c      	ldr	r4, [r1, #0]
 8003ca2:	b914      	cbnz	r4, 8003caa <SD_WaitWriteOperation+0x1a>
 8003ca4:	7804      	ldrb	r4, [r0, #0]
 8003ca6:	b904      	cbnz	r4, 8003caa <SD_WaitWriteOperation+0x1a>
 8003ca8:	b9e3      	cbnz	r3, 8003ce4 <SD_WaitWriteOperation+0x54>
  DMAEndOfTransfer = 0x00;
 8003caa:	2300      	movs	r3, #0
  timeout = SDMMC_DATATIMEOUT;
 8003cac:	f04f 34ff 	mov.w	r4, #4294967295
  DMAEndOfTransfer = 0x00;
 8003cb0:	6013      	str	r3, [r2, #0]
  tmpreg = SDMMC1->STA;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	@ (8003d04 <SD_WaitWriteOperation+0x74>)
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  while (((tmpreg & SDMMC_STA_TXACT)) && (timeout > 0))
 8003cb6:	04d2      	lsls	r2, r2, #19
 8003cb8:	d500      	bpl.n	8003cbc <SD_WaitWriteOperation+0x2c>
 8003cba:	b9ac      	cbnz	r4, 8003ce8 <SD_WaitWriteOperation+0x58>
  if(StopCondition == 1){
 8003cbc:	4d12      	ldr	r5, [pc, #72]	@ (8003d08 <SD_WaitWriteOperation+0x78>)
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d114      	bne.n	8003cee <SD_WaitWriteOperation+0x5e>
    errorstatus = SD_StopTransfer();
 8003cc4:	f7ff ff8c 	bl	8003be0 <SD_StopTransfer>
    StopCondition = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	602b      	str	r3, [r5, #0]
  if((timeout == 0) && (errorstatus == SDMMC_OK)) {
 8003ccc:	b90c      	cbnz	r4, 8003cd2 <SD_WaitWriteOperation+0x42>
 8003cce:	b900      	cbnz	r0, 8003cd2 <SD_WaitWriteOperation+0x42>
    errorstatus = SDMMC_DATA_TIMEOUT;
 8003cd0:	2004      	movs	r0, #4
  SDMMC1->ICR = (SDMMC_STATIC_FLAGS);
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <SD_WaitWriteOperation+0x74>)
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d0c <SD_WaitWriteOperation+0x7c>)
 8003cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  if(TransferError != SDMMC_OK)
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <SD_WaitWriteOperation+0x70>)
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	b10a      	cbz	r2, 8003ce2 <SD_WaitWriteOperation+0x52>
    return (TransferError);
 8003cde:	7818      	ldrb	r0, [r3, #0]
 8003ce0:	b2c0      	uxtb	r0, r0
}
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
    timeout--;
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	e7d9      	b.n	8003c9c <SD_WaitWriteOperation+0xc>
    timeout--;
 8003ce8:	3c01      	subs	r4, #1
    tmpreg = SDMMC1->STA;
 8003cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cec:	e7e3      	b.n	8003cb6 <SD_WaitWriteOperation+0x26>
  if((timeout == 0) && (errorstatus == SDMMC_OK)) {
 8003cee:	2c00      	cmp	r4, #0
 8003cf0:	d0ee      	beq.n	8003cd0 <SD_WaitWriteOperation+0x40>
  SD_Error errorstatus = SDMMC_OK;
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e7ed      	b.n	8003cd2 <SD_WaitWriteOperation+0x42>
 8003cf6:	bf00      	nop
 8003cf8:	20004100 	.word	0x20004100
 8003cfc:	20004104 	.word	0x20004104
 8003d00:	20004108 	.word	0x20004108
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	2000410c 	.word	0x2000410c
 8003d0c:	004005ff 	.word	0x004005ff

08003d10 <SD_LowLevel_DMA_TxConfig>:
#ifdef SD_SDIO_DMA_STREAM3
  uint32_t tempreg;

  /////PART I::::Adjust the DMA
  //Reset the control register (0x00 is the default value. this also disables the dma. When EN=0, it stops any ongoing DMA transfer)
  DMA2_Stream3->CR &= (~DMA_SxCR_EN);
 8003d10:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <SD_LowLevel_DMA_TxConfig+0x38>)
 8003d12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2_Stream3->CR = 0;
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	659a      	str	r2, [r3, #88]	@ 0x58

  //Clear all the flags
  DMA2->LIFCR = DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTEIF3 | DMA_LIFCR_CDMEIF3 | DMA_LIFCR_CFEIF3;
 8003d1e:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 8003d22:	609a      	str	r2, [r3, #8]

  //Set the DMA Addresses
  DMA2_Stream3->PAR = (uint32_t)SDIO_FIFO_ADDRESS; //((uint32_t) 0x40012C80) SDIO FIFO Address (=SDIO Base+0x80)
 8003d24:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <SD_LowLevel_DMA_TxConfig+0x3c>)
 8003d26:	661a      	str	r2, [r3, #96]	@ 0x60
  tempreg |= (0x00<<8) & DMA_SxCR_CIRC;   //Disable Circular mode
  tempreg |= (0x01<<6) & DMA_SxCR_DIR;  //Direction 0:P2M, 1:M2P
  tempreg |= (0x01<<5) & DMA_SxCR_PFCTRL; //Peripheral controls the flow control. (The DMA tranfer ends when the data issues end of transfer signal regardless of ndtr value)
  //Bit [4..1] is for interupt mask. I don't use interrupts here
  //Bit 0 is EN. I will set it after I set the FIFO CR. (FIFO CR cannot be modified when EN=1)
  DMA2_Stream3->CR = tempreg;
 8003d28:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <SD_LowLevel_DMA_TxConfig+0x40>)
  DMA2_Stream3->M0AR = (uint32_t)BufferSRC;    //Memory address
 8003d2a:	6658      	str	r0, [r3, #100]	@ 0x64
  DMA2_Stream3->NDTR = BufferSize;
 8003d2c:	65d9      	str	r1, [r3, #92]	@ 0x5c
  DMA2_Stream3->CR = tempreg;
 8003d2e:	659a      	str	r2, [r3, #88]	@ 0x58
  //Set the FIFO CR
  tempreg = 0x21; //Reset value
  tempreg |= (0<<7); //FEIE is disabled
  tempreg |= (1<<2); //Fifo is enabled (Direct mode is disabled);
  tempreg |= 3;   //Full fifo (Fifo threshold selection)
  DMA2_Stream3->FCR = tempreg;
 8003d30:	2227      	movs	r2, #39	@ 0x27
 8003d32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Enable DMA transfer complete/error interrupts  */
  DMA2_Stream3->CR |= (DMA_SxCR_TCIE | DMA_SxCR_TEIE);
 8003d34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d36:	f042 0214 	orr.w	r2, r2, #20
 8003d3a:	659a      	str	r2, [r3, #88]	@ 0x58
  //LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_3);
  //LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_3);

  //Enable the DMA (When it is enabled, it starts to respond dma requests)
  DMA2_Stream3->CR |= DMA_SxCR_EN;
 8003d3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	659a      	str	r2, [r3, #88]	@ 0x58
  //END of PART I
#endif
}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40026400 	.word	0x40026400
 8003d4c:	40012c80 	.word	0x40012c80
 8003d50:	08a05460 	.word	0x08a05460

08003d54 <SD_WriteMultiBlocks>:
{
 8003d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d58:	4617      	mov	r7, r2
 8003d5a:	4698      	mov	r8, r3
  TransferError = SDMMC_OK;
 8003d5c:	4a29      	ldr	r2, [pc, #164]	@ (8003e04 <SD_WriteMultiBlocks+0xb0>)
 8003d5e:	2300      	movs	r3, #0
  SDMMC1->DCTRL = 0x0;
 8003d60:	4c29      	ldr	r4, [pc, #164]	@ (8003e08 <SD_WriteMultiBlocks+0xb4>)
  StopCondition = 1;
 8003d62:	2101      	movs	r1, #1
  TransferError = SDMMC_OK;
 8003d64:	7013      	strb	r3, [r2, #0]
  TransferEnd = 0;
 8003d66:	4a29      	ldr	r2, [pc, #164]	@ (8003e0c <SD_WriteMultiBlocks+0xb8>)
{
 8003d68:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  TransferEnd = 0;
 8003d6c:	6013      	str	r3, [r2, #0]
  StopCondition = 1;
 8003d6e:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <SD_WriteMultiBlocks+0xbc>)
{
 8003d70:	9e07      	ldr	r6, [sp, #28]
  StopCondition = 1;
 8003d72:	6011      	str	r1, [r2, #0]
  SDMMC1->DCTRL = 0x0;
 8003d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_TXUNDERR);  // | SDMMC_IT_STBITERR
 8003d76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_TxConfig ((uint32_t *) writebuff, (NumberOfBlocks * BlockSize));
 8003d78:	fb06 f105 	mul.w	r1, r6, r5
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_TXUNDERR);  // | SDMMC_IT_STBITERR
 8003d7c:	f443 738d 	orr.w	r3, r3, #282	@ 0x11a
 8003d80:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_TxConfig ((uint32_t *) writebuff, (NumberOfBlocks * BlockSize));
 8003d82:	f7ff ffc5 	bl	8003d10 <SD_LowLevel_DMA_TxConfig>
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 8003d86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 8003d88:	2010      	movs	r0, #16
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 8003d8a:	f043 0308 	orr.w	r3, r3, #8
 8003d8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if(CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8003d90:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <SD_WriteMultiBlocks+0xc0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b02      	cmp	r3, #2
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003d96:	f44f 638a 	mov.w	r3, #1104	@ 0x450
    BlockSize = 512;
 8003d9a:	bf04      	itt	eq
 8003d9c:	f44f 7500 	moveq.w	r5, #512	@ 0x200
    WriteAddr /= 512;
 8003da0:	0a7f      	lsreq	r7, r7, #9
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003da2:	60a5      	str	r5, [r4, #8]
    WriteAddr /= 512;
 8003da4:	bf08      	it	eq
 8003da6:	ea47 57c8 	orreq.w	r7, r7, r8, lsl #23
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003daa:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 8003dac:	f7ff f9bc 	bl	8003128 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8003db0:	bb28      	cbnz	r0, 8003dfe <SD_WriteMultiBlocks+0xaa>
  SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) (RCA << 16)));
 8003db2:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <SD_WriteMultiBlocks+0xc4>)
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003db4:	2037      	movs	r0, #55	@ 0x37
  SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) (RCA << 16)));
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003dba:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003dbc:	f240 4377 	movw	r3, #1143	@ 0x477
 8003dc0:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003dc2:	f7ff f9b1 	bl	8003128 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8003dc6:	b9d0      	cbnz	r0, 8003dfe <SD_WriteMultiBlocks+0xaa>
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003dc8:	f240 4357 	movw	r3, #1111	@ 0x457
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003dcc:	60a6      	str	r6, [r4, #8]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCK_COUNT);
 8003dce:	2017      	movs	r0, #23
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003dd0:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCK_COUNT);
 8003dd2:	f7ff f9a9 	bl	8003128 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8003dd6:	b990      	cbnz	r0, 8003dfe <SD_WriteMultiBlocks+0xaa>
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003dd8:	f240 4359 	movw	r3, #1113	@ 0x459
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003ddc:	60a7      	str	r7, [r4, #8]
  errorstatus = CmdResp1Error(SDMMC_CMD_WRITE_MULT_BLOCK);
 8003dde:	2019      	movs	r0, #25
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003de0:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_WRITE_MULT_BLOCK);
 8003de2:	f7ff f9a1 	bl	8003128 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8003de6:	b950      	cbnz	r0, 8003dfe <SD_WriteMultiBlocks+0xaa>
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8003dec:	4375      	muls	r5, r6
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8003dee:	6263      	str	r3, [r4, #36]	@ 0x24
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8003df0:	62a5      	str	r5, [r4, #40]	@ 0x28
  tmpreg = SDMMC1->DCTRL;
 8003df2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  tmpreg &= ((uint32_t)0xFFFFFF08);
 8003df4:	f023 03f7 	bic.w	r3, r3, #247	@ 0xf7
  tmpreg |= (0x1UL<<0) & SDMMC_DCTRL_DTEN;   //Data transfer enabled bit
 8003df8:	f043 0391 	orr.w	r3, r3, #145	@ 0x91
  SDMMC1->DCTRL = tmpreg;
 8003dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e02:	bf00      	nop
 8003e04:	20004108 	.word	0x20004108
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	20004104 	.word	0x20004104
 8003e10:	2000410c 	.word	0x2000410c
 8003e14:	20004134 	.word	0x20004134
 8003e18:	20004110 	.word	0x20004110

08003e1c <TM_FATFS_SD_SDIO_disk_write>:
{
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003e24:	4605      	mov	r5, r0
  if(SD_Detect() != SD_PRESENT)
 8003e26:	f7ff fab1 	bl	800338c <SD_Detect>
 8003e2a:	2801      	cmp	r0, #1
{
 8003e2c:	460e      	mov	r6, r1
  if(SD_Detect() != SD_PRESENT)
 8003e2e:	4604      	mov	r4, r0
 8003e30:	d136      	bne.n	8003ea0 <TM_FATFS_SD_SDIO_disk_write+0x84>
  if((DWORD)buff & 3)
 8003e32:	f015 0303 	ands.w	r3, r5, #3
 8003e36:	d01c      	beq.n	8003e72 <TM_FATFS_SD_SDIO_disk_write+0x56>
 8003e38:	188f      	adds	r7, r1, r2
    while(count--)
 8003e3a:	42be      	cmp	r6, r7
 8003e3c:	d105      	bne.n	8003e4a <TM_FATFS_SD_SDIO_disk_write+0x2e>
 8003e3e:	2400      	movs	r4, #0
}
 8003e40:	4620      	mov	r0, r4
 8003e42:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 8003e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      memcpy(scratch, buff, BLOCK_SIZE);
 8003e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e4e:	4629      	mov	r1, r5
 8003e50:	a802      	add	r0, sp, #8
      res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 8003e52:	f106 0801 	add.w	r8, r6, #1
      memcpy(scratch, buff, BLOCK_SIZE);
 8003e56:	f010 fed0 	bl	8014bfa <memcpy>
      res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	a802      	add	r0, sp, #8
 8003e60:	f7ff ffdc 	bl	8003e1c <TM_FATFS_SD_SDIO_disk_write>
      if(res != RES_OK){
 8003e64:	4604      	mov	r4, r0
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d1ea      	bne.n	8003e40 <TM_FATFS_SD_SDIO_disk_write+0x24>
      buff += BLOCK_SIZE;
 8003e6a:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 8003e6e:	4646      	mov	r6, r8
 8003e70:	e7e3      	b.n	8003e3a <TM_FATFS_SD_SDIO_disk_write+0x1e>
  Status = SD_WriteMultiBlocks((uint8_t *)buff, sector << 9, BLOCK_SIZE, count); // 4GB Compliant
 8003e72:	9201      	str	r2, [sp, #4]
 8003e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e78:	4628      	mov	r0, r5
 8003e7a:	9200      	str	r2, [sp, #0]
 8003e7c:	024a      	lsls	r2, r1, #9
 8003e7e:	f7ff ff69 	bl	8003d54 <SD_WriteMultiBlocks>
  if(Status == SDMMC_OK)
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d1dc      	bne.n	8003e40 <TM_FATFS_SD_SDIO_disk_write+0x24>
    Status = SD_WaitWriteOperation(); // Check if the Transfer is finished
 8003e86:	f7ff ff03 	bl	8003c90 <SD_WaitWriteOperation>
 8003e8a:	4605      	mov	r5, r0
    while((State = SD_GetStatus()) == SDMMC_TRANSFER_BUSY); // BUSY, OK (DONE), ERROR (FAIL)
 8003e8c:	f7ff fe9c 	bl	8003bc8 <SD_GetStatus>
 8003e90:	2801      	cmp	r0, #1
 8003e92:	d0fb      	beq.n	8003e8c <TM_FATFS_SD_SDIO_disk_write+0x70>
    if((State == SDMMC_TRANSFER_ERROR) || (Status != SDMMC_OK))
 8003e94:	2802      	cmp	r0, #2
 8003e96:	d0d3      	beq.n	8003e40 <TM_FATFS_SD_SDIO_disk_write+0x24>
 8003e98:	1e2c      	subs	r4, r5, #0
 8003e9a:	bf18      	it	ne
 8003e9c:	2401      	movne	r4, #1
 8003e9e:	e7cf      	b.n	8003e40 <TM_FATFS_SD_SDIO_disk_write+0x24>
    return RES_NOTRDY;
 8003ea0:	2403      	movs	r4, #3
 8003ea2:	e7cd      	b.n	8003e40 <TM_FATFS_SD_SDIO_disk_write+0x24>

08003ea4 <SD_LowLevel_DMA_RxConfig>:
#ifdef SD_SDIO_DMA_STREAM3
  uint32_t tempreg;

  /////PART I::::Adjust the DMA
  //Reset the control register (0x00 is the default value. this also disables the dma. When EN=0, it stops any ongoing DMA transfer)
  DMA2_Stream3->CR &= (~DMA_SxCR_EN);
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <SD_LowLevel_DMA_RxConfig+0x38>)
 8003ea6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2_Stream3->CR = 0;
 8003eae:	2200      	movs	r2, #0
 8003eb0:	659a      	str	r2, [r3, #88]	@ 0x58

  //Clear all the flags
  DMA2->LIFCR = DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTEIF3 | DMA_LIFCR_CDMEIF3 | DMA_LIFCR_CFEIF3;
 8003eb2:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 8003eb6:	609a      	str	r2, [r3, #8]

  //Set the DMA Addresses
  DMA2_Stream3->PAR = (uint32_t)SDIO_FIFO_ADDRESS; //((uint32_t) 0x40012C80) SDIO FIFO Address (=SDIO Base+0x80)
 8003eb8:	4a09      	ldr	r2, [pc, #36]	@ (8003ee0 <SD_LowLevel_DMA_RxConfig+0x3c>)
 8003eba:	661a      	str	r2, [r3, #96]	@ 0x60
  tempreg |= (0x00<<8) & DMA_SxCR_CIRC;   //Disable Circular mode
  tempreg |= (0x00<<6) & DMA_SxCR_DIR;  //Direction 0:P2M, 1:M2P
  tempreg |= (0x01<<5) & DMA_SxCR_PFCTRL; //Peripheral controls the flow control. (The DMA tranfer ends when the data issues end of transfer signal regardless of ndtr value)
  //Bit [4..1] is for interupt mask. I don't use interrupts here
  //Bit 0 is EN. I will set it after I set the FIFO CR. (FIFO CR cannot be modified when EN=1)
  DMA2_Stream3->CR = tempreg;
 8003ebc:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <SD_LowLevel_DMA_RxConfig+0x40>)
  DMA2_Stream3->M0AR = (uint32_t)BufferDST;    //Memory address
 8003ebe:	6658      	str	r0, [r3, #100]	@ 0x64
  DMA2_Stream3->NDTR = BufferSize;   //0 ?? Peripheral controls, therefore we don't need to indicate a size
 8003ec0:	65d9      	str	r1, [r3, #92]	@ 0x5c
  DMA2_Stream3->CR = tempreg;
 8003ec2:	659a      	str	r2, [r3, #88]	@ 0x58
  //Set the FIFO CR
  tempreg = 0x21; //Reset value
  tempreg |= (0<<7); //FEIE is disabled
  tempreg |= (1<<2); //Fifo is enabled (Direct mode is disabled);
  tempreg |= 3;   //Full fifo (Fifo threshold selection)
  DMA2_Stream3->FCR = tempreg;
 8003ec4:	2227      	movs	r2, #39	@ 0x27
 8003ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Enable DMA transfer complete/error interrupts  */
  DMA2_Stream3->CR |= (DMA_SxCR_TCIE | DMA_SxCR_TEIE);
 8003ec8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003eca:	f042 0214 	orr.w	r2, r2, #20
 8003ece:	659a      	str	r2, [r3, #88]	@ 0x58
  //LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_3);
  //LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_3);

  //Enable the DMA (When it is enabled, it starts to respond dma requests)
  DMA2_Stream3->CR |= DMA_SxCR_EN;
 8003ed0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	659a      	str	r2, [r3, #88]	@ 0x58
  //END of PART I
#endif
}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40026400 	.word	0x40026400
 8003ee0:	40012c80 	.word	0x40012c80
 8003ee4:	08a05420 	.word	0x08a05420

08003ee8 <SD_ReadMultiBlocks>:
{
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	4615      	mov	r5, r2
 8003eee:	461f      	mov	r7, r3
  TransferError = SDMMC_OK;
 8003ef0:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <SD_ReadMultiBlocks+0x90>)
 8003ef2:	2300      	movs	r3, #0
  SDMMC1->DCTRL = 0x0;
 8003ef4:	4c21      	ldr	r4, [pc, #132]	@ (8003f7c <SD_ReadMultiBlocks+0x94>)
  StopCondition = 1;
 8003ef6:	2101      	movs	r1, #1
  TransferError = SDMMC_OK;
 8003ef8:	7013      	strb	r3, [r2, #0]
  TransferEnd = 0;
 8003efa:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <SD_ReadMultiBlocks+0x98>)
{
 8003efc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  TransferEnd = 0;
 8003f00:	6013      	str	r3, [r2, #0]
  StopCondition = 1;
 8003f02:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <SD_ReadMultiBlocks+0x9c>)
{
 8003f04:	f8dd 801c 	ldr.w	r8, [sp, #28]
  StopCondition = 1;
 8003f08:	6011      	str	r1, [r2, #0]
  SDMMC1->DCTRL = 0x0;
 8003f0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_RXOVERR);// | SDMMC_IT_STBITERR
 8003f0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_RxConfig ((uint32_t *) readbuff, (NumberOfBlocks * BlockSize));
 8003f0e:	fb08 f106 	mul.w	r1, r8, r6
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_RXOVERR);// | SDMMC_IT_STBITERR
 8003f12:	f443 7395 	orr.w	r3, r3, #298	@ 0x12a
 8003f16:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_RxConfig ((uint32_t *) readbuff, (NumberOfBlocks * BlockSize));
 8003f18:	f7ff ffc4 	bl	8003ea4 <SD_LowLevel_DMA_RxConfig>
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 8003f1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 8003f1e:	2010      	movs	r0, #16
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 8003f20:	f043 0308 	orr.w	r3, r3, #8
 8003f24:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if(CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <SD_ReadMultiBlocks+0xa0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b02      	cmp	r3, #2
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003f2c:	f44f 638a 	mov.w	r3, #1104	@ 0x450
    BlockSize = 512;
 8003f30:	bf04      	itt	eq
 8003f32:	f44f 7600 	moveq.w	r6, #512	@ 0x200
    ReadAddr /= 512;
 8003f36:	0a6d      	lsreq	r5, r5, #9
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003f38:	60a6      	str	r6, [r4, #8]
    ReadAddr /= 512;
 8003f3a:	bf08      	it	eq
 8003f3c:	ea45 55c7 	orreq.w	r5, r5, r7, lsl #23
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003f40:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 8003f42:	f7ff f8f1 	bl	8003128 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8003f46:	b9a0      	cbnz	r0, 8003f72 <SD_ReadMultiBlocks+0x8a>
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8003f4c:	fb08 f606 	mul.w	r6, r8, r6
  errorstatus = CmdResp1Error (SDMMC_CMD_READ_MULT_BLOCK);
 8003f50:	2012      	movs	r0, #18
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8003f52:	6263      	str	r3, [r4, #36]	@ 0x24
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8003f54:	62a6      	str	r6, [r4, #40]	@ 0x28
  tmpreg = SDMMC1->DCTRL;
 8003f56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  tmpreg &= ((uint32_t)0xFFFFFF08);
 8003f58:	f023 03f7 	bic.w	r3, r3, #247	@ 0xf7
  tmpreg |= (0x1UL<<0) & SDMMC_DCTRL_DTEN;   //Data transfer enabled bit
 8003f5c:	f043 0393 	orr.w	r3, r3, #147	@ 0x93
  SDMMC1->DCTRL = tmpreg;
 8003f60:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003f62:	f240 4352 	movw	r3, #1106	@ 0x452
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003f66:	60a5      	str	r5, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003f68:	60e3      	str	r3, [r4, #12]
}
 8003f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  errorstatus = CmdResp1Error (SDMMC_CMD_READ_MULT_BLOCK);
 8003f6e:	f7ff b8db 	b.w	8003128 <CmdResp1Error>
}
 8003f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f76:	bf00      	nop
 8003f78:	20004108 	.word	0x20004108
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	20004104 	.word	0x20004104
 8003f84:	2000410c 	.word	0x2000410c
 8003f88:	20004134 	.word	0x20004134

08003f8c <TM_FATFS_SD_SDIO_disk_read>:
  if((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)){
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004004 <TM_FATFS_SD_SDIO_disk_read+0x78>)
{
 8003f8e:	b570      	push	{r4, r5, r6, lr}
  if((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)){
 8003f90:	781b      	ldrb	r3, [r3, #0]
{
 8003f92:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003f96:	4604      	mov	r4, r0
  if((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)){
 8003f98:	07db      	lsls	r3, r3, #31
 8003f9a:	d431      	bmi.n	8004000 <TM_FATFS_SD_SDIO_disk_read+0x74>
  if((DWORD)buff & 3) {
 8003f9c:	f010 0303 	ands.w	r3, r0, #3
 8003fa0:	d017      	beq.n	8003fd2 <TM_FATFS_SD_SDIO_disk_read+0x46>
 8003fa2:	188d      	adds	r5, r1, r2
    while(count--)
 8003fa4:	42a9      	cmp	r1, r5
 8003fa6:	d103      	bne.n	8003fb0 <TM_FATFS_SD_SDIO_disk_read+0x24>
 8003fa8:	2000      	movs	r0, #0
}
 8003faa:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
      res = TM_FATFS_SD_SDIO_disk_read((void *)scratch, sector++, 1);
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	a802      	add	r0, sp, #8
 8003fb4:	1c4e      	adds	r6, r1, #1
 8003fb6:	f7ff ffe9 	bl	8003f8c <TM_FATFS_SD_SDIO_disk_read>
      if(res != RES_OK)
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d1f5      	bne.n	8003faa <TM_FATFS_SD_SDIO_disk_read+0x1e>
      memcpy(buff, scratch, BLOCK_SIZE);
 8003fbe:	a902      	add	r1, sp, #8
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
      buff += BLOCK_SIZE;
 8003fc6:	f504 7400 	add.w	r4, r4, #512	@ 0x200
      memcpy(buff, scratch, BLOCK_SIZE);
 8003fca:	f010 fe16 	bl	8014bfa <memcpy>
      res = TM_FATFS_SD_SDIO_disk_read((void *)scratch, sector++, 1);
 8003fce:	4631      	mov	r1, r6
 8003fd0:	e7e8      	b.n	8003fa4 <TM_FATFS_SD_SDIO_disk_read+0x18>
  Status = SD_ReadMultiBlocks(buff, sector << 9, BLOCK_SIZE, count);
 8003fd2:	9201      	str	r2, [sp, #4]
 8003fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd8:	9200      	str	r2, [sp, #0]
 8003fda:	024a      	lsls	r2, r1, #9
 8003fdc:	f7ff ff84 	bl	8003ee8 <SD_ReadMultiBlocks>
  if(Status == SDMMC_OK)
 8003fe0:	b108      	cbz	r0, 8003fe6 <TM_FATFS_SD_SDIO_disk_read+0x5a>
      return RES_ERROR;
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	e7e1      	b.n	8003faa <TM_FATFS_SD_SDIO_disk_read+0x1e>
    Status = SD_WaitReadOperation();
 8003fe6:	f7ff fe07 	bl	8003bf8 <SD_WaitReadOperation>
 8003fea:	4604      	mov	r4, r0
    while((State = SD_GetStatus()) == SDMMC_TRANSFER_BUSY);
 8003fec:	f7ff fdec 	bl	8003bc8 <SD_GetStatus>
 8003ff0:	2801      	cmp	r0, #1
 8003ff2:	d0fb      	beq.n	8003fec <TM_FATFS_SD_SDIO_disk_read+0x60>
    if((State == SDMMC_TRANSFER_ERROR) || (Status != SDMMC_OK)) {
 8003ff4:	2802      	cmp	r0, #2
 8003ff6:	d0f4      	beq.n	8003fe2 <TM_FATFS_SD_SDIO_disk_read+0x56>
 8003ff8:	1e20      	subs	r0, r4, #0
 8003ffa:	bf18      	it	ne
 8003ffc:	2001      	movne	r0, #1
 8003ffe:	e7d4      	b.n	8003faa <TM_FATFS_SD_SDIO_disk_read+0x1e>
    return RES_NOTRDY;
 8004000:	2003      	movs	r0, #3
 8004002:	e7d2      	b.n	8003faa <TM_FATFS_SD_SDIO_disk_read+0x1e>
 8004004:	20000020 	.word	0x20000020

08004008 <SD_ProcessIRQSrc>:
  */
SD_Error SD_ProcessIRQSrc(void)
{
  uint32_t tempreg;

  tempreg = SDMMC1->STA;
 8004008:	4a17      	ldr	r2, [pc, #92]	@ (8004068 <SD_ProcessIRQSrc+0x60>)
 800400a:	4b18      	ldr	r3, [pc, #96]	@ (800406c <SD_ProcessIRQSrc+0x64>)
 800400c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if(tempreg & SDMMC_STA_DATAEND)
 800400e:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8004012:	d010      	beq.n	8004036 <SD_ProcessIRQSrc+0x2e>
  {
    TransferError = SDMMC_OK;
 8004014:	2100      	movs	r1, #0
 8004016:	7019      	strb	r1, [r3, #0]
    SDMMC1->ICR = SDMMC_ICR_DATAENDC;
 8004018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800401c:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferEnd = 1;
 800401e:	2101      	movs	r1, #1
 8004020:	4a13      	ldr	r2, [pc, #76]	@ (8004070 <SD_ProcessIRQSrc+0x68>)
 8004022:	6011      	str	r1, [r2, #0]
  //else if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
  //{
  //  SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
  //  TransferError = SD_START_BIT_ERR;
  //}
  SDMMC1->MASK &= ~(SDMMC_MASK_DCRCFAILIE | SDMMC_MASK_DTIMEOUTIE | SDMMC_MASK_DATAENDIE |
 8004024:	4910      	ldr	r1, [pc, #64]	@ (8004068 <SD_ProcessIRQSrc+0x60>)
 8004026:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8004028:	f422 4241 	bic.w	r2, r2, #49408	@ 0xc100
 800402c:	f022 023a 	bic.w	r2, r2, #58	@ 0x3a
 8004030:	63ca      	str	r2, [r1, #60]	@ 0x3c
		            SDMMC_MASK_TXFIFOHEIE | SDMMC_MASK_RXFIFOHFIE | SDMMC_MASK_TXUNDERRIE | SDMMC_MASK_RXOVERRIE);

  return(TransferError);
 8004032:	7818      	ldrb	r0, [r3, #0]
}
 8004034:	4770      	bx	lr
  else if(tempreg & SDMMC_STA_DCRCFAIL)
 8004036:	0788      	lsls	r0, r1, #30
 8004038:	d503      	bpl.n	8004042 <SD_ProcessIRQSrc+0x3a>
    SDMMC1->ICR = SDMMC_ICR_DCRCFAILC;
 800403a:	2102      	movs	r1, #2
 800403c:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_DATA_CRC_FAIL;
 800403e:	7019      	strb	r1, [r3, #0]
 8004040:	e7f0      	b.n	8004024 <SD_ProcessIRQSrc+0x1c>
  else if(tempreg & SDMMC_STA_DTIMEOUT)
 8004042:	0708      	lsls	r0, r1, #28
 8004044:	d504      	bpl.n	8004050 <SD_ProcessIRQSrc+0x48>
    SDMMC1->ICR = SDMMC_ICR_DTIMEOUTC;
 8004046:	2108      	movs	r1, #8
 8004048:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_DATA_TIMEOUT;
 800404a:	2204      	movs	r2, #4
    TransferError = SDMMC_TX_UNDERRUN;
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e7e9      	b.n	8004024 <SD_ProcessIRQSrc+0x1c>
  else if(tempreg & SDMMC_STA_RXOVERR)
 8004050:	0688      	lsls	r0, r1, #26
 8004052:	d503      	bpl.n	800405c <SD_ProcessIRQSrc+0x54>
    SDMMC1->ICR = SDMMC_ICR_RXOVERRC;
 8004054:	2120      	movs	r1, #32
 8004056:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_RX_OVERRUN;
 8004058:	2206      	movs	r2, #6
 800405a:	e7f7      	b.n	800404c <SD_ProcessIRQSrc+0x44>
  else if(tempreg & SDMMC_STA_TXUNDERR)
 800405c:	06c9      	lsls	r1, r1, #27
 800405e:	d5e1      	bpl.n	8004024 <SD_ProcessIRQSrc+0x1c>
    SDMMC1->ICR = SDMMC_ICR_TXUNDERRC;
 8004060:	2110      	movs	r1, #16
 8004062:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_TX_UNDERRUN;
 8004064:	2205      	movs	r2, #5
 8004066:	e7f1      	b.n	800404c <SD_ProcessIRQSrc+0x44>
 8004068:	40012c00 	.word	0x40012c00
 800406c:	20004108 	.word	0x20004108
 8004070:	20004104 	.word	0x20004104

08004074 <SDMMC1_IRQHandler>:
  SD_ProcessIRQSrc();
 8004074:	f7ff bfc8 	b.w	8004008 <SD_ProcessIRQSrc>

08004078 <SD_ProcessDMAIRQ>:
  * @retval None.
  */
void SD_ProcessDMAIRQ(void)
{
#ifdef SD_SDIO_DMA_STREAM3
  if(DMA2->LISR & SD_SDIO_DMA_FLAG_TCIF)
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <SD_ProcessDMAIRQ+0x18>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	0112      	lsls	r2, r2, #4
 800407e:	d505      	bpl.n	800408c <SD_ProcessDMAIRQ+0x14>
#else
  if(DMA2->HISR & SD_SDIO_DMA_FLAG_TCIF)
#endif
  { //数据流发生传输完成事件
    DMAEndOfTransfer = 0x01;
 8004080:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <SD_ProcessDMAIRQ+0x1c>)
 8004082:	2101      	movs	r1, #1
 8004084:	6011      	str	r1, [r2, #0]
    DMA2->LIFCR = SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF;
 8004086:	f04f 6204 	mov.w	r2, #138412032	@ 0x8400000
 800408a:	609a      	str	r2, [r3, #8]
    //DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF);
  }
}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40026400 	.word	0x40026400
 8004094:	20004100 	.word	0x20004100

08004098 <DMA2_Stream3_IRQHandler>:
  SD_ProcessDMAIRQ();
 8004098:	f7ff bfee 	b.w	8004078 <SD_ProcessDMAIRQ>

0800409c <sd_card_fatfs_test>:
static BYTE WriteBuffer[] =              /* 写缓冲区*/
        "Welcome to STM32 FatFs, This is a test file!";


void sd_card_fatfs_test(void)
{
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80040a2:	f240 122f 	movw	r2, #303	@ 0x12f
 80040a6:	4958      	ldr	r1, [pc, #352]	@ (8004208 <sd_card_fatfs_test+0x16c>)
{
 80040a8:	b084      	sub	sp, #16
  res_sd = f_mount(&fs, "1:", 1);
 80040aa:	4c58      	ldr	r4, [pc, #352]	@ (800420c <sd_card_fatfs_test+0x170>)
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80040ac:	4858      	ldr	r0, [pc, #352]	@ (8004210 <sd_card_fatfs_test+0x174>)
 80040ae:	f010 faf3 	bl	8014698 <iprintf>
  res_sd = f_mount(&fs, "1:", 1);
 80040b2:	2201      	movs	r2, #1
 80040b4:	4957      	ldr	r1, [pc, #348]	@ (8004214 <sd_card_fatfs_test+0x178>)
 80040b6:	4858      	ldr	r0, [pc, #352]	@ (8004218 <sd_card_fatfs_test+0x17c>)
 80040b8:	f001 ff90 	bl	8005fdc <f_mount>
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80040bc:	4952      	ldr	r1, [pc, #328]	@ (8004208 <sd_card_fatfs_test+0x16c>)
  res_sd = f_mount(&fs, "1:", 1);
 80040be:	7020      	strb	r0, [r4, #0]
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80040c0:	f240 1231 	movw	r2, #305	@ 0x131
 80040c4:	4852      	ldr	r0, [pc, #328]	@ (8004210 <sd_card_fatfs_test+0x174>)
 80040c6:	f010 fae7 	bl	8014698 <iprintf>
  /*----------------------- 格式化测试 -----------------------*/
  /* 如果没有文件系统就格式化创建创建文件系统 */
  if(res_sd == FR_NO_FILESYSTEM)
 80040ca:	7821      	ldrb	r1, [r4, #0]
 80040cc:	290d      	cmp	r1, #13
 80040ce:	f040 8081 	bne.w	80041d4 <sd_card_fatfs_test+0x138>
  {
    printf(">> SD Card don't have FatFs Type File System!\r\nCreate SD Card FAT32 File System...\r\nPlease Wait some time!\r\n");
 80040d2:	4852      	ldr	r0, [pc, #328]	@ (800421c <sd_card_fatfs_test+0x180>)
    /* 格式化 */
    //res_sd=f_mkfs("0:", 0, NULL, 0);
    MKFS_PARM opt = {0};
 80040d4:	2601      	movs	r6, #1
    printf(">> SD Card don't have FatFs Type File System!\r\nCreate SD Card FAT32 File System...\r\nPlease Wait some time!\r\n");
 80040d6:	f010 fb47 	bl	8014768 <puts>
    MKFS_PARM opt = {0};
 80040da:	f240 2302 	movw	r3, #514	@ 0x202
    opt.fmt = FM_FAT32; // 选择FAT32格式
    opt.n_fat = 2; // 设定FAT副本数量，通常为2
    opt.align = 1; // 数据区域对齐，默认为1，表示按扇区对齐
    // opt.n_root     不需要设置，因为我们使用的是FAT32，它没有固定大小的根目录
    opt.au_size = 512; // 每簇大小，以字节为单位，这里是假设每簇为1个扇区，即512字节
 80040de:	2200      	movs	r2, #0

    //res_sd = f_mkfs("0:", &opt, NULL, 0);
    #define FORMAT_WORK_BUF_SZ 4096         // 根据需要调整
    BYTE formatWorkBuf[FORMAT_WORK_BUF_SZ];
    res_sd = f_mkfs("1:", &opt, formatWorkBuf, FORMAT_WORK_BUF_SZ);
 80040e0:	4669      	mov	r1, sp
 80040e2:	484c      	ldr	r0, [pc, #304]	@ (8004214 <sd_card_fatfs_test+0x178>)
    MKFS_PARM opt = {0};
 80040e4:	e9cd 3600 	strd	r3, r6, [sp]
    opt.au_size = 512; // 每簇大小，以字节为单位，这里是假设每簇为1个扇区，即512字节
 80040e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    res_sd = f_mkfs("1:", &opt, formatWorkBuf, FORMAT_WORK_BUF_SZ);
 80040f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040f4:	aa04      	add	r2, sp, #16
 80040f6:	f002 fb6f 	bl	80067d8 <f_mkfs>
 80040fa:	4605      	mov	r5, r0
 80040fc:	7020      	strb	r0, [r4, #0]
    //res_sd = f_mkfs("0:", &opt, NULL, 4096); //根据实际需求调整
    if(res_sd == FR_OK)
 80040fe:	2800      	cmp	r0, #0
 8004100:	d160      	bne.n	80041c4 <sd_card_fatfs_test+0x128>
    {
      printf(">> SD Card Create File System success! \r\n");
 8004102:	4847      	ldr	r0, [pc, #284]	@ (8004220 <sd_card_fatfs_test+0x184>)
 8004104:	f010 fb30 	bl	8014768 <puts>
      /* 格式化后，先取消挂载 */
      res_sd = f_mount(NULL,"1:",0);
 8004108:	462a      	mov	r2, r5
 800410a:	4942      	ldr	r1, [pc, #264]	@ (8004214 <sd_card_fatfs_test+0x178>)
 800410c:	4628      	mov	r0, r5
 800410e:	f001 ff65 	bl	8005fdc <f_mount>
      /* 重新挂载 */
      res_sd = f_mount(&fs,"1:",1);
 8004112:	4632      	mov	r2, r6
      res_sd = f_mount(NULL,"1:",0);
 8004114:	7020      	strb	r0, [r4, #0]
      res_sd = f_mount(&fs,"1:",1);
 8004116:	493f      	ldr	r1, [pc, #252]	@ (8004214 <sd_card_fatfs_test+0x178>)
 8004118:	483f      	ldr	r0, [pc, #252]	@ (8004218 <sd_card_fatfs_test+0x17c>)
 800411a:	f001 ff5f 	bl	8005fdc <f_mount>
 800411e:	7020      	strb	r0, [r4, #0]
  else{
    printf(">> Mount file system success! \r\n");
  }

  /*----------------------- 文件系统测试：写测试 -----------------------*/
  printf("\r\n---------------FatFs Write Test---------------\r\n");
 8004120:	4840      	ldr	r0, [pc, #256]	@ (8004224 <sd_card_fatfs_test+0x188>)
 8004122:	f010 fb21 	bl	8014768 <puts>
  /* 打开文件，如果文件不存在则创建它 */
  res_sd = f_open(&fnew, "1:FatFs_test.txt",FA_CREATE_ALWAYS | FA_WRITE );
 8004126:	220a      	movs	r2, #10
 8004128:	493f      	ldr	r1, [pc, #252]	@ (8004228 <sd_card_fatfs_test+0x18c>)
 800412a:	4840      	ldr	r0, [pc, #256]	@ (800422c <sd_card_fatfs_test+0x190>)
 800412c:	f001 ff7e 	bl	800602c <f_open>
 8004130:	7020      	strb	r0, [r4, #0]
  if(res_sd == FR_OK)
 8004132:	2800      	cmp	r0, #0
 8004134:	d15d      	bne.n	80041f2 <sd_card_fatfs_test+0x156>
  {
    printf(">> Open Or Create file success, write data...\r\n");
    /* 将指定存储区内容写入到文件内 */
    res_sd = f_write(&fnew,WriteBuffer,sizeof(WriteBuffer),&fnum);
 8004136:	4d3e      	ldr	r5, [pc, #248]	@ (8004230 <sd_card_fatfs_test+0x194>)
    printf(">> Open Or Create file success, write data...\r\n");
 8004138:	483e      	ldr	r0, [pc, #248]	@ (8004234 <sd_card_fatfs_test+0x198>)
 800413a:	f010 fb15 	bl	8014768 <puts>
    res_sd = f_write(&fnew,WriteBuffer,sizeof(WriteBuffer),&fnum);
 800413e:	493e      	ldr	r1, [pc, #248]	@ (8004238 <sd_card_fatfs_test+0x19c>)
 8004140:	462b      	mov	r3, r5
 8004142:	222d      	movs	r2, #45	@ 0x2d
 8004144:	4839      	ldr	r0, [pc, #228]	@ (800422c <sd_card_fatfs_test+0x190>)
 8004146:	f002 f98a 	bl	800645e <f_write>
 800414a:	4601      	mov	r1, r0
 800414c:	7020      	strb	r0, [r4, #0]
    if(res_sd==FR_OK)
 800414e:	2800      	cmp	r0, #0
 8004150:	d14d      	bne.n	80041ee <sd_card_fatfs_test+0x152>
    {
      printf(">> Write data Success：%d\r\n",fnum);
 8004152:	6829      	ldr	r1, [r5, #0]
 8004154:	4839      	ldr	r0, [pc, #228]	@ (800423c <sd_card_fatfs_test+0x1a0>)
 8004156:	f010 fa9f 	bl	8014698 <iprintf>
      printf(">> Write data:\r\n%s\r\n",WriteBuffer);
 800415a:	4937      	ldr	r1, [pc, #220]	@ (8004238 <sd_card_fatfs_test+0x19c>)
 800415c:	4838      	ldr	r0, [pc, #224]	@ (8004240 <sd_card_fatfs_test+0x1a4>)
    }else{
      printf("Write data failed! (%d)\r\n",res_sd);
 800415e:	f010 fa9b 	bl	8014698 <iprintf>
    }
    /* 不再读写，关闭文件 */
    f_close(&fnew);
 8004162:	4832      	ldr	r0, [pc, #200]	@ (800422c <sd_card_fatfs_test+0x190>)
 8004164:	f002 fb2a 	bl	80067bc <f_close>
  }else{
    printf("Open Or Create file failed!\r\n");
  }
  /*----------------------- 文件系统测试：读测试 -----------------------*/
  printf("--------------- Read file test ---------------\r\n");
 8004168:	4836      	ldr	r0, [pc, #216]	@ (8004244 <sd_card_fatfs_test+0x1a8>)
 800416a:	f010 fafd 	bl	8014768 <puts>
  res_sd = f_open(&fnew, "1:FatFs_test.txt", FA_OPEN_EXISTING | FA_READ);
 800416e:	2201      	movs	r2, #1
 8004170:	492d      	ldr	r1, [pc, #180]	@ (8004228 <sd_card_fatfs_test+0x18c>)
 8004172:	482e      	ldr	r0, [pc, #184]	@ (800422c <sd_card_fatfs_test+0x190>)
 8004174:	f001 ff5a 	bl	800602c <f_open>
 8004178:	7020      	strb	r0, [r4, #0]
  if(res_sd == FR_OK)
 800417a:	2800      	cmp	r0, #0
 800417c:	d13f      	bne.n	80041fe <sd_card_fatfs_test+0x162>
  {
    printf(">> Open success...\r\n");
    res_sd = f_read(&fnew, ReadBuffer, sizeof(ReadBuffer), &fnum);
 800417e:	4d2c      	ldr	r5, [pc, #176]	@ (8004230 <sd_card_fatfs_test+0x194>)
    printf(">> Open success...\r\n");
 8004180:	4831      	ldr	r0, [pc, #196]	@ (8004248 <sd_card_fatfs_test+0x1ac>)
 8004182:	f010 faf1 	bl	8014768 <puts>
    res_sd = f_read(&fnew, ReadBuffer, sizeof(ReadBuffer), &fnum);
 8004186:	4931      	ldr	r1, [pc, #196]	@ (800424c <sd_card_fatfs_test+0x1b0>)
 8004188:	462b      	mov	r3, r5
 800418a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800418e:	4827      	ldr	r0, [pc, #156]	@ (800422c <sd_card_fatfs_test+0x190>)
 8004190:	f002 f88d 	bl	80062ae <f_read>
 8004194:	4601      	mov	r1, r0
 8004196:	7020      	strb	r0, [r4, #0]
    if(res_sd == FR_OK)
 8004198:	bb78      	cbnz	r0, 80041fa <sd_card_fatfs_test+0x15e>
    {
      printf(">>Read file data success%d\r\n",fnum);
 800419a:	6829      	ldr	r1, [r5, #0]
 800419c:	482c      	ldr	r0, [pc, #176]	@ (8004250 <sd_card_fatfs_test+0x1b4>)
 800419e:	f010 fa7b 	bl	8014698 <iprintf>
      printf(">>Read data:\r\n%s \r\n", ReadBuffer);
 80041a2:	492a      	ldr	r1, [pc, #168]	@ (800424c <sd_card_fatfs_test+0x1b0>)
 80041a4:	482b      	ldr	r0, [pc, #172]	@ (8004254 <sd_card_fatfs_test+0x1b8>)
    }else{
      printf("Read file failed! (%d)\r\n",res_sd);
 80041a6:	f010 fa77 	bl	8014698 <iprintf>
  }else{
    printf("Open file failed!\r\n");
  }

  /* 不再读写，关闭文件 */
  f_close(&fnew);
 80041aa:	4820      	ldr	r0, [pc, #128]	@ (800422c <sd_card_fatfs_test+0x190>)
 80041ac:	f002 fb06 	bl	80067bc <f_close>

  /* 不再使用文件系统，取消挂载文件系统 */
  f_mount(NULL,"1:",1);
 80041b0:	2201      	movs	r2, #1
 80041b2:	4918      	ldr	r1, [pc, #96]	@ (8004214 <sd_card_fatfs_test+0x178>)
 80041b4:	2000      	movs	r0, #0

  //while(1)
  //{

  //}
}
 80041b6:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 80041ba:	b004      	add	sp, #16
 80041bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  f_mount(NULL,"1:",1);
 80041c0:	f001 bf0c 	b.w	8005fdc <f_mount>
      printf(">> Create file system failed! %d \r\n", res_sd);
 80041c4:	4601      	mov	r1, r0
 80041c6:	4824      	ldr	r0, [pc, #144]	@ (8004258 <sd_card_fatfs_test+0x1bc>)
 80041c8:	f010 fa66 	bl	8014698 <iprintf>
}
 80041cc:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 80041d0:	b004      	add	sp, #16
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
  else if(res_sd != FR_OK) {
 80041d4:	b139      	cbz	r1, 80041e6 <sd_card_fatfs_test+0x14a>
    printf(">> SD Card Mount File System failed! %d \r\n",res_sd);
 80041d6:	4821      	ldr	r0, [pc, #132]	@ (800425c <sd_card_fatfs_test+0x1c0>)
}
 80041d8:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 80041dc:	b004      	add	sp, #16
 80041de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf(">> SD Card Mount File System failed! %d \r\n",res_sd);
 80041e2:	f010 ba59 	b.w	8014698 <iprintf>
    printf(">> Mount file system success! \r\n");
 80041e6:	481e      	ldr	r0, [pc, #120]	@ (8004260 <sd_card_fatfs_test+0x1c4>)
 80041e8:	f010 fabe 	bl	8014768 <puts>
 80041ec:	e798      	b.n	8004120 <sd_card_fatfs_test+0x84>
      printf("Write data failed! (%d)\r\n",res_sd);
 80041ee:	481d      	ldr	r0, [pc, #116]	@ (8004264 <sd_card_fatfs_test+0x1c8>)
 80041f0:	e7b5      	b.n	800415e <sd_card_fatfs_test+0xc2>
    printf("Open Or Create file failed!\r\n");
 80041f2:	481d      	ldr	r0, [pc, #116]	@ (8004268 <sd_card_fatfs_test+0x1cc>)
 80041f4:	f010 fab8 	bl	8014768 <puts>
 80041f8:	e7b6      	b.n	8004168 <sd_card_fatfs_test+0xcc>
      printf("Read file failed! (%d)\r\n",res_sd);
 80041fa:	481c      	ldr	r0, [pc, #112]	@ (800426c <sd_card_fatfs_test+0x1d0>)
 80041fc:	e7d3      	b.n	80041a6 <sd_card_fatfs_test+0x10a>
    printf("Open file failed!\r\n");
 80041fe:	481c      	ldr	r0, [pc, #112]	@ (8004270 <sd_card_fatfs_test+0x1d4>)
 8004200:	f010 fab2 	bl	8014768 <puts>
 8004204:	e7d1      	b.n	80041aa <sd_card_fatfs_test+0x10e>
 8004206:	bf00      	nop
 8004208:	080184b1 	.word	0x080184b1
 800420c:	2000423c 	.word	0x2000423c
 8004210:	08015a81 	.word	0x08015a81
 8004214:	08015a7e 	.word	0x08015a7e
 8004218:	200044a0 	.word	0x200044a0
 800421c:	08015a89 	.word	0x08015a89
 8004220:	08015af5 	.word	0x08015af5
 8004224:	08015b8d 	.word	0x08015b8d
 8004228:	08015bbf 	.word	0x08015bbf
 800422c:	20004240 	.word	0x20004240
 8004230:	20004238 	.word	0x20004238
 8004234:	08015bd0 	.word	0x08015bd0
 8004238:	20000021 	.word	0x20000021
 800423c:	08015bff 	.word	0x08015bff
 8004240:	08015c1c 	.word	0x08015c1c
 8004244:	08015c68 	.word	0x08015c68
 8004248:	08015c98 	.word	0x08015c98
 800424c:	20004138 	.word	0x20004138
 8004250:	08015cac 	.word	0x08015cac
 8004254:	08015cc9 	.word	0x08015cc9
 8004258:	08015b1e 	.word	0x08015b1e
 800425c:	08015b42 	.word	0x08015b42
 8004260:	08015b6d 	.word	0x08015b6d
 8004264:	08015c31 	.word	0x08015c31
 8004268:	08015c4b 	.word	0x08015c4b
 800426c:	08015cdd 	.word	0x08015cdd
 8004270:	08015cf6 	.word	0x08015cf6

08004274 <disk_status>:
)
{
	DSTATUS stat;
	int result;

	switch (pdrv) {
 8004274:	2801      	cmp	r0, #1
 8004276:	d101      	bne.n	800427c <disk_status+0x8>
		stat = STA_NOINIT;
		return stat;

	case DEV_MMC :
		//result = MMC_disk_status();
		result = TM_FATFS_SD_SDIO_disk_status();
 8004278:	f7ff b896 	b.w	80033a8 <TM_FATFS_SD_SDIO_disk_status>
		// translate the reslut code here
		stat = STA_NOINIT;
		return stat;
	}
	return STA_NOINIT;
}
 800427c:	2001      	movs	r0, #1
 800427e:	4770      	bx	lr

08004280 <disk_initialize>:
)
{
	DSTATUS stat;
	int result;

	switch (pdrv) {
 8004280:	2801      	cmp	r0, #1
 8004282:	d101      	bne.n	8004288 <disk_initialize+0x8>
		stat = STA_NOINIT;
		return stat;

	case DEV_MMC :
		//result = MMC_disk_initialize();
		result = TM_FATFS_SD_SDIO_disk_initialize();
 8004284:	f7ff bc42 	b.w	8003b0c <TM_FATFS_SD_SDIO_disk_initialize>
		// translate the reslut code here
		stat = STA_NOINIT;
		return stat;
	}
	return STA_NOINIT;
}
 8004288:	2001      	movs	r0, #1
 800428a:	4770      	bx	lr

0800428c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800428c:	4603      	mov	r3, r0
 800428e:	4608      	mov	r0, r1
 8004290:	4611      	mov	r1, r2
 8004292:	9a00      	ldr	r2, [sp, #0]
	DRESULT res;
	int result;

	switch (pdrv) {
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <disk_read+0x10>
		return res;

	case DEV_MMC :
		// translate the arguments here
		//result = MMC_disk_read(buff, sector, count);
		result = TM_FATFS_SD_SDIO_disk_read(buff, sector, count);
 8004298:	f7ff be78 	b.w	8003f8c <TM_FATFS_SD_SDIO_disk_read>
		res = RES_PARERR;
		return res;
	}

	return RES_PARERR;
}
 800429c:	2004      	movs	r0, #4
 800429e:	4770      	bx	lr

080042a0 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 80042a0:	4603      	mov	r3, r0
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	9a00      	ldr	r2, [sp, #0]
	DRESULT res;
	int result;

	switch (pdrv) {
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <disk_write+0x10>
		return res;

	case DEV_MMC :
		// translate the arguments here
		//result = MMC_disk_write(buff, sector, count);
		result = TM_FATFS_SD_SDIO_disk_write(buff, sector, count);
 80042ac:	f7ff bdb6 	b.w	8003e1c <TM_FATFS_SD_SDIO_disk_write>
		res = RES_PARERR;
		return res;
	}

	return RES_PARERR;
}
 80042b0:	2004      	movs	r0, #4
 80042b2:	4770      	bx	lr

080042b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80042b4:	4603      	mov	r3, r0
 80042b6:	4608      	mov	r0, r1
 80042b8:	4611      	mov	r1, r2
	DRESULT res;
	int result;

	switch (pdrv) {
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <disk_ioctl+0xe>
		res = RES_PARERR;
		return res;

	case DEV_MMC :
		// Process of the command for the MMC/SD card
		result = TM_FATFS_SD_SDIO_disk_ioctl(cmd, buff);
 80042be:	f7ff b853 	b.w	8003368 <TM_FATFS_SD_SDIO_disk_ioctl>
		res = RES_PARERR;
		return res;
	}

	return RES_PARERR;
}
 80042c2:	2004      	movs	r0, #4
 80042c4:	4770      	bx	lr

080042c6 <ld_32>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 80042c6:	6800      	ldr	r0, [r0, #0]
 80042c8:	4770      	bx	lr

080042ca <ld_64>:

#if FF_FS_EXFAT
static QWORD ld_64 (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80042ca:	4603      	mov	r3, r0
	rv = rv << 8 | ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	4770      	bx	lr

080042d2 <st_32>:
	*ptr++ = (BYTE)val;
}

static void st_32 (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80042d2:	0a0b      	lsrs	r3, r1, #8
 80042d4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042d6:	7043      	strb	r3, [r0, #1]
 80042d8:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80042da:	0e09      	lsrs	r1, r1, #24
 80042dc:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80042de:	70c1      	strb	r1, [r0, #3]
}
 80042e0:	4770      	bx	lr

080042e2 <st_64>:

#if FF_FS_EXFAT
static void st_64 (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80042e2:	0a11      	lsrs	r1, r2, #8
 80042e4:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
 80042e6:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80042e8:	7041      	strb	r1, [r0, #1]
 80042ea:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80042ec:	0e12      	lsrs	r2, r2, #24
 80042ee:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80042f0:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80042f2:	0a1a      	lsrs	r2, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80042f4:	7142      	strb	r2, [r0, #5]
 80042f6:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80042f8:	0e1b      	lsrs	r3, r3, #24
 80042fa:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 80042fc:	71c3      	strb	r3, [r0, #7]
}
 80042fe:	4770      	bx	lr

08004300 <dbc_1st>:

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
#if FF_CODE_PAGE == 0		/* Variable code page */
	if (DbcTbl && c >= DbcTbl[0]) {
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <dbc_1st+0x2c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	b183      	cbz	r3, 8004328 <dbc_1st+0x28>
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	4282      	cmp	r2, r0
 800430a:	d80d      	bhi.n	8004328 <dbc_1st+0x28>
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 800430c:	785a      	ldrb	r2, [r3, #1]
 800430e:	4282      	cmp	r2, r0
 8004310:	d208      	bcs.n	8004324 <dbc_1st+0x24>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 8004312:	789a      	ldrb	r2, [r3, #2]
 8004314:	4282      	cmp	r2, r0
 8004316:	d807      	bhi.n	8004328 <dbc_1st+0x28>
 8004318:	78db      	ldrb	r3, [r3, #3]
 800431a:	4283      	cmp	r3, r0
 800431c:	bf34      	ite	cc
 800431e:	2000      	movcc	r0, #0
 8004320:	2001      	movcs	r0, #1
 8004322:	4770      	bx	lr
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 8004324:	2001      	movs	r0, #1
 8004326:	4770      	bx	lr
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004328:	2000      	movs	r0, #0
}
 800432a:	4770      	bx	lr
 800432c:	20004700 	.word	0x20004700

08004330 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004330:	6983      	ldr	r3, [r0, #24]
	clst -= 2;		/* Cluster number is origin from 2 */
 8004332:	1e8a      	subs	r2, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004334:	3b02      	subs	r3, #2
 8004336:	4293      	cmp	r3, r2
{
 8004338:	b510      	push	{r4, lr}
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800433a:	bf85      	ittet	hi
 800433c:	e9d0 3110 	ldrdhi	r3, r1, [r0, #64]	@ 0x40
 8004340:	8944      	ldrhhi	r4, [r0, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004342:	2000      	movls	r0, #0
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004344:	fbe2 3104 	umlalhi	r3, r1, r2, r4
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004348:	bf94      	ite	ls
 800434a:	4601      	movls	r1, r0
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800434c:	4618      	movhi	r0, r3
}
 800434e:	bd10      	pop	{r4, pc}

08004350 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004350:	4603      	mov	r3, r0
 8004352:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004356:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004358:	01c2      	lsls	r2, r0, #7
 800435a:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 800435e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004362:	fa50 f282 	uxtab	r2, r0, r2
	} while (--n);
 8004366:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004368:	b2d0      	uxtb	r0, r2
	} while (--n);
 800436a:	d1f5      	bne.n	8004358 <sum_sfn+0x8>
	return sum;
}
 800436c:	4770      	bx	lr

0800436e <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800436e:	b510      	push	{r4, lr}
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8004370:	7842      	ldrb	r2, [r0, #1]
{
 8004372:	4604      	mov	r4, r0
	for (i = sum = 0; i < szblk; i++) {
 8004374:	2000      	movs	r0, #0
	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8004376:	3201      	adds	r2, #1
	for (i = sum = 0; i < szblk; i++) {
 8004378:	4603      	mov	r3, r0
	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800437a:	0152      	lsls	r2, r2, #5
	for (i = sum = 0; i < szblk; i++) {
 800437c:	2b02      	cmp	r3, #2
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800437e:	ea4f 31c0 	mov.w	r1, r0, lsl #15
	for (i = sum = 0; i < szblk; i++) {
 8004382:	bf08      	it	eq
 8004384:	2304      	moveq	r3, #4
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004386:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800438a:	5ce0      	ldrb	r0, [r4, r3]
	for (i = sum = 0; i < szblk; i++) {
 800438c:	3301      	adds	r3, #1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800438e:	fa10 f181 	uxtah	r1, r0, r1
	for (i = sum = 0; i < szblk; i++) {
 8004392:	429a      	cmp	r2, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004394:	b288      	uxth	r0, r1
	for (i = sum = 0; i < szblk; i++) {
 8004396:	d8f1      	bhi.n	800437c <xdir_sum+0xe>
		}
	}
	return sum;
}
 8004398:	bd10      	pop	{r4, pc}

0800439a <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 800439a:	6802      	ldr	r2, [r0, #0]
{
 800439c:	4601      	mov	r1, r0
 800439e:	b510      	push	{r4, lr}
	if (!tp) return -1;		/* Invalid path name? */
 80043a0:	b1aa      	cbz	r2, 80043ce <get_ldnumber+0x34>
	tt = tp = *path;
 80043a2:	4614      	mov	r4, r2
	do {					/* Find a colon in the path */
		chr = *tt++;
 80043a4:	f814 3b01 	ldrb.w	r3, [r4], #1
	} while (!IsTerminator(chr) && chr != ':');
 80043a8:	2b1f      	cmp	r3, #31
 80043aa:	d90e      	bls.n	80043ca <get_ldnumber+0x30>
 80043ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80043ae:	d1f9      	bne.n	80043a4 <get_ldnumber+0xa>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 80043b0:	7813      	ldrb	r3, [r2, #0]
 80043b2:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80043b6:	b2c3      	uxtb	r3, r0
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d808      	bhi.n	80043ce <get_ldnumber+0x34>
 80043bc:	3202      	adds	r2, #2
 80043be:	4294      	cmp	r4, r2
 80043c0:	d105      	bne.n	80043ce <get_ldnumber+0x34>
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 80043c2:	2802      	cmp	r0, #2
 80043c4:	dc03      	bgt.n	80043ce <get_ldnumber+0x34>
		*path = tt;		/* Snip the drive prefix off */
 80043c6:	600c      	str	r4, [r1, #0]
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 80043c8:	bd10      	pop	{r4, pc}
	return 0;				/* Default drive is 0 */
 80043ca:	2000      	movs	r0, #0
 80043cc:	e7fc      	b.n	80043c8 <get_ldnumber+0x2e>
	if (!tp) return -1;		/* Invalid path name? */
 80043ce:	f04f 30ff 	mov.w	r0, #4294967295
 80043d2:	e7f9      	b.n	80043c8 <get_ldnumber+0x2e>

080043d4 <crc32>:

static DWORD crc32 (	/* Returns next CRC value */
	DWORD crc,			/* Current CRC value */
	BYTE d				/* A byte to be processed */
)
{
 80043d4:	b530      	push	{r4, r5, lr}
 80043d6:	2208      	movs	r2, #8
	BYTE b;


	for (b = 1; b; b <<= 1) {
 80043d8:	2301      	movs	r3, #1
		crc ^= (d & b) ? 1 : 0;
		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
 80043da:	4d09      	ldr	r5, [pc, #36]	@ (8004400 <crc32+0x2c>)
		crc ^= (d & b) ? 1 : 0;
 80043dc:	ea01 0403 	and.w	r4, r1, r3
	for (b = 1; b; b <<= 1) {
 80043e0:	005b      	lsls	r3, r3, #1
		crc ^= (d & b) ? 1 : 0;
 80043e2:	2c00      	cmp	r4, #0
 80043e4:	bf18      	it	ne
 80043e6:	f080 0001 	eorne.w	r0, r0, #1
	for (b = 1; b; b <<= 1) {
 80043ea:	3a01      	subs	r2, #1
 80043ec:	b2db      	uxtb	r3, r3
		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
 80043ee:	f340 0400 	sbfx	r4, r0, #0, #1
 80043f2:	ea04 0405 	and.w	r4, r4, r5
 80043f6:	ea84 0050 	eor.w	r0, r4, r0, lsr #1
	for (b = 1; b; b <<= 1) {
 80043fa:	d1ef      	bne.n	80043dc <crc32+0x8>
	}
	return crc;
}
 80043fc:	bd30      	pop	{r4, r5, pc}
 80043fe:	bf00      	nop
 8004400:	edb88320 	.word	0xedb88320

08004404 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004408:	4604      	mov	r4, r0
 800440a:	b918      	cbnz	r0, 8004414 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 800440c:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800440e:	2300      	movs	r3, #0
 8004410:	602b      	str	r3, [r5, #0]
	return res;
}
 8004412:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004414:	6803      	ldr	r3, [r0, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f8      	beq.n	800440c <validate+0x8>
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	2a00      	cmp	r2, #0
 800441e:	d0f5      	beq.n	800440c <validate+0x8>
 8004420:	8881      	ldrh	r1, [r0, #4]
 8004422:	88da      	ldrh	r2, [r3, #6]
 8004424:	4291      	cmp	r1, r2
 8004426:	d1f1      	bne.n	800440c <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8004428:	7858      	ldrb	r0, [r3, #1]
 800442a:	f7ff ff23 	bl	8004274 <disk_status>
 800442e:	f010 0001 	ands.w	r0, r0, #1
 8004432:	d1eb      	bne.n	800440c <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	e7eb      	b.n	8004410 <validate+0xc>

08004438 <sync_window>:
{
 8004438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800443a:	7903      	ldrb	r3, [r0, #4]
{
 800443c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800443e:	b313      	cbz	r3, 8004486 <sync_window+0x4e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8004440:	f100 0760 	add.w	r7, r0, #96	@ 0x60
 8004444:	2501      	movs	r5, #1
 8004446:	4639      	mov	r1, r7
 8004448:	9500      	str	r5, [sp, #0]
 800444a:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 800444e:	7840      	ldrb	r0, [r0, #1]
 8004450:	f7ff ff26 	bl	80042a0 <disk_write>
 8004454:	b9d0      	cbnz	r0, 800448c <sync_window+0x54>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004456:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004458:	69e1      	ldr	r1, [r4, #28]
 800445a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800445e:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	@ 0x30
 8004462:	1b96      	subs	r6, r2, r6
 8004464:	eb63 0000 	sbc.w	r0, r3, r0
 8004468:	428e      	cmp	r6, r1
 800446a:	f170 0000 	sbcs.w	r0, r0, #0
 800446e:	d20a      	bcs.n	8004486 <sync_window+0x4e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004470:	78e0      	ldrb	r0, [r4, #3]
 8004472:	2802      	cmp	r0, #2
 8004474:	d107      	bne.n	8004486 <sync_window+0x4e>
 8004476:	1852      	adds	r2, r2, r1
 8004478:	9500      	str	r5, [sp, #0]
 800447a:	4639      	mov	r1, r7
 800447c:	7860      	ldrb	r0, [r4, #1]
 800447e:	f143 0300 	adc.w	r3, r3, #0
 8004482:	f7ff ff0d 	bl	80042a0 <disk_write>
	FRESULT res = FR_OK;
 8004486:	2000      	movs	r0, #0
}
 8004488:	b003      	add	sp, #12
 800448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 800448c:	4628      	mov	r0, r5
 800448e:	e7fb      	b.n	8004488 <sync_window+0x50>

08004490 <xname_sum>:
{
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4605      	mov	r5, r0
	WORD sum = 0;
 8004494:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 8004496:	f835 0b02 	ldrh.w	r0, [r5], #2
 800449a:	b908      	cbnz	r0, 80044a0 <xname_sum+0x10>
}
 800449c:	4620      	mov	r0, r4
 800449e:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 80044a0:	f003 fad6 	bl	8007a50 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80044a4:	03e3      	lsls	r3, r4, #15
 80044a6:	b2c2      	uxtb	r2, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80044a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80044ac:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
 80044b0:	fa12 f383 	uxtah	r3, r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80044b4:	f3c3 044e 	ubfx	r4, r3, #1, #15
 80044b8:	ea44 34c3 	orr.w	r4, r4, r3, lsl #15
 80044bc:	fa10 f484 	uxtah	r4, r0, r4
 80044c0:	b2a4      	uxth	r4, r4
 80044c2:	e7e8      	b.n	8004496 <xname_sum+0x6>

080044c4 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 80044c4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80044c8:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80044ca:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80044cc:	7803      	ldrb	r3, [r0, #0]
 80044ce:	2b03      	cmp	r3, #3
		st_16(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80044d0:	bf01      	itttt	eq
 80044d2:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80044d4:	750a      	strbeq	r2, [r1, #20]
 80044d6:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80044d8:	754a      	strbeq	r2, [r1, #21]
}
 80044da:	4770      	bx	lr

080044dc <move_window>:
{
 80044dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044de:	4615      	mov	r5, r2
 80044e0:	461e      	mov	r6, r3
 80044e2:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 80044e4:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 80044e8:	42b3      	cmp	r3, r6
 80044ea:	bf08      	it	eq
 80044ec:	42aa      	cmpeq	r2, r5
 80044ee:	d014      	beq.n	800451a <move_window+0x3e>
		res = sync_window(fs);		/* Flush the window */
 80044f0:	f7ff ffa2 	bl	8004438 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044f4:	b978      	cbnz	r0, 8004516 <move_window+0x3a>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80044f6:	2701      	movs	r7, #1
 80044f8:	462a      	mov	r2, r5
 80044fa:	4633      	mov	r3, r6
 80044fc:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8004500:	9700      	str	r7, [sp, #0]
 8004502:	7860      	ldrb	r0, [r4, #1]
 8004504:	f7ff fec2 	bl	800428c <disk_read>
 8004508:	b118      	cbz	r0, 8004512 <move_window+0x36>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800450a:	f04f 35ff 	mov.w	r5, #4294967295
				res = FR_DISK_ERR;
 800450e:	4638      	mov	r0, r7
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8004510:	462e      	mov	r6, r5
			fs->winsect = sect;
 8004512:	e9c4 5608 	strd	r5, r6, [r4, #32]
}
 8004516:	b003      	add	sp, #12
 8004518:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 800451a:	2000      	movs	r0, #0
 800451c:	e7fb      	b.n	8004516 <move_window+0x3a>
	...

08004520 <check_fs>:
{
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8004522:	2100      	movs	r1, #0
 8004524:	f04f 36ff 	mov.w	r6, #4294967295
 8004528:	f04f 37ff 	mov.w	r7, #4294967295
{
 800452c:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800452e:	7101      	strb	r1, [r0, #4]
 8004530:	e9c0 6708 	strd	r6, r7, [r0, #32]
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8004534:	f7ff ffd2 	bl	80044dc <move_window>
 8004538:	2800      	cmp	r0, #0
 800453a:	d14b      	bne.n	80045d4 <check_fs+0xb4>
	sign = ld_16(fs->win + BS_55AA);
 800453c:	f8b4 525e 	ldrh.w	r5, [r4, #606]	@ 0x25e
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8004540:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004544:	429d      	cmp	r5, r3
 8004546:	d107      	bne.n	8004558 <check_fs+0x38>
 8004548:	220b      	movs	r2, #11
 800454a:	4925      	ldr	r1, [pc, #148]	@ (80045e0 <check_fs+0xc0>)
 800454c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8004550:	f010 fa7e 	bl	8014a50 <memcmp>
 8004554:	2800      	cmp	r0, #0
 8004556:	d03f      	beq.n	80045d8 <check_fs+0xb8>
	b = fs->win[BS_JmpBoot];
 8004558:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800455c:	2beb      	cmp	r3, #235	@ 0xeb
 800455e:	d003      	beq.n	8004568 <check_fs+0x48>
 8004560:	3318      	adds	r3, #24
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d82e      	bhi.n	80045c6 <check_fs+0xa6>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8004568:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800456c:	429d      	cmp	r5, r3
 800456e:	d106      	bne.n	800457e <check_fs+0x5e>
 8004570:	2208      	movs	r2, #8
 8004572:	491c      	ldr	r1, [pc, #112]	@ (80045e4 <check_fs+0xc4>)
 8004574:	f104 00b2 	add.w	r0, r4, #178	@ 0xb2
 8004578:	f010 fa6a 	bl	8014a50 <memcmp>
 800457c:	b348      	cbz	r0, 80045d2 <check_fs+0xb2>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800457e:	f8b4 306b 	ldrh.w	r3, [r4, #107]	@ 0x6b
 8004582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004586:	d11e      	bne.n	80045c6 <check_fs+0xa6>
		b = fs->win[BPB_SecPerClus];
 8004588:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800458c:	b1db      	cbz	r3, 80045c6 <check_fs+0xa6>
 800458e:	1e5a      	subs	r2, r3, #1
 8004590:	421a      	tst	r2, r3
 8004592:	d118      	bne.n	80045c6 <check_fs+0xa6>
			&& ld_16(fs->win + BPB_RsvdSecCnt) != 0		/* Properness of number of reserved sectors (MNBZ) */
 8004594:	f8b4 306e 	ldrh.w	r3, [r4, #110]	@ 0x6e
 8004598:	b1ab      	cbz	r3, 80045c6 <check_fs+0xa6>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 800459a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800459e:	3b01      	subs	r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d810      	bhi.n	80045c6 <check_fs+0xa6>
			&& ld_16(fs->win + BPB_RootEntCnt) != 0		/* Properness of root dir size (MNBZ) */
 80045a4:	f8b4 3071 	ldrh.w	r3, [r4, #113]	@ 0x71
 80045a8:	b16b      	cbz	r3, 80045c6 <check_fs+0xa6>
			&& (ld_16(fs->win + BPB_TotSec16) >= 128 || ld_32(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 80045aa:	f8b4 3073 	ldrh.w	r3, [r4, #115]	@ 0x73
 80045ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80045b0:	d806      	bhi.n	80045c0 <check_fs+0xa0>
 80045b2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80045b6:	f7ff fe86 	bl	80042c6 <ld_32>
 80045ba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80045be:	d302      	bcc.n	80045c6 <check_fs+0xa6>
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 80045c0:	f8b4 3076 	ldrh.w	r3, [r4, #118]	@ 0x76
 80045c4:	b953      	cbnz	r3, 80045dc <check_fs+0xbc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 80045c6:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 80045ca:	4285      	cmp	r5, r0
 80045cc:	bf14      	ite	ne
 80045ce:	2003      	movne	r0, #3
 80045d0:	2002      	moveq	r0, #2
}
 80045d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80045d4:	2004      	movs	r0, #4
 80045d6:	e7fc      	b.n	80045d2 <check_fs+0xb2>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 80045d8:	2001      	movs	r0, #1
 80045da:	e7fa      	b.n	80045d2 <check_fs+0xb2>
			return 0;	/* It is an FAT32 VBR */
 80045dc:	2000      	movs	r0, #0
 80045de:	e7f8      	b.n	80045d2 <check_fs+0xb2>
 80045e0:	08015d09 	.word	0x08015d09
 80045e4:	08015d3c 	.word	0x08015d3c

080045e8 <change_bitmap>:
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80045e8:	3902      	subs	r1, #2
{
 80045ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ee:	4617      	mov	r7, r2
 80045f0:	4699      	mov	r9, r3
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 80045f2:	0b0d      	lsrs	r5, r1, #12
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 80045f4:	f001 0407 	and.w	r4, r1, #7
 80045f8:	f04f 0b01 	mov.w	fp, #1
{
 80045fc:	4606      	mov	r6, r0
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 80045fe:	f3c1 0ac8 	ubfx	sl, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004602:	fa0b f404 	lsl.w	r4, fp, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004606:	e9d0 3212 	ldrd	r3, r2, [r0, #72]	@ 0x48
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800460a:	b2e4      	uxtb	r4, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800460c:	18ed      	adds	r5, r5, r3
 800460e:	f142 0800 	adc.w	r8, r2, #0
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004612:	462a      	mov	r2, r5
 8004614:	3501      	adds	r5, #1
 8004616:	4643      	mov	r3, r8
 8004618:	4630      	mov	r0, r6
 800461a:	f148 0800 	adc.w	r8, r8, #0
 800461e:	f7ff ff5d 	bl	80044dc <move_window>
 8004622:	b118      	cbz	r0, 800462c <change_bitmap+0x44>
 8004624:	2001      	movs	r0, #1
}
 8004626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} while (++i < SS(fs));		/* Next byte */
 800462a:	469a      	mov	sl, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800462c:	eb06 020a 	add.w	r2, r6, sl
 8004630:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8004634:	4223      	tst	r3, r4
 8004636:	bf14      	ite	ne
 8004638:	2101      	movne	r1, #1
 800463a:	2100      	moveq	r1, #0
 800463c:	4549      	cmp	r1, r9
 800463e:	d013      	beq.n	8004668 <change_bitmap+0x80>
				fs->win[i] ^= bm;	/* Flip the bit */
 8004640:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8004642:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8004644:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
				fs->wflag = 1;
 8004648:	f886 b004 	strb.w	fp, [r6, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800464c:	d0eb      	beq.n	8004626 <change_bitmap+0x3e>
			} while (bm <<= 1);		/* Next bit */
 800464e:	0064      	lsls	r4, r4, #1
 8004650:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8004654:	d1ea      	bne.n	800462c <change_bitmap+0x44>
		} while (++i < SS(fs));		/* Next byte */
 8004656:	f10a 0301 	add.w	r3, sl, #1
			bm = 1;
 800465a:	2401      	movs	r4, #1
		i = 0;
 800465c:	f04f 0a00 	mov.w	sl, #0
		} while (++i < SS(fs));		/* Next byte */
 8004660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004664:	d3e1      	bcc.n	800462a <change_bitmap+0x42>
 8004666:	e7d4      	b.n	8004612 <change_bitmap+0x2a>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004668:	2002      	movs	r0, #2
 800466a:	e7dc      	b.n	8004626 <change_bitmap+0x3e>

0800466c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800466c:	2901      	cmp	r1, #1
{
 800466e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004670:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004672:	f240 809e 	bls.w	80047b2 <get_fat+0x146>
	FATFS *fs = obj->fs;
 8004676:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004678:	69ab      	ldr	r3, [r5, #24]
 800467a:	428b      	cmp	r3, r1
 800467c:	f240 8099 	bls.w	80047b2 <get_fat+0x146>
		switch (fs->fs_type) {
 8004680:	782b      	ldrb	r3, [r5, #0]
 8004682:	3b01      	subs	r3, #1
 8004684:	2b03      	cmp	r3, #3
 8004686:	f200 8094 	bhi.w	80047b2 <get_fat+0x146>
 800468a:	e8df f003 	tbb	[pc, r3]
 800468e:	2f02      	.short	0x2f02
 8004690:	5741      	.short	0x5741
			bc = (UINT)clst; bc += bc / 2;
 8004692:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004696:	4628      	mov	r0, r5
 8004698:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 800469c:	0a72      	lsrs	r2, r6, #9
 800469e:	1852      	adds	r2, r2, r1
 80046a0:	f143 0300 	adc.w	r3, r3, #0
 80046a4:	f7ff ff1a 	bl	80044dc <move_window>
 80046a8:	b110      	cbz	r0, 80046b0 <get_fat+0x44>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80046b0:	1c77      	adds	r7, r6, #1
 80046b2:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046b6:	4628      	mov	r0, r5
 80046b8:	0a7a      	lsrs	r2, r7, #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80046ba:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046bc:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80046c0:	f896 6060 	ldrb.w	r6, [r6, #96]	@ 0x60
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046c4:	1852      	adds	r2, r2, r1
 80046c6:	f143 0300 	adc.w	r3, r3, #0
 80046ca:	f7ff ff07 	bl	80044dc <move_window>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d1eb      	bne.n	80046aa <get_fat+0x3e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80046d2:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80046d6:	442f      	add	r7, r5
 80046d8:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80046dc:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80046e0:	07e3      	lsls	r3, r4, #31
 80046e2:	bf4c      	ite	mi
 80046e4:	0900      	lsrmi	r0, r0, #4
 80046e6:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80046ea:	e7e0      	b.n	80046ae <get_fat+0x42>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80046ec:	0a0a      	lsrs	r2, r1, #8
 80046ee:	4628      	mov	r0, r5
 80046f0:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 80046f4:	1852      	adds	r2, r2, r1
 80046f6:	f143 0300 	adc.w	r3, r3, #0
 80046fa:	f7ff feef 	bl	80044dc <move_window>
 80046fe:	2800      	cmp	r0, #0
 8004700:	d1d3      	bne.n	80046aa <get_fat+0x3e>
			val = ld_16(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004702:	0064      	lsls	r4, r4, #1
 8004704:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8004708:	442c      	add	r4, r5
 800470a:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
			break;
 800470e:	e7ce      	b.n	80046ae <get_fat+0x42>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004710:	09ca      	lsrs	r2, r1, #7
 8004712:	4628      	mov	r0, r5
 8004714:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004718:	1852      	adds	r2, r2, r1
 800471a:	f143 0300 	adc.w	r3, r3, #0
 800471e:	f7ff fedd 	bl	80044dc <move_window>
 8004722:	2800      	cmp	r0, #0
 8004724:	d1c1      	bne.n	80046aa <get_fat+0x3e>
			val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004726:	00a4      	lsls	r4, r4, #2
 8004728:	f105 0060 	add.w	r0, r5, #96	@ 0x60
 800472c:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8004730:	4420      	add	r0, r4
 8004732:	f7ff fdc8 	bl	80042c6 <ld_32>
 8004736:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 800473a:	e7b8      	b.n	80046ae <get_fat+0x42>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800473c:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 8004740:	79c7      	ldrb	r7, [r0, #7]
 8004742:	ea53 0201 	orrs.w	r2, r3, r1
 8004746:	d001      	beq.n	800474c <get_fat+0xe0>
 8004748:	6882      	ldr	r2, [r0, #8]
 800474a:	b902      	cbnz	r2, 800474e <get_fat+0xe2>
 800474c:	bb8f      	cbnz	r7, 80047b2 <get_fat+0x146>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800474e:	6886      	ldr	r6, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004750:	2f02      	cmp	r7, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8004752:	896a      	ldrh	r2, [r5, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004754:	eba4 0606 	sub.w	r6, r4, r6
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004758:	d10f      	bne.n	800477a <get_fat+0x10e>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800475a:	1e58      	subs	r0, r3, #1
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	f141 31ff 	adc.w	r1, r1, #4294967295
 8004764:	0a40      	lsrs	r0, r0, #9
 8004766:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800476a:	0a49      	lsrs	r1, r1, #9
 800476c:	f7fb fdd0 	bl	8000310 <__aeabi_uldivmod>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004770:	4286      	cmp	r6, r0
 8004772:	d81e      	bhi.n	80047b2 <get_fat+0x146>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8004774:	d01f      	beq.n	80047b6 <get_fat+0x14a>
 8004776:	1c60      	adds	r0, r4, #1
 8004778:	e799      	b.n	80046ae <get_fat+0x42>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800477a:	2f03      	cmp	r7, #3
 800477c:	d102      	bne.n	8004784 <get_fat+0x118>
 800477e:	6983      	ldr	r3, [r0, #24]
 8004780:	42b3      	cmp	r3, r6
 8004782:	d8f8      	bhi.n	8004776 <get_fat+0x10a>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004784:	69c3      	ldr	r3, [r0, #28]
 8004786:	b9b3      	cbnz	r3, 80047b6 <get_fat+0x14a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004788:	09e2      	lsrs	r2, r4, #7
 800478a:	4628      	mov	r0, r5
 800478c:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004790:	1852      	adds	r2, r2, r1
 8004792:	f143 0300 	adc.w	r3, r3, #0
 8004796:	f7ff fea1 	bl	80044dc <move_window>
 800479a:	2800      	cmp	r0, #0
 800479c:	d185      	bne.n	80046aa <get_fat+0x3e>
						val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800479e:	00a0      	lsls	r0, r4, #2
 80047a0:	3560      	adds	r5, #96	@ 0x60
 80047a2:	f400 70fe 	and.w	r0, r0, #508	@ 0x1fc
 80047a6:	4428      	add	r0, r5
 80047a8:	f7ff fd8d 	bl	80042c6 <ld_32>
 80047ac:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80047b0:	e77d      	b.n	80046ae <get_fat+0x42>
 80047b2:	2001      	movs	r0, #1
 80047b4:	e77b      	b.n	80046ae <get_fat+0x42>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80047b6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
	return val;
 80047ba:	e778      	b.n	80046ae <get_fat+0x42>

080047bc <dir_sdi>:
{
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80047c0:	6805      	ldr	r5, [r0, #0]
{
 80047c2:	4604      	mov	r4, r0
 80047c4:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80047c6:	782b      	ldrb	r3, [r5, #0]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	bf14      	ite	ne
 80047cc:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 80047d0:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 80047d4:	428a      	cmp	r2, r1
 80047d6:	d802      	bhi.n	80047de <dir_sdi+0x22>
		return FR_INT_ERR;
 80047d8:	2002      	movs	r0, #2
}
 80047da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80047de:	06ca      	lsls	r2, r1, #27
 80047e0:	d1fa      	bne.n	80047d8 <dir_sdi+0x1c>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80047e2:	6887      	ldr	r7, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 80047e4:	6301      	str	r1, [r0, #48]	@ 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80047e6:	bb5f      	cbnz	r7, 8004840 <dir_sdi+0x84>
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d819      	bhi.n	8004820 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80047ec:	892b      	ldrh	r3, [r5, #8]
 80047ee:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 80047f2:	d9f1      	bls.n	80047d8 <dir_sdi+0x1c>
		dp->sect = fs->dirbase;
 80047f4:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
	if (dp->sect == 0) return FR_INT_ERR;
 80047f8:	ea50 0301 	orrs.w	r3, r0, r1
	dp->clust = clst;					/* Current cluster# */
 80047fc:	6367      	str	r7, [r4, #52]	@ 0x34
		dp->sect = fs->dirbase;
 80047fe:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
	if (dp->sect == 0) return FR_INT_ERR;
 8004802:	d0e9      	beq.n	80047d8 <dir_sdi+0x1c>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004804:	0a73      	lsrs	r3, r6, #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004806:	3560      	adds	r5, #96	@ 0x60
 8004808:	f3c6 0608 	ubfx	r6, r6, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800480c:	181b      	adds	r3, r3, r0
	return FR_OK;
 800480e:	f04f 0000 	mov.w	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004812:	4435      	add	r5, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004814:	f141 0100 	adc.w	r1, r1, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004818:	6425      	str	r5, [r4, #64]	@ 0x40
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800481a:	e9c4 310e 	strd	r3, r1, [r4, #56]	@ 0x38
	return FR_OK;
 800481e:	e7dc      	b.n	80047da <dir_sdi+0x1e>
		clst = (DWORD)fs->dirbase;
 8004820:	6bab      	ldr	r3, [r5, #56]	@ 0x38
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004822:	71c7      	strb	r7, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0e1      	beq.n	80047ec <dir_sdi+0x30>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004828:	f8b5 800a 	ldrh.w	r8, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800482c:	461f      	mov	r7, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800482e:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004832:	4546      	cmp	r6, r8
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004834:	4639      	mov	r1, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 8004836:	d205      	bcs.n	8004844 <dir_sdi+0x88>
		dp->sect = clst2sect(fs, clst);
 8004838:	4628      	mov	r0, r5
 800483a:	f7ff fd79 	bl	8004330 <clst2sect>
 800483e:	e7db      	b.n	80047f8 <dir_sdi+0x3c>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004840:	463b      	mov	r3, r7
 8004842:	e7f1      	b.n	8004828 <dir_sdi+0x6c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004844:	4620      	mov	r0, r4
 8004846:	f7ff ff11 	bl	800466c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800484a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800484c:	4607      	mov	r7, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800484e:	d007      	beq.n	8004860 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004850:	2801      	cmp	r0, #1
 8004852:	d9c1      	bls.n	80047d8 <dir_sdi+0x1c>
 8004854:	69ab      	ldr	r3, [r5, #24]
 8004856:	4283      	cmp	r3, r0
 8004858:	d9be      	bls.n	80047d8 <dir_sdi+0x1c>
			ofs -= csz;
 800485a:	eba6 0608 	sub.w	r6, r6, r8
 800485e:	e7e8      	b.n	8004832 <dir_sdi+0x76>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004860:	2001      	movs	r0, #1
 8004862:	e7ba      	b.n	80047da <dir_sdi+0x1e>

08004864 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004864:	2901      	cmp	r1, #1
{
 8004866:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800486a:	4605      	mov	r5, r0
 800486c:	460c      	mov	r4, r1
 800486e:	4616      	mov	r6, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004870:	d908      	bls.n	8004884 <put_fat+0x20>
 8004872:	6983      	ldr	r3, [r0, #24]
 8004874:	428b      	cmp	r3, r1
 8004876:	d905      	bls.n	8004884 <put_fat+0x20>
		switch (fs->fs_type) {
 8004878:	7803      	ldrb	r3, [r0, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d067      	beq.n	800494e <put_fat+0xea>
 800487e:	d803      	bhi.n	8004888 <put_fat+0x24>
 8004880:	2b01      	cmp	r3, #1
 8004882:	d023      	beq.n	80048cc <put_fat+0x68>
	FRESULT res = FR_INT_ERR;
 8004884:	2002      	movs	r0, #2
 8004886:	e077      	b.n	8004978 <put_fat+0x114>
		switch (fs->fs_type) {
 8004888:	3b03      	subs	r3, #3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d8fa      	bhi.n	8004884 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800488e:	09ca      	lsrs	r2, r1, #7
 8004890:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	@ 0x30
 8004894:	1852      	adds	r2, r2, r1
 8004896:	f143 0300 	adc.w	r3, r3, #0
 800489a:	f7ff fe1f 	bl	80044dc <move_window>
			if (res != FR_OK) break;
 800489e:	2800      	cmp	r0, #0
 80048a0:	d16a      	bne.n	8004978 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80048a2:	462b      	mov	r3, r5
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80048a4:	00a4      	lsls	r4, r4, #2
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80048a6:	f813 2b60 	ldrb.w	r2, [r3], #96
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80048aa:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80048ae:	2a04      	cmp	r2, #4
 80048b0:	d007      	beq.n	80048c2 <put_fat+0x5e>
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80048b2:	1918      	adds	r0, r3, r4
 80048b4:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
 80048b8:	f7ff fd05 	bl	80042c6 <ld_32>
 80048bc:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 80048c0:	4306      	orrs	r6, r0
			st_32(fs->win + clst * 4 % SS(fs), val);
 80048c2:	4631      	mov	r1, r6
 80048c4:	1918      	adds	r0, r3, r4
 80048c6:	f7ff fd04 	bl	80042d2 <st_32>
 80048ca:	e034      	b.n	8004936 <put_fat+0xd2>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80048cc:	eb01 0951 	add.w	r9, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048d0:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	@ 0x30
 80048d4:	ea4f 2259 	mov.w	r2, r9, lsr #9
 80048d8:	1852      	adds	r2, r2, r1
 80048da:	f143 0300 	adc.w	r3, r3, #0
 80048de:	f7ff fdfd 	bl	80044dc <move_window>
			if (res != FR_OK) break;
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d148      	bne.n	8004978 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80048e6:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 80048ea:	f105 0860 	add.w	r8, r5, #96	@ 0x60
 80048ee:	f109 0701 	add.w	r7, r9, #1
 80048f2:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80048f6:	b2f3      	uxtb	r3, r6
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048f8:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80048fa:	bf1e      	ittt	ne
 80048fc:	f818 2009 	ldrbne.w	r2, [r8, r9]
 8004900:	f002 020f 	andne.w	r2, r2, #15
 8004904:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004908:	ea4f 2257 	mov.w	r2, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800490c:	bf18      	it	ne
 800490e:	b2db      	uxtbne	r3, r3
 8004910:	f808 3009 	strb.w	r3, [r8, r9]
			fs->wflag = 1;
 8004914:	2301      	movs	r3, #1
 8004916:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004918:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 800491c:	1852      	adds	r2, r2, r1
 800491e:	f143 0300 	adc.w	r3, r3, #0
 8004922:	f7ff fddb 	bl	80044dc <move_window>
			if (res != FR_OK) break;
 8004926:	bb38      	cbnz	r0, 8004978 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
 8004928:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800492c:	b13c      	cbz	r4, 800493e <put_fat+0xda>
 800492e:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8004932:	f808 6007 	strb.w	r6, [r8, r7]
			fs->wflag = 1;
 8004936:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004938:	2000      	movs	r0, #0
			fs->wflag = 1;
 800493a:	712b      	strb	r3, [r5, #4]
			break;
 800493c:	e01c      	b.n	8004978 <put_fat+0x114>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800493e:	f818 3007 	ldrb.w	r3, [r8, r7]
 8004942:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8004946:	f023 030f 	bic.w	r3, r3, #15
 800494a:	431e      	orrs	r6, r3
 800494c:	e7f1      	b.n	8004932 <put_fat+0xce>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800494e:	0a0a      	lsrs	r2, r1, #8
 8004950:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	@ 0x30
 8004954:	1852      	adds	r2, r2, r1
 8004956:	f143 0300 	adc.w	r3, r3, #0
 800495a:	f7ff fdbf 	bl	80044dc <move_window>
			if (res != FR_OK) break;
 800495e:	b958      	cbnz	r0, 8004978 <put_fat+0x114>
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004960:	0064      	lsls	r4, r4, #1
 8004962:	f105 0360 	add.w	r3, r5, #96	@ 0x60
 8004966:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800496a:	551e      	strb	r6, [r3, r4]
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800496c:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800496e:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 8004972:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8004974:	7056      	strb	r6, [r2, #1]
			fs->wflag = 1;
 8004976:	712b      	strb	r3, [r5, #4]
}
 8004978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800497c <fill_last_frag>:
{
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	460e      	mov	r6, r1
 8004982:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8004984:	69e3      	ldr	r3, [r4, #28]
 8004986:	b90b      	cbnz	r3, 800498c <fill_last_frag+0x10>
	return FR_OK;
 8004988:	4618      	mov	r0, r3
}
 800498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800498c:	2b01      	cmp	r3, #1
 800498e:	eba6 0503 	sub.w	r5, r6, r3
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	bf14      	ite	ne
 8004996:	1caa      	addne	r2, r5, #2
 8004998:	463a      	moveq	r2, r7
 800499a:	1c69      	adds	r1, r5, #1
 800499c:	f7ff ff62 	bl	8004864 <put_fat>
		if (res != FR_OK) return res;
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d1f2      	bne.n	800498a <fill_last_frag+0xe>
		obj->n_frag--;
 80049a4:	69e3      	ldr	r3, [r4, #28]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	61e3      	str	r3, [r4, #28]
 80049aa:	e7eb      	b.n	8004984 <fill_last_frag+0x8>

080049ac <fill_first_frag>:
{
 80049ac:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80049ae:	79c3      	ldrb	r3, [r0, #7]
{
 80049b0:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d001      	beq.n	80049ba <fill_first_frag+0xe>
	return FR_OK;
 80049b6:	2000      	movs	r0, #0
}
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80049ba:	6881      	ldr	r1, [r0, #8]
 80049bc:	6983      	ldr	r3, [r0, #24]
 80049be:	18cd      	adds	r5, r1, r3
 80049c0:	42a9      	cmp	r1, r5
 80049c2:	d102      	bne.n	80049ca <fill_first_frag+0x1e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80049c4:	2300      	movs	r3, #0
 80049c6:	71e3      	strb	r3, [r4, #7]
 80049c8:	e7f5      	b.n	80049b6 <fill_first_frag+0xa>
			res = put_fat(obj->fs, cl, cl + 1);
 80049ca:	1c4e      	adds	r6, r1, #1
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	4632      	mov	r2, r6
 80049d0:	f7ff ff48 	bl	8004864 <put_fat>
			if (res != FR_OK) return res;
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d1ef      	bne.n	80049b8 <fill_first_frag+0xc>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80049d8:	4631      	mov	r1, r6
 80049da:	e7f1      	b.n	80049c0 <fill_first_frag+0x14>

080049dc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80049dc:	2901      	cmp	r1, #1
{
 80049de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e2:	4606      	mov	r6, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	4617      	mov	r7, r2
	FATFS *fs = obj->fs;
 80049e8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80049ea:	d802      	bhi.n	80049f2 <remove_chain+0x16>
 80049ec:	2002      	movs	r0, #2
}
 80049ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80049f2:	69ab      	ldr	r3, [r5, #24]
 80049f4:	428b      	cmp	r3, r1
 80049f6:	d9f9      	bls.n	80049ec <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80049f8:	b97a      	cbnz	r2, 8004a1a <remove_chain+0x3e>
{
 80049fa:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80049fc:	4621      	mov	r1, r4
 80049fe:	4630      	mov	r0, r6
 8004a00:	46a0      	mov	r8, r4
 8004a02:	f7ff fe33 	bl	800466c <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8004a06:	4604      	mov	r4, r0
 8004a08:	b9b0      	cbnz	r0, 8004a38 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
 8004a0a:	782b      	ldrb	r3, [r5, #0]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d102      	bne.n	8004a16 <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	d144      	bne.n	8004a9e <remove_chain+0xc2>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8004a14:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
 8004a16:	2000      	movs	r0, #0
 8004a18:	e7e9      	b.n	80049ee <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a1a:	782b      	ldrb	r3, [r5, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d102      	bne.n	8004a26 <remove_chain+0x4a>
 8004a20:	79c3      	ldrb	r3, [r0, #7]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d0e9      	beq.n	80049fa <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a26:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f7ff ff19 	bl	8004864 <put_fat>
		if (res != FR_OK) return res;
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d0e1      	beq.n	80049fa <remove_chain+0x1e>
 8004a36:	e7da      	b.n	80049ee <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a38:	2801      	cmp	r0, #1
 8004a3a:	d0d7      	beq.n	80049ec <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a3c:	1c42      	adds	r2, r0, #1
 8004a3e:	d101      	bne.n	8004a44 <remove_chain+0x68>
 8004a40:	2001      	movs	r0, #1
 8004a42:	e7d4      	b.n	80049ee <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004a44:	782b      	ldrb	r3, [r5, #0]
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d110      	bne.n	8004a6c <remove_chain+0x90>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8004a4a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004a4e:	3a02      	subs	r2, #2
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d313      	bcc.n	8004a7c <remove_chain+0xa0>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8004a54:	f108 0201 	add.w	r2, r8, #1
 8004a58:	42a2      	cmp	r2, r4
 8004a5a:	d003      	beq.n	8004a64 <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
 8004a5c:	782b      	ldrb	r3, [r5, #0]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d013      	beq.n	8004a8a <remove_chain+0xae>
			scl = ecl = nxt;
 8004a62:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8004a64:	69ab      	ldr	r3, [r5, #24]
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	d8c8      	bhi.n	80049fc <remove_chain+0x20>
 8004a6a:	e7ce      	b.n	8004a0a <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4641      	mov	r1, r8
 8004a70:	4628      	mov	r0, r5
 8004a72:	f7ff fef7 	bl	8004864 <put_fat>
			if (res != FR_OK) return res;
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d0e7      	beq.n	8004a4a <remove_chain+0x6e>
 8004a7a:	e7b8      	b.n	80049ee <remove_chain+0x12>
			fs->free_clst++;
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8004a80:	796b      	ldrb	r3, [r5, #5]
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	716b      	strb	r3, [r5, #5]
 8004a88:	e7e4      	b.n	8004a54 <remove_chain+0x78>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	eba2 0209 	sub.w	r2, r2, r9
 8004a90:	4649      	mov	r1, r9
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7ff fda8 	bl	80045e8 <change_bitmap>
				if (res != FR_OK) return res;
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d0e2      	beq.n	8004a62 <remove_chain+0x86>
 8004a9c:	e7a7      	b.n	80049ee <remove_chain+0x12>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8004a9e:	79f3      	ldrb	r3, [r6, #7]
 8004aa0:	b98b      	cbnz	r3, 8004ac6 <remove_chain+0xea>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8004aa2:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
 8004aa4:	42bc      	cmp	r4, r7
 8004aa6:	d102      	bne.n	8004aae <remove_chain+0xd2>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	71f3      	strb	r3, [r6, #7]
 8004aac:	e7b3      	b.n	8004a16 <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff fddb 	bl	800466c <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 8004ab6:	2801      	cmp	r0, #1
 8004ab8:	d998      	bls.n	80049ec <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d0c0      	beq.n	8004a40 <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8004abe:	3401      	adds	r4, #1
 8004ac0:	4284      	cmp	r4, r0
 8004ac2:	d0ef      	beq.n	8004aa4 <remove_chain+0xc8>
 8004ac4:	e7a7      	b.n	8004a16 <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d1a5      	bne.n	8004a16 <remove_chain+0x3a>
 8004aca:	68b3      	ldr	r3, [r6, #8]
 8004acc:	42bb      	cmp	r3, r7
 8004ace:	d8a2      	bhi.n	8004a16 <remove_chain+0x3a>
 8004ad0:	69b2      	ldr	r2, [r6, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	42bb      	cmp	r3, r7
 8004ad6:	d2e7      	bcs.n	8004aa8 <remove_chain+0xcc>
 8004ad8:	e79d      	b.n	8004a16 <remove_chain+0x3a>

08004ada <dir_clear>:
{
 8004ada:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ade:	4607      	mov	r7, r0
 8004ae0:	460d      	mov	r5, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ae2:	f7ff fca9 	bl	8004438 <sync_window>
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	bb50      	cbnz	r0, 8004b40 <dir_clear+0x66>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004aea:	f107 0860 	add.w	r8, r7, #96	@ 0x60
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004aee:	4629      	mov	r1, r5
 8004af0:	4638      	mov	r0, r7
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004af2:	f04f 0901 	mov.w	r9, #1
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004af6:	f7ff fc1b 	bl	8004330 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004afe:	4605      	mov	r5, r0
 8004b00:	460e      	mov	r6, r1
	fs->winsect = sect;				/* Set window to top of the cluster */
 8004b02:	e9c7 0108 	strd	r0, r1, [r7, #32]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004b06:	4621      	mov	r1, r4
 8004b08:	4640      	mov	r0, r8
 8004b0a:	f00f ffcb 	bl	8014aa4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	429c      	cmp	r4, r3
 8004b12:	d306      	bcc.n	8004b22 <dir_clear+0x48>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004b14:	8978      	ldrh	r0, [r7, #10]
 8004b16:	1b00      	subs	r0, r0, r4
 8004b18:	bf18      	it	ne
 8004b1a:	2001      	movne	r0, #1
}
 8004b1c:	b003      	add	sp, #12
 8004b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004b22:	462a      	mov	r2, r5
 8004b24:	4633      	mov	r3, r6
 8004b26:	f8cd 9000 	str.w	r9, [sp]
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	7878      	ldrb	r0, [r7, #1]
 8004b2e:	f7ff fbb7 	bl	80042a0 <disk_write>
 8004b32:	3501      	adds	r5, #1
 8004b34:	f146 0600 	adc.w	r6, r6, #0
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1eb      	bne.n	8004b14 <dir_clear+0x3a>
 8004b3c:	3401      	adds	r4, #1
 8004b3e:	e7e6      	b.n	8004b0e <dir_clear+0x34>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004b40:	2001      	movs	r0, #1
 8004b42:	e7eb      	b.n	8004b1c <dir_clear+0x42>

08004b44 <sync_fs>:
{
 8004b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b46:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004b48:	f7ff fc76 	bl	8004438 <sync_window>
 8004b4c:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d14a      	bne.n	8004be8 <sync_fs+0xa4>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 8004b52:	7967      	ldrb	r7, [r4, #5]
 8004b54:	2f01      	cmp	r7, #1
 8004b56:	d13f      	bne.n	8004bd8 <sync_fs+0x94>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8004b58:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 8004b5a:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d145      	bne.n	8004bec <sync_fs+0xa8>
				memset(fs->win, 0, sizeof fs->win);
 8004b60:	f104 0660 	add.w	r6, r4, #96	@ 0x60
 8004b64:	4601      	mov	r1, r0
 8004b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f00f ff9a 	bl	8014aa4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8004b70:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8004b72:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004b74:	2172      	movs	r1, #114	@ 0x72
 8004b76:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004b7a:	f504 7012 	add.w	r0, r4, #584	@ 0x248
	*ptr++ = (BYTE)val; val >>= 8;
 8004b7e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004b82:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8004b84:	f884 2063 	strb.w	r2, [r4, #99]	@ 0x63
	*ptr++ = (BYTE)val; val >>= 8;
 8004b88:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
	*ptr++ = (BYTE)val;
 8004b8c:	f884 3247 	strb.w	r3, [r4, #583]	@ 0x247
	*ptr++ = (BYTE)val; val >>= 8;
 8004b90:	f884 1244 	strb.w	r1, [r4, #580]	@ 0x244
	*ptr++ = (BYTE)val; val >>= 8;
 8004b94:	f884 1245 	strb.w	r1, [r4, #581]	@ 0x245
	*ptr++ = (BYTE)val; val >>= 8;
 8004b98:	f884 2246 	strb.w	r2, [r4, #582]	@ 0x246
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004b9c:	6961      	ldr	r1, [r4, #20]
 8004b9e:	f7ff fb98 	bl	80042d2 <st_32>
				st_32(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8004ba2:	6921      	ldr	r1, [r4, #16]
 8004ba4:	f504 7013 	add.w	r0, r4, #588	@ 0x24c
 8004ba8:	f7ff fb93 	bl	80042d2 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8004bac:	2355      	movs	r3, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 8004bae:	f884 525c 	strb.w	r5, [r4, #604]	@ 0x25c
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8004bb2:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8004bb4:	f884 325e 	strb.w	r3, [r4, #606]	@ 0x25e
	*ptr++ = (BYTE)val;
 8004bb8:	23aa      	movs	r3, #170	@ 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 8004bba:	f884 525d 	strb.w	r5, [r4, #605]	@ 0x25d
	*ptr++ = (BYTE)val;
 8004bbe:	f884 325f 	strb.w	r3, [r4, #607]	@ 0x25f
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8004bc2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8004bc6:	3201      	adds	r2, #1
 8004bc8:	f143 0300 	adc.w	r3, r3, #0
 8004bcc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8004bd0:	9700      	str	r7, [sp, #0]
 8004bd2:	7860      	ldrb	r0, [r4, #1]
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004bd4:	f7ff fb64 	bl	80042a0 <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004bd8:	2200      	movs	r2, #0
 8004bda:	7860      	ldrb	r0, [r4, #1]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	f7ff fb69 	bl	80042b4 <disk_ioctl>
 8004be2:	3800      	subs	r0, #0
 8004be4:	bf18      	it	ne
 8004be6:	2001      	movne	r0, #1
}
 8004be8:	b003      	add	sp, #12
 8004bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8004bec:	2b04      	cmp	r3, #4
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 8004bee:	7860      	ldrb	r0, [r4, #1]
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8004bf0:	d1f2      	bne.n	8004bd8 <sync_fs+0x94>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 8004bf2:	f104 0560 	add.w	r5, r4, #96	@ 0x60
 8004bf6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8004c00:	9700      	str	r7, [sp, #0]
 8004c02:	f7ff fb43 	bl	800428c <disk_read>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d1e5      	bne.n	8004bd8 <sync_fs+0x94>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 8004c0c:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8004c10:	3a02      	subs	r2, #2
 8004c12:	4291      	cmp	r1, r2
 8004c14:	d813      	bhi.n	8004c3e <sync_fs+0xfa>
 8004c16:	1a51      	subs	r1, r2, r1
 8004c18:	2064      	movs	r0, #100	@ 0x64
 8004c1a:	fba1 0100 	umull	r0, r1, r1, r0
 8004c1e:	f7fb fb77 	bl	8000310 <__aeabi_uldivmod>
 8004c22:	b2c3      	uxtb	r3, r0
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8004c24:	f894 20d0 	ldrb.w	r2, [r4, #208]	@ 0xd0
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004c28:	7860      	ldrb	r0, [r4, #1]
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d0d4      	beq.n	8004bd8 <sync_fs+0x94>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 8004c2e:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004c32:	2301      	movs	r3, #1
 8004c34:	4629      	mov	r1, r5
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8004c3c:	e7ca      	b.n	8004bd4 <sync_fs+0x90>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 8004c3e:	23ff      	movs	r3, #255	@ 0xff
 8004c40:	e7f0      	b.n	8004c24 <sync_fs+0xe0>
	...

08004c44 <mount_volume>:
	*rfs = 0;
 8004c44:	2300      	movs	r3, #0
{
 8004c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	b085      	sub	sp, #20
	*rfs = 0;
 8004c4c:	600b      	str	r3, [r1, #0]
{
 8004c4e:	460e      	mov	r6, r1
 8004c50:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8004c52:	f7ff fba2 	bl	800439a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f2c0 8262 	blt.w	8005120 <mount_volume+0x4dc>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8004c5c:	4bbd      	ldr	r3, [pc, #756]	@ (8004f54 <mount_volume+0x310>)
 8004c5e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	f000 825e 	beq.w	8005124 <mount_volume+0x4e0>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8004c68:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004c6a:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8004c6e:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 8004c70:	7860      	ldrb	r0, [r4, #1]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8004c72:	b16b      	cbz	r3, 8004c90 <mount_volume+0x4c>
		stat = disk_status(fs->pdrv);
 8004c74:	f7ff fafe 	bl	8004274 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004c78:	07c3      	lsls	r3, r0, #31
 8004c7a:	d409      	bmi.n	8004c90 <mount_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	f000 8180 	beq.w	8004f82 <mount_volume+0x33e>
 8004c82:	0747      	lsls	r7, r0, #29
 8004c84:	f140 817d 	bpl.w	8004f82 <mount_volume+0x33e>
				return FR_WRITE_PROTECTED;
 8004c88:	200a      	movs	r0, #10
}
 8004c8a:	b005      	add	sp, #20
 8004c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8004c90:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8004c92:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8004c94:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8004c96:	f7ff faf3 	bl	8004280 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004c9a:	07c6      	lsls	r6, r0, #31
 8004c9c:	f100 8244 	bmi.w	8005128 <mount_volume+0x4e4>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004ca0:	b10d      	cbz	r5, 8004ca6 <mount_volume+0x62>
 8004ca2:	0741      	lsls	r1, r0, #29
 8004ca4:	d4f0      	bmi.n	8004c88 <mount_volume+0x44>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fc38 	bl	8004520 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8004cb0:	2802      	cmp	r0, #2
 8004cb2:	f040 8118 	bne.w	8004ee6 <mount_volume+0x2a2>
	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
 8004cb6:	f894 3222 	ldrb.w	r3, [r4, #546]	@ 0x222
 8004cba:	2bee      	cmp	r3, #238	@ 0xee
 8004cbc:	f040 80f0 	bne.w	8004ea0 <mount_volume+0x25c>
		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff fc09 	bl	80044dc <move_window>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f040 8107 	bne.w	8004ede <mount_volume+0x29a>
		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
 8004cd0:	f104 0760 	add.w	r7, r4, #96	@ 0x60
	if (memcmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1", 12)) return 0;	/* Check signature and version (1.0) */
 8004cd4:	220c      	movs	r2, #12
 8004cd6:	49a0      	ldr	r1, [pc, #640]	@ (8004f58 <mount_volume+0x314>)
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f00f feb9 	bl	8014a50 <memcmp>
 8004cde:	4605      	mov	r5, r0
 8004ce0:	bbc8      	cbnz	r0, 8004d56 <mount_volume+0x112>
	hlen = ld_32(gpth + GPTH_Size);							/* Check header size */
 8004ce2:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8004ce6:	f7ff faee 	bl	80042c6 <ld_32>
	if (hlen < 92 || hlen > FF_MIN_SS) return 0;
 8004cea:	f1a0 035c 	sub.w	r3, r0, #92	@ 0x5c
	hlen = ld_32(gpth + GPTH_Size);							/* Check header size */
 8004cee:	4606      	mov	r6, r0
	if (hlen < 92 || hlen > FF_MIN_SS) return 0;
 8004cf0:	f5b3 7fd2 	cmp.w	r3, #420	@ 0x1a4
 8004cf4:	d82f      	bhi.n	8004d56 <mount_volume+0x112>
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 8004cfa:	f1a5 0210 	sub.w	r2, r5, #16
 8004cfe:	4618      	mov	r0, r3
 8004d00:	2a03      	cmp	r2, #3
 8004d02:	bf88      	it	hi
 8004d04:	5d79      	ldrbhi	r1, [r7, r5]
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8004d06:	f105 0501 	add.w	r5, r5, #1
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 8004d0a:	bf98      	it	ls
 8004d0c:	2100      	movls	r1, #0
 8004d0e:	f7ff fb61 	bl	80043d4 <crc32>
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8004d12:	42ae      	cmp	r6, r5
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 8004d14:	4603      	mov	r3, r0
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8004d16:	d1f0      	bne.n	8004cfa <mount_volume+0xb6>
	if (~bcc != ld_32(gpth + GPTH_Bcc)) return 0;
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8004d1e:	f7ff fad2 	bl	80042c6 <ld_32>
 8004d22:	4283      	cmp	r3, r0
 8004d24:	d117      	bne.n	8004d56 <mount_volume+0x112>
	if (ld_32(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes) */
 8004d26:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8004d2a:	f7ff facc 	bl	80042c6 <ld_32>
 8004d2e:	2880      	cmp	r0, #128	@ 0x80
 8004d30:	d111      	bne.n	8004d56 <mount_volume+0x112>
	if (ld_32(gpth + GPTH_PtNum) > 128) return 0;			/* Table size (must be 128 entries or less) */
 8004d32:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 8004d36:	f7ff fac6 	bl	80042c6 <ld_32>
 8004d3a:	2880      	cmp	r0, #128	@ 0x80
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	d80a      	bhi.n	8004d56 <mount_volume+0x112>
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 8004d40:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 8004d44:	2500      	movs	r5, #0
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 8004d46:	f7ff fac0 	bl	80042ca <ld_64>
			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
 8004d4a:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004f60 <mount_volume+0x31c>
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 8004d4e:	4680      	mov	r8, r0
 8004d50:	4689      	mov	r9, r1
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 8004d52:	42b5      	cmp	r5, r6
 8004d54:	d101      	bne.n	8004d5a <mount_volume+0x116>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004d56:	200d      	movs	r0, #13
 8004d58:	e797      	b.n	8004c8a <mount_volume+0x46>
			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
 8004d5a:	f3c5 0296 	ubfx	r2, r5, #2, #23
 8004d5e:	4620      	mov	r0, r4
 8004d60:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
 8004d64:	eb12 0208 	adds.w	r2, r2, r8
 8004d68:	f149 0300 	adc.w	r3, r9, #0
 8004d6c:	f7ff fbb6 	bl	80044dc <move_window>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	f040 80b4 	bne.w	8004ede <mount_volume+0x29a>
			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
 8004d76:	f40b 7bc0 	and.w	fp, fp, #384	@ 0x180
			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	eb07 000b 	add.w	r0, r7, fp
 8004d82:	f00f fe65 	bl	8014a50 <memcmp>
 8004d86:	b108      	cbz	r0, 8004d8c <mount_volume+0x148>
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 8004d88:	3501      	adds	r5, #1
 8004d8a:	e7e2      	b.n	8004d52 <mount_volume+0x10e>
				fmt = check_fs(fs, ld_64(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
 8004d8c:	f10b 0020 	add.w	r0, fp, #32
 8004d90:	4438      	add	r0, r7
 8004d92:	f7ff fa9a 	bl	80042ca <ld_64>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7ff fbc0 	bl	8004520 <check_fs>
				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
 8004da0:	2801      	cmp	r0, #1
 8004da2:	d8f1      	bhi.n	8004d88 <mount_volume+0x144>
	if (fmt == 1) {
 8004da4:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8004da6:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
	if (fmt == 1) {
 8004daa:	f040 80ec 	bne.w	8004f86 <mount_volume+0x342>
 8004dae:	f104 016a 	add.w	r1, r4, #106	@ 0x6a
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8004db2:	230b      	movs	r3, #11
 8004db4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	d1cc      	bne.n	8004d56 <mount_volume+0x112>
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	2b40      	cmp	r3, #64	@ 0x40
 8004dc0:	d1f8      	bne.n	8004db4 <mount_volume+0x170>
		if (ld_16(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8004dc2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	@ 0xc8
 8004dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dca:	d1c4      	bne.n	8004d56 <mount_volume+0x112>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8004dcc:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 8004dd0:	2b09      	cmp	r3, #9
 8004dd2:	d1c0      	bne.n	8004d56 <mount_volume+0x112>
		maxlba = ld_64(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8004dd4:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
 8004dd8:	f7ff fa77 	bl	80042ca <ld_64>
 8004ddc:	4607      	mov	r7, r0
		fs->fsize = ld_32(fs->win + BPB_FatSzEx);		/* Number of sectors per FAT */
 8004dde:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8004de2:	f7ff fa70 	bl	80042c6 <ld_32>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8004de6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
		fs->fsize = ld_32(fs->win + BPB_FatSzEx);		/* Number of sectors per FAT */
 8004dea:	61e0      	str	r0, [r4, #28]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8004dec:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8004dee:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8004df0:	d1b1      	bne.n	8004d56 <mount_volume+0x112>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8004df2:	f894 00cd 	ldrb.w	r0, [r4, #205]	@ 0xcd
 8004df6:	4083      	lsls	r3, r0
 8004df8:	b298      	uxth	r0, r3
 8004dfa:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d0aa      	beq.n	8004d56 <mount_volume+0x112>
		nclst = ld_32(fs->win + BPB_NumClusEx);			/* Number of clusters */
 8004e00:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8004e04:	f7ff fa5f 	bl	80042c6 <ld_32>
 8004e08:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8004e0a:	4854      	ldr	r0, [pc, #336]	@ (8004f5c <mount_volume+0x318>)
 8004e0c:	4582      	cmp	sl, r0
 8004e0e:	d8a2      	bhi.n	8004d56 <mount_volume+0x112>
		fs->n_fatent = nclst + 2;
 8004e10:	f10a 0002 	add.w	r0, sl, #2
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8004e14:	b29b      	uxth	r3, r3
		fs->n_fatent = nclst + 2;
 8004e16:	61a0      	str	r0, [r4, #24]
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 8004e18:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8004e1c:	fb0a f303 	mul.w	r3, sl, r3
		fs->volbase = bsect;
 8004e20:	e9c4 250a 	strd	r2, r5, [r4, #40]	@ 0x28
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 8004e24:	f7ff fa4f 	bl	80042c6 <ld_32>
 8004e28:	eb10 0902 	adds.w	r9, r0, r2
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 8004e2c:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 8004e30:	f145 0800 	adc.w	r8, r5, #0
 8004e34:	e9c4 9810 	strd	r9, r8, [r4, #64]	@ 0x40
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 8004e38:	f7ff fa45 	bl	80042c6 <ld_32>
 8004e3c:	1880      	adds	r0, r0, r2
 8004e3e:	f145 0c00 	adc.w	ip, r5, #0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8004e42:	eb13 0309 	adds.w	r3, r3, r9
 8004e46:	f148 0800 	adc.w	r8, r8, #0
		maxlba = ld_64(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8004e4a:	18bf      	adds	r7, r7, r2
 8004e4c:	eb41 0105 	adc.w	r1, r1, r5
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8004e50:	429f      	cmp	r7, r3
 8004e52:	eb71 0108 	sbcs.w	r1, r1, r8
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 8004e56:	e9c4 0c0c 	strd	r0, ip, [r4, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8004e5a:	f4ff af7c 	bcc.w	8004d56 <mount_volume+0x112>
		so = i = 0;
 8004e5e:	4635      	mov	r5, r6
		fs->dirbase = ld_32(fs->win + BPB_RootClusEx);
 8004e60:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8004e64:	f7ff fa2f 	bl	80042c6 <ld_32>
 8004e68:	e9c4 060e 	strd	r0, r6, [r4, #56]	@ 0x38
			if (i == 0) {
 8004e6c:	b97d      	cbnz	r5, 8004e8e <mount_volume+0x24a>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8004e6e:	8963      	ldrh	r3, [r4, #10]
 8004e70:	42b3      	cmp	r3, r6
 8004e72:	f67f af70 	bls.w	8004d56 <mount_volume+0x112>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8004e76:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff fa59 	bl	8004330 <clst2sect>
 8004e7e:	1832      	adds	r2, r6, r0
 8004e80:	4620      	mov	r0, r4
 8004e82:	f141 0300 	adc.w	r3, r1, #0
 8004e86:	f7ff fb29 	bl	80044dc <move_window>
 8004e8a:	bb40      	cbnz	r0, 8004ede <mount_volume+0x29a>
				so++;
 8004e8c:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;		/* Is it a bitmap entry? */
 8004e8e:	1963      	adds	r3, r4, r5
 8004e90:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004e94:	2b81      	cmp	r3, #129	@ 0x81
 8004e96:	d02c      	beq.n	8004ef2 <mount_volume+0x2ae>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8004e98:	3520      	adds	r5, #32
 8004e9a:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
 8004e9e:	e7e5      	b.n	8004e6c <mount_volume+0x228>
 8004ea0:	466e      	mov	r6, sp
 8004ea2:	f204 2326 	addw	r3, r4, #550	@ 0x226
 8004ea6:	f204 2166 	addw	r1, r4, #614	@ 0x266
	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
 8004eaa:	4632      	mov	r2, r6
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8004eac:	4618      	mov	r0, r3
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8004eae:	3310      	adds	r3, #16
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8004eb0:	f7ff fa09 	bl	80042c6 <ld_32>
 8004eb4:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	d1f7      	bne.n	8004eac <mount_volume+0x268>
 8004ebc:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8004ebe:	f856 2b04 	ldr.w	r2, [r6], #4
 8004ec2:	b172      	cbz	r2, 8004ee2 <mount_volume+0x29e>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff fb2a 	bl	8004520 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8004ecc:	2801      	cmp	r0, #1
 8004ece:	f67f af69 	bls.w	8004da4 <mount_volume+0x160>
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	2d04      	cmp	r5, #4
 8004ed6:	d1f2      	bne.n	8004ebe <mount_volume+0x27a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8004ed8:	2804      	cmp	r0, #4
 8004eda:	f47f af3c 	bne.w	8004d56 <mount_volume+0x112>
 8004ede:	2001      	movs	r0, #1
 8004ee0:	e6d3      	b.n	8004c8a <mount_volume+0x46>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	e7f5      	b.n	8004ed2 <mount_volume+0x28e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8004ee6:	2804      	cmp	r0, #4
 8004ee8:	d0f9      	beq.n	8004ede <mount_volume+0x29a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004eea:	2801      	cmp	r0, #1
 8004eec:	f67f af5a 	bls.w	8004da4 <mount_volume+0x160>
 8004ef0:	e731      	b.n	8004d56 <mount_volume+0x112>
		bcl = ld_32(fs->win + i + 20);				/* Bitmap cluster */
 8004ef2:	f105 0014 	add.w	r0, r5, #20
 8004ef6:	f104 0660 	add.w	r6, r4, #96	@ 0x60
 8004efa:	4430      	add	r0, r6
 8004efc:	f7ff f9e3 	bl	80042c6 <ld_32>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8004f00:	2801      	cmp	r0, #1
		bcl = ld_32(fs->win + i + 20);				/* Bitmap cluster */
 8004f02:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8004f04:	f67f af27 	bls.w	8004d56 <mount_volume+0x112>
 8004f08:	69a3      	ldr	r3, [r4, #24]
 8004f0a:	4283      	cmp	r3, r0
 8004f0c:	f67f af23 	bls.w	8004d56 <mount_volume+0x112>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8004f10:	1e82      	subs	r2, r0, #2
 8004f12:	8963      	ldrh	r3, [r4, #10]
 8004f14:	4353      	muls	r3, r2
 8004f16:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	@ 0x40
 8004f1a:	185b      	adds	r3, r3, r1
 8004f1c:	f142 0200 	adc.w	r2, r2, #0
 8004f20:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8004f24:	e9d4 130c 	ldrd	r1, r3, [r4, #48]	@ 0x30
 8004f28:	09ea      	lsrs	r2, r5, #7
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	1852      	adds	r2, r2, r1
 8004f2e:	f143 0300 	adc.w	r3, r3, #0
 8004f32:	f7ff fad3 	bl	80044dc <move_window>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d1d0      	bne.n	8004ede <mount_volume+0x29a>
			cv = ld_32(fs->win + bcl % (SS(fs) / 4) * 4);
 8004f3c:	f005 007f 	and.w	r0, r5, #127	@ 0x7f
 8004f40:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8004f44:	f7ff f9bf 	bl	80042c6 <ld_32>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8004f48:	1c42      	adds	r2, r0, #1
 8004f4a:	d00b      	beq.n	8004f64 <mount_volume+0x320>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	42a8      	cmp	r0, r5
 8004f50:	d0e8      	beq.n	8004f24 <mount_volume+0x2e0>
 8004f52:	e700      	b.n	8004d56 <mount_volume+0x112>
 8004f54:	20004b6c 	.word	0x20004b6c
 8004f58:	080158d4 	.word	0x080158d4
 8004f5c:	7ffffffd 	.word	0x7ffffffd
 8004f60:	080184fd 	.word	0x080184fd
		fmt = FS_EXFAT;			/* FAT sub-type */
 8004f64:	2604      	movs	r6, #4
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 8004f66:	7163      	strb	r3, [r4, #5]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8004f68:	e9c4 0004 	strd	r0, r0, [r4, #16]
	fs->id = ++Fsid;		/* Volume mount ID */
 8004f6c:	4a6f      	ldr	r2, [pc, #444]	@ (800512c <mount_volume+0x4e8>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8004f6e:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8004f70:	8813      	ldrh	r3, [r2, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
 8004f78:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005130 <mount_volume+0x4ec>)
 8004f7c:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <mount_volume+0x4f0>)
 8004f80:	6523      	str	r3, [r4, #80]	@ 0x50
			return FR_OK;				/* The filesystem object is already valid */
 8004f82:	2000      	movs	r0, #0
 8004f84:	e681      	b.n	8004c8a <mount_volume+0x46>
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004f86:	f8b4 306b 	ldrh.w	r3, [r4, #107]	@ 0x6b
 8004f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f8e:	f47f aee2 	bne.w	8004d56 <mount_volume+0x112>
		fasize = ld_16(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004f92:	f8b4 7076 	ldrh.w	r7, [r4, #118]	@ 0x76
		if (fasize == 0) fasize = ld_32(fs->win + BPB_FATSz32);
 8004f96:	b927      	cbnz	r7, 8004fa2 <mount_volume+0x35e>
 8004f98:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 8004f9c:	f7ff f993 	bl	80042c6 <ld_32>
 8004fa0:	4607      	mov	r7, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004fa2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
		fs->fsize = fasize;
 8004fa6:	61e7      	str	r7, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004fa8:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004faa:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004fac:	2901      	cmp	r1, #1
 8004fae:	f63f aed2 	bhi.w	8004d56 <mount_volume+0x112>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004fb2:	f894 606d 	ldrb.w	r6, [r4, #109]	@ 0x6d
 8004fb6:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004fb8:	2e00      	cmp	r6, #0
 8004fba:	f43f aecc 	beq.w	8004d56 <mount_volume+0x112>
 8004fbe:	1e71      	subs	r1, r6, #1
 8004fc0:	4231      	tst	r1, r6
 8004fc2:	f47f aec8 	bne.w	8004d56 <mount_volume+0x112>
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fc6:	f8b4 8071 	ldrh.w	r8, [r4, #113]	@ 0x71
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004fca:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fce:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004fd2:	f47f aec0 	bne.w	8004d56 <mount_volume+0x112>
		tsect = ld_16(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8004fd6:	f8b4 0073 	ldrh.w	r0, [r4, #115]	@ 0x73
		if (tsect == 0) tsect = ld_32(fs->win + BPB_TotSec32);
 8004fda:	b918      	cbnz	r0, 8004fe4 <mount_volume+0x3a0>
 8004fdc:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8004fe0:	f7ff f971 	bl	80042c6 <ld_32>
		nrsv = ld_16(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004fe4:	f8b4 906e 	ldrh.w	r9, [r4, #110]	@ 0x6e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004fe8:	f1b9 0f00 	cmp.w	r9, #0
 8004fec:	f43f aeb3 	beq.w	8004d56 <mount_volume+0x112>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004ff0:	fb07 fc03 	mul.w	ip, r7, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004ff4:	eb09 1e18 	add.w	lr, r9, r8, lsr #4
 8004ff8:	44e6      	add	lr, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004ffa:	4570      	cmp	r0, lr
 8004ffc:	f4ff aeab 	bcc.w	8004d56 <mount_volume+0x112>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005000:	eba0 010e 	sub.w	r1, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005004:	42b1      	cmp	r1, r6
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005006:	fbb1 f3f6 	udiv	r3, r1, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800500a:	f4ff aea4 	bcc.w	8004d56 <mount_volume+0x112>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800500e:	494a      	ldr	r1, [pc, #296]	@ (8005138 <mount_volume+0x4f4>)
 8005010:	428b      	cmp	r3, r1
 8005012:	f63f aea0 	bhi.w	8004d56 <mount_volume+0x112>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005016:	f64f 71f5 	movw	r1, #65525	@ 0xfff5
 800501a:	428b      	cmp	r3, r1
 800501c:	d86b      	bhi.n	80050f6 <mount_volume+0x4b2>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800501e:	f640 76f5 	movw	r6, #4085	@ 0xff5
 8005022:	42b3      	cmp	r3, r6
 8005024:	bf8c      	ite	hi
 8005026:	2602      	movhi	r6, #2
 8005028:	2601      	movls	r6, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800502a:	eb19 0002 	adds.w	r0, r9, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800502e:	f103 0302 	add.w	r3, r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005032:	f145 0100 	adc.w	r1, r5, #0
		fs->database = bsect + sysect;					/* Data start sector */
 8005036:	eb1e 0e02 	adds.w	lr, lr, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800503a:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800503c:	f145 0900 	adc.w	r9, r5, #0
		if (fmt == FS_FAT32) {
 8005040:	2e03      	cmp	r6, #3
		fs->volbase = bsect;							/* Volume start sector */
 8005042:	e9c4 250a 	strd	r2, r5, [r4, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005046:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800504a:	e9c4 e910 	strd	lr, r9, [r4, #64]	@ 0x40
		if (fmt == FS_FAT32) {
 800504e:	d154      	bne.n	80050fa <mount_volume+0x4b6>
			if (ld_16(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005050:	f8b4 108a 	ldrh.w	r1, [r4, #138]	@ 0x8a
 8005054:	ea58 0101 	orrs.w	r1, r8, r1
 8005058:	f47f ae7d 	bne.w	8004d56 <mount_volume+0x112>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800505c:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800505e:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8005062:	f7ff f930 	bl	80042c6 <ld_32>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005066:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800506a:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800506e:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005072:	f4ff ae70 	bcc.w	8004d56 <mount_volume+0x112>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32
 800507a:	2e03      	cmp	r6, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800507c:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8005080:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8005084:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 8005086:	f47f af71 	bne.w	8004f6c <mount_volume+0x328>
			&& ld_16(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 800508a:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 800508e:	2b01      	cmp	r3, #1
 8005090:	f47f af6c 	bne.w	8004f6c <mount_volume+0x328>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005094:	3201      	adds	r2, #1
 8005096:	4620      	mov	r0, r4
 8005098:	f145 0300 	adc.w	r3, r5, #0
 800509c:	f7ff fa1e 	bl	80044dc <move_window>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	f47f af63 	bne.w	8004f6c <mount_volume+0x328>
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 80050a6:	4b25      	ldr	r3, [pc, #148]	@ (800513c <mount_volume+0x4f8>)
			fs->fsi_flag = 0;
 80050a8:	7160      	strb	r0, [r4, #5]
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 80050aa:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80050ae:	f7ff f90a 	bl	80042c6 <ld_32>
 80050b2:	4298      	cmp	r0, r3
 80050b4:	f47f af5a 	bne.w	8004f6c <mount_volume+0x328>
				&& ld_32(fs->win + FSI_StrucSig) == 0x61417272
 80050b8:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 80050bc:	f504 7011 	add.w	r0, r4, #580	@ 0x244
 80050c0:	f7ff f901 	bl	80042c6 <ld_32>
 80050c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80050c8:	3320      	adds	r3, #32
 80050ca:	4298      	cmp	r0, r3
 80050cc:	f47f af4e 	bne.w	8004f6c <mount_volume+0x328>
				&& ld_32(fs->win + FSI_TrailSig) == 0xAA550000)
 80050d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <mount_volume+0x4fc>)
 80050d2:	f504 7017 	add.w	r0, r4, #604	@ 0x25c
 80050d6:	f7ff f8f6 	bl	80042c6 <ld_32>
 80050da:	4298      	cmp	r0, r3
 80050dc:	f47f af46 	bne.w	8004f6c <mount_volume+0x328>
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 80050e0:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 80050e4:	f7ff f8ef 	bl	80042c6 <ld_32>
 80050e8:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 80050ea:	f504 7013 	add.w	r0, r4, #588	@ 0x24c
 80050ee:	f7ff f8ea 	bl	80042c6 <ld_32>
 80050f2:	6120      	str	r0, [r4, #16]
 80050f4:	e73a      	b.n	8004f6c <mount_volume+0x328>
 80050f6:	2603      	movs	r6, #3
 80050f8:	e797      	b.n	800502a <mount_volume+0x3e6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80050fa:	f1b8 0f00 	cmp.w	r8, #0
 80050fe:	f43f ae2a 	beq.w	8004d56 <mount_volume+0x112>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005102:	eb1c 0000 	adds.w	r0, ip, r0
 8005106:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800510a:	f141 0100 	adc.w	r1, r1, #0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800510e:	2e02      	cmp	r6, #2
 8005110:	bf1b      	ittet	ne
 8005112:	449c      	addne	ip, r3
 8005114:	f003 0301 	andne.w	r3, r3, #1
 8005118:	4663      	moveq	r3, ip
 800511a:	eb03 035c 	addne.w	r3, r3, ip, lsr #1
 800511e:	e7a2      	b.n	8005066 <mount_volume+0x422>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005120:	200b      	movs	r0, #11
 8005122:	e5b2      	b.n	8004c8a <mount_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005124:	200c      	movs	r0, #12
 8005126:	e5b0      	b.n	8004c8a <mount_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005128:	2003      	movs	r0, #3
 800512a:	e5ae      	b.n	8004c8a <mount_volume+0x46>
 800512c:	20004b6a 	.word	0x20004b6a
 8005130:	2000470a 	.word	0x2000470a
 8005134:	2000490a 	.word	0x2000490a
 8005138:	0ffffff5 	.word	0x0ffffff5
 800513c:	41615252 	.word	0x41615252
 8005140:	aa550000 	.word	0xaa550000

08005144 <make_rand.constprop.0>:
	if (seed == 0) seed = 1;
 8005144:	2801      	cmp	r0, #1
static DWORD make_rand (	/* Returns a seed value for next */
 8005146:	b510      	push	{r4, lr}
 8005148:	bf38      	it	cc
 800514a:	2001      	movcc	r0, #1
 800514c:	f101 0410 	add.w	r4, r1, #16
 8005150:	2308      	movs	r3, #8
		for (r = 0; r < 8; r++) seed = seed & 1 ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits the 32-bit LFSR */
 8005152:	f340 0200 	sbfx	r2, r0, #0, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	f002 4223 	and.w	r2, r2, #2734686208	@ 0xa3000000
 800515c:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
 8005160:	d1f7      	bne.n	8005152 <make_rand.constprop.0+0xe>
		*buff++ = (BYTE)seed;
 8005162:	f801 0b01 	strb.w	r0, [r1], #1
	} while (--n);
 8005166:	42a1      	cmp	r1, r4
 8005168:	d1f2      	bne.n	8005150 <make_rand.constprop.0+0xc>
}
 800516a:	bd10      	pop	{r4, pc}

0800516c <create_chain>:
{
 800516c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005170:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8005172:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005174:	4688      	mov	r8, r1
 8005176:	b949      	cbnz	r1, 800518c <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8005178:	692f      	ldr	r7, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800517a:	b1c7      	cbz	r7, 80051ae <create_chain+0x42>
 800517c:	69ab      	ldr	r3, [r5, #24]
 800517e:	42bb      	cmp	r3, r7
 8005180:	bf98      	it	ls
 8005182:	2701      	movls	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005184:	696b      	ldr	r3, [r5, #20]
 8005186:	b9a3      	cbnz	r3, 80051b2 <create_chain+0x46>
 8005188:	2400      	movs	r4, #0
 800518a:	e005      	b.n	8005198 <create_chain+0x2c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800518c:	f7ff fa6e 	bl	800466c <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 8005190:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005192:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8005194:	d803      	bhi.n	800519e <create_chain+0x32>
 8005196:	2401      	movs	r4, #1
}
 8005198:	4620      	mov	r0, r4
 800519a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800519e:	1c42      	adds	r2, r0, #1
 80051a0:	f000 80dc 	beq.w	800535c <create_chain+0x1f0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80051a4:	69ab      	ldr	r3, [r5, #24]
 80051a6:	4283      	cmp	r3, r0
 80051a8:	d8f6      	bhi.n	8005198 <create_chain+0x2c>
		scl = clst;							/* Cluster to start to find */
 80051aa:	4647      	mov	r7, r8
 80051ac:	e7ea      	b.n	8005184 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80051ae:	2701      	movs	r7, #1
 80051b0:	e7e8      	b.n	8005184 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80051b2:	782a      	ldrb	r2, [r5, #0]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80051b4:	69ab      	ldr	r3, [r5, #24]
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80051b6:	2a04      	cmp	r2, #4
 80051b8:	f040 808a 	bne.w	80052d0 <create_chain+0x164>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80051bc:	f1a7 0a02 	sub.w	sl, r7, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 80051c0:	3b02      	subs	r3, #2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80051c2:	f04f 0b01 	mov.w	fp, #1
	if (clst >= fs->n_fatent - 2) clst = 0;
 80051c6:	459a      	cmp	sl, r3
 80051c8:	bf28      	it	cs
 80051ca:	f04f 0a00 	movcs.w	sl, #0
	scl = val = clst; ctr = 0;
 80051ce:	46d1      	mov	r9, sl
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 80051d0:	ea4f 3219 	mov.w	r2, r9, lsr #12
 80051d4:	4628      	mov	r0, r5
 80051d6:	e9d5 1312 	ldrd	r1, r3, [r5, #72]	@ 0x48
 80051da:	1852      	adds	r2, r2, r1
 80051dc:	f143 0300 	adc.w	r3, r3, #0
 80051e0:	f7ff f97c 	bl	80044dc <move_window>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d13b      	bne.n	8005260 <create_chain+0xf4>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80051e8:	f009 0307 	and.w	r3, r9, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80051ec:	69a8      	ldr	r0, [r5, #24]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80051ee:	f3c9 01c8 	ubfx	r1, r9, #3, #9
 80051f2:	fa0b f303 	lsl.w	r3, fp, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80051f6:	3802      	subs	r0, #2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80051f8:	b2db      	uxtb	r3, r3
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80051fa:	186a      	adds	r2, r5, r1
			bm = 1;
 80051fc:	464c      	mov	r4, r9
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80051fe:	f109 0901 	add.w	r9, r9, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005202:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005206:	4581      	cmp	r9, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005208:	ea02 0203 	and.w	r2, r2, r3
 800520c:	bf33      	iteet	cc
 800520e:	005b      	lslcc	r3, r3, #1
					val = 0; bm = 0; i = SS(fs);
 8005210:	2300      	movcs	r3, #0
 8005212:	f44f 7100 	movcs.w	r1, #512	@ 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005216:	b2db      	uxtbcc	r3, r3
					val = 0; bm = 0; i = SS(fs);
 8005218:	bf28      	it	cs
 800521a:	4699      	movcs	r9, r3
				if (bv == 0) {	/* Is it a free cluster? */
 800521c:	b9b2      	cbnz	r2, 800524c <create_chain+0xe0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800521e:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005220:	1e63      	subs	r3, r4, #1
 8005222:	3303      	adds	r3, #3
 8005224:	d8b8      	bhi.n	8005198 <create_chain+0x2c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005226:	2301      	movs	r3, #1
 8005228:	4621      	mov	r1, r4
 800522a:	4628      	mov	r0, r5
 800522c:	461a      	mov	r2, r3
 800522e:	f7ff f9db 	bl	80045e8 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 8005232:	2802      	cmp	r0, #2
 8005234:	d0af      	beq.n	8005196 <create_chain+0x2a>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005236:	2801      	cmp	r0, #1
 8005238:	f000 8090 	beq.w	800535c <create_chain+0x1f0>
		if (clst == 0) {							/* Is it a new chain? */
 800523c:	f1b8 0f00 	cmp.w	r8, #0
 8005240:	d113      	bne.n	800526a <create_chain+0xfe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005242:	2302      	movs	r3, #2
 8005244:	71f3      	strb	r3, [r6, #7]
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8005246:	2800      	cmp	r0, #0
 8005248:	d1a5      	bne.n	8005196 <create_chain+0x2a>
 800524a:	e030      	b.n	80052ae <create_chain+0x142>
				if (val == clst) return 0;	/* All cluster scanned? */
 800524c:	45ca      	cmp	sl, r9
 800524e:	d00a      	beq.n	8005266 <create_chain+0xfa>
			} while (bm != 0);
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1d2      	bne.n	80051fa <create_chain+0x8e>
		} while (++i < SS(fs));
 8005254:	3101      	adds	r1, #1
 8005256:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800525a:	d2b9      	bcs.n	80051d0 <create_chain+0x64>
			bm = 1;
 800525c:	2301      	movs	r3, #1
 800525e:	e7cc      	b.n	80051fa <create_chain+0x8e>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8005260:	f04f 34ff 	mov.w	r4, #4294967295
 8005264:	e7dc      	b.n	8005220 <create_chain+0xb4>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005266:	2400      	movs	r4, #0
 8005268:	e7da      	b.n	8005220 <create_chain+0xb4>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800526a:	79f3      	ldrb	r3, [r6, #7]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d107      	bne.n	8005280 <create_chain+0x114>
 8005270:	1c7b      	adds	r3, r7, #1
 8005272:	42a3      	cmp	r3, r4
 8005274:	d0e7      	beq.n	8005246 <create_chain+0xda>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005276:	68b3      	ldr	r3, [r6, #8]
 8005278:	1afb      	subs	r3, r7, r3
 800527a:	61b3      	str	r3, [r6, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800527c:	2303      	movs	r3, #3
 800527e:	71f3      	strb	r3, [r6, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005280:	f108 0201 	add.w	r2, r8, #1
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005284:	69f3      	ldr	r3, [r6, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005286:	42a2      	cmp	r2, r4
 8005288:	d105      	bne.n	8005296 <create_chain+0x12a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800528a:	b113      	cbz	r3, 8005292 <create_chain+0x126>
 800528c:	3301      	adds	r3, #1
 800528e:	61f3      	str	r3, [r6, #28]
 8005290:	e7d9      	b.n	8005246 <create_chain+0xda>
 8005292:	2302      	movs	r3, #2
 8005294:	e7fb      	b.n	800528e <create_chain+0x122>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005296:	b90b      	cbnz	r3, 800529c <create_chain+0x130>
 8005298:	2301      	movs	r3, #1
 800529a:	61f3      	str	r3, [r6, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800529c:	4622      	mov	r2, r4
 800529e:	4641      	mov	r1, r8
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7ff fb6b 	bl	800497c <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d155      	bne.n	8005356 <create_chain+0x1ea>
 80052aa:	2301      	movs	r3, #1
 80052ac:	61f3      	str	r3, [r6, #28]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80052ae:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80052b0:	612c      	str	r4, [r5, #16]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f43f af70 	beq.w	8005198 <create_chain+0x2c>
 80052b8:	69aa      	ldr	r2, [r5, #24]
 80052ba:	3a02      	subs	r2, #2
 80052bc:	4293      	cmp	r3, r2
 80052be:	f63f af6b 	bhi.w	8005198 <create_chain+0x2c>
			fs->free_clst--;
 80052c2:	3b01      	subs	r3, #1
 80052c4:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 80052c6:	796b      	ldrb	r3, [r5, #5]
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	716b      	strb	r3, [r5, #5]
 80052ce:	e763      	b.n	8005198 <create_chain+0x2c>
		if (scl == clst) {						/* Stretching an existing chain? */
 80052d0:	4547      	cmp	r7, r8
 80052d2:	d115      	bne.n	8005300 <create_chain+0x194>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80052d4:	1c7c      	adds	r4, r7, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80052d6:	4630      	mov	r0, r6
			if (ncl >= fs->n_fatent) ncl = 2;
 80052d8:	42a3      	cmp	r3, r4
 80052da:	bf98      	it	ls
 80052dc:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80052de:	4621      	mov	r1, r4
 80052e0:	f7ff f9c4 	bl	800466c <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80052e4:	2801      	cmp	r0, #1
 80052e6:	f43f af56 	beq.w	8005196 <create_chain+0x2a>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d036      	beq.n	800535c <create_chain+0x1f0>
			if (cs != 0) {						/* Not free? */
 80052ee:	b1f8      	cbz	r0, 8005330 <create_chain+0x1c4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80052f0:	f8d5 9010 	ldr.w	r9, [r5, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80052f4:	f1b9 0f01 	cmp.w	r9, #1
 80052f8:	d902      	bls.n	8005300 <create_chain+0x194>
 80052fa:	69ab      	ldr	r3, [r5, #24]
 80052fc:	454b      	cmp	r3, r9
 80052fe:	d800      	bhi.n	8005302 <create_chain+0x196>
			if (ncl >= fs->n_fatent) ncl = 2;
 8005300:	46b9      	mov	r9, r7
			ncl = scl;	/* Start cluster */
 8005302:	464c      	mov	r4, r9
				ncl++;							/* Next cluster */
 8005304:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005306:	69ab      	ldr	r3, [r5, #24]
 8005308:	42a3      	cmp	r3, r4
 800530a:	d804      	bhi.n	8005316 <create_chain+0x1aa>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800530c:	f1b9 0f01 	cmp.w	r9, #1
 8005310:	f43f af3a 	beq.w	8005188 <create_chain+0x1c>
					ncl = 2;
 8005314:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005316:	4621      	mov	r1, r4
 8005318:	4630      	mov	r0, r6
 800531a:	f7ff f9a7 	bl	800466c <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 800531e:	b148      	cbz	r0, 8005334 <create_chain+0x1c8>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005320:	2801      	cmp	r0, #1
 8005322:	f43f af38 	beq.w	8005196 <create_chain+0x2a>
 8005326:	3001      	adds	r0, #1
 8005328:	d018      	beq.n	800535c <create_chain+0x1f0>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800532a:	454c      	cmp	r4, r9
 800532c:	d1ea      	bne.n	8005304 <create_chain+0x198>
 800532e:	e72b      	b.n	8005188 <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005330:	2c00      	cmp	r4, #0
 8005332:	d0e5      	beq.n	8005300 <create_chain+0x194>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	4621      	mov	r1, r4
 800533a:	4628      	mov	r0, r5
 800533c:	f7ff fa92 	bl	8004864 <put_fat>
		if (res == FR_OK && clst != 0) {
 8005340:	b948      	cbnz	r0, 8005356 <create_chain+0x1ea>
 8005342:	f1b8 0f00 	cmp.w	r8, #0
 8005346:	d0b2      	beq.n	80052ae <create_chain+0x142>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005348:	4622      	mov	r2, r4
 800534a:	4641      	mov	r1, r8
 800534c:	4628      	mov	r0, r5
 800534e:	f7ff fa89 	bl	8004864 <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8005352:	2800      	cmp	r0, #0
 8005354:	d0ab      	beq.n	80052ae <create_chain+0x142>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005356:	2801      	cmp	r0, #1
 8005358:	f47f af1d 	bne.w	8005196 <create_chain+0x2a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800535c:	f04f 34ff 	mov.w	r4, #4294967295
 8005360:	e71a      	b.n	8005198 <create_chain+0x2c>

08005362 <dir_next>:
{
 8005362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8005366:	6806      	ldr	r6, [r0, #0]
{
 8005368:	4689      	mov	r9, r1
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800536a:	6b07      	ldr	r7, [r0, #48]	@ 0x30
{
 800536c:	4604      	mov	r4, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800536e:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005370:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8005372:	2b04      	cmp	r3, #4
 8005374:	bf14      	ite	ne
 8005376:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 800537a:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
 800537e:	42bb      	cmp	r3, r7
 8005380:	bf9e      	ittt	ls
 8005382:	2200      	movls	r2, #0
 8005384:	2300      	movls	r3, #0
 8005386:	e9c0 230e 	strdls	r2, r3, [r0, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800538a:	e9d0 320e 	ldrd	r3, r2, [r0, #56]	@ 0x38
 800538e:	ea53 0102 	orrs.w	r1, r3, r2
 8005392:	d013      	beq.n	80053bc <dir_next+0x5a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005394:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8005398:	f1b8 0f00 	cmp.w	r8, #0
 800539c:	d142      	bne.n	8005424 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
 800539e:	3301      	adds	r3, #1
		if (dp->clust == 0) {	/* Static table */
 80053a0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 80053a2:	f142 0200 	adc.w	r2, r2, #0
 80053a6:	e9c0 320e 	strd	r3, r2, [r0, #56]	@ 0x38
		if (dp->clust == 0) {	/* Static table */
 80053aa:	b951      	cbnz	r1, 80053c2 <dir_next+0x60>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80053ac:	8933      	ldrh	r3, [r6, #8]
 80053ae:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80053b2:	d837      	bhi.n	8005424 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80053bc:	2004      	movs	r0, #4
}
 80053be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80053c2:	8973      	ldrh	r3, [r6, #10]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 80053ca:	d12b      	bne.n	8005424 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80053cc:	f7ff f94e 	bl	800466c <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80053d0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80053d2:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80053d4:	d801      	bhi.n	80053da <dir_next+0x78>
 80053d6:	2002      	movs	r0, #2
 80053d8:	e7f1      	b.n	80053be <dir_next+0x5c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053da:	1c42      	adds	r2, r0, #1
 80053dc:	d101      	bne.n	80053e2 <dir_next+0x80>
 80053de:	2001      	movs	r0, #1
 80053e0:	e7ed      	b.n	80053be <dir_next+0x5c>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80053e2:	69b3      	ldr	r3, [r6, #24]
 80053e4:	4283      	cmp	r3, r0
 80053e6:	d816      	bhi.n	8005416 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	d0e2      	beq.n	80053b4 <dir_next+0x52>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80053ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff febb 	bl	800516c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80053f6:	4605      	mov	r5, r0
 80053f8:	b1d0      	cbz	r0, 8005430 <dir_next+0xce>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80053fa:	2801      	cmp	r0, #1
 80053fc:	d0eb      	beq.n	80053d6 <dir_next+0x74>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d0ed      	beq.n	80053de <dir_next+0x7c>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005402:	4601      	mov	r1, r0
 8005404:	4630      	mov	r0, r6
 8005406:	f7ff fb68 	bl	8004ada <dir_clear>
 800540a:	2800      	cmp	r0, #0
 800540c:	d1e7      	bne.n	80053de <dir_next+0x7c>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800540e:	79e3      	ldrb	r3, [r4, #7]
 8005410:	f043 0304 	orr.w	r3, r3, #4
 8005414:	71e3      	strb	r3, [r4, #7]
				dp->sect = clst2sect(fs, clst);
 8005416:	4629      	mov	r1, r5
 8005418:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 800541a:	6365      	str	r5, [r4, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 800541c:	f7fe ff88 	bl	8004330 <clst2sect>
 8005420:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005424:	3660      	adds	r6, #96	@ 0x60
	return FR_OK;
 8005426:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8005428:	6327      	str	r7, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800542a:	4446      	add	r6, r8
 800542c:	6426      	str	r6, [r4, #64]	@ 0x40
	return FR_OK;
 800542e:	e7c6      	b.n	80053be <dir_next+0x5c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005430:	2007      	movs	r0, #7
 8005432:	e7c4      	b.n	80053be <dir_next+0x5c>

08005434 <dir_alloc>:
{
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
 8005438:	2100      	movs	r1, #0
{
 800543a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800543c:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800543e:	f7ff f9bd 	bl	80047bc <dir_sdi>
	if (res == FR_OK) {
 8005442:	b9a0      	cbnz	r0, 800546e <dir_alloc+0x3a>
		n = 0;
 8005444:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
 8005446:	4638      	mov	r0, r7
 8005448:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800544c:	f7ff f846 	bl	80044dc <move_window>
			if (res != FR_OK) break;
 8005450:	b968      	cbnz	r0, 800546e <dir_alloc+0x3a>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8005452:	783a      	ldrb	r2, [r7, #0]
 8005454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005456:	2a04      	cmp	r2, #4
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	d10c      	bne.n	8005476 <dir_alloc+0x42>
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	d50e      	bpl.n	800547e <dir_alloc+0x4a>
				n = 0;				/* Not a free entry, restart to search */
 8005460:	4605      	mov	r5, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8005462:	2101      	movs	r1, #1
 8005464:	4620      	mov	r0, r4
 8005466:	f7ff ff7c 	bl	8005362 <dir_next>
		} while (res == FR_OK);
 800546a:	2800      	cmp	r0, #0
 800546c:	d0eb      	beq.n	8005446 <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800546e:	2804      	cmp	r0, #4
 8005470:	bf08      	it	eq
 8005472:	2007      	moveq	r0, #7
 8005474:	e006      	b.n	8005484 <dir_alloc+0x50>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8005476:	2be5      	cmp	r3, #229	@ 0xe5
 8005478:	d001      	beq.n	800547e <dir_alloc+0x4a>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <dir_alloc+0x2c>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800547e:	3501      	adds	r5, #1
 8005480:	42b5      	cmp	r5, r6
 8005482:	d1ee      	bne.n	8005462 <dir_alloc+0x2e>
}
 8005484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005486 <load_xdir>:
{
 8005486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005488:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800548a:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 800548c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 8005490:	6d05      	ldr	r5, [r0, #80]	@ 0x50
	res = move_window(dp->obj.fs, dp->sect);
 8005492:	f7ff f823 	bl	80044dc <move_window>
	if (res != FR_OK) return res;
 8005496:	b920      	cbnz	r0, 80054a2 <load_xdir+0x1c>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 8005498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	2a85      	cmp	r2, #133	@ 0x85
 800549e:	d001      	beq.n	80054a4 <load_xdir+0x1e>
 80054a0:	2002      	movs	r0, #2
}
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 80054a4:	462a      	mov	r2, r5
 80054a6:	f103 0120 	add.w	r1, r3, #32
 80054aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80054ae:	428b      	cmp	r3, r1
 80054b0:	f842 0b04 	str.w	r0, [r2], #4
 80054b4:	d1f9      	bne.n	80054aa <load_xdir+0x24>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 80054b6:	786e      	ldrb	r6, [r5, #1]
 80054b8:	3601      	adds	r6, #1
 80054ba:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 80054bc:	f1a6 0360 	sub.w	r3, r6, #96	@ 0x60
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c4:	d8ec      	bhi.n	80054a0 <load_xdir+0x1a>
	res = dir_next(dp, 0);
 80054c6:	2100      	movs	r1, #0
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7ff ff4a 	bl	8005362 <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80054ce:	2804      	cmp	r0, #4
 80054d0:	d0e6      	beq.n	80054a0 <load_xdir+0x1a>
	if (res != FR_OK) return res;
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d1e5      	bne.n	80054a2 <load_xdir+0x1c>
	res = move_window(dp->obj.fs, dp->sect);
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80054dc:	f7fe fffe 	bl	80044dc <move_window>
	if (res != FR_OK) return res;
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d1de      	bne.n	80054a2 <load_xdir+0x1c>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 80054e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	2ac0      	cmp	r2, #192	@ 0xc0
 80054ea:	d1d9      	bne.n	80054a0 <load_xdir+0x1a>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 80054ec:	f105 0220 	add.w	r2, r5, #32
 80054f0:	f103 0120 	add.w	r1, r3, #32
 80054f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80054f8:	428b      	cmp	r3, r1
 80054fa:	f842 0b04 	str.w	r0, [r2], #4
 80054fe:	d1f9      	bne.n	80054f4 <load_xdir+0x6e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 8005500:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 8005504:	220f      	movs	r2, #15
 8005506:	332c      	adds	r3, #44	@ 0x2c
 8005508:	fbb3 f3f2 	udiv	r3, r3, r2
 800550c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8005510:	d3c6      	bcc.n	80054a0 <load_xdir+0x1a>
	i = 2 * SZDIRE;	/* Name offset to load */
 8005512:	2740      	movs	r7, #64	@ 0x40
		res = dir_next(dp, 0);
 8005514:	2100      	movs	r1, #0
 8005516:	4620      	mov	r0, r4
 8005518:	f7ff ff23 	bl	8005362 <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800551c:	2804      	cmp	r0, #4
 800551e:	d0bf      	beq.n	80054a0 <load_xdir+0x1a>
		if (res != FR_OK) return res;
 8005520:	2800      	cmp	r0, #0
 8005522:	d1be      	bne.n	80054a2 <load_xdir+0x1c>
		res = move_window(dp->obj.fs, dp->sect);
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800552a:	f7fe ffd7 	bl	80044dc <move_window>
		if (res != FR_OK) return res;
 800552e:	2800      	cmp	r0, #0
 8005530:	d1b7      	bne.n	80054a2 <load_xdir+0x1c>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 8005532:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	2ac1      	cmp	r2, #193	@ 0xc1
 8005538:	d1b2      	bne.n	80054a0 <load_xdir+0x1a>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 800553a:	f5b7 7f18 	cmp.w	r7, #608	@ 0x260
 800553e:	d0b0      	beq.n	80054a2 <load_xdir+0x1c>
 8005540:	19ea      	adds	r2, r5, r7
 8005542:	f103 0120 	add.w	r1, r3, #32
 8005546:	f853 cb04 	ldr.w	ip, [r3], #4
 800554a:	428b      	cmp	r3, r1
 800554c:	f842 cb04 	str.w	ip, [r2], #4
 8005550:	d1f9      	bne.n	8005546 <load_xdir+0xc0>
	} while ((i += SZDIRE) < sz_ent);
 8005552:	3720      	adds	r7, #32
 8005554:	42be      	cmp	r6, r7
 8005556:	d8dd      	bhi.n	8005514 <load_xdir+0x8e>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8005558:	f5b7 7f18 	cmp.w	r7, #608	@ 0x260
 800555c:	d8a1      	bhi.n	80054a2 <load_xdir+0x1c>
		if (xdir_sum(dirb) != ld_16(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800555e:	4628      	mov	r0, r5
 8005560:	f7fe ff05 	bl	800436e <xdir_sum>
 8005564:	886b      	ldrh	r3, [r5, #2]
 8005566:	1a18      	subs	r0, r3, r0
 8005568:	bf18      	it	ne
 800556a:	2001      	movne	r0, #1
 800556c:	0040      	lsls	r0, r0, #1
 800556e:	e798      	b.n	80054a2 <load_xdir+0x1c>

08005570 <store_xdir>:
{
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 8005572:	6803      	ldr	r3, [r0, #0]
{
 8005574:	4605      	mov	r5, r0
		dp->obj.fs->wflag = 1;
 8005576:	2701      	movs	r7, #1
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 8005578:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
	st_16(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 800557a:	4620      	mov	r0, r4
 800557c:	f7fe fef7 	bl	800436e <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 8005580:	70a0      	strb	r0, [r4, #2]
 8005582:	0a00      	lsrs	r0, r0, #8
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 8005584:	7866      	ldrb	r6, [r4, #1]
	*ptr++ = (BYTE)val;
 8005586:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 8005588:	4628      	mov	r0, r5
 800558a:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800558c:	f7ff f916 	bl	80047bc <dir_sdi>
	while (res == FR_OK) {
 8005590:	b120      	cbz	r0, 800559c <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8005592:	2802      	cmp	r0, #2
 8005594:	bf28      	it	cs
 8005596:	2002      	movcs	r0, #2
}
 8005598:	b2c0      	uxtb	r0, r0
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
 800559c:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80055a0:	6828      	ldr	r0, [r5, #0]
 80055a2:	f7fe ff9b 	bl	80044dc <move_window>
		if (res != FR_OK) break;
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d1f3      	bne.n	8005592 <store_xdir+0x22>
		memcpy(dp->dir, dirb, SZDIRE);
 80055aa:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80055ac:	f104 0220 	add.w	r2, r4, #32
 80055b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80055b4:	4294      	cmp	r4, r2
 80055b6:	f843 1b04 	str.w	r1, [r3], #4
 80055ba:	d1f9      	bne.n	80055b0 <store_xdir+0x40>
		dp->obj.fs->wflag = 1;
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	711f      	strb	r7, [r3, #4]
		if (--nent == 0) break;	/* All done? */
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	d0e6      	beq.n	8005592 <store_xdir+0x22>
		res = dir_next(dp, 0);	/* Next entry */
 80055c4:	2100      	movs	r1, #0
 80055c6:	4628      	mov	r0, r5
 80055c8:	3e01      	subs	r6, #1
 80055ca:	f7ff feca 	bl	8005362 <dir_next>
 80055ce:	e7df      	b.n	8005590 <store_xdir+0x20>

080055d0 <dir_read.constprop.0>:
static FRESULT dir_read (
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 80055d4:	27ff      	movs	r7, #255	@ 0xff
static FRESULT dir_read (
 80055d6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80055d8:	6806      	ldr	r6, [r0, #0]
	FRESULT res = FR_NO_FILE;
 80055da:	2004      	movs	r0, #4
	BYTE ord = 0xFF, sum = 0xFF;
 80055dc:	463d      	mov	r5, r7
	while (dp->sect) {
 80055de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80055e2:	ea52 0103 	orrs.w	r1, r2, r3
 80055e6:	d102      	bne.n	80055ee <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80055e8:	b1d8      	cbz	r0, 8005622 <dir_read.constprop.0+0x52>
 80055ea:	2004      	movs	r0, #4
 80055ec:	e062      	b.n	80056b4 <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7fe ff74 	bl	80044dc <move_window>
		if (res != FR_OK) break;
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d15d      	bne.n	80056b4 <dir_read.constprop.0+0xe4>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 80055f8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80055fa:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f4      	beq.n	80055ea <dir_read.constprop.0+0x1a>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005600:	7832      	ldrb	r2, [r6, #0]
 8005602:	2a04      	cmp	r2, #4
 8005604:	d110      	bne.n	8005628 <dir_read.constprop.0+0x58>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8005606:	2b85      	cmp	r3, #133	@ 0x85
 8005608:	d14e      	bne.n	80056a8 <dir_read.constprop.0+0xd8>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800560a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
					res = load_xdir(dp);	/* Load the entry block */
 800560c:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800560e:	6523      	str	r3, [r4, #80]	@ 0x50
					res = load_xdir(dp);	/* Load the entry block */
 8005610:	f7ff ff39 	bl	8005486 <load_xdir>
					if (res == FR_OK) {
 8005614:	2800      	cmp	r0, #0
 8005616:	d14d      	bne.n	80056b4 <dir_read.constprop.0+0xe4>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005618:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005620:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005622:	2000      	movs	r0, #0
}
 8005624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005628:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800562a:	2be5      	cmp	r3, #229	@ 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800562c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005630:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005632:	d046      	beq.n	80056c2 <dir_read.constprop.0+0xf2>
 8005634:	2b2e      	cmp	r3, #46	@ 0x2e
 8005636:	d044      	beq.n	80056c2 <dir_read.constprop.0+0xf2>
 8005638:	f022 0120 	bic.w	r1, r2, #32
 800563c:	2908      	cmp	r1, #8
 800563e:	d040      	beq.n	80056c2 <dir_read.constprop.0+0xf2>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8005640:	2a0f      	cmp	r2, #15
 8005642:	d143      	bne.n	80056cc <dir_read.constprop.0+0xfc>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 8005644:	0659      	lsls	r1, r3, #25
 8005646:	d53a      	bpl.n	80056be <dir_read.constprop.0+0xee>
						b &= (BYTE)~LLEF; ord = b;
 8005648:	f003 05bf 	and.w	r5, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;
 800564c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						sum = dp->dir[LDIR_Chksum];
 800564e:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8005650:	6523      	str	r3, [r4, #80]	@ 0x50
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005652:	7b43      	ldrb	r3, [r0, #13]
 8005654:	42bb      	cmp	r3, r7
 8005656:	d134      	bne.n	80056c2 <dir_read.constprop.0+0xf2>
	if (ld_16(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8005658:	8b42      	ldrh	r2, [r0, #26]
 800565a:	bb92      	cbnz	r2, 80056c2 <dir_read.constprop.0+0xf2>
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 800565c:	7803      	ldrb	r3, [r0, #0]
 800565e:	210d      	movs	r1, #13
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005660:	f8d6 e00c 	ldr.w	lr, [r6, #12]
			if (chr != 0xFFFF) return 0;		/* Check filler */
 8005664:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 8005668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800566c:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80056e0 <dir_read.constprop.0+0x110>
 8005670:	3b01      	subs	r3, #1
 8005672:	434b      	muls	r3, r1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 8005674:	2101      	movs	r1, #1
		chr = ld_16(dir + LfnOfs[di]);			/* Pick a character from the entry */
 8005676:	f818 cb01 	ldrb.w	ip, [r8], #1
 800567a:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (pchr != 0) {
 800567e:	b311      	cbz	r1, 80056c6 <dir_read.constprop.0+0xf6>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8005680:	2bff      	cmp	r3, #255	@ 0xff
 8005682:	d81e      	bhi.n	80056c2 <dir_read.constprop.0+0xf2>
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 8005684:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
 8005688:	4661      	mov	r1, ip
 800568a:	3301      	adds	r3, #1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 800568c:	3201      	adds	r2, #1
 800568e:	2a0d      	cmp	r2, #13
 8005690:	d1f1      	bne.n	8005676 <dir_read.constprop.0+0xa6>
	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8005692:	7802      	ldrb	r2, [r0, #0]
 8005694:	0652      	lsls	r2, r2, #25
 8005696:	d505      	bpl.n	80056a4 <dir_read.constprop.0+0xd4>
 8005698:	b121      	cbz	r1, 80056a4 <dir_read.constprop.0+0xd4>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 800569a:	2bff      	cmp	r3, #255	@ 0xff
 800569c:	d811      	bhi.n	80056c2 <dir_read.constprop.0+0xf2>
		lfnbuf[ni] = 0;
 800569e:	2200      	movs	r2, #0
 80056a0:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80056a4:	3d01      	subs	r5, #1
 80056a6:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
 80056a8:	2100      	movs	r1, #0
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7ff fe59 	bl	8005362 <dir_next>
		if (res != FR_OK) break;
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d094      	beq.n	80055de <dir_read.constprop.0+0xe>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80056b4:	2200      	movs	r2, #0
 80056b6:	2300      	movs	r3, #0
 80056b8:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
	return res;
 80056bc:	e7b2      	b.n	8005624 <dir_read.constprop.0+0x54>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80056be:	42ab      	cmp	r3, r5
 80056c0:	d0c7      	beq.n	8005652 <dir_read.constprop.0+0x82>
				ord = 0xFF;
 80056c2:	25ff      	movs	r5, #255	@ 0xff
 80056c4:	e7f0      	b.n	80056a8 <dir_read.constprop.0+0xd8>
			if (chr != 0xFFFF) return 0;		/* Check filler */
 80056c6:	45cc      	cmp	ip, r9
 80056c8:	d0e0      	beq.n	800568c <dir_read.constprop.0+0xbc>
 80056ca:	e7fa      	b.n	80056c2 <dir_read.constprop.0+0xf2>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80056cc:	b91d      	cbnz	r5, 80056d6 <dir_read.constprop.0+0x106>
 80056ce:	f7fe fe3f 	bl	8004350 <sum_sfn>
 80056d2:	42b8      	cmp	r0, r7
 80056d4:	d0a5      	beq.n	8005622 <dir_read.constprop.0+0x52>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295
 80056da:	6523      	str	r3, [r4, #80]	@ 0x50
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80056dc:	e7a1      	b.n	8005622 <dir_read.constprop.0+0x52>
 80056de:	bf00      	nop
 80056e0:	080184f0 	.word	0x080184f0

080056e4 <dir_find>:
{
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056e8:	2100      	movs	r1, #0
{
 80056ea:	b087      	sub	sp, #28
 80056ec:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80056ee:	f8d0 9000 	ldr.w	r9, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056f2:	f7ff f863 	bl	80047bc <dir_sdi>
	if (res != FR_OK) return res;
 80056f6:	4680      	mov	r8, r0
 80056f8:	bb98      	cbnz	r0, 8005762 <dir_find+0x7e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80056fa:	f899 3000 	ldrb.w	r3, [r9]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d136      	bne.n	8005770 <dir_find+0x8c>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005702:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8005706:	f7fe fec3 	bl	8004490 <xname_sum>
 800570a:	4607      	mov	r7, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff ff5f 	bl	80055d0 <dir_read.constprop.0>
 8005712:	4605      	mov	r5, r0
 8005714:	b108      	cbz	r0, 800571a <dir_find+0x36>
		return res;
 8005716:	4680      	mov	r8, r0
 8005718:	e023      	b.n	8005762 <dir_find+0x7e>
			if (ld_16(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800571a:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800571e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8005720:	42ba      	cmp	r2, r7
 8005722:	d1f3      	bne.n	800570c <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005724:	f893 b023 	ldrb.w	fp, [r3, #35]	@ 0x23
 8005728:	2640      	movs	r6, #64	@ 0x40
 800572a:	455d      	cmp	r5, fp
 800572c:	d010      	beq.n	8005750 <dir_find+0x6c>
				if ((di % SZDIRE) == 0) di += 2;
 800572e:	06f1      	lsls	r1, r6, #27
				if (ff_wtoupper(ld_16(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005730:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
				if ((di % SZDIRE) == 0) di += 2;
 8005734:	bf08      	it	eq
 8005736:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_16(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005738:	5b98      	ldrh	r0, [r3, r6]
 800573a:	f002 f989 	bl	8007a50 <ff_wtoupper>
 800573e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005742:	4682      	mov	sl, r0
 8005744:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8005748:	f002 f982 	bl	8007a50 <ff_wtoupper>
 800574c:	4582      	cmp	sl, r0
 800574e:	d00c      	beq.n	800576a <dir_find+0x86>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005750:	b2eb      	uxtb	r3, r5
 8005752:	459b      	cmp	fp, r3
 8005754:	d1da      	bne.n	800570c <dir_find+0x28>
 8005756:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800575a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1d4      	bne.n	800570c <dir_find+0x28>
}
 8005762:	4640      	mov	r0, r8
 8005764:	b007      	add	sp, #28
 8005766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800576a:	3602      	adds	r6, #2
 800576c:	3501      	adds	r5, #1
 800576e:	e7dc      	b.n	800572a <dir_find+0x46>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 8005778:	6523      	str	r3, [r4, #80]	@ 0x50
 800577a:	4655      	mov	r5, sl
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800577c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005780:	9302      	str	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 8005782:	4648      	mov	r0, r9
 8005784:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005788:	f7fe fea8 	bl	80044dc <move_window>
		if (res != FR_OK) break;
 800578c:	b9b8      	cbnz	r0, 80057be <dir_find+0xda>
		c = dp->dir[DIR_Name];
 800578e:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8005790:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8005792:	2f00      	cmp	r7, #0
 8005794:	d078      	beq.n	8005888 <dir_find+0x1a4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005796:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005798:	2fe5      	cmp	r7, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800579a:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 800579e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80057a0:	d003      	beq.n	80057aa <dir_find+0xc6>
 80057a2:	0712      	lsls	r2, r2, #28
 80057a4:	d50d      	bpl.n	80057c2 <dir_find+0xde>
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d00d      	beq.n	80057c6 <dir_find+0xe2>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	6523      	str	r3, [r4, #80]	@ 0x50
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80057b0:	25ff      	movs	r5, #255	@ 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80057b2:	2100      	movs	r1, #0
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff fdd4 	bl	8005362 <dir_next>
	} while (res == FR_OK);
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0e1      	beq.n	8005782 <dir_find+0x9e>
		res = move_window(fs, dp->sect);
 80057be:	4680      	mov	r8, r0
 80057c0:	e7cf      	b.n	8005762 <dir_find+0x7e>
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d14d      	bne.n	8005862 <dir_find+0x17e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80057c6:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 80057ca:	065b      	lsls	r3, r3, #25
 80057cc:	d4f1      	bmi.n	80057b2 <dir_find+0xce>
					if (c & LLEF) {		/* Is it start of an entry set? */
 80057ce:	0678      	lsls	r0, r7, #25
 80057d0:	d53c      	bpl.n	800584c <dir_find+0x168>
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 80057d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						c &= (BYTE)~LLEF;
 80057d4:	f007 07bf 	and.w	r7, r7, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 80057d8:	6523      	str	r3, [r4, #80]	@ 0x50
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 80057da:	f896 a00d 	ldrb.w	sl, [r6, #13]
	if (ld_16(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 80057de:	8b73      	ldrh	r3, [r6, #26]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <dir_find+0xcc>
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 80057e4:	7835      	ldrb	r5, [r6, #0]
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 80057e6:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80057e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 80057ec:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80057f0:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8005894 <dir_find+0x1b0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80057f4:	9301      	str	r3, [sp, #4]
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 80057f6:	230d      	movs	r3, #13
 80057f8:	3d01      	subs	r5, #1
 80057fa:	435d      	muls	r5, r3
		chr = ld_16(dir + LfnOfs[di]);		/* Pick a character from the entry */
 80057fc:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8005800:	5af3      	ldrh	r3, [r6, r3]
		if (pchr != 0) {
 8005802:	b34a      	cbz	r2, 8005858 <dir_find+0x174>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8005804:	2dff      	cmp	r5, #255	@ 0xff
 8005806:	d8d3      	bhi.n	80057b0 <dir_find+0xcc>
 8005808:	4618      	mov	r0, r3
 800580a:	9305      	str	r3, [sp, #20]
 800580c:	f002 f920 	bl	8007a50 <ff_wtoupper>
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	1c69      	adds	r1, r5, #1
 8005814:	9004      	str	r0, [sp, #16]
 8005816:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 800581a:	9103      	str	r1, [sp, #12]
 800581c:	f002 f918 	bl	8007a50 <ff_wtoupper>
 8005820:	9a04      	ldr	r2, [sp, #16]
 8005822:	4282      	cmp	r2, r0
 8005824:	d1c4      	bne.n	80057b0 <dir_find+0xcc>
			pchr = chr;
 8005826:	9b05      	ldr	r3, [sp, #20]
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8005828:	9903      	ldr	r1, [sp, #12]
			pchr = chr;
 800582a:	461a      	mov	r2, r3
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 800582c:	460d      	mov	r5, r1
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800582e:	4b18      	ldr	r3, [pc, #96]	@ (8005890 <dir_find+0x1ac>)
 8005830:	459b      	cmp	fp, r3
 8005832:	d1e3      	bne.n	80057fc <dir_find+0x118>
	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 8005834:	7833      	ldrb	r3, [r6, #0]
 8005836:	0659      	lsls	r1, r3, #25
 8005838:	d505      	bpl.n	8005846 <dir_find+0x162>
 800583a:	b122      	cbz	r2, 8005846 <dir_find+0x162>
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1b4      	bne.n	80057b0 <dir_find+0xcc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005846:	3f01      	subs	r7, #1
 8005848:	b2fd      	uxtb	r5, r7
 800584a:	e7b2      	b.n	80057b2 <dir_find+0xce>
 800584c:	42bd      	cmp	r5, r7
 800584e:	d1af      	bne.n	80057b0 <dir_find+0xcc>
 8005850:	7b73      	ldrb	r3, [r6, #13]
 8005852:	4553      	cmp	r3, sl
 8005854:	d1ac      	bne.n	80057b0 <dir_find+0xcc>
 8005856:	e7c2      	b.n	80057de <dir_find+0xfa>
			if (chr != 0xFFFF) return 0;	/* Check filler */
 8005858:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800585c:	428b      	cmp	r3, r1
 800585e:	d0e6      	beq.n	800582e <dir_find+0x14a>
 8005860:	e7a6      	b.n	80057b0 <dir_find+0xcc>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005862:	b92d      	cbnz	r5, 8005870 <dir_find+0x18c>
 8005864:	4630      	mov	r0, r6
 8005866:	f7fe fd73 	bl	8004350 <sum_sfn>
 800586a:	4550      	cmp	r0, sl
 800586c:	f43f af79 	beq.w	8005762 <dir_find+0x7e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005870:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 8005874:	07db      	lsls	r3, r3, #31
 8005876:	d498      	bmi.n	80057aa <dir_find+0xc6>
 8005878:	220b      	movs	r2, #11
 800587a:	9902      	ldr	r1, [sp, #8]
 800587c:	4630      	mov	r0, r6
 800587e:	f00f f8e7 	bl	8014a50 <memcmp>
 8005882:	2800      	cmp	r0, #0
 8005884:	d191      	bne.n	80057aa <dir_find+0xc6>
 8005886:	e76c      	b.n	8005762 <dir_find+0x7e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8005888:	f04f 0804 	mov.w	r8, #4
 800588c:	e769      	b.n	8005762 <dir_find+0x7e>
 800588e:	bf00      	nop
 8005890:	080184fd 	.word	0x080184fd
 8005894:	080184f0 	.word	0x080184f0

08005898 <dir_register>:
{
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800589c:	f890 b04f 	ldrb.w	fp, [r0, #79]	@ 0x4f
{
 80058a0:	b09b      	sub	sp, #108	@ 0x6c
 80058a2:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80058a4:	f01b 05a0 	ands.w	r5, fp, #160	@ 0xa0
 80058a8:	f040 818f 	bne.w	8005bca <dir_register+0x332>
	FATFS *fs = dp->obj.fs;
 80058ac:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80058ae:	68f1      	ldr	r1, [r6, #12]
 80058b0:	f831 2015 	ldrh.w	r2, [r1, r5, lsl #1]
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	d160      	bne.n	800597a <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80058b8:	7832      	ldrb	r2, [r6, #0]
 80058ba:	2a04      	cmp	r2, #4
 80058bc:	f040 809c 	bne.w	80059f8 <dir_register+0x160>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80058c0:	230f      	movs	r3, #15
 80058c2:	350e      	adds	r5, #14
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 80058c4:	4620      	mov	r0, r4
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80058c6:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 80058ca:	1ca9      	adds	r1, r5, #2
 80058cc:	f7ff fdb2 	bl	8005434 <dir_alloc>
		if (res != FR_OK) return res;
 80058d0:	4681      	mov	r9, r0
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f040 808a 	bne.w	80059ec <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 80058d8:	3501      	adds	r5, #1
 80058da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80058dc:	eba3 1345 	sub.w	r3, r3, r5, lsl #5
 80058e0:	6523      	str	r3, [r4, #80]	@ 0x50
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 80058e2:	79e3      	ldrb	r3, [r4, #7]
 80058e4:	075f      	lsls	r7, r3, #29
 80058e6:	d54a      	bpl.n	800597e <dir_register+0xe6>
			dp->obj.stat &= ~4;
 80058e8:	f023 0304 	bic.w	r3, r3, #4
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 80058ec:	4620      	mov	r0, r4
			dp->obj.stat &= ~4;
 80058ee:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 80058f0:	f7ff f85c 	bl	80049ac <fill_first_frag>
			if (res != FR_OK) return res;
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d13e      	bne.n	8005976 <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff f83c 	bl	800497c <fill_last_frag>
			if (res != FR_OK) return res;
 8005904:	2800      	cmp	r0, #0
 8005906:	d136      	bne.n	8005976 <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8005908:	68a3      	ldr	r3, [r4, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d037      	beq.n	800597e <dir_register+0xe6>
	dp->obj.fs = obj->fs;
 800590e:	6823      	ldr	r3, [r4, #0]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005910:	a804      	add	r0, sp, #16
	dp->blk_ofs = obj->c_ofs;
 8005912:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 8005914:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 8005916:	6a23      	ldr	r3, [r4, #32]
	dp->obj.n_frag = 0;
 8005918:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
	dp->obj.sclust = obj->c_scl;
 800591c:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 800591e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	dp->blk_ofs = obj->c_ofs;
 8005920:	9118      	str	r1, [sp, #96]	@ 0x60
	dp->obj.stat = (BYTE)obj->c_size;
 8005922:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800592a:	e9cd 3908 	strd	r3, r9, [sp, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800592e:	f7fe ff45 	bl	80047bc <dir_sdi>
	if (res == FR_OK) {
 8005932:	bb00      	cbnz	r0, 8005976 <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005934:	a804      	add	r0, sp, #16
 8005936:	f7ff fda6 	bl	8005486 <load_xdir>
				if (res != FR_OK) return res;
 800593a:	b9e0      	cbnz	r0, 8005976 <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800593c:	8970      	ldrh	r0, [r6, #10]
 800593e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005942:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8005946:	fbe0 2301 	umlal	r2, r3, r0, r1
				st_64(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800594a:	6d30      	ldr	r0, [r6, #80]	@ 0x50
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800594c:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_64(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8005950:	3038      	adds	r0, #56	@ 0x38
 8005952:	f7fe fcc6 	bl	80042e2 <st_64>
				st_64(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005956:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8005958:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800595c:	3028      	adds	r0, #40	@ 0x28
 800595e:	f7fe fcc0 	bl	80042e2 <st_64>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 8005962:	79e3      	ldrb	r3, [r4, #7]
 8005964:	6d32      	ldr	r2, [r6, #80]	@ 0x50
				res = store_xdir(&dj);				/* Store the object status */
 8005966:	a804      	add	r0, sp, #16
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
				res = store_xdir(&dj);				/* Store the object status */
 8005970:	f7ff fdfe 	bl	8005570 <store_xdir>
				if (res != FR_OK) return res;
 8005974:	b118      	cbz	r0, 800597e <dir_register+0xe6>
			if (res != FR_OK) return res;
 8005976:	4681      	mov	r9, r0
 8005978:	e038      	b.n	80059ec <dir_register+0x154>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800597a:	3501      	adds	r5, #1
 800597c:	e798      	b.n	80058b0 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800597e:	6d34      	ldr	r4, [r6, #80]	@ 0x50
	memset(dirb, 0, 2 * SZDIRE);
 8005980:	223f      	movs	r2, #63	@ 0x3f
 8005982:	2100      	movs	r1, #0
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005984:	68f5      	ldr	r5, [r6, #12]
	memset(dirb, 0, 2 * SZDIRE);
 8005986:	1c67      	adds	r7, r4, #1
 8005988:	4638      	mov	r0, r7
 800598a:	f00f f88b 	bl	8014aa4 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800598e:	2385      	movs	r3, #133	@ 0x85
	nlen = n_c1 = 0; chr = 1;
 8005990:	2001      	movs	r0, #1
	i = SZDIRE * 2;	/* Top of file name entries */
 8005992:	2240      	movs	r2, #64	@ 0x40
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8005994:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8005996:	23c0      	movs	r3, #192	@ 0xc0
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8005998:	f04f 0ec1 	mov.w	lr, #193	@ 0xc1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800599c:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = n_c1 = 0; chr = 1;
 80059a0:	2300      	movs	r3, #0
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 80059a2:	4619      	mov	r1, r3
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 80059a4:	4698      	mov	r8, r3
 80059a6:	1c56      	adds	r6, r2, #1
 80059a8:	f804 e002 	strb.w	lr, [r4, r2]
 80059ac:	3202      	adds	r2, #2
 80059ae:	f804 8006 	strb.w	r8, [r4, r6]
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 80059b2:	b120      	cbz	r0, 80059be <dir_register+0x126>
 80059b4:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 80059b8:	b108      	cbz	r0, 80059be <dir_register+0x126>
 80059ba:	3301      	adds	r3, #1
 80059bc:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80059be:	0a06      	lsrs	r6, r0, #8
 80059c0:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
 80059c2:	54be      	strb	r6, [r7, r2]
			i += 2;
 80059c4:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
 80059c6:	06d6      	lsls	r6, r2, #27
 80059c8:	d1f3      	bne.n	80059b2 <dir_register+0x11a>
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 80059ca:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 80059ce:	f101 0c01 	add.w	ip, r1, #1
 80059d2:	b97e      	cbnz	r6, 80059f4 <dir_register+0x15c>
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 80059d4:	3102      	adds	r1, #2
	st_16(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80059d6:	4628      	mov	r0, r5
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 80059d8:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 80059dc:	7061      	strb	r1, [r4, #1]
	st_16(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80059de:	f7fe fd57 	bl	8004490 <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 80059e2:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 80059e6:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 80059e8:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
}
 80059ec:	4648      	mov	r0, r9
 80059ee:	b01b      	add	sp, #108	@ 0x6c
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	4661      	mov	r1, ip
 80059f6:	e7d6      	b.n	80059a6 <dir_register+0x10e>
	memcpy(sn, dp->fn, 12);
 80059f8:	f104 0744 	add.w	r7, r4, #68	@ 0x44
 80059fc:	f10d 0810 	add.w	r8, sp, #16
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005a00:	f01b 0f01 	tst.w	fp, #1
	memcpy(sn, dp->fn, 12);
 8005a04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005a08:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005a0c:	f000 80e5 	beq.w	8005bda <dir_register+0x342>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005a10:	2240      	movs	r2, #64	@ 0x40
		for (n = 1; n < 100; n++) {
 8005a12:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005a16:	f884 204f 	strb.w	r2, [r4, #79]	@ 0x4f
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8005a1a:	46bc      	mov	ip, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, (WORD)n);	/* Generate a numbered name */
 8005a1c:	68f3      	ldr	r3, [r6, #12]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005a1e:	f1ba 0f05 	cmp.w	sl, #5
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8005a22:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005a26:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005a2a:	f82c 2b02 	strh.w	r2, [ip], #2
 8005a2e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005a32:	f88c 2000 	strb.w	r2, [ip]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005a36:	d907      	bls.n	8005a48 <dir_register+0x1b0>
 8005a38:	1e98      	subs	r0, r3, #2
		crc_sreg = seq;
 8005a3a:	4652      	mov	r2, sl
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8005a3c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8005a40:	2900      	cmp	r1, #0
 8005a42:	d149      	bne.n	8005ad8 <dir_register+0x240>
		seq = (WORD)crc_sreg;
 8005a44:	b292      	uxth	r2, r2
 8005a46:	e001      	b.n	8005a4c <dir_register+0x1b4>
 8005a48:	fa1f f28a 	uxth.w	r2, sl
 8005a4c:	46c4      	mov	ip, r8
		crc_sreg = seq;
 8005a4e:	2007      	movs	r0, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8005a50:	f002 090f 	and.w	r9, r2, #15
 8005a54:	4696      	mov	lr, r2
 8005a56:	0912      	lsrs	r2, r2, #4
 8005a58:	f109 0130 	add.w	r1, r9, #48	@ 0x30
		if (c > '9') c += 7;
 8005a5c:	2939      	cmp	r1, #57	@ 0x39
 8005a5e:	bf88      	it	hi
 8005a60:	f109 0137 	addhi.w	r1, r9, #55	@ 0x37
	} while (i && seq);
 8005a64:	f1b0 0901 	subs.w	r9, r0, #1
		ns[i--] = c;
 8005a68:	f80c 1d01 	strb.w	r1, [ip, #-1]!
	} while (i && seq);
 8005a6c:	d047      	beq.n	8005afe <dir_register+0x266>
 8005a6e:	f1be 0f0f 	cmp.w	lr, #15
 8005a72:	d842      	bhi.n	8005afa <dir_register+0x262>
	ns[i] = '~';
 8005a74:	f109 0368 	add.w	r3, r9, #104	@ 0x68
 8005a78:	217e      	movs	r1, #126	@ 0x7e
 8005a7a:	eb0d 0203 	add.w	r2, sp, r3
 8005a7e:	f802 1c60 	strb.w	r1, [r2, #-96]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005a82:	2100      	movs	r1, #0
			if (j == i - 1) break;
 8005a84:	1e82      	subs	r2, r0, #2
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005a86:	4549      	cmp	r1, r9
 8005a88:	d202      	bcs.n	8005a90 <dir_register+0x1f8>
 8005a8a:	5c78      	ldrb	r0, [r7, r1]
 8005a8c:	2820      	cmp	r0, #32
 8005a8e:	d138      	bne.n	8005b02 <dir_register+0x26a>
 8005a90:	3143      	adds	r1, #67	@ 0x43
 8005a92:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 8005a96:	4421      	add	r1, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005a98:	f1b9 0f07 	cmp.w	r9, #7
 8005a9c:	bf97      	itett	ls
 8005a9e:	f109 0368 	addls.w	r3, r9, #104	@ 0x68
 8005aa2:	2220      	movhi	r2, #32
 8005aa4:	f109 0901 	addls.w	r9, r9, #1
 8005aa8:	eb0d 0203 	addls.w	r2, sp, r3
 8005aac:	bf98      	it	ls
 8005aae:	f812 2c60 	ldrbls.w	r2, [r2, #-96]
 8005ab2:	f801 2f01 	strb.w	r2, [r1, #1]!
	} while (j < 8);
 8005ab6:	4288      	cmp	r0, r1
 8005ab8:	d1ee      	bne.n	8005a98 <dir_register+0x200>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff fe12 	bl	80056e4 <dir_find>
			if (res != FR_OK) break;
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f040 8084 	bne.w	8005bd0 <dir_register+0x338>
		for (n = 1; n < 100; n++) {
 8005ac8:	f10a 0a01 	add.w	sl, sl, #1
 8005acc:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8005ad0:	d1a3      	bne.n	8005a1a <dir_register+0x182>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005ad2:	f04f 0907 	mov.w	r9, #7
 8005ad6:	e789      	b.n	80059ec <dir_register+0x154>
 8005ad8:	f04f 0c10 	mov.w	ip, #16
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8005adc:	f001 0e01 	and.w	lr, r1, #1
				wc >>= 1;
 8005ae0:	0849      	lsrs	r1, r1, #1
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8005ae2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 8005ae6:	03d3      	lsls	r3, r2, #15
 8005ae8:	bf44      	itt	mi
 8005aea:	f482 3288 	eormi.w	r2, r2, #69632	@ 0x11000
 8005aee:	f082 0221 	eormi.w	r2, r2, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 8005af2:	f1bc 0c01 	subs.w	ip, ip, #1
 8005af6:	d1f1      	bne.n	8005adc <dir_register+0x244>
 8005af8:	e7a0      	b.n	8005a3c <dir_register+0x1a4>
		ns[i--] = c;
 8005afa:	4648      	mov	r0, r9
 8005afc:	e7a8      	b.n	8005a50 <dir_register+0x1b8>
 8005afe:	2001      	movs	r0, #1
 8005b00:	e7b8      	b.n	8005a74 <dir_register+0x1dc>
 8005b02:	9201      	str	r2, [sp, #4]
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8005b04:	f7fe fbfc 	bl	8004300 <dbc_1st>
 8005b08:	9a01      	ldr	r2, [sp, #4]
 8005b0a:	b110      	cbz	r0, 8005b12 <dir_register+0x27a>
			if (j == i - 1) break;
 8005b0c:	428a      	cmp	r2, r1
 8005b0e:	d0bf      	beq.n	8005a90 <dir_register+0x1f8>
			j++;
 8005b10:	3101      	adds	r1, #1
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005b12:	3101      	adds	r1, #1
 8005b14:	e7b7      	b.n	8005a86 <dir_register+0x1ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8005b16:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b18:	4620      	mov	r0, r4
 8005b1a:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8005b1e:	f7fe fe4d 	bl	80047bc <dir_sdi>
		if (res == FR_OK) {
 8005b22:	4681      	mov	r9, r0
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f47f af61 	bne.w	80059ec <dir_register+0x154>
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005b2a:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7fe fc0e 	bl	8004350 <sum_sfn>
 8005b34:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8005b36:	4630      	mov	r0, r6
 8005b38:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005b3c:	f7fe fcce 	bl	80044dc <move_window>
 8005b40:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f47f af52 	bne.w	80059ec <dir_register+0x154>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b4a:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005b4c:	9a01      	ldr	r2, [sp, #4]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8005b4e:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005b52:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005b56:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 8005b58:	f04f 020f 	mov.w	r2, #15
 8005b5c:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8005c40 <dir_register+0x3a8>
 8005b60:	72da      	strb	r2, [r3, #11]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8005b62:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 8005b64:	7318      	strb	r0, [r3, #12]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8005b66:	fb0c f202 	mul.w	r2, ip, r2
	di = chr = 0;
 8005b6a:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8005b6c:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8005b6e:	76d8      	strb	r0, [r3, #27]
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005b70:	4540      	cmp	r0, r8
		st_16(dir + LfnOfs[di], chr);	/* Set it */
 8005b72:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++di < 13);
 8005b76:	f10c 0c01 	add.w	ip, ip, #1
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005b7a:	bf18      	it	ne
 8005b7c:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_16(dir + LfnOfs[di], chr);	/* Set it */
 8005b80:	eb03 0b09 	add.w	fp, r3, r9
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005b84:	bf18      	it	ne
 8005b86:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005b88:	f803 0009 	strb.w	r0, [r3, r9]
 8005b8c:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 8005b90:	2800      	cmp	r0, #0
 8005b92:	bf08      	it	eq
 8005b94:	4640      	moveq	r0, r8
	} while (++di < 13);
 8005b96:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8005b9a:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++di < 13);
 8005b9e:	d1e7      	bne.n	8005b70 <dir_register+0x2d8>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 8005ba0:	4540      	cmp	r0, r8
 8005ba2:	d002      	beq.n	8005baa <dir_register+0x312>
 8005ba4:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8005ba8:	b90a      	cbnz	r2, 8005bae <dir_register+0x316>
 8005baa:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 8005bae:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8005bb0:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4620      	mov	r0, r4
				fs->wflag = 1;
 8005bb6:	7133      	strb	r3, [r6, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005bb8:	f7ff fbd3 	bl	8005362 <dir_next>
			} while (res == FR_OK && --n_ent);
 8005bbc:	4681      	mov	r9, r0
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f47f af14 	bne.w	80059ec <dir_register+0x154>
 8005bc4:	3d01      	subs	r5, #1
 8005bc6:	d1b6      	bne.n	8005b36 <dir_register+0x29e>
 8005bc8:	e01b      	b.n	8005c02 <dir_register+0x36a>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005bca:	f04f 0906 	mov.w	r9, #6
 8005bce:	e70d      	b.n	80059ec <dir_register+0x154>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005bd0:	2804      	cmp	r0, #4
 8005bd2:	f47f af0b 	bne.w	80059ec <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005bd6:	f884 b04f 	strb.w	fp, [r4, #79]	@ 0x4f
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005bda:	f01b 0f02 	tst.w	fp, #2
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8005bde:	4620      	mov	r0, r4
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005be0:	bf1b      	ittet	ne
 8005be2:	350c      	addne	r5, #12
 8005be4:	230d      	movne	r3, #13
 8005be6:	2501      	moveq	r5, #1
 8005be8:	fbb5 f5f3 	udivne	r5, r5, r3
 8005bec:	bf18      	it	ne
 8005bee:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7ff fc1f 	bl	8005434 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8005bf6:	4681      	mov	r9, r0
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f47f aef7 	bne.w	80059ec <dir_register+0x154>
 8005bfe:	3d01      	subs	r5, #1
 8005c00:	d189      	bne.n	8005b16 <dir_register+0x27e>
		res = move_window(fs, dp->sect);
 8005c02:	4630      	mov	r0, r6
 8005c04:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005c08:	f7fe fc68 	bl	80044dc <move_window>
		if (res == FR_OK) {
 8005c0c:	4681      	mov	r9, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f47f aeec 	bne.w	80059ec <dir_register+0x154>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005c14:	4601      	mov	r1, r0
 8005c16:	2220      	movs	r2, #32
 8005c18:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005c1a:	f00e ff43 	bl	8014aa4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005c1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c20:	cf03      	ldmia	r7!, {r0, r1}
 8005c22:	6018      	str	r0, [r3, #0]
 8005c24:	6059      	str	r1, [r3, #4]
 8005c26:	78ba      	ldrb	r2, [r7, #2]
 8005c28:	8839      	ldrh	r1, [r7, #0]
 8005c2a:	729a      	strb	r2, [r3, #10]
 8005c2c:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005c2e:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 8005c32:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005c34:	f003 0318 	and.w	r3, r3, #24
 8005c38:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	7133      	strb	r3, [r6, #4]
 8005c3e:	e6d5      	b.n	80059ec <dir_register+0x154>
 8005c40:	080184f0 	.word	0x080184f0

08005c44 <init_alloc_info.isra.0>:
static void init_alloc_info (
 8005c44:	b510      	push	{r4, lr}
 8005c46:	4604      	mov	r4, r0
 8005c48:	460a      	mov	r2, r1
	obj->sclust = ld_32(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8005c4a:	3034      	adds	r0, #52	@ 0x34
 8005c4c:	f7fe fb3b 	bl	80042c6 <ld_32>
 8005c50:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_64(fs->dirbuf + XDIR_FileSize);	/* Size */
 8005c52:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8005c56:	f7fe fb38 	bl	80042ca <ld_64>
 8005c5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;			/* Allocation status */
 8005c5e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	71d3      	strb	r3, [r2, #7]
	obj->n_frag = 0;									/* No last fragment info */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61d3      	str	r3, [r2, #28]
}
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8005c6e:	2803      	cmp	r0, #3
	cl = ld_16(dir + DIR_FstClusLO);
 8005c70:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_16(dir + DIR_FstClusHI) << 16;
 8005c72:	bf04      	itt	eq
 8005c74:	8a8a      	ldrheq	r2, [r1, #20]
 8005c76:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	4770      	bx	lr
	...

08005c80 <follow_path>:
{
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8005c84:	6803      	ldr	r3, [r0, #0]
{
 8005c86:	b085      	sub	sp, #20
 8005c88:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8005c8a:	9302      	str	r3, [sp, #8]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8005c8c:	460e      	mov	r6, r1
 8005c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c92:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c94:	d0fa      	beq.n	8005c8c <follow_path+0xc>
 8005c96:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c98:	d0f8      	beq.n	8005c8c <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	60a9      	str	r1, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8005c9e:	61e9      	str	r1, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ca0:	7833      	ldrb	r3, [r6, #0]
 8005ca2:	2b1f      	cmp	r3, #31
 8005ca4:	f200 80d9 	bhi.w	8005e5a <follow_path+0x1da>
		dp->fn[NSFLAG] = NS_NONAME;
 8005ca8:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8005caa:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8005cac:	f885 304f 	strb.w	r3, [r5, #79]	@ 0x4f
}
 8005cb0:	b005      	add	sp, #20
 8005cb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8005cb6:	f7fe bd81 	b.w	80047bc <dir_sdi>
		sb = (BYTE)*p++;		/* Get 2nd byte */
 8005cba:	46b2      	mov	sl, r6
	if (DbcTbl && c >= DbcTbl[4]) {
 8005cbc:	4b99      	ldr	r3, [pc, #612]	@ (8005f24 <follow_path+0x2a4>)
		sb = (BYTE)*p++;		/* Get 2nd byte */
 8005cbe:	7872      	ldrb	r2, [r6, #1]
	if (DbcTbl && c >= DbcTbl[4]) {
 8005cc0:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	ba40      	rev16	r0, r0
 8005cc8:	b280      	uxth	r0, r0
 8005cca:	b1a3      	cbz	r3, 8005cf6 <follow_path+0x76>
 8005ccc:	7919      	ldrb	r1, [r3, #4]
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	d811      	bhi.n	8005cf6 <follow_path+0x76>
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 8005cd2:	7959      	ldrb	r1, [r3, #5]
 8005cd4:	4291      	cmp	r1, r2
 8005cd6:	f080 80cf 	bcs.w	8005e78 <follow_path+0x1f8>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 8005cda:	7999      	ldrb	r1, [r3, #6]
 8005cdc:	4291      	cmp	r1, r2
 8005cde:	d803      	bhi.n	8005ce8 <follow_path+0x68>
 8005ce0:	79d9      	ldrb	r1, [r3, #7]
 8005ce2:	4291      	cmp	r1, r2
 8005ce4:	f080 80c8 	bcs.w	8005e78 <follow_path+0x1f8>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 8005ce8:	7a19      	ldrb	r1, [r3, #8]
 8005cea:	4291      	cmp	r1, r2
 8005cec:	d803      	bhi.n	8005cf6 <follow_path+0x76>
 8005cee:	7a5b      	ldrb	r3, [r3, #9]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	f080 80c1 	bcs.w	8005e78 <follow_path+0x1f8>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cf6:	2006      	movs	r0, #6
 8005cf8:	e15e      	b.n	8005fb8 <follow_path+0x338>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8005cfa:	282f      	cmp	r0, #47	@ 0x2f
 8005cfc:	f000 815f 	beq.w	8005fbe <follow_path+0x33e>
 8005d00:	285c      	cmp	r0, #92	@ 0x5c
 8005d02:	f000 815c 	beq.w	8005fbe <follow_path+0x33e>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d06:	287f      	cmp	r0, #127	@ 0x7f
 8005d08:	d805      	bhi.n	8005d16 <follow_path+0x96>
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f00e fed1 	bl	8014ab4 <strchr>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d1ef      	bne.n	8005cf6 <follow_path+0x76>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005d16:	2fff      	cmp	r7, #255	@ 0xff
 8005d18:	d0ed      	beq.n	8005cf6 <follow_path+0x76>
		lfn[di++] = wc;				/* Store the Unicode character */
 8005d1a:	f82b 6017 	strh.w	r6, [fp, r7, lsl #1]
	for (;;) {
 8005d1e:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
 8005d20:	4656      	mov	r6, sl
 8005d22:	e09f      	b.n	8005e64 <follow_path+0x1e4>
		wc = lfn[di - 1];
 8005d24:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (wc != ' ' && wc != '.') break;
 8005d28:	2a20      	cmp	r2, #32
 8005d2a:	d002      	beq.n	8005d32 <follow_path+0xb2>
 8005d2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8005d2e:	f040 80b5 	bne.w	8005e9c <follow_path+0x21c>
		di--;
 8005d32:	3f01      	subs	r7, #1
 8005d34:	e0af      	b.n	8005e96 <follow_path+0x216>
		if (i >= ni || si == di) {		/* End of field? */
 8005d36:	4599      	cmp	r9, r3
 8005d38:	f080 8101 	bcs.w	8005f3e <follow_path+0x2be>
 8005d3c:	9a00      	ldr	r2, [sp, #0]
 8005d3e:	42ba      	cmp	r2, r7
 8005d40:	d113      	bne.n	8005d6a <follow_path+0xea>
			if (ni == 11) {				/* Name extension overflow? */
 8005d42:	2b0b      	cmp	r3, #11
 8005d44:	d108      	bne.n	8005d58 <follow_path+0xd8>
 8005d46:	e0fd      	b.n	8005f44 <follow_path+0x2c4>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8005d48:	9a00      	ldr	r2, [sp, #0]
 8005d4a:	42ba      	cmp	r2, r7
 8005d4c:	d004      	beq.n	8005d58 <follow_path+0xd8>
 8005d4e:	f044 0403 	orr.w	r4, r4, #3
 8005d52:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 8005d54:	f200 80fa 	bhi.w	8005f4c <follow_path+0x2cc>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8005d58:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005d5c:	230b      	movs	r3, #11
 8005d5e:	f04f 0908 	mov.w	r9, #8
 8005d62:	9700      	str	r7, [sp, #0]
 8005d64:	fa5f f888 	uxtb.w	r8, r8
			continue;
 8005d68:	e0cc      	b.n	8005f04 <follow_path+0x284>
		if (wc >= 0x80) {	/* Is this an extended character? */
 8005d6a:	2e7f      	cmp	r6, #127	@ 0x7f
 8005d6c:	d947      	bls.n	8005dfe <follow_path+0x17e>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8005d6e:	f044 0202 	orr.w	r2, r4, #2
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	9201      	str	r2, [sp, #4]
			if (ExCvt) {	/* In SBCS cfg */
 8005d78:	4a6b      	ldr	r2, [pc, #428]	@ (8005f28 <follow_path+0x2a8>)
 8005d7a:	6811      	ldr	r1, [r2, #0]
 8005d7c:	b1e9      	cbz	r1, 8005dba <follow_path+0x13a>
				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8005d7e:	4b6b      	ldr	r3, [pc, #428]	@ (8005f2c <follow_path+0x2ac>)
 8005d80:	4630      	mov	r0, r6
 8005d82:	8819      	ldrh	r1, [r3, #0]
 8005d84:	f001 fda4 	bl	80078d0 <ff_uni2oem>
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8005d88:	f010 0f80 	tst.w	r0, #128	@ 0x80
				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8005d8c:	4606      	mov	r6, r0
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	d01c      	beq.n	8005dcc <follow_path+0x14c>
 8005d92:	4a65      	ldr	r2, [pc, #404]	@ (8005f28 <follow_path+0x2a8>)
 8005d94:	f000 067f 	and.w	r6, r0, #127	@ 0x7f
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	5d96      	ldrb	r6, [r2, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8005d9c:	b136      	cbz	r6, 8005dac <follow_path+0x12c>
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4863      	ldr	r0, [pc, #396]	@ (8005f30 <follow_path+0x2b0>)
 8005da2:	9303      	str	r3, [sp, #12]
 8005da4:	f00e fe86 	bl	8014ab4 <strchr>
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	b350      	cbz	r0, 8005e02 <follow_path+0x182>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005dac:	9a01      	ldr	r2, [sp, #4]
 8005dae:	265f      	movs	r6, #95	@ 0x5f
 8005db0:	f042 0203 	orr.w	r2, r2, #3
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	9201      	str	r2, [sp, #4]
 8005db8:	e019      	b.n	8005dee <follow_path+0x16e>
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f001 fe48 	bl	8007a50 <ff_wtoupper>
 8005dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8005f2c <follow_path+0x2ac>)
 8005dc2:	8819      	ldrh	r1, [r3, #0]
 8005dc4:	f001 fd84 	bl	80078d0 <ff_uni2oem>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	4606      	mov	r6, r0
		if (wc >= 0x100) {				/* Is this a DBC? */
 8005dcc:	2eff      	cmp	r6, #255	@ 0xff
 8005dce:	d9e5      	bls.n	8005d9c <follow_path+0x11c>
			if (i >= ni - 1) {			/* Field overflow? */
 8005dd0:	1e5a      	subs	r2, r3, #1
 8005dd2:	4591      	cmp	r9, r2
 8005dd4:	d304      	bcc.n	8005de0 <follow_path+0x160>
				cf |= NS_LOSS | NS_LFN;
 8005dd6:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
 8005dda:	4699      	mov	r9, r3
				cf |= NS_LOSS | NS_LFN;
 8005ddc:	b2e4      	uxtb	r4, r4
				i = ni; continue;		/* Next field */
 8005dde:	e091      	b.n	8005f04 <follow_path+0x284>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8005de0:	eb05 0209 	add.w	r2, r5, r9
 8005de4:	0a31      	lsrs	r1, r6, #8
 8005de6:	f109 0901 	add.w	r9, r9, #1
 8005dea:	f882 1044 	strb.w	r1, [r2, #68]	@ 0x44
		dp->fn[i++] = (BYTE)wc;
 8005dee:	eb05 0209 	add.w	r2, r5, r9
 8005df2:	9c01      	ldr	r4, [sp, #4]
 8005df4:	f109 0901 	add.w	r9, r9, #1
 8005df8:	f882 6044 	strb.w	r6, [r2, #68]	@ 0x44
 8005dfc:	e082      	b.n	8005f04 <follow_path+0x284>
 8005dfe:	9401      	str	r4, [sp, #4]
 8005e00:	e7cd      	b.n	8005d9e <follow_path+0x11e>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8005e02:	f1a6 0241 	sub.w	r2, r6, #65	@ 0x41
 8005e06:	b292      	uxth	r2, r2
 8005e08:	2a19      	cmp	r2, #25
 8005e0a:	d802      	bhi.n	8005e12 <follow_path+0x192>
					b |= 2;
 8005e0c:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 8005e10:	e7ed      	b.n	8005dee <follow_path+0x16e>
 8005e12:	f1a6 0261 	sub.w	r2, r6, #97	@ 0x61
 8005e16:	b292      	uxth	r2, r2
 8005e18:	2a19      	cmp	r2, #25
					b |= 1; wc -= 0x20;
 8005e1a:	bf9e      	ittt	ls
 8005e1c:	3e20      	subls	r6, #32
 8005e1e:	f048 0801 	orrls.w	r8, r8, #1
 8005e22:	b2b6      	uxthls	r6, r6
 8005e24:	e7e3      	b.n	8005dee <follow_path+0x16e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8005e26:	075a      	lsls	r2, r3, #29
 8005e28:	f100 80c6 	bmi.w	8005fb8 <follow_path+0x338>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005e2c:	79ab      	ldrb	r3, [r5, #6]
 8005e2e:	06db      	lsls	r3, r3, #27
 8005e30:	d575      	bpl.n	8005f1e <follow_path+0x29e>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8005e32:	9b02      	ldr	r3, [sp, #8]
 8005e34:	7818      	ldrb	r0, [r3, #0]
 8005e36:	2804      	cmp	r0, #4
 8005e38:	d166      	bne.n	8005f08 <follow_path+0x288>
				dp->obj.c_scl = dp->obj.sclust;
 8005e3a:	68ab      	ldr	r3, [r5, #8]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8005e3c:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005e3e:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
 8005e40:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005e42:	692b      	ldr	r3, [r5, #16]
 8005e44:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	626b      	str	r3, [r5, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8005e4c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8005e4e:	62ab      	str	r3, [r5, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005e54:	f7ff fef6 	bl	8005c44 <init_alloc_info.isra.0>
{
 8005e58:	4656      	mov	r6, sl
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005e5a:	682b      	ldr	r3, [r5, #0]
 8005e5c:	2700      	movs	r7, #0
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005e5e:	4c35      	ldr	r4, [pc, #212]	@ (8005f34 <follow_path+0x2b4>)
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005e60:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
 8005e64:	7831      	ldrb	r1, [r6, #0]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8005e66:	4608      	mov	r0, r1
 8005e68:	f7fe fa4a 	bl	8004300 <dbc_1st>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f47f af24 	bne.w	8005cba <follow_path+0x3a>
	wc = (BYTE)*p++;			/* Get a byte */
 8005e72:	4608      	mov	r0, r1
 8005e74:	f106 0a01 	add.w	sl, r6, #1
	if (wc != 0) {
 8005e78:	b150      	cbz	r0, 8005e90 <follow_path+0x210>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8005e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f2c <follow_path+0x2ac>)
 8005e7c:	8819      	ldrh	r1, [r3, #0]
 8005e7e:	f001 fd8d 	bl	800799c <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8005e82:	4606      	mov	r6, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f43f af36 	beq.w	8005cf6 <follow_path+0x76>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8005e8a:	281f      	cmp	r0, #31
 8005e8c:	f63f af35 	bhi.w	8005cfa <follow_path+0x7a>
		cf = NS_LAST;			/* Last segment */
 8005e90:	2404      	movs	r4, #4
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8005e92:	eb0b 0347 	add.w	r3, fp, r7, lsl #1
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	f47f af44 	bne.w	8005d24 <follow_path+0xa4>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	eb0b 0147 	add.w	r1, fp, r7, lsl #1
 8005ea2:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	f43f af25 	beq.w	8005cf6 <follow_path+0x76>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8005eac:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	2820      	cmp	r0, #32
 8005eb6:	d0f9      	beq.n	8005eac <follow_path+0x22c>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8005eb8:	b90a      	cbnz	r2, 8005ebe <follow_path+0x23e>
 8005eba:	282e      	cmp	r0, #46	@ 0x2e
 8005ebc:	d102      	bne.n	8005ec4 <follow_path+0x244>
 8005ebe:	f044 0403 	orr.w	r4, r4, #3
 8005ec2:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	f833 1d02 	ldrh.w	r1, [r3, #-2]!
 8005eca:	292e      	cmp	r1, #46	@ 0x2e
 8005ecc:	d001      	beq.n	8005ed2 <follow_path+0x252>
 8005ece:	3f01      	subs	r7, #1
 8005ed0:	d1f9      	bne.n	8005ec6 <follow_path+0x246>
	memset(dp->fn, ' ', 11);
 8005ed2:	f04f 3320 	mov.w	r3, #538976288	@ 0x20202020
	i = b = 0; ni = 8;
 8005ed6:	f04f 0900 	mov.w	r9, #0
	memset(dp->fn, ' ', 11);
 8005eda:	64ab      	str	r3, [r5, #72]	@ 0x48
	i = b = 0; ni = 8;
 8005edc:	46c8      	mov	r8, r9
	memset(dp->fn, ' ', 11);
 8005ede:	646b      	str	r3, [r5, #68]	@ 0x44
 8005ee0:	f8c5 304b 	str.w	r3, [r5, #75]	@ 0x4b
	i = b = 0; ni = 8;
 8005ee4:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
 8005ee6:	1c51      	adds	r1, r2, #1
 8005ee8:	f83b 6012 	ldrh.w	r6, [fp, r2, lsl #1]
 8005eec:	9100      	str	r1, [sp, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 8005eee:	b36e      	cbz	r6, 8005f4c <follow_path+0x2cc>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8005ef0:	2e20      	cmp	r6, #32
 8005ef2:	d004      	beq.n	8005efe <follow_path+0x27e>
 8005ef4:	2e2e      	cmp	r6, #46	@ 0x2e
 8005ef6:	f47f af1e 	bne.w	8005d36 <follow_path+0xb6>
 8005efa:	42b9      	cmp	r1, r7
 8005efc:	d01c      	beq.n	8005f38 <follow_path+0x2b8>
			cf |= NS_LOSS | NS_LFN;
 8005efe:	f044 0403 	orr.w	r4, r4, #3
 8005f02:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 8005f04:	9a00      	ldr	r2, [sp, #0]
 8005f06:	e7ee      	b.n	8005ee6 <follow_path+0x266>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005f0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	4419      	add	r1, r3
 8005f16:	f7ff feaa 	bl	8005c6e <ld_clust.isra.0>
 8005f1a:	60a8      	str	r0, [r5, #8]
 8005f1c:	e79c      	b.n	8005e58 <follow_path+0x1d8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f1e:	2005      	movs	r0, #5
	return res;
 8005f20:	e04a      	b.n	8005fb8 <follow_path+0x338>
 8005f22:	bf00      	nop
 8005f24:	20004700 	.word	0x20004700
 8005f28:	20004704 	.word	0x20004704
 8005f2c:	20004708 	.word	0x20004708
 8005f30:	08015d1e 	.word	0x08015d1e
 8005f34:	08015d15 	.word	0x08015d15
		if (i >= ni || si == di) {		/* End of field? */
 8005f38:	4599      	cmp	r9, r3
 8005f3a:	f4ff af02 	bcc.w	8005d42 <follow_path+0xc2>
			if (ni == 11) {				/* Name extension overflow? */
 8005f3e:	2b0b      	cmp	r3, #11
 8005f40:	f47f af02 	bne.w	8005d48 <follow_path+0xc8>
				cf |= NS_LOSS | NS_LFN;
 8005f44:	f044 0403 	orr.w	r4, r4, #3
				break;
 8005f48:	230b      	movs	r3, #11
				cf |= NS_LOSS | NS_LFN;
 8005f4a:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f4c:	f895 2044 	ldrb.w	r2, [r5, #68]	@ 0x44
 8005f50:	2ae5      	cmp	r2, #229	@ 0xe5
 8005f52:	bf04      	itt	eq
 8005f54:	2205      	moveq	r2, #5
 8005f56:	f885 2044 	strbeq.w	r2, [r5, #68]	@ 0x44
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	bf04      	itt	eq
 8005f5e:	ea4f 0888 	moveq.w	r8, r8, lsl #2
 8005f62:	fa5f f888 	uxtbeq.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8005f66:	f008 030c 	and.w	r3, r8, #12
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d003      	beq.n	8005f76 <follow_path+0x2f6>
 8005f6e:	f008 0303 	and.w	r3, r8, #3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d102      	bne.n	8005f7c <follow_path+0x2fc>
 8005f76:	f044 0402 	orr.w	r4, r4, #2
 8005f7a:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f7c:	07a1      	lsls	r1, r4, #30
 8005f7e:	d40b      	bmi.n	8005f98 <follow_path+0x318>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8005f80:	f348 0300 	sbfx	r3, r8, #0, #1
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8005f84:	f018 0f04 	tst.w	r8, #4
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	ea43 0304 	orr.w	r3, r3, r4
 8005f90:	b2dc      	uxtb	r4, r3
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8005f92:	bf18      	it	ne
 8005f94:	f044 0408 	orrne.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f98:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8005f9a:	f885 404f 	strb.w	r4, [r5, #79]	@ 0x4f
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f9e:	f7ff fba1 	bl	80056e4 <dir_find>
			ns = dp->fn[NSFLAG];
 8005fa2:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
			if (res != FR_OK) {				/* Failed to find the object */
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f43f af3d 	beq.w	8005e26 <follow_path+0x1a6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005fac:	2804      	cmp	r0, #4
 8005fae:	d103      	bne.n	8005fb8 <follow_path+0x338>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005fb0:	f013 0f04 	tst.w	r3, #4
 8005fb4:	bf08      	it	eq
 8005fb6:	2005      	moveq	r0, #5
}
 8005fb8:	b005      	add	sp, #20
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wc < ' ') {				/* Stopped at end of the path? */
 8005fbe:	4653      	mov	r3, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8005fc0:	781c      	ldrb	r4, [r3, #0]
 8005fc2:	469a      	mov	sl, r3
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	2c2f      	cmp	r4, #47	@ 0x2f
 8005fc8:	d0fa      	beq.n	8005fc0 <follow_path+0x340>
 8005fca:	2c5c      	cmp	r4, #92	@ 0x5c
 8005fcc:	d0f8      	beq.n	8005fc0 <follow_path+0x340>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8005fce:	2c1f      	cmp	r4, #31
 8005fd0:	bf8c      	ite	hi
 8005fd2:	2400      	movhi	r4, #0
 8005fd4:	2401      	movls	r4, #1
 8005fd6:	00a4      	lsls	r4, r4, #2
 8005fd8:	e75b      	b.n	8005e92 <follow_path+0x212>
 8005fda:	bf00      	nop

08005fdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8005fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fde:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8005fe2:	a803      	add	r0, sp, #12
{
 8005fe4:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8005fe6:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8005fe8:	f7fe f9d7 	bl	800439a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fec:	2800      	cmp	r0, #0
 8005fee:	db18      	blt.n	8006022 <f_mount+0x46>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8005ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8006028 <f_mount+0x4c>)
 8005ff2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {					/* Unregister current filesystem object if registered */
 8005ff6:	b11b      	cbz	r3, 8006000 <f_mount+0x24>
		FatFs[vol] = 0;
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8005ffe:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8006000:	9b01      	ldr	r3, [sp, #4]
 8006002:	b123      	cbz	r3, 800600e <f_mount+0x32>
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006004:	2100      	movs	r1, #0
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8006006:	7058      	strb	r0, [r3, #1]
		FatFs[vol] = fs;		/* Register new fs object */
 8006008:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800600c:	7019      	strb	r1, [r3, #0]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800600e:	b12c      	cbz	r4, 800601c <f_mount+0x40>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006010:	2200      	movs	r2, #0
 8006012:	a901      	add	r1, sp, #4
 8006014:	4668      	mov	r0, sp
 8006016:	f7fe fe15 	bl	8004c44 <mount_volume>
 800601a:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 800601c:	4620      	mov	r0, r4
 800601e:	b004      	add	sp, #16
 8006020:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006022:	240b      	movs	r4, #11
 8006024:	e7fa      	b.n	800601c <f_mount+0x40>
 8006026:	bf00      	nop
 8006028:	20004b6c 	.word	0x20004b6c

0800602c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	b09d      	sub	sp, #116	@ 0x74
 8006032:	4616      	mov	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8006034:	4604      	mov	r4, r0
{
 8006036:	9103      	str	r1, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8006038:	2800      	cmp	r0, #0
 800603a:	f000 8135 	beq.w	80062a8 <f_open+0x27c>

	/* Get logical drive number and mount the volume if needed */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800603e:	f002 093f 	and.w	r9, r2, #63	@ 0x3f
	res = mount_volume(&path, &fs, mode);
 8006042:	a905      	add	r1, sp, #20
 8006044:	a803      	add	r0, sp, #12
 8006046:	464a      	mov	r2, r9
 8006048:	f7fe fdfc 	bl	8004c44 <mount_volume>

	if (res == FR_OK) {
 800604c:	4680      	mov	r8, r0
 800604e:	2800      	cmp	r0, #0
 8006050:	f040 80f1 	bne.w	8006236 <f_open+0x20a>
		dj.obj.fs = fs;
 8006054:	9d05      	ldr	r5, [sp, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006056:	a806      	add	r0, sp, #24
 8006058:	9903      	ldr	r1, [sp, #12]
		dj.obj.fs = fs;
 800605a:	9506      	str	r5, [sp, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
 800605c:	f7ff fe10 	bl	8005c80 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006060:	b920      	cbnz	r0, 800606c <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006062:	f99d 3067 	ldrsb.w	r3, [sp, #103]	@ 0x67
				res = FR_INVALID_NAME;
 8006066:	2b00      	cmp	r3, #0
 8006068:	bfb8      	it	lt
 800606a:	2006      	movlt	r0, #6
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800606c:	f016 0f1c 	tst.w	r6, #28
 8006070:	f000 8081 	beq.w	8006176 <f_open+0x14a>
			if (res != FR_OK) {					/* No file, create new */
 8006074:	2800      	cmp	r0, #0
 8006076:	d045      	beq.n	8006104 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006078:	2804      	cmp	r0, #4
 800607a:	f040 80dc 	bne.w	8006236 <f_open+0x20a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800607e:	a806      	add	r0, sp, #24
 8006080:	f7ff fc0a 	bl	8005898 <dir_register>
					res = FR_EXIST;				/* Cannot create as new file */
				} else {
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006084:	2800      	cmp	r0, #0
 8006086:	f040 80d6 	bne.w	8006236 <f_open+0x20a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800608a:	f049 0908 	orr.w	r9, r9, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800608e:	f019 0f08 	tst.w	r9, #8
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006092:	782b      	ldrb	r3, [r5, #0]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006094:	d07a      	beq.n	800618c <f_open+0x160>
				if (fs->fs_type == FS_EXFAT) {
 8006096:	2b04      	cmp	r3, #4
 8006098:	d13e      	bne.n	8006118 <f_open+0xec>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800609a:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
					init_alloc_info(fs, &fp->obj);
 800609c:	4621      	mov	r1, r4
					fp->obj.fs = fs;
 800609e:	6025      	str	r5, [r4, #0]
					init_alloc_info(fs, &fp->obj);
 80060a0:	4630      	mov	r0, r6
 80060a2:	f7ff fdcf 	bl	8005c44 <init_alloc_info.isra.0>
					/* Set exFAT directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 80060a6:	221e      	movs	r2, #30
 80060a8:	2100      	movs	r1, #0
 80060aa:	1cb0      	adds	r0, r6, #2
 80060ac:	f00e fcfa 	bl	8014aa4 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 80060b0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80060b2:	2100      	movs	r1, #0
 80060b4:	221a      	movs	r2, #26
 80060b6:	3026      	adds	r0, #38	@ 0x26
 80060b8:	f00e fcf4 	bl	8014aa4 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 80060bc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80060be:	2220      	movs	r2, #32
 80060c0:	711a      	strb	r2, [r3, #4]
					st_32(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());	/* Set created time */
 80060c2:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
 80060c4:	f7fd f95e 	bl	8003384 <get_fattime>
 80060c8:	4601      	mov	r1, r0
					fs->dirbuf[XDIR_GenFlags] = 1;
 80060ca:	2201      	movs	r2, #1
					st_32(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());	/* Set created time */
 80060cc:	3608      	adds	r6, #8
 80060ce:	4630      	mov	r0, r6
 80060d0:	f7fe f8ff 	bl	80042d2 <st_32>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80060d4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
					res = store_xdir(&dj);
 80060d6:	a806      	add	r0, sp, #24
					fs->dirbuf[XDIR_GenFlags] = 1;
 80060d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 80060dc:	f7ff fa48 	bl	8005570 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f040 80a8 	bne.w	8006236 <f_open+0x20a>
 80060e6:	68a1      	ldr	r1, [r4, #8]
 80060e8:	b149      	cbz	r1, 80060fe <f_open+0xd2>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80060ea:	4602      	mov	r2, r0
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7fe fc75 	bl	80049dc <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	3b01      	subs	r3, #1
					if (cl != 0) {						/* Remove the cluster chain if exist */
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, sc);
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80060f6:	612b      	str	r3, [r5, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f040 809c 	bne.w	8006236 <f_open+0x20a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80060fe:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
 8006102:	e043      	b.n	800618c <f_open+0x160>
				if (mode & FA_CREATE_NEW) {
 8006104:	0776      	lsls	r6, r6, #29
 8006106:	f100 80c9 	bmi.w	800629c <f_open+0x270>
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
 800610a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800610e:	f013 0f11 	tst.w	r3, #17
 8006112:	d0bc      	beq.n	800608e <f_open+0x62>
						res = FR_DENIED;
 8006114:	2007      	movs	r0, #7
 8006116:	e08e      	b.n	8006236 <f_open+0x20a>
					st_32(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8006118:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800611a:	f7fd f933 	bl	8003384 <get_fattime>
 800611e:	4601      	mov	r1, r0
 8006120:	360e      	adds	r6, #14
 8006122:	4630      	mov	r0, r6
 8006124:	f7fe f8d5 	bl	80042d2 <st_32>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006128:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800612a:	7828      	ldrb	r0, [r5, #0]
 800612c:	f7ff fd9f 	bl	8005c6e <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006130:	2320      	movs	r3, #32
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006132:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006134:	4682      	mov	sl, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006136:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006138:	4628      	mov	r0, r5
 800613a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800613c:	f7fe f9c2 	bl	80044c4 <st_clust>
					st_32(dj.dir + DIR_FileSize, 0);
 8006140:	9b16      	ldr	r3, [sp, #88]	@ 0x58
	*ptr++ = (BYTE)val; val >>= 8;
 8006142:	2200      	movs	r2, #0
 8006144:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8006146:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8006148:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800614a:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800614c:	2301      	movs	r3, #1
 800614e:	712b      	strb	r3, [r5, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006150:	f1ba 0f00 	cmp.w	sl, #0
 8006154:	d0d3      	beq.n	80060fe <f_open+0xd2>
						res = remove_chain(&dj.obj, cl, 0);
 8006156:	4651      	mov	r1, sl
 8006158:	a806      	add	r0, sp, #24
						sc = fs->winsect;
 800615a:	e9d5 6708 	ldrd	r6, r7, [r5, #32]
						res = remove_chain(&dj.obj, cl, 0);
 800615e:	f7fe fc3d 	bl	80049dc <remove_chain>
						if (res == FR_OK) {
 8006162:	2800      	cmp	r0, #0
 8006164:	d167      	bne.n	8006236 <f_open+0x20a>
							res = move_window(fs, sc);
 8006166:	463b      	mov	r3, r7
 8006168:	4632      	mov	r2, r6
 800616a:	4628      	mov	r0, r5
 800616c:	f7fe f9b6 	bl	80044dc <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006170:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006174:	e7bf      	b.n	80060f6 <f_open+0xca>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006176:	2800      	cmp	r0, #0
 8006178:	d15d      	bne.n	8006236 <f_open+0x20a>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800617a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800617e:	06d8      	lsls	r0, r3, #27
 8006180:	f100 808e 	bmi.w	80062a0 <f_open+0x274>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006184:	07b1      	lsls	r1, r6, #30
 8006186:	d501      	bpl.n	800618c <f_open+0x160>
 8006188:	07da      	lsls	r2, r3, #31
 800618a:	d4c3      	bmi.n	8006114 <f_open+0xe8>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
			fp->dir_ptr = dj.dir;
 800618c:	9916      	ldr	r1, [sp, #88]	@ 0x58
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800618e:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 8006192:	65a1      	str	r1, [r4, #88]	@ 0x58
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006194:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
		}
#endif

		if (res == FR_OK) {
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006198:	7828      	ldrb	r0, [r5, #0]
 800619a:	2804      	cmp	r0, #4
 800619c:	d152      	bne.n	8006244 <f_open+0x218>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800619e:	9b08      	ldr	r3, [sp, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
 80061a0:	4621      	mov	r1, r4
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80061a2:	f89d 201f 	ldrb.w	r2, [sp, #31]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80061a6:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80061a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80061aa:	6d28      	ldr	r0, [r5, #80]	@ 0x50
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80061ac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061b0:	4313      	orrs	r3, r2
 80061b2:	6263      	str	r3, [r4, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80061b4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80061b6:	62a3      	str	r3, [r4, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80061b8:	f7ff fd44 	bl	8005c44 <init_alloc_info.isra.0>
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
			fp->obj.id = fs->id;
 80061bc:	88eb      	ldrh	r3, [r5, #6]
			fp->flag = mode;	/* Set file access mode */
			fp->err = 0;		/* Clear error flag */
			fp->sect = 0;		/* Invalidate current data sector */
 80061be:	2200      	movs	r2, #0
			fp->err = 0;		/* Clear error flag */
 80061c0:	f04f 0a00 	mov.w	sl, #0
			fp->fptr = 0;		/* Set file pointer top of the file */
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80061c4:	f104 075c 	add.w	r7, r4, #92	@ 0x5c
			fp->obj.id = fs->id;
 80061c8:	80a3      	strh	r3, [r4, #4]
			fp->sect = 0;		/* Invalidate current data sector */
 80061ca:	2300      	movs	r3, #0
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80061cc:	4651      	mov	r1, sl
 80061ce:	4638      	mov	r0, r7
			fp->obj.fs = fs;	/* Validate the file object */
 80061d0:	6025      	str	r5, [r4, #0]
			fp->flag = mode;	/* Set file access mode */
 80061d2:	f884 9030 	strb.w	r9, [r4, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 80061d6:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 80061da:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			fp->fptr = 0;		/* Set file pointer top of the file */
 80061de:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80061e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061e6:	f00e fc5d 	bl	8014aa4 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80061ea:	f019 0f20 	tst.w	r9, #32
 80061ee:	d025      	beq.n	800623c <f_open+0x210>
 80061f0:	e9d4 6904 	ldrd	r6, r9, [r4, #16]
 80061f4:	ea56 0309 	orrs.w	r3, r6, r9
 80061f8:	d020      	beq.n	800623c <f_open+0x210>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061fa:	f8b5 b00a 	ldrh.w	fp, [r5, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061fe:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006200:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006204:	45b3      	cmp	fp, r6
 8006206:	eb7a 0309 	sbcs.w	r3, sl, r9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800620a:	e9c4 690e 	strd	r6, r9, [r4, #56]	@ 0x38
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800620e:	d224      	bcs.n	800625a <f_open+0x22e>
					clst = get_fat(&fp->obj, clst);
 8006210:	4620      	mov	r0, r4
 8006212:	f7fe fa2b 	bl	800466c <get_fat>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006216:	ebb6 060b 	subs.w	r6, r6, fp
					clst = get_fat(&fp->obj, clst);
 800621a:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800621c:	f169 0900 	sbc.w	r9, r9, #0
					if (clst <= 1) res = FR_INT_ERR;
 8006220:	2801      	cmp	r0, #1
 8006222:	d937      	bls.n	8006294 <f_open+0x268>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d037      	beq.n	8006298 <f_open+0x26c>
 8006228:	45b3      	cmp	fp, r6
 800622a:	eb7a 0309 	sbcs.w	r3, sl, r9
 800622e:	d3ef      	bcc.n	8006210 <f_open+0x1e4>
 8006230:	2000      	movs	r0, #0
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8006232:	6421      	str	r1, [r4, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006234:	b190      	cbz	r0, 800625c <f_open+0x230>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006236:	2300      	movs	r3, #0
 8006238:	4680      	mov	r8, r0
 800623a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800623c:	4640      	mov	r0, r8
 800623e:	b01d      	add	sp, #116	@ 0x74
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006244:	f7ff fd13 	bl	8005c6e <ld_clust.isra.0>
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8006248:	2300      	movs	r3, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800624a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 800624c:	f101 001c 	add.w	r0, r1, #28
 8006250:	f7fe f839 	bl	80042c6 <ld_32>
 8006254:	6163      	str	r3, [r4, #20]
 8006256:	6120      	str	r0, [r4, #16]
 8006258:	e7b0      	b.n	80061bc <f_open+0x190>
				fp->clust = clst;
 800625a:	6421      	str	r1, [r4, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800625c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0eb      	beq.n	800623c <f_open+0x210>
					sc = clst2sect(fs, clst);
 8006264:	4628      	mov	r0, r5
 8006266:	f7fe f863 	bl	8004330 <clst2sect>
					if (sc == 0) {
 800626a:	ea50 0301 	orrs.w	r3, r0, r1
 800626e:	d019      	beq.n	80062a4 <f_open+0x278>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006270:	0a76      	lsrs	r6, r6, #9
 8006272:	ea46 56c9 	orr.w	r6, r6, r9, lsl #23
 8006276:	1832      	adds	r2, r6, r0
 8006278:	f141 0300 	adc.w	r3, r1, #0
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800627c:	4639      	mov	r1, r7
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800627e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006282:	7868      	ldrb	r0, [r5, #1]
 8006284:	2501      	movs	r5, #1
 8006286:	9500      	str	r5, [sp, #0]
 8006288:	f7fe f800 	bl	800428c <disk_read>
 800628c:	2800      	cmp	r0, #0
 800628e:	d0d5      	beq.n	800623c <f_open+0x210>
 8006290:	4628      	mov	r0, r5
 8006292:	e7d0      	b.n	8006236 <f_open+0x20a>
					if (clst <= 1) res = FR_INT_ERR;
 8006294:	2002      	movs	r0, #2
 8006296:	e7cc      	b.n	8006232 <f_open+0x206>
 8006298:	2001      	movs	r0, #1
 800629a:	e7ca      	b.n	8006232 <f_open+0x206>
					res = FR_EXIST;				/* Cannot create as new file */
 800629c:	2008      	movs	r0, #8
 800629e:	e7ca      	b.n	8006236 <f_open+0x20a>
					res = FR_NO_FILE;
 80062a0:	2004      	movs	r0, #4
 80062a2:	e7c8      	b.n	8006236 <f_open+0x20a>
						res = FR_INT_ERR;
 80062a4:	2002      	movs	r0, #2
 80062a6:	e7c6      	b.n	8006236 <f_open+0x20a>
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 80062a8:	f04f 0809 	mov.w	r8, #9
 80062ac:	e7c6      	b.n	800623c <f_open+0x210>

080062ae <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 80062ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b2:	b089      	sub	sp, #36	@ 0x24
 80062b4:	4690      	mov	r8, r2
 80062b6:	468a      	mov	sl, r1
 80062b8:	4604      	mov	r4, r0
 80062ba:	9302      	str	r3, [sp, #8]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80062bc:	2300      	movs	r3, #0
 80062be:	9a02      	ldr	r2, [sp, #8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80062c0:	a907      	add	r1, sp, #28
	*br = 0;	/* Clear read byte counter */
 80062c2:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80062c4:	f7fe f89e 	bl	8004404 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062c8:	4606      	mov	r6, r0
 80062ca:	bba0      	cbnz	r0, 8006336 <f_read+0x88>
 80062cc:	f894 6031 	ldrb.w	r6, [r4, #49]	@ 0x31
 80062d0:	bb8e      	cbnz	r6, 8006336 <f_read+0x88>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80062d2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80062d6:	f013 0301 	ands.w	r3, r3, #1
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	f000 80bd 	beq.w	800645a <f_read+0x1ac>
	remain = fp->obj.objsize - fp->fptr;
 80062e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80062e4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80062e8:	1a1b      	subs	r3, r3, r0
 80062ea:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062ee:	4543      	cmp	r3, r8
 80062f0:	f172 0200 	sbcs.w	r2, r2, #0
 80062f4:	bf38      	it	cc
 80062f6:	4698      	movcc	r8, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80062f8:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80062fc:	9304      	str	r3, [sp, #16]
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80062fe:	f1b8 0f00 	cmp.w	r8, #0
 8006302:	d018      	beq.n	8006336 <f_read+0x88>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006304:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 8006308:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8095 	bne.w	800643c <f_read+0x18e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006312:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006316:	0a42      	lsrs	r2, r0, #9
 8006318:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800631c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8006320:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8006322:	4013      	ands	r3, r2
 8006324:	d11a      	bne.n	800635c <f_read+0xae>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006326:	4301      	orrs	r1, r0
 8006328:	d109      	bne.n	800633e <f_read+0x90>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800632a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800632c:	2801      	cmp	r0, #1
 800632e:	d80d      	bhi.n	800634c <f_read+0x9e>
 8006330:	2602      	movs	r6, #2
 8006332:	f884 6031 	strb.w	r6, [r4, #49]	@ 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006336:	4630      	mov	r0, r6
 8006338:	b009      	add	sp, #36	@ 0x24
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800633e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006340:	4620      	mov	r0, r4
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	f7fe f992 	bl	800466c <get_fat>
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	e7ef      	b.n	800632c <f_read+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800634c:	1c42      	adds	r2, r0, #1
 800634e:	d104      	bne.n	800635a <f_read+0xac>
 8006350:	2301      	movs	r3, #1
 8006352:	9e03      	ldr	r6, [sp, #12]
 8006354:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
 8006358:	e7ed      	b.n	8006336 <f_read+0x88>
				fp->clust = clst;				/* Update current cluster */
 800635a:	6420      	str	r0, [r4, #64]	@ 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800635c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800635e:	4658      	mov	r0, fp
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	f7fd ffe5 	bl	8004330 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006366:	ea50 0201 	orrs.w	r2, r0, r1
 800636a:	d0e1      	beq.n	8006330 <f_read+0x82>
			sect += csect;
 800636c:	9b05      	ldr	r3, [sp, #20]
 800636e:	181f      	adds	r7, r3, r0
 8006370:	f141 0900 	adc.w	r9, r1, #0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8006374:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 8006378:	d338      	bcc.n	80063ec <f_read+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800637a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800637e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006382:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006386:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800638a:	4291      	cmp	r1, r2
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800638c:	4651      	mov	r1, sl
					cc = fs->csize - csect;
 800638e:	bf88      	it	hi
 8006390:	1ad5      	subhi	r5, r2, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006392:	463a      	mov	r2, r7
 8006394:	464b      	mov	r3, r9
 8006396:	9500      	str	r5, [sp, #0]
 8006398:	f7fd ff78 	bl	800428c <disk_read>
 800639c:	2800      	cmp	r0, #0
 800639e:	d1d7      	bne.n	8006350 <f_read+0xa2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80063a0:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da10      	bge.n	80063ca <f_read+0x11c>
 80063a8:	e9d4 0312 	ldrd	r0, r3, [r4, #72]	@ 0x48
 80063ac:	1bc0      	subs	r0, r0, r7
 80063ae:	eb63 0309 	sbc.w	r3, r3, r9
 80063b2:	42a8      	cmp	r0, r5
 80063b4:	f173 0300 	sbcs.w	r3, r3, #0
 80063b8:	d207      	bcs.n	80063ca <f_read+0x11c>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80063ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063be:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 80063c2:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 80063c6:	f00e fc18 	bl	8014bfa <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80063ca:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80063cc:	9b02      	ldr	r3, [sp, #8]
 80063ce:	eba8 0805 	sub.w	r8, r8, r5
 80063d2:	9a02      	ldr	r2, [sp, #8]
 80063d4:	44aa      	add	sl, r5
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	442b      	add	r3, r5
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	@ 0x38
 80063e0:	195b      	adds	r3, r3, r5
 80063e2:	f142 0200 	adc.w	r2, r2, #0
 80063e6:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
 80063ea:	e788      	b.n	80062fe <f_read+0x50>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80063ec:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 80063f0:	454b      	cmp	r3, r9
 80063f2:	bf08      	it	eq
 80063f4:	42ba      	cmpeq	r2, r7
 80063f6:	d01f      	beq.n	8006438 <f_read+0x18a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80063f8:	f994 1030 	ldrsb.w	r1, [r4, #48]	@ 0x30
 80063fc:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006400:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006404:	2900      	cmp	r1, #0
 8006406:	da0c      	bge.n	8006422 <f_read+0x174>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006408:	2101      	movs	r1, #1
 800640a:	9100      	str	r1, [sp, #0]
 800640c:	4629      	mov	r1, r5
 800640e:	f7fd ff47 	bl	80042a0 <disk_write>
 8006412:	2800      	cmp	r0, #0
 8006414:	d19c      	bne.n	8006350 <f_read+0xa2>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006416:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800641a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006422:	2301      	movs	r3, #1
 8006424:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006428:	463a      	mov	r2, r7
 800642a:	4629      	mov	r1, r5
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	464b      	mov	r3, r9
 8006430:	f7fd ff2c 	bl	800428c <disk_read>
 8006434:	2800      	cmp	r0, #0
 8006436:	d18b      	bne.n	8006350 <f_read+0xa2>
			fp->sect = sect;
 8006438:	e9c4 7912 	strd	r7, r9, [r4, #72]	@ 0x48
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800643c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800643e:	4650      	mov	r0, sl
 8006440:	9b04      	ldr	r3, [sp, #16]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006442:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006446:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800644a:	4419      	add	r1, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800644c:	4545      	cmp	r5, r8
 800644e:	bf28      	it	cs
 8006450:	4645      	movcs	r5, r8
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006452:	462a      	mov	r2, r5
 8006454:	f00e fbd1 	bl	8014bfa <memcpy>
 8006458:	e7b8      	b.n	80063cc <f_read+0x11e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800645a:	2607      	movs	r6, #7
 800645c:	e76b      	b.n	8006336 <f_read+0x88>

0800645e <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800645e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006462:	b089      	sub	sp, #36	@ 0x24
 8006464:	4690      	mov	r8, r2
 8006466:	468b      	mov	fp, r1
 8006468:	4604      	mov	r4, r0
 800646a:	9303      	str	r3, [sp, #12]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800646c:	2300      	movs	r3, #0
 800646e:	9a03      	ldr	r2, [sp, #12]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006470:	a907      	add	r1, sp, #28
	*bw = 0;	/* Clear write byte counter */
 8006472:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006474:	f7fd ffc6 	bl	8004404 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006478:	4606      	mov	r6, r0
 800647a:	bbc8      	cbnz	r0, 80064f0 <f_write+0x92>
 800647c:	f894 6031 	ldrb.w	r6, [r4, #49]	@ 0x31
 8006480:	bbb6      	cbnz	r6, 80064f0 <f_write+0x92>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006482:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006486:	079a      	lsls	r2, r3, #30
 8006488:	f140 80e3 	bpl.w	8006652 <f_write+0x1f4>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800648c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006490:	f89a 3000 	ldrb.w	r3, [sl]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d005      	beq.n	80064a4 <f_write+0x46>
 8006498:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800649a:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800649e:	bf28      	it	cs
 80064a0:	ea6f 0803 	mvncs.w	r8, r3
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80064a4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80064a8:	9304      	str	r3, [sp, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80064aa:	f1b8 0f00 	cmp.w	r8, #0
 80064ae:	d019      	beq.n	80064e4 <f_write+0x86>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80064b0:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	@ 0x38
 80064b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	f040 80b5 	bne.w	8006628 <f_write+0x1ca>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80064be:	f8ba 900a 	ldrh.w	r9, [sl, #10]
 80064c2:	0a5a      	lsrs	r2, r3, #9
 80064c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80064c8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
 80064cc:	ea19 0902 	ands.w	r9, r9, r2
 80064d0:	d122      	bne.n	8006518 <f_write+0xba>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80064d2:	430b      	orrs	r3, r1
 80064d4:	d110      	bne.n	80064f8 <f_write+0x9a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80064d6:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80064d8:	b981      	cbnz	r1, 80064fc <f_write+0x9e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80064da:	4620      	mov	r0, r4
 80064dc:	f7fe fe46 	bl	800516c <create_chain>
 80064e0:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80064e2:	b958      	cbnz	r0, 80064fc <f_write+0x9e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80064e4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80064e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ec:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
}
 80064f0:	4630      	mov	r0, r6
 80064f2:	b009      	add	sp, #36	@ 0x24
 80064f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80064f8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80064fa:	e7ee      	b.n	80064da <f_write+0x7c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80064fc:	2901      	cmp	r1, #1
 80064fe:	d103      	bne.n	8006508 <f_write+0xaa>
 8006500:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006502:	f884 6031 	strb.w	r6, [r4, #49]	@ 0x31
 8006506:	e7f3      	b.n	80064f0 <f_write+0x92>
 8006508:	1c4b      	adds	r3, r1, #1
 800650a:	d101      	bne.n	8006510 <f_write+0xb2>
 800650c:	2601      	movs	r6, #1
 800650e:	e7f8      	b.n	8006502 <f_write+0xa4>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006510:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8006512:	6421      	str	r1, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006514:	b903      	cbnz	r3, 8006518 <f_write+0xba>
 8006516:	60a1      	str	r1, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006518:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	da11      	bge.n	8006544 <f_write+0xe6>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006520:	2301      	movs	r3, #1
 8006522:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006526:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8006530:	f7fd feb6 	bl	80042a0 <disk_write>
 8006534:	2800      	cmp	r0, #0
 8006536:	d1e9      	bne.n	800650c <f_write+0xae>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006538:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800653c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006540:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006544:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006546:	4650      	mov	r0, sl
 8006548:	f7fd fef2 	bl	8004330 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800654c:	ea50 0301 	orrs.w	r3, r0, r1
 8006550:	d0d6      	beq.n	8006500 <f_write+0xa2>
			sect += csect;
 8006552:	eb19 0700 	adds.w	r7, r9, r0
 8006556:	f141 0300 	adc.w	r3, r1, #0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800655a:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 800655e:	d346      	bcc.n	80065ee <f_write+0x190>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006560:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8006564:	eb09 2158 	add.w	r1, r9, r8, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006568:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800656c:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006570:	4291      	cmp	r1, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006572:	4659      	mov	r1, fp
 8006574:	9305      	str	r3, [sp, #20]
					cc = fs->csize - csect;
 8006576:	bf88      	it	hi
 8006578:	eba2 0509 	subhi.w	r5, r2, r9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800657c:	463a      	mov	r2, r7
 800657e:	9500      	str	r5, [sp, #0]
 8006580:	f7fd fe8e 	bl	80042a0 <disk_write>
 8006584:	2800      	cmp	r0, #0
 8006586:	d1c1      	bne.n	800650c <f_write+0xae>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	e9d4 1212 	ldrd	r1, r2, [r4, #72]	@ 0x48
 800658e:	1bc9      	subs	r1, r1, r7
 8006590:	eb62 0203 	sbc.w	r2, r2, r3
 8006594:	42a9      	cmp	r1, r5
 8006596:	f172 0200 	sbcs.w	r2, r2, #0
 800659a:	d20d      	bcs.n	80065b8 <f_write+0x15a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800659c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065a0:	eb0b 2141 	add.w	r1, fp, r1, lsl #9
 80065a4:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80065a8:	f00e fb27 	bl	8014bfa <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80065ac:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80065b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065b4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80065b8:	026d      	lsls	r5, r5, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	eba8 0805 	sub.w	r8, r8, r5
 80065c0:	9a03      	ldr	r2, [sp, #12]
 80065c2:	44ab      	add	fp, r5
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	442b      	add	r3, r5
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80065ce:	18ad      	adds	r5, r5, r2
 80065d0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80065d4:	f143 0300 	adc.w	r3, r3, #0
 80065d8:	42a9      	cmp	r1, r5
 80065da:	eb72 0003 	sbcs.w	r0, r2, r3
 80065de:	bf3c      	itt	cc
 80065e0:	4629      	movcc	r1, r5
 80065e2:	461a      	movcc	r2, r3
 80065e4:	e9c4 530e 	strd	r5, r3, [r4, #56]	@ 0x38
 80065e8:	e9c4 1204 	strd	r1, r2, [r4, #16]
 80065ec:	e75d      	b.n	80064aa <f_write+0x4c>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065ee:	e9d4 1212 	ldrd	r1, r2, [r4, #72]	@ 0x48
				fp->fptr < fp->obj.objsize &&
 80065f2:	e9d4 500e 	ldrd	r5, r0, [r4, #56]	@ 0x38
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065f6:	429a      	cmp	r2, r3
 80065f8:	bf08      	it	eq
 80065fa:	42b9      	cmpeq	r1, r7
 80065fc:	d012      	beq.n	8006624 <f_write+0x1c6>
 80065fe:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8006602:	428d      	cmp	r5, r1
 8006604:	4190      	sbcs	r0, r2
 8006606:	d20d      	bcs.n	8006624 <f_write+0x1c6>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006608:	2201      	movs	r2, #1
 800660a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800660e:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	9200      	str	r2, [sp, #0]
 8006616:	463a      	mov	r2, r7
 8006618:	f7fd fe38 	bl	800428c <disk_read>
				fp->fptr < fp->obj.objsize &&
 800661c:	9b05      	ldr	r3, [sp, #20]
 800661e:	2800      	cmp	r0, #0
 8006620:	f47f af74 	bne.w	800650c <f_write+0xae>
			fp->sect = sect;
 8006624:	e9c4 7312 	strd	r7, r3, [r4, #72]	@ 0x48
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006628:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800662a:	4659      	mov	r1, fp
 800662c:	9b04      	ldr	r3, [sp, #16]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800662e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006632:	f5c0 7500 	rsb	r5, r0, #512	@ 0x200
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006636:	4418      	add	r0, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006638:	4545      	cmp	r5, r8
 800663a:	bf28      	it	cs
 800663c:	4645      	movcs	r5, r8
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800663e:	462a      	mov	r2, r5
 8006640:	f00e fadb 	bl	8014bfa <memcpy>
		fp->flag |= FA_DIRTY;
 8006644:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800664c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006650:	e7b3      	b.n	80065ba <f_write+0x15c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006652:	2607      	movs	r6, #7
 8006654:	e74c      	b.n	80064f0 <f_write+0x92>

08006656 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8006656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006658:	b09b      	sub	sp, #108	@ 0x6c
 800665a:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800665c:	a903      	add	r1, sp, #12
 800665e:	f7fd fed1 	bl	8004404 <validate>
	if (res == FR_OK) {
 8006662:	4604      	mov	r4, r0
 8006664:	2800      	cmp	r0, #0
 8006666:	f040 8083 	bne.w	8006770 <f_sync+0x11a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800666a:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800666e:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 8006672:	d07d      	beq.n	8006770 <f_sync+0x11a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006674:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006676:	9e03      	ldr	r6, [sp, #12]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006678:	d510      	bpl.n	800669c <f_sync+0x46>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800667a:	2401      	movs	r4, #1
 800667c:	7870      	ldrb	r0, [r6, #1]
 800667e:	f105 015c 	add.w	r1, r5, #92	@ 0x5c
 8006682:	9400      	str	r4, [sp, #0]
 8006684:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8006688:	f7fd fe0a 	bl	80042a0 <disk_write>
 800668c:	2800      	cmp	r0, #0
 800668e:	d16f      	bne.n	8006770 <f_sync+0x11a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006690:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8006694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006698:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800669c:	7833      	ldrb	r3, [r6, #0]
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d169      	bne.n	8006776 <f_sync+0x120>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80066a2:	4628      	mov	r0, r5
 80066a4:	f7fe f982 	bl	80049ac <fill_first_frag>
				if (res == FR_OK) {
 80066a8:	4604      	mov	r4, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d160      	bne.n	8006770 <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295
 80066b2:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80066b4:	4628      	mov	r0, r5
 80066b6:	f7fe f961 	bl	800497c <fill_last_frag>
				}
				if (res == FR_OK) {
 80066ba:	4604      	mov	r4, r0
 80066bc:	2800      	cmp	r0, #0
 80066be:	d157      	bne.n	8006770 <f_sync+0x11a>
	dp->obj.fs = obj->fs;
 80066c0:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
 80066c2:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 80066c4:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 80066c6:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
 80066c8:	900b      	str	r0, [sp, #44]	@ 0x2c
	dp->obj.sclust = obj->c_scl;
 80066ca:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 80066cc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	dp->blk_ofs = obj->c_ofs;
 80066ce:	9118      	str	r1, [sp, #96]	@ 0x60
	dp->obj.stat = (BYTE)obj->c_size;
 80066d0:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80066d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80066d8:	e9cd 3008 	strd	r3, r0, [sp, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80066dc:	a804      	add	r0, sp, #16
 80066de:	f7fe f86d 	bl	80047bc <dir_sdi>
	if (res == FR_OK) {
 80066e2:	4604      	mov	r4, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d143      	bne.n	8006770 <f_sync+0x11a>
		res = load_xdir(dp);		/* Load the object's entry block */
 80066e8:	a804      	add	r0, sp, #16
 80066ea:	f7fe fecc 	bl	8005486 <load_xdir>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
					if (res == FR_OK) {
 80066ee:	4604      	mov	r4, r0
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d13d      	bne.n	8006770 <f_sync+0x11a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 80066f4:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 80066f6:	7913      	ldrb	r3, [r2, #4]
 80066f8:	f043 0320 	orr.w	r3, r3, #32
 80066fc:	7113      	strb	r3, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;		/* Update file allocation information */
 80066fe:	79eb      	ldrb	r3, [r5, #7]
 8006700:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
						st_32(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);	/* Update start cluster */
 800670a:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 800670c:	68a9      	ldr	r1, [r5, #8]
 800670e:	3034      	adds	r0, #52	@ 0x34
 8006710:	f7fd fddf 	bl	80042d2 <st_32>
						st_64(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);	/* Update file size */
 8006714:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8006716:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800671a:	3038      	adds	r0, #56	@ 0x38
 800671c:	f7fd fde1 	bl	80042e2 <st_64>
						st_64(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8006720:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8006722:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006726:	3028      	adds	r0, #40	@ 0x28
 8006728:	f7fd fddb 	bl	80042e2 <st_64>
						st_32(fs->dirbuf + XDIR_ModTime, GET_FATTIME());	/* Update modified time */
 800672c:	6d37      	ldr	r7, [r6, #80]	@ 0x50
 800672e:	f7fc fe29 	bl	8003384 <get_fattime>
 8006732:	4601      	mov	r1, r0
 8006734:	370c      	adds	r7, #12
 8006736:	4638      	mov	r0, r7
 8006738:	f7fd fdcb 	bl	80042d2 <st_32>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800673c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
						fs->dirbuf[XDIR_ModTZ] = 0;
						st_32(fs->dirbuf + XDIR_AccTime, 0);				/* Invalidate last access time */
						fs->dirbuf[XDIR_AccTZ] = 0;
						res = store_xdir(&dj);								/* Restore it to the directory */
 800673e:	a804      	add	r0, sp, #16
						fs->dirbuf[XDIR_ModTime10] = 0;
 8006740:	755c      	strb	r4, [r3, #21]
						fs->dirbuf[XDIR_ModTZ] = 0;
 8006742:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006744:	75dc      	strb	r4, [r3, #23]
						st_32(fs->dirbuf + XDIR_AccTime, 0);				/* Invalidate last access time */
 8006746:	6d33      	ldr	r3, [r6, #80]	@ 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 8006748:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800674a:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 800674c:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 800674e:	74dc      	strb	r4, [r3, #19]
						fs->dirbuf[XDIR_AccTZ] = 0;
 8006750:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006752:	761c      	strb	r4, [r3, #24]
						res = store_xdir(&dj);								/* Restore it to the directory */
 8006754:	f7fe ff0c 	bl	8005570 <store_xdir>
						if (res == FR_OK) {
 8006758:	4604      	mov	r4, r0
 800675a:	b948      	cbnz	r0, 8006770 <f_sync+0x11a>
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
					st_16(dir + DIR_LstAccDate, 0);				/* Invalidate last access date */
					fs->wflag = 1;
					res = sync_fs(fs);							/* Restore it to the directory */
 800675c:	4630      	mov	r0, r6
 800675e:	f7fe f9f1 	bl	8004b44 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006762:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
					res = sync_fs(fs);							/* Restore it to the directory */
 8006766:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676c:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8006770:	4620      	mov	r0, r4
 8006772:	b01b      	add	sp, #108	@ 0x6c
 8006774:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = move_window(fs, fp->dir_sect);
 8006776:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	@ 0x50
 800677a:	4630      	mov	r0, r6
 800677c:	f7fd feae 	bl	80044dc <move_window>
				if (res == FR_OK) {
 8006780:	4604      	mov	r4, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d1f4      	bne.n	8006770 <f_sync+0x11a>
					dir = fp->dir_ptr;
 8006786:	6daf      	ldr	r7, [r5, #88]	@ 0x58
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8006788:	7afb      	ldrb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 800678a:	4639      	mov	r1, r7
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 800678c:	f043 0320 	orr.w	r3, r3, #32
 8006790:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8006792:	68aa      	ldr	r2, [r5, #8]
 8006794:	6828      	ldr	r0, [r5, #0]
 8006796:	f7fd fe95 	bl	80044c4 <st_clust>
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800679a:	6929      	ldr	r1, [r5, #16]
 800679c:	f107 001c 	add.w	r0, r7, #28
 80067a0:	f7fd fd97 	bl	80042d2 <st_32>
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
 80067a4:	f7fc fdee 	bl	8003384 <get_fattime>
 80067a8:	4601      	mov	r1, r0
 80067aa:	f107 0016 	add.w	r0, r7, #22
 80067ae:	f7fd fd90 	bl	80042d2 <st_32>
					fs->wflag = 1;
 80067b2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80067b4:	74bc      	strb	r4, [r7, #18]
	*ptr++ = (BYTE)val;
 80067b6:	74fc      	strb	r4, [r7, #19]
					fs->wflag = 1;
 80067b8:	7133      	strb	r3, [r6, #4]
 80067ba:	e7cf      	b.n	800675c <f_sync+0x106>

080067bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80067bc:	b513      	push	{r0, r1, r4, lr}
 80067be:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80067c0:	f7ff ff49 	bl	8006656 <f_sync>
	if (res == FR_OK)
 80067c4:	b928      	cbnz	r0, 80067d2 <f_close+0x16>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80067c6:	a901      	add	r1, sp, #4
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7fd fe1b 	bl	8004404 <validate>
		if (res == FR_OK) {
 80067ce:	b900      	cbnz	r0, 80067d2 <f_close+0x16>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80067d0:	6020      	str	r0, [r4, #0]
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80067d2:	b002      	add	sp, #8
 80067d4:	bd10      	pop	{r4, pc}
	...

080067d8 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	b0a1      	sub	sp, #132	@ 0x84
 80067de:	460e      	mov	r6, r1
 80067e0:	4614      	mov	r4, r2
 80067e2:	9015      	str	r0, [sp, #84]	@ 0x54
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 80067e4:	a815      	add	r0, sp, #84	@ 0x54
{
 80067e6:	930d      	str	r3, [sp, #52]	@ 0x34
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 80067e8:	f7fd fdd7 	bl	800439a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f2c0 8711 	blt.w	8007614 <f_mkfs+0xe3c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 80067f2:	4b76      	ldr	r3, [pc, #472]	@ (80069cc <f_mkfs+0x1f4>)
 80067f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80067f8:	b10b      	cbz	r3, 80067fe <f_mkfs+0x26>
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 80067fe:	b2c3      	uxtb	r3, r0
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8006800:	4618      	mov	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8006802:	9303      	str	r3, [sp, #12]
	ds = disk_initialize(pdrv);
 8006804:	f7fd fd3c 	bl	8004280 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8006808:	07c5      	lsls	r5, r0, #31
 800680a:	f100 8706 	bmi.w	800761a <f_mkfs+0xe42>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800680e:	0740      	lsls	r0, r0, #29
 8006810:	f100 8706 	bmi.w	8007620 <f_mkfs+0xe48>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8006814:	4b6e      	ldr	r3, [pc, #440]	@ (80069d0 <f_mkfs+0x1f8>)
 8006816:	2e00      	cmp	r6, #0
 8006818:	bf08      	it	eq
 800681a:	461e      	moveq	r6, r3
	sz_blk = opt->align;
 800681c:	6873      	ldr	r3, [r6, #4]
 800681e:	9317      	str	r3, [sp, #92]	@ 0x5c
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 8006820:	b923      	cbnz	r3, 800682c <f_mkfs+0x54>
 8006822:	aa17      	add	r2, sp, #92	@ 0x5c
 8006824:	2103      	movs	r1, #3
 8006826:	9803      	ldr	r0, [sp, #12]
 8006828:	f7fd fd44 	bl	80042b4 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800682c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800682e:	1e53      	subs	r3, r2, #1
 8006830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006834:	d201      	bcs.n	800683a <f_mkfs+0x62>
 8006836:	421a      	tst	r2, r3
 8006838:	d001      	beq.n	800683e <f_mkfs+0x66>
 800683a:	2301      	movs	r3, #1
 800683c:	9317      	str	r3, [sp, #92]	@ 0x5c
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800683e:	7873      	ldrb	r3, [r6, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8006840:	f8d6 a008 	ldr.w	sl, [r6, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8006844:	9306      	str	r3, [sp, #24]
 8006846:	3b01      	subs	r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	bf88      	it	hi
 800684e:	2301      	movhi	r3, #1
 8006850:	9306      	str	r3, [sp, #24]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8006852:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800685a:	d247      	bcs.n	80068ec <f_mkfs+0x114>
 800685c:	f01a 0f0f 	tst.w	sl, #15
 8006860:	bf18      	it	ne
 8006862:	f44f 7a00 	movne.w	sl, #512	@ 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8006866:	68f5      	ldr	r5, [r6, #12]
 8006868:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 800686c:	d841      	bhi.n	80068f2 <f_mkfs+0x11a>
 800686e:	1e6b      	subs	r3, r5, #1
 8006870:	422b      	tst	r3, r5
 8006872:	bf18      	it	ne
 8006874:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8006876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	f0c0 86d3 	bcc.w	8007626 <f_mkfs+0xe4e>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8006880:	2c00      	cmp	r4, #0
 8006882:	f000 86d0 	beq.w	8007626 <f_mkfs+0xe4e>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_32(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_32(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800688a:	2101      	movs	r1, #1
 800688c:	9803      	ldr	r0, [sp, #12]
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800688e:	7836      	ldrb	r6, [r6, #0]
	b_vol = sz_vol = 0;
 8006890:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006894:	aa18      	add	r2, sp, #96	@ 0x60
 8006896:	f7fd fd0d 	bl	80042b4 <disk_ioctl>
 800689a:	2800      	cmp	r0, #0
 800689c:	f040 8163 	bne.w	8006b66 <f_mkfs+0x38e>
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 80068a0:	f006 030f 	and.w	r3, r6, #15
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80068a4:	f016 0108 	ands.w	r1, r6, #8
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 80068a8:	9309      	str	r3, [sp, #36]	@ 0x24
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80068aa:	d12f      	bne.n	800690c <f_mkfs+0x134>
			/* Create a single-partition on the drive in this function */
#if FF_LBA64
			if (sz_vol >= FF_MIN_GPT) {	/* Which partition type to create, MBR or GPT? */
 80068ac:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	@ 0x60
 80068b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068b4:	f172 0000 	sbcs.w	r0, r2, #0
 80068b8:	d31d      	bcc.n	80068f6 <f_mkfs+0x11e>
				fsopt |= 0x80;		/* Partitioning is in GPT */
 80068ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068bc:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80068c0:	9009      	str	r0, [sp, #36]	@ 0x24
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
 80068c2:	f46f 6002 	mvn.w	r0, #2080	@ 0x820
 80068c6:	181b      	adds	r3, r3, r0
 80068c8:	f162 0200 	sbc.w	r2, r2, #0
 80068cc:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
 80068d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	910a      	str	r1, [sp, #40]	@ 0x28
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 80068d8:	e9dd 7118 	ldrd	r7, r1, [sp, #96]	@ 0x60
 80068dc:	2f80      	cmp	r7, #128	@ 0x80
 80068de:	f171 0300 	sbcs.w	r3, r1, #0
 80068e2:	d21a      	bcs.n	800691a <f_mkfs+0x142>
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
		DWORD szb_bit, szb_case, sum, nbit, clu, clen[3];
		WCHAR ch, si;
		UINT j, st;

		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
 80068e4:	200e      	movs	r0, #14
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
 80068e6:	b021      	add	sp, #132	@ 0x84
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 80068ec:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 80068f0:	e7b9      	b.n	8006866 <f_mkfs+0x8e>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 80068f2:	2500      	movs	r5, #0
 80068f4:	e7bf      	b.n	8006876 <f_mkfs+0x9e>
				if (sz_vol > N_SEC_TRACK) {
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	f172 0000 	sbcs.w	r0, r2, #0
 80068fc:	d30a      	bcc.n	8006914 <f_mkfs+0x13c>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80068fe:	3b3f      	subs	r3, #63	@ 0x3f
 8006900:	f142 32ff 	adc.w	r2, r2, #4294967295
 8006904:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
 8006908:	233f      	movs	r3, #63	@ 0x3f
 800690a:	e7e3      	b.n	80068d4 <f_mkfs+0xfc>
	b_vol = sz_vol = 0;
 800690c:	4603      	mov	r3, r0
 800690e:	9004      	str	r0, [sp, #16]
 8006910:	930a      	str	r3, [sp, #40]	@ 0x28
 8006912:	e7e1      	b.n	80068d8 <f_mkfs+0x100>
 8006914:	460b      	mov	r3, r1
 8006916:	9104      	str	r1, [sp, #16]
 8006918:	e7fa      	b.n	8006910 <f_mkfs+0x138>
	sz_au /= ss;	/* Byte --> Sector */
 800691a:	0a6b      	lsrs	r3, r5, #9
 800691c:	9302      	str	r3, [sp, #8]
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
 800691e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006920:	f013 0304 	ands.w	r3, r3, #4
 8006924:	d03e      	beq.n	80069a4 <f_mkfs+0x1cc>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64M sectors or sz_au > 128 sectors? */
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	f003 0607 	and.w	r6, r3, #7
 800692c:	2e04      	cmp	r6, #4
 800692e:	d00f      	beq.n	8006950 <f_mkfs+0x178>
 8006930:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8006934:	f171 0100 	sbcs.w	r1, r1, #0
 8006938:	d245      	bcs.n	80069c6 <f_mkfs+0x1ee>
 800693a:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 800693e:	d242      	bcs.n	80069c6 <f_mkfs+0x1ee>
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8006940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006942:	0799      	lsls	r1, r3, #30
 8006944:	f003 0601 	and.w	r6, r3, #1
 8006948:	d538      	bpl.n	80069bc <f_mkfs+0x1e4>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800694a:	f1c6 0603 	rsb	r6, r6, #3
 800694e:	b2f6      	uxtb	r6, r6
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8006950:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006952:	0a5b      	lsrs	r3, r3, #9
 8006954:	930b      	str	r3, [sp, #44]	@ 0x2c
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8006956:	f7fc fd15 	bl	8003384 <get_fattime>
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 800695a:	2e04      	cmp	r6, #4
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 800695c:	eb00 0307 	add.w	r3, r0, r7
 8006960:	e9dd 8b18 	ldrd	r8, fp, [sp, #96]	@ 0x60
 8006964:	9310      	str	r3, [sp, #64]	@ 0x40
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 8006966:	d037      	beq.n	80069d8 <f_mkfs+0x200>
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8006968:	f3ca 1316 	ubfx	r3, sl, #4, #23
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800696c:	2e03      	cmp	r6, #3
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 800696e:	930e      	str	r3, [sp, #56]	@ 0x38
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8006970:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006972:	f103 32ff 	add.w	r2, r3, #4294967295
 8006976:	f1c3 0e00 	rsb	lr, r3, #0
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800697a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800697c:	f040 845e 	bne.w	800723c <f_mkfs+0xa64>
				if (pau == 0) {	/* AU auto-selection */
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f040 8423 	bne.w	80071ce <f_mkfs+0x9f6>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006988:	ea4f 4158 	mov.w	r1, r8, lsr #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800698c:	4a11      	ldr	r2, [pc, #68]	@ (80069d4 <f_mkfs+0x1fc>)
 800698e:	2601      	movs	r6, #1
 8006990:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 83b1 	beq.w	80070fc <f_mkfs+0x924>
 800699a:	428b      	cmp	r3, r1
 800699c:	f200 83ae 	bhi.w	80070fc <f_mkfs+0x924>
 80069a0:	0076      	lsls	r6, r6, #1
 80069a2:	e7f5      	b.n	8006990 <f_mkfs+0x1b8>
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295
 80069a8:	42ba      	cmp	r2, r7
 80069aa:	418b      	sbcs	r3, r1
 80069ac:	d39a      	bcc.n	80068e4 <f_mkfs+0x10c>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 80069ae:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	bf28      	it	cs
 80069b6:	2380      	movcs	r3, #128	@ 0x80
 80069b8:	9302      	str	r3, [sp, #8]
 80069ba:	e7c1      	b.n	8006940 <f_mkfs+0x168>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80069bc:	2e00      	cmp	r6, #0
 80069be:	f000 8635 	beq.w	800762c <f_mkfs+0xe54>
		fsty = FS_FAT16;
 80069c2:	2602      	movs	r6, #2
 80069c4:	e7c4      	b.n	8006950 <f_mkfs+0x178>
				fsty = FS_EXFAT; break;
 80069c6:	2604      	movs	r6, #4
 80069c8:	e7c2      	b.n	8006950 <f_mkfs+0x178>
 80069ca:	bf00      	nop
 80069cc:	20004b6c 	.word	0x20004b6c
 80069d0:	080184e0 	.word	0x080184e0
 80069d4:	080184d2 	.word	0x080184d2
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
 80069d8:	f5b8 5f80 	cmp.w	r8, #4096	@ 0x1000
 80069dc:	f17b 0300 	sbcs.w	r3, fp, #0
 80069e0:	d380      	bcc.n	80068e4 <f_mkfs+0x10c>
		if (sz_au == 0) {	/* AU auto-selection */
 80069e2:	9b02      	ldr	r3, [sp, #8]
 80069e4:	b95b      	cbnz	r3, 80069fe <f_mkfs+0x226>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
 80069e6:	f5b8 2f00 	cmp.w	r8, #524288	@ 0x80000
 80069ea:	f17b 0300 	sbcs.w	r3, fp, #0
 80069ee:	d37c      	bcc.n	8006aea <f_mkfs+0x312>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
 80069f0:	f1b8 6f80 	cmp.w	r8, #67108864	@ 0x4000000
 80069f4:	f17b 0300 	sbcs.w	r3, fp, #0
 80069f8:	d279      	bcs.n	8006aee <f_mkfs+0x316>
 80069fa:	2340      	movs	r3, #64	@ 0x40
 80069fc:	9302      	str	r3, [sp, #8]
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 80069fe:	9b04      	ldr	r3, [sp, #16]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006a00:	2500      	movs	r5, #0
 8006a02:	9a02      	ldr	r2, [sp, #8]
 8006a04:	4640      	mov	r0, r8
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8006a06:	3320      	adds	r3, #32
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006a08:	4659      	mov	r1, fp
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8006a0a:	930c      	str	r3, [sp, #48]	@ 0x30
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	f7f9 fc7f 	bl	8000310 <__aeabi_uldivmod>
 8006a12:	0080      	lsls	r0, r0, #2
 8006a14:	f200 2007 	addw	r0, r0, #519	@ 0x207
 8006a18:	0a43      	lsrs	r3, r0, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8006a1a:	980c      	ldr	r0, [sp, #48]	@ 0x30
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006a1c:	9311      	str	r3, [sp, #68]	@ 0x44
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8006a1e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	f145 31ff 	adc.w	r1, r5, #4294967295
 8006a26:	1812      	adds	r2, r2, r0
 8006a28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a2a:	eb40 0101 	adc.w	r1, r0, r1
 8006a2e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006a30:	1812      	adds	r2, r2, r0
 8006a32:	f141 0100 	adc.w	r1, r1, #0
 8006a36:	425b      	negs	r3, r3
 8006a38:	ea02 0303 	and.w	r3, r2, r3
 8006a3c:	eb60 0000 	sbc.w	r0, r0, r0
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	ea01 0300 	and.w	r3, r1, r0
 8006a46:	9306      	str	r3, [sp, #24]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8006a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4c:	1a98      	subs	r0, r3, r2
 8006a4e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8006a52:	9b06      	ldr	r3, [sp, #24]
 8006a54:	ea42 72cb 	orr.w	r2, r2, fp, lsl #31
 8006a58:	f163 0100 	sbc.w	r1, r3, #0
 8006a5c:	ea4f 035b 	mov.w	r3, fp, lsr #1
 8006a60:	4290      	cmp	r0, r2
 8006a62:	4199      	sbcs	r1, r3
 8006a64:	f4bf af3e 	bcs.w	80068e4 <f_mkfs+0x10c>
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 8006a68:	9b04      	ldr	r3, [sp, #16]
 8006a6a:	9e06      	ldr	r6, [sp, #24]
 8006a6c:	eb13 0808 	adds.w	r8, r3, r8
 8006a70:	9b05      	ldr	r3, [sp, #20]
 8006a72:	9a02      	ldr	r2, [sp, #8]
 8006a74:	f14b 0100 	adc.w	r1, fp, #0
 8006a78:	ebb8 0003 	subs.w	r0, r8, r3
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	eb61 0106 	sbc.w	r1, r1, r6
 8006a82:	f7f9 fc45 	bl	8000310 <__aeabi_uldivmod>
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8006a86:	4b75      	ldr	r3, [pc, #468]	@ (8006c5c <f_mkfs+0x484>)
 8006a88:	f1a0 0210 	sub.w	r2, r0, #16
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 8006a8c:	9012      	str	r0, [sp, #72]	@ 0x48
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	f63f af28 	bhi.w	80068e4 <f_mkfs+0x10c>
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8006a94:	4603      	mov	r3, r0
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006a96:	46a8      	mov	r8, r5
 8006a98:	462f      	mov	r7, r5
		sum = 0;							/* Table checksum to be stored in the 82 entry */
 8006a9a:	950f      	str	r5, [sp, #60]	@ 0x3c
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8006a9c:	3307      	adds	r3, #7
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006a9e:	9508      	str	r5, [sp, #32]
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8006aa0:	08da      	lsrs	r2, r3, #3
 8006aa2:	9213      	str	r2, [sp, #76]	@ 0x4c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8006aa4:	9a02      	ldr	r2, [sp, #8]
 8006aa6:	ea4f 2b42 	mov.w	fp, r2, lsl #9
 8006aaa:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006aae:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8006ab2:	920e      	str	r2, [sp, #56]	@ 0x38
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006ab4:	9a02      	ldr	r2, [sp, #8]
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8006ab6:	fbb3 f3fb 	udiv	r3, r3, fp
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006aba:	fb02 f903 	mul.w	r9, r2, r3
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	931c      	str	r3, [sp, #112]	@ 0x70
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	eb19 0903 	adds.w	r9, r9, r3
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006ac8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006aca:	f146 0a00 	adc.w	sl, r6, #0
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006ace:	f36f 0308 	bfc	r3, #0, #9
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006ad2:	462e      	mov	r6, r5
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006ad4:	9314      	str	r3, [sp, #80]	@ 0x50
			switch (st) {
 8006ad6:	b16d      	cbz	r5, 8006af4 <f_mkfs+0x31c>
 8006ad8:	2d01      	cmp	r5, #1
 8006ada:	d01c      	beq.n	8006b16 <f_mkfs+0x33e>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 8006adc:	fa16 f688 	uxtah	r6, r6, r8
 8006ae0:	fa1f f088 	uxth.w	r0, r8
				st = 0;
 8006ae4:	2500      	movs	r5, #0
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 8006ae6:	b2b6      	uxth	r6, r6
				st = 0;
 8006ae8:	e01e      	b.n	8006b28 <f_mkfs+0x350>
			sz_au = 8;
 8006aea:	2308      	movs	r3, #8
 8006aec:	e786      	b.n	80069fc <f_mkfs+0x224>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
 8006aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006af2:	e783      	b.n	80069fc <f_mkfs+0x224>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 ffab 	bl	8007a50 <ff_wtoupper>
					si++; break;		/* Store the up-case char if exist */
 8006afa:	1c73      	adds	r3, r6, #1
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
 8006afc:	b280      	uxth	r0, r0
					si++; break;		/* Store the up-case char if exist */
 8006afe:	b29b      	uxth	r3, r3
				if (ch != si) {
 8006b00:	4286      	cmp	r6, r0
 8006b02:	d13a      	bne.n	8006b7a <f_mkfs+0x3a2>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8006b04:	f04f 0801 	mov.w	r8, #1
 8006b08:	eb06 0508 	add.w	r5, r6, r8
 8006b0c:	b2ad      	uxth	r5, r5
 8006b0e:	bb65      	cbnz	r5, 8006b6a <f_mkfs+0x392>
				if (j >= 128) {
 8006b10:	f1b8 0f7f 	cmp.w	r8, #127	@ 0x7f
 8006b14:	d833      	bhi.n	8006b7e <f_mkfs+0x3a6>
				if (--j == 0) st = 0;
 8006b16:	f1b8 0801 	subs.w	r8, r8, #1
				ch = si++;		/* Fill the short run */
 8006b1a:	f106 0301 	add.w	r3, r6, #1
 8006b1e:	4630      	mov	r0, r6
				if (--j == 0) st = 0;
 8006b20:	bf14      	ite	ne
 8006b22:	2501      	movne	r5, #1
 8006b24:	2500      	moveq	r5, #0
				ch = si++;		/* Fill the short run */
 8006b26:	b29e      	uxth	r6, r3
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
 8006b28:	b2c3      	uxtb	r3, r0
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8006b2a:	19e2      	adds	r2, r4, r7
 8006b2c:	f3c0 200f 	ubfx	r0, r0, #8, #16
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
 8006b30:	55e3      	strb	r3, [r4, r7]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8006b32:	7050      	strb	r0, [r2, #1]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8006b34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b36:	eb03 0372 	add.w	r3, r3, r2, ror #1
 8006b3a:	eb00 0373 	add.w	r3, r0, r3, ror #1
 8006b3e:	930f      	str	r3, [sp, #60]	@ 0x3c
			i += 2; szb_case += 2;
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	3302      	adds	r3, #2
 8006b44:	9308      	str	r3, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006b46:	b11e      	cbz	r6, 8006b50 <f_mkfs+0x378>
			i += 2; szb_case += 2;
 8006b48:	1cb8      	adds	r0, r7, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006b4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	d120      	bne.n	8006b92 <f_mkfs+0x3ba>
				n = (i + ss - 1) / ss;
 8006b50:	f207 2701 	addw	r7, r7, #513	@ 0x201
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006b54:	464a      	mov	r2, r9
 8006b56:	4653      	mov	r3, sl
 8006b58:	4621      	mov	r1, r4
				n = (i + ss - 1) / ss;
 8006b5a:	0a7f      	lsrs	r7, r7, #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006b5c:	9803      	ldr	r0, [sp, #12]
 8006b5e:	9700      	str	r7, [sp, #0]
 8006b60:	f7fd fb9e 	bl	80042a0 <disk_write>
 8006b64:	b178      	cbz	r0, 8006b86 <f_mkfs+0x3ae>
			if (res != FR_OK) LEAVE_MKFS(res);
 8006b66:	2001      	movs	r0, #1
 8006b68:	e6bd      	b.n	80068e6 <f_mkfs+0x10e>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 ff70 	bl	8007a50 <ff_wtoupper>
 8006b70:	4285      	cmp	r5, r0
 8006b72:	d1cd      	bne.n	8006b10 <f_mkfs+0x338>
 8006b74:	f108 0801 	add.w	r8, r8, #1
 8006b78:	e7c6      	b.n	8006b08 <f_mkfs+0x330>
					si++; break;		/* Store the up-case char if exist */
 8006b7a:	461e      	mov	r6, r3
 8006b7c:	e7d4      	b.n	8006b28 <f_mkfs+0x350>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
 8006b7e:	2502      	movs	r5, #2
 8006b80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006b84:	e7d0      	b.n	8006b28 <f_mkfs+0x350>
				sect += n; i = 0;
 8006b86:	eb17 0709 	adds.w	r7, r7, r9
 8006b8a:	46b9      	mov	r9, r7
 8006b8c:	f14a 0a00 	adc.w	sl, sl, #0
		} while (si);
 8006b90:	b10e      	cbz	r6, 8006b96 <f_mkfs+0x3be>
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006b92:	4607      	mov	r7, r0
 8006b94:	e79f      	b.n	8006ad6 <f_mkfs+0x2fe>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		clen[2] = 1;	/* Number of root directory clusters */
 8006b98:	f04f 0a01 	mov.w	sl, #1
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006b9c:	9a08      	ldr	r2, [sp, #32]
		clen[2] = 1;	/* Number of root directory clusters */
 8006b9e:	f8cd a078 	str.w	sl, [sp, #120]	@ 0x78
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006ba2:	4413      	add	r3, r2
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006ba4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006ba6:	fbb3 f3fb 	udiv	r3, r3, fp
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006baa:	f202 15ff 	addw	r5, r2, #511	@ 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8006bae:	9a07      	ldr	r2, [sp, #28]
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006bb0:	931d      	str	r3, [sp, #116]	@ 0x74
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8006bb2:	18d3      	adds	r3, r2, r3
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006bb4:	0a6d      	lsrs	r5, r5, #9
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8006bb6:	eb03 060a 	add.w	r6, r3, sl
 8006bba:	930e      	str	r3, [sp, #56]	@ 0x38
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8006bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bbe:	f36f 0308 	bfc	r3, #0, #9
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006bc2:	e9dd 7b05 	ldrd	r7, fp, [sp, #20]
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8006bc6:	4698      	mov	r8, r3
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8006bc8:	46b1      	mov	r9, r6
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8006bca:	4642      	mov	r2, r8
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f00d ff68 	bl	8014aa4 <memset>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8006bd4:	eba6 0309 	sub.w	r3, r6, r9
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	d004      	beq.n	8006be8 <f_mkfs+0x410>
 8006bde:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 8006be2:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8006be6:	d82f      	bhi.n	8006c48 <f_mkfs+0x470>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8006be8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006bea:	463a      	mov	r2, r7
 8006bec:	465b      	mov	r3, fp
 8006bee:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8006bf0:	42ae      	cmp	r6, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006bf2:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8006bf4:	bf28      	it	cs
 8006bf6:	462e      	movcs	r6, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006bf8:	9600      	str	r6, [sp, #0]
 8006bfa:	f7fd fb51 	bl	80042a0 <disk_write>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d1b1      	bne.n	8006b66 <f_mkfs+0x38e>
			sect += n; nsect -= n;
 8006c02:	19f7      	adds	r7, r6, r7
 8006c04:	f14b 0b00 	adc.w	fp, fp, #0
		} while (nsect);
 8006c08:	1bad      	subs	r5, r5, r6
 8006c0a:	d11b      	bne.n	8006c44 <f_mkfs+0x46c>
		j = nbit = clu = 0;
 8006c0c:	46ab      	mov	fp, r5
 8006c0e:	46aa      	mov	sl, r5
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 8006c10:	9e11      	ldr	r6, [sp, #68]	@ 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 8006c12:	27ff      	movs	r7, #255	@ 0xff
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8006c14:	4642      	mov	r2, r8
 8006c16:	2100      	movs	r1, #0
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f00d ff43 	bl	8014aa4 <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
 8006c1e:	f1bb 0f00 	cmp.w	fp, #0
 8006c22:	f040 8103 	bne.w	8006e2c <f_mkfs+0x654>
	*ptr++ = (BYTE)val; val >>= 8;
 8006c26:	f06f 0307 	mvn.w	r3, #7
				st_32(buf + i, 0xFFFFFFFF); i += 4; clu++;
 8006c2a:	f04f 0b02 	mov.w	fp, #2
 8006c2e:	2208      	movs	r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006c30:	7067      	strb	r7, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c32:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c34:	70a7      	strb	r7, [r4, #2]
	*ptr++ = (BYTE)val;
 8006c36:	70e7      	strb	r7, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c38:	7127      	strb	r7, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c3a:	7167      	strb	r7, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c3c:	71a7      	strb	r7, [r4, #6]
	*ptr++ = (BYTE)val;
 8006c3e:	71e7      	strb	r7, [r4, #7]
				st_32(buf + i, 0xFFFFFFFF); i += 4; clu++;
 8006c40:	46a9      	mov	r9, r5
 8006c42:	e01d      	b.n	8006c80 <f_mkfs+0x4a8>
 8006c44:	464e      	mov	r6, r9
 8006c46:	e7bf      	b.n	8006bc8 <f_mkfs+0x3f0>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	5ca1      	ldrb	r1, [r4, r2]
 8006c4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c52:	fa0a f303 	lsl.w	r3, sl, r3
 8006c56:	430b      	orrs	r3, r1
 8006c58:	54a3      	strb	r3, [r4, r2]
 8006c5a:	e7bb      	b.n	8006bd4 <f_mkfs+0x3fc>
 8006c5c:	7fffffed 	.word	0x7fffffed
					st_32(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
 8006c60:	f1ba 0f01 	cmp.w	sl, #1
 8006c64:	f10b 0b01 	add.w	fp, fp, #1
 8006c68:	eb04 0002 	add.w	r0, r4, r2
					i += 4; clu++; nbit--;
 8006c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c70:	f102 0204 	add.w	r2, r2, #4
					st_32(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
 8006c74:	bf14      	ite	ne
 8006c76:	4659      	movne	r1, fp
 8006c78:	f04f 31ff 	moveq.w	r1, #4294967295
 8006c7c:	f7fd fb29 	bl	80042d2 <st_32>
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
 8006c80:	f1ba 0f00 	cmp.w	sl, #0
 8006c84:	f000 80d4 	beq.w	8006e30 <f_mkfs+0x658>
 8006c88:	4590      	cmp	r8, r2
 8006c8a:	d8e9      	bhi.n	8006c60 <f_mkfs+0x488>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8006c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006c8e:	4621      	mov	r1, r4
 8006c90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8006c92:	42b3      	cmp	r3, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006c94:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 8006c96:	bf28      	it	cs
 8006c98:	4633      	movcs	r3, r6
 8006c9a:	4699      	mov	r9, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ca0:	f7fd fafe 	bl	80042a0 <disk_write>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f47f af5e 	bne.w	8006b66 <f_mkfs+0x38e>
			sect += n; nsect -= n;
 8006caa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cac:	eb19 0303 	adds.w	r3, r9, r3
 8006cb0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb4:	f143 0300 	adc.w	r3, r3, #0
		} while (nsect);
 8006cb8:	ebb6 0609 	subs.w	r6, r6, r9
			sect += n; nsect -= n;
 8006cbc:	930a      	str	r3, [sp, #40]	@ 0x28
		} while (nsect);
 8006cbe:	d1a9      	bne.n	8006c14 <f_mkfs+0x43c>
		memset(buf, 0, sz_buf * ss);
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f00d feed 	bl	8014aa4 <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;			/* Volume label entry (no label) */
 8006cca:	2383      	movs	r3, #131	@ 0x83
		st_32(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 8006ccc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006cce:	f104 0038 	add.w	r0, r4, #56	@ 0x38
		buf[SZDIRE * 0 + 0] = ET_VLABEL;			/* Volume label entry (no label) */
 8006cd2:	7023      	strb	r3, [r4, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;			/* Bitmap entry */
 8006cd4:	2381      	movs	r3, #129	@ 0x81
	*ptr++ = (BYTE)val; val >>= 8;
 8006cd6:	f884 6035 	strb.w	r6, [r4, #53]	@ 0x35
		buf[SZDIRE * 1 + 0] = ET_BITMAP;			/* Bitmap entry */
 8006cda:	f884 3020 	strb.w	r3, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cde:	2302      	movs	r3, #2
	*ptr++ = (BYTE)val; val >>= 8;
 8006ce0:	f884 6036 	strb.w	r6, [r4, #54]	@ 0x36
	*ptr++ = (BYTE)val; val >>= 8;
 8006ce4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
	*ptr++ = (BYTE)val;
 8006ce8:	f884 6037 	strb.w	r6, [r4, #55]	@ 0x37
		st_32(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 8006cec:	f7fd faf1 	bl	80042d2 <st_32>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;			/* Up-case table entry */
 8006cf0:	2382      	movs	r3, #130	@ 0x82
		st_32(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 8006cf2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006cf4:	f104 0044 	add.w	r0, r4, #68	@ 0x44
		buf[SZDIRE * 2 + 0] = ET_UPCASE;			/* Up-case table entry */
 8006cf8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		st_32(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 8006cfc:	f7fd fae9 	bl	80042d2 <st_32>
		st_32(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
 8006d00:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8006d04:	9907      	ldr	r1, [sp, #28]
 8006d06:	4618      	mov	r0, r3
 8006d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d0a:	3102      	adds	r1, #2
 8006d0c:	f7fd fae1 	bl	80042d2 <st_32>
		st_32(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
 8006d10:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 8006d14:	9908      	ldr	r1, [sp, #32]
 8006d16:	4618      	mov	r0, r3
 8006d18:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d1a:	f7fd fada 	bl	80042d2 <st_32>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
 8006d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d20:	9a02      	ldr	r2, [sp, #8]
 8006d22:	fb02 f503 	mul.w	r5, r2, r3
 8006d26:	9b05      	ldr	r3, [sp, #20]
 8006d28:	4616      	mov	r6, r2
 8006d2a:	18ed      	adds	r5, r5, r3
 8006d2c:	9b06      	ldr	r3, [sp, #24]
 8006d2e:	f143 0800 	adc.w	r8, r3, #0
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006d32:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006d34:	4621      	mov	r1, r4
 8006d36:	462a      	mov	r2, r5
 8006d38:	4643      	mov	r3, r8
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006d3a:	42b7      	cmp	r7, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006d3c:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006d3e:	bf28      	it	cs
 8006d40:	4637      	movcs	r7, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006d42:	9700      	str	r7, [sp, #0]
 8006d44:	f7fd faac 	bl	80042a0 <disk_write>
 8006d48:	4601      	mov	r1, r0
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f47f af0b 	bne.w	8006b66 <f_mkfs+0x38e>
			memset(buf, 0, ss);	/* Rest of entries are filled with zero */
 8006d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d54:	4620      	mov	r0, r4
 8006d56:	f00d fea5 	bl	8014aa4 <memset>
			sect += n; nsect -= n;
 8006d5a:	197d      	adds	r5, r7, r5
 8006d5c:	f148 0800 	adc.w	r8, r8, #0
		} while (nsect);
 8006d60:	1bf6      	subs	r6, r6, r7
 8006d62:	d1e6      	bne.n	8006d32 <f_mkfs+0x55a>
 8006d64:	2302      	movs	r3, #2
		sect = b_vol;
 8006d66:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006d6a:	4635      	mov	r5, r6
 8006d6c:	930b      	str	r3, [sp, #44]	@ 0x2c
			memset(buf, 0, ss);
 8006d6e:	2100      	movs	r1, #0
 8006d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d74:	4620      	mov	r0, r4
 8006d76:	f00d fe95 	bl	8014aa4 <memset>
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8006d7a:	4a76      	ldr	r2, [pc, #472]	@ (8006f54 <f_mkfs+0x77c>)
			st_64(buf + BPB_VolOfsEx, b_vol);						/* Volume offset in the physical drive [sector] */
 8006d7c:	f104 0040 	add.w	r0, r4, #64	@ 0x40
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8006d80:	6813      	ldr	r3, [r2, #0]
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	6853      	ldr	r3, [r2, #4]
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	8913      	ldrh	r3, [r2, #8]
 8006d8a:	8123      	strh	r3, [r4, #8]
 8006d8c:	7a93      	ldrb	r3, [r2, #10]
			st_64(buf + BPB_VolOfsEx, b_vol);						/* Volume offset in the physical drive [sector] */
 8006d8e:	9a04      	ldr	r2, [sp, #16]
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 8006d90:	72a3      	strb	r3, [r4, #10]
			st_64(buf + BPB_VolOfsEx, b_vol);						/* Volume offset in the physical drive [sector] */
 8006d92:	2300      	movs	r3, #0
 8006d94:	f7fd faa5 	bl	80042e2 <st_64>
			st_64(buf + BPB_TotSecEx, sz_vol);						/* Volume size [sector] */
 8006d98:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8006d9c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8006da0:	f7fd fa9f 	bl	80042e2 <st_64>
	*ptr++ = (BYTE)val; val >>= 8;
 8006da4:	2320      	movs	r3, #32
			st_32(buf + BPB_FatSzEx, sz_fat);						/* FAT size [sector] */
 8006da6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006da8:	980a      	ldr	r0, [sp, #40]	@ 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8006daa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			st_32(buf + BPB_FatSzEx, sz_fat);						/* FAT size [sector] */
 8006dae:	f7fd fa90 	bl	80042d2 <st_32>
			st_32(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
 8006db2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db8:	1a99      	subs	r1, r3, r2
 8006dba:	f7fd fa8a 	bl	80042d2 <st_32>
			st_32(buf + BPB_NumClusEx, n_clst);						/* Number of clusters */
 8006dbe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8006dc0:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8006dc4:	f7fd fa85 	bl	80042d2 <st_32>
			st_32(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);		/* Root directory cluster number */
 8006dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dca:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8006dce:	1c99      	adds	r1, r3, #2
 8006dd0:	f7fd fa7f 	bl	80042d2 <st_32>
			st_32(buf + BPB_VolIDEx, vsn);							/* VSN */
 8006dd4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006dd6:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8006dda:	f7fd fa7a 	bl	80042d2 <st_32>
	*ptr++ = (BYTE)val;
 8006dde:	f04f 0301 	mov.w	r3, #1
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8006de2:	f8dd 9008 	ldr.w	r9, [sp, #8]
	*ptr++ = (BYTE)val;
 8006de6:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;		/* Log2 of sector size [byte] */
 8006dea:	2309      	movs	r3, #9
 8006dec:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8006df0:	ea5f 0959 	movs.w	r9, r9, lsr #1
 8006df4:	d130      	bne.n	8006e58 <f_mkfs+0x680>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 8006df6:	f04f 0301 	mov.w	r3, #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8006dfa:	46ca      	mov	sl, r9
 8006dfc:	464f      	mov	r7, r9
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 8006dfe:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 8006e02:	2380      	movs	r3, #128	@ 0x80
 8006e04:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
 8006e08:	23eb      	movs	r3, #235	@ 0xeb
 8006e0a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
	*ptr++ = (BYTE)val;
 8006e0e:	23fe      	movs	r3, #254	@ 0xfe
 8006e10:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
	*ptr++ = (BYTE)val; val >>= 8;
 8006e14:	2355      	movs	r3, #85	@ 0x55
 8006e16:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8006e1a:	23aa      	movs	r3, #170	@ 0xaa
 8006e1c:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 8006e20:	f1a7 036a 	sub.w	r3, r7, #106	@ 0x6a
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d81d      	bhi.n	8006e64 <f_mkfs+0x68c>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8006e28:	3701      	adds	r7, #1
 8006e2a:	e7f9      	b.n	8006e20 <f_mkfs+0x648>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	e707      	b.n	8006c40 <f_mkfs+0x468>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
 8006e30:	2d02      	cmp	r5, #2
 8006e32:	f63f af2b 	bhi.w	8006c8c <f_mkfs+0x4b4>
 8006e36:	ab20      	add	r3, sp, #128	@ 0x80
 8006e38:	3501      	adds	r5, #1
 8006e3a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006e3e:	f859 ac10 	ldr.w	sl, [r9, #-16]
			} while (nbit != 0 && i < sz_buf * ss);
 8006e42:	f1ba 0f00 	cmp.w	sl, #0
 8006e46:	f43f af21 	beq.w	8006c8c <f_mkfs+0x4b4>
 8006e4a:	4590      	cmp	r8, r2
 8006e4c:	f67f af1e 	bls.w	8006c8c <f_mkfs+0x4b4>
 8006e50:	46a9      	mov	r9, r5
 8006e52:	e719      	b.n	8006c88 <f_mkfs+0x4b0>
 8006e54:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006e56:	e78a      	b.n	8006d6e <f_mkfs+0x596>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8006e58:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006e62:	e7c5      	b.n	8006df0 <f_mkfs+0x618>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 8006e64:	2f70      	cmp	r7, #112	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8006e66:	bf08      	it	eq
 8006e68:	2771      	moveq	r7, #113	@ 0x71
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8006e6a:	5de3      	ldrb	r3, [r4, r7]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8006e6c:	3701      	adds	r7, #1
 8006e6e:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8006e72:	eb03 0a7a 	add.w	sl, r3, sl, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8006e76:	d1d3      	bne.n	8006e20 <f_mkfs+0x648>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f11b 0601 	adds.w	r6, fp, #1
 8006e7e:	4621      	mov	r1, r4
 8006e80:	465a      	mov	r2, fp
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	462b      	mov	r3, r5
 8006e86:	9803      	ldr	r0, [sp, #12]
 8006e88:	f145 0800 	adc.w	r8, r5, #0
 8006e8c:	f7fd fa08 	bl	80042a0 <disk_write>
 8006e90:	4601      	mov	r1, r0
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f47f ae67 	bne.w	8006b66 <f_mkfs+0x38e>
			memset(buf, 0, ss);
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f00d fe02 	bl	8014aa4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8006ea0:	2355      	movs	r3, #85	@ 0x55
 8006ea2:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8006ea6:	23aa      	movs	r3, #170	@ 0xaa
 8006ea8:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
			for (j = 1; j < 9; j++) {
 8006eac:	f11b 0309 	adds.w	r3, fp, #9
 8006eb0:	f104 3bff 	add.w	fp, r4, #4294967295
 8006eb4:	9306      	str	r3, [sp, #24]
 8006eb6:	f145 0300 	adc.w	r3, r5, #0
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	f204 13ff 	addw	r3, r4, #511	@ 0x1ff
 8006ec0:	9308      	str	r3, [sp, #32]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8006ec2:	465b      	mov	r3, fp
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8006ec4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006ec8:	eb02 0a7a 	add.w	sl, r2, sl, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8006ecc:	9a08      	ldr	r2, [sp, #32]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d1f8      	bne.n	8006ec4 <f_mkfs+0x6ec>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	1c75      	adds	r5, r6, #1
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4632      	mov	r2, r6
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4643      	mov	r3, r8
 8006ede:	9803      	ldr	r0, [sp, #12]
 8006ee0:	f148 0700 	adc.w	r7, r8, #0
 8006ee4:	f7fd f9dc 	bl	80042a0 <disk_write>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	2800      	cmp	r0, #0
 8006eec:	f47f ae3b 	bne.w	8006b66 <f_mkfs+0x38e>
			for (j = 1; j < 9; j++) {
 8006ef0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ef4:	4297      	cmp	r7, r2
 8006ef6:	bf08      	it	eq
 8006ef8:	429d      	cmpeq	r5, r3
 8006efa:	d002      	beq.n	8006f02 <f_mkfs+0x72a>
 8006efc:	462e      	mov	r6, r5
 8006efe:	46b8      	mov	r8, r7
 8006f00:	e7df      	b.n	8006ec2 <f_mkfs+0x6ea>
			memset(buf, 0, ss);
 8006f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f06:	4620      	mov	r0, r4
 8006f08:	f00d fdcc 	bl	8014aa4 <memset>
			for ( ; j < 11; j++) {
 8006f0c:	3603      	adds	r6, #3
 8006f0e:	f148 0800 	adc.w	r8, r8, #0
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8006f12:	465b      	mov	r3, fp
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8006f14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006f18:	eb02 0a7a 	add.w	sl, r2, sl, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8006f1c:	9a08      	ldr	r2, [sp, #32]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d1f8      	bne.n	8006f14 <f_mkfs+0x73c>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006f22:	1c6b      	adds	r3, r5, #1
 8006f24:	462a      	mov	r2, r5
 8006f26:	4621      	mov	r1, r4
 8006f28:	9803      	ldr	r0, [sp, #12]
 8006f2a:	9306      	str	r3, [sp, #24]
 8006f2c:	f147 0300 	adc.w	r3, r7, #0
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	2301      	movs	r3, #1
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	463b      	mov	r3, r7
 8006f38:	f7fd f9b2 	bl	80042a0 <disk_write>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f47f ae12 	bne.w	8006b66 <f_mkfs+0x38e>
			for ( ; j < 11; j++) {
 8006f42:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f46:	4542      	cmp	r2, r8
 8006f48:	bf08      	it	eq
 8006f4a:	42b3      	cmpeq	r3, r6
 8006f4c:	d004      	beq.n	8006f58 <f_mkfs+0x780>
 8006f4e:	461d      	mov	r5, r3
 8006f50:	4617      	mov	r7, r2
 8006f52:	e7de      	b.n	8006f12 <f_mkfs+0x73a>
 8006f54:	08015d09 	.word	0x08015d09
			for (i = 0; i < ss; i += 4) st_32(buf + i, sum);	/* Fill with checksum value */
 8006f58:	eb04 0009 	add.w	r0, r4, r9
 8006f5c:	f109 0904 	add.w	r9, r9, #4
 8006f60:	4651      	mov	r1, sl
 8006f62:	f7fd f9b6 	bl	80042d2 <st_32>
 8006f66:	f5b9 7f00 	cmp.w	r9, #512	@ 0x200
 8006f6a:	d1f5      	bne.n	8006f58 <f_mkfs+0x780>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006f6c:	2601      	movs	r6, #1
 8006f6e:	f115 0b02 	adds.w	fp, r5, #2
 8006f72:	4621      	mov	r1, r4
 8006f74:	9803      	ldr	r0, [sp, #12]
 8006f76:	9600      	str	r6, [sp, #0]
 8006f78:	f147 0500 	adc.w	r5, r7, #0
 8006f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f80:	f7fd f98e 	bl	80042a0 <disk_write>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f47f adee 	bne.w	8006b66 <f_mkfs+0x38e>
		for (n = 0; n < 2; n++) {
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f8c:	42b3      	cmp	r3, r6
 8006f8e:	f47f af61 	bne.w	8006e54 <f_mkfs+0x67c>
		sys = 0x07;		/* exFAT */
 8006f92:	f04f 0907 	mov.w	r9, #7
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8006f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f98:	071b      	lsls	r3, r3, #28
 8006f9a:	f100 82a7 	bmi.w	80074ec <f_mkfs+0xd14>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	9803      	ldr	r0, [sp, #12]
			lba[0] = sz_vol; lba[1] = 0;
 8006fa2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8006fa6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8006faa:	2200      	movs	r2, #0
 8006fac:	2300      	movs	r3, #0
 8006fae:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8006fb2:	aa1a      	add	r2, sp, #104	@ 0x68
 8006fb4:	f7fd f97e 	bl	80042b4 <disk_ioctl>
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f47f add3 	bne.w	8006b66 <f_mkfs+0x38e>
	if (sz_drv >= FF_MIN_GPT) {	/* Create partitions in GPT format */
 8006fc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006fc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006fc6:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
 8006fca:	f173 0300 	sbcs.w	r3, r3, #0
 8006fce:	f0c0 829c 	bcc.w	800750a <f_mkfs+0xd32>
		rnd = (DWORD)sz_drv + GET_FATTIME();	/* Random seed */
 8006fd2:	f7fc f9d7 	bl	8003384 <get_fattime>
 8006fd6:	eb00 0308 	add.w	r3, r0, r8
		bcc = 0xFFFFFFFF; sz_part = 1;
 8006fda:	2501      	movs	r5, #1
 8006fdc:	46b8      	mov	r8, r7
		rnd = (DWORD)sz_drv + GET_FATTIME();	/* Random seed */
 8006fde:	9306      	str	r3, [sp, #24]
		nxt_alloc = 2 + sz_ptbl;			/* First allocatable LBA */
 8006fe0:	2622      	movs	r6, #34	@ 0x22
		top_bpt = sz_drv - sz_ptbl - 1;		/* Backup partition table start LBA */
 8006fe2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
		nxt_alloc = 2 + sz_ptbl;			/* First allocatable LBA */
 8006fe4:	9705      	str	r7, [sp, #20]
		top_bpt = sz_drv - sz_ptbl - 1;		/* Backup partition table start LBA */
 8006fe6:	9308      	str	r3, [sp, #32]
 8006fe8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fec:	9b08      	ldr	r3, [sp, #32]
 8006fee:	3b21      	subs	r3, #33	@ 0x21
 8006ff0:	9302      	str	r3, [sp, #8]
 8006ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006ff8:	9304      	str	r3, [sp, #16]
		sz_pool = top_bpt - nxt_alloc;		/* Size of allocatable area [sector] */
 8006ffa:	9b08      	ldr	r3, [sp, #32]
 8006ffc:	3b43      	subs	r3, #67	@ 0x43
 8006ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007002:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007006:	930c      	str	r3, [sp, #48]	@ 0x30
		bcc = 0xFFFFFFFF; sz_part = 1;
 8007008:	f04f 33ff 	mov.w	r3, #4294967295
 800700c:	9307      	str	r3, [sp, #28]
		pi = si = 0;	/* partition table index, map index */
 800700e:	463b      	mov	r3, r7
			if (pi * SZ_GPTE % ss == 0) memset(buf, 0, ss);	/* Clean the buffer if needed */
 8007010:	f3c7 0908 	ubfx	r9, r7, #0, #9
 8007014:	f1b9 0f00 	cmp.w	r9, #0
 8007018:	d107      	bne.n	800702a <f_mkfs+0x852>
 800701a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800701e:	4649      	mov	r1, r9
 8007020:	4620      	mov	r0, r4
 8007022:	930a      	str	r3, [sp, #40]	@ 0x28
 8007024:	f00d fd3e 	bl	8014aa4 <memset>
 8007028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
			if (sz_part != 0) {				/* Is the size table not termintated? */
 800702a:	ea55 0208 	orrs.w	r2, r5, r8
 800702e:	f000 8267 	beq.w	8007500 <f_mkfs+0xd28>
				nxt_alloc = (nxt_alloc + align - 1) & ((QWORD)0 - align);	/* Align partition start LBA */
 8007032:	f240 7bff 	movw	fp, #2047	@ 0x7ff
 8007036:	9a05      	ldr	r2, [sp, #20]
 8007038:	eb16 060b 	adds.w	r6, r6, fp
 800703c:	f142 0a00 	adc.w	sl, r2, #0
				sz_part = plst[si++];		/* Get a partition size */
 8007040:	1c5a      	adds	r2, r3, #1
				nxt_alloc = (nxt_alloc + align - 1) & ((QWORD)0 - align);	/* Align partition start LBA */
 8007042:	f36f 060a 	bfc	r6, #0, #11
				sz_part = plst[si++];		/* Get a partition size */
 8007046:	920a      	str	r2, [sp, #40]	@ 0x28
 8007048:	aa20      	add	r2, sp, #128	@ 0x80
				nxt_alloc = (nxt_alloc + align - 1) & ((QWORD)0 - align);	/* Align partition start LBA */
 800704a:	f8cd a014 	str.w	sl, [sp, #20]
				sz_part = plst[si++];		/* Get a partition size */
 800704e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007052:	e953 5804 	ldrd	r5, r8, [r3, #-16]
				if (sz_part <= 100) {		/* Is the size in percentage? */
 8007056:	2d65      	cmp	r5, #101	@ 0x65
 8007058:	f178 0300 	sbcs.w	r3, r8, #0
 800705c:	d213      	bcs.n	8007086 <f_mkfs+0x8ae>
					sz_part = sz_pool * sz_part / 100;	/* Sectors in percentage */
 800705e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007060:	2264      	movs	r2, #100	@ 0x64
 8007062:	fb03 f808 	mul.w	r8, r3, r8
 8007066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007068:	fb05 8803 	mla	r8, r5, r3, r8
 800706c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800706e:	fba3 0105 	umull	r0, r1, r3, r5
 8007072:	2300      	movs	r3, #0
 8007074:	4441      	add	r1, r8
 8007076:	f7f9 f94b 	bl	8000310 <__aeabi_uldivmod>
					sz_part = (sz_part + align - 1) & ((QWORD)0 - align);	/* Align partition end LBA (only if in percentage) */
 800707a:	eb10 050b 	adds.w	r5, r0, fp
 800707e:	f36f 050a 	bfc	r5, #0, #11
 8007082:	f141 0800 	adc.w	r8, r1, #0
				if (nxt_alloc + sz_part > top_bpt) {	/* Clip the size at end of the pool */
 8007086:	1972      	adds	r2, r6, r5
 8007088:	9902      	ldr	r1, [sp, #8]
 800708a:	eb4a 0308 	adc.w	r3, sl, r8
 800708e:	4291      	cmp	r1, r2
 8007090:	9a04      	ldr	r2, [sp, #16]
 8007092:	eb72 0303 	sbcs.w	r3, r2, r3
 8007096:	f080 8139 	bcs.w	800730c <f_mkfs+0xb34>
					sz_part = (nxt_alloc < top_bpt) ? top_bpt - nxt_alloc : 0;
 800709a:	428e      	cmp	r6, r1
 800709c:	4613      	mov	r3, r2
 800709e:	eb7a 0303 	sbcs.w	r3, sl, r3
 80070a2:	f080 822f 	bcs.w	8007504 <f_mkfs+0xd2c>
 80070a6:	1b8d      	subs	r5, r1, r6
 80070a8:	eb62 080a 	sbc.w	r8, r2, sl
				memcpy(buf + ofs + GPTE_PtGuid, GUID_MS_Basic, 16);	/* Set partition GUID (Microsoft Basic Data) */
 80070ac:	4b93      	ldr	r3, [pc, #588]	@ (80072fc <f_mkfs+0xb24>)
 80070ae:	eb04 0209 	add.w	r2, r4, r9
 80070b2:	f103 0110 	add.w	r1, r3, #16
 80070b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80070ba:	428b      	cmp	r3, r1
 80070bc:	f842 0b04 	str.w	r0, [r2], #4
 80070c0:	d1f9      	bne.n	80070b6 <f_mkfs+0x8de>
				rnd = make_rand(rnd, buf + ofs + GPTE_UpGuid, 16);	/* Set unique partition GUID */
 80070c2:	f109 0110 	add.w	r1, r9, #16
 80070c6:	9806      	ldr	r0, [sp, #24]
 80070c8:	4421      	add	r1, r4
 80070ca:	f7fe f83b 	bl	8005144 <make_rand.constprop.0>
 80070ce:	9006      	str	r0, [sp, #24]
				st_64(buf + ofs + GPTE_FstLba, nxt_alloc);			/* Set partition start LBA */
 80070d0:	f109 0020 	add.w	r0, r9, #32
 80070d4:	4632      	mov	r2, r6
 80070d6:	4653      	mov	r3, sl
 80070d8:	4420      	add	r0, r4
 80070da:	f7fd f902 	bl	80042e2 <st_64>
				st_64(buf + ofs + GPTE_LstLba, nxt_alloc + sz_part - 1);	/* Set partition end LBA */
 80070de:	19ae      	adds	r6, r5, r6
 80070e0:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80070e4:	eb4a 0308 	adc.w	r3, sl, r8
 80070e8:	1e72      	subs	r2, r6, #1
 80070ea:	4420      	add	r0, r4
 80070ec:	9305      	str	r3, [sp, #20]
 80070ee:	f163 0300 	sbc.w	r3, r3, #0
 80070f2:	f7fd f8f6 	bl	80042e2 <st_64>
				nxt_alloc += sz_part;								/* Next allocatable LBA */
 80070f6:	e10d      	b.n	8007314 <f_mkfs+0xb3c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80070f8:	0876      	lsrs	r6, r6, #1
 80070fa:	9602      	str	r6, [sp, #8]
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 80070fc:	fbb8 f3f6 	udiv	r3, r8, r6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007100:	009a      	lsls	r2, r3, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8007102:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007106:	f202 2207 	addw	r2, r2, #519	@ 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800710a:	3bf6      	subs	r3, #246	@ 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800710c:	0a52      	lsrs	r2, r2, #9
 800710e:	9207      	str	r2, [sp, #28]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8007110:	4a7b      	ldr	r2, [pc, #492]	@ (8007300 <f_mkfs+0xb28>)
 8007112:	4293      	cmp	r3, r2
 8007114:	f63f abe6 	bhi.w	80068e4 <f_mkfs+0x10c>
				sz_dir = 0;		/* No static directory */
 8007118:	2300      	movs	r3, #0
 800711a:	9802      	ldr	r0, [sp, #8]
				sz_rsv = 32;	/* Number of reserved sectors */
 800711c:	f04f 0920 	mov.w	r9, #32
 8007120:	2703      	movs	r7, #3
				sz_dir = 0;		/* No static directory */
 8007122:	9308      	str	r3, [sp, #32]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	eb19 0503 	adds.w	r5, r9, r3
 800712a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712c:	f143 0300 	adc.w	r3, r3, #0
 8007130:	9305      	str	r3, [sp, #20]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8007132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007136:	435a      	muls	r2, r3
 8007138:	9b05      	ldr	r3, [sp, #20]
 800713a:	1952      	adds	r2, r2, r5
 800713c:	f143 0100 	adc.w	r1, r3, #0
 8007140:	9b08      	ldr	r3, [sp, #32]
 8007142:	18d2      	adds	r2, r2, r3
 8007144:	f141 0300 	adc.w	r3, r1, #0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8007148:	2f03      	cmp	r7, #3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800714a:	930c      	str	r3, [sp, #48]	@ 0x30
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800714c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800714e:	4413      	add	r3, r2
 8007150:	ea03 030e 	and.w	r3, r3, lr
 8007154:	eba3 0302 	sub.w	r3, r3, r2
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8007158:	d13f      	bne.n	80071da <f_mkfs+0xa02>
				sz_rsv += n; b_fat += n;
 800715a:	4499      	add	r9, r3
 800715c:	195b      	adds	r3, r3, r5
 800715e:	461d      	mov	r5, r3
 8007160:	9b05      	ldr	r3, [sp, #20]
 8007162:	f143 0300 	adc.w	r3, r3, #0
 8007166:	9305      	str	r3, [sp, #20]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8007168:	9904      	ldr	r1, [sp, #16]
 800716a:	9b04      	ldr	r3, [sp, #16]
 800716c:	ebb1 1f06 	cmp.w	r1, r6, lsl #4
 8007170:	ebc3 1306 	rsb	r3, r3, r6, lsl #4
 8007174:	bf8c      	ite	hi
 8007176:	f04f 3cff 	movhi.w	ip, #4294967295
 800717a:	f04f 0c00 	movls.w	ip, #0
 800717e:	189b      	adds	r3, r3, r2
 8007180:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007182:	eb42 010c 	adc.w	r1, r2, ip
 8007186:	4598      	cmp	r8, r3
 8007188:	eb7b 0101 	sbcs.w	r1, fp, r1
 800718c:	f4ff abaa 	bcc.w	80068e4 <f_mkfs+0x10c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8007190:	9b08      	ldr	r3, [sp, #32]
			if (fsty == FS_FAT32) {
 8007192:	2f03      	cmp	r7, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8007194:	eba8 0303 	sub.w	r3, r8, r3
 8007198:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800719c:	eba3 0309 	sub.w	r3, r3, r9
 80071a0:	fb01 3312 	mls	r3, r1, r2, r3
 80071a4:	fbb3 f3f6 	udiv	r3, r3, r6
 80071a8:	930c      	str	r3, [sp, #48]	@ 0x30
			if (fsty == FS_FAT32) {
 80071aa:	d12e      	bne.n	800720a <f_mkfs+0xa32>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 80071ac:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 80071b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071b2:	429a      	cmp	r2, r3
 80071b4:	f200 824b 	bhi.w	800764e <f_mkfs+0xe76>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f47f ab92 	bne.w	80068e4 <f_mkfs+0x10c>
 80071c0:	2e01      	cmp	r6, #1
 80071c2:	d899      	bhi.n	80070f8 <f_mkfs+0x920>
 80071c4:	f7ff bb8e 	b.w	80068e4 <f_mkfs+0x10c>
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	f7ff bbd9 	b.w	8006980 <f_mkfs+0x1a8>
			pau = sz_au;
 80071ce:	9e02      	ldr	r6, [sp, #8]
 80071d0:	e794      	b.n	80070fc <f_mkfs+0x924>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80071d2:	0076      	lsls	r6, r6, #1
 80071d4:	e039      	b.n	800724a <f_mkfs+0xa72>
			pau = sz_au;
 80071d6:	9e02      	ldr	r6, [sp, #8]
 80071d8:	e03c      	b.n	8007254 <f_mkfs+0xa7c>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 80071da:	9906      	ldr	r1, [sp, #24]
 80071dc:	fbb3 fcf1 	udiv	ip, r3, r1
 80071e0:	fb01 3c1c 	mls	ip, r1, ip, r3
 80071e4:	f1bc 0f00 	cmp.w	ip, #0
 80071e8:	d008      	beq.n	80071fc <f_mkfs+0xa24>
					n--; sz_rsv++; b_fat++;
 80071ea:	9905      	ldr	r1, [sp, #20]
 80071ec:	3501      	adds	r5, #1
 80071ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80071f2:	f109 0901 	add.w	r9, r9, #1
 80071f6:	f141 0100 	adc.w	r1, r1, #0
 80071fa:	9105      	str	r1, [sp, #20]
				sz_fat += n / n_fat;
 80071fc:	9906      	ldr	r1, [sp, #24]
 80071fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007202:	9907      	ldr	r1, [sp, #28]
 8007204:	4419      	add	r1, r3
 8007206:	9107      	str	r1, [sp, #28]
 8007208:	e7ae      	b.n	8007168 <f_mkfs+0x990>
			if (fsty == FS_FAT16) {
 800720a:	2f02      	cmp	r7, #2
 800720c:	f040 8218 	bne.w	8007640 <f_mkfs+0xe68>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007210:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 8007214:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007216:	429a      	cmp	r2, r3
 8007218:	d936      	bls.n	8007288 <f_mkfs+0xab0>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800721a:	9b02      	ldr	r3, [sp, #8]
 800721c:	b91b      	cbnz	r3, 8007226 <f_mkfs+0xa4e>
 800721e:	0073      	lsls	r3, r6, #1
 8007220:	2b40      	cmp	r3, #64	@ 0x40
 8007222:	9302      	str	r3, [sp, #8]
 8007224:	d90a      	bls.n	800723c <f_mkfs+0xa64>
					if ((fsopt & FM_FAT32)) {
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	079a      	lsls	r2, r3, #30
 800722a:	d4cd      	bmi.n	80071c8 <f_mkfs+0x9f0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800722c:	2800      	cmp	r0, #0
 800722e:	f47f ab59 	bne.w	80068e4 <f_mkfs+0x10c>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007232:	0073      	lsls	r3, r6, #1
 8007234:	2b80      	cmp	r3, #128	@ 0x80
 8007236:	9302      	str	r3, [sp, #8]
 8007238:	f63f ab54 	bhi.w	80068e4 <f_mkfs+0x10c>
				if (pau == 0) {	/* au auto-selection */
 800723c:	9b02      	ldr	r3, [sp, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1c9      	bne.n	80071d6 <f_mkfs+0x9fe>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007242:	ea4f 3118 	mov.w	r1, r8, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007246:	4a2f      	ldr	r2, [pc, #188]	@ (8007304 <f_mkfs+0xb2c>)
 8007248:	2601      	movs	r6, #1
 800724a:	f832 3b02 	ldrh.w	r3, [r2], #2
 800724e:	b10b      	cbz	r3, 8007254 <f_mkfs+0xa7c>
 8007250:	428b      	cmp	r3, r1
 8007252:	d9be      	bls.n	80071d2 <f_mkfs+0x9fa>
				n_clst = (DWORD)sz_vol / pau;
 8007254:	fbb8 f3f6 	udiv	r3, r8, r6
				if (n_clst > MAX_FAT12) {
 8007258:	f640 72f5 	movw	r2, #4085	@ 0xff5
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800725c:	9802      	ldr	r0, [sp, #8]
				sz_rsv = 1;						/* Number of reserved sectors */
 800725e:	f04f 0901 	mov.w	r9, #1
				if (n_clst > MAX_FAT12) {
 8007262:	4293      	cmp	r3, r2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007264:	bf93      	iteet	ls
 8007266:	eb03 0343 	addls.w	r3, r3, r3, lsl #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800726a:	3302      	addhi	r3, #2
 800726c:	2702      	movhi	r7, #2
					fsty = FS_FAT12;
 800726e:	2701      	movls	r7, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007270:	bf97      	itett	ls
 8007272:	3301      	addls	r3, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007274:	005b      	lslhi	r3, r3, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007276:	085b      	lsrls	r3, r3, #1
 8007278:	3303      	addls	r3, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800727a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800727e:	0a5b      	lsrs	r3, r3, #9
 8007280:	9307      	str	r3, [sp, #28]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8007282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007284:	9308      	str	r3, [sp, #32]
 8007286:	e74d      	b.n	8007124 <f_mkfs+0x94c>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007288:	f640 73f5 	movw	r3, #4085	@ 0xff5
 800728c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800728e:	429a      	cmp	r2, r3
 8007290:	f200 81dd 	bhi.w	800764e <f_mkfs+0xe76>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0cb      	beq.n	8007232 <f_mkfs+0xa5a>
 800729a:	f7ff bb23 	b.w	80068e4 <f_mkfs+0x10c>
			st_32(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800729e:	4641      	mov	r1, r8
 80072a0:	f104 0020 	add.w	r0, r4, #32
 80072a4:	f7fd f815 	bl	80042d2 <st_32>
 80072a8:	e202      	b.n	80076b0 <f_mkfs+0xed8>
			st_32(buf + BS_VolID, vsn);					/* VSN */
 80072aa:	f104 0027 	add.w	r0, r4, #39	@ 0x27
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80072ae:	f104 022b 	add.w	r2, r4, #43	@ 0x2b
			st_32(buf + BS_VolID, vsn);					/* VSN */
 80072b2:	f7fd f80e 	bl	80042d2 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80072b6:	9b07      	ldr	r3, [sp, #28]
 80072b8:	75a3      	strb	r3, [r4, #22]
 80072ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 80072be:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80072c0:	2380      	movs	r3, #128	@ 0x80
 80072c2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80072c6:	2329      	movs	r3, #41	@ 0x29
 80072c8:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80072cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007308 <f_mkfs+0xb30>)
 80072ce:	f103 0110 	add.w	r1, r3, #16
 80072d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80072d6:	428b      	cmp	r3, r1
 80072d8:	f842 0b04 	str.w	r0, [r2], #4
 80072dc:	d1f9      	bne.n	80072d2 <f_mkfs+0xafa>
 80072de:	e219      	b.n	8007714 <f_mkfs+0xf3c>
				st_32(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 80072e0:	4651      	mov	r1, sl
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7fc fff5 	bl	80042d2 <st_32>
 80072e8:	e290      	b.n	800780c <f_mkfs+0x1034>
		sys = 0x0C;		/* FAT32X */
 80072ea:	f04f 090c 	mov.w	r9, #12
 80072ee:	e652      	b.n	8006f96 <f_mkfs+0x7be>
		sys = 0x06;		/* FAT12/16 (large) */
 80072f0:	f04f 0906 	mov.w	r9, #6
 80072f4:	e64f      	b.n	8006f96 <f_mkfs+0x7be>
 80072f6:	464f      	mov	r7, r9
 80072f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fa:	e689      	b.n	8007010 <f_mkfs+0x838>
 80072fc:	08015d59 	.word	0x08015d59
 8007300:	0ffeffff 	.word	0x0ffeffff
 8007304:	080184c4 	.word	0x080184c4
 8007308:	08015d45 	.word	0x08015d45
			if (sz_part != 0) {				/* Add a partition? */
 800730c:	ea55 0308 	orrs.w	r3, r5, r8
 8007310:	f47f aecc 	bne.w	80070ac <f_mkfs+0x8d4>
			if ((pi + 1) * SZ_GPTE % ss == 0) {		/* Write the sector buffer if it is filled up */
 8007314:	f107 0980 	add.w	r9, r7, #128	@ 0x80
 8007318:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800731c:	bb3b      	cbnz	r3, 800736e <f_mkfs+0xb96>
 800731e:	f104 3aff 	add.w	sl, r4, #4294967295
 8007322:	f204 1bff 	addw	fp, r4, #511	@ 0x1ff
				for (i = 0; i < ss; bcc = crc32(bcc, buf[i++])) ;	/* Calculate table check sum */
 8007326:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800732a:	9807      	ldr	r0, [sp, #28]
 800732c:	f7fd f852 	bl	80043d4 <crc32>
 8007330:	45d3      	cmp	fp, sl
 8007332:	9007      	str	r0, [sp, #28]
 8007334:	d1f7      	bne.n	8007326 <f_mkfs+0xb4e>
				if (disk_write(drv, buf, 2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;		/* Write to primary table */
 8007336:	0a7f      	lsrs	r7, r7, #9
 8007338:	f04f 0a01 	mov.w	sl, #1
 800733c:	2300      	movs	r3, #0
 800733e:	4621      	mov	r1, r4
 8007340:	1cba      	adds	r2, r7, #2
 8007342:	9803      	ldr	r0, [sp, #12]
 8007344:	f8cd a000 	str.w	sl, [sp]
 8007348:	f7fc ffaa 	bl	80042a0 <disk_write>
 800734c:	2800      	cmp	r0, #0
 800734e:	f47f ac0a 	bne.w	8006b66 <f_mkfs+0x38e>
				if (disk_write(drv, buf, top_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;	/* Write to secondary table */
 8007352:	9b02      	ldr	r3, [sp, #8]
 8007354:	4621      	mov	r1, r4
 8007356:	9803      	ldr	r0, [sp, #12]
 8007358:	18fa      	adds	r2, r7, r3
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	f8cd a000 	str.w	sl, [sp]
 8007360:	f143 0300 	adc.w	r3, r3, #0
 8007364:	f7fc ff9c 	bl	80042a0 <disk_write>
 8007368:	2800      	cmp	r0, #0
 800736a:	f47f abfc 	bne.w	8006b66 <f_mkfs+0x38e>
		} while (++pi < GPT_ITEMS);
 800736e:	f5b9 4f80 	cmp.w	r9, #16384	@ 0x4000
 8007372:	d1c0      	bne.n	80072f6 <f_mkfs+0xb1e>
		memset(buf, 0, ss);
 8007374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007378:	2100      	movs	r1, #0
 800737a:	4620      	mov	r0, r4
 800737c:	f00d fb92 	bl	8014aa4 <memset>
		memcpy(buf + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16);	/* Signature, version (1.0) and size (92) */
 8007380:	4bac      	ldr	r3, [pc, #688]	@ (8007634 <f_mkfs+0xe5c>)
 8007382:	4622      	mov	r2, r4
 8007384:	f103 0110 	add.w	r1, r3, #16
 8007388:	f853 0b04 	ldr.w	r0, [r3], #4
 800738c:	428b      	cmp	r3, r1
 800738e:	f842 0b04 	str.w	r0, [r2], #4
 8007392:	d1f9      	bne.n	8007388 <f_mkfs+0xbb0>
		st_32(buf + GPTH_PtBcc, ~bcc);			/* Table check sum */
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800739a:	1e67      	subs	r7, r4, #1
 800739c:	f104 095b 	add.w	r9, r4, #91	@ 0x5b
 80073a0:	43d9      	mvns	r1, r3
 80073a2:	f7fc ff96 	bl	80042d2 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80073a6:	2301      	movs	r3, #1
		st_64(buf + GPTH_BakLba, sz_drv - 1);	/* LBA of secondary header */
 80073a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073aa:	f104 0020 	add.w	r0, r4, #32
	*ptr++ = (BYTE)val; val >>= 8;
 80073ae:	7623      	strb	r3, [r4, #24]
		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
 80073b0:	463d      	mov	r5, r7
		st_64(buf + GPTH_BakLba, sz_drv - 1);	/* LBA of secondary header */
 80073b2:	3a01      	subs	r2, #1
 80073b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80073b6:	f163 0300 	sbc.w	r3, r3, #0
 80073ba:	f7fc ff92 	bl	80042e2 <st_64>
	*ptr++ = (BYTE)val; val >>= 8;
 80073be:	2322      	movs	r3, #34	@ 0x22
		st_64(buf + GPTH_LstLba, top_bpt - 1);	/* LBA of last allocatable sector */
 80073c0:	9a08      	ldr	r2, [sp, #32]
 80073c2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80073c6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
		st_64(buf + GPTH_LstLba, top_bpt - 1);	/* LBA of last allocatable sector */
 80073ca:	3a22      	subs	r2, #34	@ 0x22
 80073cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ce:	f163 0300 	sbc.w	r3, r3, #0
 80073d2:	f7fc ff86 	bl	80042e2 <st_64>
	*ptr++ = (BYTE)val; val >>= 8;
 80073d6:	2380      	movs	r3, #128	@ 0x80
		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
 80073d8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80073dc:	9806      	ldr	r0, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 80073de:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80073e2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 80073e6:	2302      	movs	r3, #2
 80073e8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
 80073ec:	f7fd feaa 	bl	8005144 <make_rand.constprop.0>
		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80073f8:	f7fc ffec 	bl	80043d4 <crc32>
 80073fc:	45a9      	cmp	r9, r5
 80073fe:	d1f9      	bne.n	80073f4 <f_mkfs+0xc1c>
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 8007400:	f104 0810 	add.w	r8, r4, #16
		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
 8007404:	f04f 0a01 	mov.w	sl, #1
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 8007408:	43c1      	mvns	r1, r0
		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
 800740a:	2201      	movs	r2, #1
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 800740c:	4640      	mov	r0, r8
 800740e:	f7fc ff60 	bl	80042d2 <st_32>
		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
 8007412:	2300      	movs	r3, #0
 8007414:	4621      	mov	r1, r4
 8007416:	9803      	ldr	r0, [sp, #12]
 8007418:	f8cd a000 	str.w	sl, [sp]
 800741c:	f7fc ff40 	bl	80042a0 <disk_write>
 8007420:	4683      	mov	fp, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	f47f ab9f 	bne.w	8006b66 <f_mkfs+0x38e>
		st_64(buf + GPTH_CurLba, sz_drv - 1);	/* LBA of this header */
 8007428:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800742a:	f104 0018 	add.w	r0, r4, #24
 800742e:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8007430:	3d01      	subs	r5, #1
 8007432:	f146 36ff 	adc.w	r6, r6, #4294967295
 8007436:	462a      	mov	r2, r5
 8007438:	4633      	mov	r3, r6
 800743a:	f7fc ff52 	bl	80042e2 <st_64>
		st_64(buf + GPTH_PtOfs, top_bpt);		/* LBA of this table */
 800743e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8007442:	9a02      	ldr	r2, [sp, #8]
 8007444:	9b04      	ldr	r3, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007446:	f884 a020 	strb.w	sl, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800744a:	f884 b021 	strb.w	fp, [r4, #33]	@ 0x21
	*ptr++ = (BYTE)val; val >>= 8;
 800744e:	f884 b022 	strb.w	fp, [r4, #34]	@ 0x22
	*ptr++ = (BYTE)val; val >>= 8;
 8007452:	f884 b023 	strb.w	fp, [r4, #35]	@ 0x23
	*ptr++ = (BYTE)val; val >>= 8;
 8007456:	f884 b024 	strb.w	fp, [r4, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 800745a:	f884 b025 	strb.w	fp, [r4, #37]	@ 0x25
	*ptr++ = (BYTE)val; val >>= 8;
 800745e:	f884 b026 	strb.w	fp, [r4, #38]	@ 0x26
	*ptr++ = (BYTE)val;
 8007462:	f884 b027 	strb.w	fp, [r4, #39]	@ 0x27
		st_64(buf + GPTH_PtOfs, top_bpt);		/* LBA of this table */
 8007466:	f7fc ff3c 	bl	80042e2 <st_64>
		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800746e:	f884 b010 	strb.w	fp, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007472:	f884 b011 	strb.w	fp, [r4, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8007476:	f884 b012 	strb.w	fp, [r4, #18]
	*ptr++ = (BYTE)val;
 800747a:	f884 b013 	strb.w	fp, [r4, #19]
		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 800747e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8007482:	f7fc ffa7 	bl	80043d4 <crc32>
 8007486:	45b9      	cmp	r9, r7
 8007488:	d1f9      	bne.n	800747e <f_mkfs+0xca6>
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 800748a:	43c1      	mvns	r1, r0
 800748c:	4640      	mov	r0, r8
 800748e:	f7fc ff20 	bl	80042d2 <st_32>
		if (disk_write(drv, buf, sz_drv - 1, 1) != RES_OK) return FR_DISK_ERR;
 8007492:	2301      	movs	r3, #1
 8007494:	4621      	mov	r1, r4
 8007496:	462a      	mov	r2, r5
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	4633      	mov	r3, r6
 800749c:	9803      	ldr	r0, [sp, #12]
 800749e:	f7fc feff 	bl	80042a0 <disk_write>
 80074a2:	4601      	mov	r1, r0
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f47f ab5e 	bne.w	8006b66 <f_mkfs+0x38e>
		memset(buf, 0, ss);
 80074aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074ae:	4620      	mov	r0, r4
 80074b0:	f00d faf8 	bl	8014aa4 <memset>
		memcpy(buf + MBR_Table, gpt_mbr, 16);	/* Create a GPT partition */
 80074b4:	4b60      	ldr	r3, [pc, #384]	@ (8007638 <f_mkfs+0xe60>)
 80074b6:	f504 72df 	add.w	r2, r4, #446	@ 0x1be
 80074ba:	f103 0110 	add.w	r1, r3, #16
 80074be:	f853 0b04 	ldr.w	r0, [r3], #4
 80074c2:	428b      	cmp	r3, r1
 80074c4:	f842 0b04 	str.w	r0, [r2], #4
 80074c8:	d1f9      	bne.n	80074be <f_mkfs+0xce6>
	*ptr++ = (BYTE)val; val >>= 8;
 80074ca:	2355      	movs	r3, #85	@ 0x55
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80074cc:	2200      	movs	r2, #0
 80074ce:	4621      	mov	r1, r4
 80074d0:	9803      	ldr	r0, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80074d2:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80074d6:	23aa      	movs	r3, #170	@ 0xaa
 80074d8:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80074dc:	2301      	movs	r3, #1
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	f7fc fedd 	bl	80042a0 <disk_write>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f47f ab3d 	bne.w	8006b66 <f_mkfs+0x38e>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80074ec:	2200      	movs	r2, #0
 80074ee:	9803      	ldr	r0, [sp, #12]
 80074f0:	4611      	mov	r1, r2
 80074f2:	f7fc fedf 	bl	80042b4 <disk_ioctl>
 80074f6:	3800      	subs	r0, #0
 80074f8:	bf18      	it	ne
 80074fa:	2001      	movne	r0, #1
 80074fc:	f7ff b9f3 	b.w	80068e6 <f_mkfs+0x10e>
 8007500:	930a      	str	r3, [sp, #40]	@ 0x28
 8007502:	e707      	b.n	8007314 <f_mkfs+0xb3c>
					sz_part = (nxt_alloc < top_bpt) ? top_bpt - nxt_alloc : 0;
 8007504:	2500      	movs	r5, #0
 8007506:	46a8      	mov	r8, r5
 8007508:	e704      	b.n	8007314 <f_mkfs+0xb3c>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800750a:	4b4c      	ldr	r3, [pc, #304]	@ (800763c <f_mkfs+0xe64>)
 800750c:	4598      	cmp	r8, r3
 800750e:	d97c      	bls.n	800760a <f_mkfs+0xe32>
 8007510:	2305      	movs	r3, #5
 8007512:	2508      	movs	r5, #8
 8007514:	f64f 423e 	movw	r2, #64574	@ 0xfc3e
 8007518:	006d      	lsls	r5, r5, #1
 800751a:	3b01      	subs	r3, #1
 800751c:	b2ed      	uxtb	r5, r5
 800751e:	d003      	beq.n	8007528 <f_mkfs+0xd50>
 8007520:	fbb8 f1f5 	udiv	r1, r8, r5
 8007524:	4291      	cmp	r1, r2
 8007526:	d8f7      	bhi.n	8007518 <f_mkfs+0xd40>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8007528:	2d00      	cmp	r5, #0
 800752a:	bf08      	it	eq
 800752c:	25ff      	moveq	r5, #255	@ 0xff
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800752e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007532:	2100      	movs	r1, #0
 8007534:	4620      	mov	r0, r4
 8007536:	f00d fab5 	bl	8014aa4 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800753a:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
 800753e:	d9c4      	bls.n	80074ca <f_mkfs+0xcf2>
 8007540:	223f      	movs	r2, #63	@ 0x3f
 8007542:	f10d 0a70 	add.w	sl, sp, #112	@ 0x70
 8007546:	f504 76e3 	add.w	r6, r4, #454	@ 0x1c6
 800754a:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 800754e:	4693      	mov	fp, r2
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 8007550:	f85a 7b08 	ldr.w	r7, [sl], #8
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8007554:	2f64      	cmp	r7, #100	@ 0x64
 8007556:	d804      	bhi.n	8007562 <f_mkfs+0xd8a>
 8007558:	d00b      	beq.n	8007572 <f_mkfs+0xd9a>
 800755a:	2164      	movs	r1, #100	@ 0x64
 800755c:	fbb8 f1f1 	udiv	r1, r8, r1
 8007560:	434f      	muls	r7, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 8007562:	18b8      	adds	r0, r7, r2
 8007564:	bf2c      	ite	cs
 8007566:	2101      	movcs	r1, #1
 8007568:	2100      	movcc	r1, #0
 800756a:	4540      	cmp	r0, r8
 800756c:	d801      	bhi.n	8007572 <f_mkfs+0xd9a>
 800756e:	2900      	cmp	r1, #0
 8007570:	d04d      	beq.n	800760e <f_mkfs+0xe36>
 8007572:	eba8 0702 	sub.w	r7, r8, r2
			st_32(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 8007576:	4611      	mov	r1, r2
 8007578:	4630      	mov	r0, r6
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	f7fc fea9 	bl	80042d2 <st_32>
			st_32(pte + PTE_SizLba, sz_part32);		/* Size of partition [sector] */
 8007580:	4639      	mov	r1, r7
 8007582:	1d30      	adds	r0, r6, #4
 8007584:	f7fc fea5 	bl	80042d2 <st_32>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8007588:	9b02      	ldr	r3, [sp, #8]
			pte[PTE_System] = sys;					/* System type */
 800758a:	f806 9c04 	strb.w	r9, [r6, #-4]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800758e:	42b3      	cmp	r3, r6
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8007590:	fbb2 f1fb 	udiv	r1, r2, fp
 8007594:	fbb1 f0f5 	udiv	r0, r1, r5
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8007598:	fb05 1c10 	mls	ip, r5, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 800759c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
			pte[PTE_StCyl] = (BYTE)cy;
 80075a0:	f806 0c05 	strb.w	r0, [r6, #-5]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 80075a4:	eba2 0101 	sub.w	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 80075a8:	f806 cc07 	strb.w	ip, [r6, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80075ac:	ea4f 0c90 	mov.w	ip, r0, lsr #2
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 80075b0:	443a      	add	r2, r7
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 80075b2:	f101 0101 	add.w	r1, r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80075b6:	f02c 0c3f 	bic.w	ip, ip, #63	@ 0x3f
 80075ba:	ea41 010c 	orr.w	r1, r1, ip
 80075be:	f806 1c06 	strb.w	r1, [r6, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 80075c2:	f102 31ff 	add.w	r1, r2, #4294967295
 80075c6:	fbb1 f7fb 	udiv	r7, r1, fp
 80075ca:	fbb7 f0f5 	udiv	r0, r7, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 80075ce:	fb05 7c10 	mls	ip, r5, r0, r7
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 80075d2:	ebc7 1787 	rsb	r7, r7, r7, lsl #6
			pte[PTE_EdCyl] = (BYTE)cy;
 80075d6:	f806 0c01 	strb.w	r0, [r6, #-1]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 80075da:	eba1 0107 	sub.w	r1, r1, r7
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80075de:	ea4f 0790 	mov.w	r7, r0, lsr #2
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 80075e2:	f806 cc03 	strb.w	ip, [r6, #-3]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 80075e6:	f101 0101 	add.w	r1, r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80075ea:	f027 073f 	bic.w	r7, r7, #63	@ 0x3f
 80075ee:	ea41 0107 	orr.w	r1, r1, r7
 80075f2:	f806 1c02 	strb.w	r1, [r6, #-2]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80075f6:	f43f af68 	beq.w	80074ca <f_mkfs+0xcf2>
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	f43f af65 	beq.w	80074ca <f_mkfs+0xcf2>
 8007600:	4542      	cmp	r2, r8
 8007602:	f106 0610 	add.w	r6, r6, #16
 8007606:	d3a3      	bcc.n	8007550 <f_mkfs+0xd78>
 8007608:	e75f      	b.n	80074ca <f_mkfs+0xcf2>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800760a:	2508      	movs	r5, #8
 800760c:	e78f      	b.n	800752e <f_mkfs+0xd56>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800760e:	2f00      	cmp	r7, #0
 8007610:	d1b1      	bne.n	8007576 <f_mkfs+0xd9e>
 8007612:	e75a      	b.n	80074ca <f_mkfs+0xcf2>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007614:	200b      	movs	r0, #11
 8007616:	f7ff b966 	b.w	80068e6 <f_mkfs+0x10e>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800761a:	2003      	movs	r0, #3
 800761c:	f7ff b963 	b.w	80068e6 <f_mkfs+0x10e>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007620:	200a      	movs	r0, #10
 8007622:	f7ff b960 	b.w	80068e6 <f_mkfs+0x10e>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8007626:	2011      	movs	r0, #17
 8007628:	f7ff b95d 	b.w	80068e6 <f_mkfs+0x10e>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800762c:	2013      	movs	r0, #19
 800762e:	f7ff b95a 	b.w	80068e6 <f_mkfs+0x10e>
 8007632:	bf00      	nop
 8007634:	080158e0 	.word	0x080158e0
 8007638:	080158f0 	.word	0x080158f0
 800763c:	0007e1f7 	.word	0x0007e1f7
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8007640:	f640 73f5 	movw	r3, #4085	@ 0xff5
 8007644:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007646:	429a      	cmp	r2, r3
 8007648:	f63f a94c 	bhi.w	80068e4 <f_mkfs+0x10c>
 800764c:	2701      	movs	r7, #1
		memset(buf, 0, ss);
 800764e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007652:	2100      	movs	r1, #0
 8007654:	4620      	mov	r0, r4
 8007656:	f00d fa25 	bl	8014aa4 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800765a:	4b9a      	ldr	r3, [pc, #616]	@ (80078c4 <f_mkfs+0x10ec>)
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800765c:	2f03      	cmp	r7, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800765e:	f884 900e 	strb.w	r9, [r4, #14]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007662:	681a      	ldr	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007664:	f3c9 2907 	ubfx	r9, r9, #8, #8
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8007668:	bf08      	it	eq
 800766a:	f04f 0a00 	moveq.w	sl, #0
		if (sz_vol < 0x10000) {
 800766e:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007672:	6022      	str	r2, [r4, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007676:	f884 a011 	strb.w	sl, [r4, #17]
 800767a:	f3ca 2a07 	ubfx	sl, sl, #8, #8
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800767e:	6062      	str	r2, [r4, #4]
 8007680:	891a      	ldrh	r2, [r3, #8]
 8007682:	7a9b      	ldrb	r3, [r3, #10]
 8007684:	8122      	strh	r2, [r4, #8]
 8007686:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8007688:	f04f 0302 	mov.w	r3, #2
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800768c:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 800768e:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007690:	9b06      	ldr	r3, [sp, #24]
	*ptr++ = (BYTE)val;
 8007692:	f884 900f 	strb.w	r9, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007696:	7423      	strb	r3, [r4, #16]
		if (sz_vol < 0x10000) {
 8007698:	f17b 0300 	sbcs.w	r3, fp, #0
	*ptr++ = (BYTE)val;
 800769c:	f884 a012 	strb.w	sl, [r4, #18]
		if (sz_vol < 0x10000) {
 80076a0:	f4bf adfd 	bcs.w	800729e <f_mkfs+0xac6>
	*ptr++ = (BYTE)val; val >>= 8;
 80076a4:	f884 8013 	strb.w	r8, [r4, #19]
 80076a8:	f3c8 2807 	ubfx	r8, r8, #8, #8
	*ptr++ = (BYTE)val;
 80076ac:	f884 8014 	strb.w	r8, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80076b0:	23f8      	movs	r3, #248	@ 0xf8
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 80076b2:	9904      	ldr	r1, [sp, #16]
 80076b4:	f104 001c 	add.w	r0, r4, #28
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80076b8:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80076ba:	233f      	movs	r3, #63	@ 0x3f
 80076bc:	7623      	strb	r3, [r4, #24]
 80076be:	23ff      	movs	r3, #255	@ 0xff
 80076c0:	76a3      	strb	r3, [r4, #26]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 80076c2:	f7fc fe06 	bl	80042d2 <st_32>
		if (fsty == FS_FAT32) {
 80076c6:	2f03      	cmp	r7, #3
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 80076c8:	9910      	ldr	r1, [sp, #64]	@ 0x40
		if (fsty == FS_FAT32) {
 80076ca:	f47f adee 	bne.w	80072aa <f_mkfs+0xad2>
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 80076ce:	f104 0043 	add.w	r0, r4, #67	@ 0x43
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80076d2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 80076d6:	f7fc fdfc 	bl	80042d2 <st_32>
			st_32(buf + BPB_FATSz32, sz_fat);			/* FAT size [sector] */
 80076da:	9907      	ldr	r1, [sp, #28]
 80076dc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80076e0:	f7fc fdf7 	bl	80042d2 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80076e4:	2302      	movs	r3, #2
 80076e6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80076f0:	2306      	movs	r3, #6
 80076f2:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80076f6:	2380      	movs	r3, #128	@ 0x80
 80076f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80076fc:	2329      	movs	r3, #41	@ 0x29
 80076fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007702:	4b71      	ldr	r3, [pc, #452]	@ (80078c8 <f_mkfs+0x10f0>)
 8007704:	f103 0110 	add.w	r1, r3, #16
 8007708:	f853 0b04 	ldr.w	r0, [r3], #4
 800770c:	428b      	cmp	r3, r1
 800770e:	f842 0b04 	str.w	r0, [r2], #4
 8007712:	d1f9      	bne.n	8007708 <f_mkfs+0xf30>
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007714:	8819      	ldrh	r1, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007716:	f04f 0b55 	mov.w	fp, #85	@ 0x55
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800771a:	789b      	ldrb	r3, [r3, #2]
	*ptr++ = (BYTE)val;
 800771c:	f04f 0aaa 	mov.w	sl, #170	@ 0xaa
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007720:	f04f 0801 	mov.w	r8, #1
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007724:	8011      	strh	r1, [r2, #0]
 8007726:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007728:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800772a:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800772e:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8007730:	f884 a1ff 	strb.w	sl, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007734:	9a04      	ldr	r2, [sp, #16]
 8007736:	9803      	ldr	r0, [sp, #12]
 8007738:	f8cd 8000 	str.w	r8, [sp]
 800773c:	f7fc fdb0 	bl	80042a0 <disk_write>
 8007740:	4681      	mov	r9, r0
 8007742:	2800      	cmp	r0, #0
 8007744:	f47f aa0f 	bne.w	8006b66 <f_mkfs+0x38e>
		if (fsty == FS_FAT32) {
 8007748:	2f03      	cmp	r7, #3
 800774a:	d13e      	bne.n	80077ca <f_mkfs+0xff2>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800774c:	9b04      	ldr	r3, [sp, #16]
 800774e:	4621      	mov	r1, r4
 8007750:	9803      	ldr	r0, [sp, #12]
 8007752:	1d9a      	adds	r2, r3, #6
 8007754:	f8cd 8000 	str.w	r8, [sp]
 8007758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800775a:	f7fc fda1 	bl	80042a0 <disk_write>
			memset(buf, 0, ss);
 800775e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007762:	4649      	mov	r1, r9
 8007764:	4620      	mov	r0, r4
 8007766:	f00d f99d 	bl	8014aa4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800776a:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 800776c:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800776e:	2172      	movs	r1, #114	@ 0x72
 8007770:	7023      	strb	r3, [r4, #0]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007772:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
	*ptr++ = (BYTE)val; val >>= 8;
 8007776:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007778:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 800777a:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800777c:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 800777e:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007782:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8007784:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 8007788:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800778c:	1e59      	subs	r1, r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800778e:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007792:	f7fc fd9e 	bl	80042d2 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8007796:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007798:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800779a:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800779e:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80077a2:	9b04      	ldr	r3, [sp, #16]
	*ptr++ = (BYTE)val;
 80077a4:	f884 a1ff 	strb.w	sl, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80077a8:	1dda      	adds	r2, r3, #7
 80077aa:	9803      	ldr	r0, [sp, #12]
 80077ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ae:	f8cd 8000 	str.w	r8, [sp]
 80077b2:	f7fc fd75 	bl	80042a0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	4621      	mov	r1, r4
 80077ba:	9803      	ldr	r0, [sp, #12]
 80077bc:	eb03 0208 	add.w	r2, r3, r8
 80077c0:	f8cd 8000 	str.w	r8, [sp]
 80077c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077c6:	f7fc fd6b 	bl	80042a0 <disk_write>
		memset(buf, 0, sz_buf * ss);
 80077ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077cc:	2100      	movs	r1, #0
 80077ce:	4620      	mov	r0, r4
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80077d0:	f04f 0b00 	mov.w	fp, #0
		memset(buf, 0, sz_buf * ss);
 80077d4:	f36f 0208 	bfc	r2, #0, #9
 80077d8:	f00d f964 	bl	8014aa4 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80077dc:	2f01      	cmp	r7, #1
 80077de:	4b3b      	ldr	r3, [pc, #236]	@ (80078cc <f_mkfs+0x10f4>)
 80077e0:	bf14      	ite	ne
 80077e2:	f06f 0a07 	mvnne.w	sl, #7
 80077e6:	469a      	moveq	sl, r3
			if (fsty == FS_FAT32) {
 80077e8:	2f03      	cmp	r7, #3
 80077ea:	f47f ad79 	bne.w	80072e0 <f_mkfs+0xb08>
	*ptr++ = (BYTE)val; val >>= 8;
 80077ee:	23f8      	movs	r3, #248	@ 0xf8
 80077f0:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80077f2:	23ff      	movs	r3, #255	@ 0xff
 80077f4:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80077f6:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80077f8:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80077fa:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80077fc:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 80077fe:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8007800:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007802:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007804:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8007806:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8007808:	230f      	movs	r3, #15
 800780a:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800780c:	f8dd 901c 	ldr.w	r9, [sp, #28]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007812:	4621      	mov	r1, r4
 8007814:	462a      	mov	r2, r5
 8007816:	9803      	ldr	r0, [sp, #12]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007818:	454b      	cmp	r3, r9
 800781a:	bf28      	it	cs
 800781c:	464b      	movcs	r3, r9
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800781e:	9300      	str	r3, [sp, #0]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007820:	4698      	mov	r8, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	f7fc fd3c 	bl	80042a0 <disk_write>
 8007828:	4601      	mov	r1, r0
 800782a:	2800      	cmp	r0, #0
 800782c:	f47f a99b 	bne.w	8006b66 <f_mkfs+0x38e>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 8007830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007834:	4620      	mov	r0, r4
 8007836:	f00d f935 	bl	8014aa4 <memset>
				sect += n; nsect -= n;
 800783a:	eb18 0505 	adds.w	r5, r8, r5
 800783e:	9b05      	ldr	r3, [sp, #20]
 8007840:	f143 0300 	adc.w	r3, r3, #0
			} while (nsect);
 8007844:	ebb9 0908 	subs.w	r9, r9, r8
				sect += n; nsect -= n;
 8007848:	9305      	str	r3, [sp, #20]
			} while (nsect);
 800784a:	d1e1      	bne.n	8007810 <f_mkfs+0x1038>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800784c:	f08b 0301 	eor.w	r3, fp, #1
 8007850:	f04f 0b01 	mov.w	fp, #1
 8007854:	9a06      	ldr	r2, [sp, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bf14      	ite	ne
 800785a:	465b      	movne	r3, fp
 800785c:	2302      	moveq	r3, #2
 800785e:	429a      	cmp	r2, r3
 8007860:	d8c2      	bhi.n	80077e8 <f_mkfs+0x1010>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	2f03      	cmp	r7, #3
 8007866:	bf08      	it	eq
 8007868:	4633      	moveq	r3, r6
 800786a:	9308      	str	r3, [sp, #32]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800786c:	9e08      	ldr	r6, [sp, #32]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800786e:	462a      	mov	r2, r5
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007872:	4621      	mov	r1, r4
 8007874:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007876:	429e      	cmp	r6, r3
 8007878:	bf28      	it	cs
 800787a:	461e      	movcs	r6, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800787c:	9b05      	ldr	r3, [sp, #20]
 800787e:	9600      	str	r6, [sp, #0]
 8007880:	f7fc fd0e 	bl	80042a0 <disk_write>
 8007884:	2800      	cmp	r0, #0
 8007886:	f47f a96e 	bne.w	8006b66 <f_mkfs+0x38e>
			sect += n; nsect -= n;
 800788a:	1975      	adds	r5, r6, r5
 800788c:	9b05      	ldr	r3, [sp, #20]
 800788e:	f143 0300 	adc.w	r3, r3, #0
 8007892:	9305      	str	r3, [sp, #20]
		} while (nsect);
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	1b9b      	subs	r3, r3, r6
 8007898:	9308      	str	r3, [sp, #32]
 800789a:	d1e7      	bne.n	800786c <f_mkfs+0x1094>
	} else if (fsty == FS_FAT32) {
 800789c:	2f03      	cmp	r7, #3
 800789e:	f43f ad24 	beq.w	80072ea <f_mkfs+0xb12>
	} else if (sz_vol >= 0x10000) {
 80078a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80078a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078aa:	f173 0300 	sbcs.w	r3, r3, #0
 80078ae:	f4bf ad1f 	bcs.w	80072f0 <f_mkfs+0xb18>
		sys = 0x04;		/* FAT16 */
 80078b2:	2f02      	cmp	r7, #2
 80078b4:	bf14      	ite	ne
 80078b6:	f04f 0901 	movne.w	r9, #1
 80078ba:	f04f 0904 	moveq.w	r9, #4
 80078be:	f7ff bb6a 	b.w	8006f96 <f_mkfs+0x7be>
 80078c2:	bf00      	nop
 80078c4:	08015d25 	.word	0x08015d25
 80078c8:	08015d31 	.word	0x08015d31
 80078cc:	00fffff8 	.word	0x00fffff8

080078d0 <ff_uni2oem>:
	const WCHAR* p;
	WCHAR c = 0, uc;
	UINT i, n, li, hi;


	if (uni < 0x80) {	/* ASCII? */
 80078d0:	287f      	cmp	r0, #127	@ 0x7f
{
 80078d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x80) {	/* ASCII? */
 80078d4:	d801      	bhi.n	80078da <ff_uni2oem+0xa>
		c = (WCHAR)uni;
 80078d6:	b280      	uxth	r0, r0
			}
		}
	}

	return c;
}
 80078d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (uni < 0x10000) { /* Is it in BMP? */
 80078da:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078de:	d229      	bcs.n	8007934 <ff_uni2oem+0x64>
			if (cp < 900) {	/* SBCS */
 80078e0:	f5b1 7f61 	cmp.w	r1, #900	@ 0x384
			uc = (WCHAR)uni;
 80078e4:	b285      	uxth	r5, r0
			if (cp < 900) {	/* SBCS */
 80078e6:	d21a      	bcs.n	800791e <ff_uni2oem+0x4e>
 80078e8:	4826      	ldr	r0, [pc, #152]	@ (8007984 <ff_uni2oem+0xb4>)
				for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get conversion table */
 80078ea:	2300      	movs	r3, #0
 80078ec:	f830 2b02 	ldrh.w	r2, [r0], #2
 80078f0:	b95a      	cbnz	r2, 800790a <ff_uni2oem+0x3a>
				p = cp_table[i];
 80078f2:	4a25      	ldr	r2, [pc, #148]	@ (8007988 <ff_uni2oem+0xb8>)
 80078f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
				if (p) {	/* Is it valid code page ? */
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d0ed      	beq.n	80078d8 <ff_uni2oem+0x8>
 80078fc:	2300      	movs	r3, #0
					for (c = 0; c < 0x80 && uc != p[c]; c++) ;	/* Find OEM code in the table */
 80078fe:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8007902:	42aa      	cmp	r2, r5
 8007904:	d105      	bne.n	8007912 <ff_uni2oem+0x42>
 8007906:	b29b      	uxth	r3, r3
 8007908:	e006      	b.n	8007918 <ff_uni2oem+0x48>
				for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get conversion table */
 800790a:	428a      	cmp	r2, r1
 800790c:	d0f1      	beq.n	80078f2 <ff_uni2oem+0x22>
 800790e:	3301      	adds	r3, #1
 8007910:	e7ec      	b.n	80078ec <ff_uni2oem+0x1c>
					for (c = 0; c < 0x80 && uc != p[c]; c++) ;	/* Find OEM code in the table */
 8007912:	3301      	adds	r3, #1
 8007914:	2b80      	cmp	r3, #128	@ 0x80
 8007916:	d1f2      	bne.n	80078fe <ff_uni2oem+0x2e>
					c = (c + 0x80) & 0xFF;
 8007918:	3380      	adds	r3, #128	@ 0x80
 800791a:	b2d8      	uxtb	r0, r3
 800791c:	e7dc      	b.n	80078d8 <ff_uni2oem+0x8>
				switch (cp) {	/* Get conversion table */
 800791e:	f240 33b5 	movw	r3, #949	@ 0x3b5
 8007922:	4299      	cmp	r1, r3
 8007924:	d01f      	beq.n	8007966 <ff_uni2oem+0x96>
 8007926:	d807      	bhi.n	8007938 <ff_uni2oem+0x68>
 8007928:	f5b1 7f69 	cmp.w	r1, #932	@ 0x3a4
 800792c:	d01f      	beq.n	800796e <ff_uni2oem+0x9e>
 800792e:	f5b1 7f6a 	cmp.w	r1, #936	@ 0x3a8
 8007932:	d020      	beq.n	8007976 <ff_uni2oem+0xa6>
	WCHAR c = 0, uc;
 8007934:	2000      	movs	r0, #0
 8007936:	e7cf      	b.n	80078d8 <ff_uni2oem+0x8>
				switch (cp) {	/* Get conversion table */
 8007938:	f240 33b6 	movw	r3, #950	@ 0x3b6
 800793c:	4299      	cmp	r1, r3
 800793e:	d1f9      	bne.n	8007934 <ff_uni2oem+0x64>
				case 950 : p = uni2oem950; hi = sizeof uni2oem950 / 4 - 1; break;
 8007940:	f243 41bf 	movw	r1, #13503	@ 0x34bf
 8007944:	4b11      	ldr	r3, [pc, #68]	@ (800798c <ff_uni2oem+0xbc>)
					li = 0;
 8007946:	2400      	movs	r4, #0
					for (n = 16; n; n--) {	/* Find OEM code */
 8007948:	2010      	movs	r0, #16
						i = li + (hi - li) / 2;
 800794a:	1b0a      	subs	r2, r1, r4
 800794c:	eb04 0252 	add.w	r2, r4, r2, lsr #1
						if (uc == p[i * 2]) break;
 8007950:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
 8007954:	0096      	lsls	r6, r2, #2
 8007956:	42af      	cmp	r7, r5
 8007958:	d011      	beq.n	800797e <ff_uni2oem+0xae>
							li = i;
 800795a:	bf34      	ite	cc
 800795c:	4614      	movcc	r4, r2
							hi = i;
 800795e:	4611      	movcs	r1, r2
					for (n = 16; n; n--) {	/* Find OEM code */
 8007960:	3801      	subs	r0, #1
 8007962:	d1f2      	bne.n	800794a <ff_uni2oem+0x7a>
 8007964:	e7b8      	b.n	80078d8 <ff_uni2oem+0x8>
				case 949 : p = uni2oem949; hi = sizeof uni2oem949 / 4 - 1; break;
 8007966:	f244 2198 	movw	r1, #17048	@ 0x4298
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <ff_uni2oem+0xc0>)
 800796c:	e7eb      	b.n	8007946 <ff_uni2oem+0x76>
				case 932 : p = uni2oem932; hi = sizeof uni2oem932 / 4 - 1; break;
 800796e:	f641 41dd 	movw	r1, #7389	@ 0x1cdd
 8007972:	4b08      	ldr	r3, [pc, #32]	@ (8007994 <ff_uni2oem+0xc4>)
 8007974:	e7e7      	b.n	8007946 <ff_uni2oem+0x76>
				switch (cp) {	/* Get conversion table */
 8007976:	f245 5120 	movw	r1, #21792	@ 0x5520
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <ff_uni2oem+0xc8>)
 800797c:	e7e3      	b.n	8007946 <ff_uni2oem+0x76>
					if (n != 0) c = p[i * 2 + 1];
 800797e:	4433      	add	r3, r6
 8007980:	8858      	ldrh	r0, [r3, #2]
	return c;
 8007982:	e7a9      	b.n	80078d8 <ff_uni2oem+0x8>
 8007984:	08018804 	.word	0x08018804
 8007988:	080187bc 	.word	0x080187bc
 800798c:	08026c28 	.word	0x08026c28
 8007990:	0804498c 	.word	0x0804498c
 8007994:	08087070 	.word	0x08087070
 8007998:	0806a874 	.word	0x0806a874

0800799c <ff_oem2uni>:
	const WCHAR* p;
	WCHAR c = 0;
	UINT i, n, li, hi;


	if (oem < 0x80) {	/* ASCII? */
 800799c:	287f      	cmp	r0, #127	@ 0x7f
{
 800799e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (oem < 0x80) {	/* ASCII? */
 80079a0:	d918      	bls.n	80079d4 <ff_oem2uni+0x38>
		c = oem;

	} else {			/* Extended char */
		p = 0;
		if (cp < 900) {	/* SBCS */
 80079a2:	f5b1 7f61 	cmp.w	r1, #900	@ 0x384
 80079a6:	d216      	bcs.n	80079d6 <ff_oem2uni+0x3a>
 80079a8:	4c23      	ldr	r4, [pc, #140]	@ (8007a38 <ff_oem2uni+0x9c>)
			for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get table */
 80079aa:	2300      	movs	r3, #0
 80079ac:	f834 2b02 	ldrh.w	r2, [r4], #2
 80079b0:	b92a      	cbnz	r2, 80079be <ff_oem2uni+0x22>
			p = cp_table[i];
 80079b2:	4a22      	ldr	r2, [pc, #136]	@ (8007a3c <ff_oem2uni+0xa0>)
 80079b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (p) {	/* Is it a valid CP ? */
 80079b8:	b92b      	cbnz	r3, 80079c6 <ff_oem2uni+0x2a>
	WCHAR c = 0;
 80079ba:	2000      	movs	r0, #0
 80079bc:	e00a      	b.n	80079d4 <ff_oem2uni+0x38>
			for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get table */
 80079be:	428a      	cmp	r2, r1
 80079c0:	d0f7      	beq.n	80079b2 <ff_oem2uni+0x16>
 80079c2:	3301      	adds	r3, #1
 80079c4:	e7f2      	b.n	80079ac <ff_oem2uni+0x10>
				if (oem < 0x100) c = p[oem - 0x80];
 80079c6:	28ff      	cmp	r0, #255	@ 0xff
 80079c8:	d8f7      	bhi.n	80079ba <ff_oem2uni+0x1e>
 80079ca:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80079ce:	3880      	subs	r0, #128	@ 0x80
 80079d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			}
		}
	}

	return c;
}
 80079d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (cp) {
 80079d6:	f240 33b5 	movw	r3, #949	@ 0x3b5
 80079da:	4299      	cmp	r1, r3
 80079dc:	d021      	beq.n	8007a22 <ff_oem2uni+0x86>
 80079de:	d809      	bhi.n	80079f4 <ff_oem2uni+0x58>
 80079e0:	f5b1 7f69 	cmp.w	r1, #932	@ 0x3a4
 80079e4:	d021      	beq.n	8007a2a <ff_oem2uni+0x8e>
 80079e6:	f5b1 7f6a 	cmp.w	r1, #936	@ 0x3a8
 80079ea:	d1e6      	bne.n	80079ba <ff_oem2uni+0x1e>
 80079ec:	f245 5120 	movw	r1, #21792	@ 0x5520
 80079f0:	4b13      	ldr	r3, [pc, #76]	@ (8007a40 <ff_oem2uni+0xa4>)
 80079f2:	e006      	b.n	8007a02 <ff_oem2uni+0x66>
 80079f4:	f240 33b6 	movw	r3, #950	@ 0x3b6
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d1de      	bne.n	80079ba <ff_oem2uni+0x1e>
			case 950 : p = oem2uni950; hi = sizeof oem2uni950 / 4 - 1; break;
 80079fc:	f243 41bf 	movw	r1, #13503	@ 0x34bf
 8007a00:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <ff_oem2uni+0xa8>)
				li = 0;
 8007a02:	2500      	movs	r5, #0
				for (n = 16; n; n--) {
 8007a04:	2410      	movs	r4, #16
					i = li + (hi - li) / 2;
 8007a06:	1b4a      	subs	r2, r1, r5
 8007a08:	eb05 0252 	add.w	r2, r5, r2, lsr #1
					if (oem == p[i * 2]) break;
 8007a0c:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
 8007a10:	0096      	lsls	r6, r2, #2
 8007a12:	4287      	cmp	r7, r0
 8007a14:	d00d      	beq.n	8007a32 <ff_oem2uni+0x96>
						li = i;
 8007a16:	bf34      	ite	cc
 8007a18:	4615      	movcc	r5, r2
						hi = i;
 8007a1a:	4611      	movcs	r1, r2
				for (n = 16; n; n--) {
 8007a1c:	3c01      	subs	r4, #1
 8007a1e:	d1f2      	bne.n	8007a06 <ff_oem2uni+0x6a>
 8007a20:	e7cb      	b.n	80079ba <ff_oem2uni+0x1e>
			case 949 : p = oem2uni949; hi = sizeof oem2uni949 / 4 - 1; break;
 8007a22:	f244 2198 	movw	r1, #17048	@ 0x4298
 8007a26:	4b08      	ldr	r3, [pc, #32]	@ (8007a48 <ff_oem2uni+0xac>)
 8007a28:	e7eb      	b.n	8007a02 <ff_oem2uni+0x66>
			case 932 : p = oem2uni932; hi = sizeof oem2uni932 / 4 - 1; break;
 8007a2a:	f641 41dd 	movw	r1, #7389	@ 0x1cdd
 8007a2e:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <ff_oem2uni+0xb0>)
 8007a30:	e7e7      	b.n	8007a02 <ff_oem2uni+0x66>
				if (n != 0) c = p[i * 2 + 1];
 8007a32:	4433      	add	r3, r6
 8007a34:	8858      	ldrh	r0, [r3, #2]
	return c;
 8007a36:	e7cd      	b.n	80079d4 <ff_oem2uni+0x38>
 8007a38:	08018804 	.word	0x08018804
 8007a3c:	080187bc 	.word	0x080187bc
 8007a40:	080553f0 	.word	0x080553f0
 8007a44:	08019928 	.word	0x08019928
 8007a48:	08033f28 	.word	0x08033f28
 8007a4c:	0807fcf8 	.word	0x0807fcf8

08007a50 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8007a50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
{
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 8007a56:	d222      	bcs.n	8007a9e <ff_wtoupper+0x4e>
		uc = (WORD)uni;
 8007a58:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8007a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad8 <ff_wtoupper+0x88>)
 8007a5c:	491f      	ldr	r1, [pc, #124]	@ (8007adc <ff_wtoupper+0x8c>)
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a62:	bf38      	it	cc
 8007a64:	460a      	movcc	r2, r1
 8007a66:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 8007a68:	f834 2c04 	ldrh.w	r2, [r4, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	b1aa      	cbz	r2, 8007a9c <ff_wtoupper+0x4c>
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d313      	bcc.n	8007a9c <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007a74:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 8007a78:	0a2e      	lsrs	r6, r5, #8
 8007a7a:	b2ef      	uxtb	r7, r5
			if (uc < bc + nc) {	/* In the block? */
 8007a7c:	fa52 f585 	uxtab	r5, r2, r5
 8007a80:	42a8      	cmp	r0, r5
 8007a82:	da23      	bge.n	8007acc <ff_wtoupper+0x7c>
				switch (cmd) {
 8007a84:	2e08      	cmp	r6, #8
 8007a86:	d809      	bhi.n	8007a9c <ff_wtoupper+0x4c>
 8007a88:	e8df f006 	tbb	[pc, r6]
 8007a8c:	13100a05 	.word	0x13100a05
 8007a90:	1b191715 	.word	0x1b191715
 8007a94:	1d          	.byte	0x1d
 8007a95:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007a96:	1a80      	subs	r0, r0, r2
 8007a98:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 8007a9c:	4618      	mov	r0, r3
	}

	return uni;
}
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8007aa0:	1a9a      	subs	r2, r3, r2
 8007aa2:	f002 0201 	and.w	r2, r2, #1
 8007aa6:	1a9a      	subs	r2, r3, r2
 8007aa8:	b293      	uxth	r3, r2
 8007aaa:	e7f7      	b.n	8007a9c <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
 8007aac:	3b10      	subs	r3, #16
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	e7f4      	b.n	8007a9c <ff_wtoupper+0x4c>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007ab2:	3b20      	subs	r3, #32
 8007ab4:	e7fb      	b.n	8007aae <ff_wtoupper+0x5e>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8007ab6:	3b30      	subs	r3, #48	@ 0x30
 8007ab8:	e7f9      	b.n	8007aae <ff_wtoupper+0x5e>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8007aba:	3b1a      	subs	r3, #26
 8007abc:	e7f7      	b.n	8007aae <ff_wtoupper+0x5e>
				case 6:	uc += 8; break;				/* Shift +8 */
 8007abe:	3308      	adds	r3, #8
 8007ac0:	e7f5      	b.n	8007aae <ff_wtoupper+0x5e>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007ac2:	3b50      	subs	r3, #80	@ 0x50
 8007ac4:	e7f3      	b.n	8007aae <ff_wtoupper+0x5e>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8007ac6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007aca:	e7f0      	b.n	8007aae <ff_wtoupper+0x5e>
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007acc:	3404      	adds	r4, #4
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	d1ca      	bne.n	8007a68 <ff_wtoupper+0x18>
 8007ad2:	eb01 0247 	add.w	r2, r1, r7, lsl #1
 8007ad6:	e7c6      	b.n	8007a66 <ff_wtoupper+0x16>
 8007ad8:	0801850e 	.word	0x0801850e
 8007adc:	080185ca 	.word	0x080185ca

08007ae0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ae0:	f100 0308 	add.w	r3, r0, #8

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ae8:	6043      	str	r3, [r0, #4]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aea:	6103      	str	r3, [r0, #16]
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aec:	e9c0 2302 	strd	r2, r3, [r0, #8]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007af4:	4770      	bx	lr

08007af6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007afa:	4770      	bx	lr

08007afc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 8007afc:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007afe:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
 8007b00:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b02:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b04:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8007b06:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8007b08:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8007b0a:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	6003      	str	r3, [r0, #0]
}
 8007b10:	4770      	bx	lr

08007b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007b12:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b14:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007b16:	1c63      	adds	r3, r4, #1
 8007b18:	d10a      	bne.n	8007b30 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007b1a:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b20:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007b22:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8007b24:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8007b26:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8007b28:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	6003      	str	r3, [r0, #0]
}
 8007b2e:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b30:	f100 0208 	add.w	r2, r0, #8
 8007b34:	4613      	mov	r3, r2
 8007b36:	6852      	ldr	r2, [r2, #4]
 8007b38:	6815      	ldr	r5, [r2, #0]
 8007b3a:	42a5      	cmp	r5, r4
 8007b3c:	d9fa      	bls.n	8007b34 <vListInsert+0x22>
 8007b3e:	e7ed      	b.n	8007b1c <vListInsert+0xa>

08007b40 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007b40:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b42:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007b46:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b48:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007b4a:	6859      	ldr	r1, [r3, #4]
 8007b4c:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b4e:	bf08      	it	eq
 8007b50:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007b52:	2200      	movs	r2, #0
 8007b54:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	3a01      	subs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007b5c:	6818      	ldr	r0, [r3, #0]
}
 8007b5e:	4770      	bx	lr

08007b60 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007b64:	f001 fd56 	bl	8009614 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007b68:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8007b6a:	f001 fd77 	bl	800965c <vPortExitCritical>

    return xReturn;
}
 8007b6e:	fab4 f084 	clz	r0, r4
 8007b72:	0940      	lsrs	r0, r0, #5
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <prvCopyDataToQueue>:
{
 8007b76:	b570      	push	{r4, r5, r6, lr}
 8007b78:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b7a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8007b7c:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b7e:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b80:	b942      	cbnz	r2, 8007b94 <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b82:	6806      	ldr	r6, [r0, #0]
 8007b84:	b99e      	cbnz	r6, 8007bae <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b86:	6880      	ldr	r0, [r0, #8]
 8007b88:	f001 f9a6 	bl	8008ed8 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b8c:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b8e:	3501      	adds	r5, #1
 8007b90:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8007b94:	b96e      	cbnz	r6, 8007bb2 <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b96:	6840      	ldr	r0, [r0, #4]
 8007b98:	f00d f82f 	bl	8014bfa <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ba0:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ba2:	68a2      	ldr	r2, [r4, #8]
 8007ba4:	4293      	cmp	r3, r2
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ba6:	6063      	str	r3, [r4, #4]
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ba8:	bf24      	itt	cs
 8007baa:	6823      	ldrcs	r3, [r4, #0]
 8007bac:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8007bae:	2000      	movs	r0, #0
 8007bb0:	e7ed      	b.n	8007b8e <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bb2:	68c0      	ldr	r0, [r0, #12]
 8007bb4:	f00d f821 	bl	8014bfa <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bb8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007bba:	68e3      	ldr	r3, [r4, #12]
 8007bbc:	4251      	negs	r1, r2
 8007bbe:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	4293      	cmp	r3, r2
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bc4:	60e3      	str	r3, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bc6:	bf3e      	ittt	cc
 8007bc8:	68a3      	ldrcc	r3, [r4, #8]
 8007bca:	185b      	addcc	r3, r3, r1
 8007bcc:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8007bce:	2e02      	cmp	r6, #2
 8007bd0:	d1ed      	bne.n	8007bae <prvCopyDataToQueue+0x38>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd2:	b10d      	cbz	r5, 8007bd8 <prvCopyDataToQueue+0x62>
                --uxMessagesWaiting;
 8007bd4:	3d01      	subs	r5, #1
 8007bd6:	e7ea      	b.n	8007bae <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
 8007bd8:	4628      	mov	r0, r5
 8007bda:	e7d8      	b.n	8007b8e <prvCopyDataToQueue+0x18>

08007bdc <prvCopyDataFromQueue>:
{
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4608      	mov	r0, r1
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007be2:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007be4:	b162      	cbz	r2, 8007c00 <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007be6:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007be8:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bea:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bec:	428c      	cmp	r4, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bee:	60dc      	str	r4, [r3, #12]
}
 8007bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bf4:	bf24      	itt	cs
 8007bf6:	6819      	ldrcs	r1, [r3, #0]
 8007bf8:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bfa:	68d9      	ldr	r1, [r3, #12]
 8007bfc:	f00c bffd 	b.w	8014bfa <memcpy>
}
 8007c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <prvUnlockQueue>:
{
 8007c06:	b570      	push	{r4, r5, r6, lr}
 8007c08:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8007c0a:	f001 fd03 	bl	8009614 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007c0e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c12:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8007c16:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	dd01      	ble.n	8007c20 <prvUnlockQueue+0x1a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c1e:	b9b3      	cbnz	r3, 8007c4e <prvUnlockQueue+0x48>
        pxQueue->cTxLock = queueUNLOCKED;
 8007c20:	23ff      	movs	r3, #255	@ 0xff
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c22:	f104 0610 	add.w	r6, r4, #16
        pxQueue->cTxLock = queueUNLOCKED;
 8007c26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007c2a:	f001 fd17 	bl	800965c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007c2e:	f001 fcf1 	bl	8009614 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007c32:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8007c36:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	dd01      	ble.n	8007c40 <prvUnlockQueue+0x3a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	b97b      	cbnz	r3, 8007c60 <prvUnlockQueue+0x5a>
        pxQueue->cRxLock = queueUNLOCKED;
 8007c40:	23ff      	movs	r3, #255	@ 0xff
 8007c42:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8007c4a:	f001 bd07 	b.w	800965c <vPortExitCritical>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f001 f82c 	bl	8008cac <xTaskRemoveFromEventList>
 8007c54:	b108      	cbz	r0, 8007c5a <prvUnlockQueue+0x54>
                        vTaskMissedYield();
 8007c56:	f001 f8dd 	bl	8008e14 <vTaskMissedYield>
            --cTxLock;
 8007c5a:	3d01      	subs	r5, #1
 8007c5c:	b26d      	sxtb	r5, r5
 8007c5e:	e7db      	b.n	8007c18 <prvUnlockQueue+0x12>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c60:	4630      	mov	r0, r6
 8007c62:	f001 f823 	bl	8008cac <xTaskRemoveFromEventList>
 8007c66:	b108      	cbz	r0, 8007c6c <prvUnlockQueue+0x66>
                    vTaskMissedYield();
 8007c68:	f001 f8d4 	bl	8008e14 <vTaskMissedYield>
                --cRxLock;
 8007c6c:	3d01      	subs	r5, #1
 8007c6e:	b26d      	sxtb	r5, r5
 8007c70:	e7e2      	b.n	8007c38 <prvUnlockQueue+0x32>

08007c72 <xQueueGenericReset>:
{
 8007c72:	b570      	push	{r4, r5, r6, lr}
 8007c74:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 8007c76:	4604      	mov	r4, r0
 8007c78:	b950      	cbnz	r0, 8007c90 <xQueueGenericReset+0x1e>
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	b672      	cpsid	i
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	b662      	cpsie	i
 8007c8e:	e7fe      	b.n	8007c8e <xQueueGenericReset+0x1c>
        ( pxQueue->uxLength >= 1U ) &&
 8007c90:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007c92:	b3a5      	cbz	r5, 8007cfe <xQueueGenericReset+0x8c>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007c94:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007c96:	fba3 3505 	umull	r3, r5, r3, r5
 8007c9a:	bb85      	cbnz	r5, 8007cfe <xQueueGenericReset+0x8c>
        taskENTER_CRITICAL();
 8007c9c:	f001 fcba 	bl	8009614 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ca0:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ca2:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ca4:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ca6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007caa:	434b      	muls	r3, r1
 8007cac:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cae:	1a5b      	subs	r3, r3, r1
 8007cb0:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
 8007cb2:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cb4:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8007cb6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cba:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
 8007cbc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 8007cc0:	b9a6      	cbnz	r6, 8007cec <xQueueGenericReset+0x7a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	b173      	cbz	r3, 8007ce4 <xQueueGenericReset+0x72>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc6:	f104 0010 	add.w	r0, r4, #16
 8007cca:	f000 ffef 	bl	8008cac <xTaskRemoveFromEventList>
 8007cce:	b148      	cbz	r0, 8007ce4 <xQueueGenericReset+0x72>
                        queueYIELD_IF_USING_PREEMPTION();
 8007cd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8007ce4:	f001 fcba 	bl	800965c <vPortExitCritical>
}
 8007ce8:	2001      	movs	r0, #1
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cec:	f104 0010 	add.w	r0, r4, #16
 8007cf0:	f7ff fef6 	bl	8007ae0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cf4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007cf8:	f7ff fef2 	bl	8007ae0 <vListInitialise>
 8007cfc:	e7f2      	b.n	8007ce4 <xQueueGenericReset+0x72>
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
    configASSERT( xReturn != pdFAIL );
 8007d12:	e7fe      	b.n	8007d12 <xQueueGenericReset+0xa0>

08007d14 <xQueueGenericCreate>:
    {
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	460d      	mov	r5, r1
 8007d18:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	b1d8      	cbz	r0, 8007d56 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007d1e:	fba1 2300 	umull	r2, r3, r1, r0
 8007d22:	b9c3      	cbnz	r3, 8007d56 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007d24:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007d26:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 8007d2a:	d814      	bhi.n	8007d56 <xQueueGenericCreate+0x42>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d2c:	3050      	adds	r0, #80	@ 0x50
 8007d2e:	f001 fb37 	bl	80093a0 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8007d32:	4604      	mov	r4, r0
 8007d34:	b158      	cbz	r0, 8007d4e <xQueueGenericCreate+0x3a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8007d36:	b165      	cbz	r5, 8007d52 <xQueueGenericCreate+0x3e>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d38:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	4620      	mov	r0, r4
 8007d40:	6023      	str	r3, [r4, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 8007d42:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d46:	f7ff ff94 	bl	8007c72 <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 8007d4a:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
    }
 8007d4e:	4620      	mov	r0, r4
 8007d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d52:	4603      	mov	r3, r0
 8007d54:	e7f2      	b.n	8007d3c <xQueueGenericCreate+0x28>
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	b672      	cpsid	i
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	b662      	cpsie	i
            configASSERT( pxNewQueue );
 8007d6a:	e7fe      	b.n	8007d6a <xQueueGenericCreate+0x56>

08007d6c <xQueueGenericSend>:
{
 8007d6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d70:	460f      	mov	r7, r1
 8007d72:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 8007d74:	4604      	mov	r4, r0
{
 8007d76:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8007d78:	b950      	cbnz	r0, 8007d90 <xQueueGenericSend+0x24>
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	b672      	cpsid	i
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	b662      	cpsie	i
 8007d8e:	e7fe      	b.n	8007d8e <xQueueGenericSend+0x22>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d90:	b961      	cbnz	r1, 8007dac <xQueueGenericSend+0x40>
 8007d92:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007d94:	b153      	cbz	r3, 8007dac <xQueueGenericSend+0x40>
 8007d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9a:	b672      	cpsid	i
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	b662      	cpsie	i
 8007daa:	e7fe      	b.n	8007daa <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dac:	2e02      	cmp	r6, #2
 8007dae:	d10d      	bne.n	8007dcc <xQueueGenericSend+0x60>
 8007db0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d00a      	beq.n	8007dcc <xQueueGenericSend+0x60>
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	b672      	cpsid	i
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	b662      	cpsie	i
 8007dca:	e7fe      	b.n	8007dca <xQueueGenericSend+0x5e>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dcc:	f001 f82e 	bl	8008e2c <xTaskGetSchedulerState>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	b320      	cbz	r0, 8007e1e <xQueueGenericSend+0xb2>
 8007dd4:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8007dd6:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8007dda:	f001 fc1b 	bl	8009614 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dde:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007de0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d229      	bcs.n	8007e3a <xQueueGenericSend+0xce>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de6:	4632      	mov	r2, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7ff fec3 	bl	8007b76 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007df2:	b11b      	cbz	r3, 8007dfc <xQueueGenericSend+0x90>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007df4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007df8:	f000 ff58 	bl	8008cac <xTaskRemoveFromEventList>
                    else if( xYieldRequired != pdFALSE )
 8007dfc:	b148      	cbz	r0, 8007e12 <xQueueGenericSend+0xa6>
                        queueYIELD_IF_USING_PREEMPTION();
 8007dfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8007e12:	f001 fc23 	bl	800965c <vPortExitCritical>
                return pdPASS;
 8007e16:	2001      	movs	r0, #1
}
 8007e18:	b004      	add	sp, #16
 8007e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0d8      	beq.n	8007dd6 <xQueueGenericSend+0x6a>
 8007e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e28:	b672      	cpsid	i
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	b662      	cpsie	i
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericSend+0xcc>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e3a:	2e02      	cmp	r6, #2
 8007e3c:	d0d3      	beq.n	8007de6 <xQueueGenericSend+0x7a>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	b91b      	cbnz	r3, 8007e4a <xQueueGenericSend+0xde>
                    taskEXIT_CRITICAL();
 8007e42:	f001 fc0b 	bl	800965c <vPortExitCritical>
                    return errQUEUE_FULL;
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7e6      	b.n	8007e18 <xQueueGenericSend+0xac>
                else if( xEntryTimeSet == pdFALSE )
 8007e4a:	b915      	cbnz	r5, 8007e52 <xQueueGenericSend+0xe6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007e4c:	a802      	add	r0, sp, #8
 8007e4e:	f000 ff95 	bl	8008d7c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8007e52:	f001 fc03 	bl	800965c <vPortExitCritical>
        vTaskSuspendAll();
 8007e56:	f000 fcfb 	bl	8008850 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007e5a:	f001 fbdb 	bl	8009614 <vPortEnterCritical>
 8007e5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007e62:	2bff      	cmp	r3, #255	@ 0xff
 8007e64:	d101      	bne.n	8007e6a <xQueueGenericSend+0xfe>
 8007e66:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8007e6a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007e6e:	2bff      	cmp	r3, #255	@ 0xff
 8007e70:	d101      	bne.n	8007e76 <xQueueGenericSend+0x10a>
 8007e72:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8007e76:	f001 fbf1 	bl	800965c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e7a:	a901      	add	r1, sp, #4
 8007e7c:	a802      	add	r0, sp, #8
 8007e7e:	f000 ff89 	bl	8008d94 <xTaskCheckForTimeOut>
 8007e82:	bb38      	cbnz	r0, 8007ed4 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007e84:	f001 fbc6 	bl	8009614 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e88:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007e8a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d10e      	bne.n	8007eae <xQueueGenericSend+0x142>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8007e90:	f001 fbe4 	bl	800965c <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e94:	9901      	ldr	r1, [sp, #4]
 8007e96:	f104 0010 	add.w	r0, r4, #16
 8007e9a:	f000 febd 	bl	8008c18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7ff feb1 	bl	8007c06 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8007ea4:	f000 fd9e 	bl	80089e4 <xTaskResumeAll>
 8007ea8:	b148      	cbz	r0, 8007ebe <xQueueGenericSend+0x152>
 8007eaa:	2501      	movs	r5, #1
 8007eac:	e795      	b.n	8007dda <xQueueGenericSend+0x6e>
    taskEXIT_CRITICAL();
 8007eae:	f001 fbd5 	bl	800965c <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7ff fea7 	bl	8007c06 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007eb8:	f000 fd94 	bl	80089e4 <xTaskResumeAll>
 8007ebc:	e7f5      	b.n	8007eaa <xQueueGenericSend+0x13e>
                    portYIELD_WITHIN_API();
 8007ebe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	e7ea      	b.n	8007eaa <xQueueGenericSend+0x13e>
            prvUnlockQueue( pxQueue );
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7ff fe96 	bl	8007c06 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007eda:	f000 fd83 	bl	80089e4 <xTaskResumeAll>
            return errQUEUE_FULL;
 8007ede:	e7b2      	b.n	8007e46 <xQueueGenericSend+0xda>

08007ee0 <xQueueCreateMutex>:
    {
 8007ee0:	4602      	mov	r2, r0
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	2001      	movs	r0, #1
    {
 8007ee6:	b510      	push	{r4, lr}
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ee8:	f7ff ff14 	bl	8007d14 <xQueueGenericCreate>
        if( pxNewQueue != NULL )
 8007eec:	4604      	mov	r4, r0
 8007eee:	b138      	cbz	r0, 8007f00 <xQueueCreateMutex+0x20>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ef0:	2300      	movs	r3, #0
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4619      	mov	r1, r3
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ef6:	6083      	str	r3, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ef8:	6003      	str	r3, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007efa:	60c3      	str	r3, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007efc:	f7ff ff36 	bl	8007d6c <xQueueGenericSend>
    }
 8007f00:	4620      	mov	r0, r4
 8007f02:	bd10      	pop	{r4, pc}

08007f04 <xQueueGiveMutexRecursive>:
    {
 8007f04:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxMutex );
 8007f06:	4604      	mov	r4, r0
 8007f08:	b950      	cbnz	r0, 8007f20 <xQueueGiveMutexRecursive+0x1c>
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	b672      	cpsid	i
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	b662      	cpsie	i
 8007f1e:	e7fe      	b.n	8007f1e <xQueueGiveMutexRecursive+0x1a>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007f20:	6885      	ldr	r5, [r0, #8]
 8007f22:	f000 ff7d 	bl	8008e20 <xTaskGetCurrentTaskHandle>
 8007f26:	4285      	cmp	r5, r0
 8007f28:	d10b      	bne.n	8007f42 <xQueueGiveMutexRecursive+0x3e>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	60e3      	str	r3, [r4, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007f30:	b10b      	cbz	r3, 8007f36 <xQueueGiveMutexRecursive+0x32>
            xReturn = pdPASS;
 8007f32:	2001      	movs	r0, #1
    }
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007f36:	461a      	mov	r2, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f7ff ff16 	bl	8007d6c <xQueueGenericSend>
 8007f40:	e7f7      	b.n	8007f32 <xQueueGiveMutexRecursive+0x2e>
            xReturn = pdFAIL;
 8007f42:	2000      	movs	r0, #0
        return xReturn;
 8007f44:	e7f6      	b.n	8007f34 <xQueueGiveMutexRecursive+0x30>

08007f46 <xQueueGiveFromISR>:
{
 8007f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f48:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	b950      	cbnz	r0, 8007f64 <xQueueGiveFromISR+0x1e>
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	e7fe      	b.n	8007f62 <xQueueGiveFromISR+0x1c>
    configASSERT( pxQueue->uxItemSize == 0 );
 8007f64:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f66:	b153      	cbz	r3, 8007f7e <xQueueGiveFromISR+0x38>
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	b672      	cpsid	i
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	b662      	cpsie	i
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGiveFromISR+0x36>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f7e:	6803      	ldr	r3, [r0, #0]
 8007f80:	b963      	cbnz	r3, 8007f9c <xQueueGiveFromISR+0x56>
 8007f82:	6883      	ldr	r3, [r0, #8]
 8007f84:	b153      	cbz	r3, 8007f9c <xQueueGiveFromISR+0x56>
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	b672      	cpsid	i
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	b662      	cpsie	i
 8007f9a:	e7fe      	b.n	8007f9a <xQueueGiveFromISR+0x54>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f9c:	f001 fc36 	bl	800980c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8007fa0:	f3ef 8711 	mrs	r7, BASEPRI
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	b672      	cpsid	i
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	b662      	cpsie	i
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 8007fba:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d92a      	bls.n	8008016 <xQueueGiveFromISR+0xd0>
            const int8_t cTxLock = pxQueue->cTxLock;
 8007fc0:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fc4:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
 8007fc6:	2aff      	cmp	r2, #255	@ 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
 8007fc8:	b255      	sxtb	r5, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fca:	63a3      	str	r3, [r4, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
 8007fcc:	d10d      	bne.n	8007fea <xQueueGiveFromISR+0xa4>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fd0:	b13b      	cbz	r3, 8007fe2 <xQueueGiveFromISR+0x9c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007fd6:	f000 fe69 	bl	8008cac <xTaskRemoveFromEventList>
 8007fda:	b110      	cbz	r0, 8007fe2 <xQueueGiveFromISR+0x9c>
                            if( pxHigherPriorityTaskWoken != NULL )
 8007fdc:	b10e      	cbz	r6, 8007fe2 <xQueueGiveFromISR+0x9c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	6033      	str	r3, [r6, #0]
            xReturn = pdPASS;
 8007fe2:	2001      	movs	r0, #1
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007fe4:	f387 8811 	msr	BASEPRI, r7
}
 8007fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8007fea:	f000 fc3f 	bl	800886c <uxTaskGetNumberOfTasks>
 8007fee:	4285      	cmp	r5, r0
 8007ff0:	d2f7      	bcs.n	8007fe2 <xQueueGiveFromISR+0x9c>
 8007ff2:	2d7f      	cmp	r5, #127	@ 0x7f
 8007ff4:	d10a      	bne.n	800800c <xQueueGiveFromISR+0xc6>
        __asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	b672      	cpsid	i
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	b662      	cpsie	i
 800800a:	e7fe      	b.n	800800a <xQueueGiveFromISR+0xc4>
 800800c:	3501      	adds	r5, #1
 800800e:	b26d      	sxtb	r5, r5
 8008010:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008014:	e7e5      	b.n	8007fe2 <xQueueGiveFromISR+0x9c>
            xReturn = errQUEUE_FULL;
 8008016:	2000      	movs	r0, #0
 8008018:	e7e4      	b.n	8007fe4 <xQueueGiveFromISR+0x9e>

0800801a <xQueueReceive>:
{
 800801a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800801e:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
 8008020:	4604      	mov	r4, r0
{
 8008022:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8008024:	b950      	cbnz	r0, 800803c <xQueueReceive+0x22>
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	b672      	cpsid	i
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	b662      	cpsie	i
 800803a:	e7fe      	b.n	800803a <xQueueReceive+0x20>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800803c:	b961      	cbnz	r1, 8008058 <xQueueReceive+0x3e>
 800803e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008040:	b153      	cbz	r3, 8008058 <xQueueReceive+0x3e>
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	b672      	cpsid	i
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	b662      	cpsie	i
 8008056:	e7fe      	b.n	8008056 <xQueueReceive+0x3c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008058:	f000 fee8 	bl	8008e2c <xTaskGetSchedulerState>
 800805c:	4605      	mov	r5, r0
 800805e:	b318      	cbz	r0, 80080a8 <xQueueReceive+0x8e>
 8008060:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8008062:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8008066:	f001 fad5 	bl	8009614 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800806a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800806c:	b357      	cbz	r7, 80080c4 <xQueueReceive+0xaa>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800806e:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008070:	4631      	mov	r1, r6
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fdb2 	bl	8007bdc <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008078:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	b173      	cbz	r3, 800809c <xQueueReceive+0x82>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800807e:	f104 0010 	add.w	r0, r4, #16
 8008082:	f000 fe13 	bl	8008cac <xTaskRemoveFromEventList>
 8008086:	b148      	cbz	r0, 800809c <xQueueReceive+0x82>
                        queueYIELD_IF_USING_PREEMPTION();
 8008088:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800808c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008090:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800809c:	f001 fade 	bl	800965c <vPortExitCritical>
                return pdPASS;
 80080a0:	2001      	movs	r0, #1
}
 80080a2:	b004      	add	sp, #16
 80080a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080a8:	9b01      	ldr	r3, [sp, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0d9      	beq.n	8008062 <xQueueReceive+0x48>
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	b672      	cpsid	i
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	b662      	cpsie	i
 80080c2:	e7fe      	b.n	80080c2 <xQueueReceive+0xa8>
                if( xTicksToWait == ( TickType_t ) 0 )
 80080c4:	9b01      	ldr	r3, [sp, #4]
 80080c6:	b91b      	cbnz	r3, 80080d0 <xQueueReceive+0xb6>
                    taskEXIT_CRITICAL();
 80080c8:	f001 fac8 	bl	800965c <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80080cc:	2000      	movs	r0, #0
 80080ce:	e7e8      	b.n	80080a2 <xQueueReceive+0x88>
                else if( xEntryTimeSet == pdFALSE )
 80080d0:	b915      	cbnz	r5, 80080d8 <xQueueReceive+0xbe>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80080d2:	a802      	add	r0, sp, #8
 80080d4:	f000 fe52 	bl	8008d7c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 80080d8:	f001 fac0 	bl	800965c <vPortExitCritical>
        vTaskSuspendAll();
 80080dc:	f000 fbb8 	bl	8008850 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80080e0:	f001 fa98 	bl	8009614 <vPortEnterCritical>
 80080e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80080e8:	2bff      	cmp	r3, #255	@ 0xff
 80080ea:	d101      	bne.n	80080f0 <xQueueReceive+0xd6>
 80080ec:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80080f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80080f4:	2bff      	cmp	r3, #255	@ 0xff
 80080f6:	d101      	bne.n	80080fc <xQueueReceive+0xe2>
 80080f8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 80080fc:	f001 faae 	bl	800965c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008100:	a901      	add	r1, sp, #4
 8008102:	a802      	add	r0, sp, #8
 8008104:	f000 fe46 	bl	8008d94 <xTaskCheckForTimeOut>
 8008108:	bb00      	cbnz	r0, 800814c <xQueueReceive+0x132>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800810a:	4620      	mov	r0, r4
 800810c:	f7ff fd28 	bl	8007b60 <prvIsQueueEmpty>
 8008110:	b1b0      	cbz	r0, 8008140 <xQueueReceive+0x126>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008112:	9901      	ldr	r1, [sp, #4]
 8008114:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008118:	f000 fd7e 	bl	8008c18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800811c:	4620      	mov	r0, r4
 800811e:	f7ff fd72 	bl	8007c06 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8008122:	f000 fc5f 	bl	80089e4 <xTaskResumeAll>
 8008126:	b948      	cbnz	r0, 800813c <xQueueReceive+0x122>
                    portYIELD_WITHIN_API();
 8008128:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800812c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008130:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	2501      	movs	r5, #1
 800813e:	e792      	b.n	8008066 <xQueueReceive+0x4c>
                prvUnlockQueue( pxQueue );
 8008140:	4620      	mov	r0, r4
 8008142:	f7ff fd60 	bl	8007c06 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008146:	f000 fc4d 	bl	80089e4 <xTaskResumeAll>
 800814a:	e7f7      	b.n	800813c <xQueueReceive+0x122>
            prvUnlockQueue( pxQueue );
 800814c:	4620      	mov	r0, r4
 800814e:	f7ff fd5a 	bl	8007c06 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008152:	f000 fc47 	bl	80089e4 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff fd02 	bl	8007b60 <prvIsQueueEmpty>
 800815c:	2800      	cmp	r0, #0
 800815e:	d0ed      	beq.n	800813c <xQueueReceive+0x122>
 8008160:	e7b4      	b.n	80080cc <xQueueReceive+0xb2>

08008162 <xQueueSemaphoreTake>:
{
 8008162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008164:	b085      	sub	sp, #20
    configASSERT( ( pxQueue ) );
 8008166:	4604      	mov	r4, r0
{
 8008168:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 800816a:	b950      	cbnz	r0, 8008182 <xQueueSemaphoreTake+0x20>
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	b672      	cpsid	i
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	b662      	cpsie	i
 8008180:	e7fe      	b.n	8008180 <xQueueSemaphoreTake+0x1e>
    configASSERT( pxQueue->uxItemSize == 0 );
 8008182:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8008184:	b155      	cbz	r5, 800819c <xQueueSemaphoreTake+0x3a>
 8008186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818a:	b672      	cpsid	i
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	b662      	cpsie	i
 800819a:	e7fe      	b.n	800819a <xQueueSemaphoreTake+0x38>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800819c:	f000 fe46 	bl	8008e2c <xTaskGetSchedulerState>
 80081a0:	4606      	mov	r6, r0
 80081a2:	b320      	cbz	r0, 80081ee <xQueueSemaphoreTake+0x8c>
 80081a4:	462e      	mov	r6, r5
        prvLockQueue( pxQueue );
 80081a6:	2700      	movs	r7, #0
        taskENTER_CRITICAL();
 80081a8:	f001 fa34 	bl	8009614 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80081ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081ae:	b363      	cbz	r3, 800820a <xQueueSemaphoreTake+0xa8>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80081b0:	3b01      	subs	r3, #1
 80081b2:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	b913      	cbnz	r3, 80081be <xQueueSemaphoreTake+0x5c>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081b8:	f000 ff34 	bl	8009024 <pvTaskIncrementMutexHeldCount>
 80081bc:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	b173      	cbz	r3, 80081e0 <xQueueSemaphoreTake+0x7e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081c2:	f104 0010 	add.w	r0, r4, #16
 80081c6:	f000 fd71 	bl	8008cac <xTaskRemoveFromEventList>
 80081ca:	b148      	cbz	r0, 80081e0 <xQueueSemaphoreTake+0x7e>
                        queueYIELD_IF_USING_PREEMPTION();
 80081cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80081d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80081e0:	f001 fa3c 	bl	800965c <vPortExitCritical>
                return pdPASS;
 80081e4:	2001      	movs	r0, #1
}
 80081e6:	b005      	add	sp, #20
 80081e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ea:	4635      	mov	r5, r6
 80081ec:	e7db      	b.n	80081a6 <xQueueSemaphoreTake+0x44>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0fa      	beq.n	80081ea <xQueueSemaphoreTake+0x88>
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	e7fe      	b.n	8008208 <xQueueSemaphoreTake+0xa6>
                if( xTicksToWait == ( TickType_t ) 0 )
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	b91b      	cbnz	r3, 8008216 <xQueueSemaphoreTake+0xb4>
                        taskEXIT_CRITICAL();
 800820e:	f001 fa25 	bl	800965c <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8008212:	2000      	movs	r0, #0
 8008214:	e7e7      	b.n	80081e6 <xQueueSemaphoreTake+0x84>
                else if( xEntryTimeSet == pdFALSE )
 8008216:	b916      	cbnz	r6, 800821e <xQueueSemaphoreTake+0xbc>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008218:	a802      	add	r0, sp, #8
 800821a:	f000 fdaf 	bl	8008d7c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800821e:	f001 fa1d 	bl	800965c <vPortExitCritical>
        vTaskSuspendAll();
 8008222:	f000 fb15 	bl	8008850 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008226:	f001 f9f5 	bl	8009614 <vPortEnterCritical>
 800822a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800822e:	2bff      	cmp	r3, #255	@ 0xff
 8008230:	d101      	bne.n	8008236 <xQueueSemaphoreTake+0xd4>
 8008232:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8008236:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800823a:	2bff      	cmp	r3, #255	@ 0xff
 800823c:	d101      	bne.n	8008242 <xQueueSemaphoreTake+0xe0>
 800823e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008242:	f001 fa0b 	bl	800965c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008246:	a901      	add	r1, sp, #4
 8008248:	a802      	add	r0, sp, #8
 800824a:	f000 fda3 	bl	8008d94 <xTaskCheckForTimeOut>
 800824e:	bb50      	cbnz	r0, 80082a6 <xQueueSemaphoreTake+0x144>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff fc85 	bl	8007b60 <prvIsQueueEmpty>
 8008256:	b300      	cbz	r0, 800829a <xQueueSemaphoreTake+0x138>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	b93b      	cbnz	r3, 800826c <xQueueSemaphoreTake+0x10a>
                        taskENTER_CRITICAL();
 800825c:	f001 f9da 	bl	8009614 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008260:	68a0      	ldr	r0, [r4, #8]
 8008262:	f000 fdf3 	bl	8008e4c <xTaskPriorityInherit>
 8008266:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
 8008268:	f001 f9f8 	bl	800965c <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800826c:	9901      	ldr	r1, [sp, #4]
 800826e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008272:	f000 fcd1 	bl	8008c18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008276:	4620      	mov	r0, r4
 8008278:	f7ff fcc5 	bl	8007c06 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800827c:	f000 fbb2 	bl	80089e4 <xTaskResumeAll>
 8008280:	b948      	cbnz	r0, 8008296 <xQueueSemaphoreTake+0x134>
                    portYIELD_WITHIN_API();
 8008282:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800828a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	2601      	movs	r6, #1
 8008298:	e786      	b.n	80081a8 <xQueueSemaphoreTake+0x46>
                prvUnlockQueue( pxQueue );
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff fcb3 	bl	8007c06 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80082a0:	f000 fba0 	bl	80089e4 <xTaskResumeAll>
 80082a4:	e7f7      	b.n	8008296 <xQueueSemaphoreTake+0x134>
            prvUnlockQueue( pxQueue );
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7ff fcad 	bl	8007c06 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80082ac:	f000 fb9a 	bl	80089e4 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff fc55 	bl	8007b60 <prvIsQueueEmpty>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0ed      	beq.n	8008296 <xQueueSemaphoreTake+0x134>
                    if( xInheritanceOccurred != pdFALSE )
 80082ba:	2d00      	cmp	r5, #0
 80082bc:	d0a9      	beq.n	8008212 <xQueueSemaphoreTake+0xb0>
                        taskENTER_CRITICAL();
 80082be:	f001 f9a9 	bl	8009614 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80082c4:	b119      	cbz	r1, 80082ce <xQueueSemaphoreTake+0x16c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80082c8:	6819      	ldr	r1, [r3, #0]
 80082ca:	f1c1 0107 	rsb	r1, r1, #7
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082ce:	68a0      	ldr	r0, [r4, #8]
 80082d0:	f000 fe50 	bl	8008f74 <vTaskPriorityDisinheritAfterTimeout>
 80082d4:	e79b      	b.n	800820e <xQueueSemaphoreTake+0xac>

080082d6 <xQueueTakeMutexRecursive>:
    {
 80082d6:	b570      	push	{r4, r5, r6, lr}
 80082d8:	460d      	mov	r5, r1
        configASSERT( pxMutex );
 80082da:	4604      	mov	r4, r0
 80082dc:	b950      	cbnz	r0, 80082f4 <xQueueTakeMutexRecursive+0x1e>
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	b672      	cpsid	i
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	b662      	cpsie	i
 80082f2:	e7fe      	b.n	80082f2 <xQueueTakeMutexRecursive+0x1c>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80082f4:	6886      	ldr	r6, [r0, #8]
 80082f6:	f000 fd93 	bl	8008e20 <xTaskGetCurrentTaskHandle>
 80082fa:	4286      	cmp	r6, r0
 80082fc:	d104      	bne.n	8008308 <xQueueTakeMutexRecursive+0x32>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80082fe:	68e3      	ldr	r3, [r4, #12]
            xReturn = pdPASS;
 8008300:	2001      	movs	r0, #1
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008302:	3301      	adds	r3, #1
 8008304:	60e3      	str	r3, [r4, #12]
    }
 8008306:	bd70      	pop	{r4, r5, r6, pc}
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008308:	4629      	mov	r1, r5
 800830a:	4620      	mov	r0, r4
 800830c:	f7ff ff29 	bl	8008162 <xQueueSemaphoreTake>
            if( xReturn != pdFAIL )
 8008310:	2800      	cmp	r0, #0
 8008312:	d0f8      	beq.n	8008306 <xQueueTakeMutexRecursive+0x30>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008314:	68e3      	ldr	r3, [r4, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60e3      	str	r3, [r4, #12]
 800831a:	e7f4      	b.n	8008306 <xQueueTakeMutexRecursive+0x30>

0800831c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800831c:	b570      	push	{r4, r5, r6, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
 800831e:	b950      	cbnz	r0, 8008336 <vQueueAddToRegistry+0x1a>
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	b672      	cpsid	i
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	b662      	cpsie	i
 8008334:	e7fe      	b.n	8008334 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8008336:	b1b1      	cbz	r1, 8008366 <vQueueAddToRegistry+0x4a>
 8008338:	4a0b      	ldr	r2, [pc, #44]	@ (8008368 <vQueueAddToRegistry+0x4c>)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	4615      	mov	r5, r2
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800833e:	461c      	mov	r4, r3
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008340:	6856      	ldr	r6, [r2, #4]
 8008342:	4286      	cmp	r6, r0
 8008344:	d104      	bne.n	8008350 <vQueueAddToRegistry+0x34>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008346:	eb05 03c4 	add.w	r3, r5, r4, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
 800834a:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800834e:	e00a      	b.n	8008366 <vQueueAddToRegistry+0x4a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008350:	b91b      	cbnz	r3, 800835a <vQueueAddToRegistry+0x3e>
 8008352:	6816      	ldr	r6, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008354:	2e00      	cmp	r6, #0
 8008356:	bf08      	it	eq
 8008358:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800835a:	3401      	adds	r4, #1
 800835c:	3208      	adds	r2, #8
 800835e:	2c08      	cmp	r4, #8
 8008360:	d1ee      	bne.n	8008340 <vQueueAddToRegistry+0x24>
        if( pxEntryToWrite != NULL )
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f1      	bne.n	800834a <vQueueAddToRegistry+0x2e>
    }
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	20004b78 	.word	0x20004b78

0800836c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800836c:	b510      	push	{r4, lr}
        UBaseType_t ux;

        configASSERT( xQueue );
 800836e:	b950      	cbnz	r0, 8008386 <vQueueUnregisterQueue+0x1a>
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	b672      	cpsid	i
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	b662      	cpsie	i
 8008384:	e7fe      	b.n	8008384 <vQueueUnregisterQueue+0x18>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008386:	2300      	movs	r3, #0
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008388:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <vQueueUnregisterQueue+0x40>)
 800838a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800838e:	00dc      	lsls	r4, r3, #3
 8008390:	4281      	cmp	r1, r0
 8008392:	d106      	bne.n	80083a2 <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8008394:	4a06      	ldr	r2, [pc, #24]	@ (80083b0 <vQueueUnregisterQueue+0x44>)
 8008396:	2100      	movs	r1, #0
 8008398:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800839c:	4422      	add	r2, r4
 800839e:	6051      	str	r1, [r2, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083a0:	bd10      	pop	{r4, pc}
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a2:	3301      	adds	r3, #1
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d1f0      	bne.n	800838a <vQueueUnregisterQueue+0x1e>
 80083a8:	e7fa      	b.n	80083a0 <vQueueUnregisterQueue+0x34>
 80083aa:	bf00      	nop
 80083ac:	20004b7c 	.word	0x20004b7c
 80083b0:	20004b78 	.word	0x20004b78

080083b4 <vQueueDelete>:
{
 80083b4:	b508      	push	{r3, lr}
    configASSERT( pxQueue );
 80083b6:	b950      	cbnz	r0, 80083ce <vQueueDelete+0x1a>
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	b672      	cpsid	i
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	b662      	cpsie	i
 80083cc:	e7fe      	b.n	80083cc <vQueueDelete+0x18>
        vQueueUnregisterQueue( pxQueue );
 80083ce:	f7ff ffcd 	bl	800836c <vQueueUnregisterQueue>
}
 80083d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        vPortFree( pxQueue );
 80083d6:	f001 b879 	b.w	80094cc <vPortFree>

080083da <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80083da:	b570      	push	{r4, r5, r6, lr}
 80083dc:	4604      	mov	r4, r0
 80083de:	460d      	mov	r5, r1
 80083e0:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80083e2:	f001 f917 	bl	8009614 <vPortEnterCritical>
 80083e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80083ea:	2bff      	cmp	r3, #255	@ 0xff
 80083ec:	d102      	bne.n	80083f4 <vQueueWaitForMessageRestricted+0x1a>
 80083ee:	2300      	movs	r3, #0
 80083f0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80083f4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80083f8:	2bff      	cmp	r3, #255	@ 0xff
 80083fa:	d102      	bne.n	8008402 <vQueueWaitForMessageRestricted+0x28>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008402:	f001 f92b 	bl	800965c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008406:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008408:	b92b      	cbnz	r3, 8008416 <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800840a:	4632      	mov	r2, r6
 800840c:	4629      	mov	r1, r5
 800840e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008412:	f000 fc1d 	bl	8008c50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008416:	4620      	mov	r0, r4
    }
 8008418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 800841c:	f7ff bbf3 	b.w	8007c06 <prvUnlockQueue>

08008420 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8008422:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008424:	4606      	mov	r6, r0
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008426:	4c1b      	ldr	r4, [pc, #108]	@ (8008494 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8008428:	460f      	mov	r7, r1
    const TickType_t xConstTickCount = xTickCount;
 800842a:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	3004      	adds	r0, #4
 8008430:	f7ff fb86 	bl	8007b40 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008434:	1c73      	adds	r3, r6, #1
 8008436:	d113      	bne.n	8008460 <prvAddCurrentTaskToDelayedList+0x40>
 8008438:	b197      	cbz	r7, 8008460 <prvAddCurrentTaskToDelayedList+0x40>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800843a:	4b17      	ldr	r3, [pc, #92]	@ (8008498 <prvAddCurrentTaskToDelayedList+0x78>)
 800843c:	6821      	ldr	r1, [r4, #0]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	608a      	str	r2, [r1, #8]
 8008442:	6890      	ldr	r0, [r2, #8]
 8008444:	6821      	ldr	r1, [r4, #0]
 8008446:	60c8      	str	r0, [r1, #12]
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	3104      	adds	r1, #4
 800844c:	6041      	str	r1, [r0, #4]
 800844e:	6821      	ldr	r1, [r4, #0]
 8008450:	3104      	adds	r1, #4
 8008452:	6091      	str	r1, [r2, #8]
 8008454:	6822      	ldr	r2, [r4, #0]
 8008456:	6153      	str	r3, [r2, #20]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	3201      	adds	r2, #1
 800845c:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008460:	19ad      	adds	r5, r5, r6
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008466:	d307      	bcc.n	8008478 <prvAddCurrentTaskToDelayedList+0x58>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008468:	4b0c      	ldr	r3, [pc, #48]	@ (800849c <prvAddCurrentTaskToDelayedList+0x7c>)
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	6821      	ldr	r1, [r4, #0]
}
 800846e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008472:	3104      	adds	r1, #4
 8008474:	f7ff bb4d 	b.w	8007b12 <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008478:	4b09      	ldr	r3, [pc, #36]	@ (80084a0 <prvAddCurrentTaskToDelayedList+0x80>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	6821      	ldr	r1, [r4, #0]
 800847e:	3104      	adds	r1, #4
 8008480:	f7ff fb47 	bl	8007b12 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008484:	4b07      	ldr	r3, [pc, #28]	@ (80084a4 <prvAddCurrentTaskToDelayedList+0x84>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	42aa      	cmp	r2, r5
 800848a:	d9e8      	bls.n	800845e <prvAddCurrentTaskToDelayedList+0x3e>
                    xNextTaskUnblockTime = xTimeToWake;
 800848c:	601d      	str	r5, [r3, #0]
}
 800848e:	e7e6      	b.n	800845e <prvAddCurrentTaskToDelayedList+0x3e>
 8008490:	20004bdc 	.word	0x20004bdc
 8008494:	20004ce0 	.word	0x20004ce0
 8008498:	20004be4 	.word	0x20004be4
 800849c:	20004c24 	.word	0x20004c24
 80084a0:	20004c28 	.word	0x20004c28
 80084a4:	20004bc0 	.word	0x20004bc0

080084a8 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a8:	4a06      	ldr	r2, [pc, #24]	@ (80084c4 <prvResetNextTaskUnblockTime+0x1c>)
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <prvResetNextTaskUnblockTime+0x20>)
 80084b0:	b919      	cbnz	r1, 80084ba <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084b6:	601a      	str	r2, [r3, #0]
}
 80084b8:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084ba:	6812      	ldr	r2, [r2, #0]
 80084bc:	68d2      	ldr	r2, [r2, #12]
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	e7f9      	b.n	80084b6 <prvResetNextTaskUnblockTime+0xe>
 80084c2:	bf00      	nop
 80084c4:	20004c28 	.word	0x20004c28
 80084c8:	20004bc0 	.word	0x20004bc0

080084cc <prvIdleTask>:
{
 80084cc:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ce:	4c15      	ldr	r4, [pc, #84]	@ (8008524 <prvIdleTask+0x58>)
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d0:	4f15      	ldr	r7, [pc, #84]	@ (8008528 <prvIdleTask+0x5c>)
                --uxCurrentNumberOfTasks;
 80084d2:	4e16      	ldr	r6, [pc, #88]	@ (800852c <prvIdleTask+0x60>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	b973      	cbnz	r3, 80084f6 <prvIdleTask+0x2a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084d8:	4b15      	ldr	r3, [pc, #84]	@ (8008530 <prvIdleTask+0x64>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d9f8      	bls.n	80084d2 <prvIdleTask+0x6>
                taskYIELD();
 80084e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	e7ed      	b.n	80084d2 <prvIdleTask+0x6>
            taskENTER_CRITICAL();
 80084f6:	f001 f88d 	bl	8009614 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68dd      	ldr	r5, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084fe:	1d28      	adds	r0, r5, #4
 8008500:	f7ff fb1e 	bl	8007b40 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008504:	6833      	ldr	r3, [r6, #0]
 8008506:	3b01      	subs	r3, #1
 8008508:	6033      	str	r3, [r6, #0]
                --uxDeletedTasksWaitingCleanUp;
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	3b01      	subs	r3, #1
 800850e:	6023      	str	r3, [r4, #0]
            taskEXIT_CRITICAL();
 8008510:	f001 f8a4 	bl	800965c <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
 8008514:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8008516:	f000 ffd9 	bl	80094cc <vPortFree>
            vPortFree( pxTCB );
 800851a:	4628      	mov	r0, r5
 800851c:	f000 ffd6 	bl	80094cc <vPortFree>
    }
 8008520:	e7d8      	b.n	80084d4 <prvIdleTask+0x8>
 8008522:	bf00      	nop
 8008524:	20004bf8 	.word	0x20004bf8
 8008528:	20004bfc 	.word	0x20004bfc
 800852c:	20004be0 	.word	0x20004be0
 8008530:	20004c54 	.word	0x20004c54

08008534 <xTaskCreate>:
    {
 8008534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008538:	0095      	lsls	r5, r2, #2
    {
 800853a:	4680      	mov	r8, r0
 800853c:	460e      	mov	r6, r1
 800853e:	4699      	mov	r9, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008540:	4628      	mov	r0, r5
    {
 8008542:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	@ 0x28
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008546:	f000 ff2b 	bl	80093a0 <pvPortMalloc>
            if( pxStack != NULL )
 800854a:	4683      	mov	fp, r0
 800854c:	b918      	cbnz	r0, 8008556 <xTaskCreate+0x22>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8008552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008556:	205c      	movs	r0, #92	@ 0x5c
 8008558:	f000 ff22 	bl	80093a0 <pvPortMalloc>
                if( pxNewTCB != NULL )
 800855c:	4604      	mov	r4, r0
 800855e:	2800      	cmp	r0, #0
 8008560:	f000 80b3 	beq.w	80086ca <xTaskCreate+0x196>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008564:	225c      	movs	r2, #92	@ 0x5c
 8008566:	2100      	movs	r1, #0
 8008568:	f00c fa9c 	bl	8014aa4 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800856c:	4658      	mov	r0, fp
                    pxNewTCB->pxStack = pxStack;
 800856e:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008572:	462a      	mov	r2, r5
 8008574:	21a5      	movs	r1, #165	@ 0xa5
 8008576:	f00c fa95 	bl	8014aa4 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800857a:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
    if( pcName != NULL )
 800857e:	b16e      	cbz	r6, 800859c <xTaskCreate+0x68>
 8008580:	1e73      	subs	r3, r6, #1
 8008582:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008586:	360f      	adds	r6, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008588:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800858c:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8008590:	b109      	cbz	r1, 8008596 <xTaskCreate+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008592:	42b3      	cmp	r3, r6
 8008594:	d1f8      	bne.n	8008588 <xTaskCreate+0x54>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008596:	2300      	movs	r3, #0
 8008598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800859c:	2f06      	cmp	r7, #6
 800859e:	d90a      	bls.n	80085b6 <xTaskCreate+0x82>
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	b672      	cpsid	i
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	b662      	cpsie	i
 80085b4:	e7fe      	b.n	80085b4 <xTaskCreate+0x80>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085b6:	1d26      	adds	r6, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 80085b8:	62e7      	str	r7, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 80085ba:	64e7      	str	r7, [r4, #76]	@ 0x4c
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085bc:	3d04      	subs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085be:	4630      	mov	r0, r6
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c0:	f1c7 0707 	rsb	r7, r7, #7
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085c4:	f7ff fa97 	bl	8007af6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085c8:	f104 0018 	add.w	r0, r4, #24
 80085cc:	f7ff fa93 	bl	8007af6 <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085d0:	eb0b 0005 	add.w	r0, fp, r5
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085d4:	464a      	mov	r2, r9
 80085d6:	4641      	mov	r1, r8
 80085d8:	f020 0007 	bic.w	r0, r0, #7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085dc:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085de:	61a7      	str	r7, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085e0:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085e2:	f000 fff3 	bl	80095cc <pxPortInitialiseStack>
 80085e6:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80085e8:	f1ba 0f00 	cmp.w	sl, #0
 80085ec:	d001      	beq.n	80085f2 <xTaskCreate+0xbe>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ee:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
 80085f2:	f001 f80f 	bl	8009614 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80085f6:	4b37      	ldr	r3, [pc, #220]	@ (80086d4 <xTaskCreate+0x1a0>)
        if( pxCurrentTCB == NULL )
 80085f8:	4f37      	ldr	r7, [pc, #220]	@ (80086d8 <xTaskCreate+0x1a4>)
        uxCurrentNumberOfTasks++;
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8008700 <xTaskCreate+0x1cc>
 8008600:	3201      	adds	r2, #1
 8008602:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 8008604:	683d      	ldr	r5, [r7, #0]
 8008606:	2d00      	cmp	r5, #0
 8008608:	d154      	bne.n	80086b4 <xTaskCreate+0x180>
            pxCurrentTCB = pxNewTCB;
 800860a:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d11f      	bne.n	8008652 <xTaskCreate+0x11e>
 8008612:	46c1      	mov	r9, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008614:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008616:	4648      	mov	r0, r9
 8008618:	f7ff fa62 	bl	8007ae0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800861c:	f109 0914 	add.w	r9, r9, #20
 8008620:	2d07      	cmp	r5, #7
 8008622:	d1f7      	bne.n	8008614 <xTaskCreate+0xe0>
    vListInitialise( &xDelayedTaskList1 );
 8008624:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8008704 <xTaskCreate+0x1d0>
    vListInitialise( &xDelayedTaskList2 );
 8008628:	4d2c      	ldr	r5, [pc, #176]	@ (80086dc <xTaskCreate+0x1a8>)
    vListInitialise( &xDelayedTaskList1 );
 800862a:	4648      	mov	r0, r9
 800862c:	f7ff fa58 	bl	8007ae0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008630:	4628      	mov	r0, r5
 8008632:	f7ff fa55 	bl	8007ae0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008636:	482a      	ldr	r0, [pc, #168]	@ (80086e0 <xTaskCreate+0x1ac>)
 8008638:	f7ff fa52 	bl	8007ae0 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 800863c:	4829      	ldr	r0, [pc, #164]	@ (80086e4 <xTaskCreate+0x1b0>)
 800863e:	f7ff fa4f 	bl	8007ae0 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8008642:	4829      	ldr	r0, [pc, #164]	@ (80086e8 <xTaskCreate+0x1b4>)
 8008644:	f7ff fa4c 	bl	8007ae0 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8008648:	4b28      	ldr	r3, [pc, #160]	@ (80086ec <xTaskCreate+0x1b8>)
 800864a:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800864e:	4b28      	ldr	r3, [pc, #160]	@ (80086f0 <xTaskCreate+0x1bc>)
 8008650:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
 8008652:	4a28      	ldr	r2, [pc, #160]	@ (80086f4 <xTaskCreate+0x1c0>)
 8008654:	6813      	ldr	r3, [r2, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 800865a:	4a27      	ldr	r2, [pc, #156]	@ (80086f8 <xTaskCreate+0x1c4>)
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800865c:	6463      	str	r3, [r4, #68]	@ 0x44
        prvAddTaskToReadyList( pxNewTCB );
 800865e:	6811      	ldr	r1, [r2, #0]
 8008660:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008662:	428b      	cmp	r3, r1
 8008664:	d900      	bls.n	8008668 <xTaskCreate+0x134>
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	2214      	movs	r2, #20
 800866a:	4353      	muls	r3, r2
 800866c:	eb08 0103 	add.w	r1, r8, r3
 8008670:	684a      	ldr	r2, [r1, #4]
 8008672:	6890      	ldr	r0, [r2, #8]
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	60e0      	str	r0, [r4, #12]
 8008678:	6046      	str	r6, [r0, #4]
 800867a:	6096      	str	r6, [r2, #8]
 800867c:	f858 2003 	ldr.w	r2, [r8, r3]
 8008680:	6161      	str	r1, [r4, #20]
 8008682:	3201      	adds	r2, #1
 8008684:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
 8008688:	f000 ffe8 	bl	800965c <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 800868c:	4b1b      	ldr	r3, [pc, #108]	@ (80086fc <xTaskCreate+0x1c8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b173      	cbz	r3, 80086b0 <xTaskCreate+0x17c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008696:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d209      	bcs.n	80086b0 <xTaskCreate+0x17c>
            taskYIELD_IF_USING_PREEMPTION();
 800869c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
 80086b0:	2001      	movs	r0, #1
        return xReturn;
 80086b2:	e74e      	b.n	8008552 <xTaskCreate+0x1e>
            if( xSchedulerRunning == pdFALSE )
 80086b4:	4b11      	ldr	r3, [pc, #68]	@ (80086fc <xTaskCreate+0x1c8>)
 80086b6:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	d1c9      	bne.n	8008652 <xTaskCreate+0x11e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d8c5      	bhi.n	8008652 <xTaskCreate+0x11e>
                    pxCurrentTCB = pxNewTCB;
 80086c6:	603c      	str	r4, [r7, #0]
 80086c8:	e7c3      	b.n	8008652 <xTaskCreate+0x11e>
                    vPortFreeStack( pxStack );
 80086ca:	4658      	mov	r0, fp
 80086cc:	f000 fefe 	bl	80094cc <vPortFree>
        if( pxNewTCB != NULL )
 80086d0:	e73d      	b.n	800854e <xTaskCreate+0x1a>
 80086d2:	bf00      	nop
 80086d4:	20004be0 	.word	0x20004be0
 80086d8:	20004ce0 	.word	0x20004ce0
 80086dc:	20004c2c 	.word	0x20004c2c
 80086e0:	20004c10 	.word	0x20004c10
 80086e4:	20004bfc 	.word	0x20004bfc
 80086e8:	20004be4 	.word	0x20004be4
 80086ec:	20004c28 	.word	0x20004c28
 80086f0:	20004c24 	.word	0x20004c24
 80086f4:	20004bc4 	.word	0x20004bc4
 80086f8:	20004bd8 	.word	0x20004bd8
 80086fc:	20004bd4 	.word	0x20004bd4
 8008700:	20004c54 	.word	0x20004c54
 8008704:	20004c40 	.word	0x20004c40

08008708 <vTaskDelete>:
    {
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	4604      	mov	r4, r0
 800870c:	4d27      	ldr	r5, [pc, #156]	@ (80087ac <vTaskDelete+0xa4>)
        taskENTER_CRITICAL();
 800870e:	f000 ff81 	bl	8009614 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008712:	b904      	cbnz	r4, 8008716 <vTaskDelete+0xe>
 8008714:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008716:	1d26      	adds	r6, r4, #4
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff fa11 	bl	8007b40 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800871e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008720:	b11b      	cbz	r3, 800872a <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008722:	f104 0018 	add.w	r0, r4, #24
 8008726:	f7ff fa0b 	bl	8007b40 <uxListRemove>
            uxTaskNumber++;
 800872a:	4a21      	ldr	r2, [pc, #132]	@ (80087b0 <vTaskDelete+0xa8>)
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	3301      	adds	r3, #1
 8008730:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 8008732:	682b      	ldr	r3, [r5, #0]
 8008734:	42a3      	cmp	r3, r4
 8008736:	d126      	bne.n	8008786 <vTaskDelete+0x7e>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008738:	4631      	mov	r1, r6
 800873a:	481e      	ldr	r0, [pc, #120]	@ (80087b4 <vTaskDelete+0xac>)
 800873c:	f7ff f9de 	bl	8007afc <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8008740:	4a1d      	ldr	r2, [pc, #116]	@ (80087b8 <vTaskDelete+0xb0>)
 8008742:	6813      	ldr	r3, [r2, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8008748:	f000 ff88 	bl	800965c <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	42a3      	cmp	r3, r4
 8008750:	d005      	beq.n	800875e <vTaskDelete+0x56>
            vPortFreeStack( pxTCB->pxStack );
 8008752:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008754:	f000 feba 	bl	80094cc <vPortFree>
            vPortFree( pxTCB );
 8008758:	4620      	mov	r0, r4
 800875a:	f000 feb7 	bl	80094cc <vPortFree>
        if( xSchedulerRunning != pdFALSE )
 800875e:	4b17      	ldr	r3, [pc, #92]	@ (80087bc <vTaskDelete+0xb4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	b30b      	cbz	r3, 80087a8 <vTaskDelete+0xa0>
            if( pxTCB == pxCurrentTCB )
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	42a3      	cmp	r3, r4
 8008768:	d11e      	bne.n	80087a8 <vTaskDelete+0xa0>
                configASSERT( uxSchedulerSuspended == 0 );
 800876a:	4b15      	ldr	r3, [pc, #84]	@ (80087c0 <vTaskDelete+0xb8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	b18b      	cbz	r3, 8008794 <vTaskDelete+0x8c>
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	b672      	cpsid	i
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	b662      	cpsie	i
 8008784:	e7fe      	b.n	8008784 <vTaskDelete+0x7c>
                --uxCurrentNumberOfTasks;
 8008786:	4a0f      	ldr	r2, [pc, #60]	@ (80087c4 <vTaskDelete+0xbc>)
 8008788:	6813      	ldr	r3, [r2, #0]
 800878a:	3b01      	subs	r3, #1
 800878c:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 800878e:	f7ff fe8b 	bl	80084a8 <prvResetNextTaskUnblockTime>
 8008792:	e7d9      	b.n	8008748 <vTaskDelete+0x40>
                portYIELD_WITHIN_API();
 8008794:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800879c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	f3bf 8f6f 	isb	sy
    }
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	bf00      	nop
 80087ac:	20004ce0 	.word	0x20004ce0
 80087b0:	20004bc4 	.word	0x20004bc4
 80087b4:	20004bfc 	.word	0x20004bfc
 80087b8:	20004bf8 	.word	0x20004bf8
 80087bc:	20004bd4 	.word	0x20004bd4
 80087c0:	20004bb8 	.word	0x20004bb8
 80087c4:	20004be0 	.word	0x20004be0

080087c8 <vTaskStartScheduler>:
{
 80087c8:	b513      	push	{r0, r1, r4, lr}
        xReturn = xTaskCreate( prvIdleTask,
 80087ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008834 <vTaskStartScheduler+0x6c>)
 80087cc:	2400      	movs	r4, #0
 80087ce:	2280      	movs	r2, #128	@ 0x80
 80087d0:	4919      	ldr	r1, [pc, #100]	@ (8008838 <vTaskStartScheduler+0x70>)
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	4623      	mov	r3, r4
 80087d6:	4819      	ldr	r0, [pc, #100]	@ (800883c <vTaskStartScheduler+0x74>)
 80087d8:	9400      	str	r4, [sp, #0]
 80087da:	f7ff feab 	bl	8008534 <xTaskCreate>
        if( xReturn == pdPASS )
 80087de:	2801      	cmp	r0, #1
 80087e0:	d11b      	bne.n	800881a <vTaskStartScheduler+0x52>
            xReturn = xTimerCreateTimerTask();
 80087e2:	f000 fd8d 	bl	8009300 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 80087e6:	2801      	cmp	r0, #1
 80087e8:	d117      	bne.n	800881a <vTaskStartScheduler+0x52>
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	b672      	cpsid	i
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	b662      	cpsie	i
        xNextTaskUnblockTime = portMAX_DELAY;
 80087fe:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <vTaskStartScheduler+0x78>)
 8008800:	f04f 32ff 	mov.w	r2, #4294967295
 8008804:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <vTaskStartScheduler+0x7c>)
 8008808:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800880a:	4b0f      	ldr	r3, [pc, #60]	@ (8008848 <vTaskStartScheduler+0x80>)
 800880c:	601c      	str	r4, [r3, #0]
        xPortStartScheduler();
 800880e:	f000 ff9b 	bl	8009748 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8008812:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <vTaskStartScheduler+0x84>)
 8008814:	681b      	ldr	r3, [r3, #0]
}
 8008816:	b002      	add	sp, #8
 8008818:	bd10      	pop	{r4, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800881a:	3001      	adds	r0, #1
 800881c:	d1f9      	bne.n	8008812 <vTaskStartScheduler+0x4a>
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	b672      	cpsid	i
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	b662      	cpsie	i
 8008832:	e7fe      	b.n	8008832 <vTaskStartScheduler+0x6a>
 8008834:	20004bbc 	.word	0x20004bbc
 8008838:	08015d6a 	.word	0x08015d6a
 800883c:	080084cd 	.word	0x080084cd
 8008840:	20004bc0 	.word	0x20004bc0
 8008844:	20004bd4 	.word	0x20004bd4
 8008848:	20004bdc 	.word	0x20004bdc
 800884c:	0808e3e8 	.word	0x0808e3e8

08008850 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8008850:	4a02      	ldr	r2, [pc, #8]	@ (800885c <vTaskSuspendAll+0xc>)
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	3301      	adds	r3, #1
 8008856:	6013      	str	r3, [r2, #0]
}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	20004bb8 	.word	0x20004bb8

08008860 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8008860:	4b01      	ldr	r3, [pc, #4]	@ (8008868 <xTaskGetTickCount+0x8>)
 8008862:	6818      	ldr	r0, [r3, #0]
}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	20004bdc 	.word	0x20004bdc

0800886c <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 800886c:	4b01      	ldr	r3, [pc, #4]	@ (8008874 <uxTaskGetNumberOfTasks+0x8>)
 800886e:	6818      	ldr	r0, [r3, #0]
}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20004be0 	.word	0x20004be0

08008878 <xTaskIncrementTick>:
{
 8008878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800887c:	4b4e      	ldr	r3, [pc, #312]	@ (80089b8 <xTaskIncrementTick+0x140>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f040 8093 	bne.w	80089ac <xTaskIncrementTick+0x134>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008886:	4b4d      	ldr	r3, [pc, #308]	@ (80089bc <xTaskIncrementTick+0x144>)
 8008888:	681c      	ldr	r4, [r3, #0]
 800888a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 800888c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800888e:	b9cc      	cbnz	r4, 80088c4 <xTaskIncrementTick+0x4c>
            taskSWITCH_DELAYED_LISTS();
 8008890:	4b4b      	ldr	r3, [pc, #300]	@ (80089c0 <xTaskIncrementTick+0x148>)
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	b152      	cbz	r2, 80088ae <xTaskIncrementTick+0x36>
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	b672      	cpsid	i
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	b662      	cpsie	i
 80088ac:	e7fe      	b.n	80088ac <xTaskIncrementTick+0x34>
 80088ae:	4a45      	ldr	r2, [pc, #276]	@ (80089c4 <xTaskIncrementTick+0x14c>)
 80088b0:	6819      	ldr	r1, [r3, #0]
 80088b2:	6810      	ldr	r0, [r2, #0]
 80088b4:	6018      	str	r0, [r3, #0]
 80088b6:	6011      	str	r1, [r2, #0]
 80088b8:	4a43      	ldr	r2, [pc, #268]	@ (80089c8 <xTaskIncrementTick+0x150>)
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	f7ff fdf2 	bl	80084a8 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 80088c4:	f8df c110 	ldr.w	ip, [pc, #272]	@ 80089d8 <xTaskIncrementTick+0x160>
    BaseType_t xSwitchRequired = pdFALSE;
 80088c8:	2000      	movs	r0, #0
 80088ca:	4a40      	ldr	r2, [pc, #256]	@ (80089cc <xTaskIncrementTick+0x154>)
        if( xConstTickCount >= xNextTaskUnblockTime )
 80088cc:	f8dc 3000 	ldr.w	r3, [ip]
 80088d0:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 80089dc <xTaskIncrementTick+0x164>
 80088d4:	429c      	cmp	r4, r3
 80088d6:	d20f      	bcs.n	80088f8 <xTaskIncrementTick+0x80>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088d8:	f8d8 3000 	ldr.w	r3, [r8]
 80088dc:	2114      	movs	r1, #20
 80088de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e0:	434b      	muls	r3, r1
 80088e2:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
 80088e4:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
 80088e6:	4b3a      	ldr	r3, [pc, #232]	@ (80089d0 <xTaskIncrementTick+0x158>)
 80088e8:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
 80088ea:	bf28      	it	cs
 80088ec:	2001      	movcs	r0, #1
                xSwitchRequired = pdTRUE;
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf18      	it	ne
 80088f2:	2001      	movne	r0, #1
}
 80088f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f8:	f8df e0c4 	ldr.w	lr, [pc, #196]	@ 80089c0 <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
 80088fc:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 80089e0 <xTaskIncrementTick+0x168>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008900:	f8de 3000 	ldr.w	r3, [lr]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	b923      	cbnz	r3, 8008912 <xTaskIncrementTick+0x9a>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008908:	f04f 33ff 	mov.w	r3, #4294967295
 800890c:	f8cc 3000 	str.w	r3, [ip]
                    break;
 8008910:	e7e2      	b.n	80088d8 <xTaskIncrementTick+0x60>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008912:	f8de 3000 	ldr.w	r3, [lr]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800891a:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 800891c:	428c      	cmp	r4, r1
 800891e:	d202      	bcs.n	8008926 <xTaskIncrementTick+0xae>
                        xNextTaskUnblockTime = xItemValue;
 8008920:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008924:	e7d8      	b.n	80088d8 <xTaskIncrementTick+0x60>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008926:	695d      	ldr	r5, [r3, #20]
 8008928:	1d1f      	adds	r7, r3, #4
 800892a:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
 800892e:	608e      	str	r6, [r1, #8]
 8008930:	6071      	str	r1, [r6, #4]
 8008932:	6869      	ldr	r1, [r5, #4]
 8008934:	42b9      	cmp	r1, r7
 8008936:	f04f 0100 	mov.w	r1, #0
 800893a:	bf08      	it	eq
 800893c:	606e      	streq	r6, [r5, #4]
 800893e:	6159      	str	r1, [r3, #20]
 8008940:	6829      	ldr	r1, [r5, #0]
 8008942:	3901      	subs	r1, #1
 8008944:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008946:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008948:	b17d      	cbz	r5, 800896a <xTaskIncrementTick+0xf2>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800894a:	f103 0a18 	add.w	sl, r3, #24
 800894e:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
 8008952:	608e      	str	r6, [r1, #8]
 8008954:	6071      	str	r1, [r6, #4]
 8008956:	6869      	ldr	r1, [r5, #4]
 8008958:	4551      	cmp	r1, sl
 800895a:	f04f 0100 	mov.w	r1, #0
 800895e:	bf08      	it	eq
 8008960:	606e      	streq	r6, [r5, #4]
 8008962:	6299      	str	r1, [r3, #40]	@ 0x28
 8008964:	6829      	ldr	r1, [r5, #0]
 8008966:	3901      	subs	r1, #1
 8008968:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 800896a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800896c:	f8d9 5000 	ldr.w	r5, [r9]
 8008970:	42a9      	cmp	r1, r5
 8008972:	d901      	bls.n	8008978 <xTaskIncrementTick+0x100>
 8008974:	f8c9 1000 	str.w	r1, [r9]
 8008978:	2514      	movs	r5, #20
 800897a:	434d      	muls	r5, r1
 800897c:	eb02 0a05 	add.w	sl, r2, r5
 8008980:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008984:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008988:	609e      	str	r6, [r3, #8]
 800898a:	f8c3 b00c 	str.w	fp, [r3, #12]
 800898e:	f8cb 7004 	str.w	r7, [fp, #4]
 8008992:	60b7      	str	r7, [r6, #8]
 8008994:	f8c3 a014 	str.w	sl, [r3, #20]
 8008998:	5953      	ldr	r3, [r2, r5]
 800899a:	3301      	adds	r3, #1
 800899c:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800899e:	f8d8 3000 	ldr.w	r3, [r8]
 80089a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
 80089a4:	4299      	cmp	r1, r3
 80089a6:	bf88      	it	hi
 80089a8:	2001      	movhi	r0, #1
 80089aa:	e7a9      	b.n	8008900 <xTaskIncrementTick+0x88>
        ++xPendedTicks;
 80089ac:	4a09      	ldr	r2, [pc, #36]	@ (80089d4 <xTaskIncrementTick+0x15c>)
    BaseType_t xSwitchRequired = pdFALSE;
 80089ae:	2000      	movs	r0, #0
        ++xPendedTicks;
 80089b0:	6813      	ldr	r3, [r2, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	e79d      	b.n	80088f4 <xTaskIncrementTick+0x7c>
 80089b8:	20004bb8 	.word	0x20004bb8
 80089bc:	20004bdc 	.word	0x20004bdc
 80089c0:	20004c28 	.word	0x20004c28
 80089c4:	20004c24 	.word	0x20004c24
 80089c8:	20004bc8 	.word	0x20004bc8
 80089cc:	20004c54 	.word	0x20004c54
 80089d0:	20004bcc 	.word	0x20004bcc
 80089d4:	20004bd0 	.word	0x20004bd0
 80089d8:	20004bc0 	.word	0x20004bc0
 80089dc:	20004ce0 	.word	0x20004ce0
 80089e0:	20004bd8 	.word	0x20004bd8

080089e4 <xTaskResumeAll>:
{
 80089e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended );
 80089e8:	4c46      	ldr	r4, [pc, #280]	@ (8008b04 <xTaskResumeAll+0x120>)
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	b953      	cbnz	r3, 8008a04 <xTaskResumeAll+0x20>
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	e7fe      	b.n	8008a02 <xTaskResumeAll+0x1e>
    taskENTER_CRITICAL();
 8008a04:	f000 fe06 	bl	8009614 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	b12b      	cbz	r3, 8008a1e <xTaskResumeAll+0x3a>
    BaseType_t xAlreadyYielded = pdFALSE;
 8008a12:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8008a14:	f000 fe22 	bl	800965c <vPortExitCritical>
}
 8008a18:	4620      	mov	r0, r4
 8008a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a1e:	4a3a      	ldr	r2, [pc, #232]	@ (8008b08 <xTaskResumeAll+0x124>)
 8008a20:	6812      	ldr	r2, [r2, #0]
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d0f5      	beq.n	8008a12 <xTaskResumeAll+0x2e>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a26:	4e39      	ldr	r6, [pc, #228]	@ (8008b0c <xTaskResumeAll+0x128>)
                    prvAddTaskToReadyList( pxTCB );
 8008a28:	f04f 0c14 	mov.w	ip, #20
 8008a2c:	4f38      	ldr	r7, [pc, #224]	@ (8008b10 <xTaskResumeAll+0x12c>)
                        xYieldPending = pdTRUE;
 8008a2e:	f04f 0901 	mov.w	r9, #1
                    prvAddTaskToReadyList( pxTCB );
 8008a32:	4938      	ldr	r1, [pc, #224]	@ (8008b14 <xTaskResumeAll+0x130>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a34:	f8df e0e8 	ldr.w	lr, [pc, #232]	@ 8008b20 <xTaskResumeAll+0x13c>
                        xYieldPending = pdTRUE;
 8008a38:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8008b1c <xTaskResumeAll+0x138>
 8008a3c:	e03f      	b.n	8008abe <xTaskResumeAll+0xda>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3e:	68f3      	ldr	r3, [r6, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008a42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008a44:	f103 0518 	add.w	r5, r3, #24
 8008a48:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
 8008a4c:	6094      	str	r4, [r2, #8]
 8008a4e:	6062      	str	r2, [r4, #4]
 8008a50:	6842      	ldr	r2, [r0, #4]
 8008a52:	42aa      	cmp	r2, r5
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	bf08      	it	eq
 8008a5a:	6044      	streq	r4, [r0, #4]
 8008a5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a5e:	6802      	ldr	r2, [r0, #0]
 8008a60:	3a01      	subs	r2, #1
 8008a62:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008a64:	6958      	ldr	r0, [r3, #20]
 8008a66:	1d1d      	adds	r5, r3, #4
 8008a68:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
 8008a6c:	6094      	str	r4, [r2, #8]
 8008a6e:	6062      	str	r2, [r4, #4]
 8008a70:	6842      	ldr	r2, [r0, #4]
 8008a72:	42aa      	cmp	r2, r5
 8008a74:	6802      	ldr	r2, [r0, #0]
 8008a76:	f102 32ff 	add.w	r2, r2, #4294967295
 8008a7a:	bf08      	it	eq
 8008a7c:	6044      	streq	r4, [r0, #4]
 8008a7e:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008a80:	6838      	ldr	r0, [r7, #0]
 8008a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a84:	4282      	cmp	r2, r0
 8008a86:	d900      	bls.n	8008a8a <xTaskResumeAll+0xa6>
 8008a88:	603a      	str	r2, [r7, #0]
 8008a8a:	fb0c f002 	mul.w	r0, ip, r2
 8008a8e:	eb01 0a00 	add.w	sl, r1, r0
 8008a92:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008a96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8008a9a:	609c      	str	r4, [r3, #8]
 8008a9c:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008aa0:	f8cb 5004 	str.w	r5, [fp, #4]
 8008aa4:	60a5      	str	r5, [r4, #8]
 8008aa6:	580c      	ldr	r4, [r1, r0]
 8008aa8:	f8c3 a014 	str.w	sl, [r3, #20]
 8008aac:	3401      	adds	r4, #1
 8008aae:	500c      	str	r4, [r1, r0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ab0:	f8de 0000 	ldr.w	r0, [lr]
 8008ab4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8008ab6:	4282      	cmp	r2, r0
 8008ab8:	d301      	bcc.n	8008abe <xTaskResumeAll+0xda>
                        xYieldPending = pdTRUE;
 8008aba:	f8c8 9000 	str.w	r9, [r8]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008abe:	6832      	ldr	r2, [r6, #0]
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	d1bc      	bne.n	8008a3e <xTaskResumeAll+0x5a>
                if( pxTCB != NULL )
 8008ac4:	b10b      	cbz	r3, 8008aca <xTaskResumeAll+0xe6>
                    prvResetNextTaskUnblockTime();
 8008ac6:	f7ff fcef 	bl	80084a8 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008aca:	4d13      	ldr	r5, [pc, #76]	@ (8008b18 <xTaskResumeAll+0x134>)
 8008acc:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8008ace:	b144      	cbz	r4, 8008ae2 <xTaskResumeAll+0xfe>
                                xYieldPending = pdTRUE;
 8008ad0:	4e12      	ldr	r6, [pc, #72]	@ (8008b1c <xTaskResumeAll+0x138>)
 8008ad2:	2701      	movs	r7, #1
                            if( xTaskIncrementTick() != pdFALSE )
 8008ad4:	f7ff fed0 	bl	8008878 <xTaskIncrementTick>
 8008ad8:	b100      	cbz	r0, 8008adc <xTaskResumeAll+0xf8>
                                xYieldPending = pdTRUE;
 8008ada:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008adc:	3c01      	subs	r4, #1
 8008ade:	d1f9      	bne.n	8008ad4 <xTaskResumeAll+0xf0>
                        xPendedTicks = 0;
 8008ae0:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b1c <xTaskResumeAll+0x138>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d093      	beq.n	8008a12 <xTaskResumeAll+0x2e>
                    taskYIELD_IF_USING_PREEMPTION();
 8008aea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008af2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
 8008afe:	2401      	movs	r4, #1
 8008b00:	e788      	b.n	8008a14 <xTaskResumeAll+0x30>
 8008b02:	bf00      	nop
 8008b04:	20004bb8 	.word	0x20004bb8
 8008b08:	20004be0 	.word	0x20004be0
 8008b0c:	20004c10 	.word	0x20004c10
 8008b10:	20004bd8 	.word	0x20004bd8
 8008b14:	20004c54 	.word	0x20004c54
 8008b18:	20004bd0 	.word	0x20004bd0
 8008b1c:	20004bcc 	.word	0x20004bcc
 8008b20:	20004ce0 	.word	0x20004ce0

08008b24 <vTaskDelay>:
    {
 8008b24:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008b26:	b950      	cbnz	r0, 8008b3e <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 8008b28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	f3bf 8f6f 	isb	sy
    }
 8008b3c:	bd08      	pop	{r3, pc}
            configASSERT( uxSchedulerSuspended == 0 );
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b6c <vTaskDelay+0x48>)
 8008b40:	6819      	ldr	r1, [r3, #0]
 8008b42:	b151      	cbz	r1, 8008b5a <vTaskDelay+0x36>
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	b672      	cpsid	i
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	b662      	cpsie	i
 8008b58:	e7fe      	b.n	8008b58 <vTaskDelay+0x34>
            vTaskSuspendAll();
 8008b5a:	f7ff fe79 	bl	8008850 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b5e:	f7ff fc5f 	bl	8008420 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8008b62:	f7ff ff3f 	bl	80089e4 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d0de      	beq.n	8008b28 <vTaskDelay+0x4>
 8008b6a:	e7e7      	b.n	8008b3c <vTaskDelay+0x18>
 8008b6c:	20004bb8 	.word	0x20004bb8

08008b70 <vTaskSwitchContext>:
{
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b72:	4b24      	ldr	r3, [pc, #144]	@ (8008c04 <vTaskSwitchContext+0x94>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b24      	ldr	r3, [pc, #144]	@ (8008c08 <vTaskSwitchContext+0x98>)
 8008b78:	b112      	cbz	r2, 8008b80 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
}
 8008b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
 8008b80:	4c22      	ldr	r4, [pc, #136]	@ (8008c0c <vTaskSwitchContext+0x9c>)
        xYieldPending = pdFALSE;
 8008b82:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008b8e:	d10b      	bne.n	8008ba8 <vTaskSwitchContext+0x38>
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008b96:	d107      	bne.n	8008ba8 <vTaskSwitchContext+0x38>
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008b9e:	d103      	bne.n	8008ba8 <vTaskSwitchContext+0x38>
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8008ba6:	d004      	beq.n	8008bb2 <vTaskSwitchContext+0x42>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	6821      	ldr	r1, [r4, #0]
 8008bac:	3134      	adds	r1, #52	@ 0x34
 8008bae:	f7f8 fd94 	bl	80016da <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb2:	4e17      	ldr	r6, [pc, #92]	@ (8008c10 <vTaskSwitchContext+0xa0>)
 8008bb4:	2714      	movs	r7, #20
 8008bb6:	4917      	ldr	r1, [pc, #92]	@ (8008c14 <vTaskSwitchContext+0xa4>)
 8008bb8:	6832      	ldr	r2, [r6, #0]
 8008bba:	fb07 f302 	mul.w	r3, r7, r2
 8008bbe:	58cd      	ldr	r5, [r1, r3]
 8008bc0:	18c8      	adds	r0, r1, r3
 8008bc2:	b185      	cbz	r5, 8008be6 <vTaskSwitchContext+0x76>
 8008bc4:	6845      	ldr	r5, [r0, #4]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	686d      	ldr	r5, [r5, #4]
 8008bca:	440b      	add	r3, r1
 8008bcc:	429d      	cmp	r5, r3
 8008bce:	6045      	str	r5, [r0, #4]
 8008bd0:	bf04      	itt	eq
 8008bd2:	686b      	ldreq	r3, [r5, #4]
 8008bd4:	6043      	streq	r3, [r0, #4]
 8008bd6:	2314      	movs	r3, #20
 8008bd8:	fb03 1102 	mla	r1, r3, r2, r1
 8008bdc:	684b      	ldr	r3, [r1, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	6032      	str	r2, [r6, #0]
}
 8008be4:	e7cb      	b.n	8008b7e <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be6:	b952      	cbnz	r2, 8008bfe <vTaskSwitchContext+0x8e>
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	b672      	cpsid	i
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	b662      	cpsie	i
 8008bfc:	e7fe      	b.n	8008bfc <vTaskSwitchContext+0x8c>
 8008bfe:	3a01      	subs	r2, #1
 8008c00:	e7db      	b.n	8008bba <vTaskSwitchContext+0x4a>
 8008c02:	bf00      	nop
 8008c04:	20004bb8 	.word	0x20004bb8
 8008c08:	20004bcc 	.word	0x20004bcc
 8008c0c:	20004ce0 	.word	0x20004ce0
 8008c10:	20004bd8 	.word	0x20004bd8
 8008c14:	20004c54 	.word	0x20004c54

08008c18 <vTaskPlaceOnEventList>:
{
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	460c      	mov	r4, r1
    configASSERT( pxEventList );
 8008c1c:	b950      	cbnz	r0, 8008c34 <vTaskPlaceOnEventList+0x1c>
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	b672      	cpsid	i
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	b662      	cpsie	i
 8008c32:	e7fe      	b.n	8008c32 <vTaskPlaceOnEventList+0x1a>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c34:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <vTaskPlaceOnEventList+0x34>)
 8008c36:	6819      	ldr	r1, [r3, #0]
 8008c38:	3118      	adds	r1, #24
 8008c3a:	f7fe ff6a 	bl	8007b12 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c3e:	4620      	mov	r0, r4
 8008c40:	2101      	movs	r1, #1
}
 8008c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c46:	f7ff bbeb 	b.w	8008420 <prvAddCurrentTaskToDelayedList>
 8008c4a:	bf00      	nop
 8008c4c:	20004ce0 	.word	0x20004ce0

08008c50 <vTaskPlaceOnEventListRestricted>:
    {
 8008c50:	b470      	push	{r4, r5, r6}
 8008c52:	460c      	mov	r4, r1
 8008c54:	4611      	mov	r1, r2
        configASSERT( pxEventList );
 8008c56:	b950      	cbnz	r0, 8008c6e <vTaskPlaceOnEventListRestricted+0x1e>
 8008c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5c:	b672      	cpsid	i
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	b662      	cpsie	i
 8008c6c:	e7fe      	b.n	8008c6c <vTaskPlaceOnEventListRestricted+0x1c>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca8 <vTaskPlaceOnEventListRestricted+0x58>)
            xTicksToWait = portMAX_DELAY;
 8008c70:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c72:	6842      	ldr	r2, [r0, #4]
 8008c74:	681d      	ldr	r5, [r3, #0]
 8008c76:	6896      	ldr	r6, [r2, #8]
 8008c78:	61ea      	str	r2, [r5, #28]
 8008c7a:	681d      	ldr	r5, [r3, #0]
 8008c7c:	622e      	str	r6, [r5, #32]
 8008c7e:	681d      	ldr	r5, [r3, #0]
 8008c80:	f105 0518 	add.w	r5, r5, #24
 8008c84:	6075      	str	r5, [r6, #4]
 8008c86:	681d      	ldr	r5, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f105 0518 	add.w	r5, r5, #24
 8008c8e:	6095      	str	r5, [r2, #8]
 8008c90:	6298      	str	r0, [r3, #40]	@ 0x28
 8008c92:	6803      	ldr	r3, [r0, #0]
 8008c94:	f103 0301 	add.w	r3, r3, #1
 8008c98:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c9a:	bf0c      	ite	eq
 8008c9c:	4620      	moveq	r0, r4
 8008c9e:	f04f 30ff 	movne.w	r0, #4294967295
    }
 8008ca2:	bc70      	pop	{r4, r5, r6}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ca4:	f7ff bbbc 	b.w	8008420 <prvAddCurrentTaskToDelayedList>
 8008ca8:	20004ce0 	.word	0x20004ce0

08008cac <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cac:	68c3      	ldr	r3, [r0, #12]
 8008cae:	68db      	ldr	r3, [r3, #12]
{
 8008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    configASSERT( pxUnblockedTCB );
 8008cb2:	b953      	cbnz	r3, 8008cca <xTaskRemoveFromEventList+0x1e>
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	b672      	cpsid	i
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	b662      	cpsie	i
 8008cc8:	e7fe      	b.n	8008cc8 <xTaskRemoveFromEventList+0x1c>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008cca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ccc:	f103 0418 	add.w	r4, r3, #24
 8008cd0:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8008cd4:	6081      	str	r1, [r0, #8]
 8008cd6:	6048      	str	r0, [r1, #4]
 8008cd8:	6850      	ldr	r0, [r2, #4]
 8008cda:	42a0      	cmp	r0, r4
 8008cdc:	bf08      	it	eq
 8008cde:	6051      	streq	r1, [r2, #4]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6299      	str	r1, [r3, #40]	@ 0x28
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	3901      	subs	r1, #1
 8008ce8:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cea:	4a1e      	ldr	r2, [pc, #120]	@ (8008d64 <xTaskRemoveFromEventList+0xb8>)
 8008cec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d128      	bne.n	8008d46 <xTaskRemoveFromEventList+0x9a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008cf4:	695a      	ldr	r2, [r3, #20]
 8008cf6:	1d1d      	adds	r5, r3, #4
 8008cf8:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
 8008cfc:	60a0      	str	r0, [r4, #8]
 8008cfe:	6044      	str	r4, [r0, #4]
 8008d00:	6854      	ldr	r4, [r2, #4]
 8008d02:	42ac      	cmp	r4, r5
 8008d04:	bf08      	it	eq
 8008d06:	6050      	streq	r0, [r2, #4]
 8008d08:	6810      	ldr	r0, [r2, #0]
 8008d0a:	3801      	subs	r0, #1
 8008d0c:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008d0e:	4a16      	ldr	r2, [pc, #88]	@ (8008d68 <xTaskRemoveFromEventList+0xbc>)
 8008d10:	6810      	ldr	r0, [r2, #0]
 8008d12:	4281      	cmp	r1, r0
 8008d14:	d900      	bls.n	8008d18 <xTaskRemoveFromEventList+0x6c>
 8008d16:	6011      	str	r1, [r2, #0]
 8008d18:	2214      	movs	r2, #20
 8008d1a:	4814      	ldr	r0, [pc, #80]	@ (8008d6c <xTaskRemoveFromEventList+0xc0>)
 8008d1c:	434a      	muls	r2, r1
 8008d1e:	1886      	adds	r6, r0, r2
 8008d20:	6874      	ldr	r4, [r6, #4]
 8008d22:	68a7      	ldr	r7, [r4, #8]
 8008d24:	609c      	str	r4, [r3, #8]
 8008d26:	60df      	str	r7, [r3, #12]
 8008d28:	607d      	str	r5, [r7, #4]
 8008d2a:	60a5      	str	r5, [r4, #8]
 8008d2c:	615e      	str	r6, [r3, #20]
 8008d2e:	5883      	ldr	r3, [r0, r2]
 8008d30:	3301      	adds	r3, #1
 8008d32:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d34:	4b0e      	ldr	r3, [pc, #56]	@ (8008d70 <xTaskRemoveFromEventList+0xc4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	d90f      	bls.n	8008d5e <xTaskRemoveFromEventList+0xb2>
        xYieldPending = pdTRUE;
 8008d3e:	2001      	movs	r0, #1
 8008d40:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <xTaskRemoveFromEventList+0xc8>)
 8008d42:	6018      	str	r0, [r3, #0]
}
 8008d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d46:	4a0c      	ldr	r2, [pc, #48]	@ (8008d78 <xTaskRemoveFromEventList+0xcc>)
 8008d48:	6850      	ldr	r0, [r2, #4]
 8008d4a:	6885      	ldr	r5, [r0, #8]
 8008d4c:	61d8      	str	r0, [r3, #28]
 8008d4e:	621d      	str	r5, [r3, #32]
 8008d50:	606c      	str	r4, [r5, #4]
 8008d52:	6084      	str	r4, [r0, #8]
 8008d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d56:	6813      	ldr	r3, [r2, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	e7ea      	b.n	8008d34 <xTaskRemoveFromEventList+0x88>
        xReturn = pdFALSE;
 8008d5e:	2000      	movs	r0, #0
    return xReturn;
 8008d60:	e7f0      	b.n	8008d44 <xTaskRemoveFromEventList+0x98>
 8008d62:	bf00      	nop
 8008d64:	20004bb8 	.word	0x20004bb8
 8008d68:	20004bd8 	.word	0x20004bd8
 8008d6c:	20004c54 	.word	0x20004c54
 8008d70:	20004ce0 	.word	0x20004ce0
 8008d74:	20004bcc 	.word	0x20004bcc
 8008d78:	20004c10 	.word	0x20004c10

08008d7c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d7c:	4b03      	ldr	r3, [pc, #12]	@ (8008d8c <vTaskInternalSetTimeOutState+0x10>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008d82:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <vTaskInternalSetTimeOutState+0x14>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6043      	str	r3, [r0, #4]
}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20004bc8 	.word	0x20004bc8
 8008d90:	20004bdc 	.word	0x20004bdc

08008d94 <xTaskCheckForTimeOut>:
{
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
 8008d98:	4604      	mov	r4, r0
 8008d9a:	b950      	cbnz	r0, 8008db2 <xTaskCheckForTimeOut+0x1e>
 8008d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da0:	b672      	cpsid	i
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	b662      	cpsie	i
 8008db0:	e7fe      	b.n	8008db0 <xTaskCheckForTimeOut+0x1c>
    configASSERT( pxTicksToWait );
 8008db2:	b951      	cbnz	r1, 8008dca <xTaskCheckForTimeOut+0x36>
 8008db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db8:	b672      	cpsid	i
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	b662      	cpsie	i
 8008dc8:	e7fe      	b.n	8008dc8 <xTaskCheckForTimeOut+0x34>
    taskENTER_CRITICAL();
 8008dca:	f000 fc23 	bl	8009614 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8008dce:	4b0f      	ldr	r3, [pc, #60]	@ (8008e0c <xTaskCheckForTimeOut+0x78>)
 8008dd0:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	d017      	beq.n	8008e08 <xTaskCheckForTimeOut+0x74>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dd8:	480d      	ldr	r0, [pc, #52]	@ (8008e10 <xTaskCheckForTimeOut+0x7c>)
 8008dda:	6826      	ldr	r6, [r4, #0]
 8008ddc:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dde:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008de0:	4286      	cmp	r6, r0
 8008de2:	d008      	beq.n	8008df6 <xTaskCheckForTimeOut+0x62>
 8008de4:	428a      	cmp	r2, r1
 8008de6:	d806      	bhi.n	8008df6 <xTaskCheckForTimeOut+0x62>
            *pxTicksToWait = ( TickType_t ) 0;
 8008de8:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 8008dea:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8008dec:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 8008dee:	f000 fc35 	bl	800965c <vPortExitCritical>
}
 8008df2:	4620      	mov	r0, r4
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df6:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	d9f5      	bls.n	8008de8 <xTaskCheckForTimeOut+0x54>
            *pxTicksToWait -= xElapsedTime;
 8008dfc:	1a5b      	subs	r3, r3, r1
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008dfe:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 8008e00:	4413      	add	r3, r2
 8008e02:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008e04:	f7ff ffba 	bl	8008d7c <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 8008e08:	2400      	movs	r4, #0
 8008e0a:	e7f0      	b.n	8008dee <xTaskCheckForTimeOut+0x5a>
 8008e0c:	20004bdc 	.word	0x20004bdc
 8008e10:	20004bc8 	.word	0x20004bc8

08008e14 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8008e14:	4b01      	ldr	r3, [pc, #4]	@ (8008e1c <vTaskMissedYield+0x8>)
 8008e16:	2201      	movs	r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
}
 8008e1a:	4770      	bx	lr
 8008e1c:	20004bcc 	.word	0x20004bcc

08008e20 <xTaskGetCurrentTaskHandle>:
        xReturn = pxCurrentTCB;
 8008e20:	4b01      	ldr	r3, [pc, #4]	@ (8008e28 <xTaskGetCurrentTaskHandle+0x8>)
 8008e22:	6818      	ldr	r0, [r3, #0]
    }
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20004ce0 	.word	0x20004ce0

08008e2c <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8008e2c:	4b05      	ldr	r3, [pc, #20]	@ (8008e44 <xTaskGetSchedulerState+0x18>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	b133      	cbz	r3, 8008e40 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e32:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <xTaskGetSchedulerState+0x1c>)
 8008e34:	6818      	ldr	r0, [r3, #0]
 8008e36:	fab0 f080 	clz	r0, r0
 8008e3a:	0940      	lsrs	r0, r0, #5
 8008e3c:	0040      	lsls	r0, r0, #1
 8008e3e:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008e40:	2001      	movs	r0, #1
    }
 8008e42:	4770      	bx	lr
 8008e44:	20004bd4 	.word	0x20004bd4
 8008e48:	20004bb8 	.word	0x20004bb8

08008e4c <xTaskPriorityInherit>:
    {
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8008e4e:	4604      	mov	r4, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d02e      	beq.n	8008eb2 <xTaskPriorityInherit+0x66>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e54:	4d1d      	ldr	r5, [pc, #116]	@ (8008ecc <xTaskPriorityInherit+0x80>)
 8008e56:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008e58:	682a      	ldr	r2, [r5, #0]
 8008e5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d22d      	bcs.n	8008ebc <xTaskPriorityInherit+0x70>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e60:	6982      	ldr	r2, [r0, #24]
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	db04      	blt.n	8008e70 <xTaskPriorityInherit+0x24>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e66:	682a      	ldr	r2, [r5, #0]
 8008e68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e6a:	f1c2 0207 	rsb	r2, r2, #7
 8008e6e:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e70:	2214      	movs	r2, #20
 8008e72:	4e17      	ldr	r6, [pc, #92]	@ (8008ed0 <xTaskPriorityInherit+0x84>)
 8008e74:	fb02 6303 	mla	r3, r2, r3, r6
 8008e78:	6962      	ldr	r2, [r4, #20]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d11a      	bne.n	8008eb4 <xTaskPriorityInherit+0x68>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e7e:	1d27      	adds	r7, r4, #4
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7fe fe5d 	bl	8007b40 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e86:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e88:	4a12      	ldr	r2, [pc, #72]	@ (8008ed4 <xTaskPriorityInherit+0x88>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e8c:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e90:	428b      	cmp	r3, r1
 8008e92:	d900      	bls.n	8008e96 <xTaskPriorityInherit+0x4a>
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	2214      	movs	r2, #20
 8008e98:	4353      	muls	r3, r2
 8008e9a:	18f1      	adds	r1, r6, r3
 8008e9c:	684a      	ldr	r2, [r1, #4]
 8008e9e:	6890      	ldr	r0, [r2, #8]
 8008ea0:	60a2      	str	r2, [r4, #8]
 8008ea2:	60e0      	str	r0, [r4, #12]
 8008ea4:	6047      	str	r7, [r0, #4]
 8008ea6:	6097      	str	r7, [r2, #8]
 8008ea8:	58f2      	ldr	r2, [r6, r3]
 8008eaa:	6161      	str	r1, [r4, #20]
 8008eac:	3201      	adds	r2, #1
 8008eae:	50f2      	str	r2, [r6, r3]
                xReturn = pdTRUE;
 8008eb0:	2001      	movs	r0, #1
    }
 8008eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eba:	e7f9      	b.n	8008eb0 <xTaskPriorityInherit+0x64>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	4298      	cmp	r0, r3
 8008ec4:	bf2c      	ite	cs
 8008ec6:	2000      	movcs	r0, #0
 8008ec8:	2001      	movcc	r0, #1
 8008eca:	e7f2      	b.n	8008eb2 <xTaskPriorityInherit+0x66>
 8008ecc:	20004ce0 	.word	0x20004ce0
 8008ed0:	20004c54 	.word	0x20004c54
 8008ed4:	20004bd8 	.word	0x20004bd8

08008ed8 <xTaskPriorityDisinherit>:
    {
 8008ed8:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 8008eda:	4604      	mov	r4, r0
 8008edc:	b908      	cbnz	r0, 8008ee2 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 8008ede:	2000      	movs	r0, #0
    }
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB == pxCurrentTCB );
 8008ee2:	4b21      	ldr	r3, [pc, #132]	@ (8008f68 <xTaskPriorityDisinherit+0x90>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4283      	cmp	r3, r0
 8008ee8:	d00a      	beq.n	8008f00 <xTaskPriorityDisinherit+0x28>
 8008eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eee:	b672      	cpsid	i
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	b662      	cpsie	i
 8008efe:	e7fe      	b.n	8008efe <xTaskPriorityDisinherit+0x26>
            configASSERT( pxTCB->uxMutexesHeld );
 8008f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f02:	b953      	cbnz	r3, 8008f1a <xTaskPriorityDisinherit+0x42>
 8008f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	e7fe      	b.n	8008f18 <xTaskPriorityDisinherit+0x40>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f1a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
            ( pxTCB->uxMutexesHeld )--;
 8008f1c:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f1e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8008f20:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f22:	4291      	cmp	r1, r2
 8008f24:	d0db      	beq.n	8008ede <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1d9      	bne.n	8008ede <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f2a:	1d05      	adds	r5, r0, #4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f7fe fe07 	bl	8007b40 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f34:	f1c3 0207 	rsb	r2, r3, #7
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3a:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8008f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008f6c <xTaskPriorityDisinherit+0x94>)
 8008f3e:	6811      	ldr	r1, [r2, #0]
 8008f40:	428b      	cmp	r3, r1
 8008f42:	d900      	bls.n	8008f46 <xTaskPriorityDisinherit+0x6e>
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	2114      	movs	r1, #20
 8008f48:	4a09      	ldr	r2, [pc, #36]	@ (8008f70 <xTaskPriorityDisinherit+0x98>)
 8008f4a:	434b      	muls	r3, r1
 8008f4c:	18d0      	adds	r0, r2, r3
 8008f4e:	6841      	ldr	r1, [r0, #4]
 8008f50:	688e      	ldr	r6, [r1, #8]
 8008f52:	60a1      	str	r1, [r4, #8]
 8008f54:	60e6      	str	r6, [r4, #12]
 8008f56:	6075      	str	r5, [r6, #4]
 8008f58:	608d      	str	r5, [r1, #8]
 8008f5a:	58d1      	ldr	r1, [r2, r3]
 8008f5c:	6160      	str	r0, [r4, #20]
                    xReturn = pdTRUE;
 8008f5e:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
 8008f60:	3101      	adds	r1, #1
 8008f62:	50d1      	str	r1, [r2, r3]
        return xReturn;
 8008f64:	e7bc      	b.n	8008ee0 <xTaskPriorityDisinherit+0x8>
 8008f66:	bf00      	nop
 8008f68:	20004ce0 	.word	0x20004ce0
 8008f6c:	20004bd8 	.word	0x20004bd8
 8008f70:	20004c54 	.word	0x20004c54

08008f74 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8008f74:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 8008f76:	4604      	mov	r4, r0
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d04b      	beq.n	8009014 <vTaskPriorityDisinheritAfterTimeout+0xa0>
            configASSERT( pxTCB->uxMutexesHeld );
 8008f7c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008f7e:	b952      	cbnz	r2, 8008f96 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	b672      	cpsid	i
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	b662      	cpsie	i
 8008f94:	e7fe      	b.n	8008f94 <vTaskPriorityDisinheritAfterTimeout+0x20>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f96:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008f98:	4299      	cmp	r1, r3
 8008f9a:	bf38      	it	cc
 8008f9c:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 8008f9e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008fa0:	428b      	cmp	r3, r1
 8008fa2:	d037      	beq.n	8009014 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fa4:	2a01      	cmp	r2, #1
 8008fa6:	d135      	bne.n	8009014 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                    configASSERT( pxTCB != pxCurrentTCB );
 8008fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8009018 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8008faa:	6812      	ldr	r2, [r2, #0]
 8008fac:	4282      	cmp	r2, r0
 8008fae:	d10a      	bne.n	8008fc6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb4:	b672      	cpsid	i
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	b662      	cpsie	i
 8008fc4:	e7fe      	b.n	8008fc4 <vTaskPriorityDisinheritAfterTimeout+0x50>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fc6:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fc8:	4d14      	ldr	r5, [pc, #80]	@ (800901c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fca:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fcc:	f04f 0214 	mov.w	r2, #20
                    pxTCB->uxPriority = uxPriorityToUse;
 8008fd0:	62c1      	str	r1, [r0, #44]	@ 0x2c
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fd2:	fb02 5303 	mla	r3, r2, r3, r5
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd6:	bfa8      	it	ge
 8008fd8:	f1c1 0107 	rsbge	r1, r1, #7
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fdc:	6942      	ldr	r2, [r0, #20]
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fde:	bfa8      	it	ge
 8008fe0:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d116      	bne.n	8009014 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe6:	1d06      	adds	r6, r0, #4
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7fe fda9 	bl	8007b40 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8008fee:	4a0c      	ldr	r2, [pc, #48]	@ (8009020 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8008ff0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008ff2:	6811      	ldr	r1, [r2, #0]
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	d900      	bls.n	8008ffa <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	2214      	movs	r2, #20
 8008ffc:	4353      	muls	r3, r2
 8008ffe:	18e9      	adds	r1, r5, r3
 8009000:	684a      	ldr	r2, [r1, #4]
 8009002:	6890      	ldr	r0, [r2, #8]
 8009004:	60a2      	str	r2, [r4, #8]
 8009006:	60e0      	str	r0, [r4, #12]
 8009008:	6046      	str	r6, [r0, #4]
 800900a:	6096      	str	r6, [r2, #8]
 800900c:	58ea      	ldr	r2, [r5, r3]
 800900e:	6161      	str	r1, [r4, #20]
 8009010:	3201      	adds	r2, #1
 8009012:	50ea      	str	r2, [r5, r3]
    }
 8009014:	bd70      	pop	{r4, r5, r6, pc}
 8009016:	bf00      	nop
 8009018:	20004ce0 	.word	0x20004ce0
 800901c:	20004c54 	.word	0x20004c54
 8009020:	20004bd8 	.word	0x20004bd8

08009024 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8009024:	4b04      	ldr	r3, [pc, #16]	@ (8009038 <pvTaskIncrementMutexHeldCount+0x14>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	b11a      	cbz	r2, 8009032 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 800902a:	6819      	ldr	r1, [r3, #0]
 800902c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800902e:	3201      	adds	r2, #1
 8009030:	650a      	str	r2, [r1, #80]	@ 0x50
        return pxCurrentTCB;
 8009032:	6818      	ldr	r0, [r3, #0]
    }
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	20004ce0 	.word	0x20004ce0

0800903c <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
 800903c:	4291      	cmp	r1, r2
    {
 800903e:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009040:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009042:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
 8009044:	d80a      	bhi.n	800905c <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009046:	1ad2      	subs	r2, r2, r3
 8009048:	6983      	ldr	r3, [r0, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	d20d      	bcs.n	800906a <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800904e:	1d01      	adds	r1, r0, #4
 8009050:	4b07      	ldr	r3, [pc, #28]	@ (8009070 <prvInsertTimerInActiveList+0x34>)
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	f7fe fd5d 	bl	8007b12 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8009058:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
 800905a:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800905c:	429a      	cmp	r2, r3
 800905e:	d201      	bcs.n	8009064 <prvInsertTimerInActiveList+0x28>
 8009060:	4299      	cmp	r1, r3
 8009062:	d202      	bcs.n	800906a <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009064:	1d01      	adds	r1, r0, #4
 8009066:	4b03      	ldr	r3, [pc, #12]	@ (8009074 <prvInsertTimerInActiveList+0x38>)
 8009068:	e7f3      	b.n	8009052 <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
 800906a:	2001      	movs	r0, #1
        return xProcessTimerNow;
 800906c:	e7f5      	b.n	800905a <prvInsertTimerInActiveList+0x1e>
 800906e:	bf00      	nop
 8009070:	20004cf0 	.word	0x20004cf0
 8009074:	20004cf4 	.word	0x20004cf4

08009078 <prvReloadTimer>:
    {
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4604      	mov	r4, r0
 800907c:	460d      	mov	r5, r1
 800907e:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009080:	69a1      	ldr	r1, [r4, #24]
 8009082:	462b      	mov	r3, r5
 8009084:	4632      	mov	r2, r6
 8009086:	4620      	mov	r0, r4
 8009088:	4429      	add	r1, r5
 800908a:	f7ff ffd7 	bl	800903c <prvInsertTimerInActiveList>
 800908e:	b900      	cbnz	r0, 8009092 <prvReloadTimer+0x1a>
    }
 8009090:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009092:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009094:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009096:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009098:	6a23      	ldr	r3, [r4, #32]
 800909a:	4798      	blx	r3
 800909c:	e7f0      	b.n	8009080 <prvReloadTimer+0x8>
	...

080090a0 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a0:	4b0e      	ldr	r3, [pc, #56]	@ (80090dc <prvProcessExpiredTimer+0x3c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
    {
 80090a6:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	68dc      	ldr	r4, [r3, #12]
    {
 80090aa:	4605      	mov	r5, r0
 80090ac:	460e      	mov	r6, r1
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090ae:	1d20      	adds	r0, r4, #4
 80090b0:	f7fe fd46 	bl	8007b40 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80090b8:	075a      	lsls	r2, r3, #29
 80090ba:	d509      	bpl.n	80090d0 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80090bc:	4632      	mov	r2, r6
 80090be:	4629      	mov	r1, r5
 80090c0:	4620      	mov	r0, r4
 80090c2:	f7ff ffd9 	bl	8009078 <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c6:	6a23      	ldr	r3, [r4, #32]
 80090c8:	4620      	mov	r0, r4
    }
 80090ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ce:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80090d8:	e7f5      	b.n	80090c6 <prvProcessExpiredTimer+0x26>
 80090da:	bf00      	nop
 80090dc:	20004cf4 	.word	0x20004cf4

080090e0 <prvSampleTimeNow>:
    {
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( xTimeNow < xLastTime )
 80090e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009120 <prvSampleTimeNow+0x40>)
    {
 80090e4:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 80090e6:	f7ff fbbb 	bl	8008860 <xTaskGetTickCount>
 80090ea:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 80090ec:	6833      	ldr	r3, [r6, #0]
 80090ee:	4283      	cmp	r3, r0
 80090f0:	d909      	bls.n	8009106 <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090f2:	4f0c      	ldr	r7, [pc, #48]	@ (8009124 <prvSampleTimeNow+0x44>)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	b952      	cbnz	r2, 8009110 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 80090fa:	4a0b      	ldr	r2, [pc, #44]	@ (8009128 <prvSampleTimeNow+0x48>)
 80090fc:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	2301      	movs	r3, #1
        pxCurrentTimerList = pxOverflowTimerList;
 8009102:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8009104:	e000      	b.n	8009108 <prvSampleTimeNow+0x28>
 8009106:	2300      	movs	r3, #0
    }
 8009108:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
 800910a:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 800910c:	6034      	str	r4, [r6, #0]
    }
 800910e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009110:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8009112:	f04f 31ff 	mov.w	r1, #4294967295
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	f7ff ffc2 	bl	80090a0 <prvProcessExpiredTimer>
 800911c:	e7ea      	b.n	80090f4 <prvSampleTimeNow+0x14>
 800911e:	bf00      	nop
 8009120:	20004ce4 	.word	0x20004ce4
 8009124:	20004cf4 	.word	0x20004cf4
 8009128:	20004cf0 	.word	0x20004cf0

0800912c <prvTimerTask>:
    {
 800912c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009130:	4f5a      	ldr	r7, [pc, #360]	@ (800929c <prvTimerTask+0x170>)
    {
 8009132:	b086      	sub	sp, #24
 8009134:	4e5a      	ldr	r6, [pc, #360]	@ (80092a0 <prvTimerTask+0x174>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	f8d3 8000 	ldr.w	r8, [r3]
 800913c:	f1b8 0f00 	cmp.w	r8, #0
 8009140:	d033      	beq.n	80091aa <prvTimerTask+0x7e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009142:	68db      	ldr	r3, [r3, #12]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009144:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009146:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
 800914a:	f7ff fb81 	bl	8008850 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800914e:	a802      	add	r0, sp, #8
 8009150:	f7ff ffc6 	bl	80090e0 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
 8009154:	9b02      	ldr	r3, [sp, #8]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009156:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
 8009158:	2b00      	cmp	r3, #0
 800915a:	d143      	bne.n	80091e4 <prvTimerTask+0xb8>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800915c:	bb3c      	cbnz	r4, 80091ae <prvTimerTask+0x82>
 800915e:	4540      	cmp	r0, r8
 8009160:	d32b      	bcc.n	80091ba <prvTimerTask+0x8e>
                    ( void ) xTaskResumeAll();
 8009162:	f7ff fc3f 	bl	80089e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009166:	4629      	mov	r1, r5
 8009168:	4640      	mov	r0, r8
 800916a:	f7ff ff99 	bl	80090a0 <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800916e:	2200      	movs	r2, #0
 8009170:	a902      	add	r1, sp, #8
 8009172:	6830      	ldr	r0, [r6, #0]
 8009174:	f7fe ff51 	bl	800801a <xQueueReceive>
 8009178:	2800      	cmp	r0, #0
 800917a:	d0dc      	beq.n	8009136 <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800917c:	9b02      	ldr	r3, [sp, #8]
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800917e:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009180:	2b00      	cmp	r3, #0
 8009182:	db32      	blt.n	80091ea <prvTimerTask+0xbe>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009184:	9c04      	ldr	r4, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009186:	6963      	ldr	r3, [r4, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d135      	bne.n	80091f8 <prvTimerTask+0xcc>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800918c:	a801      	add	r0, sp, #4
 800918e:	f7ff ffa7 	bl	80090e0 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
 8009192:	9b02      	ldr	r3, [sp, #8]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009194:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
 8009196:	3b01      	subs	r3, #1
 8009198:	2b08      	cmp	r3, #8
 800919a:	d8e8      	bhi.n	800916e <prvTimerTask+0x42>
 800919c:	e8df f003 	tbb	[pc, r3]
 80091a0:	5a533030 	.word	0x5a533030
 80091a4:	53303075 	.word	0x53303075
 80091a8:	5a          	.byte	0x5a
 80091a9:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091aa:	2401      	movs	r4, #1
 80091ac:	e7cd      	b.n	800914a <prvTimerTask+0x1e>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091ae:	4b3d      	ldr	r3, [pc, #244]	@ (80092a4 <prvTimerTask+0x178>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681c      	ldr	r4, [r3, #0]
 80091b4:	fab4 f484 	clz	r4, r4
 80091b8:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091ba:	4622      	mov	r2, r4
 80091bc:	eba8 0105 	sub.w	r1, r8, r5
 80091c0:	6830      	ldr	r0, [r6, #0]
 80091c2:	f7ff f90a 	bl	80083da <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80091c6:	f7ff fc0d 	bl	80089e4 <xTaskResumeAll>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d1cf      	bne.n	800916e <prvTimerTask+0x42>
                        portYIELD_WITHIN_API();
 80091ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80091d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	e7c4      	b.n	800916e <prvTimerTask+0x42>
                ( void ) xTaskResumeAll();
 80091e4:	f7ff fbfe 	bl	80089e4 <xTaskResumeAll>
    }
 80091e8:	e7c1      	b.n	800916e <prvTimerTask+0x42>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	9905      	ldr	r1, [sp, #20]
 80091ee:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dbbb      	blt.n	800916e <prvTimerTask+0x42>
 80091f6:	e7c5      	b.n	8009184 <prvTimerTask+0x58>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091f8:	1d20      	adds	r0, r4, #4
 80091fa:	f7fe fca1 	bl	8007b40 <uxListRemove>
 80091fe:	e7c5      	b.n	800918c <prvTimerTask+0x60>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009200:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009204:	4602      	mov	r2, r0
 8009206:	69a1      	ldr	r1, [r4, #24]
 8009208:	4620      	mov	r0, r4
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800920a:	f043 0301 	orr.w	r3, r3, #1
 800920e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	4419      	add	r1, r3
 8009216:	f7ff ff11 	bl	800903c <prvInsertTimerInActiveList>
 800921a:	2800      	cmp	r0, #0
 800921c:	d0a7      	beq.n	800916e <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800921e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009222:	0759      	lsls	r1, r3, #29
 8009224:	d50a      	bpl.n	800923c <prvTimerTask+0x110>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009226:	69a3      	ldr	r3, [r4, #24]
 8009228:	462a      	mov	r2, r5
 800922a:	9903      	ldr	r1, [sp, #12]
 800922c:	4620      	mov	r0, r4
 800922e:	4419      	add	r1, r3
 8009230:	f7ff ff22 	bl	8009078 <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009234:	6a23      	ldr	r3, [r4, #32]
 8009236:	4620      	mov	r0, r4
 8009238:	4798      	blx	r3
 800923a:	e798      	b.n	800916e <prvTimerTask+0x42>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800923c:	f023 0301 	bic.w	r3, r3, #1
 8009240:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009244:	e7f6      	b.n	8009234 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009246:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800924a:	f023 0301 	bic.w	r3, r3, #1
 800924e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009252:	e78c      	b.n	800916e <prvTimerTask+0x42>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009254:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009260:	9903      	ldr	r1, [sp, #12]
 8009262:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009264:	b951      	cbnz	r1, 800927c <prvTimerTask+0x150>
 8009266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926a:	b672      	cpsid	i
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	b662      	cpsie	i
 800927a:	e7fe      	b.n	800927a <prvTimerTask+0x14e>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800927c:	4603      	mov	r3, r0
 800927e:	4602      	mov	r2, r0
 8009280:	4401      	add	r1, r0
 8009282:	4620      	mov	r0, r4
 8009284:	f7ff feda 	bl	800903c <prvInsertTimerInActiveList>
                        break;
 8009288:	e771      	b.n	800916e <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800928a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800928e:	079a      	lsls	r2, r3, #30
 8009290:	d4db      	bmi.n	800924a <prvTimerTask+0x11e>
                                vPortFree( pxTimer );
 8009292:	4620      	mov	r0, r4
 8009294:	f000 f91a 	bl	80094cc <vPortFree>
 8009298:	e769      	b.n	800916e <prvTimerTask+0x42>
 800929a:	bf00      	nop
 800929c:	20004cf4 	.word	0x20004cf4
 80092a0:	20004cec 	.word	0x20004cec
 80092a4:	20004cf0 	.word	0x20004cf0

080092a8 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 80092aa:	4c0f      	ldr	r4, [pc, #60]	@ (80092e8 <prvCheckForValidListAndQueue+0x40>)
        taskENTER_CRITICAL();
 80092ac:	f000 f9b2 	bl	8009614 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80092b0:	6825      	ldr	r5, [r4, #0]
 80092b2:	b9ad      	cbnz	r5, 80092e0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80092b4:	4f0d      	ldr	r7, [pc, #52]	@ (80092ec <prvCheckForValidListAndQueue+0x44>)
                vListInitialise( &xActiveTimerList2 );
 80092b6:	4e0e      	ldr	r6, [pc, #56]	@ (80092f0 <prvCheckForValidListAndQueue+0x48>)
                vListInitialise( &xActiveTimerList1 );
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7fe fc11 	bl	8007ae0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80092be:	4630      	mov	r0, r6
 80092c0:	f7fe fc0e 	bl	8007ae0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80092c4:	4b0b      	ldr	r3, [pc, #44]	@ (80092f4 <prvCheckForValidListAndQueue+0x4c>)

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80092c6:	462a      	mov	r2, r5
 80092c8:	2110      	movs	r1, #16
                pxCurrentTimerList = &xActiveTimerList1;
 80092ca:	601f      	str	r7, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80092cc:	200a      	movs	r0, #10
                pxOverflowTimerList = &xActiveTimerList2;
 80092ce:	4b0a      	ldr	r3, [pc, #40]	@ (80092f8 <prvCheckForValidListAndQueue+0x50>)
 80092d0:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80092d2:	f7fe fd1f 	bl	8007d14 <xQueueGenericCreate>
 80092d6:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80092d8:	b110      	cbz	r0, 80092e0 <prvCheckForValidListAndQueue+0x38>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092da:	4908      	ldr	r1, [pc, #32]	@ (80092fc <prvCheckForValidListAndQueue+0x54>)
 80092dc:	f7ff f81e 	bl	800831c <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 80092e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 80092e4:	f000 b9ba 	b.w	800965c <vPortExitCritical>
 80092e8:	20004cec 	.word	0x20004cec
 80092ec:	20004d0c 	.word	0x20004d0c
 80092f0:	20004cf8 	.word	0x20004cf8
 80092f4:	20004cf4 	.word	0x20004cf4
 80092f8:	20004cf0 	.word	0x20004cf0
 80092fc:	08015d6f 	.word	0x08015d6f

08009300 <xTimerCreateTimerTask>:
    {
 8009300:	b507      	push	{r0, r1, r2, lr}
        prvCheckForValidListAndQueue();
 8009302:	f7ff ffd1 	bl	80092a8 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 8009306:	4b0f      	ldr	r3, [pc, #60]	@ (8009344 <xTimerCreateTimerTask+0x44>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	b953      	cbnz	r3, 8009322 <xTimerCreateTimerTask+0x22>
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	b672      	cpsid	i
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	b662      	cpsie	i
        configASSERT( xReturn );
 8009320:	e7fe      	b.n	8009320 <xTimerCreateTimerTask+0x20>
                xReturn = xTaskCreate( prvTimerTask,
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <xTimerCreateTimerTask+0x48>)
 8009324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009328:	4908      	ldr	r1, [pc, #32]	@ (800934c <xTimerCreateTimerTask+0x4c>)
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	2302      	movs	r3, #2
 800932e:	4808      	ldr	r0, [pc, #32]	@ (8009350 <xTimerCreateTimerTask+0x50>)
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	f7ff f8fe 	bl	8008534 <xTaskCreate>
        configASSERT( xReturn );
 8009338:	2800      	cmp	r0, #0
 800933a:	d0e7      	beq.n	800930c <xTimerCreateTimerTask+0xc>
    }
 800933c:	b003      	add	sp, #12
 800933e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009342:	bf00      	nop
 8009344:	20004cec 	.word	0x20004cec
 8009348:	20004ce8 	.word	0x20004ce8
 800934c:	08015d74 	.word	0x08015d74
 8009350:	0800912d 	.word	0x0800912d

08009354 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009354:	4b10      	ldr	r3, [pc, #64]	@ (8009398 <prvInsertBlockIntoFreeList+0x44>)
{
 8009356:	b510      	push	{r4, lr}
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009358:	461a      	mov	r2, r3
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4283      	cmp	r3, r0
 800935e:	d3fb      	bcc.n	8009358 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009360:	6854      	ldr	r4, [r2, #4]
 8009362:	1911      	adds	r1, r2, r4
 8009364:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009366:	bf01      	itttt	eq
 8009368:	6841      	ldreq	r1, [r0, #4]
        pxBlockToInsert = pxIterator;
 800936a:	4610      	moveq	r0, r2
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800936c:	1909      	addeq	r1, r1, r4
 800936e:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009370:	6844      	ldr	r4, [r0, #4]
 8009372:	1901      	adds	r1, r0, r4
 8009374:	428b      	cmp	r3, r1
 8009376:	d10c      	bne.n	8009392 <prvInsertBlockIntoFreeList+0x3e>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009378:	4908      	ldr	r1, [pc, #32]	@ (800939c <prvInsertBlockIntoFreeList+0x48>)
 800937a:	6809      	ldr	r1, [r1, #0]
 800937c:	428b      	cmp	r3, r1
 800937e:	d003      	beq.n	8009388 <prvInsertBlockIntoFreeList+0x34>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009380:	6859      	ldr	r1, [r3, #4]
 8009382:	4421      	add	r1, r4
 8009384:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009386:	6819      	ldr	r1, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009388:	4290      	cmp	r0, r2
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800938a:	6001      	str	r1, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800938c:	bf18      	it	ne
 800938e:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009390:	bd10      	pop	{r4, pc}
 8009392:	4619      	mov	r1, r3
 8009394:	e7f8      	b.n	8009388 <prvInsertBlockIntoFreeList+0x34>
 8009396:	bf00      	nop
 8009398:	20004d34 	.word	0x20004d34
 800939c:	20004d30 	.word	0x20004d30

080093a0 <pvPortMalloc>:
{
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	4604      	mov	r4, r0
    vTaskSuspendAll();
 80093a4:	f7ff fa54 	bl	8008850 <vTaskSuspendAll>
        if( pxEnd == NULL )
 80093a8:	4842      	ldr	r0, [pc, #264]	@ (80094b4 <pvPortMalloc+0x114>)
 80093aa:	6803      	ldr	r3, [r0, #0]
 80093ac:	b9f3      	cbnz	r3, 80093ec <pvPortMalloc+0x4c>
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80093ae:	4a42      	ldr	r2, [pc, #264]	@ (80094b8 <pvPortMalloc+0x118>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093b0:	4d42      	ldr	r5, [pc, #264]	@ (80094bc <pvPortMalloc+0x11c>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093b2:	0751      	lsls	r1, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093b4:	bf1b      	ittet	ne
 80093b6:	1dd1      	addne	r1, r2, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80093b8:	f502 42c8 	addne.w	r2, r2, #25600	@ 0x6400
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093bc:	f44f 43c8 	moveq.w	r3, #25600	@ 0x6400
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80093c0:	f021 0107 	bicne.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80093c4:	bf1c      	itt	ne
 80093c6:	1a53      	subne	r3, r2, r1
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80093c8:	460a      	movne	r2, r1
    xStart.xBlockSize = ( size_t ) 0;
 80093ca:	2100      	movs	r1, #0
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80093cc:	4413      	add	r3, r2
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093ce:	602a      	str	r2, [r5, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80093d0:	6069      	str	r1, [r5, #4]
    uxAddress -= xHeapStructSize;
 80093d2:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80093d4:	f023 0307 	bic.w	r3, r3, #7
    pxEnd->pxNextFreeBlock = NULL;
 80093d8:	e9c3 1100 	strd	r1, r1, [r3]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80093dc:	1a99      	subs	r1, r3, r2
    pxEnd = ( BlockLink_t * ) uxAddress;
 80093de:	6003      	str	r3, [r0, #0]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093e0:	e9c2 3100 	strd	r3, r1, [r2]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e4:	4b36      	ldr	r3, [pc, #216]	@ (80094c0 <pvPortMalloc+0x120>)
 80093e6:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e8:	4b36      	ldr	r3, [pc, #216]	@ (80094c4 <pvPortMalloc+0x124>)
 80093ea:	6019      	str	r1, [r3, #0]
        if( xWantedSize > 0 )
 80093ec:	b164      	cbz	r4, 8009408 <pvPortMalloc+0x68>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80093ee:	f004 0307 	and.w	r3, r4, #7
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80093f2:	f1a3 0211 	sub.w	r2, r3, #17
 80093f6:	42a2      	cmp	r2, r4
 80093f8:	d306      	bcc.n	8009408 <pvPortMalloc+0x68>
 80093fa:	f104 0210 	add.w	r2, r4, #16
                xWantedSize += xAdditionalRequiredSize;
 80093fe:	eba2 0c03 	sub.w	ip, r2, r3
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009402:	f1bc 0f00 	cmp.w	ip, #0
 8009406:	dc06      	bgt.n	8009416 <pvPortMalloc+0x76>
            vApplicationMallocFailedHook();
 8009408:	2700      	movs	r7, #0
    ( void ) xTaskResumeAll();
 800940a:	f7ff faeb 	bl	80089e4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
 800940e:	f7f8 f959 	bl	80016c4 <vApplicationMallocFailedHook>
}
 8009412:	4638      	mov	r0, r7
 8009414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009416:	4e2b      	ldr	r6, [pc, #172]	@ (80094c4 <pvPortMalloc+0x124>)
 8009418:	6835      	ldr	r5, [r6, #0]
 800941a:	4565      	cmp	r5, ip
 800941c:	d3f4      	bcc.n	8009408 <pvPortMalloc+0x68>
                pxBlock = xStart.pxNextFreeBlock;
 800941e:	4927      	ldr	r1, [pc, #156]	@ (80094bc <pvPortMalloc+0x11c>)
 8009420:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009422:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8009426:	45e6      	cmp	lr, ip
 8009428:	d201      	bcs.n	800942e <pvPortMalloc+0x8e>
 800942a:	6827      	ldr	r7, [r4, #0]
 800942c:	b9c7      	cbnz	r7, 8009460 <pvPortMalloc+0xc0>
                if( pxBlock != pxEnd )
 800942e:	6800      	ldr	r0, [r0, #0]
 8009430:	42a0      	cmp	r0, r4
 8009432:	d0e9      	beq.n	8009408 <pvPortMalloc+0x68>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009434:	1a9b      	subs	r3, r3, r2
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009436:	6820      	ldr	r0, [r4, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009438:	680f      	ldr	r7, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800943a:	4473      	add	r3, lr
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800943c:	6008      	str	r0, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800943e:	2b10      	cmp	r3, #16
 8009440:	d916      	bls.n	8009470 <pvPortMalloc+0xd0>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009442:	eb04 000c 	add.w	r0, r4, ip
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009446:	0742      	lsls	r2, r0, #29
 8009448:	d00d      	beq.n	8009466 <pvPortMalloc+0xc6>
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	b672      	cpsid	i
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	b662      	cpsie	i
 800945e:	e7fe      	b.n	800945e <pvPortMalloc+0xbe>
                    pxPreviousBlock = pxBlock;
 8009460:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009462:	463c      	mov	r4, r7
 8009464:	e7dd      	b.n	8009422 <pvPortMalloc+0x82>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009466:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009468:	f8c4 c004 	str.w	ip, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800946c:	f7ff ff72 	bl	8009354 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009470:	6862      	ldr	r2, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009472:	2300      	movs	r3, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009474:	4912      	ldr	r1, [pc, #72]	@ (80094c0 <pvPortMalloc+0x120>)
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009476:	3708      	adds	r7, #8
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009478:	1aad      	subs	r5, r5, r2
                    heapALLOCATE_BLOCK( pxBlock );
 800947a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800947e:	6808      	ldr	r0, [r1, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009480:	6062      	str	r2, [r4, #4]
                    xNumberOfSuccessfulAllocations++;
 8009482:	4a11      	ldr	r2, [pc, #68]	@ (80094c8 <pvPortMalloc+0x128>)
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009484:	4285      	cmp	r5, r0
                    pxBlock->pxNextFreeBlock = NULL;
 8009486:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 8009488:	6813      	ldr	r3, [r2, #0]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800948a:	bf38      	it	cc
 800948c:	600d      	strcc	r5, [r1, #0]
                    xNumberOfSuccessfulAllocations++;
 800948e:	3301      	adds	r3, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009490:	6035      	str	r5, [r6, #0]
                    xNumberOfSuccessfulAllocations++;
 8009492:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 8009494:	f7ff faa6 	bl	80089e4 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009498:	077b      	lsls	r3, r7, #29
 800949a:	d0ba      	beq.n	8009412 <pvPortMalloc+0x72>
 800949c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a0:	b672      	cpsid	i
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	b662      	cpsie	i
 80094b0:	e7fe      	b.n	80094b0 <pvPortMalloc+0x110>
 80094b2:	bf00      	nop
 80094b4:	20004d30 	.word	0x20004d30
 80094b8:	20004d3c 	.word	0x20004d3c
 80094bc:	20004d34 	.word	0x20004d34
 80094c0:	20004d28 	.word	0x20004d28
 80094c4:	20004d2c 	.word	0x20004d2c
 80094c8:	20004d24 	.word	0x20004d24

080094cc <vPortFree>:
{
 80094cc:	b510      	push	{r4, lr}
    if( pv != NULL )
 80094ce:	4604      	mov	r4, r0
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d034      	beq.n	800953e <vPortFree+0x72>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80094d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	db0a      	blt.n	80094f2 <vPortFree+0x26>
 80094dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e0:	b672      	cpsid	i
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	b662      	cpsie	i
 80094f0:	e7fe      	b.n	80094f0 <vPortFree+0x24>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094f2:	f850 2c08 	ldr.w	r2, [r0, #-8]
 80094f6:	b152      	cbz	r2, 800950e <vPortFree+0x42>
 80094f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fc:	b672      	cpsid	i
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	b662      	cpsie	i
 800950c:	e7fe      	b.n	800950c <vPortFree+0x40>
                heapFREE_BLOCK( pxLink );
 800950e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009512:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8009516:	f7ff f99b 	bl	8008850 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800951a:	4a09      	ldr	r2, [pc, #36]	@ (8009540 <vPortFree+0x74>)
 800951c:	f854 3c04 	ldr.w	r3, [r4, #-4]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009520:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009524:	6811      	ldr	r1, [r2, #0]
 8009526:	440b      	add	r3, r1
 8009528:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800952a:	f7ff ff13 	bl	8009354 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800952e:	4a05      	ldr	r2, [pc, #20]	@ (8009544 <vPortFree+0x78>)
 8009530:	6813      	ldr	r3, [r2, #0]
 8009532:	3301      	adds	r3, #1
}
 8009534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 8009538:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 800953a:	f7ff ba53 	b.w	80089e4 <xTaskResumeAll>
}
 800953e:	bd10      	pop	{r4, pc}
 8009540:	20004d2c 	.word	0x20004d2c
 8009544:	20004d20 	.word	0x20004d20

08009548 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009548:	4808      	ldr	r0, [pc, #32]	@ (800956c <prvPortStartFirstTask+0x24>)
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	6800      	ldr	r0, [r0, #0]
 800954e:	f380 8808 	msr	MSP, r0
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8814 	msr	CONTROL, r0
 800955a:	b662      	cpsie	i
 800955c:	b661      	cpsie	f
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	df00      	svc	0
 8009568:	bf00      	nop
 800956a:	0000      	.short	0x0000
 800956c:	e000ed08 	.word	0xe000ed08

08009570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009570:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009580 <vPortEnableVFP+0x10>
 8009574:	6801      	ldr	r1, [r0, #0]
 8009576:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800957a:	6001      	str	r1, [r0, #0]
 800957c:	4770      	bx	lr
 800957e:	0000      	.short	0x0000
 8009580:	e000ed88 	.word	0xe000ed88

08009584 <prvTaskExitError>:
    volatile uint32_t ulDummy = 0;
 8009584:	2300      	movs	r3, #0
{
 8009586:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 8009588:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
 800958a:	4b0f      	ldr	r3, [pc, #60]	@ (80095c8 <prvTaskExitError+0x44>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	d00a      	beq.n	80095a8 <prvTaskExitError+0x24>
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	b672      	cpsid	i
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	b662      	cpsie	i
 80095a6:	e7fe      	b.n	80095a6 <prvTaskExitError+0x22>
 80095a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ac:	b672      	cpsid	i
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	b662      	cpsie	i
    while( ulDummy == 0 )
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0fc      	beq.n	80095bc <prvTaskExitError+0x38>
}
 80095c2:	b002      	add	sp, #8
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20000050 	.word	0x20000050

080095cc <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80095cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80095d0:	f021 0101 	bic.w	r1, r1, #1
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80095d4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80095d8:	3844      	subs	r0, #68	@ 0x44
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80095da:	6403      	str	r3, [r0, #64]	@ 0x40
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80095dc:	4b03      	ldr	r3, [pc, #12]	@ (80095ec <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80095de:	63c1      	str	r1, [r0, #60]	@ 0x3c
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80095e0:	6383      	str	r3, [r0, #56]	@ 0x38
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80095e2:	f06f 0302 	mvn.w	r3, #2
 80095e6:	6203      	str	r3, [r0, #32]
}
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	08009585 	.word	0x08009585

080095f0 <SVC_Handler>:
    __asm volatile (
 80095f0:	4b07      	ldr	r3, [pc, #28]	@ (8009610 <pxCurrentTCBConst2>)
 80095f2:	6819      	ldr	r1, [r3, #0]
 80095f4:	6808      	ldr	r0, [r1, #0]
 80095f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	f380 8809 	msr	PSP, r0
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f04f 0000 	mov.w	r0, #0
 8009606:	f380 8811 	msr	BASEPRI, r0
 800960a:	4770      	bx	lr
 800960c:	f3af 8000 	nop.w

08009610 <pxCurrentTCBConst2>:
 8009610:	20004ce0 	.word	0x20004ce0

08009614 <vPortEnterCritical>:
 8009614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009618:	b672      	cpsid	i
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	b662      	cpsie	i
    uxCriticalNesting++;
 8009628:	4a0b      	ldr	r2, [pc, #44]	@ (8009658 <vPortEnterCritical+0x44>)
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	3301      	adds	r3, #1
    if( uxCriticalNesting == 1 )
 800962e:	2b01      	cmp	r3, #1
    uxCriticalNesting++;
 8009630:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8009632:	d110      	bne.n	8009656 <vPortEnterCritical+0x42>
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009634:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009638:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800963c:	b2db      	uxtb	r3, r3
 800963e:	b153      	cbz	r3, 8009656 <vPortEnterCritical+0x42>
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
 8009654:	e7fe      	b.n	8009654 <vPortEnterCritical+0x40>
}
 8009656:	4770      	bx	lr
 8009658:	20000050 	.word	0x20000050

0800965c <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 800965c:	4a09      	ldr	r2, [pc, #36]	@ (8009684 <vPortExitCritical+0x28>)
 800965e:	6813      	ldr	r3, [r2, #0]
 8009660:	b953      	cbnz	r3, 8009678 <vPortExitCritical+0x1c>
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	b672      	cpsid	i
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	b662      	cpsie	i
 8009676:	e7fe      	b.n	8009676 <vPortExitCritical+0x1a>
    uxCriticalNesting--;
 8009678:	3b01      	subs	r3, #1
 800967a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800967c:	b90b      	cbnz	r3, 8009682 <vPortExitCritical+0x26>
        __asm volatile
 800967e:	f383 8811 	msr	BASEPRI, r3
}
 8009682:	4770      	bx	lr
 8009684:	20000050 	.word	0x20000050
	...

08009690 <PendSV_Handler>:
    __asm volatile
 8009690:	f3ef 8009 	mrs	r0, PSP
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	4b15      	ldr	r3, [pc, #84]	@ (80096f0 <pxCurrentTCBConst>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	f01e 0f10 	tst.w	lr, #16
 80096a0:	bf08      	it	eq
 80096a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096aa:	6010      	str	r0, [r2, #0]
 80096ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80096b4:	b672      	cpsid	i
 80096b6:	f380 8811 	msr	BASEPRI, r0
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	b662      	cpsie	i
 80096c4:	f7ff fa54 	bl	8008b70 <vTaskSwitchContext>
 80096c8:	f04f 0000 	mov.w	r0, #0
 80096cc:	f380 8811 	msr	BASEPRI, r0
 80096d0:	bc09      	pop	{r0, r3}
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	6808      	ldr	r0, [r1, #0]
 80096d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	f01e 0f10 	tst.w	lr, #16
 80096de:	bf08      	it	eq
 80096e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096e4:	f380 8809 	msr	PSP, r0
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop

080096f0 <pxCurrentTCBConst>:
 80096f0:	20004ce0 	.word	0x20004ce0

080096f4 <SysTick_Handler>:
{
 80096f4:	b508      	push	{r3, lr}
        __asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	b672      	cpsid	i
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	b662      	cpsie	i
        if( xTaskIncrementTick() != pdFALSE )
 800970a:	f7ff f8b5 	bl	8008878 <xTaskIncrementTick>
 800970e:	b128      	cbz	r0, 800971c <SysTick_Handler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009710:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009718:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        __asm volatile
 800971c:	2300      	movs	r3, #0
 800971e:	f383 8811 	msr	BASEPRI, r3
}
 8009722:	bd08      	pop	{r3, pc}

08009724 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009724:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009728:	2300      	movs	r3, #0
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800972a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800972e:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009730:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009732:	4b04      	ldr	r3, [pc, #16]	@ (8009744 <vPortSetupTimerInterrupt+0x20>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	fbb3 f3f1 	udiv	r3, r3, r1
 800973a:	3b01      	subs	r3, #1
 800973c:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800973e:	2307      	movs	r3, #7
 8009740:	6113      	str	r3, [r2, #16]
}
 8009742:	4770      	bx	lr
 8009744:	20000014 	.word	0x20000014

08009748 <xPortStartScheduler>:
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009748:	4b2c      	ldr	r3, [pc, #176]	@ (80097fc <xPortStartScheduler+0xb4>)
{
 800974a:	b537      	push	{r0, r1, r2, r4, r5, lr}
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009752:	22ff      	movs	r2, #255	@ 0xff
 8009754:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009756:	781b      	ldrb	r3, [r3, #0]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009758:	4a29      	ldr	r2, [pc, #164]	@ (8009800 <xPortStartScheduler+0xb8>)
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009760:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009764:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009768:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800976a:	2307      	movs	r3, #7
 800976c:	4a25      	ldr	r2, [pc, #148]	@ (8009804 <xPortStartScheduler+0xbc>)
 800976e:	6013      	str	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009770:	f89d 1003 	ldrb.w	r1, [sp, #3]
            ulMaxPRIGROUPValue--;
 8009774:	6813      	ldr	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009776:	0609      	lsls	r1, r1, #24
 8009778:	d40c      	bmi.n	8009794 <xPortStartScheduler+0x4c>
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800977a:	2b03      	cmp	r3, #3
 800977c:	d013      	beq.n	80097a6 <xPortStartScheduler+0x5e>
        __asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	b672      	cpsid	i
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	b662      	cpsie	i
 8009792:	e7fe      	b.n	8009792 <xPortStartScheduler+0x4a>
            ulMaxPRIGROUPValue--;
 8009794:	3b01      	subs	r3, #1
 8009796:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009798:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f88d 3003 	strb.w	r3, [sp, #3]
 80097a4:	e7e4      	b.n	8009770 <xPortStartScheduler+0x28>
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80097aa:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
    uxCriticalNesting = 0;
 80097ae:	2500      	movs	r5, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097b0:	6013      	str	r3, [r2, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b2:	9b01      	ldr	r3, [sp, #4]
 80097b4:	4a11      	ldr	r2, [pc, #68]	@ (80097fc <xPortStartScheduler+0xb4>)
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80097ba:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80097be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097c2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80097c6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80097ca:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097ce:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
 80097d2:	f7ff ffa7 	bl	8009724 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 80097d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <xPortStartScheduler+0xc0>)
 80097d8:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 80097da:	f7ff fec9 	bl	8009570 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097de:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80097e2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097e6:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
    prvPortStartFirstTask();
 80097ea:	f7ff fead 	bl	8009548 <prvPortStartFirstTask>
    vTaskSwitchContext();
 80097ee:	f7ff f9bf 	bl	8008b70 <vTaskSwitchContext>
}
 80097f2:	4628      	mov	r0, r5
    prvTaskExitError();
 80097f4:	f7ff fec6 	bl	8009584 <prvTaskExitError>
}
 80097f8:	b003      	add	sp, #12
 80097fa:	bd30      	pop	{r4, r5, pc}
 80097fc:	e000e400 	.word	0xe000e400
 8009800:	2000b140 	.word	0x2000b140
 8009804:	2000b13c 	.word	0x2000b13c
 8009808:	20000050 	.word	0x20000050

0800980c <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800980c:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009810:	2b0f      	cmp	r3, #15
 8009812:	d910      	bls.n	8009836 <vPortValidateInterruptPriority+0x2a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009814:	4a13      	ldr	r2, [pc, #76]	@ (8009864 <vPortValidateInterruptPriority+0x58>)
 8009816:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009818:	4a13      	ldr	r2, [pc, #76]	@ (8009868 <vPortValidateInterruptPriority+0x5c>)
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d90a      	bls.n	8009836 <vPortValidateInterruptPriority+0x2a>
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	b672      	cpsid	i
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	b662      	cpsie	i
 8009834:	e7fe      	b.n	8009834 <vPortValidateInterruptPriority+0x28>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009836:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800983a:	4a0c      	ldr	r2, [pc, #48]	@ (800986c <vPortValidateInterruptPriority+0x60>)
 800983c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009840:	6812      	ldr	r2, [r2, #0]
 8009842:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009846:	4293      	cmp	r3, r2
 8009848:	d90a      	bls.n	8009860 <vPortValidateInterruptPriority+0x54>
 800984a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984e:	b672      	cpsid	i
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	b662      	cpsie	i
 800985e:	e7fe      	b.n	800985e <vPortValidateInterruptPriority+0x52>
    }
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	e000e3f0 	.word	0xe000e3f0
 8009868:	2000b140 	.word	0x2000b140
 800986c:	2000b13c 	.word	0x2000b13c

08009870 <userShellWrite>:
 * @param len 数据长度
 * 
 * @return short 实际写入的数据长度
 */
short userShellWrite(char *data, unsigned short len)
{
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
  //serialTransmit(&debugSerial, (uint8_t *)data, len, 0x1FF);
  Usart_Transmit(USART2, (const uint8_t *)data, (uint16_t)len, 0x1FF);
 8009874:	460a      	mov	r2, r1
 8009876:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800987a:	4601      	mov	r1, r0
 800987c:	4802      	ldr	r0, [pc, #8]	@ (8009888 <userShellWrite+0x18>)
 800987e:	f000 f8a7 	bl	80099d0 <Usart_Transmit>
  //Usart_Transmit_DMA(USART2, (const uint8_t *)data, (uint16_t)len);  //fifo err

  return len;
}
 8009882:	b220      	sxth	r0, r4
 8009884:	bd10      	pop	{r4, pc}
 8009886:	bf00      	nop
 8009888:	40004400 	.word	0x40004400

0800988c <userShellRead>:
 * @param len 数据长度
 * 
 * @return short 实际读取到
 */
short userShellRead(char *data, unsigned short len)
{
 800988c:	460a      	mov	r2, r1
  //return serialReceive(&debugSerial, (uint8_t *)data, len, 0);
  //Usart_Receive(USART2, (uint8_t *)data, (uint16_t)len, 0x1FF);
  //return len;
  if(Usart_Receive(USART2, (uint8_t *)data, (uint16_t)len, 0xFFFF) != USART_OK)
 800988e:	4601      	mov	r1, r0
 8009890:	4804      	ldr	r0, [pc, #16]	@ (80098a4 <userShellRead+0x18>)
{
 8009892:	b508      	push	{r3, lr}
  if(Usart_Receive(USART2, (uint8_t *)data, (uint16_t)len, 0xFFFF) != USART_OK)
 8009894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009898:	f000 fa1e 	bl	8009cd8 <Usart_Receive>
    return 0;
  else
    return 1;
}
 800989c:	fab0 f080 	clz	r0, r0
 80098a0:	0940      	lsrs	r0, r0, #5
 80098a2:	bd08      	pop	{r3, pc}
 80098a4:	40004400 	.word	0x40004400

080098a8 <userShellLock>:
 * @param shell shell
 * 
 * @return int 0
 */
int userShellLock(Shell *shell)
{
 80098a8:	b508      	push	{r3, lr}
  //xSemaphoreTakeRecursive(shellMutex, portMAX_DELAY); //递归互斥量获取函数
  xSemaphoreTake(shellMutex, portMAX_DELAY);
 80098aa:	4b04      	ldr	r3, [pc, #16]	@ (80098bc <userShellLock+0x14>)
 80098ac:	f04f 31ff 	mov.w	r1, #4294967295
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	f7fe fc56 	bl	8008162 <xQueueSemaphoreTake>
  return 0;
}
 80098b6:	2000      	movs	r0, #0
 80098b8:	bd08      	pop	{r3, pc}
 80098ba:	bf00      	nop
 80098bc:	2000b14c 	.word	0x2000b14c

080098c0 <userShellUnlock>:
 * @param shell shell
 * 
 * @return int 0
 */
int userShellUnlock(Shell *shell)
{
 80098c0:	b508      	push	{r3, lr}
  //xSemaphoreGiveRecursive(shellMutex); //递归互斥量
  xSemaphoreGive(shellMutex);
 80098c2:	4804      	ldr	r0, [pc, #16]	@ (80098d4 <userShellUnlock+0x14>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	6800      	ldr	r0, [r0, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	f7fe fa4e 	bl	8007d6c <xQueueGenericSend>
  return 0;
}
 80098d0:	2000      	movs	r0, #0
 80098d2:	bd08      	pop	{r3, pc}
 80098d4:	2000b14c 	.word	0x2000b14c

080098d8 <shellTask1>:


void shellTask1(void *param)
{
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	4604      	mov	r4, r0
  Shell *shell = (Shell *)param;
  while(1)
  {
    xSemaphoreTake(Usart2_BinarySem_Handle, 0xffff);
 80098dc:	4f0a      	ldr	r7, [pc, #40]	@ (8009908 <shellTask1+0x30>)
    if(Usart_Receive_IT_Get_Flag() != 0)
    {
      shellHandler(shell, recv_buf[0]);
 80098de:	4d0b      	ldr	r5, [pc, #44]	@ (800990c <shellTask1+0x34>)
    }
    Usart_Receive_IT(USART2, (uint8_t*)recv_buf, 1);
 80098e0:	4e0b      	ldr	r6, [pc, #44]	@ (8009910 <shellTask1+0x38>)
    xSemaphoreTake(Usart2_BinarySem_Handle, 0xffff);
 80098e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80098e6:	6838      	ldr	r0, [r7, #0]
 80098e8:	f7fe fc3b 	bl	8008162 <xQueueSemaphoreTake>
    if(Usart_Receive_IT_Get_Flag() != 0)
 80098ec:	f000 fad4 	bl	8009e98 <Usart_Receive_IT_Get_Flag>
 80098f0:	b118      	cbz	r0, 80098fa <shellTask1+0x22>
      shellHandler(shell, recv_buf[0]);
 80098f2:	7829      	ldrb	r1, [r5, #0]
 80098f4:	4620      	mov	r0, r4
 80098f6:	f001 fbd5 	bl	800b0a4 <shellHandler>
    Usart_Receive_IT(USART2, (uint8_t*)recv_buf, 1);
 80098fa:	2201      	movs	r2, #1
 80098fc:	4629      	mov	r1, r5
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 fab2 	bl	8009e68 <Usart_Receive_IT>
    xSemaphoreTake(Usart2_BinarySem_Handle, 0xffff);
 8009904:	e7ed      	b.n	80098e2 <shellTask1+0xa>
 8009906:	bf00      	nop
 8009908:	2000b148 	.word	0x2000b148
 800990c:	2000b141 	.word	0x2000b141
 8009910:	40004400 	.word	0x40004400

08009914 <USART_RxFinish>:
}
//void USART_RxCpltCallback(USART_TypeDef *pUSARTx)
void USART_RxFinish(int value)
{
  BaseType_t pxHigherPriorityTaskWoken;
  xSemaphoreGiveFromISR(Usart2_BinarySem_Handle,&pxHigherPriorityTaskWoken);
 8009914:	4b04      	ldr	r3, [pc, #16]	@ (8009928 <USART_RxFinish+0x14>)
{
 8009916:	b507      	push	{r0, r1, r2, lr}
  xSemaphoreGiveFromISR(Usart2_BinarySem_Handle,&pxHigherPriorityTaskWoken);
 8009918:	a901      	add	r1, sp, #4
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	f7fe fb13 	bl	8007f46 <xQueueGiveFromISR>
  UNUSED(value);
}
 8009920:	b003      	add	sp, #12
 8009922:	f85d fb04 	ldr.w	pc, [sp], #4
 8009926:	bf00      	nop
 8009928:	2000b148 	.word	0x2000b148

0800992c <userShellInit>:
 * @brief 用户shell初始化
 * 
 */
SemaphoreHandle_t Usart2_BinarySem_Handle;
void userShellInit(void)
{
 800992c:	b513      	push	{r0, r1, r4, lr}
  MX_USART2_UART_Init();
 800992e:	f000 f8b5 	bl	8009a9c <MX_USART2_UART_Init>
  //MX_USART2_DMA();
  shellMutex = xSemaphoreCreateMutex();
 8009932:	2001      	movs	r0, #1
 8009934:	f7fe fad4 	bl	8007ee0 <xQueueCreateMutex>
 8009938:	4b18      	ldr	r3, [pc, #96]	@ (800999c <userShellInit+0x70>)

  shell.write = userShellWrite;
 800993a:	4c19      	ldr	r4, [pc, #100]	@ (80099a0 <userShellInit+0x74>)
  shell.read = userShellRead;
  shell.lock = userShellLock;
  shell.unlock = userShellUnlock;
  shellInit(&shell, shellBuffer, 512);
 800993c:	f44f 7200 	mov.w	r2, #512	@ 0x200
  shellMutex = xSemaphoreCreateMutex();
 8009940:	6018      	str	r0, [r3, #0]
  shell.write = userShellWrite;
 8009942:	4b18      	ldr	r3, [pc, #96]	@ (80099a4 <userShellInit+0x78>)
  shellInit(&shell, shellBuffer, 512);
 8009944:	4620      	mov	r0, r4
 8009946:	4918      	ldr	r1, [pc, #96]	@ (80099a8 <userShellInit+0x7c>)
  shell.write = userShellWrite;
 8009948:	66a3      	str	r3, [r4, #104]	@ 0x68
  shell.read = userShellRead;
 800994a:	4b18      	ldr	r3, [pc, #96]	@ (80099ac <userShellInit+0x80>)
 800994c:	6663      	str	r3, [r4, #100]	@ 0x64
  shell.lock = userShellLock;
 800994e:	4b18      	ldr	r3, [pc, #96]	@ (80099b0 <userShellInit+0x84>)
 8009950:	66e3      	str	r3, [r4, #108]	@ 0x6c
  shell.unlock = userShellUnlock;
 8009952:	4b18      	ldr	r3, [pc, #96]	@ (80099b4 <userShellInit+0x88>)
 8009954:	6723      	str	r3, [r4, #112]	@ 0x70
  shellInit(&shell, shellBuffer, 512);
 8009956:	f001 fa75 	bl	800ae44 <shellInit>
  Usart2_BinarySem_Handle = xSemaphoreCreateBinary();
 800995a:	2203      	movs	r2, #3
 800995c:	2100      	movs	r1, #0
 800995e:	2001      	movs	r0, #1
 8009960:	f7fe f9d8 	bl	8007d14 <xQueueGenericCreate>
 8009964:	4b14      	ldr	r3, [pc, #80]	@ (80099b8 <userShellInit+0x8c>)
  //xSemaphoreGive(Usart2_BinarySem_Handle);
  Usart_Receive_IT(USART2, (uint8_t*)recv_buf, 1);
 8009966:	2201      	movs	r2, #1
 8009968:	4914      	ldr	r1, [pc, #80]	@ (80099bc <userShellInit+0x90>)
  Usart2_BinarySem_Handle = xSemaphoreCreateBinary();
 800996a:	6018      	str	r0, [r3, #0]
  Usart_Receive_IT(USART2, (uint8_t*)recv_buf, 1);
 800996c:	4814      	ldr	r0, [pc, #80]	@ (80099c0 <userShellInit+0x94>)
 800996e:	f000 fa7b 	bl	8009e68 <Usart_Receive_IT>
  if(xTaskCreate(shellTask1, "shell", 256, &shell, 5, NULL) != pdPASS)
 8009972:	2305      	movs	r3, #5
 8009974:	2200      	movs	r2, #0
 8009976:	4913      	ldr	r1, [pc, #76]	@ (80099c4 <userShellInit+0x98>)
 8009978:	4813      	ldr	r0, [pc, #76]	@ (80099c8 <userShellInit+0x9c>)
 800997a:	e9cd 3200 	strd	r3, r2, [sp]
 800997e:	4623      	mov	r3, r4
 8009980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009984:	f7fe fdd6 	bl	8008534 <xTaskCreate>
 8009988:	2801      	cmp	r0, #1
 800998a:	d005      	beq.n	8009998 <userShellInit+0x6c>
  {
    printf("shell task creat failed");
 800998c:	480f      	ldr	r0, [pc, #60]	@ (80099cc <userShellInit+0xa0>)
  }
}
 800998e:	b002      	add	sp, #8
 8009990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("shell task creat failed");
 8009994:	f00a be80 	b.w	8014698 <iprintf>
}
 8009998:	b002      	add	sp, #8
 800999a:	bd10      	pop	{r4, pc}
 800999c:	2000b14c 	.word	0x2000b14c
 80099a0:	2000b350 	.word	0x2000b350
 80099a4:	08009871 	.word	0x08009871
 80099a8:	2000b150 	.word	0x2000b150
 80099ac:	0800988d 	.word	0x0800988d
 80099b0:	080098a9 	.word	0x080098a9
 80099b4:	080098c1 	.word	0x080098c1
 80099b8:	2000b148 	.word	0x2000b148
 80099bc:	2000b141 	.word	0x2000b141
 80099c0:	40004400 	.word	0x40004400
 80099c4:	08015d7c 	.word	0x08015d7c
 80099c8:	080098d9 	.word	0x080098d9
 80099cc:	08015d82 	.word	0x08015d82

080099d0 <Usart_Transmit>:
  * @brief  Function called for achieving TX buffer sending
  * @param  None
  * @retval None
  */
uint8_t Usart_Transmit(USART_TypeDef *pUSARTx, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t ubSend = 0;
  uint16_t ubNbDataToTransmit = 0;
  uint32_t tmpTimeout;

  /* Check that a Tx process is not already ongoing */
  if (TxState == USART_STATE_READY)
 80099d4:	4e2a      	ldr	r6, [pc, #168]	@ (8009a80 <Usart_Transmit+0xb0>)
 80099d6:	6834      	ldr	r4, [r6, #0]
 80099d8:	2c20      	cmp	r4, #32
 80099da:	d14c      	bne.n	8009a76 <Usart_Transmit+0xa6>
  {
    if((pData == NULL) || (Size == 0U))
 80099dc:	2900      	cmp	r1, #0
 80099de:	d04c      	beq.n	8009a7a <Usart_Transmit+0xaa>
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	d04a      	beq.n	8009a7a <Usart_Transmit+0xaa>
    {
      return USART_ERROR;
    }

    TxState = USART_STATE_BUSY_TX;
 80099e4:	2421      	movs	r4, #33	@ 0x21
 80099e6:	6034      	str	r4, [r6, #0]
    ubNbDataToTransmit = Size;
    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE))) //UART_WORDLENGTH_9B and Parity control enable (奇偶校验使能)
 80099e8:	6804      	ldr	r4, [r0, #0]
 80099ea:	f414 5480 	ands.w	r4, r4, #4096	@ 0x1000
 80099ee:	d006      	beq.n	80099fe <Usart_Transmit+0x2e>
 80099f0:	6805      	ldr	r5, [r0, #0]
 80099f2:	f415 6580 	ands.w	r5, r5, #1024	@ 0x400
    {
      pdata8bits  = NULL;
      pdata16bits = (const uint16_t *) pData;
 80099f6:	bf0a      	itet	eq
 80099f8:	460c      	moveq	r4, r1
    }else{
      pdata8bits  = pData;
      pdata16bits = NULL;
 80099fa:	2400      	movne	r4, #0
      pdata8bits  = NULL;
 80099fc:	4629      	moveq	r1, r5
      pdata16bits = NULL;
 80099fe:	2500      	movs	r5, #0
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8009a00:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
          }
        }
      }

      /* If last char to be sent, clear TC flag */
      if(ubSend == (ubNbDataToTransmit - 1)) //if (ubSend == (sizeof(aTxBuffer_init) - 1))
 8009a04:	f102 3eff 	add.w	lr, r2, #4294967295
      tmpTimeout = Timeout; //mS
 8009a08:	461f      	mov	r7, r3
      while(!(pUSARTx->ISR & USART_ISR_TXE))  //while(!LL_USART_IsActiveFlag_TXE(USART2))
 8009a0a:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8009a0e:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8009a12:	d016      	beq.n	8009a42 <Usart_Transmit+0x72>
      if(ubSend == (ubNbDataToTransmit - 1)) //if (ubSend == (sizeof(aTxBuffer_init) - 1))
 8009a14:	45ae      	cmp	lr, r5
 8009a16:	d101      	bne.n	8009a1c <Usart_Transmit+0x4c>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8009a18:	2740      	movs	r7, #64	@ 0x40
 8009a1a:	6207      	str	r7, [r0, #32]
        LL_USART_ClearFlag_TC(pUSARTx); //pUSARTx->ICR = USART_ICR_TCCF;
      }

      /* Write character in Transmit Data register. TXE flag is cleared by writing data in TDR register */
      //LL_USART_TransmitData8(USART2, *pData++);
      if(pdata8bits == NULL)
 8009a1c:	bb01      	cbnz	r1, 8009a60 <Usart_Transmit+0x90>
      {
        pUSARTx->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a1e:	f834 7b02 	ldrh.w	r7, [r4], #2
 8009a22:	f3c7 0708 	ubfx	r7, r7, #0, #9
    while(ubSend < ubNbDataToTransmit) // while (ubSend < sizeof(aTxBuffer_init))
 8009a26:	3501      	adds	r5, #1
        pdata16bits++;
      }else{
        pUSARTx->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a28:	6287      	str	r7, [r0, #40]	@ 0x28
    while(ubSend < ubNbDataToTransmit) // while (ubSend < sizeof(aTxBuffer_init))
 8009a2a:	b2af      	uxth	r7, r5
 8009a2c:	42ba      	cmp	r2, r7
 8009a2e:	d8eb      	bhi.n	8009a08 <Usart_Transmit+0x38>
 8009a30:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
      ubSend++;
    }

    tmpTimeout = Timeout;
    /* Wait for TC flag to be raised for last char */
    while(!(pUSARTx->ISR & USART_ISR_TC))  //while(!LL_USART_IsActiveFlag_TC(USART2))
 8009a34:	69c2      	ldr	r2, [r0, #28]
 8009a36:	0652      	lsls	r2, r2, #25
 8009a38:	d515      	bpl.n	8009a66 <Usart_Transmit+0x96>
          return USART_TIMEOUT;
        }
      }
    }
    /* At end of Tx process, restore huart->gState to Ready */
    TxState = USART_STATE_READY;
 8009a3a:	2320      	movs	r3, #32
    return USART_OK;
 8009a3c:	2000      	movs	r0, #0
    TxState = USART_STATE_READY;
 8009a3e:	6033      	str	r3, [r6, #0]
    return USART_OK;
 8009a40:	e00a      	b.n	8009a58 <Usart_Transmit+0x88>
 8009a42:	f8dc 8010 	ldr.w	r8, [ip, #16]
        if(LL_SYSTICK_IsActiveCounterFlag()) /* USE_TIMEOUT */
 8009a46:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 8009a4a:	d0de      	beq.n	8009a0a <Usart_Transmit+0x3a>
          if(tmpTimeout-- == 0)
 8009a4c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a50:	b927      	cbnz	r7, 8009a5c <Usart_Transmit+0x8c>
            TxState = USART_STATE_READY;
 8009a52:	2320      	movs	r3, #32
            return USART_TIMEOUT;
 8009a54:	2003      	movs	r0, #3
            TxState = USART_STATE_READY;
 8009a56:	6033      	str	r3, [r6, #0]
  }else{
    return USART_BUSY;
  }
}
 8009a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(tmpTimeout-- == 0)
 8009a5c:	4647      	mov	r7, r8
 8009a5e:	e7d4      	b.n	8009a0a <Usart_Transmit+0x3a>
        pUSARTx->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a60:	f811 7b01 	ldrb.w	r7, [r1], #1
 8009a64:	e7df      	b.n	8009a26 <Usart_Transmit+0x56>
 8009a66:	690a      	ldr	r2, [r1, #16]
      if(LL_SYSTICK_IsActiveCounterFlag())
 8009a68:	03d4      	lsls	r4, r2, #15
 8009a6a:	d5e3      	bpl.n	8009a34 <Usart_Transmit+0x64>
        if(tmpTimeout-- == 0)
 8009a6c:	1e5a      	subs	r2, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d0ef      	beq.n	8009a52 <Usart_Transmit+0x82>
 8009a72:	4613      	mov	r3, r2
 8009a74:	e7de      	b.n	8009a34 <Usart_Transmit+0x64>
    return USART_BUSY;
 8009a76:	2002      	movs	r0, #2
 8009a78:	e7ee      	b.n	8009a58 <Usart_Transmit+0x88>
      return USART_ERROR;
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	e7ec      	b.n	8009a58 <Usart_Transmit+0x88>
 8009a7e:	bf00      	nop
 8009a80:	2000b3dc 	.word	0x2000b3dc

08009a84 <_write>:
{
 8009a84:	b510      	push	{r4, lr}
 8009a86:	4614      	mov	r4, r2
  Usart_Transmit(USART2, (const uint8_t *)ptr, (uint16_t)len, 0xFFFF);
 8009a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	4802      	ldr	r0, [pc, #8]	@ (8009a98 <_write+0x14>)
 8009a90:	f7ff ff9e 	bl	80099d0 <Usart_Transmit>
}
 8009a94:	4620      	mov	r0, r4
 8009a96:	bd10      	pop	{r4, pc}
 8009a98:	40004400 	.word	0x40004400

08009a9c <MX_USART2_UART_Init>:
  //  return USART_BUSY;
  //}
}

void MX_USART2_UART_Init(void)
{
 8009a9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009aa0:	4984      	ldr	r1, [pc, #528]	@ (8009cb4 <MX_USART2_UART_Init+0x218>)
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8009aa6:	f043 0308 	orr.w	r3, r3, #8
 8009aaa:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009aac:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8009aae:	f003 0308 	and.w	r3, r3, #8
 8009ab2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009ab4:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009ab6:	4b80      	ldr	r3, [pc, #512]	@ (8009cb8 <MX_USART2_UART_Init+0x21c>)
 8009ab8:	681e      	ldr	r6, [r3, #0]
 8009aba:	fa92 f5a2 	rbit	r5, r2
 8009abe:	fab5 f585 	clz	r5, r5
 8009ac2:	fa92 f4a2 	rbit	r4, r2
 8009ac6:	2003      	movs	r0, #3
 8009ac8:	006d      	lsls	r5, r5, #1
 8009aca:	fab4 f484 	clz	r4, r4
 8009ace:	fa00 f505 	lsl.w	r5, r0, r5
 8009ad2:	0064      	lsls	r4, r4, #1
 8009ad4:	ea26 0505 	bic.w	r5, r6, r5
 8009ad8:	2602      	movs	r6, #2
 8009ada:	fa06 f404 	lsl.w	r4, r6, r4
 8009ade:	432c      	orrs	r4, r5
 8009ae0:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8009ae2:	6a1f      	ldr	r7, [r3, #32]
 8009ae4:	fa92 f5a2 	rbit	r5, r2
 8009ae8:	fab5 f585 	clz	r5, r5
 8009aec:	fa92 f4a2 	rbit	r4, r2
 8009af0:	f04f 0c0f 	mov.w	ip, #15
 8009af4:	40b5      	lsls	r5, r6
 8009af6:	fab4 f484 	clz	r4, r4
 8009afa:	fa0c f505 	lsl.w	r5, ip, r5
 8009afe:	40b4      	lsls	r4, r6
 8009b00:	ea27 0505 	bic.w	r5, r7, r5
 8009b04:	2707      	movs	r7, #7
 8009b06:	fa07 f404 	lsl.w	r4, r7, r4
 8009b0a:	432c      	orrs	r4, r5
 8009b0c:	621c      	str	r4, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009b0e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8009b12:	fa92 f5a2 	rbit	r5, r2
 8009b16:	fab5 f585 	clz	r5, r5
 8009b1a:	fa92 f4a2 	rbit	r4, r2
 8009b1e:	fab4 f484 	clz	r4, r4
 8009b22:	006d      	lsls	r5, r5, #1
 8009b24:	0064      	lsls	r4, r4, #1
 8009b26:	fa00 f505 	lsl.w	r5, r0, r5
 8009b2a:	fa06 f404 	lsl.w	r4, r6, r4
 8009b2e:	ea2e 0505 	bic.w	r5, lr, r5
 8009b32:	432c      	orrs	r4, r5
 8009b34:	609c      	str	r4, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009b36:	685c      	ldr	r4, [r3, #4]
 8009b38:	f024 0420 	bic.w	r4, r4, #32
 8009b3c:	605c      	str	r4, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009b3e:	68dd      	ldr	r5, [r3, #12]
 8009b40:	fa92 f4a2 	rbit	r4, r2
 8009b44:	fab4 f484 	clz	r4, r4
 8009b48:	fa92 f2a2 	rbit	r2, r2
 8009b4c:	0064      	lsls	r4, r4, #1
 8009b4e:	fab2 f282 	clz	r2, r2
 8009b52:	fa00 f404 	lsl.w	r4, r0, r4
 8009b56:	0052      	lsls	r2, r2, #1
 8009b58:	ea25 0404 	bic.w	r4, r5, r4
 8009b5c:	2501      	movs	r5, #1
 8009b5e:	fa05 f202 	lsl.w	r2, r5, r2
 8009b62:	4322      	orrs	r2, r4
 8009b64:	60da      	str	r2, [r3, #12]
 8009b66:	2240      	movs	r2, #64	@ 0x40
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009b68:	f8d3 8000 	ldr.w	r8, [r3]
 8009b6c:	fa92 fea2 	rbit	lr, r2
 8009b70:	fabe fe8e 	clz	lr, lr
 8009b74:	fa92 f4a2 	rbit	r4, r2
 8009b78:	fa0e fe05 	lsl.w	lr, lr, r5
 8009b7c:	fab4 f484 	clz	r4, r4
 8009b80:	fa00 fe0e 	lsl.w	lr, r0, lr
 8009b84:	40ac      	lsls	r4, r5
 8009b86:	ea28 080e 	bic.w	r8, r8, lr
 8009b8a:	fa06 f404 	lsl.w	r4, r6, r4
 8009b8e:	ea48 0404 	orr.w	r4, r8, r4
 8009b92:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8009b94:	6a1c      	ldr	r4, [r3, #32]
 8009b96:	fa92 f8a2 	rbit	r8, r2
 8009b9a:	fab8 f888 	clz	r8, r8
 8009b9e:	fa92 fea2 	rbit	lr, r2
 8009ba2:	fa08 f806 	lsl.w	r8, r8, r6
 8009ba6:	fabe fe8e 	clz	lr, lr
 8009baa:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bae:	ea24 0c0c 	bic.w	ip, r4, ip
 8009bb2:	fa0e f406 	lsl.w	r4, lr, r6
 8009bb6:	40a7      	lsls	r7, r4
 8009bb8:	ea4c 0707 	orr.w	r7, ip, r7
 8009bbc:	621f      	str	r7, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009bbe:	689f      	ldr	r7, [r3, #8]
 8009bc0:	fa92 f4a2 	rbit	r4, r2
 8009bc4:	fab4 f484 	clz	r4, r4
 8009bc8:	fa92 fca2 	rbit	ip, r2
 8009bcc:	40ac      	lsls	r4, r5
 8009bce:	fabc fc8c 	clz	ip, ip
 8009bd2:	fa00 f404 	lsl.w	r4, r0, r4
 8009bd6:	ea27 0404 	bic.w	r4, r7, r4
 8009bda:	fa0c f705 	lsl.w	r7, ip, r5
 8009bde:	40be      	lsls	r6, r7
 8009be0:	4334      	orrs	r4, r6
 8009be2:	609c      	str	r4, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009be4:	685c      	ldr	r4, [r3, #4]
 8009be6:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 8009bea:	605c      	str	r4, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009bec:	68dc      	ldr	r4, [r3, #12]
 8009bee:	fa92 f6a2 	rbit	r6, r2
 8009bf2:	fab6 f686 	clz	r6, r6
 8009bf6:	fa92 f2a2 	rbit	r2, r2
 8009bfa:	40ae      	lsls	r6, r5
 8009bfc:	fab2 f282 	clz	r2, r2
 8009c00:	40b0      	lsls	r0, r6
 8009c02:	40aa      	lsls	r2, r5
 8009c04:	ea24 0000 	bic.w	r0, r4, r0
 8009c08:	4095      	lsls	r5, r2
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8009c0e:	4305      	orrs	r5, r0
 8009c10:	60dd      	str	r5, [r3, #12]
  SET_BIT(RCC->APB1ENR, Periphs);
 8009c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c18:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c20:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8009c22:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8009c24:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8009c28:	f023 030c 	bic.w	r3, r3, #12
 8009c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009c30:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8009c34:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8009c38:	f043 030c 	orr.w	r3, r3, #12
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8009c40:	e840 3100 	strex	r1, r3, [r0]
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d1f3      	bne.n	8009c30 <MX_USART2_UART_Init+0x194>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8009c48:	4c1c      	ldr	r4, [pc, #112]	@ (8009cbc <MX_USART2_UART_Init+0x220>)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009c4a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  NVIC_EnableIRQ(USART2_IRQn);

  TxState = USART_STATE_READY;
  RxState = USART_STATE_READY;
  /* transfer Tx buffer to PC application */
  Usart_Transmit(USART2, (const uint8_t *)("STM32F7xx USART initial ...\r\n"), 29, 0x1ff);
 8009c4e:	491c      	ldr	r1, [pc, #112]	@ (8009cc0 <MX_USART2_UART_Init+0x224>)
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	4620      	mov	r0, r4
 8009c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c58:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009c5c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009c64:	6063      	str	r3, [r4, #4]
  LL_USART_SetBaudRate(USART2, SystemCoreClock/4, LL_USART_OVERSAMPLING_16, 115200);
 8009c66:	4b17      	ldr	r3, [pc, #92]	@ (8009cc4 <MX_USART2_UART_Init+0x228>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	089b      	lsrs	r3, r3, #2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009c6c:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8009c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c74:	60e3      	str	r3, [r4, #12]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c76:	2280      	movs	r2, #128	@ 0x80
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	4b11      	ldr	r3, [pc, #68]	@ (8009cc8 <MX_USART2_UART_Init+0x22c>)
 8009c82:	f883 2326 	strb.w	r2, [r3, #806]	@ 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c86:	2240      	movs	r2, #64	@ 0x40
 8009c88:	605a      	str	r2, [r3, #4]
  TxState = USART_STATE_READY;
 8009c8a:	2320      	movs	r3, #32
 8009c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8009ccc <MX_USART2_UART_Init+0x230>)
 8009c8e:	6013      	str	r3, [r2, #0]
  RxState = USART_STATE_READY;
 8009c90:	4a0f      	ldr	r2, [pc, #60]	@ (8009cd0 <MX_USART2_UART_Init+0x234>)
 8009c92:	6013      	str	r3, [r2, #0]
  Usart_Transmit(USART2, (const uint8_t *)("STM32F7xx USART initial ...\r\n"), 29, 0x1ff);
 8009c94:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8009c98:	221d      	movs	r2, #29
 8009c9a:	f7ff fe99 	bl	80099d0 <Usart_Transmit>
  Usart_Transmit(USART2, (const uint8_t *)aTxBuffer, sizeof(aTxBuffer), 0x1ff);
 8009c9e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8009ca2:	2288      	movs	r2, #136	@ 0x88
 8009ca4:	490b      	ldr	r1, [pc, #44]	@ (8009cd4 <MX_USART2_UART_Init+0x238>)
 8009ca6:	4620      	mov	r0, r4
}
 8009ca8:	b002      	add	sp, #8
 8009caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Usart_Transmit(USART2, (const uint8_t *)aTxBuffer, sizeof(aTxBuffer), 0x1ff);
 8009cae:	f7ff be8f 	b.w	80099d0 <Usart_Transmit>
 8009cb2:	bf00      	nop
 8009cb4:	40023800 	.word	0x40023800
 8009cb8:	40020c00 	.word	0x40020c00
 8009cbc:	40004400 	.word	0x40004400
 8009cc0:	08015d9a 	.word	0x08015d9a
 8009cc4:	20000014 	.word	0x20000014
 8009cc8:	e000e100 	.word	0xe000e100
 8009ccc:	2000b3dc 	.word	0x2000b3dc
 8009cd0:	2000b3d8 	.word	0x2000b3d8
 8009cd4:	0808e3ec 	.word	0x0808e3ec

08009cd8 <Usart_Receive>:

  return 0;
}

uint8_t Usart_Receive(USART_TypeDef *pUSARTx, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t ubReceive = 0;
  uint16_t ubNbDataToReceive = 0;
  uint32_t tmpTimeout;

  /* Check that a Rx process is not already ongoing */
  if(RxState == USART_STATE_READY)
 8009cdc:	4f37      	ldr	r7, [pc, #220]	@ (8009dbc <Usart_Receive+0xe4>)
 8009cde:	683c      	ldr	r4, [r7, #0]
 8009ce0:	2c20      	cmp	r4, #32
 8009ce2:	d169      	bne.n	8009db8 <Usart_Receive+0xe0>
  {
    if((pData == NULL) || (Size == 0U))
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d051      	beq.n	8009d8c <Usart_Receive+0xb4>
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d04f      	beq.n	8009d8c <Usart_Receive+0xb4>
    {
      return  USART_ERROR;
    }

    RxState = USART_STATE_BUSY_RX;
 8009cec:	2422      	movs	r4, #34	@ 0x22
 8009cee:	603c      	str	r4, [r7, #0]
    ubNbDataToReceive = Size;
    /* Computation of UART mask to apply to RDR register */
    //UART_MASK_COMPUTATION(huart);
    if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_M1))) //UART_WORDLENGTH_9B
 8009cf0:	6804      	ldr	r4, [r0, #0]
 8009cf2:	04e5      	lsls	r5, r4, #19
 8009cf4:	d52e      	bpl.n	8009d54 <Usart_Receive+0x7c>
 8009cf6:	6804      	ldr	r4, [r0, #0]
 8009cf8:	00e4      	lsls	r4, r4, #3
 8009cfa:	d42b      	bmi.n	8009d54 <Usart_Receive+0x7c>
    {
      if(!(pUSARTx->CR1 & USART_CR1_PCE))//Parity control enable (奇偶校验未使能)
 8009cfc:	6804      	ldr	r4, [r0, #0]
        uhMask = 0x01FFU;
      else
        uhMask = 0x00FFU;
 8009cfe:	f240 16ff 	movw	r6, #511	@ 0x1ff
 8009d02:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8009d06:	bf18      	it	ne
 8009d08:	26ff      	movne	r6, #255	@ 0xff
      RxState = USART_OK;
      return  USART_ERROR;
    }

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE))) //UART_WORDLENGTH_9B and Parity control enable (奇偶校验使能)
 8009d0a:	6804      	ldr	r4, [r0, #0]
 8009d0c:	f414 5480 	ands.w	r4, r4, #4096	@ 0x1000
 8009d10:	d006      	beq.n	8009d20 <Usart_Receive+0x48>
 8009d12:	6805      	ldr	r5, [r0, #0]
 8009d14:	f415 6580 	ands.w	r5, r5, #1024	@ 0x400
    {
      pdata8bits  = NULL;
      pdata16bits = (uint16_t *) pData;
 8009d18:	bf0a      	itet	eq
 8009d1a:	460c      	moveq	r4, r1
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8009d1c:	2400      	movne	r4, #0
      pdata8bits  = NULL;
 8009d1e:	4629      	moveq	r1, r5
      pdata16bits = NULL;
 8009d20:	2500      	movs	r5, #0
 8009d22:	f04f 2ee0 	mov.w	lr, #3758153728	@ 0xe000e000
    }

    /* as long as data have to be received */
    while(ubReceive < ubNbDataToReceive) // while (ubSend < sizeof(aTxBuffer_init))
    {
      tmpTimeout = Timeout; //mS
 8009d26:	469c      	mov	ip, r3
      /* Wait for TXE flag to be raised */
      while(!(pUSARTx->ISR & USART_ISR_RXNE))
 8009d28:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8009d2c:	f018 0f20 	tst.w	r8, #32
 8009d30:	d02f      	beq.n	8009d92 <Usart_Receive+0xba>
        }
      }

      if(pdata8bits == NULL)
      {
        *pdata16bits = (uint16_t)(pUSARTx->RDR & uhMask);
 8009d32:	f8d0 c024 	ldr.w	ip, [r0, #36]	@ 0x24
 8009d36:	ea06 0c0c 	and.w	ip, r6, ip
      if(pdata8bits == NULL)
 8009d3a:	2900      	cmp	r1, #0
 8009d3c:	d139      	bne.n	8009db2 <Usart_Receive+0xda>
        *pdata16bits = (uint16_t)(pUSARTx->RDR & uhMask);
 8009d3e:	f824 cb02 	strh.w	ip, [r4], #2
    while(ubReceive < ubNbDataToReceive) // while (ubSend < sizeof(aTxBuffer_init))
 8009d42:	3501      	adds	r5, #1
 8009d44:	fa1f fc85 	uxth.w	ip, r5
 8009d48:	4562      	cmp	r2, ip
 8009d4a:	d8ec      	bhi.n	8009d26 <Usart_Receive+0x4e>
      }
      ubReceive++;
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    RxState = USART_STATE_READY;
 8009d4c:	2320      	movs	r3, #32
    return USART_OK;
 8009d4e:	2000      	movs	r0, #0
    RxState = USART_STATE_READY;
 8009d50:	603b      	str	r3, [r7, #0]
    return USART_OK;
 8009d52:	e01c      	b.n	8009d8e <Usart_Receive+0xb6>
    else if((!(pUSARTx->CR1 & USART_CR1_M0))&&(!(pUSARTx->CR1 & USART_CR1_M1))) //UART_WORDLENGTH_8B
 8009d54:	6804      	ldr	r4, [r0, #0]
 8009d56:	04e5      	lsls	r5, r4, #19
 8009d58:	d409      	bmi.n	8009d6e <Usart_Receive+0x96>
 8009d5a:	6804      	ldr	r4, [r0, #0]
 8009d5c:	00e4      	lsls	r4, r4, #3
 8009d5e:	d406      	bmi.n	8009d6e <Usart_Receive+0x96>
      if(!(pUSARTx->CR1 & USART_CR1_PCE))//Parity control enable (奇偶校验未使能)
 8009d60:	6804      	ldr	r4, [r0, #0]
        uhMask = 0x007FU;
 8009d62:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8009d66:	bf0c      	ite	eq
 8009d68:	26ff      	moveq	r6, #255	@ 0xff
 8009d6a:	267f      	movne	r6, #127	@ 0x7f
 8009d6c:	e7cd      	b.n	8009d0a <Usart_Receive+0x32>
    else if((!(pUSARTx->CR1 & USART_CR1_M0))&&(pUSARTx->CR1 & USART_CR1_M1)) //UART_WORDLENGTH_7B
 8009d6e:	6804      	ldr	r4, [r0, #0]
 8009d70:	04e5      	lsls	r5, r4, #19
 8009d72:	d409      	bmi.n	8009d88 <Usart_Receive+0xb0>
 8009d74:	6804      	ldr	r4, [r0, #0]
 8009d76:	00e4      	lsls	r4, r4, #3
 8009d78:	d506      	bpl.n	8009d88 <Usart_Receive+0xb0>
      if(!(pUSARTx->CR1 & USART_CR1_PCE))//Parity control enable (奇偶校验未使能)
 8009d7a:	6804      	ldr	r4, [r0, #0]
        uhMask = 0x003FU;
 8009d7c:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8009d80:	bf0c      	ite	eq
 8009d82:	267f      	moveq	r6, #127	@ 0x7f
 8009d84:	263f      	movne	r6, #63	@ 0x3f
 8009d86:	e7c0      	b.n	8009d0a <Usart_Receive+0x32>
      RxState = USART_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	603b      	str	r3, [r7, #0]
      return  USART_ERROR;
 8009d8c:	2001      	movs	r0, #1
  }
  else
  {
    return USART_BUSY;
  }
}
 8009d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d92:	f8de 8010 	ldr.w	r8, [lr, #16]
        if(LL_SYSTICK_IsActiveCounterFlag()) /* USE_TIMEOUT */
 8009d96:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 8009d9a:	d0c5      	beq.n	8009d28 <Usart_Receive+0x50>
          if(tmpTimeout-- == 0)
 8009d9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8009da0:	f1bc 0f00 	cmp.w	ip, #0
 8009da4:	d103      	bne.n	8009dae <Usart_Receive+0xd6>
            RxState = USART_STATE_READY;
 8009da6:	2320      	movs	r3, #32
            return USART_TIMEOUT;
 8009da8:	2003      	movs	r0, #3
            RxState = USART_STATE_READY;
 8009daa:	603b      	str	r3, [r7, #0]
            return USART_TIMEOUT;
 8009dac:	e7ef      	b.n	8009d8e <Usart_Receive+0xb6>
          if(tmpTimeout-- == 0)
 8009dae:	46c4      	mov	ip, r8
 8009db0:	e7ba      	b.n	8009d28 <Usart_Receive+0x50>
        *pdata8bits = (uint8_t)(pUSARTx->RDR & (uint8_t)uhMask);
 8009db2:	f801 cb01 	strb.w	ip, [r1], #1
        pdata8bits++;
 8009db6:	e7c4      	b.n	8009d42 <Usart_Receive+0x6a>
    return USART_BUSY;
 8009db8:	2002      	movs	r0, #2
 8009dba:	e7e8      	b.n	8009d8e <Usart_Receive+0xb6>
 8009dbc:	2000b3d8 	.word	0x2000b3d8

08009dc0 <Usart_Start_Receive_IT>:

uint8_t Usart_Start_Receive_IT(USART_TypeDef *pUSARTx, uint8_t *pData, uint16_t Size)
{
  uint16_t uhMask;

  pRxData = pData;
 8009dc0:	4b23      	ldr	r3, [pc, #140]	@ (8009e50 <Usart_Start_Receive_IT+0x90>)
 8009dc2:	6019      	str	r1, [r3, #0]
  RxSize = Size;
  usart_rx_buff_tail = 0;
  RxState = USART_STATE_BUSY_RX;
 8009dc4:	2122      	movs	r1, #34	@ 0x22
  RxSize = Size;
 8009dc6:	4b23      	ldr	r3, [pc, #140]	@ (8009e54 <Usart_Start_Receive_IT+0x94>)
 8009dc8:	801a      	strh	r2, [r3, #0]
  usart_rx_buff_tail = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	4a22      	ldr	r2, [pc, #136]	@ (8009e58 <Usart_Start_Receive_IT+0x98>)
 8009dce:	6013      	str	r3, [r2, #0]
  RxState = USART_STATE_BUSY_RX;
 8009dd0:	4a22      	ldr	r2, [pc, #136]	@ (8009e5c <Usart_Start_Receive_IT+0x9c>)
 8009dd2:	6011      	str	r1, [r2, #0]
  rx_it_flag = 0;
 8009dd4:	4a22      	ldr	r2, [pc, #136]	@ (8009e60 <Usart_Start_Receive_IT+0xa0>)
 8009dd6:	7013      	strb	r3, [r2, #0]

  /* Computation of UART mask to apply to RDR register */
  //UART_MASK_COMPUTATION(huart);
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_M1))) //UART_WORDLENGTH_9B
 8009dd8:	6803      	ldr	r3, [r0, #0]
 8009dda:	04da      	lsls	r2, r3, #19
 8009ddc:	d51b      	bpl.n	8009e16 <Usart_Start_Receive_IT+0x56>
 8009dde:	6803      	ldr	r3, [r0, #0]
 8009de0:	00db      	lsls	r3, r3, #3
 8009de2:	d418      	bmi.n	8009e16 <Usart_Start_Receive_IT+0x56>
  {
    if(!(pUSARTx->CR1 & USART_CR1_PCE))//Parity control enable (奇偶校验未使能)
 8009de4:	6803      	ldr	r3, [r0, #0]
      uhMask = 0x01FFU;
    else
      uhMask = 0x00FFU;
 8009de6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009dea:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8009dee:	bf18      	it	ne
 8009df0:	23ff      	movne	r3, #255	@ 0xff
  else
  {
    uhMask = 0x0000U;
  }

  RxMask = uhMask;
 8009df2:	4a1c      	ldr	r2, [pc, #112]	@ (8009e64 <Usart_Start_Receive_IT+0xa4>)
 8009df4:	8013      	strh	r3, [r2, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  pUSARTx->CR3 |= USART_CR3_EIE;
 8009df6:	6883      	ldr	r3, [r0, #8]
 8009df8:	f043 0301 	orr.w	r3, r3, #1
 8009dfc:	6083      	str	r3, [r0, #8]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if(pUSARTx->CR1 & USART_CR1_PCE)
 8009dfe:	6803      	ldr	r3, [r0, #0]
 8009e00:	f413 6f80 	tst.w	r3, #1024	@ 0x400
  {
    pUSARTx->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 8009e04:	6803      	ldr	r3, [r0, #0]
 8009e06:	bf14      	ite	ne
 8009e08:	f443 7390 	orrne.w	r3, r3, #288	@ 0x120
  }
  else
  {
    pUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009e0c:	f043 0320 	orreq.w	r3, r3, #32
 8009e10:	6003      	str	r3, [r0, #0]
  }

  return USART_OK;
}
 8009e12:	2000      	movs	r0, #0
 8009e14:	4770      	bx	lr
  else if((!(pUSARTx->CR1 & USART_CR1_M0))&&(!(pUSARTx->CR1 & USART_CR1_M1))) //UART_WORDLENGTH_8B
 8009e16:	6803      	ldr	r3, [r0, #0]
 8009e18:	04d9      	lsls	r1, r3, #19
 8009e1a:	d409      	bmi.n	8009e30 <Usart_Start_Receive_IT+0x70>
 8009e1c:	6803      	ldr	r3, [r0, #0]
 8009e1e:	00da      	lsls	r2, r3, #3
 8009e20:	d406      	bmi.n	8009e30 <Usart_Start_Receive_IT+0x70>
    if(!(pUSARTx->CR1 & USART_CR1_PCE))//Parity control enable (奇偶校验未使能)
 8009e22:	6803      	ldr	r3, [r0, #0]
      uhMask = 0x007FU;
 8009e24:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009e28:	bf0c      	ite	eq
 8009e2a:	23ff      	moveq	r3, #255	@ 0xff
 8009e2c:	237f      	movne	r3, #127	@ 0x7f
 8009e2e:	e7e0      	b.n	8009df2 <Usart_Start_Receive_IT+0x32>
  else if((!(pUSARTx->CR1 & USART_CR1_M0))&&(pUSARTx->CR1 & USART_CR1_M1)) //UART_WORDLENGTH_7B
 8009e30:	6803      	ldr	r3, [r0, #0]
 8009e32:	04db      	lsls	r3, r3, #19
 8009e34:	d40a      	bmi.n	8009e4c <Usart_Start_Receive_IT+0x8c>
 8009e36:	6803      	ldr	r3, [r0, #0]
 8009e38:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8009e3c:	d0d9      	beq.n	8009df2 <Usart_Start_Receive_IT+0x32>
    if(!(pUSARTx->CR1 & USART_CR1_PCE))//Parity control enable (奇偶校验未使能)
 8009e3e:	6803      	ldr	r3, [r0, #0]
      uhMask = 0x003FU;
 8009e40:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009e44:	bf0c      	ite	eq
 8009e46:	237f      	moveq	r3, #127	@ 0x7f
 8009e48:	233f      	movne	r3, #63	@ 0x3f
 8009e4a:	e7d2      	b.n	8009df2 <Usart_Start_Receive_IT+0x32>
    uhMask = 0x0000U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e7d0      	b.n	8009df2 <Usart_Start_Receive_IT+0x32>
 8009e50:	2000b3d0 	.word	0x2000b3d0
 8009e54:	2000b3ce 	.word	0x2000b3ce
 8009e58:	2000b3c8 	.word	0x2000b3c8
 8009e5c:	2000b3d8 	.word	0x2000b3d8
 8009e60:	2000b3c4 	.word	0x2000b3c4
 8009e64:	2000b3cc 	.word	0x2000b3cc

08009e68 <Usart_Receive_IT>:
  if (RxState == USART_STATE_READY)
 8009e68:	4b09      	ldr	r3, [pc, #36]	@ (8009e90 <Usart_Receive_IT+0x28>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d10a      	bne.n	8009e86 <Usart_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8009e70:	b159      	cbz	r1, 8009e8a <Usart_Receive_IT+0x22>
 8009e72:	b152      	cbz	r2, 8009e8a <Usart_Receive_IT+0x22>
    if((pUSARTx->CR2 & USART_CR2_RTOEN) != 0U)
 8009e74:	6843      	ldr	r3, [r0, #4]
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	d503      	bpl.n	8009e82 <Usart_Receive_IT+0x1a>
      pUSARTx->CR1 |= USART_CR1_RTOIE;
 8009e7a:	6803      	ldr	r3, [r0, #0]
 8009e7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e80:	6003      	str	r3, [r0, #0]
    return (Usart_Start_Receive_IT(pUSARTx, pData, Size));
 8009e82:	f7ff bf9d 	b.w	8009dc0 <Usart_Start_Receive_IT>
    return USART_BUSY;
 8009e86:	2002      	movs	r0, #2
 8009e88:	4770      	bx	lr
      return USART_ERROR;
 8009e8a:	2001      	movs	r0, #1
}
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	2000b3d8 	.word	0x2000b3d8

08009e94 <USART_RxFinishCallback>:
}

void USART_RxFinishCallback(int value, USART_RxCpltCallback callback)  //需要回调的函数
{
  //UNUSED(value);
  callback(value);
 8009e94:	4708      	bx	r1
	...

08009e98 <Usart_Receive_IT_Get_Flag>:
}

uint8_t Usart_Receive_IT_Get_Flag(void)
{
  return rx_it_flag;
}
 8009e98:	4b01      	ldr	r3, [pc, #4]	@ (8009ea0 <Usart_Receive_IT_Get_Flag+0x8>)
 8009e9a:	7818      	ldrb	r0, [r3, #0]
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	2000b3c4 	.word	0x2000b3c4

08009ea4 <USART_IRQHandler>:

void USART_IRQHandler(USART_TypeDef *pUSARTx)
{
  uint32_t isrflags   = pUSARTx->ISR;
 8009ea4:	69c2      	ldr	r2, [r0, #28]

  uint32_t errorflags = 0;
  uint32_t errorcode = 0;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ea6:	f640 030f 	movw	r3, #2063	@ 0x80f
  uint32_t cr1its     = pUSARTx->CR1;
 8009eaa:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009eac:	4013      	ands	r3, r2
{
 8009eae:	b470      	push	{r4, r5, r6}

  /* UART in mode Receiver ---------------------------------------------------*/
  if(((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009eb0:	0696      	lsls	r6, r2, #26
  uint32_t cr3its     = pUSARTx->CR3;
 8009eb2:	6885      	ldr	r5, [r0, #8]
  if(((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009eb4:	d549      	bpl.n	8009f4a <USART_IRQHandler+0xa6>
 8009eb6:	068c      	lsls	r4, r1, #26
 8009eb8:	d547      	bpl.n	8009f4a <USART_IRQHandler+0xa6>
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE)))
 8009eba:	6803      	ldr	r3, [r0, #0]
    pdata16bits = (uint16_t *) pRxData;
 8009ebc:	4a5b      	ldr	r2, [pc, #364]	@ (800a02c <USART_IRQHandler+0x188>)
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE)))
 8009ebe:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8009ec2:	4b5b      	ldr	r3, [pc, #364]	@ (800a030 <USART_IRQHandler+0x18c>)
    pdata16bits = (uint16_t *) pRxData;
 8009ec4:	6814      	ldr	r4, [r2, #0]
    *(pdata16bits + usart_rx_buff_tail) = (uint16_t)(pUSARTx->RDR & RxMask);
 8009ec6:	4a5b      	ldr	r2, [pc, #364]	@ (800a034 <USART_IRQHandler+0x190>)
 8009ec8:	8812      	ldrh	r2, [r2, #0]
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE)))
 8009eca:	d034      	beq.n	8009f36 <USART_IRQHandler+0x92>
 8009ecc:	6801      	ldr	r1, [r0, #0]
 8009ece:	0549      	lsls	r1, r1, #21
 8009ed0:	d431      	bmi.n	8009f36 <USART_IRQHandler+0x92>
    *(pdata16bits + usart_rx_buff_tail) = (uint16_t)(pUSARTx->RDR & RxMask);
 8009ed2:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8009ed4:	6819      	ldr	r1, [r3, #0]
 8009ed6:	402a      	ands	r2, r5
 8009ed8:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
    usart_rx_buff_tail += 2U;
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	3202      	adds	r2, #2
 8009ee0:	601a      	str	r2, [r3, #0]
    ubReceive = usart_rx_buff_tail/2;
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if(ubReceive == RxSize)
 8009ee8:	4a53      	ldr	r2, [pc, #332]	@ (800a038 <USART_IRQHandler+0x194>)
 8009eea:	8812      	ldrh	r2, [r2, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	f040 8098 	bne.w	800a022 <USART_IRQHandler+0x17e>
    pUSARTx->CR1 &= ~(USART_CR1_RXNEIE | USART_CR1_PEIE);
 8009ef2:	6803      	ldr	r3, [r0, #0]
    RxState = USART_STATE_READY;
 8009ef4:	2220      	movs	r2, #32
    pUSARTx->CR1 &= ~(USART_CR1_RXNEIE | USART_CR1_PEIE);
 8009ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009efa:	6003      	str	r3, [r0, #0]
    pUSARTx->CR3 &= ~USART_CR3_EIE;
 8009efc:	6883      	ldr	r3, [r0, #8]
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	6083      	str	r3, [r0, #8]
    RxState = USART_STATE_READY;
 8009f04:	4b4d      	ldr	r3, [pc, #308]	@ (800a03c <USART_IRQHandler+0x198>)
 8009f06:	601a      	str	r2, [r3, #0]
    if((pUSARTx->CR2 & USART_CR2_RTOEN) != 0U)
 8009f08:	6843      	ldr	r3, [r0, #4]
 8009f0a:	021a      	lsls	r2, r3, #8
 8009f0c:	d503      	bpl.n	8009f16 <USART_IRQHandler+0x72>
      pUSARTx->CR1 &= ~USART_CR1_RTOIE;
 8009f0e:	6803      	ldr	r3, [r0, #0]
 8009f10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f14:	6003      	str	r3, [r0, #0]
    pUSARTx->CR1 &= ~USART_CR1_IDLEIE;
 8009f16:	6803      	ldr	r3, [r0, #0]
 8009f18:	f023 0310 	bic.w	r3, r3, #16
 8009f1c:	6003      	str	r3, [r0, #0]
    if(pUSARTx->ISR & USART_ISR_IDLE)
 8009f1e:	69c3      	ldr	r3, [r0, #28]
 8009f20:	06db      	lsls	r3, r3, #27
 8009f22:	d501      	bpl.n	8009f28 <USART_IRQHandler+0x84>
      pUSARTx->ICR = USART_ICR_IDLECF;
 8009f24:	2310      	movs	r3, #16
 8009f26:	6203      	str	r3, [r0, #32]
    rx_it_flag = 1;
 8009f28:	2001      	movs	r0, #1
 8009f2a:	4b45      	ldr	r3, [pc, #276]	@ (800a040 <USART_IRQHandler+0x19c>)
    USART_RxFinishCallback(1, USART_RxFinish);
 8009f2c:	4945      	ldr	r1, [pc, #276]	@ (800a044 <USART_IRQHandler+0x1a0>)
    rx_it_flag = 1;
 8009f2e:	7018      	strb	r0, [r3, #0]

    /*Call legacy weak Tx complete callback*/
    //HAL_UART_TxCpltCallback(huart);
  }

}
 8009f30:	bc70      	pop	{r4, r5, r6}
    USART_RxFinishCallback(1, USART_RxFinish);
 8009f32:	f7ff bfaf 	b.w	8009e94 <USART_RxFinishCallback>
    *(pdata8bits + usart_rx_buff_tail) = (uint8_t)(pUSARTx->RDR & (uint8_t)RxMask);
 8009f36:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8009f38:	681d      	ldr	r5, [r3, #0]
 8009f3a:	400a      	ands	r2, r1
 8009f3c:	5562      	strb	r2, [r4, r5]
    usart_rx_buff_tail++;
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	3201      	adds	r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
    ubReceive = usart_rx_buff_tail;
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	e7ce      	b.n	8009ee8 <USART_IRQHandler+0x44>
  if((errorflags != 0U) && (((cr3its & USART_CR3_EIE) != 0U)||((cr1its & (USART_CR1_RXNEIE|USART_CR1_PEIE|USART_CR1_RTOIE)) != 0U)))
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d04e      	beq.n	8009fec <USART_IRQHandler+0x148>
 8009f4e:	4b3e      	ldr	r3, [pc, #248]	@ (800a048 <USART_IRQHandler+0x1a4>)
 8009f50:	f005 0401 	and.w	r4, r5, #1
 8009f54:	400b      	ands	r3, r1
 8009f56:	4323      	orrs	r3, r4
 8009f58:	d048      	beq.n	8009fec <USART_IRQHandler+0x148>
    if(((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f5a:	f012 0301 	ands.w	r3, r2, #1
 8009f5e:	d004      	beq.n	8009f6a <USART_IRQHandler+0xc6>
 8009f60:	f411 7680 	ands.w	r6, r1, #256	@ 0x100
 8009f64:	d03e      	beq.n	8009fe4 <USART_IRQHandler+0x140>
      pUSARTx->ICR = USART_ICR_PECF;
 8009f66:	2601      	movs	r6, #1
 8009f68:	6206      	str	r6, [r0, #32]
    if(((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f6a:	0796      	lsls	r6, r2, #30
 8009f6c:	d503      	bpl.n	8009f76 <USART_IRQHandler+0xd2>
 8009f6e:	b114      	cbz	r4, 8009f76 <USART_IRQHandler+0xd2>
      pUSARTx->ICR = USART_ICR_FECF;
 8009f70:	2602      	movs	r6, #2
      errorcode |= USART_ICR_FECF;
 8009f72:	4333      	orrs	r3, r6
      pUSARTx->ICR = USART_ICR_FECF;
 8009f74:	6206      	str	r6, [r0, #32]
    if(((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f76:	0756      	lsls	r6, r2, #29
 8009f78:	d503      	bpl.n	8009f82 <USART_IRQHandler+0xde>
 8009f7a:	b114      	cbz	r4, 8009f82 <USART_IRQHandler+0xde>
      pUSARTx->ICR = USART_ICR_NCF;
 8009f7c:	2604      	movs	r6, #4
      errorcode |= USART_ICR_NCF;
 8009f7e:	4333      	orrs	r3, r6
      pUSARTx->ICR = USART_ICR_NCF;
 8009f80:	6206      	str	r6, [r0, #32]
    if(((isrflags & USART_ISR_ORE) != 0U) && (((cr1its & USART_CR1_RXNEIE) != 0U)||((cr3its & USART_CR3_EIE) != 0U)))
 8009f82:	0716      	lsls	r6, r2, #28
 8009f84:	d506      	bpl.n	8009f94 <USART_IRQHandler+0xf0>
 8009f86:	f001 0620 	and.w	r6, r1, #32
 8009f8a:	4326      	orrs	r6, r4
 8009f8c:	d002      	beq.n	8009f94 <USART_IRQHandler+0xf0>
      pUSARTx->ICR = USART_ICR_ORECF;
 8009f8e:	2408      	movs	r4, #8
      errorcode |= USART_ICR_ORECF;
 8009f90:	4323      	orrs	r3, r4
      pUSARTx->ICR = USART_ICR_ORECF;
 8009f92:	6204      	str	r4, [r0, #32]
    if(((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f94:	0516      	lsls	r6, r2, #20
 8009f96:	d527      	bpl.n	8009fe8 <USART_IRQHandler+0x144>
 8009f98:	014c      	lsls	r4, r1, #5
 8009f9a:	d525      	bpl.n	8009fe8 <USART_IRQHandler+0x144>
      pUSARTx->ICR = USART_ICR_RTOCF;
 8009f9c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
      errorcode |= USART_ICR_RTOCF;
 8009fa0:	4323      	orrs	r3, r4
      pUSARTx->ICR = USART_ICR_RTOCF;
 8009fa2:	6204      	str	r4, [r0, #32]
      ErrorCode = errorcode;
 8009fa4:	4e29      	ldr	r6, [pc, #164]	@ (800a04c <USART_IRQHandler+0x1a8>)
      if((pUSARTx->CR3 & USART_CR3_DMAR) || ((errorcode & (USART_ISR_RTOF | USART_ICR_ORECF)) != 0U))
 8009fa6:	6884      	ldr	r4, [r0, #8]
      ErrorCode = errorcode;
 8009fa8:	6033      	str	r3, [r6, #0]
      if((pUSARTx->CR3 & USART_CR3_DMAR) || ((errorcode & (USART_ISR_RTOF | USART_ICR_ORECF)) != 0U))
 8009faa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009fae:	f004 0440 	and.w	r4, r4, #64	@ 0x40
 8009fb2:	f023 0307 	bic.w	r3, r3, #7
 8009fb6:	051b      	lsls	r3, r3, #20
 8009fb8:	0d1b      	lsrs	r3, r3, #20
 8009fba:	431c      	orrs	r4, r3
 8009fbc:	d033      	beq.n	800a026 <USART_IRQHandler+0x182>
    	pUSARTx->CR1 &= ~(USART_CR1_IDLEIE | USART_CR1_RXNEIE | USART_CR1_PEIE);
 8009fbe:	6803      	ldr	r3, [r0, #0]
    	RxState = USART_STATE_READY;
 8009fc0:	2420      	movs	r4, #32
    	pUSARTx->CR1 &= ~(USART_CR1_IDLEIE | USART_CR1_RXNEIE | USART_CR1_PEIE);
 8009fc2:	f423 7398 	bic.w	r3, r3, #304	@ 0x130
 8009fc6:	6003      	str	r3, [r0, #0]
    	pUSARTx->CR3 &= ~USART_CR3_EIE;
 8009fc8:	6883      	ldr	r3, [r0, #8]
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	6083      	str	r3, [r0, #8]
    	RxState = USART_STATE_READY;
 8009fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800a03c <USART_IRQHandler+0x198>)
 8009fd2:	601c      	str	r4, [r3, #0]
        if(pUSARTx->CR3 & USART_CR3_DMAR)
 8009fd4:	6883      	ldr	r3, [r0, #8]
 8009fd6:	065b      	lsls	r3, r3, #25
 8009fd8:	d508      	bpl.n	8009fec <USART_IRQHandler+0x148>
          pUSARTx->CR3 &= ~USART_CR3_DMAR;
 8009fda:	6883      	ldr	r3, [r0, #8]
 8009fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fe0:	6083      	str	r3, [r0, #8]
 8009fe2:	e003      	b.n	8009fec <USART_IRQHandler+0x148>
  uint32_t errorcode = 0;
 8009fe4:	4633      	mov	r3, r6
 8009fe6:	e7c0      	b.n	8009f6a <USART_IRQHandler+0xc6>
    if(errorcode != 0)
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1db      	bne.n	8009fa4 <USART_IRQHandler+0x100>
  if(((isrflags & USART_ISR_IDLE) != 0U) && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fec:	06d6      	lsls	r6, r2, #27
 8009fee:	d504      	bpl.n	8009ffa <USART_IRQHandler+0x156>
 8009ff0:	06cc      	lsls	r4, r1, #27
 8009ff2:	d502      	bpl.n	8009ffa <USART_IRQHandler+0x156>
    pUSARTx->ICR = USART_ICR_IDLECF; //LL_USART_ClearFlag_IDLE(pUSARTx);
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	6203      	str	r3, [r0, #32]
    if(pUSARTx->CR3 & USART_CR3_DMAR)
 8009ff8:	6883      	ldr	r3, [r0, #8]
  if(((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ffa:	02d3      	lsls	r3, r2, #11
 8009ffc:	d504      	bpl.n	800a008 <USART_IRQHandler+0x164>
 8009ffe:	026e      	lsls	r6, r5, #9
 800a000:	d502      	bpl.n	800a008 <USART_IRQHandler+0x164>
    pUSARTx->ICR = USART_ICR_WUCF;
 800a002:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a006:	6203      	str	r3, [r0, #32]
  if(((isrflags & USART_ISR_TXE) != 0U) && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a008:	0615      	lsls	r5, r2, #24
 800a00a:	d501      	bpl.n	800a010 <USART_IRQHandler+0x16c>
 800a00c:	060c      	lsls	r4, r1, #24
 800a00e:	d408      	bmi.n	800a022 <USART_IRQHandler+0x17e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a010:	0652      	lsls	r2, r2, #25
 800a012:	d506      	bpl.n	800a022 <USART_IRQHandler+0x17e>
 800a014:	064b      	lsls	r3, r1, #25
 800a016:	d504      	bpl.n	800a022 <USART_IRQHandler+0x17e>
    pUSARTx->CR1 = USART_CR1_TCIE;
 800a018:	2340      	movs	r3, #64	@ 0x40
    TxState = USART_STATE_READY;
 800a01a:	2220      	movs	r2, #32
    pUSARTx->CR1 = USART_CR1_TCIE;
 800a01c:	6003      	str	r3, [r0, #0]
    TxState = USART_STATE_READY;
 800a01e:	4b0c      	ldr	r3, [pc, #48]	@ (800a050 <USART_IRQHandler+0x1ac>)
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bc70      	pop	{r4, r5, r6}
 800a024:	4770      	bx	lr
        ErrorCode = 0;
 800a026:	6034      	str	r4, [r6, #0]
 800a028:	e7e0      	b.n	8009fec <USART_IRQHandler+0x148>
 800a02a:	bf00      	nop
 800a02c:	2000b3d0 	.word	0x2000b3d0
 800a030:	2000b3c8 	.word	0x2000b3c8
 800a034:	2000b3cc 	.word	0x2000b3cc
 800a038:	2000b3ce 	.word	0x2000b3ce
 800a03c:	2000b3d8 	.word	0x2000b3d8
 800a040:	2000b3c4 	.word	0x2000b3c4
 800a044:	08009915 	.word	0x08009915
 800a048:	04000120 	.word	0x04000120
 800a04c:	2000b3d4 	.word	0x2000b3d4
 800a050:	2000b3dc 	.word	0x2000b3dc

0800a054 <logWriteBuffer.constprop.0>:
static void logWriteBuffer(Log *log, LogLevel level, char *buffer, short len)
{
#if LOG_USING_LOCK == 1
    logLock(log);
#endif /* LOG_USING_LOCK == 1 */
    if (log == LOG_ALL_OBJ)
 800a054:	1c43      	adds	r3, r0, #1
static void logWriteBuffer(Log *log, LogLevel level, char *buffer, short len)
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	460e      	mov	r6, r1
 800a05c:	4615      	mov	r5, r2
    if (log == LOG_ALL_OBJ)
 800a05e:	d113      	bne.n	800a088 <logWriteBuffer.constprop.0+0x34>
 800a060:	4f10      	ldr	r7, [pc, #64]	@ (800a0a4 <logWriteBuffer.constprop.0+0x50>)
 800a062:	2405      	movs	r4, #5
    {
        for (short i = 0; i < LOG_MAX_NUMBER; i++)
        {
            if (logList[i] 
 800a064:	f857 3b04 	ldr.w	r3, [r7], #4
 800a068:	b143      	cbz	r3, 800a07c <logWriteBuffer.constprop.0+0x28>
                && logList[i]->active
 800a06a:	791a      	ldrb	r2, [r3, #4]
 800a06c:	b132      	cbz	r2, 800a07c <logWriteBuffer.constprop.0+0x28>
                && logList[i]->level >= level)
 800a06e:	795a      	ldrb	r2, [r3, #5]
 800a070:	42b2      	cmp	r2, r6
 800a072:	d303      	bcc.n	800a07c <logWriteBuffer.constprop.0+0x28>
            {
                logList[i]->write(logBuffer, len);
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4629      	mov	r1, r5
 800a078:	480b      	ldr	r0, [pc, #44]	@ (800a0a8 <logWriteBuffer.constprop.0+0x54>)
 800a07a:	4798      	blx	r3
        for (short i = 0; i < LOG_MAX_NUMBER; i++)
 800a07c:	3c01      	subs	r4, #1
 800a07e:	b2a4      	uxth	r4, r4
 800a080:	2c00      	cmp	r4, #0
 800a082:	d1ef      	bne.n	800a064 <logWriteBuffer.constprop.0+0x10>
        log->write(logBuffer, len);
    }
#if LOG_USING_LOCK == 1
    logUnlock(log);
#endif /* LOG_USING_LOCK == 1 */
}
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (log && log->active && log->level >= level)
 800a088:	2800      	cmp	r0, #0
 800a08a:	d0fb      	beq.n	800a084 <logWriteBuffer.constprop.0+0x30>
 800a08c:	7903      	ldrb	r3, [r0, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0f8      	beq.n	800a084 <logWriteBuffer.constprop.0+0x30>
 800a092:	7943      	ldrb	r3, [r0, #5]
 800a094:	428b      	cmp	r3, r1
 800a096:	d3f5      	bcc.n	800a084 <logWriteBuffer.constprop.0+0x30>
        log->write(logBuffer, len);
 800a098:	6803      	ldr	r3, [r0, #0]
 800a09a:	4611      	mov	r1, r2
 800a09c:	4802      	ldr	r0, [pc, #8]	@ (800a0a8 <logWriteBuffer.constprop.0+0x54>)
}
 800a09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        log->write(logBuffer, len);
 800a0a2:	4718      	bx	r3
 800a0a4:	2000b4e0 	.word	0x2000b4e0
 800a0a8:	2000b3e0 	.word	0x2000b3e0

0800a0ac <logHexDump>:
 * @param level 日志级别
 * @param base 内存基址
 * @param length 长度
 */
void logHexDump(Log *log, LogLevel level, void *base, unsigned int length)
{
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	b087      	sub	sp, #28
 800a0b2:	4682      	mov	sl, r0
 800a0b4:	4616      	mov	r6, r2
    unsigned char *address;
    unsigned int len;
    unsigned int printLen = 0;

    if (length == 0 || (log != LOG_ALL_OBJ && log->level < level))
 800a0b6:	4698      	mov	r8, r3
{
 800a0b8:	9103      	str	r1, [sp, #12]
    if (length == 0 || (log != LOG_ALL_OBJ && log->level < level))
 800a0ba:	b30b      	cbz	r3, 800a100 <logHexDump+0x54>
 800a0bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0c0:	d002      	beq.n	800a0c8 <logHexDump+0x1c>
 800a0c2:	7943      	ldrb	r3, [r0, #5]
 800a0c4:	428b      	cmp	r3, r1
 800a0c6:	d31b      	bcc.n	800a100 <logHexDump+0x54>
        return;
    }
#if LOG_USING_LOCK == 1
    logLock(log);
#endif /* LOG_USING_LOCK == 1 */
    len = snprintf(logBuffer, LOG_BUFFER_SIZE - 1, "memory of 0x%08x, size: %d:\r\n%s",
 800a0c8:	4b3c      	ldr	r3, [pc, #240]	@ (800a1bc <logHexDump+0x110>)
 800a0ca:	21ff      	movs	r1, #255	@ 0xff
 800a0cc:	4a3c      	ldr	r2, [pc, #240]	@ (800a1c0 <logHexDump+0x114>)
                   (unsigned int)base, length, memPrintHead);
    logWriteBuffer(log, level, logBuffer, len);

    len = length;
    
    address = (unsigned char *)((unsigned int)base & (~0x0000000F));
 800a0ce:	f026 070f 	bic.w	r7, r6, #15
    len = snprintf(logBuffer, LOG_BUFFER_SIZE - 1, "memory of 0x%08x, size: %d:\r\n%s",
 800a0d2:	483c      	ldr	r0, [pc, #240]	@ (800a1c4 <logHexDump+0x118>)
    length += (unsigned int)base - (unsigned int)address;
    length = (length + 15) & (~0x0000000F);

    while (length)
    {
        printLen += sprintf(logBuffer + printLen, memPrintAddr, (unsigned int)address);
 800a0d4:	4d3b      	ldr	r5, [pc, #236]	@ (800a1c4 <logHexDump+0x118>)
    len = snprintf(logBuffer, LOG_BUFFER_SIZE - 1, "memory of 0x%08x, size: %d:\r\n%s",
 800a0d6:	e9cd 8300 	strd	r8, r3, [sp]
 800a0da:	4633      	mov	r3, r6
 800a0dc:	f00a fb4c 	bl	8014778 <sniprintf>
    logWriteBuffer(log, level, logBuffer, len);
 800a0e0:	9903      	ldr	r1, [sp, #12]
 800a0e2:	b202      	sxth	r2, r0
 800a0e4:	4650      	mov	r0, sl
 800a0e6:	f7ff ffb5 	bl	800a054 <logWriteBuffer.constprop.0>
    length = (length + 15) & (~0x0000000F);
 800a0ea:	f106 030f 	add.w	r3, r6, #15
 800a0ee:	1bdb      	subs	r3, r3, r7
 800a0f0:	4443      	add	r3, r8
 800a0f2:	f023 030f 	bic.w	r3, r3, #15
 800a0f6:	443b      	add	r3, r7
 800a0f8:	9305      	str	r3, [sp, #20]
    while (length)
 800a0fa:	9b05      	ldr	r3, [sp, #20]
 800a0fc:	429f      	cmp	r7, r3
 800a0fe:	d102      	bne.n	800a106 <logHexDump+0x5a>
        printLen = 0;
    }
#if LOG_USING_LOCK == 1
    logUnlock(log);
#endif /* LOG_USING_LOCK == 1 */
}
 800a100:	b007      	add	sp, #28
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printLen += sprintf(logBuffer + printLen, memPrintAddr, (unsigned int)address);
 800a106:	463a      	mov	r2, r7
 800a108:	492f      	ldr	r1, [pc, #188]	@ (800a1c8 <logHexDump+0x11c>)
 800a10a:	4628      	mov	r0, r5
 800a10c:	46b9      	mov	r9, r7
 800a10e:	f00a fb69 	bl	80147e4 <siprintf>
 800a112:	46bb      	mov	fp, r7
 800a114:	2416      	movs	r4, #22
                logBuffer[printLen ++] = ' ';
 800a116:	2320      	movs	r3, #32
            if ((unsigned int)(address + i) < (unsigned int)base
 800a118:	455e      	cmp	r6, fp
 800a11a:	d803      	bhi.n	800a124 <logHexDump+0x78>
                || (unsigned int)(address + i) >= (unsigned int)base + len)
 800a11c:	eb06 0208 	add.w	r2, r6, r8
 800a120:	455a      	cmp	r2, fp
 800a122:	d81e      	bhi.n	800a162 <logHexDump+0xb6>
                logBuffer[printLen ++] = ' ';
 800a124:	552b      	strb	r3, [r5, r4]
                logBuffer[printLen ++] = ' ';
 800a126:	1ca2      	adds	r2, r4, #2
 800a128:	1929      	adds	r1, r5, r4
                logBuffer[printLen ++] = ' ';
 800a12a:	3403      	adds	r4, #3
                logBuffer[printLen ++] = ' ';
 800a12c:	704b      	strb	r3, [r1, #1]
                logBuffer[printLen ++] = ' ';
 800a12e:	54ab      	strb	r3, [r5, r2]
        for (int i = 0; i < 16; i++)
 800a130:	f107 0210 	add.w	r2, r7, #16
 800a134:	f10b 0b01 	add.w	fp, fp, #1
 800a138:	4593      	cmp	fp, r2
 800a13a:	9204      	str	r2, [sp, #16]
 800a13c:	d1ec      	bne.n	800a118 <logHexDump+0x6c>
        logBuffer[printLen ++] = '|';
 800a13e:	237c      	movs	r3, #124	@ 0x7c
        logBuffer[printLen ++] = ' ';
 800a140:	1ca0      	adds	r0, r4, #2
 800a142:	2720      	movs	r7, #32
                || (unsigned int)(address + i) >= (unsigned int)base + len)
 800a144:	eb06 0b08 	add.w	fp, r6, r8
        logBuffer[printLen ++] = '|';
 800a148:	552b      	strb	r3, [r5, r4]
        logBuffer[printLen ++] = ' ';
 800a14a:	442c      	add	r4, r5
                    printLen += sprintf(logBuffer + printLen, "%c", *(address + i));
 800a14c:	491f      	ldr	r1, [pc, #124]	@ (800a1cc <logHexDump+0x120>)
        logBuffer[printLen ++] = ' ';
 800a14e:	7067      	strb	r7, [r4, #1]
            if ((unsigned int)(address + i) < (unsigned int)base
 800a150:	454e      	cmp	r6, r9
 800a152:	f100 0401 	add.w	r4, r0, #1
 800a156:	d801      	bhi.n	800a15c <logHexDump+0xb0>
                || (unsigned int)(address + i) >= (unsigned int)base + len)
 800a158:	45cb      	cmp	fp, r9
 800a15a:	d80b      	bhi.n	800a174 <logHexDump+0xc8>
                logBuffer[printLen ++] = ' ';
 800a15c:	542f      	strb	r7, [r5, r0]
                    logBuffer[printLen ++] = '.';
 800a15e:	4620      	mov	r0, r4
 800a160:	e013      	b.n	800a18a <logHexDump+0xde>
                printLen += sprintf(logBuffer + printLen, "%02x ", *(address + i));
 800a162:	1928      	adds	r0, r5, r4
 800a164:	f89b 2000 	ldrb.w	r2, [fp]
 800a168:	4919      	ldr	r1, [pc, #100]	@ (800a1d0 <logHexDump+0x124>)
 800a16a:	3403      	adds	r4, #3
 800a16c:	f00a fb3a 	bl	80147e4 <siprintf>
 800a170:	2320      	movs	r3, #32
 800a172:	e7dd      	b.n	800a130 <logHexDump+0x84>
                if (*(address + i) >= 32 && *(address + i) <= 126)
 800a174:	f899 2000 	ldrb.w	r2, [r9]
 800a178:	f1a2 0320 	sub.w	r3, r2, #32
 800a17c:	2b5e      	cmp	r3, #94	@ 0x5e
 800a17e:	d81a      	bhi.n	800a1b6 <logHexDump+0x10a>
                    printLen += sprintf(logBuffer + printLen, "%c", *(address + i));
 800a180:	4428      	add	r0, r5
 800a182:	f00a fb2f 	bl	80147e4 <siprintf>
 800a186:	4620      	mov	r0, r4
 800a188:	4910      	ldr	r1, [pc, #64]	@ (800a1cc <logHexDump+0x120>)
        for (int i = 0; i < 16; i++)
 800a18a:	f109 0901 	add.w	r9, r9, #1
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	4599      	cmp	r9, r3
 800a192:	d1dd      	bne.n	800a150 <logHexDump+0xa4>
        logBuffer[printLen ++] = ' ';
 800a194:	2320      	movs	r3, #32
        logBuffer[printLen ++] = '|';
 800a196:	227c      	movs	r2, #124	@ 0x7c
        logWriteBuffer(log, level, logBuffer, printLen);
 800a198:	9903      	ldr	r1, [sp, #12]
        address += 16;
 800a19a:	464f      	mov	r7, r9
        logBuffer[printLen ++] = ' ';
 800a19c:	542b      	strb	r3, [r5, r0]
        logBuffer[printLen ++] = '|';
 800a19e:	182b      	adds	r3, r5, r0
 800a1a0:	705a      	strb	r2, [r3, #1]
        logBuffer[printLen ++] = '\r';
 800a1a2:	220d      	movs	r2, #13
 800a1a4:	709a      	strb	r2, [r3, #2]
        logBuffer[printLen ++] = '\n';
 800a1a6:	220a      	movs	r2, #10
 800a1a8:	70da      	strb	r2, [r3, #3]
 800a1aa:	1d02      	adds	r2, r0, #4
        logWriteBuffer(log, level, logBuffer, printLen);
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	b212      	sxth	r2, r2
 800a1b0:	f7ff ff50 	bl	800a054 <logWriteBuffer.constprop.0>
        printLen = 0;
 800a1b4:	e7a1      	b.n	800a0fa <logHexDump+0x4e>
                    logBuffer[printLen ++] = '.';
 800a1b6:	232e      	movs	r3, #46	@ 0x2e
 800a1b8:	542b      	strb	r3, [r5, r0]
 800a1ba:	e7d0      	b.n	800a15e <logHexDump+0xb2>
 800a1bc:	08015dd8 	.word	0x08015dd8
 800a1c0:	08015db8 	.word	0x08015db8
 800a1c4:	2000b3e0 	.word	0x2000b3e0
 800a1c8:	08015e20 	.word	0x08015e20
 800a1cc:	08015e39 	.word	0x08015e39
 800a1d0:	08015e33 	.word	0x08015e33

0800a1d4 <logWrite>:
{
 800a1d4:	b40c      	push	{r2, r3}
 800a1d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1d8:	ab06      	add	r3, sp, #24
 800a1da:	4604      	mov	r4, r0
 800a1dc:	460d      	mov	r5, r1
    len = vsnprintf(logBuffer, LOG_BUFFER_SIZE - 1, fmt, vargs);
 800a1de:	480b      	ldr	r0, [pc, #44]	@ (800a20c <logWrite+0x38>)
{
 800a1e0:	f853 2b04 	ldr.w	r2, [r3], #4
    len = vsnprintf(logBuffer, LOG_BUFFER_SIZE - 1, fmt, vargs);
 800a1e4:	21ff      	movs	r1, #255	@ 0xff
    va_start(vargs, fmt);
 800a1e6:	9301      	str	r3, [sp, #4]
    len = vsnprintf(logBuffer, LOG_BUFFER_SIZE - 1, fmt, vargs);
 800a1e8:	f00a fb90 	bl	801490c <vsniprintf>
    if (len > LOG_BUFFER_SIZE)
 800a1ec:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
    logWriteBuffer(log, level, logBuffer, len);
 800a1f0:	4629      	mov	r1, r5
    if (len > LOG_BUFFER_SIZE)
 800a1f2:	bfa8      	it	ge
 800a1f4:	f44f 7080 	movge.w	r0, #256	@ 0x100
    logWriteBuffer(log, level, logBuffer, len);
 800a1f8:	b202      	sxth	r2, r0
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ff2a 	bl	800a054 <logWriteBuffer.constprop.0>
}
 800a200:	b003      	add	sp, #12
 800a202:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a206:	b002      	add	sp, #8
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	2000b3e0 	.word	0x2000b3e0

0800a210 <logSetLevel>:
{
 800a210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    logAssert(log, return);
 800a212:	4603      	mov	r3, r0
 800a214:	b970      	cbnz	r0, 800a234 <logSetLevel+0x24>
 800a216:	2285      	movs	r2, #133	@ 0x85
 800a218:	2101      	movs	r1, #1
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	9202      	str	r2, [sp, #8]
 800a220:	4a05      	ldr	r2, [pc, #20]	@ (800a238 <logSetLevel+0x28>)
 800a222:	9201      	str	r2, [sp, #4]
 800a224:	4a05      	ldr	r2, [pc, #20]	@ (800a23c <logSetLevel+0x2c>)
 800a226:	9200      	str	r2, [sp, #0]
 800a228:	4a05      	ldr	r2, [pc, #20]	@ (800a240 <logSetLevel+0x30>)
 800a22a:	f7ff ffd3 	bl	800a1d4 <logWrite>
}
 800a22e:	b005      	add	sp, #20
 800a230:	f85d fb04 	ldr.w	pc, [sp], #4
    log->level = level;
 800a234:	7141      	strb	r1, [r0, #5]
 800a236:	e7fa      	b.n	800a22e <logSetLevel+0x1e>
 800a238:	08015e7c 	.word	0x08015e7c
 800a23c:	0808e474 	.word	0x0808e474
 800a240:	08015e3c 	.word	0x08015e3c

0800a244 <shellStringCopy>:
 * @return unsigned short 字符串长度
 */
static unsigned short shellStringCopy(char *dest, char* src)
{
    unsigned short count = 0;
    while (*(src + count))
 800a244:	2300      	movs	r3, #0
{
 800a246:	b530      	push	{r4, r5, lr}
    while (*(src + count))
 800a248:	b29a      	uxth	r2, r3
 800a24a:	1c5d      	adds	r5, r3, #1
 800a24c:	5c8c      	ldrb	r4, [r1, r2]
    {
        *(dest + count) = *(src + count);
 800a24e:	5484      	strb	r4, [r0, r2]
    while (*(src + count))
 800a250:	b90c      	cbnz	r4, 800a256 <shellStringCopy+0x12>
        count++;
    }
    *(dest + count) = 0;
    return count;
}
 800a252:	4610      	mov	r0, r2
 800a254:	bd30      	pop	{r4, r5, pc}
        *(dest + count) = *(src + count);
 800a256:	462b      	mov	r3, r5
 800a258:	e7f6      	b.n	800a248 <shellStringCopy+0x4>

0800a25a <shellWriteByte.isra.0>:
static void shellWriteByte(Shell *shell, char data)
 800a25a:	b507      	push	{r0, r1, r2, lr}
 800a25c:	4603      	mov	r3, r0
 800a25e:	f88d 1007 	strb.w	r1, [sp, #7]
    shell->write(&data, 1);
 800a262:	2101      	movs	r1, #1
 800a264:	f10d 0007 	add.w	r0, sp, #7
 800a268:	4798      	blx	r3
}
 800a26a:	b003      	add	sp, #12
 800a26c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a270 <shellLeft>:
 * 
 * @param shell shell对象
 */
void shellLeft(Shell *shell)
{
    if (shell->parser.cursor > 0)
 800a270:	89c3      	ldrh	r3, [r0, #14]
{
 800a272:	b510      	push	{r4, lr}
 800a274:	4604      	mov	r4, r0
    if (shell->parser.cursor > 0)
 800a276:	b133      	cbz	r3, 800a286 <shellLeft+0x16>
    {
        shellWriteByte(shell, '\b');
 800a278:	2108      	movs	r1, #8
 800a27a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a27c:	f7ff ffed 	bl	800a25a <shellWriteByte.isra.0>
        shell->parser.cursor--;
 800a280:	89e3      	ldrh	r3, [r4, #14]
 800a282:	3b01      	subs	r3, #1
 800a284:	81e3      	strh	r3, [r4, #14]
    }
}
 800a286:	bd10      	pop	{r4, pc}

0800a288 <shellRight>:
    if (shell->parser.cursor < shell->parser.length)
 800a288:	89c3      	ldrh	r3, [r0, #14]
 800a28a:	8982      	ldrh	r2, [r0, #12]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d906      	bls.n	800a29e <shellRight+0x16>
        shellWriteByte(shell, shell->parser.buffer[shell->parser.cursor++]);
 800a290:	6902      	ldr	r2, [r0, #16]
 800a292:	1c59      	adds	r1, r3, #1
 800a294:	81c1      	strh	r1, [r0, #14]
 800a296:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800a298:	5cd1      	ldrb	r1, [r2, r3]
 800a29a:	f7ff bfde 	b.w	800a25a <shellWriteByte.isra.0>
}
 800a29e:	4770      	bx	lr

0800a2a0 <shellGetCurrent>:
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 800a2a0:	4a07      	ldr	r2, [pc, #28]	@ (800a2c0 <shellGetCurrent+0x20>)
 800a2a2:	2300      	movs	r3, #0
        if (shellList[i] && shellList[i]->status.isActive)
 800a2a4:	f852 0b04 	ldr.w	r0, [r2], #4
 800a2a8:	b118      	cbz	r0, 800a2b2 <shellGetCurrent+0x12>
 800a2aa:	f890 1060 	ldrb.w	r1, [r0, #96]	@ 0x60
 800a2ae:	0789      	lsls	r1, r1, #30
 800a2b0:	d405      	bmi.n	800a2be <shellGetCurrent+0x1e>
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b299      	uxth	r1, r3
 800a2b6:	b21b      	sxth	r3, r3
 800a2b8:	2905      	cmp	r1, #5
 800a2ba:	d1f3      	bne.n	800a2a4 <shellGetCurrent+0x4>
    return NULL;
 800a2bc:	2000      	movs	r0, #0
}
 800a2be:	4770      	bx	lr
 800a2c0:	2000b500 	.word	0x2000b500

0800a2c4 <shellWriteString>:
{
 800a2c4:	b538      	push	{r3, r4, r5, lr}
    SHELL_ASSERT(shell->write, return 0);
 800a2c6:	6e84      	ldr	r4, [r0, #104]	@ 0x68
{
 800a2c8:	460d      	mov	r5, r1
    SHELL_ASSERT(shell->write, return 0);
 800a2ca:	b13c      	cbz	r4, 800a2dc <shellWriteString+0x18>
    while(*p++)
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	f7f5 ffc1 	bl	8000254 <strlen>
    return shell->write((char *)string, count);
 800a2d2:	b281      	uxth	r1, r0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47a0      	blx	r4
 800a2d8:	b280      	uxth	r0, r0
}
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
    SHELL_ASSERT(shell->write, return 0);
 800a2dc:	4620      	mov	r0, r4
 800a2de:	e7fc      	b.n	800a2da <shellWriteString+0x16>

0800a2e0 <shellClear>:

/**
 * @brief shell 清空控制台(shell调用)
 */
void shellClear(void)
{
 800a2e0:	b508      	push	{r3, lr}
    Shell *shell = shellGetCurrent();
 800a2e2:	f7ff ffdd 	bl	800a2a0 <shellGetCurrent>
    if (shell)
 800a2e6:	b120      	cbz	r0, 800a2f2 <shellClear+0x12>
    {
        shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 800a2e8:	4902      	ldr	r1, [pc, #8]	@ (800a2f4 <shellClear+0x14>)
    }
}
 800a2ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 800a2ee:	f7ff bfe9 	b.w	800a2c4 <shellWriteString>
}
 800a2f2:	bd08      	pop	{r3, pc}
 800a2f4:	08015ea5 	.word	0x08015ea5

0800a2f8 <shellWritePrompt.constprop.0>:
    if (shell->status.isChecked)
 800a2f8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800a2fc:	07db      	lsls	r3, r3, #31
static void shellWritePrompt(Shell *shell, unsigned char newline)
 800a2fe:	b510      	push	{r4, lr}
 800a300:	4604      	mov	r4, r0
    if (shell->status.isChecked)
 800a302:	d519      	bpl.n	800a338 <shellWritePrompt.constprop.0+0x40>
            shellWriteString(shell, "\r\n");
 800a304:	490d      	ldr	r1, [pc, #52]	@ (800a33c <shellWritePrompt.constprop.0+0x44>)
 800a306:	f7ff ffdd 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, shell->info.user->data.user.name);
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	4620      	mov	r0, r4
 800a30e:	6859      	ldr	r1, [r3, #4]
 800a310:	f7ff ffd8 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, ":");
 800a314:	490a      	ldr	r1, [pc, #40]	@ (800a340 <shellWritePrompt.constprop.0+0x48>)
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff ffd4 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, shell->info.path ? shell->info.path : "/");
 800a31c:	68a1      	ldr	r1, [r4, #8]
 800a31e:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <shellWritePrompt.constprop.0+0x4c>)
 800a320:	4620      	mov	r0, r4
 800a322:	2900      	cmp	r1, #0
 800a324:	bf08      	it	eq
 800a326:	4619      	moveq	r1, r3
 800a328:	f7ff ffcc 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, "$ ");
 800a32c:	4906      	ldr	r1, [pc, #24]	@ (800a348 <shellWritePrompt.constprop.0+0x50>)
 800a32e:	4620      	mov	r0, r4
}
 800a330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_HINT]);
 800a334:	f7ff bfc6 	b.w	800a2c4 <shellWriteString>
 800a338:	4904      	ldr	r1, [pc, #16]	@ (800a34c <shellWritePrompt.constprop.0+0x54>)
 800a33a:	e7f9      	b.n	800a330 <shellWritePrompt.constprop.0+0x38>
 800a33c:	08015b6a 	.word	0x08015b6a
 800a340:	08015a7f 	.word	0x08015a7f
 800a344:	08015eae 	.word	0x08015eae
 800a348:	08015eb0 	.word	0x08015eb0
 800a34c:	08015eb3 	.word	0x08015eb3

0800a350 <shellCheckPermission>:
    return ((!command->attr.attrs.permission
 800a350:	780a      	ldrb	r2, [r1, #0]
            ? 0 : -1;
 800a352:	b14a      	cbz	r2, 800a368 <shellCheckPermission+0x18>
                || command->attr.attrs.type == SHELL_TYPE_USER
 800a354:	784b      	ldrb	r3, [r1, #1]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	2b08      	cmp	r3, #8
 800a35c:	d004      	beq.n	800a368 <shellCheckPermission+0x18>
                || (shell->info.user
 800a35e:	6803      	ldr	r3, [r0, #0]
 800a360:	b163      	cbz	r3, 800a37c <shellCheckPermission+0x2c>
                    && (command->attr.attrs.permission 
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	421a      	tst	r2, r3
 800a366:	d009      	beq.n	800a37c <shellCheckPermission+0x2c>
            && (shell->status.isChecked
 800a368:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800a36c:	07db      	lsls	r3, r3, #31
 800a36e:	d408      	bmi.n	800a382 <shellCheckPermission+0x32>
                || command->attr.attrs.enableUnchecked))
 800a370:	7848      	ldrb	r0, [r1, #1]
 800a372:	f080 0010 	eor.w	r0, r0, #16
 800a376:	f340 1000 	sbfx	r0, r0, #4, #1
 800a37a:	4770      	bx	lr
            ? 0 : -1;
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	4770      	bx	lr
 800a382:	2000      	movs	r0, #0
}
 800a384:	4770      	bx	lr

0800a386 <shellToHex>:
    buffer[8] = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	720b      	strb	r3, [r1, #8]
    unsigned char i = 8;
 800a38a:	2308      	movs	r3, #8
    while (value)
 800a38c:	b918      	cbnz	r0, 800a396 <shellToHex+0x10>
    return 8 - i;
 800a38e:	f1c3 0008 	rsb	r0, r3, #8
}
 800a392:	b240      	sxtb	r0, r0
 800a394:	4770      	bx	lr
        byte = value & 0x0000000F;
 800a396:	f000 020f 	and.w	r2, r0, #15
        buffer[--i] = (byte > 9) ? (byte + 87) : (byte + 48);
 800a39a:	3b01      	subs	r3, #1
        value >>= 4;
 800a39c:	0900      	lsrs	r0, r0, #4
        buffer[--i] = (byte > 9) ? (byte + 87) : (byte + 48);
 800a39e:	2a09      	cmp	r2, #9
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	bf8c      	ite	hi
 800a3a4:	3257      	addhi	r2, #87	@ 0x57
 800a3a6:	3230      	addls	r2, #48	@ 0x30
 800a3a8:	54ca      	strb	r2, [r1, r3]
        value >>= 4;
 800a3aa:	e7ef      	b.n	800a38c <shellToHex+0x6>

0800a3ac <shellGetCommandName>:
{
 800a3ac:	b508      	push	{r3, lr}
        buffer[i] = '0';
 800a3ae:	490b      	ldr	r1, [pc, #44]	@ (800a3dc <shellGetCommandName+0x30>)
 800a3b0:	f04f 3330 	mov.w	r3, #808464432	@ 0x30303030
 800a3b4:	600b      	str	r3, [r1, #0]
 800a3b6:	604b      	str	r3, [r1, #4]
 800a3b8:	720b      	strb	r3, [r1, #8]
    if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 800a3ba:	7843      	ldrb	r3, [r0, #1]
 800a3bc:	f003 030f 	and.w	r3, r3, #15
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d802      	bhi.n	800a3ca <shellGetCommandName+0x1e>
        return command->data.user.name;
 800a3c4:	6841      	ldr	r1, [r0, #4]
}
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	bd08      	pop	{r3, pc}
    else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	d9fa      	bls.n	800a3c4 <shellGetCommandName+0x18>
    else if (command->attr.attrs.type <= SHELL_TYPE_USER)
 800a3ce:	2b08      	cmp	r3, #8
 800a3d0:	d0f8      	beq.n	800a3c4 <shellGetCommandName+0x18>
        shellToHex(command->data.key.value, buffer);
 800a3d2:	6840      	ldr	r0, [r0, #4]
 800a3d4:	f7ff ffd7 	bl	800a386 <shellToHex>
        return buffer;
 800a3d8:	e7f5      	b.n	800a3c6 <shellGetCommandName+0x1a>
 800a3da:	bf00      	nop
 800a3dc:	2000b4f4 	.word	0x2000b4f4

0800a3e0 <shellToDec>:
    buffer[11] = 0;
 800a3e0:	2300      	movs	r3, #0
    if (value < 0)
 800a3e2:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
 800a3e6:	b530      	push	{r4, r5, lr}
    if (value < 0)
 800a3e8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
    buffer[11] = 0;
 800a3ec:	72cb      	strb	r3, [r1, #11]
        buffer[--i] = v % 10 + 48;
 800a3ee:	240a      	movs	r4, #10
    unsigned char i = 11;
 800a3f0:	230b      	movs	r3, #11
    while (v)
 800a3f2:	b94a      	cbnz	r2, 800a408 <shellToDec+0x28>
    if (value < 0)
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	da11      	bge.n	800a41c <shellToDec+0x3c>
        buffer[--i] = '-';
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	222d      	movs	r2, #45	@ 0x2d
 800a3fc:	b2db      	uxtb	r3, r3
        buffer[--i] = '0';
 800a3fe:	54ca      	strb	r2, [r1, r3]
    return 11 - i;
 800a400:	f1c3 000b 	rsb	r0, r3, #11
}
 800a404:	b240      	sxtb	r0, r0
 800a406:	bd30      	pop	{r4, r5, pc}
        buffer[--i] = v % 10 + 48;
 800a408:	fb92 f5f4 	sdiv	r5, r2, r4
 800a40c:	3b01      	subs	r3, #1
 800a40e:	fb04 2215 	mls	r2, r4, r5, r2
 800a412:	b2db      	uxtb	r3, r3
 800a414:	3230      	adds	r2, #48	@ 0x30
 800a416:	54ca      	strb	r2, [r1, r3]
        v /= 10;
 800a418:	462a      	mov	r2, r5
 800a41a:	e7ea      	b.n	800a3f2 <shellToDec+0x12>
    if (value == 0) {
 800a41c:	d1f0      	bne.n	800a400 <shellToDec+0x20>
        buffer[--i] = '0';
 800a41e:	3b01      	subs	r3, #1
 800a420:	2230      	movs	r2, #48	@ 0x30
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e7eb      	b.n	800a3fe <shellToDec+0x1e>
	...

0800a428 <shellWriteReturnValue>:
{
 800a428:	b530      	push	{r4, r5, lr}
    char buffer[12] = "00000000000";
 800a42a:	4a18      	ldr	r2, [pc, #96]	@ (800a48c <shellWriteReturnValue+0x64>)
{
 800a42c:	b085      	sub	sp, #20
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
    char buffer[12] = "00000000000";
 800a432:	6810      	ldr	r0, [r2, #0]
 800a434:	ab01      	add	r3, sp, #4
 800a436:	6851      	ldr	r1, [r2, #4]
 800a438:	c303      	stmia	r3!, {r0, r1}
 800a43a:	6890      	ldr	r0, [r2, #8]
    shellWriteString(shell, "Return: ");
 800a43c:	4914      	ldr	r1, [pc, #80]	@ (800a490 <shellWriteReturnValue+0x68>)
    char buffer[12] = "00000000000";
 800a43e:	6018      	str	r0, [r3, #0]
    shellWriteString(shell, "Return: ");
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff ff3f 	bl	800a2c4 <shellWriteString>
    shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
 800a446:	a901      	add	r1, sp, #4
 800a448:	4628      	mov	r0, r5
 800a44a:	f7ff ffc9 	bl	800a3e0 <shellToDec>
 800a44e:	ab01      	add	r3, sp, #4
 800a450:	f1c0 010b 	rsb	r1, r0, #11
 800a454:	4620      	mov	r0, r4
 800a456:	4419      	add	r1, r3
 800a458:	f7ff ff34 	bl	800a2c4 <shellWriteString>
    shellWriteString(shell, ", 0x");
 800a45c:	490d      	ldr	r1, [pc, #52]	@ (800a494 <shellWriteReturnValue+0x6c>)
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff ff30 	bl	800a2c4 <shellWriteString>
        buffer[i] = '0';
 800a464:	f04f 3330 	mov.w	r3, #808464432	@ 0x30303030
    shellToHex(value, buffer);
 800a468:	a901      	add	r1, sp, #4
 800a46a:	4628      	mov	r0, r5
        buffer[i] = '0';
 800a46c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800a470:	f8cd 300b 	str.w	r3, [sp, #11]
    shellToHex(value, buffer);
 800a474:	f7ff ff87 	bl	800a386 <shellToHex>
    shellWriteString(shell, buffer);
 800a478:	4620      	mov	r0, r4
 800a47a:	f7ff ff23 	bl	800a2c4 <shellWriteString>
    shellWriteString(shell, "\r\n");
 800a47e:	4906      	ldr	r1, [pc, #24]	@ (800a498 <shellWriteReturnValue+0x70>)
 800a480:	4620      	mov	r0, r4
 800a482:	f7ff ff1f 	bl	800a2c4 <shellWriteString>
}
 800a486:	b005      	add	sp, #20
 800a488:	bd30      	pop	{r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	08015ed8 	.word	0x08015ed8
 800a490:	08015eca 	.word	0x08015eca
 800a494:	08015ed3 	.word	0x08015ed3
 800a498:	08015b6a 	.word	0x08015b6a

0800a49c <shellListItem>:
{
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	4604      	mov	r4, r0
    spaceLength = 22 - shellWriteString(shell, shellGetCommandName(item));
 800a4a0:	4608      	mov	r0, r1
{
 800a4a2:	460e      	mov	r6, r1
    spaceLength = 22 - shellWriteString(shell, shellGetCommandName(item));
 800a4a4:	f7ff ff82 	bl	800a3ac <shellGetCommandName>
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff ff0a 	bl	800a2c4 <shellWriteString>
 800a4b0:	f1c0 0516 	rsb	r5, r0, #22
 800a4b4:	b22d      	sxth	r5, r5
    spaceLength = (spaceLength > 0) ? spaceLength : 4;
 800a4b6:	2d00      	cmp	r5, #0
 800a4b8:	bfd8      	it	le
 800a4ba:	2504      	movle	r5, #4
        shellWriteByte(shell, ' ');
 800a4bc:	3d01      	subs	r5, #1
 800a4be:	2120      	movs	r1, #32
 800a4c0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
    } while (--spaceLength);
 800a4c2:	b22d      	sxth	r5, r5
        shellWriteByte(shell, ' ');
 800a4c4:	f7ff fec9 	bl	800a25a <shellWriteByte.isra.0>
    } while (--spaceLength);
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	d1f7      	bne.n	800a4bc <shellListItem+0x20>
    if (item->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
 800a4cc:	7873      	ldrb	r3, [r6, #1]
 800a4ce:	f003 030f 	and.w	r3, r3, #15
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d827      	bhi.n	800a526 <shellListItem+0x8a>
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_CMD]);
 800a4d6:	4923      	ldr	r1, [pc, #140]	@ (800a564 <shellListItem+0xc8>)
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_NONE]);
 800a4d8:	4620      	mov	r0, r4
    shellWriteString(shell, "  ");
 800a4da:	2507      	movs	r5, #7
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_NONE]);
 800a4dc:	f7ff fef2 	bl	800a2c4 <shellWriteString>
    shellWriteString(shell, "  ");
 800a4e0:	4921      	ldr	r1, [pc, #132]	@ (800a568 <shellListItem+0xcc>)
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f7ff feee 	bl	800a2c4 <shellWriteString>
        shellWriteByte(shell, item->attr.attrs.permission & (1 << i) ? 'x' : '-');
 800a4e8:	7833      	ldrb	r3, [r6, #0]
 800a4ea:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a4ec:	412b      	asrs	r3, r5
 800a4ee:	f013 0f01 	tst.w	r3, #1
 800a4f2:	bf0c      	ite	eq
 800a4f4:	212d      	moveq	r1, #45	@ 0x2d
 800a4f6:	2178      	movne	r1, #120	@ 0x78
 800a4f8:	f7ff feaf 	bl	800a25a <shellWriteByte.isra.0>
    for (signed char i = 7; i >= 0; i--)
 800a4fc:	3d01      	subs	r5, #1
 800a4fe:	d2f3      	bcs.n	800a4e8 <shellListItem+0x4c>
    shellWriteString(shell, "  ");
 800a500:	4919      	ldr	r1, [pc, #100]	@ (800a568 <shellListItem+0xcc>)
 800a502:	4620      	mov	r0, r4
 800a504:	f7ff fede 	bl	800a2c4 <shellWriteString>
    SHELL_ASSERT(shell->write, return 0);
 800a508:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
        return command->data.cmd.desc;
 800a50a:	68f0      	ldr	r0, [r6, #12]
    SHELL_ASSERT(shell->write, return 0);
 800a50c:	b30a      	cbz	r2, 800a552 <shellListItem+0xb6>
 800a50e:	2100      	movs	r1, #0
    while (*p && *p != '\r' && *p != '\n')
 800a510:	4e16      	ldr	r6, [pc, #88]	@ (800a56c <shellListItem+0xd0>)
 800a512:	5c43      	ldrb	r3, [r0, r1]
 800a514:	1c4d      	adds	r5, r1, #1
 800a516:	2b0d      	cmp	r3, #13
 800a518:	d803      	bhi.n	800a522 <shellListItem+0x86>
 800a51a:	fa46 f303 	asr.w	r3, r6, r3
 800a51e:	07db      	lsls	r3, r3, #31
 800a520:	d50e      	bpl.n	800a540 <shellListItem+0xa4>
 800a522:	4629      	mov	r1, r5
 800a524:	e7f5      	b.n	800a512 <shellListItem+0x76>
    else if (item->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 800a526:	2b07      	cmp	r3, #7
 800a528:	d801      	bhi.n	800a52e <shellListItem+0x92>
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_VAR]);
 800a52a:	4911      	ldr	r1, [pc, #68]	@ (800a570 <shellListItem+0xd4>)
 800a52c:	e7d4      	b.n	800a4d8 <shellListItem+0x3c>
    else if (item->attr.attrs.type <= SHELL_TYPE_USER)
 800a52e:	2b08      	cmp	r3, #8
 800a530:	d101      	bne.n	800a536 <shellListItem+0x9a>
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_USER]);
 800a532:	4910      	ldr	r1, [pc, #64]	@ (800a574 <shellListItem+0xd8>)
 800a534:	e7d0      	b.n	800a4d8 <shellListItem+0x3c>
    else if (item->attr.attrs.type <= SHELL_TYPE_KEY)
 800a536:	2b09      	cmp	r3, #9
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_KEY]);
 800a538:	bf0c      	ite	eq
 800a53a:	490f      	ldreq	r1, [pc, #60]	@ (800a578 <shellListItem+0xdc>)
        shellWriteString(shell, shellText[SHELL_TEXT_TYPE_NONE]);
 800a53c:	490f      	ldrne	r1, [pc, #60]	@ (800a57c <shellListItem+0xe0>)
 800a53e:	e7cb      	b.n	800a4d8 <shellListItem+0x3c>
 800a540:	b289      	uxth	r1, r1
    if (count > 36)
 800a542:	2924      	cmp	r1, #36	@ 0x24
 800a544:	d90b      	bls.n	800a55e <shellListItem+0xc2>
        shell->write((char *)string, 36);
 800a546:	2124      	movs	r1, #36	@ 0x24
 800a548:	4790      	blx	r2
        shell->write("...", 3);
 800a54a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a54c:	2103      	movs	r1, #3
 800a54e:	480c      	ldr	r0, [pc, #48]	@ (800a580 <shellListItem+0xe4>)
 800a550:	4798      	blx	r3
    shellWriteString(shell, "\r\n");
 800a552:	4620      	mov	r0, r4
 800a554:	490b      	ldr	r1, [pc, #44]	@ (800a584 <shellListItem+0xe8>)
}
 800a556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    shellWriteString(shell, "\r\n");
 800a55a:	f7ff beb3 	b.w	800a2c4 <shellWriteString>
        shell->write((char *)string, count);
 800a55e:	4790      	blx	r2
    return count > 36 ? 36 : 39;
 800a560:	e7f7      	b.n	800a552 <shellListItem+0xb6>
 800a562:	bf00      	nop
 800a564:	08015ee4 	.word	0x08015ee4
 800a568:	08015d56 	.word	0x08015d56
 800a56c:	ffffdbfe 	.word	0xffffdbfe
 800a570:	08015ee9 	.word	0x08015ee9
 800a574:	08015eee 	.word	0x08015eee
 800a578:	08015ef3 	.word	0x08015ef3
 800a57c:	08015ef8 	.word	0x08015ef8
 800a580:	08015efd 	.word	0x08015efd
 800a584:	08015b6a 	.word	0x08015b6a

0800a588 <shellListCommand>:
{
 800a588:	b570      	push	{r4, r5, r6, lr}
    for (short i = 0; i < shell->commandList.count; i++)
 800a58a:	2500      	movs	r5, #0
    shellWriteString(shell, shellText[SHELL_TEXT_CMD_LIST]);
 800a58c:	490d      	ldr	r1, [pc, #52]	@ (800a5c4 <shellListCommand+0x3c>)
{
 800a58e:	4604      	mov	r4, r0
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800a590:	6d86      	ldr	r6, [r0, #88]	@ 0x58
    shellWriteString(shell, shellText[SHELL_TEXT_CMD_LIST]);
 800a592:	f7ff fe97 	bl	800a2c4 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 800a596:	b229      	sxth	r1, r5
 800a598:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
 800a59c:	4299      	cmp	r1, r3
 800a59e:	db00      	blt.n	800a5a2 <shellListCommand+0x1a>
}
 800a5a0:	bd70      	pop	{r4, r5, r6, pc}
        if (base[i].attr.attrs.type <= SHELL_TYPE_CMD_FUNC
 800a5a2:	eb06 1101 	add.w	r1, r6, r1, lsl #4
 800a5a6:	784b      	ldrb	r3, [r1, #1]
 800a5a8:	f003 030f 	and.w	r3, r3, #15
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d806      	bhi.n	800a5be <shellListCommand+0x36>
            && shellCheckPermission(shell, &base[i]) == 0)
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f7ff fecd 	bl	800a350 <shellCheckPermission>
 800a5b6:	b910      	cbnz	r0, 800a5be <shellListCommand+0x36>
            shellListItem(shell, &base[i]);
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff ff6f 	bl	800a49c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 800a5be:	3501      	adds	r5, #1
 800a5c0:	e7e9      	b.n	800a596 <shellListCommand+0xe>
 800a5c2:	bf00      	nop
 800a5c4:	08015f01 	.word	0x08015f01

0800a5c8 <shellCmds>:
{
 800a5c8:	b508      	push	{r3, lr}
    Shell *shell = shellGetCurrent();
 800a5ca:	f7ff fe69 	bl	800a2a0 <shellGetCurrent>
    if (shell)
 800a5ce:	b118      	cbz	r0, 800a5d8 <shellCmds+0x10>
}
 800a5d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        shellListCommand(shell);
 800a5d4:	f7ff bfd8 	b.w	800a588 <shellListCommand>
}
 800a5d8:	bd08      	pop	{r3, pc}
	...

0800a5dc <shellListVar>:
{
 800a5dc:	b570      	push	{r4, r5, r6, lr}
    for (short i = 0; i < shell->commandList.count; i++)
 800a5de:	2500      	movs	r5, #0
    shellWriteString(shell, shellText[SHELL_TEXT_VAR_LIST]);
 800a5e0:	490d      	ldr	r1, [pc, #52]	@ (800a618 <shellListVar+0x3c>)
{
 800a5e2:	4604      	mov	r4, r0
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800a5e4:	6d86      	ldr	r6, [r0, #88]	@ 0x58
    shellWriteString(shell, shellText[SHELL_TEXT_VAR_LIST]);
 800a5e6:	f7ff fe6d 	bl	800a2c4 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 800a5ea:	b229      	sxth	r1, r5
 800a5ec:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
 800a5f0:	4299      	cmp	r1, r3
 800a5f2:	db00      	blt.n	800a5f6 <shellListVar+0x1a>
}
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
        if (base[i].attr.attrs.type > SHELL_TYPE_CMD_FUNC
 800a5f6:	eb06 1101 	add.w	r1, r6, r1, lsl #4
 800a5fa:	784b      	ldrb	r3, [r1, #1]
            && base[i].attr.attrs.type <= SHELL_TYPE_VAR_NODE
 800a5fc:	330e      	adds	r3, #14
        if (base[i].attr.attrs.type > SHELL_TYPE_CMD_FUNC
 800a5fe:	f003 030f 	and.w	r3, r3, #15
 800a602:	2b05      	cmp	r3, #5
 800a604:	d806      	bhi.n	800a614 <shellListVar+0x38>
            && shellCheckPermission(shell, &base[i]) == 0)
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff fea2 	bl	800a350 <shellCheckPermission>
 800a60c:	b910      	cbnz	r0, 800a614 <shellListVar+0x38>
            shellListItem(shell, &base[i]);
 800a60e:	4620      	mov	r0, r4
 800a610:	f7ff ff44 	bl	800a49c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 800a614:	3501      	adds	r5, #1
 800a616:	e7e8      	b.n	800a5ea <shellListVar+0xe>
 800a618:	08015f13 	.word	0x08015f13

0800a61c <shellVars>:
{
 800a61c:	b508      	push	{r3, lr}
    Shell *shell = shellGetCurrent();
 800a61e:	f7ff fe3f 	bl	800a2a0 <shellGetCurrent>
    if (shell)
 800a622:	b118      	cbz	r0, 800a62c <shellVars+0x10>
}
 800a624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        shellListVar(shell);
 800a628:	f7ff bfd8 	b.w	800a5dc <shellListVar>
}
 800a62c:	bd08      	pop	{r3, pc}
	...

0800a630 <shellListUser>:
{
 800a630:	b570      	push	{r4, r5, r6, lr}
    for (short i = 0; i < shell->commandList.count; i++)
 800a632:	2500      	movs	r5, #0
    shellWriteString(shell, shellText[SHELL_TEXT_USER_LIST]);
 800a634:	490d      	ldr	r1, [pc, #52]	@ (800a66c <shellListUser+0x3c>)
{
 800a636:	4604      	mov	r4, r0
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800a638:	6d86      	ldr	r6, [r0, #88]	@ 0x58
    shellWriteString(shell, shellText[SHELL_TEXT_USER_LIST]);
 800a63a:	f7ff fe43 	bl	800a2c4 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 800a63e:	b229      	sxth	r1, r5
 800a640:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
 800a644:	4299      	cmp	r1, r3
 800a646:	db00      	blt.n	800a64a <shellListUser+0x1a>
}
 800a648:	bd70      	pop	{r4, r5, r6, pc}
        if (base[i].attr.attrs.type > SHELL_TYPE_VAR_NODE
 800a64a:	eb06 1101 	add.w	r1, r6, r1, lsl #4
            && base[i].attr.attrs.type <= SHELL_TYPE_USER
 800a64e:	784b      	ldrb	r3, [r1, #1]
        if (base[i].attr.attrs.type > SHELL_TYPE_VAR_NODE
 800a650:	f003 030f 	and.w	r3, r3, #15
 800a654:	2b08      	cmp	r3, #8
 800a656:	d106      	bne.n	800a666 <shellListUser+0x36>
            && shellCheckPermission(shell, &base[i]) == 0)
 800a658:	4620      	mov	r0, r4
 800a65a:	f7ff fe79 	bl	800a350 <shellCheckPermission>
 800a65e:	b910      	cbnz	r0, 800a666 <shellListUser+0x36>
            shellListItem(shell, &base[i]);
 800a660:	4620      	mov	r0, r4
 800a662:	f7ff ff1b 	bl	800a49c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 800a666:	3501      	adds	r5, #1
 800a668:	e7e9      	b.n	800a63e <shellListUser+0xe>
 800a66a:	bf00      	nop
 800a66c:	08015f21 	.word	0x08015f21

0800a670 <shellUsers>:
{
 800a670:	b508      	push	{r3, lr}
    Shell *shell = shellGetCurrent();
 800a672:	f7ff fe15 	bl	800a2a0 <shellGetCurrent>
    if (shell)
 800a676:	b118      	cbz	r0, 800a680 <shellUsers+0x10>
}
 800a678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        shellListUser(shell);
 800a67c:	f7ff bfd8 	b.w	800a630 <shellListUser>
}
 800a680:	bd08      	pop	{r3, pc}
	...

0800a684 <shellListKey>:
{
 800a684:	b570      	push	{r4, r5, r6, lr}
    for (short i = 0; i < shell->commandList.count; i++)
 800a686:	2500      	movs	r5, #0
    shellWriteString(shell, shellText[SHELL_TEXT_KEY_LIST]);
 800a688:	490d      	ldr	r1, [pc, #52]	@ (800a6c0 <shellListKey+0x3c>)
{
 800a68a:	4604      	mov	r4, r0
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800a68c:	6d86      	ldr	r6, [r0, #88]	@ 0x58
    shellWriteString(shell, shellText[SHELL_TEXT_KEY_LIST]);
 800a68e:	f7ff fe19 	bl	800a2c4 <shellWriteString>
    for (short i = 0; i < shell->commandList.count; i++)
 800a692:	b229      	sxth	r1, r5
 800a694:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
 800a698:	4299      	cmp	r1, r3
 800a69a:	db00      	blt.n	800a69e <shellListKey+0x1a>
}
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
        if (base[i].attr.attrs.type > SHELL_TYPE_USER
 800a69e:	eb06 1101 	add.w	r1, r6, r1, lsl #4
            && base[i].attr.attrs.type <= SHELL_TYPE_KEY
 800a6a2:	784b      	ldrb	r3, [r1, #1]
        if (base[i].attr.attrs.type > SHELL_TYPE_USER
 800a6a4:	f003 030f 	and.w	r3, r3, #15
 800a6a8:	2b09      	cmp	r3, #9
 800a6aa:	d106      	bne.n	800a6ba <shellListKey+0x36>
            && shellCheckPermission(shell, &base[i]) == 0)
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f7ff fe4f 	bl	800a350 <shellCheckPermission>
 800a6b2:	b910      	cbnz	r0, 800a6ba <shellListKey+0x36>
            shellListItem(shell, &base[i]);
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7ff fef1 	bl	800a49c <shellListItem>
    for (short i = 0; i < shell->commandList.count; i++)
 800a6ba:	3501      	adds	r5, #1
 800a6bc:	e7e9      	b.n	800a692 <shellListKey+0xe>
 800a6be:	bf00      	nop
 800a6c0:	08015f30 	.word	0x08015f30

0800a6c4 <shellKeys>:
{
 800a6c4:	b508      	push	{r3, lr}
    Shell *shell = shellGetCurrent();
 800a6c6:	f7ff fdeb 	bl	800a2a0 <shellGetCurrent>
    if (shell)
 800a6ca:	b118      	cbz	r0, 800a6d4 <shellKeys+0x10>
}
 800a6cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        shellListKey(shell);
 800a6d0:	f7ff bfd8 	b.w	800a684 <shellListKey>
}
 800a6d4:	bd08      	pop	{r3, pc}
	...

0800a6d8 <shellDeleteCommandLine>:
{
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	4605      	mov	r5, r0
 800a6dc:	460c      	mov	r4, r1
        shellWriteString(shell, "\b \b");
 800a6de:	4e05      	ldr	r6, [pc, #20]	@ (800a6f4 <shellDeleteCommandLine+0x1c>)
    while (length--)
 800a6e0:	b904      	cbnz	r4, 800a6e4 <shellDeleteCommandLine+0xc>
}
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
        shellWriteString(shell, "\b \b");
 800a6e4:	3c01      	subs	r4, #1
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	b2e4      	uxtb	r4, r4
 800a6ec:	f7ff fdea 	bl	800a2c4 <shellWriteString>
 800a6f0:	e7f6      	b.n	800a6e0 <shellDeleteCommandLine+0x8>
 800a6f2:	bf00      	nop
 800a6f4:	08015f3e 	.word	0x08015f3e

0800a6f8 <shellClearCommandLine>:
{
 800a6f8:	b538      	push	{r3, r4, r5, lr}
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a6fa:	8984      	ldrh	r4, [r0, #12]
{
 800a6fc:	4605      	mov	r5, r0
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a6fe:	89c3      	ldrh	r3, [r0, #14]
 800a700:	1ae4      	subs	r4, r4, r3
 800a702:	b224      	sxth	r4, r4
 800a704:	2c00      	cmp	r4, #0
 800a706:	dc05      	bgt.n	800a714 <shellClearCommandLine+0x1c>
    shellDeleteCommandLine(shell, shell->parser.length);
 800a708:	7b29      	ldrb	r1, [r5, #12]
 800a70a:	4628      	mov	r0, r5
}
 800a70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    shellDeleteCommandLine(shell, shell->parser.length);
 800a710:	f7ff bfe2 	b.w	800a6d8 <shellDeleteCommandLine>
        shellWriteByte(shell, ' ');
 800a714:	2120      	movs	r1, #32
 800a716:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800a718:	3c01      	subs	r4, #1
 800a71a:	f7ff fd9e 	bl	800a25a <shellWriteByte.isra.0>
    for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a71e:	e7f0      	b.n	800a702 <shellClearCommandLine+0xa>

0800a720 <shellUp>:
{
 800a720:	b538      	push	{r3, r4, r5, lr}
                shell->history.number : shell->history.record))
 800a722:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
{
 800a726:	4604      	mov	r4, r0
                shell->history.number : shell->history.record))
 800a728:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
        if (shell->history.offset-- <= 
 800a72c:	f9b0 1054 	ldrsh.w	r1, [r0, #84]	@ 0x54
                shell->history.number : shell->history.record))
 800a730:	42ab      	cmp	r3, r5
        if (shell->history.offset-- <= 
 800a732:	f101 32ff 	add.w	r2, r1, #4294967295
                shell->history.number : shell->history.record))
 800a736:	bf38      	it	cc
 800a738:	462b      	movcc	r3, r5
            -((shell->history.number > shell->history.record) ?
 800a73a:	425b      	negs	r3, r3
            shell->history.offset = -((shell->history.number > shell->history.record)
 800a73c:	4299      	cmp	r1, r3
 800a73e:	bfd8      	it	le
 800a740:	461a      	movle	r2, r3
 800a742:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    shellClearCommandLine(shell);
 800a746:	f7ff ffd7 	bl	800a6f8 <shellClearCommandLine>
    if (shell->history.offset == 0)
 800a74a:	f9b4 2054 	ldrsh.w	r2, [r4, #84]	@ 0x54
 800a74e:	b90a      	cbnz	r2, 800a754 <shellUp+0x34>
        shell->parser.cursor = shell->parser.length = 0;
 800a750:	60e2      	str	r2, [r4, #12]
}
 800a752:	bd38      	pop	{r3, r4, r5, pc}
                shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
 800a754:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 800a758:	6920      	ldr	r0, [r4, #16]
                shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
 800a75a:	3305      	adds	r3, #5
                    + shell->history.offset) % SHELL_HISTORY_MAX_NUMBER])) == 0)
 800a75c:	4413      	add	r3, r2
 800a75e:	2205      	movs	r2, #5
 800a760:	fb93 f2f2 	sdiv	r2, r3, r2
 800a764:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a768:	1a9b      	subs	r3, r3, r2
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 800a76a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a76e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a770:	f7ff fd68 	bl	800a244 <shellStringCopy>
 800a774:	81a0      	strh	r0, [r4, #12]
 800a776:	2800      	cmp	r0, #0
 800a778:	d0eb      	beq.n	800a752 <shellUp+0x32>
        shell->parser.cursor = shell->parser.length;
 800a77a:	81e0      	strh	r0, [r4, #14]
        shellWriteString(shell, shell->parser.buffer);
 800a77c:	4620      	mov	r0, r4
 800a77e:	6921      	ldr	r1, [r4, #16]
}
 800a780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        shellWriteString(shell, shell->parser.buffer);
 800a784:	f7ff bd9e 	b.w	800a2c4 <shellWriteString>

0800a788 <shellTab>:
    if (shell->parser.length == 0)
 800a788:	8983      	ldrh	r3, [r0, #12]
{
 800a78a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78e:	4604      	mov	r4, r0
    unsigned short maxMatch = shell->parser.bufferSize;
 800a790:	f8b0 9034 	ldrh.w	r9, [r0, #52]	@ 0x34
    if (shell->parser.length == 0)
 800a794:	b93b      	cbnz	r3, 800a7a6 <shellTab+0x1e>
    shellListCommand(shell);
 800a796:	f7ff fef7 	bl	800a588 <shellListCommand>
        shellWritePrompt(shell, 1);
 800a79a:	4620      	mov	r0, r4
}
 800a79c:	b003      	add	sp, #12
 800a79e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        shellWritePrompt(shell, 1);
 800a7a2:	f7ff bda9 	b.w	800a2f8 <shellWritePrompt.constprop.0>
        shell->parser.buffer[shell->parser.length] = 0;
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	6902      	ldr	r2, [r0, #16]
    unsigned short matchNum = 0;
 800a7aa:	4635      	mov	r5, r6
        shell->parser.buffer[shell->parser.length] = 0;
 800a7ac:	54d6      	strb	r6, [r2, r3]
    unsigned short lastMatchIndex = 0;
 800a7ae:	46b0      	mov	r8, r6
        ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800a7b0:	6d87      	ldr	r7, [r0, #88]	@ 0x58
        for (short i = 0; i < shell->commandList.count; i++)
 800a7b2:	fa0f fa86 	sxth.w	sl, r6
 800a7b6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
 800a7ba:	459a      	cmp	sl, r3
 800a7bc:	db29      	blt.n	800a812 <shellTab+0x8a>
        if (matchNum == 0)
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	d071      	beq.n	800a8a6 <shellTab+0x11e>
        if (matchNum == 1)
 800a7c2:	2d01      	cmp	r5, #1
 800a7c4:	d102      	bne.n	800a7cc <shellTab+0x44>
            shellClearCommandLine(shell);
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7ff ff96 	bl	800a6f8 <shellClearCommandLine>
                                (char *)shellGetCommandName(&base[lastMatchIndex]));
 800a7cc:	eb07 1708 	add.w	r7, r7, r8, lsl #4
                shellStringCopy(shell->parser.buffer,
 800a7d0:	6926      	ldr	r6, [r4, #16]
                                (char *)shellGetCommandName(&base[lastMatchIndex]));
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f7ff fdea 	bl	800a3ac <shellGetCommandName>
 800a7d8:	4601      	mov	r1, r0
                shellStringCopy(shell->parser.buffer,
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7ff fd32 	bl	800a244 <shellStringCopy>
        if (matchNum > 1)
 800a7e0:	2d01      	cmp	r5, #1
            shell->parser.length = 
 800a7e2:	81a0      	strh	r0, [r4, #12]
        if (matchNum > 1)
 800a7e4:	d008      	beq.n	800a7f8 <shellTab+0x70>
            shellListItem(shell, &base[lastMatchIndex]);
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff fe57 	bl	800a49c <shellListItem>
            shellWritePrompt(shell, 1);
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff fd82 	bl	800a2f8 <shellWritePrompt.constprop.0>
            shell->parser.length = maxMatch;
 800a7f4:	f8a4 900c 	strh.w	r9, [r4, #12]
        shell->parser.buffer[shell->parser.length] = 0;
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6922      	ldr	r2, [r4, #16]
        shellWriteString(shell, shell->parser.buffer);
 800a7fe:	4620      	mov	r0, r4
        shell->parser.buffer[shell->parser.length] = 0;
 800a800:	54d1      	strb	r1, [r2, r3]
        shell->parser.cursor = shell->parser.length;
 800a802:	89a3      	ldrh	r3, [r4, #12]
        shellWriteString(shell, shell->parser.buffer);
 800a804:	6921      	ldr	r1, [r4, #16]
        shell->parser.cursor = shell->parser.length;
 800a806:	81e3      	strh	r3, [r4, #14]
}
 800a808:	b003      	add	sp, #12
 800a80a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        shellWriteString(shell, shell->parser.buffer);
 800a80e:	f7ff bd59 	b.w	800a2c4 <shellWriteString>
            if (shellCheckPermission(shell, &base[i]) == 0
 800a812:	eb07 1a0a 	add.w	sl, r7, sl, lsl #4
 800a816:	4620      	mov	r0, r4
 800a818:	4651      	mov	r1, sl
 800a81a:	f7ff fd99 	bl	800a350 <shellCheckPermission>
 800a81e:	4683      	mov	fp, r0
 800a820:	2800      	cmp	r0, #0
 800a822:	d13a      	bne.n	800a89a <shellTab+0x112>
                && shellStringCompare(shell->parser.buffer,
 800a824:	6923      	ldr	r3, [r4, #16]
                                   (char *)shellGetCommandName(&base[i]))
 800a826:	4650      	mov	r0, sl
                && shellStringCompare(shell->parser.buffer,
 800a828:	9301      	str	r3, [sp, #4]
                                   (char *)shellGetCommandName(&base[i]))
 800a82a:	f7ff fdbf 	bl	800a3ac <shellGetCommandName>
    while (*(dest +i) && *(src + i))
 800a82e:	465b      	mov	r3, fp
 800a830:	b299      	uxth	r1, r3
 800a832:	9a01      	ldr	r2, [sp, #4]
 800a834:	5c52      	ldrb	r2, [r2, r1]
 800a836:	b12a      	cbz	r2, 800a844 <shellTab+0xbc>
 800a838:	5c41      	ldrb	r1, [r0, r1]
 800a83a:	b119      	cbz	r1, 800a844 <shellTab+0xbc>
        if (*(dest + i) != *(src +i))
 800a83c:	428a      	cmp	r2, r1
 800a83e:	f103 0e01 	add.w	lr, r3, #1
 800a842:	d02c      	beq.n	800a89e <shellTab+0x116>
                && shellStringCompare(shell->parser.buffer,
 800a844:	89a2      	ldrh	r2, [r4, #12]
 800a846:	b29b      	uxth	r3, r3
 800a848:	429a      	cmp	r2, r3
 800a84a:	d126      	bne.n	800a89a <shellTab+0x112>
                if (matchNum != 0)
 800a84c:	b30d      	cbz	r5, 800a892 <shellTab+0x10a>
                    if (matchNum == 1)
 800a84e:	2d01      	cmp	r5, #1
 800a850:	d103      	bne.n	800a85a <shellTab+0xd2>
                        shellWriteString(shell, "\r\n");
 800a852:	4916      	ldr	r1, [pc, #88]	@ (800a8ac <shellTab+0x124>)
 800a854:	4620      	mov	r0, r4
 800a856:	f7ff fd35 	bl	800a2c4 <shellWriteString>
                    shellListItem(shell, &base[lastMatchIndex]);
 800a85a:	eb07 1808 	add.w	r8, r7, r8, lsl #4
 800a85e:	4620      	mov	r0, r4
 800a860:	4641      	mov	r1, r8
 800a862:	f7ff fe1b 	bl	800a49c <shellListItem>
                        shellStringCompare((char *)shellGetCommandName(&base[lastMatchIndex]),
 800a866:	4640      	mov	r0, r8
 800a868:	f7ff fda0 	bl	800a3ac <shellGetCommandName>
 800a86c:	4680      	mov	r8, r0
                                           (char *)shellGetCommandName(&base[i]));
 800a86e:	4650      	mov	r0, sl
 800a870:	f7ff fd9c 	bl	800a3ac <shellGetCommandName>
    while (*(dest +i) && *(src + i))
 800a874:	2300      	movs	r3, #0
 800a876:	b29a      	uxth	r2, r3
 800a878:	f818 1002 	ldrb.w	r1, [r8, r2]
 800a87c:	b129      	cbz	r1, 800a88a <shellTab+0x102>
 800a87e:	5c82      	ldrb	r2, [r0, r2]
 800a880:	b11a      	cbz	r2, 800a88a <shellTab+0x102>
        if (*(dest + i) != *(src +i))
 800a882:	4291      	cmp	r1, r2
 800a884:	f103 0c01 	add.w	ip, r3, #1
 800a888:	d00b      	beq.n	800a8a2 <shellTab+0x11a>
                    maxMatch = (maxMatch > length) ? length : maxMatch;
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4599      	cmp	r9, r3
 800a88e:	bf28      	it	cs
 800a890:	4699      	movcs	r9, r3
                matchNum++;
 800a892:	3501      	adds	r5, #1
 800a894:	fa1f f886 	uxth.w	r8, r6
 800a898:	b2ad      	uxth	r5, r5
        for (short i = 0; i < shell->commandList.count; i++)
 800a89a:	3601      	adds	r6, #1
 800a89c:	e789      	b.n	800a7b2 <shellTab+0x2a>
 800a89e:	4673      	mov	r3, lr
 800a8a0:	e7c6      	b.n	800a830 <shellTab+0xa8>
 800a8a2:	4663      	mov	r3, ip
 800a8a4:	e7e7      	b.n	800a876 <shellTab+0xee>
}
 800a8a6:	b003      	add	sp, #12
 800a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ac:	08015b6a 	.word	0x08015b6a

0800a8b0 <shellDown>:
        if (++shell->history.offset > 0)
 800a8b0:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	b21b      	sxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
{
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
        if (++shell->history.offset > 0)
 800a8be:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
 800a8c2:	dd03      	ble.n	800a8cc <shellDown+0x1c>
            shell->history.offset = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
}
 800a8ca:	bd10      	pop	{r4, pc}
    shellClearCommandLine(shell);
 800a8cc:	f7ff ff14 	bl	800a6f8 <shellClearCommandLine>
    if (shell->history.offset == 0)
 800a8d0:	f9b4 2054 	ldrsh.w	r2, [r4, #84]	@ 0x54
 800a8d4:	b90a      	cbnz	r2, 800a8da <shellDown+0x2a>
        shell->parser.cursor = shell->parser.length = 0;
 800a8d6:	60e2      	str	r2, [r4, #12]
 800a8d8:	e7f7      	b.n	800a8ca <shellDown+0x1a>
                shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
 800a8da:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 800a8de:	6920      	ldr	r0, [r4, #16]
                shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
 800a8e0:	3305      	adds	r3, #5
                    + shell->history.offset) % SHELL_HISTORY_MAX_NUMBER])) == 0)
 800a8e2:	4413      	add	r3, r2
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	fb93 f2f2 	sdiv	r2, r3, r2
 800a8ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a8ee:	1a9b      	subs	r3, r3, r2
        if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
 800a8f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a8f6:	f7ff fca5 	bl	800a244 <shellStringCopy>
 800a8fa:	81a0      	strh	r0, [r4, #12]
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d0e4      	beq.n	800a8ca <shellDown+0x1a>
        shell->parser.cursor = shell->parser.length;
 800a900:	81e0      	strh	r0, [r4, #14]
        shellWriteString(shell, shell->parser.buffer);
 800a902:	4620      	mov	r0, r4
 800a904:	6921      	ldr	r1, [r4, #16]
}
 800a906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        shellWriteString(shell, shell->parser.buffer);
 800a90a:	f7ff bcdb 	b.w	800a2c4 <shellWriteString>
	...

0800a910 <shellInsertByte>:
    if (shell->parser.length >= shell->parser.bufferSize - 1)
 800a910:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
{
 800a912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (shell->parser.length >= shell->parser.bufferSize - 1)
 800a914:	3a01      	subs	r2, #1
 800a916:	8983      	ldrh	r3, [r0, #12]
{
 800a918:	4604      	mov	r4, r0
    if (shell->parser.length >= shell->parser.bufferSize - 1)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	db0b      	blt.n	800a936 <shellInsertByte+0x26>
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_TOO_LONG]);
 800a91e:	4930      	ldr	r1, [pc, #192]	@ (800a9e0 <shellInsertByte+0xd0>)
 800a920:	f7ff fcd0 	bl	800a2c4 <shellWriteString>
        shellWritePrompt(shell, 1);
 800a924:	4620      	mov	r0, r4
 800a926:	f7ff fce7 	bl	800a2f8 <shellWritePrompt.constprop.0>
        shellWriteString(shell, shell->parser.buffer);
 800a92a:	6921      	ldr	r1, [r4, #16]
 800a92c:	4620      	mov	r0, r4
}
 800a92e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        shellWriteString(shell, shell->parser.buffer);
 800a932:	f7ff bcc7 	b.w	800a2c4 <shellWriteString>
    if (shell->parser.cursor == shell->parser.length)
 800a936:	89c2      	ldrh	r2, [r0, #14]
 800a938:	4293      	cmp	r3, r2
 800a93a:	d115      	bne.n	800a968 <shellInsertByte+0x58>
        shell->parser.buffer[shell->parser.length++] = data;
 800a93c:	6902      	ldr	r2, [r0, #16]
 800a93e:	1c58      	adds	r0, r3, #1
 800a940:	81a0      	strh	r0, [r4, #12]
        shell->parser.buffer[shell->parser.length] = 0;
 800a942:	2000      	movs	r0, #0
        shell->parser.buffer[shell->parser.length++] = data;
 800a944:	54d1      	strb	r1, [r2, r3]
        shell->parser.buffer[shell->parser.length] = 0;
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	6922      	ldr	r2, [r4, #16]
 800a94a:	54d0      	strb	r0, [r2, r3]
        shell->parser.cursor++;
 800a94c:	89e3      	ldrh	r3, [r4, #14]
        shellWriteByte(shell, shell->status.isChecked ? data : '*');
 800a94e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
        shell->parser.cursor++;
 800a950:	3301      	adds	r3, #1
 800a952:	81e3      	strh	r3, [r4, #14]
        shellWriteByte(shell, shell->status.isChecked ? data : '*');
 800a954:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a958:	f013 0f01 	tst.w	r3, #1
}
 800a95c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        shellWriteByte(shell, shell->status.isChecked ? data : '*');
 800a960:	bf08      	it	eq
 800a962:	212a      	moveq	r1, #42	@ 0x2a
 800a964:	f7ff bc79 	b.w	800a25a <shellWriteByte.isra.0>
    else if (shell->parser.cursor < shell->parser.length)
 800a968:	d91e      	bls.n	800a9a8 <shellInsertByte+0x98>
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	2200      	movs	r2, #0
 800a96e:	b29f      	uxth	r7, r3
 800a970:	b21b      	sxth	r3, r3
 800a972:	1ab8      	subs	r0, r7, r2
                shell->parser.buffer[shell->parser.cursor + i - 1];
 800a974:	6926      	ldr	r6, [r4, #16]
 800a976:	89e5      	ldrh	r5, [r4, #14]
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a978:	b200      	sxth	r0, r0
 800a97a:	2800      	cmp	r0, #0
 800a97c:	dc15      	bgt.n	800a9aa <shellInsertByte+0x9a>
        shell->parser.buffer[shell->parser.cursor++] = data;
 800a97e:	1c6b      	adds	r3, r5, #1
 800a980:	81e3      	strh	r3, [r4, #14]
 800a982:	5571      	strb	r1, [r6, r5]
        shell->parser.buffer[++shell->parser.length] = 0;
 800a984:	2100      	movs	r1, #0
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	6922      	ldr	r2, [r4, #16]
 800a98a:	3301      	adds	r3, #1
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	54d1      	strb	r1, [r2, r3]
        for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
 800a992:	89e6      	ldrh	r6, [r4, #14]
 800a994:	3e01      	subs	r6, #1
 800a996:	b236      	sxth	r6, r6
 800a998:	89a5      	ldrh	r5, [r4, #12]
 800a99a:	42ae      	cmp	r6, r5
 800a99c:	db0d      	blt.n	800a9ba <shellInsertByte+0xaa>
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a99e:	89e3      	ldrh	r3, [r4, #14]
 800a9a0:	1aed      	subs	r5, r5, r3
 800a9a2:	b22d      	sxth	r5, r5
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	dc14      	bgt.n	800a9d2 <shellInsertByte+0xc2>
}
 800a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                shell->parser.buffer[shell->parser.cursor + i - 1];
 800a9aa:	1a98      	subs	r0, r3, r2
 800a9ac:	3201      	adds	r2, #1
 800a9ae:	4428      	add	r0, r5
 800a9b0:	1835      	adds	r5, r6, r0
 800a9b2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
            shell->parser.buffer[shell->parser.cursor + i] = 
 800a9b6:	5435      	strb	r5, [r6, r0]
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a9b8:	e7db      	b.n	800a972 <shellInsertByte+0x62>
                           shell->status.isChecked ? shell->parser.buffer[i] : '*');
 800a9ba:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
            shellWriteByte(shell, 
 800a9be:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a9c0:	07db      	lsls	r3, r3, #31
 800a9c2:	bf4a      	itet	mi
 800a9c4:	6923      	ldrmi	r3, [r4, #16]
 800a9c6:	212a      	movpl	r1, #42	@ 0x2a
 800a9c8:	5d99      	ldrbmi	r1, [r3, r6]
 800a9ca:	3601      	adds	r6, #1
 800a9cc:	f7ff fc45 	bl	800a25a <shellWriteByte.isra.0>
        for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
 800a9d0:	e7e1      	b.n	800a996 <shellInsertByte+0x86>
            shellWriteByte(shell, '\b');
 800a9d2:	2108      	movs	r1, #8
 800a9d4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a9d6:	3d01      	subs	r5, #1
 800a9d8:	f7ff fc3f 	bl	800a25a <shellWriteByte.isra.0>
        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
 800a9dc:	e7e1      	b.n	800a9a2 <shellInsertByte+0x92>
 800a9de:	bf00      	nop
 800a9e0:	08015f42 	.word	0x08015f42

0800a9e4 <shellDeleteByte>:
{
 800a9e4:	b538      	push	{r3, r4, r5, lr}
    char offset = (direction == -1) ? 1 : 0;
 800a9e6:	1c4d      	adds	r5, r1, #1
    if ((shell->parser.cursor == 0 && direction == 1)
 800a9e8:	89c3      	ldrh	r3, [r0, #14]
{
 800a9ea:	4604      	mov	r4, r0
    char offset = (direction == -1) ? 1 : 0;
 800a9ec:	426a      	negs	r2, r5
 800a9ee:	416a      	adcs	r2, r5
    if ((shell->parser.cursor == 0 && direction == 1)
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <shellDeleteByte+0x12>
 800a9f2:	2901      	cmp	r1, #1
 800a9f4:	d03d      	beq.n	800aa72 <shellDeleteByte+0x8e>
        || (shell->parser.cursor == shell->parser.length && direction == -1))
 800a9f6:	89a0      	ldrh	r0, [r4, #12]
 800a9f8:	4283      	cmp	r3, r0
 800a9fa:	d116      	bne.n	800aa2a <shellDeleteByte+0x46>
 800a9fc:	1c48      	adds	r0, r1, #1
 800a9fe:	d038      	beq.n	800aa72 <shellDeleteByte+0x8e>
    if (shell->parser.cursor == shell->parser.length && direction == 1)
 800aa00:	2901      	cmp	r1, #1
 800aa02:	d112      	bne.n	800aa2a <shellDeleteByte+0x46>
        shell->parser.cursor--;
 800aa04:	3b01      	subs	r3, #1
        shell->parser.buffer[shell->parser.length] = 0;
 800aa06:	6922      	ldr	r2, [r4, #16]
 800aa08:	2000      	movs	r0, #0
        shell->parser.cursor--;
 800aa0a:	81e3      	strh	r3, [r4, #14]
        shell->parser.length--;
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	81a3      	strh	r3, [r4, #12]
        shell->parser.buffer[shell->parser.length] = 0;
 800aa10:	54d0      	strb	r0, [r2, r3]
        shellDeleteCommandLine(shell, 1);
 800aa12:	4620      	mov	r0, r4
}
 800aa14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        shellDeleteCommandLine(shell, 1);
 800aa18:	f7ff be5e 	b.w	800a6d8 <shellDeleteCommandLine>
                shell->parser.buffer[shell->parser.cursor + i];
 800aa1c:	6920      	ldr	r0, [r4, #16]
 800aa1e:	4413      	add	r3, r2
 800aa20:	3201      	adds	r2, #1
 800aa22:	5cc5      	ldrb	r5, [r0, r3]
            shell->parser.buffer[shell->parser.cursor + i - 1] = 
 800aa24:	4418      	add	r0, r3
 800aa26:	f800 5c01 	strb.w	r5, [r0, #-1]
        for (short i = offset; i < shell->parser.length - shell->parser.cursor; i++)
 800aa2a:	89a0      	ldrh	r0, [r4, #12]
 800aa2c:	b212      	sxth	r2, r2
 800aa2e:	89e3      	ldrh	r3, [r4, #14]
 800aa30:	1ac5      	subs	r5, r0, r3
 800aa32:	42aa      	cmp	r2, r5
 800aa34:	dbf2      	blt.n	800aa1c <shellDeleteByte+0x38>
        shell->parser.length--;
 800aa36:	3801      	subs	r0, #1
        if (!offset)
 800aa38:	3101      	adds	r1, #1
        shell->parser.length--;
 800aa3a:	81a0      	strh	r0, [r4, #12]
        if (!offset)
 800aa3c:	d005      	beq.n	800aa4a <shellDeleteByte+0x66>
            shell->parser.cursor--;
 800aa3e:	3b01      	subs	r3, #1
            shellWriteByte(shell, '\b');
 800aa40:	2108      	movs	r1, #8
 800aa42:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
            shell->parser.cursor--;
 800aa44:	81e3      	strh	r3, [r4, #14]
            shellWriteByte(shell, '\b');
 800aa46:	f7ff fc08 	bl	800a25a <shellWriteByte.isra.0>
        shell->parser.buffer[shell->parser.length] = 0;
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	54d1      	strb	r1, [r2, r3]
        for (short i = shell->parser.cursor; i < shell->parser.length; i++)
 800aa52:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800aa5a:	429d      	cmp	r5, r3
 800aa5c:	db0a      	blt.n	800aa74 <shellDeleteByte+0x90>
        shellWriteByte(shell, ' ');
 800aa5e:	2120      	movs	r1, #32
 800aa60:	f7ff fbfb 	bl	800a25a <shellWriteByte.isra.0>
        for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
 800aa64:	89a5      	ldrh	r5, [r4, #12]
 800aa66:	89e3      	ldrh	r3, [r4, #14]
 800aa68:	3501      	adds	r5, #1
 800aa6a:	1aed      	subs	r5, r5, r3
 800aa6c:	b22d      	sxth	r5, r5
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	dc07      	bgt.n	800aa82 <shellDeleteByte+0x9e>
}
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
            shellWriteByte(shell, shell->parser.buffer[i]);
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	5d59      	ldrb	r1, [r3, r5]
 800aa78:	3501      	adds	r5, #1
 800aa7a:	f7ff fbee 	bl	800a25a <shellWriteByte.isra.0>
        for (short i = shell->parser.cursor; i < shell->parser.length; i++)
 800aa7e:	b22d      	sxth	r5, r5
 800aa80:	e7e9      	b.n	800aa56 <shellDeleteByte+0x72>
            shellWriteByte(shell, '\b');
 800aa82:	2108      	movs	r1, #8
 800aa84:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800aa86:	3d01      	subs	r5, #1
 800aa88:	f7ff fbe7 	bl	800a25a <shellWriteByte.isra.0>
        for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
 800aa8c:	e7ee      	b.n	800aa6c <shellDeleteByte+0x88>

0800aa8e <shellBackspace>:
    shellDeleteByte(shell, 1);
 800aa8e:	2101      	movs	r1, #1
 800aa90:	f7ff bfa8 	b.w	800a9e4 <shellDeleteByte>

0800aa94 <shellDelete>:
    shellDeleteByte(shell, -1);
 800aa94:	f04f 31ff 	mov.w	r1, #4294967295
 800aa98:	f7ff bfa4 	b.w	800a9e4 <shellDeleteByte>

0800aa9c <shellSplit>:
{
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	4607      	mov	r7, r0
 800aaa4:	4690      	mov	r8, r2
    unsigned char pairedLeft[16] = {0};
 800aaa6:	2210      	movs	r2, #16
{
 800aaa8:	9101      	str	r1, [sp, #4]
    unsigned char pairedLeft[16] = {0};
 800aaaa:	a802      	add	r0, sp, #8
 800aaac:	2100      	movs	r1, #0
{
 800aaae:	4699      	mov	r9, r3
 800aab0:	f9bd a040 	ldrsh.w	sl, [sp, #64]	@ 0x40
    unsigned char pairedLeft[16] = {0};
 800aab4:	f009 fff6 	bl	8014aa4 <memset>
    for (short i = 0; i < maxNum; i++)
 800aab8:	2300      	movs	r3, #0
 800aaba:	4619      	mov	r1, r3
 800aabc:	b21a      	sxth	r2, r3
 800aabe:	4552      	cmp	r2, sl
 800aac0:	db0b      	blt.n	800aada <shellSplit+0x3e>
    for (unsigned short i = 0; i < strLen; i++)
 800aac2:	2100      	movs	r1, #0
    unsigned char record = 1;
 800aac4:	2501      	movs	r5, #1
                && pairedLeft[pariedCount - 1] == pairedChars[j][0])
 800aac6:	4a26      	ldr	r2, [pc, #152]	@ (800ab60 <shellSplit+0xc4>)
    int count = 0;
 800aac8:	4608      	mov	r0, r1
    unsigned char pariedCount = 0;
 800aaca:	460c      	mov	r4, r1
                string[i] = 0;
 800aacc:	468e      	mov	lr, r1
    for (unsigned short i = 0; i < strLen; i++)
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	4299      	cmp	r1, r3
 800aad2:	d306      	bcc.n	800aae2 <shellSplit+0x46>
}
 800aad4:	b007      	add	sp, #28
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        array[i] = NULL;
 800aada:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
    for (short i = 0; i < maxNum; i++)
 800aade:	3301      	adds	r3, #1
 800aae0:	e7ec      	b.n	800aabc <shellSplit+0x20>
            if (string[i] != splitKey && record == 1 && count < maxNum)
 800aae2:	187e      	adds	r6, r7, r1
 800aae4:	5c7b      	ldrb	r3, [r7, r1]
        if (pariedCount == 0)
 800aae6:	b94c      	cbnz	r4, 800aafc <shellSplit+0x60>
            if (string[i] != splitKey && record == 1 && count < maxNum)
 800aae8:	4599      	cmp	r9, r3
 800aaea:	d01f      	beq.n	800ab2c <shellSplit+0x90>
 800aaec:	2d00      	cmp	r5, #0
 800aaee:	d034      	beq.n	800ab5a <shellSplit+0xbe>
 800aaf0:	4582      	cmp	sl, r0
 800aaf2:	dd03      	ble.n	800aafc <shellSplit+0x60>
                array[count++] = &(string[i]);
 800aaf4:	f848 6020 	str.w	r6, [r8, r0, lsl #2]
                record = 0;
 800aaf8:	4625      	mov	r5, r4
                array[count++] = &(string[i]);
 800aafa:	3001      	adds	r0, #1
                && string[i] == pairedChars[j][1]
 800aafc:	7833      	ldrb	r3, [r6, #0]
                && pairedLeft[pariedCount - 1] == pairedChars[j][0])
 800aafe:	f892 c000 	ldrb.w	ip, [r2]
            if (pariedCount > 0
 800ab02:	b154      	cbz	r4, 800ab1a <shellSplit+0x7e>
                && string[i] == pairedChars[j][1]
 800ab04:	f892 b001 	ldrb.w	fp, [r2, #1]
 800ab08:	459b      	cmp	fp, r3
 800ab0a:	d106      	bne.n	800ab1a <shellSplit+0x7e>
                && pairedLeft[pariedCount - 1] == pairedChars[j][0])
 800ab0c:	f104 0b18 	add.w	fp, r4, #24
 800ab10:	44eb      	add	fp, sp
 800ab12:	f81b bc11 	ldrb.w	fp, [fp, #-17]
 800ab16:	45e3      	cmp	fp, ip
 800ab18:	d013      	beq.n	800ab42 <shellSplit+0xa6>
            else if (string[i] == pairedChars[j][0])
 800ab1a:	4563      	cmp	r3, ip
 800ab1c:	d014      	beq.n	800ab48 <shellSplit+0xac>
        if (string[i] == '\\' && string[i + 1] != 0)
 800ab1e:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab20:	d10c      	bne.n	800ab3c <shellSplit+0xa0>
 800ab22:	7873      	ldrb	r3, [r6, #1]
 800ab24:	b153      	cbz	r3, 800ab3c <shellSplit+0xa0>
            i++;
 800ab26:	3101      	adds	r1, #1
 800ab28:	b289      	uxth	r1, r1
 800ab2a:	e007      	b.n	800ab3c <shellSplit+0xa0>
            else if ((string[i] == splitKey || string[i] == ' ') && record == 0)
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	d1e5      	bne.n	800aafc <shellSplit+0x60>
                if (string[i + 1] != ' ')
 800ab30:	7875      	ldrb	r5, [r6, #1]
                string[i] = 0;
 800ab32:	f886 e000 	strb.w	lr, [r6]
                if (string[i + 1] != ' ')
 800ab36:	3d20      	subs	r5, #32
 800ab38:	bf18      	it	ne
 800ab3a:	2501      	movne	r5, #1
    for (unsigned short i = 0; i < strLen; i++)
 800ab3c:	3101      	adds	r1, #1
 800ab3e:	b289      	uxth	r1, r1
 800ab40:	e7c5      	b.n	800aace <shellSplit+0x32>
                --pariedCount;
 800ab42:	3c01      	subs	r4, #1
 800ab44:	b2e4      	uxtb	r4, r4
                break;
 800ab46:	e7ea      	b.n	800ab1e <shellSplit+0x82>
                pairedLeft[pariedCount++] = pairedChars[j][0];
 800ab48:	f104 0c01 	add.w	ip, r4, #1
 800ab4c:	3418      	adds	r4, #24
 800ab4e:	446c      	add	r4, sp
 800ab50:	f804 3c10 	strb.w	r3, [r4, #-16]
                pariedCount &= 0x0F;
 800ab54:	f00c 040f 	and.w	r4, ip, #15
                break;
 800ab58:	e7e1      	b.n	800ab1e <shellSplit+0x82>
            else if ((string[i] == splitKey || string[i] == ' ') && record == 0)
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d0e8      	beq.n	800ab30 <shellSplit+0x94>
 800ab5e:	e7cd      	b.n	800aafc <shellSplit+0x60>
 800ab60:	20000054 	.word	0x20000054

0800ab64 <shellSeekCommand>:
{
 800ab64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab68:	4698      	mov	r8, r3
        ((size_t)base - (size_t)shell->commandList.base) / sizeof(ShellCommand);
 800ab6a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    unsigned short count = shell->commandList.count -
 800ab6c:	f8b0 505c 	ldrh.w	r5, [r0, #92]	@ 0x5c
{
 800ab70:	4606      	mov	r6, r0
        ((size_t)base - (size_t)shell->commandList.base) / sizeof(ShellCommand);
 800ab72:	1ad3      	subs	r3, r2, r3
{
 800ab74:	460f      	mov	r7, r1
        ((size_t)base - (size_t)shell->commandList.base) / sizeof(ShellCommand);
 800ab76:	4614      	mov	r4, r2
    unsigned short count = shell->commandList.count -
 800ab78:	eba5 1513 	sub.w	r5, r5, r3, lsr #4
 800ab7c:	b2ad      	uxth	r5, r5
 800ab7e:	eb02 1505 	add.w	r5, r2, r5, lsl #4
    for (unsigned short i = 0; i < count; i++)
 800ab82:	42ac      	cmp	r4, r5
 800ab84:	d102      	bne.n	800ab8c <shellSeekCommand+0x28>
    return NULL;
 800ab86:	f04f 0900 	mov.w	r9, #0
 800ab8a:	e019      	b.n	800abc0 <shellSeekCommand+0x5c>
        if (base[i].attr.attrs.type == SHELL_TYPE_KEY
 800ab8c:	7863      	ldrb	r3, [r4, #1]
 800ab8e:	46a1      	mov	r9, r4
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d101      	bne.n	800ab9c <shellSeekCommand+0x38>
    for (unsigned short i = 0; i < count; i++)
 800ab98:	3410      	adds	r4, #16
 800ab9a:	e7f2      	b.n	800ab82 <shellSeekCommand+0x1e>
            || shellCheckPermission(shell, &base[i]) != 0)
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff fbd6 	bl	800a350 <shellCheckPermission>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d1f7      	bne.n	800ab98 <shellSeekCommand+0x34>
        name = shellGetCommandName(&base[i]);
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7ff fbff 	bl	800a3ac <shellGetCommandName>
 800abae:	4601      	mov	r1, r0
        if (!compareLength)
 800abb0:	f1b8 0f00 	cmp.w	r8, #0
 800abb4:	d107      	bne.n	800abc6 <shellSeekCommand+0x62>
            if (strcmp(cmd, name) == 0)
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7f5 fb42 	bl	8000240 <strcmp>
            if (strncmp(cmd, name, compareLength) == 0)
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d1eb      	bne.n	800ab98 <shellSeekCommand+0x34>
}
 800abc0:	4648      	mov	r0, r9
 800abc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if (strncmp(cmd, name, compareLength) == 0)
 800abc6:	4642      	mov	r2, r8
 800abc8:	4638      	mov	r0, r7
 800abca:	f009 ff80 	bl	8014ace <strncmp>
 800abce:	e7f5      	b.n	800abbc <shellSeekCommand+0x58>

0800abd0 <shellHelp>:
{
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4606      	mov	r6, r0
 800abd4:	460d      	mov	r5, r1
    Shell *shell = shellGetCurrent();
 800abd6:	f7ff fb63 	bl	800a2a0 <shellGetCurrent>
 800abda:	4604      	mov	r4, r0
    SHELL_ASSERT(shell, return);
 800abdc:	b340      	cbz	r0, 800ac30 <shellHelp+0x60>
    if (argc == 1)
 800abde:	2e01      	cmp	r6, #1
 800abe0:	d103      	bne.n	800abea <shellHelp+0x1a>
}
 800abe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    shellListCommand(shell);
 800abe6:	f7ff bccf 	b.w	800a588 <shellListCommand>
    else if (argc > 1)
 800abea:	dd21      	ble.n	800ac30 <shellHelp+0x60>
    ShellCommand *command = shellSeekCommand(shell,
 800abec:	6869      	ldr	r1, [r5, #4]
 800abee:	2300      	movs	r3, #0
 800abf0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800abf2:	f7ff ffb7 	bl	800ab64 <shellSeekCommand>
    if (command)
 800abf6:	4605      	mov	r5, r0
 800abf8:	b1c0      	cbz	r0, 800ac2c <shellHelp+0x5c>
        shellWriteString(shell, shellText[SHELL_TEXT_HELP_HEADER]);
 800abfa:	490e      	ldr	r1, [pc, #56]	@ (800ac34 <shellHelp+0x64>)
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7ff fb61 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, shellGetCommandName(command));
 800ac02:	4628      	mov	r0, r5
 800ac04:	f7ff fbd2 	bl	800a3ac <shellGetCommandName>
 800ac08:	4601      	mov	r1, r0
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f7ff fb5a 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, "\r\n");
 800ac10:	4909      	ldr	r1, [pc, #36]	@ (800ac38 <shellHelp+0x68>)
 800ac12:	4620      	mov	r0, r4
 800ac14:	f7ff fb56 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, shellGetCommandDesc(command));
 800ac18:	68e9      	ldr	r1, [r5, #12]
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7ff fb52 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, "\r\n");
 800ac20:	4905      	ldr	r1, [pc, #20]	@ (800ac38 <shellHelp+0x68>)
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 800ac22:	4620      	mov	r0, r4
}
 800ac24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 800ac28:	f7ff bb4c 	b.w	800a2c4 <shellWriteString>
 800ac2c:	4903      	ldr	r1, [pc, #12]	@ (800ac3c <shellHelp+0x6c>)
 800ac2e:	e7f8      	b.n	800ac22 <shellHelp+0x52>
}
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	bf00      	nop
 800ac34:	08015f63 	.word	0x08015f63
 800ac38:	08015b6a 	.word	0x08015b6a
 800ac3c:	08015f74 	.word	0x08015f74

0800ac40 <shellGetVarValue>:
    switch (command->attr.attrs.type)
 800ac40:	784b      	ldrb	r3, [r1, #1]
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	3b02      	subs	r3, #2
 800ac48:	2b05      	cmp	r3, #5
 800ac4a:	d815      	bhi.n	800ac78 <shellGetVarValue+0x38>
 800ac4c:	e8df f003 	tbb	[pc, r3]
 800ac50:	0d0a0603 	.word	0x0d0a0603
 800ac54:	0f0d      	.short	0x0f0d
        value = *((int *)(command->data.var.value));
 800ac56:	688b      	ldr	r3, [r1, #8]
 800ac58:	6818      	ldr	r0, [r3, #0]
        break;
 800ac5a:	4770      	bx	lr
        value = *((short *)(command->data.var.value));
 800ac5c:	688b      	ldr	r3, [r1, #8]
 800ac5e:	f9b3 0000 	ldrsh.w	r0, [r3]
        break;
 800ac62:	4770      	bx	lr
        value = *((char *)(command->data.var.value));
 800ac64:	688b      	ldr	r3, [r1, #8]
 800ac66:	7818      	ldrb	r0, [r3, #0]
        break;
 800ac68:	4770      	bx	lr
        value = (size_t)(command->data.var.value);
 800ac6a:	6888      	ldr	r0, [r1, #8]
        break;
 800ac6c:	4770      	bx	lr
 800ac6e:	688a      	ldr	r2, [r1, #8]
        int (*func)(void *) = ((ShellNodeVarAttr *)command->data.var.value)->get;
 800ac70:	6853      	ldr	r3, [r2, #4]
        value = func ? func(((ShellNodeVarAttr *)command->data.var.value)->var) : 0;
 800ac72:	b10b      	cbz	r3, 800ac78 <shellGetVarValue+0x38>
 800ac74:	6810      	ldr	r0, [r2, #0]
 800ac76:	4718      	bx	r3
    switch (command->attr.attrs.type)
 800ac78:	2000      	movs	r0, #0
 800ac7a:	4770      	bx	lr

0800ac7c <shellShowVar>:
{
 800ac7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    char buffer[12] = "00000000000";
 800ac7e:	4a24      	ldr	r2, [pc, #144]	@ (800ad10 <shellShowVar+0x94>)
{
 800ac80:	4604      	mov	r4, r0
 800ac82:	460e      	mov	r6, r1
    char buffer[12] = "00000000000";
 800ac84:	ab01      	add	r3, sp, #4
 800ac86:	6810      	ldr	r0, [r2, #0]
 800ac88:	6851      	ldr	r1, [r2, #4]
 800ac8a:	c303      	stmia	r3!, {r0, r1}
 800ac8c:	6890      	ldr	r0, [r2, #8]
    int value = shellGetVarValue(shell, command);
 800ac8e:	4631      	mov	r1, r6
    char buffer[12] = "00000000000";
 800ac90:	6018      	str	r0, [r3, #0]
    int value = shellGetVarValue(shell, command);
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff ffd4 	bl	800ac40 <shellGetVarValue>
    shellWriteString(shell, command->data.var.name);
 800ac98:	6871      	ldr	r1, [r6, #4]
    int value = shellGetVarValue(shell, command);
 800ac9a:	4605      	mov	r5, r0
    shellWriteString(shell, command->data.var.name);
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f7ff fb11 	bl	800a2c4 <shellWriteString>
    shellWriteString(shell, " = ");
 800aca2:	491c      	ldr	r1, [pc, #112]	@ (800ad14 <shellShowVar+0x98>)
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7ff fb0d 	bl	800a2c4 <shellWriteString>
    switch (command->attr.attrs.type)
 800acaa:	7873      	ldrb	r3, [r6, #1]
 800acac:	f003 030f 	and.w	r3, r3, #15
 800acb0:	2b05      	cmp	r3, #5
 800acb2:	d112      	bne.n	800acda <shellShowVar+0x5e>
        shellWriteString(shell, "\"");
 800acb4:	4918      	ldr	r1, [pc, #96]	@ (800ad18 <shellShowVar+0x9c>)
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff fb04 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, (char *) (size_t) value);
 800acbc:	4629      	mov	r1, r5
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff fb00 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, "\"");
 800acc4:	4914      	ldr	r1, [pc, #80]	@ (800ad18 <shellShowVar+0x9c>)
        shellWriteString(shell, buffer);
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7ff fafc 	bl	800a2c4 <shellWriteString>
    shellWriteString(shell, "\r\n");
 800accc:	4913      	ldr	r1, [pc, #76]	@ (800ad1c <shellShowVar+0xa0>)
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff faf8 	bl	800a2c4 <shellWriteString>
}
 800acd4:	4628      	mov	r0, r5
 800acd6:	b004      	add	sp, #16
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
        shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
 800acda:	a901      	add	r1, sp, #4
 800acdc:	4628      	mov	r0, r5
 800acde:	f7ff fb7f 	bl	800a3e0 <shellToDec>
 800ace2:	ab01      	add	r3, sp, #4
 800ace4:	f1c0 010b 	rsb	r1, r0, #11
 800ace8:	4620      	mov	r0, r4
 800acea:	4419      	add	r1, r3
 800acec:	f7ff faea 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, ", 0x");
 800acf0:	490b      	ldr	r1, [pc, #44]	@ (800ad20 <shellShowVar+0xa4>)
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7ff fae6 	bl	800a2c4 <shellWriteString>
            buffer[i] = '0';
 800acf8:	f04f 3330 	mov.w	r3, #808464432	@ 0x30303030
        shellToHex(value, buffer);
 800acfc:	a901      	add	r1, sp, #4
 800acfe:	4628      	mov	r0, r5
            buffer[i] = '0';
 800ad00:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800ad04:	f8cd 300b 	str.w	r3, [sp, #11]
        shellToHex(value, buffer);
 800ad08:	f7ff fb3d 	bl	800a386 <shellToHex>
 800ad0c:	e7db      	b.n	800acc6 <shellShowVar+0x4a>
 800ad0e:	bf00      	nop
 800ad10:	08015ed8 	.word	0x08015ed8
 800ad14:	08015f88 	.word	0x08015f88
 800ad18:	08015f8c 	.word	0x08015f8c
 800ad1c:	08015b6a 	.word	0x08015b6a
 800ad20:	08015ed3 	.word	0x08015ed3

0800ad24 <shellSetVarValue>:
{
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4605      	mov	r5, r0
    if (command->attr.attrs.readOnly)
 800ad2c:	7863      	ldrb	r3, [r4, #1]
 800ad2e:	065a      	lsls	r2, r3, #25
 800ad30:	d503      	bpl.n	800ad3a <shellSetVarValue+0x16>
        shellWriteString(shell, shellText[SHELL_TEXT_VAR_READ_ONLY_CANNOT_MODIFY]);
 800ad32:	4916      	ldr	r1, [pc, #88]	@ (800ad8c <shellSetVarValue+0x68>)
            shellWriteString(shell, shellText[SHELL_TEXT_POINT_CANNOT_MODIFY]);
 800ad34:	f7ff fac6 	bl	800a2c4 <shellWriteString>
            break;
 800ad38:	e00b      	b.n	800ad52 <shellSetVarValue+0x2e>
        switch (command->attr.attrs.type)
 800ad3a:	f003 030f 	and.w	r3, r3, #15
 800ad3e:	3b02      	subs	r3, #2
 800ad40:	2b05      	cmp	r3, #5
 800ad42:	d806      	bhi.n	800ad52 <shellSetVarValue+0x2e>
 800ad44:	e8df f003 	tbb	[pc, r3]
 800ad48:	110e0b03 	.word	0x110e0b03
 800ad4c:	1715      	.short	0x1715
            *((int *)(command->data.var.value)) = value;
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	6019      	str	r1, [r3, #0]
    return shellShowVar(shell, command);
 800ad52:	4621      	mov	r1, r4
 800ad54:	4628      	mov	r0, r5
}
 800ad56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return shellShowVar(shell, command);
 800ad5a:	f7ff bf8f 	b.w	800ac7c <shellShowVar>
            *((short *)(command->data.var.value)) = value;
 800ad5e:	68a3      	ldr	r3, [r4, #8]
 800ad60:	8019      	strh	r1, [r3, #0]
            break;
 800ad62:	e7f6      	b.n	800ad52 <shellSetVarValue+0x2e>
            *((char *)(command->data.var.value)) = value;
 800ad64:	68a3      	ldr	r3, [r4, #8]
 800ad66:	7019      	strb	r1, [r3, #0]
            break;
 800ad68:	e7f3      	b.n	800ad52 <shellSetVarValue+0x2e>
            shellStringCopy(((char *)(command->data.var.value)), (char *) (size_t) value);
 800ad6a:	68a0      	ldr	r0, [r4, #8]
 800ad6c:	f7ff fa6a 	bl	800a244 <shellStringCopy>
            break;
 800ad70:	e7ef      	b.n	800ad52 <shellSetVarValue+0x2e>
            shellWriteString(shell, shellText[SHELL_TEXT_POINT_CANNOT_MODIFY]);
 800ad72:	4907      	ldr	r1, [pc, #28]	@ (800ad90 <shellSetVarValue+0x6c>)
 800ad74:	e7de      	b.n	800ad34 <shellSetVarValue+0x10>
            if (((ShellNodeVarAttr *)command->data.var.value)->set)
 800ad76:	68a2      	ldr	r2, [r4, #8]
 800ad78:	6893      	ldr	r3, [r2, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0e9      	beq.n	800ad52 <shellSetVarValue+0x2e>
                if (((ShellNodeVarAttr *)command->data.var.value)->var)
 800ad7e:	6810      	ldr	r0, [r2, #0]
 800ad80:	b108      	cbz	r0, 800ad86 <shellSetVarValue+0x62>
                    func(((ShellNodeVarAttr *)command->data.var.value)->var, value);
 800ad82:	4798      	blx	r3
 800ad84:	e7e5      	b.n	800ad52 <shellSetVarValue+0x2e>
                    func(value);
 800ad86:	4608      	mov	r0, r1
 800ad88:	4798      	blx	r3
 800ad8a:	e7e2      	b.n	800ad52 <shellSetVarValue+0x2e>
 800ad8c:	08015f8e 	.word	0x08015f8e
 800ad90:	08015fa8 	.word	0x08015fa8

0800ad94 <shellSetVar>:
{
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	4605      	mov	r5, r0
 800ad98:	460e      	mov	r6, r1
    Shell *shell = shellGetCurrent();
 800ad9a:	f7ff fa81 	bl	800a2a0 <shellGetCurrent>
    if (shell == NULL)
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b150      	cbz	r0, 800adb8 <shellSetVar+0x24>
    ShellCommand *command = shellSeekCommand(shell,
 800ada2:	4629      	mov	r1, r5
 800ada4:	2300      	movs	r3, #0
 800ada6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800ada8:	f7ff fedc 	bl	800ab64 <shellSeekCommand>
    if (!command)
 800adac:	4601      	mov	r1, r0
 800adae:	b928      	cbnz	r0, 800adbc <shellSetVar+0x28>
        shellWriteString(shell, shellText[SHELL_TEXT_VAR_NOT_FOUND]);
 800adb0:	490b      	ldr	r1, [pc, #44]	@ (800ade0 <shellSetVar+0x4c>)
        shellWriteString(shell, shellText[SHELL_TEXT_NOT_VAR]);
 800adb2:	4620      	mov	r0, r4
 800adb4:	f7ff fa86 	bl	800a2c4 <shellWriteString>
}
 800adb8:	2000      	movs	r0, #0
 800adba:	bd70      	pop	{r4, r5, r6, pc}
    if (command->attr.attrs.type < SHELL_TYPE_VAR_INT
 800adbc:	7843      	ldrb	r3, [r0, #1]
        || command->attr.attrs.type > SHELL_TYPE_VAR_NODE)
 800adbe:	330e      	adds	r3, #14
    if (command->attr.attrs.type < SHELL_TYPE_VAR_INT
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d905      	bls.n	800add4 <shellSetVar+0x40>
        shellWriteString(shell, name);
 800adc8:	4629      	mov	r1, r5
 800adca:	4620      	mov	r0, r4
 800adcc:	f7ff fa7a 	bl	800a2c4 <shellWriteString>
        shellWriteString(shell, shellText[SHELL_TEXT_NOT_VAR]);
 800add0:	4904      	ldr	r1, [pc, #16]	@ (800ade4 <shellSetVar+0x50>)
 800add2:	e7ee      	b.n	800adb2 <shellSetVar+0x1e>
    return shellSetVarValue(shell, command, value);
 800add4:	4632      	mov	r2, r6
 800add6:	4620      	mov	r0, r4
}
 800add8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return shellSetVarValue(shell, command, value);
 800addc:	f7ff bfa2 	b.w	800ad24 <shellSetVarValue>
 800ade0:	08015fbc 	.word	0x08015fbc
 800ade4:	08015fcc 	.word	0x08015fcc

0800ade8 <shellSetUser>:
{
 800ade8:	b510      	push	{r4, lr}
 800adea:	4604      	mov	r4, r0
    shell->info.user = user;
 800adec:	6001      	str	r1, [r0, #0]
        ((user->data.user.password && strlen(user->data.user.password) != 0)
 800adee:	6888      	ldr	r0, [r1, #8]
         ? 0 : 1;
 800adf0:	b1f0      	cbz	r0, 800ae30 <shellSetUser+0x48>
        ((user->data.user.password && strlen(user->data.user.password) != 0)
 800adf2:	7803      	ldrb	r3, [r0, #0]
 800adf4:	b1e3      	cbz	r3, 800ae30 <shellSetUser+0x48>
         ? 0 : 1;
 800adf6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d91b      	bls.n	800ae34 <shellSetUser+0x4c>
                || strcmp(user->data.user.password, shell->parser.param[1]) != 0))
 800adfc:	69a1      	ldr	r1, [r4, #24]
 800adfe:	f7f5 fa1f 	bl	8000240 <strcmp>
 800ae02:	fab0 f080 	clz	r0, r0
 800ae06:	0940      	lsrs	r0, r0, #5
    shell->status.isChecked = 
 800ae08:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
    shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 800ae0c:	490b      	ldr	r1, [pc, #44]	@ (800ae3c <shellSetUser+0x54>)
    shell->status.isChecked = 
 800ae0e:	f360 0300 	bfi	r3, r0, #0, #1
    shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 800ae12:	4620      	mov	r0, r4
    shell->status.isChecked = 
 800ae14:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
 800ae18:	f7ff fa54 	bl	800a2c4 <shellWriteString>
    if (shell->status.isChecked)
 800ae1c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ae20:	07db      	lsls	r3, r3, #31
 800ae22:	d509      	bpl.n	800ae38 <shellSetUser+0x50>
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 800ae24:	4620      	mov	r0, r4
 800ae26:	4906      	ldr	r1, [pc, #24]	@ (800ae40 <shellSetUser+0x58>)
}
 800ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 800ae2c:	f7ff ba4a 	b.w	800a2c4 <shellWriteString>
         ? 0 : 1;
 800ae30:	2001      	movs	r0, #1
 800ae32:	e7e9      	b.n	800ae08 <shellSetUser+0x20>
 800ae34:	2000      	movs	r0, #0
 800ae36:	e7e7      	b.n	800ae08 <shellSetUser+0x20>
}
 800ae38:	bd10      	pop	{r4, pc}
 800ae3a:	bf00      	nop
 800ae3c:	08015ea5 	.word	0x08015ea5
 800ae40:	08015fdc 	.word	0x08015fdc

0800ae44 <shellInit>:
    shell->parser.length = 0;
 800ae44:	2300      	movs	r3, #0
{
 800ae46:	b510      	push	{r4, lr}
 800ae48:	4604      	mov	r4, r0
    shell->parser.length = 0;
 800ae4a:	60c3      	str	r3, [r0, #12]
    shell->info.user = NULL;
 800ae4c:	6003      	str	r3, [r0, #0]
    shell->status.isChecked = 1;
 800ae4e:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
    shell->parser.buffer = buffer;
 800ae52:	6121      	str	r1, [r4, #16]
    shell->status.isChecked = 1;
 800ae54:	f040 0001 	orr.w	r0, r0, #1
    shell->history.number = 0;
 800ae58:	6523      	str	r3, [r4, #80]	@ 0x50
    shell->history.offset = 0;
 800ae5a:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800ae5e:	f104 0338 	add.w	r3, r4, #56	@ 0x38
    shell->status.isChecked = 1;
 800ae62:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    shell->parser.bufferSize = size / (SHELL_HISTORY_MAX_NUMBER + 1);
 800ae66:	2006      	movs	r0, #6
 800ae68:	fbb2 f2f0 	udiv	r2, r2, r0
 800ae6c:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800ae70:	4411      	add	r1, r2
 800ae72:	86a2      	strh	r2, [r4, #52]	@ 0x34
        shell->history.item[i] = buffer + shell->parser.bufferSize * (i + 1);
 800ae74:	f843 1f04 	str.w	r1, [r3, #4]!
    for (short i = 0; i < SHELL_HISTORY_MAX_NUMBER; i++)
 800ae78:	4283      	cmp	r3, r0
 800ae7a:	4411      	add	r1, r2
 800ae7c:	d1fa      	bne.n	800ae74 <shellInit+0x30>
        shell->commandList.base = (ShellCommand *)(&_shell_command_start);
 800ae7e:	4a11      	ldr	r2, [pc, #68]	@ (800aec4 <shellInit+0x80>)
                                - (size_t)(&_shell_command_start))
 800ae80:	4b11      	ldr	r3, [pc, #68]	@ (800aec8 <shellInit+0x84>)
        shell->commandList.base = (ShellCommand *)(&_shell_command_start);
 800ae82:	65a2      	str	r2, [r4, #88]	@ 0x58
                                - (size_t)(&_shell_command_start))
 800ae84:	1a9b      	subs	r3, r3, r2
 800ae86:	4a11      	ldr	r2, [pc, #68]	@ (800aecc <shellInit+0x88>)
                                / sizeof(ShellCommand);
 800ae88:	091b      	lsrs	r3, r3, #4
 800ae8a:	4611      	mov	r1, r2
        shell->commandList.count = ((size_t)(&_shell_command_end)
 800ae8c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800ae90:	2300      	movs	r3, #0
        if (shellList[i] == NULL)
 800ae92:	f852 0b04 	ldr.w	r0, [r2], #4
 800ae96:	b980      	cbnz	r0, 800aeba <shellInit+0x76>
            shellList[i] = shell;
 800ae98:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
    shellSetUser(shell, shellSeekCommand(shell,
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4a09      	ldr	r2, [pc, #36]	@ (800aec4 <shellInit+0x80>)
 800aea0:	490b      	ldr	r1, [pc, #44]	@ (800aed0 <shellInit+0x8c>)
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7ff fe5e 	bl	800ab64 <shellSeekCommand>
 800aea8:	4601      	mov	r1, r0
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f7ff ff9c 	bl	800ade8 <shellSetUser>
    shellWritePrompt(shell, 1);
 800aeb0:	4620      	mov	r0, r4
}
 800aeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    shellWritePrompt(shell, 1);
 800aeb6:	f7ff ba1f 	b.w	800a2f8 <shellWritePrompt.constprop.0>
    for (short i = 0; i < SHELL_MAX_NUMBER; i++)
 800aeba:	3301      	adds	r3, #1
 800aebc:	2b05      	cmp	r3, #5
 800aebe:	d1e8      	bne.n	800ae92 <shellInit+0x4e>
 800aec0:	e7ec      	b.n	800ae9c <shellInit+0x58>
 800aec2:	bf00      	nop
 800aec4:	0808eed6 	.word	0x0808eed6
 800aec8:	0808f016 	.word	0x0808f016
 800aecc:	2000b500 	.word	0x2000b500
 800aed0:	08016135 	.word	0x08016135

0800aed4 <shellRunCommand>:
    shell->status.isActive = 1;
 800aed4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800aed8:	f043 0302 	orr.w	r3, r3, #2
{
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    shell->status.isActive = 1;
 800aee0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
{
 800aee4:	4604      	mov	r4, r0
    if (command->attr.attrs.type == SHELL_TYPE_CMD_MAIN)
 800aee6:	784b      	ldrb	r3, [r1, #1]
{
 800aee8:	460e      	mov	r6, r1
    if (command->attr.attrs.type == SHELL_TYPE_CMD_MAIN)
 800aeea:	f013 050f 	ands.w	r5, r3, #15
 800aeee:	d132      	bne.n	800af56 <shellRunCommand+0x82>
            shell->parser.param[i][0] = 0;
 800aef0:	46a8      	mov	r8, r5
 800aef2:	e017      	b.n	800af24 <shellRunCommand+0x50>
        if (shell->parser.param[i][0] == '\"')
 800aef4:	b2ab      	uxth	r3, r5
 800aef6:	3501      	adds	r5, #1
 800aef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aefc:	695a      	ldr	r2, [r3, #20]
 800aefe:	7811      	ldrb	r1, [r2, #0]
 800af00:	2922      	cmp	r1, #34	@ 0x22
            shell->parser.param[i][0] = 0;
 800af02:	bf01      	itttt	eq
 800af04:	f882 8000 	strbeq.w	r8, [r2]
            shell->parser.param[i] = &shell->parser.param[i][1];
 800af08:	695a      	ldreq	r2, [r3, #20]
 800af0a:	3201      	addeq	r2, #1
 800af0c:	615a      	streq	r2, [r3, #20]
        paramLength = strlen(shell->parser.param[i]);
 800af0e:	695f      	ldr	r7, [r3, #20]
 800af10:	4638      	mov	r0, r7
 800af12:	f7f5 f99f 	bl	8000254 <strlen>
        if (shell->parser.param[i][paramLength - 1] == '\"')
 800af16:	b280      	uxth	r0, r0
 800af18:	3801      	subs	r0, #1
 800af1a:	5c3b      	ldrb	r3, [r7, r0]
 800af1c:	2b22      	cmp	r3, #34	@ 0x22
            shell->parser.param[i][paramLength - 1] = 0;
 800af1e:	bf08      	it	eq
 800af20:	f807 8000 	strbeq.w	r8, [r7, r0]
    for (unsigned short i = 0; i < shell->parser.paramCount; i++)
 800af24:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800af26:	b2ab      	uxth	r3, r5
 800af28:	4283      	cmp	r3, r0
 800af2a:	d3e3      	bcc.n	800aef4 <shellRunCommand+0x20>
        returnValue = func(shell->parser.paramCount, shell->parser.param);
 800af2c:	68b3      	ldr	r3, [r6, #8]
 800af2e:	f104 0114 	add.w	r1, r4, #20
 800af32:	4798      	blx	r3
        if (!command->attr.attrs.disableReturn)
 800af34:	7873      	ldrb	r3, [r6, #1]
        returnValue = shellExtRun(shell,
 800af36:	4605      	mov	r5, r0
        if (!command->attr.attrs.disableReturn)
 800af38:	069b      	lsls	r3, r3, #26
 800af3a:	d403      	bmi.n	800af44 <shellRunCommand+0x70>
            shellWriteReturnValue(shell, returnValue);
 800af3c:	4601      	mov	r1, r0
 800af3e:	4620      	mov	r0, r4
 800af40:	f7ff fa72 	bl	800a428 <shellWriteReturnValue>
    shell->status.isActive = 0;
 800af44:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
}
 800af48:	4628      	mov	r0, r5
    shell->status.isActive = 0;
 800af4a:	f023 0302 	bic.w	r3, r3, #2
 800af4e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (command->attr.attrs.type == SHELL_TYPE_CMD_FUNC)
 800af56:	2d01      	cmp	r5, #1
 800af58:	d105      	bne.n	800af66 <shellRunCommand+0x92>
        returnValue = shellExtRun(shell,
 800af5a:	f100 0314 	add.w	r3, r0, #20
 800af5e:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 800af60:	f000 f9f0 	bl	800b344 <shellExtRun>
 800af64:	e7e6      	b.n	800af34 <shellRunCommand+0x60>
        && command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
 800af66:	330e      	adds	r3, #14
    else if (command->attr.attrs.type >= SHELL_TYPE_VAR_INT
 800af68:	f003 030f 	and.w	r3, r3, #15
 800af6c:	2b05      	cmp	r3, #5
 800af6e:	d803      	bhi.n	800af78 <shellRunCommand+0xa4>
        shellShowVar(shell, command);
 800af70:	f7ff fe84 	bl	800ac7c <shellShowVar>
    int returnValue = 0;
 800af74:	2500      	movs	r5, #0
 800af76:	e7e5      	b.n	800af44 <shellRunCommand+0x70>
    else if (command->attr.attrs.type == SHELL_TYPE_USER)
 800af78:	2d08      	cmp	r5, #8
 800af7a:	d1fb      	bne.n	800af74 <shellRunCommand+0xa0>
        shellSetUser(shell, command);
 800af7c:	f7ff ff34 	bl	800ade8 <shellSetUser>
 800af80:	e7f8      	b.n	800af74 <shellRunCommand+0xa0>

0800af82 <shellNormalInput>:
    shell->status.tabFlag = 0;
 800af82:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 800af86:	f022 0204 	bic.w	r2, r2, #4
 800af8a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    shellInsertByte(shell, data);
 800af8e:	f7ff bcbf 	b.w	800a910 <shellInsertByte>
	...

0800af94 <shellExec>:
{
 800af94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (shell->parser.length == 0)
 800af96:	8982      	ldrh	r2, [r0, #12]
{
 800af98:	4604      	mov	r4, r0
    if (shell->parser.length == 0)
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d06c      	beq.n	800b078 <shellExec+0xe4>
    shell->parser.buffer[shell->parser.length] = 0;
 800af9e:	6901      	ldr	r1, [r0, #16]
 800afa0:	2300      	movs	r3, #0
 800afa2:	548b      	strb	r3, [r1, r2]
    if (shell->status.isChecked)
 800afa4:	f890 5060 	ldrb.w	r5, [r0, #96]	@ 0x60
 800afa8:	07ea      	lsls	r2, r5, #31
 800afaa:	d555      	bpl.n	800b058 <shellExec+0xc4>
    shell->history.offset = 0;
 800afac:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    if (shell->history.number > 0
 800afb0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 800afb4:	f8b0 5052 	ldrh.w	r5, [r0, #82]	@ 0x52
    if (shell->history.number > 0
 800afb8:	b14b      	cbz	r3, 800afce <shellExec+0x3a>
                SHELL_HISTORY_MAX_NUMBER : shell->history.record) - 1],
 800afba:	2d00      	cmp	r5, #0
 800afbc:	d043      	beq.n	800b046 <shellExec+0xb2>
 800afbe:	1e6b      	subs	r3, r5, #1
        && strcmp(shell->history.item[(shell->history.record == 0 ? 
 800afc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afc4:	6921      	ldr	r1, [r4, #16]
 800afc6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800afc8:	f7f5 f93a 	bl	8000240 <strcmp>
 800afcc:	b1d8      	cbz	r0, 800b006 <shellExec+0x72>
    if (shellStringCopy(shell->history.item[shell->history.record],
 800afce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800afd2:	6921      	ldr	r1, [r4, #16]
 800afd4:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800afd6:	f7ff f935 	bl	800a244 <shellStringCopy>
 800afda:	b120      	cbz	r0, 800afe6 <shellExec+0x52>
        shell->history.record++;
 800afdc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800afe0:	3301      	adds	r3, #1
 800afe2:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    if (++shell->history.number > SHELL_HISTORY_MAX_NUMBER)
 800afe6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800afea:	3301      	adds	r3, #1
 800afec:	b29b      	uxth	r3, r3
 800afee:	2b05      	cmp	r3, #5
 800aff0:	bf28      	it	cs
 800aff2:	2305      	movcs	r3, #5
 800aff4:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
    if (shell->history.record >= SHELL_HISTORY_MAX_NUMBER)
 800aff8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800affc:	2b04      	cmp	r3, #4
        shell->history.record = 0;
 800affe:	bf84      	itt	hi
 800b000:	2300      	movhi	r3, #0
 800b002:	f8a4 3052 	strhhi.w	r3, [r4, #82]	@ 0x52
        shellSplit(shell->parser.buffer, shell->parser.length, 
 800b006:	2308      	movs	r3, #8
 800b008:	f104 0214 	add.w	r2, r4, #20
        shell->parser.length = shell->parser.cursor = 0;
 800b00c:	2500      	movs	r5, #0
        shellSplit(shell->parser.buffer, shell->parser.length, 
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	2320      	movs	r3, #32
 800b012:	89a1      	ldrh	r1, [r4, #12]
 800b014:	6920      	ldr	r0, [r4, #16]
 800b016:	f7ff fd41 	bl	800aa9c <shellSplit>
        shell->parser.length = shell->parser.cursor = 0;
 800b01a:	60e5      	str	r5, [r4, #12]
    shell->parser.paramCount = 
 800b01c:	b280      	uxth	r0, r0
 800b01e:	86e0      	strh	r0, [r4, #54]	@ 0x36
        if (shell->parser.paramCount == 0)
 800b020:	b350      	cbz	r0, 800b078 <shellExec+0xe4>
        shellWriteString(shell, "\r\n");
 800b022:	4917      	ldr	r1, [pc, #92]	@ (800b080 <shellExec+0xec>)
 800b024:	4620      	mov	r0, r4
 800b026:	f7ff f94d 	bl	800a2c4 <shellWriteString>
        ShellCommand *command = shellSeekCommand(shell,
 800b02a:	6961      	ldr	r1, [r4, #20]
 800b02c:	462b      	mov	r3, r5
 800b02e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800b030:	4620      	mov	r0, r4
 800b032:	f7ff fd97 	bl	800ab64 <shellSeekCommand>
        if (command != NULL)
 800b036:	4601      	mov	r1, r0
 800b038:	b138      	cbz	r0, 800b04a <shellExec+0xb6>
            shellRunCommand(shell, command);
 800b03a:	4620      	mov	r0, r4
}
 800b03c:	b003      	add	sp, #12
 800b03e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            shellRunCommand(shell, command);
 800b042:	f7ff bf47 	b.w	800aed4 <shellRunCommand>
                SHELL_HISTORY_MAX_NUMBER : shell->history.record) - 1],
 800b046:	2304      	movs	r3, #4
 800b048:	e7ba      	b.n	800afc0 <shellExec+0x2c>
            shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 800b04a:	490e      	ldr	r1, [pc, #56]	@ (800b084 <shellExec+0xf0>)
 800b04c:	4620      	mov	r0, r4
}
 800b04e:	b003      	add	sp, #12
 800b050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
 800b054:	f7ff b936 	b.w	800a2c4 <shellWriteString>
    if (strcmp(shell->parser.buffer, shell->info.user->data.user.password) == 0)
 800b058:	6803      	ldr	r3, [r0, #0]
 800b05a:	6900      	ldr	r0, [r0, #16]
 800b05c:	6899      	ldr	r1, [r3, #8]
 800b05e:	f7f5 f8ef 	bl	8000240 <strcmp>
 800b062:	b958      	cbnz	r0, 800b07c <shellExec+0xe8>
        shell->status.isChecked = 1;
 800b064:	f045 0501 	orr.w	r5, r5, #1
        shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
 800b068:	4907      	ldr	r1, [pc, #28]	@ (800b088 <shellExec+0xf4>)
        shell->status.isChecked = 1;
 800b06a:	f884 5060 	strb.w	r5, [r4, #96]	@ 0x60
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_ERROR]);
 800b06e:	4620      	mov	r0, r4
 800b070:	f7ff f928 	bl	800a2c4 <shellWriteString>
    shell->parser.length = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	60e3      	str	r3, [r4, #12]
}
 800b078:	b003      	add	sp, #12
 800b07a:	bd30      	pop	{r4, r5, pc}
        shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_ERROR]);
 800b07c:	4903      	ldr	r1, [pc, #12]	@ (800b08c <shellExec+0xf8>)
 800b07e:	e7f6      	b.n	800b06e <shellExec+0xda>
 800b080:	08015b6a 	.word	0x08015b6a
 800b084:	08015f74 	.word	0x08015f74
 800b088:	08015fdc 	.word	0x08015fdc
 800b08c:	0801613c 	.word	0x0801613c

0800b090 <shellEnter>:
{
 800b090:	b510      	push	{r4, lr}
 800b092:	4604      	mov	r4, r0
    shellExec(shell);
 800b094:	f7ff ff7e 	bl	800af94 <shellExec>
    shellWritePrompt(shell, 1);
 800b098:	4620      	mov	r0, r4
}
 800b09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    shellWritePrompt(shell, 1);
 800b09e:	f7ff b92b 	b.w	800a2f8 <shellWritePrompt.constprop.0>
	...

0800b0a4 <shellHandler>:
{
 800b0a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4604      	mov	r4, r0
    SHELL_ASSERT(data, return);
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d060      	beq.n	800b172 <shellHandler+0xce>
    SHELL_LOCK(shell);
 800b0b0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b0b2:	4798      	blx	r3
    if ((shell->parser.keyValue & 0x0000FF00) != 0x00000000)
 800b0b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b0b6:	f413 4f7f 	tst.w	r3, #65280	@ 0xff00
 800b0ba:	d11f      	bne.n	800b0fc <shellHandler+0x58>
    else if ((shell->parser.keyValue & 0x00FF0000) != 0x00000000)
 800b0bc:	f413 077f 	ands.w	r7, r3, #16711680	@ 0xff0000
 800b0c0:	d120      	bne.n	800b104 <shellHandler+0x60>
    char keyByteOffset = 24;
 800b0c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0c6:	bf2a      	itet	cs
 800b0c8:	2610      	movcs	r6, #16
 800b0ca:	2618      	movcc	r6, #24
 800b0cc:	f04f 477f 	movcs.w	r7, #4278190080	@ 0xff000000
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 800b0d0:	f04f 09ff 	mov.w	r9, #255	@ 0xff
    ShellCommand *base = (ShellCommand *)shell->commandList.base;
 800b0d4:	f8d4 b058 	ldr.w	fp, [r4, #88]	@ 0x58
    for (short i = 0; i < shell->commandList.count; i++)
 800b0d8:	f8b4 a05c 	ldrh.w	sl, [r4, #92]	@ 0x5c
 800b0dc:	f04f 0800 	mov.w	r8, #0
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 800b0e0:	fa09 f906 	lsl.w	r9, r9, r6
 800b0e4:	fa0f f188 	sxth.w	r1, r8
    for (short i = 0; i < shell->commandList.count; i++)
 800b0e8:	4551      	cmp	r1, sl
 800b0ea:	db0e      	blt.n	800b10a <shellHandler+0x66>
    if (data != 0x00)
 800b0ec:	b36d      	cbz	r5, 800b14a <shellHandler+0xa6>
        shell->parser.keyValue = 0x00000000;
 800b0ee:	2300      	movs	r3, #0
        shellNormalInput(shell, data);
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4620      	mov	r0, r4
        shell->parser.keyValue = 0x00000000;
 800b0f4:	63a3      	str	r3, [r4, #56]	@ 0x38
        shellNormalInput(shell, data);
 800b0f6:	f7ff ff44 	bl	800af82 <shellNormalInput>
 800b0fa:	e026      	b.n	800b14a <shellHandler+0xa6>
        keyFilter = 0xFFFFFF00;
 800b0fc:	f06f 07ff 	mvn.w	r7, #255	@ 0xff
        keyByteOffset = 0;
 800b100:	2600      	movs	r6, #0
 800b102:	e7e5      	b.n	800b0d0 <shellHandler+0x2c>
        keyFilter = 0xFFFF0000;
 800b104:	4f1c      	ldr	r7, [pc, #112]	@ (800b178 <shellHandler+0xd4>)
        keyByteOffset = 8;
 800b106:	2608      	movs	r6, #8
 800b108:	e7e2      	b.n	800b0d0 <shellHandler+0x2c>
        if (base[i].attr.attrs.type == SHELL_TYPE_KEY
 800b10a:	eb0b 1101 	add.w	r1, fp, r1, lsl #4
 800b10e:	784b      	ldrb	r3, [r1, #1]
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	2b09      	cmp	r3, #9
 800b116:	d126      	bne.n	800b166 <shellHandler+0xc2>
            && shellCheckPermission(shell, &(base[i])) == 0)
 800b118:	4620      	mov	r0, r4
 800b11a:	f7ff f919 	bl	800a350 <shellCheckPermission>
 800b11e:	bb10      	cbnz	r0, 800b166 <shellHandler+0xc2>
            if ((base[i].data.key.value & keyFilter) == shell->parser.keyValue
 800b120:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800b124:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b126:	ea0c 0207 	and.w	r2, ip, r7
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d11b      	bne.n	800b166 <shellHandler+0xc2>
                    == (data << keyByteOffset))
 800b12e:	fa05 f306 	lsl.w	r3, r5, r6
                && (base[i].data.key.value & (0xFF << keyByteOffset))
 800b132:	ea0c 0e09 	and.w	lr, ip, r9
 800b136:	459e      	cmp	lr, r3
 800b138:	d115      	bne.n	800b166 <shellHandler+0xc2>
                shell->parser.keyValue |= data << keyByteOffset;
 800b13a:	ea42 020e 	orr.w	r2, r2, lr
 800b13e:	63a2      	str	r2, [r4, #56]	@ 0x38
                if (keyByteOffset == 0 
 800b140:	b94e      	cbnz	r6, 800b156 <shellHandler+0xb2>
                    if (base[i].data.key.function)
 800b142:	688b      	ldr	r3, [r1, #8]
 800b144:	b993      	cbnz	r3, 800b16c <shellHandler+0xc8>
                    shell->parser.keyValue = 0x00000000;
 800b146:	2300      	movs	r3, #0
 800b148:	63a3      	str	r3, [r4, #56]	@ 0x38
    SHELL_UNLOCK(shell);
 800b14a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b14c:	4620      	mov	r0, r4
}
 800b14e:	b001      	add	sp, #4
 800b150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SHELL_UNLOCK(shell);
 800b154:	4718      	bx	r3
                    || (base[i].data.key.value & (0xFF << (keyByteOffset - 8)))
 800b156:	f1a6 0208 	sub.w	r2, r6, #8
 800b15a:	23ff      	movs	r3, #255	@ 0xff
 800b15c:	4093      	lsls	r3, r2
 800b15e:	ea13 0f0c 	tst.w	r3, ip
 800b162:	d0ee      	beq.n	800b142 <shellHandler+0x9e>
                data = 0x00;
 800b164:	4605      	mov	r5, r0
    for (short i = 0; i < shell->commandList.count; i++)
 800b166:	f108 0801 	add.w	r8, r8, #1
 800b16a:	e7bb      	b.n	800b0e4 <shellHandler+0x40>
                        base[i].data.key.function(shell);
 800b16c:	4620      	mov	r0, r4
 800b16e:	4798      	blx	r3
 800b170:	e7e9      	b.n	800b146 <shellHandler+0xa2>
}
 800b172:	b001      	add	sp, #4
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	ffff0000 	.word	0xffff0000

0800b17c <shellExtParseChar>:
 * @param string 字符串参数
 * @return char 解析出的字符
 */
static char shellExtParseChar(char *string)
{
    char *p = (*string == '\'') ? (string + 1) : string;
 800b17c:	7802      	ldrb	r2, [r0, #0]
{
 800b17e:	4603      	mov	r3, r0
    char *p = (*string == '\'') ? (string + 1) : string;
 800b180:	2a27      	cmp	r2, #39	@ 0x27
 800b182:	bf08      	it	eq
 800b184:	3301      	addeq	r3, #1
    char value = 0;

    if (*p == '\\')
 800b186:	7818      	ldrb	r0, [r3, #0]
 800b188:	285c      	cmp	r0, #92	@ 0x5c
 800b18a:	d114      	bne.n	800b1b6 <shellExtParseChar+0x3a>
    {
        switch (*(p + 1))
 800b18c:	7858      	ldrb	r0, [r3, #1]
 800b18e:	286e      	cmp	r0, #110	@ 0x6e
 800b190:	d00c      	beq.n	800b1ac <shellExtParseChar+0x30>
 800b192:	d805      	bhi.n	800b1a0 <shellExtParseChar+0x24>
 800b194:	2830      	cmp	r0, #48	@ 0x30
 800b196:	d00b      	beq.n	800b1b0 <shellExtParseChar+0x34>
        {
        case 'b':
            value = '\b';
 800b198:	2862      	cmp	r0, #98	@ 0x62
 800b19a:	bf08      	it	eq
 800b19c:	2008      	moveq	r0, #8
 800b19e:	4770      	bx	lr
        switch (*(p + 1))
 800b1a0:	2872      	cmp	r0, #114	@ 0x72
 800b1a2:	d007      	beq.n	800b1b4 <shellExtParseChar+0x38>
            break;
        case 'n':
            value = '\n';
            break;
        case 't':
            value = '\t';
 800b1a4:	2874      	cmp	r0, #116	@ 0x74
 800b1a6:	bf08      	it	eq
 800b1a8:	2009      	moveq	r0, #9
 800b1aa:	4770      	bx	lr
            value = '\n';
 800b1ac:	200a      	movs	r0, #10
 800b1ae:	4770      	bx	lr
            break;
        case '0':
            value = 0;
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	4770      	bx	lr
        switch (*(p + 1))
 800b1b4:	200d      	movs	r0, #13
    else
    {
        value = *p;
    }
    return value;
}
 800b1b6:	4770      	bx	lr

0800b1b8 <shellExtParsePara>:
 * @param result 解析结果
 * 
 * @return int 0 解析成功 --1 解析失败
 */
int shellExtParsePara(Shell *shell, char *string, char *type, size_t *result)
{
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	461c      	mov	r4, r3
 800b1bc:	4605      	mov	r5, r0
    if (type == NULL || (*string == '$' && *(string + 1)))
 800b1be:	780b      	ldrb	r3, [r1, #0]
 800b1c0:	b1c2      	cbz	r2, 800b1f4 <shellExtParsePara+0x3c>
 800b1c2:	2b24      	cmp	r3, #36	@ 0x24
 800b1c4:	d002      	beq.n	800b1cc <shellExtParsePara+0x14>
                return -1;
            }
        }
    }
#endif /** SHELL_USING_FUNC_SIGNATURE == 1 */
    return -1;
 800b1c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (type == NULL || (*string == '$' && *(string + 1)))
 800b1cc:	784b      	ldrb	r3, [r1, #1]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0f9      	beq.n	800b1c6 <shellExtParsePara+0xe>
        else if (*string == '$' && *(string + 1))
 800b1d2:	784b      	ldrb	r3, [r1, #1]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8097 	beq.w	800b308 <shellExtParsePara+0x150>
    ShellCommand *command = shellSeekCommand(shell,
 800b1da:	3101      	adds	r1, #1
 800b1dc:	2300      	movs	r3, #0
 800b1de:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f7ff fcbf 	bl	800ab64 <shellSeekCommand>
    if (command)
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d0ec      	beq.n	800b1c6 <shellExtParsePara+0xe>
        *result = shellGetVarValue(shell, command);
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f7ff fd27 	bl	800ac40 <shellGetVarValue>
        return 0;
 800b1f2:	e008      	b.n	800b206 <shellExtParsePara+0x4e>
        if (*string == '\'' && *(string + 1))
 800b1f4:	2b27      	cmp	r3, #39	@ 0x27
 800b1f6:	d109      	bne.n	800b20c <shellExtParsePara+0x54>
 800b1f8:	784b      	ldrb	r3, [r1, #1]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 8084 	beq.w	800b308 <shellExtParsePara+0x150>
            *result = (size_t)shellExtParseChar(string);
 800b200:	4608      	mov	r0, r1
 800b202:	f7ff ffbb 	bl	800b17c <shellExtParseChar>
            *result = shellExtParseNumber(string);
 800b206:	6020      	str	r0, [r4, #0]
            return 0;
 800b208:	2000      	movs	r0, #0
 800b20a:	e7de      	b.n	800b1ca <shellExtParsePara+0x12>
        else if (*string == '-' || (*string >= '0' && *string <= '9'))
 800b20c:	2b2d      	cmp	r3, #45	@ 0x2d
 800b20e:	d044      	beq.n	800b29a <shellExtParsePara+0xe2>
 800b210:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800b214:	2809      	cmp	r0, #9
 800b216:	d86e      	bhi.n	800b2f6 <shellExtParsePara+0x13e>
    signed char sign = 1;
 800b218:	2601      	movs	r6, #1
    type = shellExtNumType(string + ((sign == -1) ? 1 : 0));
 800b21a:	188b      	adds	r3, r1, r2
    if ((*p == '0') && ((*(p + 1) == 'x') || (*(p + 1) == 'X')))
 800b21c:	5c8a      	ldrb	r2, [r1, r2]
 800b21e:	2a30      	cmp	r2, #48	@ 0x30
 800b220:	d147      	bne.n	800b2b2 <shellExtParsePara+0xfa>
 800b222:	785a      	ldrb	r2, [r3, #1]
 800b224:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b228:	2a58      	cmp	r2, #88	@ 0x58
 800b22a:	d044      	beq.n	800b2b6 <shellExtParsePara+0xfe>
        type = NUM_TYPE_BIN;
 800b22c:	2a42      	cmp	r2, #66	@ 0x42
 800b22e:	bf14      	ite	ne
 800b230:	2502      	movne	r5, #2
 800b232:	2501      	moveq	r5, #1
    while (*p++)
 800b234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b238:	2a00      	cmp	r2, #0
 800b23a:	d132      	bne.n	800b2a2 <shellExtParsePara+0xea>
    switch ((char)type)
 800b23c:	1e6b      	subs	r3, r5, #1
        devide *= 10;
 800b23e:	f04f 0e0a 	mov.w	lr, #10
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b02      	cmp	r3, #2
 800b246:	bf93      	iteet	ls
 800b248:	4a3c      	ldrls	r2, [pc, #240]	@ (800b33c <shellExtParsePara+0x184>)
            type = NUM_TYPE_FLOAT;
 800b24a:	2300      	movhi	r3, #0
 800b24c:	270a      	movhi	r7, #10
 800b24e:	5cd7      	ldrbls	r7, [r2, r3]
 800b250:	bf9c      	itt	ls
 800b252:	4a3b      	ldrls	r2, [pc, #236]	@ (800b340 <shellExtParsePara+0x188>)
 800b254:	5cd3      	ldrbls	r3, [r2, r3]
    while (*p)
 800b256:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b25a:	bf18      	it	ne
 800b25c:	3b01      	subne	r3, #1
 800b25e:	eb01 0c03 	add.w	ip, r1, r3
    size_t devide = 0;
 800b262:	2300      	movs	r3, #0
    size_t valueInt = 0;
 800b264:	4618      	mov	r0, r3
    while (*p)
 800b266:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800b26a:	bb32      	cbnz	r2, 800b2ba <shellExtParsePara+0x102>
    if (type == NUM_TYPE_FLOAT && devide != 0)
 800b26c:	2d04      	cmp	r5, #4
 800b26e:	d140      	bne.n	800b2f2 <shellExtParsePara+0x13a>
 800b270:	2b00      	cmp	r3, #0
 800b272:	d03e      	beq.n	800b2f2 <shellExtParsePara+0x13a>
        valueFloat = (float)valueInt / devide * sign;
 800b274:	ee07 0a90 	vmov	s15, r0
 800b278:	ee07 3a10 	vmov	s14, r3
 800b27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b280:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b284:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b288:	ee07 6a90 	vmov	s15, r6
 800b28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        return *(size_t *)(&valueFloat);
 800b290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b294:	ee17 0a90 	vmov	r0, s15
 800b298:	e7b5      	b.n	800b206 <shellExtParsePara+0x4e>
        sign = -1;
 800b29a:	f04f 36ff 	mov.w	r6, #4294967295
    type = shellExtNumType(string + ((sign == -1) ? 1 : 0));
 800b29e:	2201      	movs	r2, #1
 800b2a0:	e7bb      	b.n	800b21a <shellExtParsePara+0x62>
        if (*p == '.' && *(p + 1) != 0)
 800b2a2:	781a      	ldrb	r2, [r3, #0]
 800b2a4:	2a2e      	cmp	r2, #46	@ 0x2e
 800b2a6:	d1c5      	bne.n	800b234 <shellExtParsePara+0x7c>
 800b2a8:	785a      	ldrb	r2, [r3, #1]
 800b2aa:	2a00      	cmp	r2, #0
 800b2ac:	d0c2      	beq.n	800b234 <shellExtParsePara+0x7c>
            type = NUM_TYPE_FLOAT;
 800b2ae:	2504      	movs	r5, #4
 800b2b0:	e7c4      	b.n	800b23c <shellExtParsePara+0x84>
    ShellNumType type = NUM_TYPE_DEC;
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	e7be      	b.n	800b234 <shellExtParsePara+0x7c>
        type = NUM_TYPE_HEX;
 800b2b6:	2503      	movs	r5, #3
 800b2b8:	e7bc      	b.n	800b234 <shellExtParsePara+0x7c>
        if (*p == '.')
 800b2ba:	2a2e      	cmp	r2, #46	@ 0x2e
 800b2bc:	d017      	beq.n	800b2ee <shellExtParsePara+0x136>
    if ((code >= '0') && (code <= '9'))
 800b2be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
        valueInt = valueInt * radix + shellExtToNum(*p);
 800b2c2:	4378      	muls	r0, r7
    if ((code >= '0') && (code <= '9'))
 800b2c4:	b2c9      	uxtb	r1, r1
 800b2c6:	2909      	cmp	r1, #9
 800b2c8:	d905      	bls.n	800b2d6 <shellExtParsePara+0x11e>
    else if ((code >= 'a') && (code <= 'f'))
 800b2ca:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 800b2ce:	2905      	cmp	r1, #5
 800b2d0:	d805      	bhi.n	800b2de <shellExtParsePara+0x126>
        return code - 'a' + 10;
 800b2d2:	3a57      	subs	r2, #87	@ 0x57
        return code - 'A' + 10;
 800b2d4:	b2d1      	uxtb	r1, r2
        valueInt = valueInt * radix + shellExtToNum(*p);
 800b2d6:	4408      	add	r0, r1
        devide *= 10;
 800b2d8:	fb0e f303 	mul.w	r3, lr, r3
        p++;
 800b2dc:	e7c3      	b.n	800b266 <shellExtParsePara+0xae>
    else if ((code >= 'A') && (code <= 'F'))
 800b2de:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 800b2e2:	2905      	cmp	r1, #5
 800b2e4:	d801      	bhi.n	800b2ea <shellExtParsePara+0x132>
        return code - 'A' + 10;
 800b2e6:	3a37      	subs	r2, #55	@ 0x37
 800b2e8:	e7f4      	b.n	800b2d4 <shellExtParsePara+0x11c>
        return 0;
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	e7f3      	b.n	800b2d6 <shellExtParsePara+0x11e>
            devide = 1;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e7b9      	b.n	800b266 <shellExtParsePara+0xae>
        return valueInt * sign;
 800b2f2:	4370      	muls	r0, r6
            return 0;
 800b2f4:	e787      	b.n	800b206 <shellExtParsePara+0x4e>
        else if (*string == '$' && *(string + 1))
 800b2f6:	2b24      	cmp	r3, #36	@ 0x24
 800b2f8:	f43f af6b 	beq.w	800b1d2 <shellExtParsePara+0x1a>
        else if (*string)
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f43f af62 	beq.w	800b1c6 <shellExtParsePara+0xe>
    if (*string == '\"')
 800b302:	2b22      	cmp	r3, #34	@ 0x22
 800b304:	d100      	bne.n	800b308 <shellExtParsePara+0x150>
        p = ++string;
 800b306:	3101      	adds	r1, #1
 800b308:	4608      	mov	r0, r1
 800b30a:	2500      	movs	r5, #0
 800b30c:	e009      	b.n	800b322 <shellExtParsePara+0x16a>
        if (*p == '\\')
 800b30e:	2b5c      	cmp	r3, #92	@ 0x5c
 800b310:	d110      	bne.n	800b334 <shellExtParsePara+0x17c>
            p++;
 800b312:	1c47      	adds	r7, r0, #1
            *(string + index) = shellExtParseChar(p);
 800b314:	f7ff ff32 	bl	800b17c <shellExtParseChar>
 800b318:	4603      	mov	r3, r0
            p++;
 800b31a:	4638      	mov	r0, r7
        p++;
 800b31c:	3001      	adds	r0, #1
 800b31e:	3501      	adds	r5, #1
            *(string + index) = shellExtParseChar(p);
 800b320:	7033      	strb	r3, [r6, #0]
    while (*p)
 800b322:	7803      	ldrb	r3, [r0, #0]
            *(string + index) = shellExtParseChar(p);
 800b324:	b2aa      	uxth	r2, r5
 800b326:	fa11 f685 	uxtah	r6, r1, r5
    while (*p)
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1ef      	bne.n	800b30e <shellExtParsePara+0x156>
            *result = (size_t)shellExtParseString(string);
 800b32e:	4608      	mov	r0, r1
    *(string + index) = 0;
 800b330:	548b      	strb	r3, [r1, r2]
            return 0;
 800b332:	e768      	b.n	800b206 <shellExtParsePara+0x4e>
        else if (*p == '\"')
 800b334:	2b22      	cmp	r3, #34	@ 0x22
 800b336:	bf08      	it	eq
 800b338:	2300      	moveq	r3, #0
 800b33a:	e7ef      	b.n	800b31c <shellExtParsePara+0x164>
 800b33c:	0808e5d2 	.word	0x0808e5d2
 800b340:	0808e5cf 	.word	0x0808e5cf

0800b344 <shellExtRun>:
 * @param argc 参数个数
 * @param argv 参数
 * @return int 返回值
 */
int shellExtRun(Shell *shell, ShellCommand *command, int argc, char *argv[])
{
 800b344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b348:	b08d      	sub	sp, #52	@ 0x34
 800b34a:	460c      	mov	r4, r1
 800b34c:	4617      	mov	r7, r2
 800b34e:	4680      	mov	r8, r0
    int ret = 0;
    size_t params[SHELL_PARAMETER_MAX_NUMBER] = {0};
 800b350:	2220      	movs	r2, #32
 800b352:	2100      	movs	r1, #0
 800b354:	a804      	add	r0, sp, #16
{
 800b356:	461e      	mov	r6, r3
    size_t params[SHELL_PARAMETER_MAX_NUMBER] = {0};
 800b358:	f009 fba4 	bl	8014aa4 <memset>
    int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
 800b35c:	78a5      	ldrb	r5, [r4, #2]
        command->attr.attrs.paramNum : (argc - 1);
 800b35e:	f107 39ff 	add.w	r9, r7, #4294967295
    int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
 800b362:	f005 050f 	and.w	r5, r5, #15
        command->attr.attrs.paramNum : (argc - 1);
 800b366:	42bd      	cmp	r5, r7
 800b368:	bfb8      	it	lt
 800b36a:	464d      	movlt	r5, r9
            shellWriteString(shell, "Parameters number incorrect\r\n");
            return -1;
        }
    }
#endif
    for (int i = 0; i < argc - 1; i++)
 800b36c:	2700      	movs	r7, #0
 800b36e:	454f      	cmp	r7, r9
 800b370:	db07      	blt.n	800b382 <shellExtRun+0x3e>
            {
                return -1;
            }
        }
    }
    switch (paramNum)
 800b372:	2d07      	cmp	r5, #7
 800b374:	d811      	bhi.n	800b39a <shellExtRun+0x56>
 800b376:	e8df f005 	tbb	[pc, r5]
 800b37a:	1a15      	.short	0x1a15
 800b37c:	392f2720 	.word	0x392f2720
 800b380:	4d42      	.short	0x4d42
            if (shellExtParsePara(shell, argv[i + 1], NULL, &params[i]) != 0)
 800b382:	ab04      	add	r3, sp, #16
 800b384:	2200      	movs	r2, #0
 800b386:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800b38a:	4640      	mov	r0, r8
 800b38c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b390:	f7ff ff12 	bl	800b1b8 <shellExtParsePara>
 800b394:	b908      	cbnz	r0, 800b39a <shellExtRun+0x56>
    for (int i = 0; i < argc - 1; i++)
 800b396:	3701      	adds	r7, #1
 800b398:	e7e9      	b.n	800b36e <shellExtRun+0x2a>
                return -1;
 800b39a:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }
#endif /** SHELL_USING_FUNC_SIGNATURE == 1 */

    return ret;
}
 800b39e:	b00d      	add	sp, #52	@ 0x34
 800b3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = command->data.cmd.function();
 800b3a4:	68a3      	ldr	r3, [r4, #8]
}
 800b3a6:	b00d      	add	sp, #52	@ 0x34
 800b3a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ret = command->data.cmd.function();
 800b3ac:	4718      	bx	r3
        ret = func(params[0]);
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	9804      	ldr	r0, [sp, #16]
}
 800b3b2:	b00d      	add	sp, #52	@ 0x34
 800b3b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ret = func(params[0]);
 800b3b8:	4718      	bx	r3
        ret = func(params[0], params[1]);
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
}
 800b3c0:	b00d      	add	sp, #52	@ 0x34
 800b3c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ret = func(params[0], params[1]);
 800b3c6:	4718      	bx	r3
        ret = func(params[0], params[1], params[2]);
 800b3c8:	68a3      	ldr	r3, [r4, #8]
 800b3ca:	9804      	ldr	r0, [sp, #16]
 800b3cc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
}
 800b3d0:	b00d      	add	sp, #52	@ 0x34
 800b3d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ret = func(params[0], params[1], params[2]);
 800b3d6:	4718      	bx	r3
        ret = func(params[0], params[1], params[2], params[3]);
 800b3d8:	68a4      	ldr	r4, [r4, #8]
 800b3da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3e2:	46a4      	mov	ip, r4
}
 800b3e4:	b00d      	add	sp, #52	@ 0x34
 800b3e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ret = func(params[0], params[1], params[2], params[3]);
 800b3ea:	4760      	bx	ip
        ret = func(params[0], params[1], params[2], params[3], params[4]);
 800b3ec:	9b08      	ldr	r3, [sp, #32]
 800b3ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	68a4      	ldr	r4, [r4, #8]
 800b3f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3fa:	47a0      	blx	r4
        break;
 800b3fc:	e7cf      	b.n	800b39e <shellExtRun+0x5a>
        ret = func(params[0], params[1], params[2], params[3], params[4], params[5]);
 800b3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	9b08      	ldr	r3, [sp, #32]
 800b404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	68a4      	ldr	r4, [r4, #8]
 800b40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b410:	47a0      	blx	r4
        break;
 800b412:	e7c4      	b.n	800b39e <shellExtRun+0x5a>
        ret = func(params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
 800b414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b416:	9302      	str	r3, [sp, #8]
 800b418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	9b08      	ldr	r3, [sp, #32]
 800b41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	68a4      	ldr	r4, [r4, #8]
 800b426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b42a:	47a0      	blx	r4
        break;
 800b42c:	e7b7      	b.n	800b39e <shellExtRun+0x5a>

0800b42e <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b42e:	680a      	ldr	r2, [r1, #0]
{
 800b430:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b432:	320c      	adds	r2, #12
{
 800b434:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b436:	f001 fa93 	bl	800c960 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800b43a:	b908      	cbnz	r0, 800b440 <netconn_apimsg+0x12>
    return apimsg->err;
 800b43c:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 800b440:	bd10      	pop	{r4, pc}
	...

0800b444 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b444:	b500      	push	{lr}
 800b446:	b089      	sub	sp, #36	@ 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b448:	b160      	cbz	r0, 800b464 <netconn_close_shutdown+0x20>
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b44a:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 800b44c:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b44e:	f88d 1008 	strb.w	r1, [sp, #8]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b452:	4669      	mov	r1, sp
 800b454:	4805      	ldr	r0, [pc, #20]	@ (800b46c <netconn_close_shutdown+0x28>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b456:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b45a:	f7ff ffe8 	bl	800b42e <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 800b45e:	b009      	add	sp, #36	@ 0x24
 800b460:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b464:	f06f 000f 	mvn.w	r0, #15
 800b468:	e7f9      	b.n	800b45e <netconn_close_shutdown+0x1a>
 800b46a:	bf00      	nop
 800b46c:	0800c6e5 	.word	0x0800c6e5

0800b470 <netconn_new_with_proto_and_callback>:
{
 800b470:	b530      	push	{r4, r5, lr}
 800b472:	460d      	mov	r5, r1
 800b474:	b089      	sub	sp, #36	@ 0x24
  conn = netconn_alloc(t, callback);
 800b476:	4611      	mov	r1, r2
 800b478:	f000 fe94 	bl	800c1a4 <netconn_alloc>
  if (conn != NULL) {
 800b47c:	4604      	mov	r4, r0
 800b47e:	2800      	cmp	r0, #0
 800b480:	d033      	beq.n	800b4ea <netconn_new_with_proto_and_callback+0x7a>
    API_MSG_VAR_REF(msg).conn = conn;
 800b482:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b484:	4669      	mov	r1, sp
 800b486:	481b      	ldr	r0, [pc, #108]	@ (800b4f4 <netconn_new_with_proto_and_callback+0x84>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b488:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b48c:	f7ff ffcf 	bl	800b42e <netconn_apimsg>
    if (err != ERR_OK) {
 800b490:	b360      	cbz	r0, 800b4ec <netconn_new_with_proto_and_callback+0x7c>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	b12b      	cbz	r3, 800b4a2 <netconn_new_with_proto_and_callback+0x32>
 800b496:	4b18      	ldr	r3, [pc, #96]	@ (800b4f8 <netconn_new_with_proto_and_callback+0x88>)
 800b498:	22a3      	movs	r2, #163	@ 0xa3
 800b49a:	4918      	ldr	r1, [pc, #96]	@ (800b4fc <netconn_new_with_proto_and_callback+0x8c>)
 800b49c:	4818      	ldr	r0, [pc, #96]	@ (800b500 <netconn_new_with_proto_and_callback+0x90>)
 800b49e:	f009 f8fb 	bl	8014698 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	b92b      	cbnz	r3, 800b4b2 <netconn_new_with_proto_and_callback+0x42>
 800b4a6:	4b14      	ldr	r3, [pc, #80]	@ (800b4f8 <netconn_new_with_proto_and_callback+0x88>)
 800b4a8:	22a4      	movs	r2, #164	@ 0xa4
 800b4aa:	4916      	ldr	r1, [pc, #88]	@ (800b504 <netconn_new_with_proto_and_callback+0x94>)
 800b4ac:	4814      	ldr	r0, [pc, #80]	@ (800b500 <netconn_new_with_proto_and_callback+0x90>)
 800b4ae:	f009 f8f3 	bl	8014698 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b4b2:	6963      	ldr	r3, [r4, #20]
 800b4b4:	b12b      	cbz	r3, 800b4c2 <netconn_new_with_proto_and_callback+0x52>
 800b4b6:	4b10      	ldr	r3, [pc, #64]	@ (800b4f8 <netconn_new_with_proto_and_callback+0x88>)
 800b4b8:	22a6      	movs	r2, #166	@ 0xa6
 800b4ba:	4913      	ldr	r1, [pc, #76]	@ (800b508 <netconn_new_with_proto_and_callback+0x98>)
 800b4bc:	4810      	ldr	r0, [pc, #64]	@ (800b500 <netconn_new_with_proto_and_callback+0x90>)
 800b4be:	f009 f8eb 	bl	8014698 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b4c2:	68e3      	ldr	r3, [r4, #12]
 800b4c4:	b92b      	cbnz	r3, 800b4d2 <netconn_new_with_proto_and_callback+0x62>
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f8 <netconn_new_with_proto_and_callback+0x88>)
 800b4c8:	22a9      	movs	r2, #169	@ 0xa9
 800b4ca:	4910      	ldr	r1, [pc, #64]	@ (800b50c <netconn_new_with_proto_and_callback+0x9c>)
 800b4cc:	480c      	ldr	r0, [pc, #48]	@ (800b500 <netconn_new_with_proto_and_callback+0x90>)
 800b4ce:	f009 f8e3 	bl	8014698 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b4d2:	f104 000c 	add.w	r0, r4, #12
 800b4d6:	f007 ff5d 	bl	8013394 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 800b4da:	f104 0010 	add.w	r0, r4, #16
 800b4de:	f008 f853 	bl	8013588 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	2007      	movs	r0, #7
 800b4e6:	f002 f9a7 	bl	800d838 <memp_free>
      return NULL;
 800b4ea:	2400      	movs	r4, #0
}
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	b009      	add	sp, #36	@ 0x24
 800b4f0:	bd30      	pop	{r4, r5, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800c145 	.word	0x0800c145
 800b4f8:	0801614f 	.word	0x0801614f
 800b4fc:	0801616f 	.word	0x0801616f
 800b500:	08015927 	.word	0x08015927
 800b504:	08016190 	.word	0x08016190
 800b508:	080161a5 	.word	0x080161a5
 800b50c:	080161c6 	.word	0x080161c6

0800b510 <netconn_prepare_delete>:
{
 800b510:	b500      	push	{lr}
 800b512:	b089      	sub	sp, #36	@ 0x24
  if (conn == NULL) {
 800b514:	b138      	cbz	r0, 800b526 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b516:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 800b518:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b51a:	4669      	mov	r1, sp
 800b51c:	4803      	ldr	r0, [pc, #12]	@ (800b52c <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b51e:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b522:	f7ff ff84 	bl	800b42e <netconn_apimsg>
}
 800b526:	b009      	add	sp, #36	@ 0x24
 800b528:	f85d fb04 	ldr.w	pc, [sp], #4
 800b52c:	0800c401 	.word	0x0800c401

0800b530 <netconn_delete>:
{
 800b530:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 800b532:	4605      	mov	r5, r0
 800b534:	b140      	cbz	r0, 800b548 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 800b536:	f7ff ffeb 	bl	800b510 <netconn_prepare_delete>
  if (err == ERR_OK) {
 800b53a:	4604      	mov	r4, r0
 800b53c:	b910      	cbnz	r0, 800b544 <netconn_delete+0x14>
    netconn_free(conn);
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 fe72 	bl	800c228 <netconn_free>
}
 800b544:	4620      	mov	r0, r4
 800b546:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800b548:	4604      	mov	r4, r0
 800b54a:	e7fb      	b.n	800b544 <netconn_delete+0x14>

0800b54c <netconn_bind>:
{
 800b54c:	b500      	push	{lr}
 800b54e:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b550:	b170      	cbz	r0, 800b570 <netconn_bind+0x24>
    addr = IP4_ADDR_ANY;
 800b552:	4b09      	ldr	r3, [pc, #36]	@ (800b578 <netconn_bind+0x2c>)
  API_MSG_VAR_REF(msg).conn = conn;
 800b554:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 800b556:	2900      	cmp	r1, #0
 800b558:	bf08      	it	eq
 800b55a:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b55c:	4807      	ldr	r0, [pc, #28]	@ (800b57c <netconn_bind+0x30>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b55e:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b562:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b564:	4669      	mov	r1, sp
 800b566:	f7ff ff62 	bl	800b42e <netconn_apimsg>
}
 800b56a:	b009      	add	sp, #36	@ 0x24
 800b56c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b570:	f06f 000f 	mvn.w	r0, #15
 800b574:	e7f9      	b.n	800b56a <netconn_bind+0x1e>
 800b576:	bf00      	nop
 800b578:	0808ed34 	.word	0x0808ed34
 800b57c:	0800c509 	.word	0x0800c509

0800b580 <netconn_listen_with_backlog>:
{
 800b580:	b500      	push	{lr}
 800b582:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800b584:	b138      	cbz	r0, 800b596 <netconn_listen_with_backlog+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 800b586:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800b588:	4669      	mov	r1, sp
 800b58a:	4804      	ldr	r0, [pc, #16]	@ (800b59c <netconn_listen_with_backlog+0x1c>)
 800b58c:	f7ff ff4f 	bl	800b42e <netconn_apimsg>
}
 800b590:	b009      	add	sp, #36	@ 0x24
 800b592:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800b596:	f06f 000f 	mvn.w	r0, #15
 800b59a:	e7f9      	b.n	800b590 <netconn_listen_with_backlog+0x10>
 800b59c:	0800c53d 	.word	0x0800c53d

0800b5a0 <netconn_write_vectors_partly>:
{
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d047      	beq.n	800b63e <netconn_write_vectors_partly+0x9e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b5ae:	7804      	ldrb	r4, [r0, #0]
 800b5b0:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 800b5b4:	2c10      	cmp	r4, #16
 800b5b6:	d145      	bne.n	800b644 <netconn_write_vectors_partly+0xa4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b5b8:	7f05      	ldrb	r5, [r0, #28]
 800b5ba:	f003 0404 	and.w	r4, r3, #4
 800b5be:	f005 0502 	and.w	r5, r5, #2
 800b5c2:	4325      	orrs	r5, r4
 800b5c4:	d003      	beq.n	800b5ce <netconn_write_vectors_partly+0x2e>
  if (dontblock && !bytes_written) {
 800b5c6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ca:	d03b      	beq.n	800b644 <netconn_write_vectors_partly+0xa4>
 800b5cc:	2501      	movs	r5, #1
 800b5ce:	2600      	movs	r6, #0
    size += vectors[i].len;
 800b5d0:	f101 0c04 	add.w	ip, r1, #4
 800b5d4:	4637      	mov	r7, r6
 800b5d6:	e004      	b.n	800b5e2 <netconn_write_vectors_partly+0x42>
 800b5d8:	f85c 4036 	ldr.w	r4, [ip, r6, lsl #3]
    if (size < vectors[i].len) {
 800b5dc:	19e7      	adds	r7, r4, r7
 800b5de:	d231      	bcs.n	800b644 <netconn_write_vectors_partly+0xa4>
  for (i = 0; i < vectorcnt; i++) {
 800b5e0:	3601      	adds	r6, #1
 800b5e2:	42b2      	cmp	r2, r6
 800b5e4:	dcf8      	bgt.n	800b5d8 <netconn_write_vectors_partly+0x38>
  if (size == 0) {
 800b5e6:	2f00      	cmp	r7, #0
 800b5e8:	d025      	beq.n	800b636 <netconn_write_vectors_partly+0x96>
  } else if (size > SSIZE_MAX) {
 800b5ea:	da04      	bge.n	800b5f6 <netconn_write_vectors_partly+0x56>
    if (!bytes_written) {
 800b5ec:	f1b8 0f00 	cmp.w	r8, #0
 800b5f0:	d028      	beq.n	800b644 <netconn_write_vectors_partly+0xa4>
    size = (size_t)limited;
 800b5f2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b5f6:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b5fa:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 800b5fc:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b5fe:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b600:	4669      	mov	r1, sp
 800b602:	4812      	ldr	r0, [pc, #72]	@ (800b64c <netconn_write_vectors_partly+0xac>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b604:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b606:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b60a:	e9cd 7205 	strd	r7, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b60e:	f7ff ff0e 	bl	800b42e <netconn_apimsg>
  if (err == ERR_OK) {
 800b612:	b988      	cbnz	r0, 800b638 <netconn_write_vectors_partly+0x98>
    if (bytes_written != NULL) {
 800b614:	f1b8 0f00 	cmp.w	r8, #0
 800b618:	d002      	beq.n	800b620 <netconn_write_vectors_partly+0x80>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	f8c8 3000 	str.w	r3, [r8]
    if (!dontblock) {
 800b620:	b94d      	cbnz	r5, 800b636 <netconn_write_vectors_partly+0x96>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b622:	9b06      	ldr	r3, [sp, #24]
 800b624:	42bb      	cmp	r3, r7
 800b626:	d006      	beq.n	800b636 <netconn_write_vectors_partly+0x96>
 800b628:	4b09      	ldr	r3, [pc, #36]	@ (800b650 <netconn_write_vectors_partly+0xb0>)
 800b62a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b62e:	4909      	ldr	r1, [pc, #36]	@ (800b654 <netconn_write_vectors_partly+0xb4>)
 800b630:	4809      	ldr	r0, [pc, #36]	@ (800b658 <netconn_write_vectors_partly+0xb8>)
 800b632:	f009 f831 	bl	8014698 <iprintf>
  return err;
 800b636:	2000      	movs	r0, #0
}
 800b638:	b008      	add	sp, #32
 800b63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b63e:	f06f 000f 	mvn.w	r0, #15
 800b642:	e7f9      	b.n	800b638 <netconn_write_vectors_partly+0x98>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b644:	f06f 0005 	mvn.w	r0, #5
 800b648:	e7f6      	b.n	800b638 <netconn_write_vectors_partly+0x98>
 800b64a:	bf00      	nop
 800b64c:	0800c619 	.word	0x0800c619
 800b650:	0801614f 	.word	0x0801614f
 800b654:	080161df 	.word	0x080161df
 800b658:	08015927 	.word	0x08015927

0800b65c <netconn_write_partly>:
{
 800b65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 800b65e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b662:	9a06      	ldr	r2, [sp, #24]
 800b664:	a902      	add	r1, sp, #8
 800b666:	9200      	str	r2, [sp, #0]
 800b668:	2201      	movs	r2, #1
 800b66a:	f7ff ff99 	bl	800b5a0 <netconn_write_vectors_partly>
}
 800b66e:	b005      	add	sp, #20
 800b670:	f85d fb04 	ldr.w	pc, [sp], #4

0800b674 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b674:	2103      	movs	r1, #3
 800b676:	f7ff bee5 	b.w	800b444 <netconn_close_shutdown>

0800b67a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b67a:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b67c:	4604      	mov	r4, r0
 800b67e:	b148      	cbz	r0, 800b694 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800b680:	f007 fd6d 	bl	801315e <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 800b684:	2300      	movs	r3, #0
  err = conn->pending_err;
 800b686:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800b68a:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b68c:	f007 fd6c 	bl	8013168 <sys_arch_unprotect>
  return err;
}
 800b690:	4628      	mov	r0, r5
 800b692:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800b694:	4605      	mov	r5, r0
 800b696:	e7fb      	b.n	800b690 <netconn_err+0x16>

0800b698 <netconn_accept>:
{
 800b698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b69a:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800b69c:	460e      	mov	r6, r1
 800b69e:	b921      	cbnz	r1, 800b6aa <netconn_accept+0x12>
 800b6a0:	f06f 040f 	mvn.w	r4, #15
}
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	b002      	add	sp, #8
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
  *new_conn = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d0f6      	beq.n	800b6a0 <netconn_accept+0x8>
  err = netconn_err(conn);
 800b6b2:	f7ff ffe2 	bl	800b67a <netconn_err>
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d1f1      	bne.n	800b6a4 <netconn_accept+0xc>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800b6c0:	696b      	ldr	r3, [r5, #20]
 800b6c2:	b913      	cbnz	r3, 800b6ca <netconn_accept+0x32>
    return ERR_CLSD;
 800b6c4:	f06f 040e 	mvn.w	r4, #14
 800b6c8:	e7ec      	b.n	800b6a4 <netconn_accept+0xc>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800b6ca:	7f2b      	ldrb	r3, [r5, #28]
 800b6cc:	07da      	lsls	r2, r3, #31
 800b6ce:	d4f9      	bmi.n	800b6c4 <netconn_accept+0x2c>
  if (netconn_is_nonblocking(conn)) {
 800b6d0:	f013 0f02 	tst.w	r3, #2
 800b6d4:	f105 0014 	add.w	r0, r5, #20
 800b6d8:	d007      	beq.n	800b6ea <netconn_accept+0x52>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_MBOX_EMPTY) {
 800b6da:	a901      	add	r1, sp, #4
 800b6dc:	f007 ff1c 	bl	8013518 <sys_arch_mbox_tryfetch>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d106      	bne.n	800b6f2 <netconn_accept+0x5a>
      return ERR_WOULDBLOCK;
 800b6e4:	f06f 0406 	mvn.w	r4, #6
 800b6e8:	e7dc      	b.n	800b6a4 <netconn_accept+0xc>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	a901      	add	r1, sp, #4
 800b6ee:	f007 fecf 	bl	8013490 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b6f2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b6f4:	b11b      	cbz	r3, 800b6fe <netconn_accept+0x66>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800b6fe:	f10d 0103 	add.w	r1, sp, #3
 800b702:	9801      	ldr	r0, [sp, #4]
 800b704:	f000 fcf4 	bl	800c0f0 <lwip_netconn_is_err_msg>
 800b708:	b110      	cbz	r0, 800b710 <netconn_accept+0x78>
    return err;
 800b70a:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800b70e:	e7c9      	b.n	800b6a4 <netconn_accept+0xc>
  if (accept_ptr == NULL) {
 800b710:	9b01      	ldr	r3, [sp, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0d6      	beq.n	800b6c4 <netconn_accept+0x2c>
  *new_conn = newconn;
 800b716:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 800b718:	e7c4      	b.n	800b6a4 <netconn_accept+0xc>
	...

0800b71c <netconn_recv_data>:
  void *buf = NULL;
 800b71c:	2300      	movs	r3, #0
{
 800b71e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b720:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b722:	460d      	mov	r5, r1
  void *buf = NULL;
 800b724:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b726:	b919      	cbnz	r1, 800b730 <netconn_recv_data+0x14>
 800b728:	f06f 000f 	mvn.w	r0, #15
}
 800b72c:	b003      	add	sp, #12
 800b72e:	bd30      	pop	{r4, r5, pc}
  *new_buf = NULL;
 800b730:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b732:	2800      	cmp	r0, #0
 800b734:	d0f8      	beq.n	800b728 <netconn_recv_data+0xc>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b736:	6903      	ldr	r3, [r0, #16]
 800b738:	b933      	cbnz	r3, 800b748 <netconn_recv_data+0x2c>
    err_t err = netconn_err(conn);
 800b73a:	f7ff ff9e 	bl	800b67a <netconn_err>
    if (err != ERR_OK) {
 800b73e:	2800      	cmp	r0, #0
 800b740:	d1f4      	bne.n	800b72c <netconn_recv_data+0x10>
    return ERR_CONN;
 800b742:	f06f 000a 	mvn.w	r0, #10
 800b746:	e7f1      	b.n	800b72c <netconn_recv_data+0x10>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b748:	7f03      	ldrb	r3, [r0, #28]
 800b74a:	f002 0204 	and.w	r2, r2, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_MBOX_EMPTY) {
 800b74e:	a901      	add	r1, sp, #4
 800b750:	3010      	adds	r0, #16
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	4313      	orrs	r3, r2
 800b758:	d102      	bne.n	800b760 <netconn_recv_data+0x44>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b75a:	f994 2008 	ldrsb.w	r2, [r4, #8]
 800b75e:	b172      	cbz	r2, 800b77e <netconn_recv_data+0x62>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_MBOX_EMPTY) {
 800b760:	f007 feda 	bl	8013518 <sys_arch_mbox_tryfetch>
 800b764:	3001      	adds	r0, #1
 800b766:	d10c      	bne.n	800b782 <netconn_recv_data+0x66>
      err = netconn_err(conn);
 800b768:	4620      	mov	r0, r4
 800b76a:	f7ff ff86 	bl	800b67a <netconn_err>
      if (err != ERR_OK) {
 800b76e:	2800      	cmp	r0, #0
 800b770:	d1dc      	bne.n	800b72c <netconn_recv_data+0x10>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b772:	7f23      	ldrb	r3, [r4, #28]
 800b774:	07db      	lsls	r3, r3, #31
 800b776:	d4e4      	bmi.n	800b742 <netconn_recv_data+0x26>
      return ERR_WOULDBLOCK;
 800b778:	f06f 0006 	mvn.w	r0, #6
 800b77c:	e7d6      	b.n	800b72c <netconn_recv_data+0x10>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b77e:	f007 fe87 	bl	8013490 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b782:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b784:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b78a:	2b10      	cmp	r3, #16
 800b78c:	d116      	bne.n	800b7bc <netconn_recv_data+0xa0>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b78e:	f10d 0103 	add.w	r1, sp, #3
 800b792:	f000 fcad 	bl	800c0f0 <lwip_netconn_is_err_msg>
 800b796:	b130      	cbz	r0, 800b7a6 <netconn_recv_data+0x8a>
      if (err == ERR_CLSD) {
 800b798:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800b79c:	f110 0f0f 	cmn.w	r0, #15
 800b7a0:	bf08      	it	eq
 800b7a2:	2000      	moveq	r0, #0
 800b7a4:	e7c2      	b.n	800b72c <netconn_recv_data+0x10>
    len = ((struct pbuf *)buf)->tot_len;
 800b7a6:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 800b7a8:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b7aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b7ac:	b113      	cbz	r3, 800b7b4 <netconn_recv_data+0x98>
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	4798      	blx	r3
  *new_buf = buf;
 800b7b4:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 800b7b6:	2000      	movs	r0, #0
  *new_buf = buf;
 800b7b8:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800b7ba:	e7b7      	b.n	800b72c <netconn_recv_data+0x10>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b7bc:	b930      	cbnz	r0, 800b7cc <netconn_recv_data+0xb0>
 800b7be:	4b05      	ldr	r3, [pc, #20]	@ (800b7d4 <netconn_recv_data+0xb8>)
 800b7c0:	f240 2291 	movw	r2, #657	@ 0x291
 800b7c4:	4904      	ldr	r1, [pc, #16]	@ (800b7d8 <netconn_recv_data+0xbc>)
 800b7c6:	4805      	ldr	r0, [pc, #20]	@ (800b7dc <netconn_recv_data+0xc0>)
 800b7c8:	f008 ff66 	bl	8014698 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	e7ea      	b.n	800b7a8 <netconn_recv_data+0x8c>
 800b7d2:	bf00      	nop
 800b7d4:	0801614f 	.word	0x0801614f
 800b7d8:	08016202 	.word	0x08016202
 800b7dc:	08015927 	.word	0x08015927

0800b7e0 <netconn_recv_data_tcp>:
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b7e0:	6903      	ldr	r3, [r0, #16]
{
 800b7e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	b089      	sub	sp, #36	@ 0x24
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d040      	beq.n	800b872 <netconn_recv_data_tcp+0x92>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b7f0:	f990 501c 	ldrsb.w	r5, [r0, #28]
 800b7f4:	7f03      	ldrb	r3, [r0, #28]
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	da12      	bge.n	800b820 <netconn_recv_data_tcp+0x40>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b7fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7fe:	7703      	strb	r3, [r0, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b800:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b802:	b11b      	cbz	r3, 800b80c <netconn_recv_data_tcp+0x2c>
 800b804:	2200      	movs	r2, #0
 800b806:	2101      	movs	r1, #1
 800b808:	4620      	mov	r0, r4
 800b80a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b80c:	6863      	ldr	r3, [r4, #4]
 800b80e:	bb4b      	cbnz	r3, 800b864 <netconn_recv_data_tcp+0x84>
        err = netconn_err(conn);
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff ff32 	bl	800b67a <netconn_err>
        return ERR_RST;
 800b816:	1e05      	subs	r5, r0, #0
 800b818:	bf08      	it	eq
 800b81a:	f06f 050d 	mvneq.w	r5, #13
 800b81e:	e01c      	b.n	800b85a <netconn_recv_data_tcp+0x7a>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b820:	f7ff ff7c 	bl	800b71c <netconn_recv_data>
  if (err != ERR_OK) {
 800b824:	4605      	mov	r5, r0
 800b826:	b9c0      	cbnz	r0, 800b85a <netconn_recv_data_tcp+0x7a>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b828:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 800b82a:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b82c:	d40c      	bmi.n	800b848 <netconn_recv_data_tcp+0x68>
    u16_t len = buf ? buf->tot_len : 1;
 800b82e:	b1bf      	cbz	r7, 800b860 <netconn_recv_data_tcp+0x80>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b830:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b832:	7823      	ldrb	r3, [r4, #0]
 800b834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b838:	2b10      	cmp	r3, #16
 800b83a:	d105      	bne.n	800b848 <netconn_recv_data_tcp+0x68>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b83c:	4669      	mov	r1, sp
 800b83e:	480e      	ldr	r0, [pc, #56]	@ (800b878 <netconn_recv_data_tcp+0x98>)
  msg->conn = conn;
 800b840:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 800b842:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b844:	f7ff fdf3 	bl	800b42e <netconn_apimsg>
  if (buf == NULL) {
 800b848:	b93f      	cbnz	r7, 800b85a <netconn_recv_data_tcp+0x7a>
    if (apiflags & NETCONN_NOFIN) {
 800b84a:	06f3      	lsls	r3, r6, #27
 800b84c:	d5d8      	bpl.n	800b800 <netconn_recv_data_tcp+0x20>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b84e:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800b850:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b854:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b858:	7723      	strb	r3, [r4, #28]
}
 800b85a:	4628      	mov	r0, r5
 800b85c:	b009      	add	sp, #36	@ 0x24
 800b85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b860:	2201      	movs	r2, #1
 800b862:	e7e6      	b.n	800b832 <netconn_recv_data_tcp+0x52>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b864:	2101      	movs	r1, #1
 800b866:	4620      	mov	r0, r4
      return ERR_CLSD;
 800b868:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b86c:	f7ff fdea 	bl	800b444 <netconn_close_shutdown>
      return ERR_CLSD;
 800b870:	e7f3      	b.n	800b85a <netconn_recv_data_tcp+0x7a>
    return ERR_CONN;
 800b872:	f06f 050a 	mvn.w	r5, #10
 800b876:	e7f0      	b.n	800b85a <netconn_recv_data_tcp+0x7a>
 800b878:	0800c5e1 	.word	0x0800c5e1

0800b87c <netconn_recv>:
{
 800b87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b87e:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b880:	460e      	mov	r6, r1
 800b882:	b921      	cbnz	r1, 800b88e <netconn_recv+0x12>
 800b884:	f06f 050f 	mvn.w	r5, #15
}
 800b888:	4628      	mov	r0, r5
 800b88a:	b003      	add	sp, #12
 800b88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 800b88e:	2700      	movs	r7, #0
 800b890:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b892:	2800      	cmp	r0, #0
 800b894:	d0f6      	beq.n	800b884 <netconn_recv+0x8>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b896:	7803      	ldrb	r3, [r0, #0]
 800b898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b89c:	2b10      	cmp	r3, #16
 800b89e:	d124      	bne.n	800b8ea <netconn_recv+0x6e>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b8a0:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 800b8a2:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b8a4:	f001 ffaa 	bl	800d7fc <memp_malloc>
    if (buf == NULL) {
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	b1d8      	cbz	r0, 800b8e4 <netconn_recv+0x68>
    err = netconn_recv_data_tcp(conn, &p, 0);
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	463a      	mov	r2, r7
 800b8b0:	a901      	add	r1, sp, #4
 800b8b2:	f7ff ff95 	bl	800b7e0 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b120      	cbz	r0, 800b8c4 <netconn_recv+0x48>
      memp_free(MEMP_NETBUF, buf);
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	2006      	movs	r0, #6
 800b8be:	f001 ffbb 	bl	800d838 <memp_free>
      return err;
 800b8c2:	e7e1      	b.n	800b888 <netconn_recv+0xc>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b8c4:	9f01      	ldr	r7, [sp, #4]
 800b8c6:	b937      	cbnz	r7, 800b8d6 <netconn_recv+0x5a>
 800b8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f8 <netconn_recv+0x7c>)
 800b8ca:	f240 3279 	movw	r2, #889	@ 0x379
 800b8ce:	490b      	ldr	r1, [pc, #44]	@ (800b8fc <netconn_recv+0x80>)
 800b8d0:	480b      	ldr	r0, [pc, #44]	@ (800b900 <netconn_recv+0x84>)
 800b8d2:	f008 fee1 	bl	8014698 <iprintf>
    buf->port = 0;
 800b8d6:	2300      	movs	r3, #0
    buf->ptr = p;
 800b8d8:	e9c4 7700 	strd	r7, r7, [r4]
    buf->port = 0;
 800b8dc:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 800b8de:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 800b8e0:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 800b8e2:	e7d1      	b.n	800b888 <netconn_recv+0xc>
      return ERR_MEM;
 800b8e4:	f04f 35ff 	mov.w	r5, #4294967295
 800b8e8:	e7ce      	b.n	800b888 <netconn_recv+0xc>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b8ea:	463a      	mov	r2, r7
}
 800b8ec:	b003      	add	sp, #12
 800b8ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b8f2:	f7ff bf13 	b.w	800b71c <netconn_recv_data>
 800b8f6:	bf00      	nop
 800b8f8:	0801614f 	.word	0x0801614f
 800b8fc:	08016b46 	.word	0x08016b46
 800b900:	08015927 	.word	0x08015927

0800b904 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b908:	4605      	mov	r5, r0
 800b90a:	4617      	mov	r7, r2
 800b90c:	461e      	mov	r6, r3
 800b90e:	f8bd 8018 	ldrh.w	r8, [sp, #24]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b912:	460c      	mov	r4, r1
 800b914:	b929      	cbnz	r1, 800b922 <recv_udp+0x1e>
 800b916:	4b20      	ldr	r3, [pc, #128]	@ (800b998 <recv_udp+0x94>)
 800b918:	22e6      	movs	r2, #230	@ 0xe6
 800b91a:	4920      	ldr	r1, [pc, #128]	@ (800b99c <recv_udp+0x98>)
 800b91c:	4820      	ldr	r0, [pc, #128]	@ (800b9a0 <recv_udp+0x9c>)
 800b91e:	f008 febb 	bl	8014698 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b922:	b1ed      	cbz	r5, 800b960 <recv_udp+0x5c>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b924:	686b      	ldr	r3, [r5, #4]
 800b926:	42a3      	cmp	r3, r4
 800b928:	d125      	bne.n	800b976 <recv_udp+0x72>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b92a:	692b      	ldr	r3, [r5, #16]
 800b92c:	b1f3      	cbz	r3, 800b96c <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b92e:	2006      	movs	r0, #6
 800b930:	f001 ff64 	bl	800d7fc <memp_malloc>
  if (buf == NULL) {
 800b934:	4604      	mov	r4, r0
 800b936:	b1c8      	cbz	r0, 800b96c <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 800b938:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 800b93c:	b106      	cbz	r6, 800b940 <recv_udp+0x3c>
 800b93e:	6836      	ldr	r6, [r6, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  err = sys_mbox_trypost(&conn->recvmbox, buf);
 800b940:	4621      	mov	r1, r4
    ip_addr_set(&buf->addr, addr);
 800b942:	60a6      	str	r6, [r4, #8]
  err = sys_mbox_trypost(&conn->recvmbox, buf);
 800b944:	f105 0010 	add.w	r0, r5, #16
    buf->port = port;
 800b948:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 800b94c:	893e      	ldrh	r6, [r7, #8]
  err = sys_mbox_trypost(&conn->recvmbox, buf);
 800b94e:	f007 fd6b 	bl	8013428 <sys_mbox_trypost>
  if (err != ERR_OK) {
 800b952:	4601      	mov	r1, r0
 800b954:	b1b0      	cbz	r0, 800b984 <recv_udp+0x80>
    netbuf_delete(buf);
 800b956:	4620      	mov	r0, r4
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 800b958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    netbuf_delete(buf);
 800b95c:	f000 bf20 	b.w	800c7a0 <netbuf_delete>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b960:	4b0d      	ldr	r3, [pc, #52]	@ (800b998 <recv_udp+0x94>)
 800b962:	22e7      	movs	r2, #231	@ 0xe7
 800b964:	490f      	ldr	r1, [pc, #60]	@ (800b9a4 <recv_udp+0xa0>)
 800b966:	480e      	ldr	r0, [pc, #56]	@ (800b9a0 <recv_udp+0x9c>)
 800b968:	f008 fe96 	bl	8014698 <iprintf>
    pbuf_free(p);
 800b96c:	4638      	mov	r0, r7
}
 800b96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    pbuf_free(p);
 800b972:	f002 b95d 	b.w	800dc30 <pbuf_free>
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b976:	4b08      	ldr	r3, [pc, #32]	@ (800b998 <recv_udp+0x94>)
 800b978:	22ef      	movs	r2, #239	@ 0xef
 800b97a:	490b      	ldr	r1, [pc, #44]	@ (800b9a8 <recv_udp+0xa4>)
 800b97c:	4808      	ldr	r0, [pc, #32]	@ (800b9a0 <recv_udp+0x9c>)
 800b97e:	f008 fe8b 	bl	8014698 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b982:	e7d2      	b.n	800b92a <recv_udp+0x26>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b984:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b986:	b123      	cbz	r3, 800b992 <recv_udp+0x8e>
 800b988:	4632      	mov	r2, r6
 800b98a:	4628      	mov	r0, r5
}
 800b98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b990:	4718      	bx	r3
}
 800b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b996:	bf00      	nop
 800b998:	0801620e 	.word	0x0801620e
 800b99c:	0801622e 	.word	0x0801622e
 800b9a0:	08015927 	.word	0x08015927
 800b9a4:	08016250 	.word	0x08016250
 800b9a8:	0801626f 	.word	0x0801626f

0800b9ac <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b9ac:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b9ae:	6844      	ldr	r4, [r0, #4]
{
 800b9b0:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f002 fd80 	bl	800e4b8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4909      	ldr	r1, [pc, #36]	@ (800b9e0 <setup_tcp+0x34>)
 800b9bc:	f002 fd80 	bl	800e4c0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	4908      	ldr	r1, [pc, #32]	@ (800b9e4 <setup_tcp+0x38>)
 800b9c4:	f002 fd94 	bl	800e4f0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	4907      	ldr	r1, [pc, #28]	@ (800b9e8 <setup_tcp+0x3c>)
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	f002 fdc3 	bl	800e558 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	4905      	ldr	r1, [pc, #20]	@ (800b9ec <setup_tcp+0x40>)
}
 800b9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 800b9da:	f002 bd9f 	b.w	800e51c <tcp_err>
 800b9de:	bf00      	nop
 800b9e0:	0800bf0d 	.word	0x0800bf0d
 800b9e4:	0800bea1 	.word	0x0800bea1
 800b9e8:	0800be25 	.word	0x0800be25
 800b9ec:	0800bfc9 	.word	0x0800bfc9

0800b9f0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	4689      	mov	r9, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	b930      	cbnz	r0, 800ba08 <lwip_netconn_do_writemore+0x18>
 800b9fa:	4b88      	ldr	r3, [pc, #544]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800b9fc:	f240 6277 	movw	r2, #1655	@ 0x677
 800ba00:	4987      	ldr	r1, [pc, #540]	@ (800bc20 <lwip_netconn_do_writemore+0x230>)
 800ba02:	4888      	ldr	r0, [pc, #544]	@ (800bc24 <lwip_netconn_do_writemore+0x234>)
 800ba04:	f008 fe48 	bl	8014698 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ba08:	7863      	ldrb	r3, [r4, #1]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d006      	beq.n	800ba1c <lwip_netconn_do_writemore+0x2c>
 800ba0e:	4b83      	ldr	r3, [pc, #524]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800ba10:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800ba14:	4984      	ldr	r1, [pc, #528]	@ (800bc28 <lwip_netconn_do_writemore+0x238>)
 800ba16:	4883      	ldr	r0, [pc, #524]	@ (800bc24 <lwip_netconn_do_writemore+0x234>)
 800ba18:	f008 fe3e 	bl	8014698 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ba1c:	6a23      	ldr	r3, [r4, #32]
 800ba1e:	b933      	cbnz	r3, 800ba2e <lwip_netconn_do_writemore+0x3e>
 800ba20:	4b7e      	ldr	r3, [pc, #504]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800ba22:	f240 6279 	movw	r2, #1657	@ 0x679
 800ba26:	4981      	ldr	r1, [pc, #516]	@ (800bc2c <lwip_netconn_do_writemore+0x23c>)
 800ba28:	487e      	ldr	r0, [pc, #504]	@ (800bc24 <lwip_netconn_do_writemore+0x234>)
 800ba2a:	f008 fe35 	bl	8014698 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ba2e:	6863      	ldr	r3, [r4, #4]
 800ba30:	b933      	cbnz	r3, 800ba40 <lwip_netconn_do_writemore+0x50>
 800ba32:	4b7a      	ldr	r3, [pc, #488]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800ba34:	f240 627a 	movw	r2, #1658	@ 0x67a
 800ba38:	497d      	ldr	r1, [pc, #500]	@ (800bc30 <lwip_netconn_do_writemore+0x240>)
 800ba3a:	487a      	ldr	r0, [pc, #488]	@ (800bc24 <lwip_netconn_do_writemore+0x234>)
 800ba3c:	f008 fe2c 	bl	8014698 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ba40:	6a23      	ldr	r3, [r4, #32]
 800ba42:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d306      	bcc.n	800ba58 <lwip_netconn_do_writemore+0x68>
 800ba4a:	4b74      	ldr	r3, [pc, #464]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800ba4c:	f240 627b 	movw	r2, #1659	@ 0x67b
 800ba50:	4978      	ldr	r1, [pc, #480]	@ (800bc34 <lwip_netconn_do_writemore+0x244>)
 800ba52:	4874      	ldr	r0, [pc, #464]	@ (800bc24 <lwip_netconn_do_writemore+0x234>)
 800ba54:	f008 fe20 	bl	8014698 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ba58:	6a23      	ldr	r3, [r4, #32]
 800ba5a:	899b      	ldrh	r3, [r3, #12]
 800ba5c:	b933      	cbnz	r3, 800ba6c <lwip_netconn_do_writemore+0x7c>
 800ba5e:	4b6f      	ldr	r3, [pc, #444]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800ba60:	f240 627d 	movw	r2, #1661	@ 0x67d
 800ba64:	4974      	ldr	r1, [pc, #464]	@ (800bc38 <lwip_netconn_do_writemore+0x248>)
 800ba66:	486f      	ldr	r0, [pc, #444]	@ (800bc24 <lwip_netconn_do_writemore+0x234>)
 800ba68:	f008 fe16 	bl	8014698 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ba6c:	6a23      	ldr	r3, [r4, #32]
 800ba6e:	7f26      	ldrb	r6, [r4, #28]
 800ba70:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ba72:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ba76:	f8df b1ac 	ldr.w	fp, [pc, #428]	@ 800bc24 <lwip_netconn_do_writemore+0x234>
 800ba7a:	f007 0304 	and.w	r3, r7, #4
 800ba7e:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ba80:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
 800ba82:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ba84:	688a      	ldr	r2, [r1, #8]
 800ba86:	690b      	ldr	r3, [r1, #16]
 800ba88:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 800ba8a:	f8b5 5064 	ldrh.w	r5, [r5, #100]	@ 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ba8e:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ba92:	6850      	ldr	r0, [r2, #4]
 800ba94:	eba0 0803 	sub.w	r8, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 800ba98:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
        len = 0xffff;
 800ba9c:	bf2a      	itet	cs
 800ba9e:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
        len = (u16_t)diff;
 800baa2:	fa1f f288 	uxthcc.w	r2, r8
        apiflags |= TCP_WRITE_FLAG_MORE;
 800baa6:	f047 0702 	orrcs.w	r7, r7, #2
      if (available < len) {
 800baaa:	42aa      	cmp	r2, r5
 800baac:	d969      	bls.n	800bb82 <lwip_netconn_do_writemore+0x192>
        if (dontblock) {
 800baae:	2e00      	cmp	r6, #0
 800bab0:	d039      	beq.n	800bb26 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 800bab2:	2d00      	cmp	r5, #0
 800bab4:	d139      	bne.n	800bb2a <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bab6:	698b      	ldr	r3, [r1, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bf14      	ite	ne
 800babc:	f04f 0a00 	movne.w	sl, #0
 800bac0:	f06f 0a06 	mvneq.w	sl, #6
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bac4:	6a23      	ldr	r3, [r4, #32]
 800bac6:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d277      	bcs.n	800bbbe <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bace:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bad0:	b11b      	cbz	r3, 800bada <lwip_netconn_do_writemore+0xea>
 800bad2:	2200      	movs	r2, #0
 800bad4:	2103      	movs	r1, #3
 800bad6:	4620      	mov	r0, r4
 800bad8:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bada:	7f23      	ldrb	r3, [r4, #28]
 800badc:	f043 0310 	orr.w	r3, r3, #16
 800bae0:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800bae2:	f1ba 0f00 	cmp.w	sl, #0
 800bae6:	d17f      	bne.n	800bbe8 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bae8:	6a23      	ldr	r3, [r4, #32]
 800baea:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d078      	beq.n	800bbe4 <lwip_netconn_do_writemore+0x1f4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800baf2:	3e00      	subs	r6, #0
 800baf4:	bf18      	it	ne
 800baf6:	2601      	movne	r6, #1
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 800baf8:	6860      	ldr	r0, [r4, #4]
 800bafa:	f005 fb83 	bl	8011204 <tcp_output>
      if (out_err == ERR_RTE) {
 800bafe:	3004      	adds	r0, #4
 800bb00:	f040 8088 	bne.w	800bc14 <lwip_netconn_do_writemore+0x224>
      err_t out_err = tcp_output(conn->pcb.tcp);
      if (out_err == ERR_RTE) {
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bb04:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bb08:	6a23      	ldr	r3, [r4, #32]
 800bb0a:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800bb0c:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 800bb10:	2300      	movs	r3, #0
 800bb12:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800bb14:	7063      	strb	r3, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bb16:	f1b9 0f00 	cmp.w	r9, #0
 800bb1a:	d002      	beq.n	800bb22 <lwip_netconn_do_writemore+0x132>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bb1c:	300c      	adds	r0, #12
 800bb1e:	f007 fbcd 	bl	80132bc <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800bb22:	2000      	movs	r0, #0
 800bb24:	e06b      	b.n	800bbfe <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800bb26:	f047 0702 	orr.w	r7, r7, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800bb2a:	442b      	add	r3, r5
 800bb2c:	4298      	cmp	r0, r3
 800bb2e:	d206      	bcs.n	800bb3e <lwip_netconn_do_writemore+0x14e>
 800bb30:	4b3a      	ldr	r3, [pc, #232]	@ (800bc1c <lwip_netconn_do_writemore+0x22c>)
 800bb32:	f240 62a7 	movw	r2, #1703	@ 0x6a7
 800bb36:	4941      	ldr	r1, [pc, #260]	@ (800bc3c <lwip_netconn_do_writemore+0x24c>)
 800bb38:	4658      	mov	r0, fp
 800bb3a:	f008 fdad 	bl	8014698 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bb3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb42:	429d      	cmp	r5, r3
 800bb44:	d102      	bne.n	800bb4c <lwip_netconn_do_writemore+0x15c>
 800bb46:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 800bb4a:	d207      	bcs.n	800bb5c <lwip_netconn_do_writemore+0x16c>
 800bb4c:	fa1f f888 	uxth.w	r8, r8
 800bb50:	45a8      	cmp	r8, r5
 800bb52:	d118      	bne.n	800bb86 <lwip_netconn_do_writemore+0x196>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bb54:	6a23      	ldr	r3, [r4, #32]
 800bb56:	899b      	ldrh	r3, [r3, #12]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d914      	bls.n	800bb86 <lwip_netconn_do_writemore+0x196>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bb5c:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 800bb60:	f04f 0801 	mov.w	r8, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bb64:	4651      	mov	r1, sl
 800bb66:	463b      	mov	r3, r7
 800bb68:	462a      	mov	r2, r5
 800bb6a:	6860      	ldr	r0, [r4, #4]
 800bb6c:	f004 fe12 	bl	8010794 <tcp_write>
      if (err == ERR_OK) {
 800bb70:	4682      	mov	sl, r0
 800bb72:	b158      	cbz	r0, 800bb8c <lwip_netconn_do_writemore+0x19c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d8c5      	bhi.n	800bb08 <lwip_netconn_do_writemore+0x118>
err_mem:
 800bb7c:	f04f 3aff 	mov.w	sl, #4294967295
 800bb80:	e01b      	b.n	800bbba <lwip_netconn_do_writemore+0x1ca>
 800bb82:	4615      	mov	r5, r2
 800bb84:	e7d1      	b.n	800bb2a <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 800bb86:	f04f 0800 	mov.w	r8, #0
 800bb8a:	e7eb      	b.n	800bb64 <lwip_netconn_do_writemore+0x174>
        conn->current_msg->msg.w.offset += len;
 800bb8c:	6a23      	ldr	r3, [r4, #32]
 800bb8e:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bb90:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 800bb92:	442a      	add	r2, r5
 800bb94:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bb96:	691a      	ldr	r2, [r3, #16]
 800bb98:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bb9a:	684a      	ldr	r2, [r1, #4]
 800bb9c:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 800bb9e:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bba0:	d107      	bne.n	800bbb2 <lwip_netconn_do_writemore+0x1c2>
          conn->current_msg->msg.w.vector_cnt--;
 800bba2:	899a      	ldrh	r2, [r3, #12]
 800bba4:	3a01      	subs	r2, #1
 800bba6:	b292      	uxth	r2, r2
 800bba8:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800bbaa:	b112      	cbz	r2, 800bbb2 <lwip_netconn_do_writemore+0x1c2>
            conn->current_msg->msg.w.vector++;
 800bbac:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 800bbae:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 800bbb0:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800bbb2:	f1b8 0f00 	cmp.w	r8, #0
 800bbb6:	f47f af63 	bne.w	800ba80 <lwip_netconn_do_writemore+0x90>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d182      	bne.n	800bac4 <lwip_netconn_do_writemore+0xd4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bbbe:	6863      	ldr	r3, [r4, #4]
 800bbc0:	f640 3269 	movw	r2, #2921	@ 0xb69
 800bbc4:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800bbc8:	4291      	cmp	r1, r2
 800bbca:	d903      	bls.n	800bbd4 <lwip_netconn_do_writemore+0x1e4>
 800bbcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bbd0:	2b07      	cmp	r3, #7
 800bbd2:	d986      	bls.n	800bae2 <lwip_netconn_do_writemore+0xf2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bbd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d083      	beq.n	800bae2 <lwip_netconn_do_writemore+0xf2>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2103      	movs	r1, #3
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4798      	blx	r3
 800bbe2:	e77e      	b.n	800bae2 <lwip_netconn_do_writemore+0xf2>
 800bbe4:	2601      	movs	r6, #1
 800bbe6:	e787      	b.n	800baf8 <lwip_netconn_do_writemore+0x108>
    } else if (err == ERR_MEM) {
 800bbe8:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bbec:	d10f      	bne.n	800bc0e <lwip_netconn_do_writemore+0x21e>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bbee:	6860      	ldr	r0, [r4, #4]
 800bbf0:	f005 fb08 	bl	8011204 <tcp_output>
      if (out_err == ERR_RTE) {
 800bbf4:	3004      	adds	r0, #4
 800bbf6:	d085      	beq.n	800bb04 <lwip_netconn_do_writemore+0x114>
      } else if (dontblock) {
 800bbf8:	b91e      	cbnz	r6, 800bc02 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bbfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bc02:	6a23      	ldr	r3, [r4, #32]
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	b113      	cbz	r3, 800bc0e <lwip_netconn_do_writemore+0x21e>
 800bc08:	f04f 0a00 	mov.w	sl, #0
 800bc0c:	e77c      	b.n	800bb08 <lwip_netconn_do_writemore+0x118>
 800bc0e:	f06f 0a06 	mvn.w	sl, #6
 800bc12:	e779      	b.n	800bb08 <lwip_netconn_do_writemore+0x118>
  if (write_finished) {
 800bc14:	2e00      	cmp	r6, #0
 800bc16:	d1f7      	bne.n	800bc08 <lwip_netconn_do_writemore+0x218>
 800bc18:	e7ef      	b.n	800bbfa <lwip_netconn_do_writemore+0x20a>
 800bc1a:	bf00      	nop
 800bc1c:	0801620e 	.word	0x0801620e
 800bc20:	0801676d 	.word	0x0801676d
 800bc24:	08015927 	.word	0x08015927
 800bc28:	0801628d 	.word	0x0801628d
 800bc2c:	080162aa 	.word	0x080162aa
 800bc30:	080162c4 	.word	0x080162c4
 800bc34:	080162da 	.word	0x080162da
 800bc38:	08016319 	.word	0x08016319
 800bc3c:	08016341 	.word	0x08016341

0800bc40 <lwip_netconn_do_close_internal>:
{
 800bc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc44:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800bc46:	4604      	mov	r4, r0
 800bc48:	b930      	cbnz	r0, 800bc58 <lwip_netconn_do_close_internal+0x18>
 800bc4a:	4b6b      	ldr	r3, [pc, #428]	@ (800bdf8 <lwip_netconn_do_close_internal+0x1b8>)
 800bc4c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800bc50:	496a      	ldr	r1, [pc, #424]	@ (800bdfc <lwip_netconn_do_close_internal+0x1bc>)
 800bc52:	486b      	ldr	r0, [pc, #428]	@ (800be00 <lwip_netconn_do_close_internal+0x1c0>)
 800bc54:	f008 fd20 	bl	8014698 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800bc58:	7823      	ldrb	r3, [r4, #0]
 800bc5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc5e:	2b10      	cmp	r3, #16
 800bc60:	d006      	beq.n	800bc70 <lwip_netconn_do_close_internal+0x30>
 800bc62:	4b65      	ldr	r3, [pc, #404]	@ (800bdf8 <lwip_netconn_do_close_internal+0x1b8>)
 800bc64:	f240 32a7 	movw	r2, #935	@ 0x3a7
 800bc68:	4966      	ldr	r1, [pc, #408]	@ (800be04 <lwip_netconn_do_close_internal+0x1c4>)
 800bc6a:	4865      	ldr	r0, [pc, #404]	@ (800be00 <lwip_netconn_do_close_internal+0x1c0>)
 800bc6c:	f008 fd14 	bl	8014698 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800bc70:	7863      	ldrb	r3, [r4, #1]
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d006      	beq.n	800bc84 <lwip_netconn_do_close_internal+0x44>
 800bc76:	4b60      	ldr	r3, [pc, #384]	@ (800bdf8 <lwip_netconn_do_close_internal+0x1b8>)
 800bc78:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800bc7c:	4962      	ldr	r1, [pc, #392]	@ (800be08 <lwip_netconn_do_close_internal+0x1c8>)
 800bc7e:	4860      	ldr	r0, [pc, #384]	@ (800be00 <lwip_netconn_do_close_internal+0x1c0>)
 800bc80:	f008 fd0a 	bl	8014698 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800bc84:	6863      	ldr	r3, [r4, #4]
 800bc86:	b933      	cbnz	r3, 800bc96 <lwip_netconn_do_close_internal+0x56>
 800bc88:	4b5b      	ldr	r3, [pc, #364]	@ (800bdf8 <lwip_netconn_do_close_internal+0x1b8>)
 800bc8a:	f240 32a9 	movw	r2, #937	@ 0x3a9
 800bc8e:	495f      	ldr	r1, [pc, #380]	@ (800be0c <lwip_netconn_do_close_internal+0x1cc>)
 800bc90:	485b      	ldr	r0, [pc, #364]	@ (800be00 <lwip_netconn_do_close_internal+0x1c0>)
 800bc92:	f008 fd01 	bl	8014698 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bc96:	6a23      	ldr	r3, [r4, #32]
 800bc98:	b933      	cbnz	r3, 800bca8 <lwip_netconn_do_close_internal+0x68>
 800bc9a:	4b57      	ldr	r3, [pc, #348]	@ (800bdf8 <lwip_netconn_do_close_internal+0x1b8>)
 800bc9c:	f240 32aa 	movw	r2, #938	@ 0x3aa
 800bca0:	495b      	ldr	r1, [pc, #364]	@ (800be10 <lwip_netconn_do_close_internal+0x1d0>)
 800bca2:	4857      	ldr	r0, [pc, #348]	@ (800be00 <lwip_netconn_do_close_internal+0x1c0>)
 800bca4:	f008 fcf8 	bl	8014698 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800bca8:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
 800bcaa:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 800bcac:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 800bcae:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800bcb0:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800bcb4:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800bcb8:	d00f      	beq.n	800bcda <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 800bcba:	f1b9 0f00 	cmp.w	r9, #0
 800bcbe:	d005      	beq.n	800bccc <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 800bcc0:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 800bcc2:	1f5a      	subs	r2, r3, #5
 800bcc4:	2a01      	cmp	r2, #1
 800bcc6:	d908      	bls.n	800bcda <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d006      	beq.n	800bcda <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800bccc:	f1b8 0f00 	cmp.w	r8, #0
 800bcd0:	d04d      	beq.n	800bd6e <lwip_netconn_do_close_internal+0x12e>
 800bcd2:	8b6f      	ldrh	r7, [r5, #26]
 800bcd4:	f017 0710 	ands.w	r7, r7, #16
 800bcd8:	d004      	beq.n	800bce4 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 800bcda:	2701      	movs	r7, #1
 800bcdc:	2100      	movs	r1, #0
 800bcde:	4628      	mov	r0, r5
 800bce0:	f002 fbea 	bl	800e4b8 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800bce4:	7d2b      	ldrb	r3, [r5, #20]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d143      	bne.n	800bd72 <lwip_netconn_do_close_internal+0x132>
    tcp_accept(tpcb, NULL);
 800bcea:	2100      	movs	r1, #0
 800bcec:	4628      	mov	r0, r5
 800bcee:	f002 fc2d 	bl	800e54c <tcp_accept>
  if (shut_close) {
 800bcf2:	2f00      	cmp	r7, #0
 800bcf4:	d05a      	beq.n	800bdac <lwip_netconn_do_close_internal+0x16c>
      err = tcp_close(tpcb);
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f002 ff86 	bl	800ec08 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bcfc:	4606      	mov	r6, r0
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800bcfe:	6a23      	ldr	r3, [r4, #32]
  if (err == ERR_OK) {
 800bd00:	b140      	cbz	r0, 800bd14 <lwip_netconn_do_close_internal+0xd4>
    if (err == ERR_MEM) {
 800bd02:	1c42      	adds	r2, r0, #1
 800bd04:	d107      	bne.n	800bd16 <lwip_netconn_do_close_internal+0xd6>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800bd06:	7a5b      	ldrb	r3, [r3, #9]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d155      	bne.n	800bdb8 <lwip_netconn_do_close_internal+0x178>
        if (shut_close) {
 800bd0c:	b11f      	cbz	r7, 800bd16 <lwip_netconn_do_close_internal+0xd6>
          tcp_abort(tpcb);
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f003 f8c8 	bl	800eea4 <tcp_abort>
    shut_close = 0;
 800bd14:	2600      	movs	r6, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bd16:	6a23      	ldr	r3, [r4, #32]
 800bd18:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800bd1a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800bd20:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800bd22:	b9ce      	cbnz	r6, 800bd58 <lwip_netconn_do_close_internal+0x118>
      if (shut_close) {
 800bd24:	b137      	cbz	r7, 800bd34 <lwip_netconn_do_close_internal+0xf4>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bd26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        conn->pcb.tcp = NULL;
 800bd28:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bd2a:	b11b      	cbz	r3, 800bd34 <lwip_netconn_do_close_internal+0xf4>
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	2104      	movs	r1, #4
 800bd30:	4620      	mov	r0, r4
 800bd32:	4798      	blx	r3
      if (shut_rx) {
 800bd34:	f1b9 0f00 	cmp.w	r9, #0
 800bd38:	d005      	beq.n	800bd46 <lwip_netconn_do_close_internal+0x106>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bd3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd3c:	b11b      	cbz	r3, 800bd46 <lwip_netconn_do_close_internal+0x106>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4620      	mov	r0, r4
 800bd42:	4611      	mov	r1, r2
 800bd44:	4798      	blx	r3
      if (shut_tx) {
 800bd46:	f1b8 0f00 	cmp.w	r8, #0
 800bd4a:	d005      	beq.n	800bd58 <lwip_netconn_do_close_internal+0x118>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bd4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd4e:	b11b      	cbz	r3, 800bd58 <lwip_netconn_do_close_internal+0x118>
 800bd50:	2200      	movs	r2, #0
 800bd52:	2102      	movs	r1, #2
 800bd54:	4620      	mov	r0, r4
 800bd56:	4798      	blx	r3
    if (delayed)
 800bd58:	f1ba 0f00 	cmp.w	sl, #0
 800bd5c:	d003      	beq.n	800bd66 <lwip_netconn_do_close_internal+0x126>
      sys_sem_signal(op_completed_sem);
 800bd5e:	f105 000c 	add.w	r0, r5, #12
 800bd62:	f007 faab 	bl	80132bc <sys_sem_signal>
    return ERR_OK;
 800bd66:	2600      	movs	r6, #0
}
 800bd68:	4630      	mov	r0, r6
 800bd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    shut_close = 0;
 800bd6e:	4647      	mov	r7, r8
 800bd70:	e7b8      	b.n	800bce4 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 800bd72:	f1b9 0f00 	cmp.w	r9, #0
 800bd76:	d007      	beq.n	800bd88 <lwip_netconn_do_close_internal+0x148>
      tcp_recv(tpcb, NULL);
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f002 fba0 	bl	800e4c0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800bd80:	2100      	movs	r1, #0
 800bd82:	4628      	mov	r0, r5
 800bd84:	f002 fbe2 	bl	800e54c <tcp_accept>
    if (shut_tx) {
 800bd88:	f1b8 0f00 	cmp.w	r8, #0
 800bd8c:	d003      	beq.n	800bd96 <lwip_netconn_do_close_internal+0x156>
      tcp_sent(tpcb, NULL);
 800bd8e:	2100      	movs	r1, #0
 800bd90:	4628      	mov	r0, r5
 800bd92:	f002 fbad 	bl	800e4f0 <tcp_sent>
    if (shut_close) {
 800bd96:	b14f      	cbz	r7, 800bdac <lwip_netconn_do_close_internal+0x16c>
      tcp_poll(tpcb, NULL, 0);
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	f002 fbdb 	bl	800e558 <tcp_poll>
      tcp_err(tpcb, NULL);
 800bda2:	2100      	movs	r1, #0
 800bda4:	4628      	mov	r0, r5
 800bda6:	f002 fbb9 	bl	800e51c <tcp_err>
  if (shut_close) {
 800bdaa:	e7a4      	b.n	800bcf6 <lwip_netconn_do_close_internal+0xb6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bdac:	4642      	mov	r2, r8
 800bdae:	4649      	mov	r1, r9
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f002 ffd7 	bl	800ed64 <tcp_shutdown>
 800bdb6:	e7a1      	b.n	800bcfc <lwip_netconn_do_close_internal+0xbc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bdb8:	7d2b      	ldrb	r3, [r5, #20]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d106      	bne.n	800bdcc <lwip_netconn_do_close_internal+0x18c>
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf8 <lwip_netconn_do_close_internal+0x1b8>)
 800bdc0:	f240 4245 	movw	r2, #1093	@ 0x445
 800bdc4:	4913      	ldr	r1, [pc, #76]	@ (800be14 <lwip_netconn_do_close_internal+0x1d4>)
 800bdc6:	480e      	ldr	r0, [pc, #56]	@ (800be00 <lwip_netconn_do_close_internal+0x1c0>)
 800bdc8:	f008 fc66 	bl	8014698 <iprintf>
    if (shut_tx) {
 800bdcc:	f1b8 0f00 	cmp.w	r8, #0
 800bdd0:	d003      	beq.n	800bdda <lwip_netconn_do_close_internal+0x19a>
      tcp_sent(tpcb, sent_tcp);
 800bdd2:	4911      	ldr	r1, [pc, #68]	@ (800be18 <lwip_netconn_do_close_internal+0x1d8>)
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f002 fb8b 	bl	800e4f0 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 800bdda:	2201      	movs	r2, #1
 800bddc:	4628      	mov	r0, r5
 800bdde:	490f      	ldr	r1, [pc, #60]	@ (800be1c <lwip_netconn_do_close_internal+0x1dc>)
 800bde0:	f002 fbba 	bl	800e558 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bde4:	4628      	mov	r0, r5
 800bde6:	490e      	ldr	r1, [pc, #56]	@ (800be20 <lwip_netconn_do_close_internal+0x1e0>)
 800bde8:	f002 fb98 	bl	800e51c <tcp_err>
    tcp_arg(tpcb, conn);
 800bdec:	4621      	mov	r1, r4
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f002 fb62 	bl	800e4b8 <tcp_arg>
  return err;
 800bdf4:	e7b8      	b.n	800bd68 <lwip_netconn_do_close_internal+0x128>
 800bdf6:	bf00      	nop
 800bdf8:	0801620e 	.word	0x0801620e
 800bdfc:	0801636c 	.word	0x0801636c
 800be00:	08015927 	.word	0x08015927
 800be04:	08016379 	.word	0x08016379
 800be08:	08016397 	.word	0x08016397
 800be0c:	080163bb 	.word	0x080163bb
 800be10:	080162aa 	.word	0x080162aa
 800be14:	080163ce 	.word	0x080163ce
 800be18:	0800bea1 	.word	0x0800bea1
 800be1c:	0800be25 	.word	0x0800be25
 800be20:	0800bfc9 	.word	0x0800bfc9

0800be24 <poll_tcp>:
{
 800be24:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800be26:	4604      	mov	r4, r0
 800be28:	b930      	cbnz	r0, 800be38 <poll_tcp+0x14>
 800be2a:	4b1a      	ldr	r3, [pc, #104]	@ (800be94 <poll_tcp+0x70>)
 800be2c:	f240 126d 	movw	r2, #365	@ 0x16d
 800be30:	4919      	ldr	r1, [pc, #100]	@ (800be98 <poll_tcp+0x74>)
 800be32:	481a      	ldr	r0, [pc, #104]	@ (800be9c <poll_tcp+0x78>)
 800be34:	f008 fc30 	bl	8014698 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 800be38:	7861      	ldrb	r1, [r4, #1]
 800be3a:	2901      	cmp	r1, #1
 800be3c:	d11c      	bne.n	800be78 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800be3e:	4620      	mov	r0, r4
 800be40:	f7ff fdd6 	bl	800b9f0 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800be44:	7f23      	ldrb	r3, [r4, #28]
 800be46:	06da      	lsls	r2, r3, #27
 800be48:	d514      	bpl.n	800be74 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800be4a:	6862      	ldr	r2, [r4, #4]
 800be4c:	b192      	cbz	r2, 800be74 <poll_tcp+0x50>
 800be4e:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 800be52:	f640 3169 	movw	r1, #2921	@ 0xb69
 800be56:	4288      	cmp	r0, r1
 800be58:	d90c      	bls.n	800be74 <poll_tcp+0x50>
 800be5a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 800be5e:	2a07      	cmp	r2, #7
 800be60:	d808      	bhi.n	800be74 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800be62:	f023 0310 	bic.w	r3, r3, #16
 800be66:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800be68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800be6a:	b11b      	cbz	r3, 800be74 <poll_tcp+0x50>
 800be6c:	2200      	movs	r2, #0
 800be6e:	2102      	movs	r1, #2
 800be70:	4620      	mov	r0, r4
 800be72:	4798      	blx	r3
}
 800be74:	2000      	movs	r0, #0
 800be76:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 800be78:	2904      	cmp	r1, #4
 800be7a:	d1e3      	bne.n	800be44 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800be7c:	6a22      	ldr	r2, [r4, #32]
 800be7e:	b11a      	cbz	r2, 800be88 <poll_tcp+0x64>
 800be80:	7a53      	ldrb	r3, [r2, #9]
 800be82:	b10b      	cbz	r3, 800be88 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 800be84:	3b01      	subs	r3, #1
 800be86:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800be88:	2101      	movs	r1, #1
 800be8a:	4620      	mov	r0, r4
 800be8c:	f7ff fed8 	bl	800bc40 <lwip_netconn_do_close_internal>
 800be90:	e7d8      	b.n	800be44 <poll_tcp+0x20>
 800be92:	bf00      	nop
 800be94:	0801620e 	.word	0x0801620e
 800be98:	0801676d 	.word	0x0801676d
 800be9c:	08015927 	.word	0x08015927

0800bea0 <sent_tcp>:
{
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bea4:	4604      	mov	r4, r0
 800bea6:	b1d8      	cbz	r0, 800bee0 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 800bea8:	7841      	ldrb	r1, [r0, #1]
 800beaa:	2901      	cmp	r1, #1
 800beac:	d121      	bne.n	800bef2 <sent_tcp+0x52>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800beae:	f7ff fd9f 	bl	800b9f0 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800beb2:	6863      	ldr	r3, [r4, #4]
 800beb4:	b1db      	cbz	r3, 800beee <sent_tcp+0x4e>
 800beb6:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800beba:	f640 3269 	movw	r2, #2921	@ 0xb69
 800bebe:	4291      	cmp	r1, r2
 800bec0:	d915      	bls.n	800beee <sent_tcp+0x4e>
 800bec2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bec6:	2b07      	cmp	r3, #7
 800bec8:	d811      	bhi.n	800beee <sent_tcp+0x4e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800beca:	7f23      	ldrb	r3, [r4, #28]
 800becc:	f023 0310 	bic.w	r3, r3, #16
 800bed0:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800bed2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bed4:	b15b      	cbz	r3, 800beee <sent_tcp+0x4e>
 800bed6:	462a      	mov	r2, r5
 800bed8:	2102      	movs	r1, #2
 800beda:	4620      	mov	r0, r4
 800bedc:	4798      	blx	r3
 800bede:	e006      	b.n	800beee <sent_tcp+0x4e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bee0:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <sent_tcp+0x60>)
 800bee2:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800bee6:	4907      	ldr	r1, [pc, #28]	@ (800bf04 <sent_tcp+0x64>)
 800bee8:	4807      	ldr	r0, [pc, #28]	@ (800bf08 <sent_tcp+0x68>)
 800beea:	f008 fbd5 	bl	8014698 <iprintf>
}
 800beee:	2000      	movs	r0, #0
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 800bef2:	2904      	cmp	r1, #4
 800bef4:	d1dd      	bne.n	800beb2 <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bef6:	2101      	movs	r1, #1
 800bef8:	f7ff fea2 	bl	800bc40 <lwip_netconn_do_close_internal>
 800befc:	e7d9      	b.n	800beb2 <sent_tcp+0x12>
 800befe:	bf00      	nop
 800bf00:	0801620e 	.word	0x0801620e
 800bf04:	0801676d 	.word	0x0801676d
 800bf08:	08015927 	.word	0x08015927

0800bf0c <recv_tcp>:
{
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4615      	mov	r5, r2
 800bf12:	461f      	mov	r7, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800bf14:	460e      	mov	r6, r1
 800bf16:	b931      	cbnz	r1, 800bf26 <recv_tcp+0x1a>
 800bf18:	4b24      	ldr	r3, [pc, #144]	@ (800bfac <recv_tcp+0xa0>)
 800bf1a:	f240 122f 	movw	r2, #303	@ 0x12f
 800bf1e:	4924      	ldr	r1, [pc, #144]	@ (800bfb0 <recv_tcp+0xa4>)
 800bf20:	4824      	ldr	r0, [pc, #144]	@ (800bfb4 <recv_tcp+0xa8>)
 800bf22:	f008 fbb9 	bl	8014698 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800bf26:	b9fc      	cbnz	r4, 800bf68 <recv_tcp+0x5c>
 800bf28:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <recv_tcp+0xa0>)
 800bf2a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800bf2e:	4922      	ldr	r1, [pc, #136]	@ (800bfb8 <recv_tcp+0xac>)
 800bf30:	4820      	ldr	r0, [pc, #128]	@ (800bfb4 <recv_tcp+0xa8>)
 800bf32:	f008 fbb1 	bl	8014698 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800bf36:	b9c7      	cbnz	r7, 800bf6a <recv_tcp+0x5e>
    return ERR_VAL;
 800bf38:	f06f 0005 	mvn.w	r0, #5
}
 800bf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (p != NULL) {
 800bf3e:	b16d      	cbz	r5, 800bf5c <recv_tcp+0x50>
    len = p->tot_len;
 800bf40:	892e      	ldrh	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800bf42:	4629      	mov	r1, r5
 800bf44:	f104 0010 	add.w	r0, r4, #16
 800bf48:	f007 fa6e 	bl	8013428 <sys_mbox_trypost>
 800bf4c:	4601      	mov	r1, r0
 800bf4e:	b940      	cbnz	r0, 800bf62 <recv_tcp+0x56>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bf50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bf52:	b343      	cbz	r3, 800bfa6 <recv_tcp+0x9a>
 800bf54:	4632      	mov	r2, r6
 800bf56:	4620      	mov	r0, r4
 800bf58:	4798      	blx	r3
 800bf5a:	e024      	b.n	800bfa6 <recv_tcp+0x9a>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800bf5c:	4d17      	ldr	r5, [pc, #92]	@ (800bfbc <recv_tcp+0xb0>)
    len = 0;
 800bf5e:	2600      	movs	r6, #0
 800bf60:	e7ef      	b.n	800bf42 <recv_tcp+0x36>
    return ERR_MEM;
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	e7e9      	b.n	800bf3c <recv_tcp+0x30>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800bf68:	b147      	cbz	r7, 800bf7c <recv_tcp+0x70>
 800bf6a:	4b10      	ldr	r3, [pc, #64]	@ (800bfac <recv_tcp+0xa0>)
 800bf6c:	f240 1231 	movw	r2, #305	@ 0x131
 800bf70:	4913      	ldr	r1, [pc, #76]	@ (800bfc0 <recv_tcp+0xb4>)
 800bf72:	4810      	ldr	r0, [pc, #64]	@ (800bfb4 <recv_tcp+0xa8>)
 800bf74:	f008 fb90 	bl	8014698 <iprintf>
  if (conn == NULL) {
 800bf78:	2c00      	cmp	r4, #0
 800bf7a:	d0dd      	beq.n	800bf38 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800bf7c:	6863      	ldr	r3, [r4, #4]
 800bf7e:	42b3      	cmp	r3, r6
 800bf80:	d006      	beq.n	800bf90 <recv_tcp+0x84>
 800bf82:	4b0a      	ldr	r3, [pc, #40]	@ (800bfac <recv_tcp+0xa0>)
 800bf84:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800bf88:	490e      	ldr	r1, [pc, #56]	@ (800bfc4 <recv_tcp+0xb8>)
 800bf8a:	480a      	ldr	r0, [pc, #40]	@ (800bfb4 <recv_tcp+0xa8>)
 800bf8c:	f008 fb84 	bl	8014698 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1d3      	bne.n	800bf3e <recv_tcp+0x32>
    if (p != NULL) {
 800bf96:	b135      	cbz	r5, 800bfa6 <recv_tcp+0x9a>
      tcp_recved(pcb, p->tot_len);
 800bf98:	4630      	mov	r0, r6
 800bf9a:	8929      	ldrh	r1, [r5, #8]
 800bf9c:	f002 fa44 	bl	800e428 <tcp_recved>
      pbuf_free(p);
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f001 fe45 	bl	800dc30 <pbuf_free>
    return ERR_OK;
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	e7c8      	b.n	800bf3c <recv_tcp+0x30>
 800bfaa:	bf00      	nop
 800bfac:	0801620e 	.word	0x0801620e
 800bfb0:	080163f1 	.word	0x080163f1
 800bfb4:	08015927 	.word	0x08015927
 800bfb8:	08016413 	.word	0x08016413
 800bfbc:	0808e5e4 	.word	0x0808e5e4
 800bfc0:	08016432 	.word	0x08016432
 800bfc4:	0801644a 	.word	0x0801644a

0800bfc8 <err_tcp>:
{
 800bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfcc:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bfce:	4604      	mov	r4, r0
 800bfd0:	b930      	cbnz	r0, 800bfe0 <err_tcp+0x18>
 800bfd2:	4b3f      	ldr	r3, [pc, #252]	@ (800c0d0 <err_tcp+0x108>)
 800bfd4:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800bfd8:	493e      	ldr	r1, [pc, #248]	@ (800c0d4 <err_tcp+0x10c>)
 800bfda:	483f      	ldr	r0, [pc, #252]	@ (800c0d8 <err_tcp+0x110>)
 800bfdc:	f008 fb5c 	bl	8014698 <iprintf>
  SYS_ARCH_PROTECT(lev);
 800bfe0:	f007 f8bd 	bl	801315e <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bfe4:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 800bfe6:	2700      	movs	r7, #0
  old_state = conn->state;
 800bfe8:	7866      	ldrb	r6, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bfea:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800bfee:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 800bff0:	6067      	str	r7, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bff2:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 800bff4:	7067      	strb	r7, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800bff6:	f007 f8b7 	bl	8013168 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bffa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bffc:	b11b      	cbz	r3, 800c006 <err_tcp+0x3e>
 800bffe:	463a      	mov	r2, r7
 800c000:	2104      	movs	r1, #4
 800c002:	4620      	mov	r0, r4
 800c004:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c006:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c008:	b11b      	cbz	r3, 800c012 <err_tcp+0x4a>
 800c00a:	2200      	movs	r2, #0
 800c00c:	4620      	mov	r0, r4
 800c00e:	4611      	mov	r1, r2
 800c010:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c012:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c014:	b11b      	cbz	r3, 800c01e <err_tcp+0x56>
 800c016:	2200      	movs	r2, #0
 800c018:	2102      	movs	r1, #2
 800c01a:	4620      	mov	r0, r4
 800c01c:	4798      	blx	r3
  switch (err) {
 800c01e:	f105 030f 	add.w	r3, r5, #15
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b02      	cmp	r3, #2
 800c026:	d83c      	bhi.n	800c0a2 <err_tcp+0xda>
 800c028:	4a2c      	ldr	r2, [pc, #176]	@ (800c0dc <err_tcp+0x114>)
 800c02a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c02e:	6923      	ldr	r3, [r4, #16]
 800c030:	b123      	cbz	r3, 800c03c <err_tcp+0x74>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c032:	4639      	mov	r1, r7
 800c034:	f104 0010 	add.w	r0, r4, #16
 800c038:	f007 f9f6 	bl	8013428 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c03c:	6963      	ldr	r3, [r4, #20]
 800c03e:	b123      	cbz	r3, 800c04a <err_tcp+0x82>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c040:	4639      	mov	r1, r7
 800c042:	f104 0014 	add.w	r0, r4, #20
 800c046:	f007 f9ef 	bl	8013428 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c04a:	2e01      	cmp	r6, #1
 800c04c:	d002      	beq.n	800c054 <err_tcp+0x8c>
 800c04e:	1ef3      	subs	r3, r6, #3
 800c050:	2b01      	cmp	r3, #1
 800c052:	d82f      	bhi.n	800c0b4 <err_tcp+0xec>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c054:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c056:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800c05a:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c05c:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800c05e:	d434      	bmi.n	800c0ca <err_tcp+0x102>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c060:	6a23      	ldr	r3, [r4, #32]
 800c062:	b933      	cbnz	r3, 800c072 <err_tcp+0xaa>
 800c064:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d0 <err_tcp+0x108>)
 800c066:	f240 12e9 	movw	r2, #489	@ 0x1e9
 800c06a:	491d      	ldr	r1, [pc, #116]	@ (800c0e0 <err_tcp+0x118>)
 800c06c:	481a      	ldr	r0, [pc, #104]	@ (800c0d8 <err_tcp+0x110>)
 800c06e:	f008 fb13 	bl	8014698 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c072:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 800c074:	6a23      	ldr	r3, [r4, #32]
 800c076:	bf08      	it	eq
 800c078:	2500      	moveq	r5, #0
 800c07a:	711d      	strb	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f103 050c 	add.w	r5, r3, #12
      LWIP_ASSERT("invalid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	b933      	cbnz	r3, 800c094 <err_tcp+0xcc>
 800c086:	4b12      	ldr	r3, [pc, #72]	@ (800c0d0 <err_tcp+0x108>)
 800c088:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 800c08c:	4915      	ldr	r1, [pc, #84]	@ (800c0e4 <err_tcp+0x11c>)
 800c08e:	4812      	ldr	r0, [pc, #72]	@ (800c0d8 <err_tcp+0x110>)
 800c090:	f008 fb02 	bl	8014698 <iprintf>
      conn->current_msg = NULL;
 800c094:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800c096:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 800c098:	6223      	str	r3, [r4, #32]
}
 800c09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800c09e:	f007 b90d 	b.w	80132bc <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c0a2:	b12d      	cbz	r5, 800c0b0 <err_tcp+0xe8>
 800c0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d0 <err_tcp+0x108>)
 800c0a6:	227d      	movs	r2, #125	@ 0x7d
 800c0a8:	490f      	ldr	r1, [pc, #60]	@ (800c0e8 <err_tcp+0x120>)
 800c0aa:	480b      	ldr	r0, [pc, #44]	@ (800c0d8 <err_tcp+0x110>)
 800c0ac:	f008 faf4 	bl	8014698 <iprintf>
{
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	e7bc      	b.n	800c02e <err_tcp+0x66>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c0b4:	6a23      	ldr	r3, [r4, #32]
 800c0b6:	b143      	cbz	r3, 800c0ca <err_tcp+0x102>
 800c0b8:	4b05      	ldr	r3, [pc, #20]	@ (800c0d0 <err_tcp+0x108>)
 800c0ba:	f44f 72fd 	mov.w	r2, #506	@ 0x1fa
 800c0be:	490b      	ldr	r1, [pc, #44]	@ (800c0ec <err_tcp+0x124>)
 800c0c0:	4805      	ldr	r0, [pc, #20]	@ (800c0d8 <err_tcp+0x110>)
}
 800c0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c0c6:	f008 bae7 	b.w	8014698 <iprintf>
}
 800c0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0801620e 	.word	0x0801620e
 800c0d4:	0801676d 	.word	0x0801676d
 800c0d8:	08015927 	.word	0x08015927
 800c0dc:	0808e5d8 	.word	0x0808e5d8
 800c0e0:	080162aa 	.word	0x080162aa
 800c0e4:	08016478 	.word	0x08016478
 800c0e8:	08016468 	.word	0x08016468
 800c0ec:	08016491 	.word	0x08016491

0800c0f0 <lwip_netconn_is_err_msg>:
{
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	b929      	cbnz	r1, 800c104 <lwip_netconn_is_err_msg+0x14>
 800c0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c12c <lwip_netconn_is_err_msg+0x3c>)
 800c0fa:	2285      	movs	r2, #133	@ 0x85
 800c0fc:	490c      	ldr	r1, [pc, #48]	@ (800c130 <lwip_netconn_is_err_msg+0x40>)
 800c0fe:	480d      	ldr	r0, [pc, #52]	@ (800c134 <lwip_netconn_is_err_msg+0x44>)
 800c100:	f008 faca 	bl	8014698 <iprintf>
  if (msg == &netconn_aborted) {
 800c104:	4b0c      	ldr	r3, [pc, #48]	@ (800c138 <lwip_netconn_is_err_msg+0x48>)
 800c106:	429d      	cmp	r5, r3
 800c108:	d103      	bne.n	800c112 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_ABRT;
 800c10a:	23f3      	movs	r3, #243	@ 0xf3
    return 1;
 800c10c:	2001      	movs	r0, #1
    *err = ERR_RST;
 800c10e:	7023      	strb	r3, [r4, #0]
}
 800c110:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 800c112:	4b0a      	ldr	r3, [pc, #40]	@ (800c13c <lwip_netconn_is_err_msg+0x4c>)
 800c114:	429d      	cmp	r5, r3
 800c116:	d101      	bne.n	800c11c <lwip_netconn_is_err_msg+0x2c>
    *err = ERR_RST;
 800c118:	23f2      	movs	r3, #242	@ 0xf2
 800c11a:	e7f7      	b.n	800c10c <lwip_netconn_is_err_msg+0x1c>
  } else if (msg == &netconn_closed) {
 800c11c:	4b08      	ldr	r3, [pc, #32]	@ (800c140 <lwip_netconn_is_err_msg+0x50>)
 800c11e:	429d      	cmp	r5, r3
 800c120:	d101      	bne.n	800c126 <lwip_netconn_is_err_msg+0x36>
    *err = ERR_CLSD;
 800c122:	23f1      	movs	r3, #241	@ 0xf1
 800c124:	e7f2      	b.n	800c10c <lwip_netconn_is_err_msg+0x1c>
  return 0;
 800c126:	2000      	movs	r0, #0
 800c128:	e7f2      	b.n	800c110 <lwip_netconn_is_err_msg+0x20>
 800c12a:	bf00      	nop
 800c12c:	0801620e 	.word	0x0801620e
 800c130:	080164ab 	.word	0x080164ab
 800c134:	08015927 	.word	0x08015927
 800c138:	0808e5e6 	.word	0x0808e5e6
 800c13c:	0808e5e5 	.word	0x0808e5e5
 800c140:	0808e5e4 	.word	0x0808e5e4

0800c144 <lwip_netconn_do_newconn>:
{
 800c144:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800c146:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800c148:	6805      	ldr	r5, [r0, #0]
{
 800c14a:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800c14c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800c14e:	6868      	ldr	r0, [r5, #4]
 800c150:	bb28      	cbnz	r0, 800c19e <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c152:	782b      	ldrb	r3, [r5, #0]
 800c154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c158:	2b10      	cmp	r3, #16
 800c15a:	d014      	beq.n	800c186 <lwip_netconn_do_newconn+0x42>
 800c15c:	2b20      	cmp	r3, #32
 800c15e:	d11c      	bne.n	800c19a <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c160:	f005 fd12 	bl	8011b88 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800c164:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c166:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800c168:	6850      	ldr	r0, [r2, #4]
 800c16a:	b150      	cbz	r0, 800c182 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c16c:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c16e:	490c      	ldr	r1, [pc, #48]	@ (800c1a0 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c170:	2b22      	cmp	r3, #34	@ 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c172:	bf04      	itt	eq
 800c174:	2301      	moveq	r3, #1
 800c176:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c178:	f005 fcda 	bl	8011b30 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	b96b      	cbnz	r3, 800c19e <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800c182:	23ff      	movs	r3, #255	@ 0xff
 800c184:	e00a      	b.n	800c19c <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c186:	f002 ff7d 	bl	800f084 <tcp_new_ip_type>
 800c18a:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800c18c:	6820      	ldr	r0, [r4, #0]
 800c18e:	6843      	ldr	r3, [r0, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d0f6      	beq.n	800c182 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 800c194:	f7ff fc0a 	bl	800b9ac <setup_tcp>
 800c198:	e7f0      	b.n	800c17c <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 800c19a:	23fa      	movs	r3, #250	@ 0xfa
    msg->err = ERR_MEM;
 800c19c:	7123      	strb	r3, [r4, #4]
}
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	0800b905 	.word	0x0800b905

0800c1a4 <netconn_alloc>:
{
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c1a8:	2007      	movs	r0, #7
{
 800c1aa:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c1ac:	f001 fb26 	bl	800d7fc <memp_malloc>
  if (conn == NULL) {
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	b1a0      	cbz	r0, 800c1de <netconn_alloc+0x3a>
  conn->type = t;
 800c1b4:	7005      	strb	r5, [r0, #0]
 800c1b6:	f005 05f0 	and.w	r5, r5, #240	@ 0xf0
  conn->pending_err = ERR_OK;
 800c1ba:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 800c1bc:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 800c1be:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 800c1c0:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800c1c2:	d00e      	beq.n	800c1e2 <netconn_alloc+0x3e>
 800c1c4:	2d20      	cmp	r5, #32
 800c1c6:	d00c      	beq.n	800c1e2 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c1c8:	4b14      	ldr	r3, [pc, #80]	@ (800c21c <netconn_alloc+0x78>)
 800c1ca:	f240 22eb 	movw	r2, #747	@ 0x2eb
 800c1ce:	4914      	ldr	r1, [pc, #80]	@ (800c220 <netconn_alloc+0x7c>)
 800c1d0:	4814      	ldr	r0, [pc, #80]	@ (800c224 <netconn_alloc+0x80>)
 800c1d2:	f008 fa61 	bl	8014698 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	2007      	movs	r0, #7
 800c1da:	f001 fb2d 	bl	800d838 <memp_free>
    return NULL;
 800c1de:	2400      	movs	r4, #0
 800c1e0:	e019      	b.n	800c216 <netconn_alloc+0x72>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c1e2:	f104 0510 	add.w	r5, r4, #16
 800c1e6:	2106      	movs	r1, #6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	f007 f8f5 	bl	80133d8 <sys_mbox_new>
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d1f0      	bne.n	800c1d6 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c1f4:	f104 000c 	add.w	r0, r4, #12
 800c1f8:	f007 f826 	bl	8013248 <sys_sem_new>
 800c1fc:	b118      	cbz	r0, 800c206 <netconn_alloc+0x62>
    sys_mbox_free(&conn->recvmbox);
 800c1fe:	4628      	mov	r0, r5
 800c200:	f007 f9c2 	bl	8013588 <sys_mbox_free>
    goto free_and_return;
 800c204:	e7e7      	b.n	800c1d6 <netconn_alloc+0x32>
  conn->callback_arg.socket = -1;
 800c206:	f04f 33ff 	mov.w	r3, #4294967295
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c20a:	6160      	str	r0, [r4, #20]
  conn->state        = NETCONN_NONE;
 800c20c:	7060      	strb	r0, [r4, #1]
  conn->callback_arg.socket = -1;
 800c20e:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
 800c210:	7720      	strb	r0, [r4, #28]
  conn->current_msg  = NULL;
 800c212:	e9c4 0608 	strd	r0, r6, [r4, #32]
}
 800c216:	4620      	mov	r0, r4
 800c218:	bd70      	pop	{r4, r5, r6, pc}
 800c21a:	bf00      	nop
 800c21c:	0801620e 	.word	0x0801620e
 800c220:	080164b7 	.word	0x080164b7
 800c224:	08015927 	.word	0x08015927

0800c228 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c228:	6843      	ldr	r3, [r0, #4]
{
 800c22a:	b510      	push	{r4, lr}
 800c22c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c22e:	b133      	cbz	r3, 800c23e <netconn_free+0x16>
 800c230:	4b12      	ldr	r3, [pc, #72]	@ (800c27c <netconn_free+0x54>)
 800c232:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c236:	4912      	ldr	r1, [pc, #72]	@ (800c280 <netconn_free+0x58>)
 800c238:	4812      	ldr	r0, [pc, #72]	@ (800c284 <netconn_free+0x5c>)
 800c23a:	f008 fa2d 	bl	8014698 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	b133      	cbz	r3, 800c250 <netconn_free+0x28>
 800c242:	4b0e      	ldr	r3, [pc, #56]	@ (800c27c <netconn_free+0x54>)
 800c244:	f240 3227 	movw	r2, #807	@ 0x327
 800c248:	490f      	ldr	r1, [pc, #60]	@ (800c288 <netconn_free+0x60>)
 800c24a:	480e      	ldr	r0, [pc, #56]	@ (800c284 <netconn_free+0x5c>)
 800c24c:	f008 fa24 	bl	8014698 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c250:	6963      	ldr	r3, [r4, #20]
 800c252:	b133      	cbz	r3, 800c262 <netconn_free+0x3a>
 800c254:	4b09      	ldr	r3, [pc, #36]	@ (800c27c <netconn_free+0x54>)
 800c256:	f240 322a 	movw	r2, #810	@ 0x32a
 800c25a:	490c      	ldr	r1, [pc, #48]	@ (800c28c <netconn_free+0x64>)
 800c25c:	4809      	ldr	r0, [pc, #36]	@ (800c284 <netconn_free+0x5c>)
 800c25e:	f008 fa1b 	bl	8014698 <iprintf>
  sys_sem_free(&conn->op_completed);
 800c262:	f104 000c 	add.w	r0, r4, #12
 800c266:	f007 f895 	bl	8013394 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c26a:	2300      	movs	r3, #0
  memp_free(MEMP_NETCONN, conn);
 800c26c:	4621      	mov	r1, r4
 800c26e:	2007      	movs	r0, #7
  sys_sem_set_invalid(&conn->op_completed);
 800c270:	60e3      	str	r3, [r4, #12]
}
 800c272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 800c276:	f001 badf 	b.w	800d838 <memp_free>
 800c27a:	bf00      	nop
 800c27c:	0801620e 	.word	0x0801620e
 800c280:	080164dd 	.word	0x080164dd
 800c284:	08015927 	.word	0x08015927
 800c288:	0801650b 	.word	0x0801650b
 800c28c:	08016545 	.word	0x08016545

0800c290 <netconn_drain>:
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c290:	6903      	ldr	r3, [r0, #16]
{
 800c292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c294:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c296:	b163      	cbz	r3, 800c2b2 <netconn_drain+0x22>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c298:	f100 0510 	add.w	r5, r0, #16
 800c29c:	a901      	add	r1, sp, #4
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f007 f93a 	bl	8013518 <sys_arch_mbox_tryfetch>
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d115      	bne.n	800c2d4 <netconn_drain+0x44>
    sys_mbox_free(&conn->recvmbox);
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f007 f96d 	bl	8013588 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	6123      	str	r3, [r4, #16]
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c2b2:	6963      	ldr	r3, [r4, #20]
 800c2b4:	b163      	cbz	r3, 800c2d0 <netconn_drain+0x40>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c2b6:	f104 0714 	add.w	r7, r4, #20
 800c2ba:	a901      	add	r1, sp, #4
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f007 f92b 	bl	8013518 <sys_arch_mbox_tryfetch>
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	d119      	bne.n	800c2fa <netconn_drain+0x6a>
    sys_mbox_free(&conn->acceptmbox);
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f007 f95e 	bl	8013588 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	6163      	str	r3, [r4, #20]
}
 800c2d0:	b003      	add	sp, #12
 800c2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c2d4:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c2d6:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c2d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c2dc:	2b10      	cmp	r3, #16
 800c2de:	d109      	bne.n	800c2f4 <netconn_drain+0x64>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c2e0:	f10d 0103 	add.w	r1, sp, #3
 800c2e4:	f7ff ff04 	bl	800c0f0 <lwip_netconn_is_err_msg>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d1d7      	bne.n	800c29c <netconn_drain+0xc>
            pbuf_free((struct pbuf *)mem);
 800c2ec:	9801      	ldr	r0, [sp, #4]
 800c2ee:	f001 fc9f 	bl	800dc30 <pbuf_free>
 800c2f2:	e7d3      	b.n	800c29c <netconn_drain+0xc>
          netbuf_delete((struct netbuf *)mem);
 800c2f4:	f000 fa54 	bl	800c7a0 <netbuf_delete>
 800c2f8:	e7d0      	b.n	800c29c <netconn_drain+0xc>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c2fa:	f10d 0103 	add.w	r1, sp, #3
 800c2fe:	9801      	ldr	r0, [sp, #4]
 800c300:	f7ff fef6 	bl	800c0f0 <lwip_netconn_is_err_msg>
 800c304:	4606      	mov	r6, r0
 800c306:	2800      	cmp	r0, #0
 800c308:	d1d7      	bne.n	800c2ba <netconn_drain+0x2a>
          struct netconn *newconn = (struct netconn *)mem;
 800c30a:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 800c30c:	4628      	mov	r0, r5
 800c30e:	f7ff ffbf 	bl	800c290 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c312:	6868      	ldr	r0, [r5, #4]
 800c314:	b110      	cbz	r0, 800c31c <netconn_drain+0x8c>
            tcp_abort(newconn->pcb.tcp);
 800c316:	f002 fdc5 	bl	800eea4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c31a:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7ff ff83 	bl	800c228 <netconn_free>
 800c322:	e7ca      	b.n	800c2ba <netconn_drain+0x2a>

0800c324 <accept_function>:
{
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	460e      	mov	r6, r1
  if (conn == NULL) {
 800c328:	4604      	mov	r4, r0
 800c32a:	b178      	cbz	r0, 800c34c <accept_function+0x28>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c32c:	6943      	ldr	r3, [r0, #20]
 800c32e:	b16b      	cbz	r3, 800c34c <accept_function+0x28>
  if (newpcb == NULL) {
 800c330:	f100 0714 	add.w	r7, r0, #20
 800c334:	b971      	cbnz	r1, 800c354 <accept_function+0x30>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c336:	492e      	ldr	r1, [pc, #184]	@ (800c3f0 <accept_function+0xcc>)
 800c338:	4638      	mov	r0, r7
 800c33a:	f007 f875 	bl	8013428 <sys_mbox_trypost>
 800c33e:	4602      	mov	r2, r0
 800c340:	b920      	cbnz	r0, 800c34c <accept_function+0x28>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c342:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c344:	b113      	cbz	r3, 800c34c <accept_function+0x28>
 800c346:	4601      	mov	r1, r0
 800c348:	4620      	mov	r0, r4
 800c34a:	4798      	blx	r3
    return ERR_VAL;
 800c34c:	f06f 0605 	mvn.w	r6, #5
}
 800c350:	4630      	mov	r0, r6
 800c352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800c354:	b132      	cbz	r2, 800c364 <accept_function+0x40>
 800c356:	4b27      	ldr	r3, [pc, #156]	@ (800c3f4 <accept_function+0xd0>)
 800c358:	f240 222d 	movw	r2, #557	@ 0x22d
 800c35c:	4926      	ldr	r1, [pc, #152]	@ (800c3f8 <accept_function+0xd4>)
 800c35e:	4827      	ldr	r0, [pc, #156]	@ (800c3fc <accept_function+0xd8>)
 800c360:	f008 f99a 	bl	8014698 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 800c364:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c366:	7820      	ldrb	r0, [r4, #0]
 800c368:	f7ff ff1c 	bl	800c1a4 <netconn_alloc>
  if (newconn == NULL) {
 800c36c:	4605      	mov	r5, r0
 800c36e:	b968      	cbnz	r0, 800c38c <accept_function+0x68>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c370:	491f      	ldr	r1, [pc, #124]	@ (800c3f0 <accept_function+0xcc>)
 800c372:	4638      	mov	r0, r7
 800c374:	f007 f858 	bl	8013428 <sys_mbox_trypost>
 800c378:	4602      	mov	r2, r0
 800c37a:	b920      	cbnz	r0, 800c386 <accept_function+0x62>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c37c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c37e:	b113      	cbz	r3, 800c386 <accept_function+0x62>
 800c380:	4601      	mov	r1, r0
 800c382:	4620      	mov	r0, r4
 800c384:	4798      	blx	r3
    return ERR_MEM;
 800c386:	f04f 36ff 	mov.w	r6, #4294967295
 800c38a:	e7e1      	b.n	800c350 <accept_function+0x2c>
  newconn->pcb.tcp = newpcb;
 800c38c:	6046      	str	r6, [r0, #4]
  setup_tcp(newconn);
 800c38e:	f7ff fb0d 	bl	800b9ac <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800c392:	4629      	mov	r1, r5
 800c394:	4638      	mov	r0, r7
 800c396:	f007 f847 	bl	8013428 <sys_mbox_trypost>
 800c39a:	4606      	mov	r6, r0
 800c39c:	b300      	cbz	r0, 800c3e0 <accept_function+0xbc>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800c39e:	686c      	ldr	r4, [r5, #4]
    tcp_arg(pcb, NULL);
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f002 f888 	bl	800e4b8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f002 f888 	bl	800e4c0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	f002 f89c 	bl	800e4f0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	4611      	mov	r1, r2
 800c3be:	f002 f8cb 	bl	800e558 <tcp_poll>
    tcp_err(pcb, NULL);
 800c3c2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 800c3c4:	2400      	movs	r4, #0
    tcp_err(pcb, NULL);
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	f002 f8a8 	bl	800e51c <tcp_err>
    sys_mbox_free(&newconn->recvmbox);
 800c3cc:	f105 0010 	add.w	r0, r5, #16
    newconn->pcb.tcp = NULL;
 800c3d0:	606c      	str	r4, [r5, #4]
    sys_mbox_free(&newconn->recvmbox);
 800c3d2:	f007 f8d9 	bl	8013588 <sys_mbox_free>
    netconn_free(newconn);
 800c3d6:	4628      	mov	r0, r5
    sys_mbox_set_invalid(&newconn->recvmbox);
 800c3d8:	612c      	str	r4, [r5, #16]
    netconn_free(newconn);
 800c3da:	f7ff ff25 	bl	800c228 <netconn_free>
    return ERR_MEM;
 800c3de:	e7d2      	b.n	800c386 <accept_function+0x62>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c3e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0b4      	beq.n	800c350 <accept_function+0x2c>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	4601      	mov	r1, r0
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	4798      	blx	r3
 800c3ee:	e7af      	b.n	800c350 <accept_function+0x2c>
 800c3f0:	0808e5e6 	.word	0x0808e5e6
 800c3f4:	0801620e 	.word	0x0801620e
 800c3f8:	08016581 	.word	0x08016581
 800c3fc:	08015927 	.word	0x08015927

0800c400 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 800c400:	6803      	ldr	r3, [r0, #0]
{
 800c402:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800c404:	785d      	ldrb	r5, [r3, #1]
{
 800c406:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c408:	b1b5      	cbz	r5, 800c438 <lwip_netconn_do_delconn+0x38>
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c410:	2b10      	cmp	r3, #16
 800c412:	d006      	beq.n	800c422 <lwip_netconn_do_delconn+0x22>
 800c414:	4b36      	ldr	r3, [pc, #216]	@ (800c4f0 <lwip_netconn_do_delconn+0xf0>)
 800c416:	f240 4262 	movw	r2, #1122	@ 0x462
 800c41a:	4936      	ldr	r1, [pc, #216]	@ (800c4f4 <lwip_netconn_do_delconn+0xf4>)
 800c41c:	4836      	ldr	r0, [pc, #216]	@ (800c4f8 <lwip_netconn_do_delconn+0xf8>)
 800c41e:	f008 f93b 	bl	8014698 <iprintf>
  if (((state != NETCONN_NONE) &&
 800c422:	2d02      	cmp	r5, #2
 800c424:	d008      	beq.n	800c438 <lwip_netconn_do_delconn+0x38>
       (state != NETCONN_LISTEN) &&
 800c426:	2d03      	cmp	r5, #3
 800c428:	d103      	bne.n	800c432 <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	7f1b      	ldrb	r3, [r3, #28]
 800c42e:	075b      	lsls	r3, r3, #29
 800c430:	d402      	bmi.n	800c438 <lwip_netconn_do_delconn+0x38>
    msg->err = ERR_INPROGRESS;
 800c432:	23fb      	movs	r3, #251	@ 0xfb
 800c434:	7123      	strb	r3, [r4, #4]
}
 800c436:	bd70      	pop	{r4, r5, r6, pc}
    msg->err = ERR_OK;
 800c438:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 800c43a:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800c43c:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800c43e:	f7ff ff27 	bl	800c290 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800c442:	6822      	ldr	r2, [r4, #0]
 800c444:	6850      	ldr	r0, [r2, #4]
 800c446:	b160      	cbz	r0, 800c462 <lwip_netconn_do_delconn+0x62>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c448:	7813      	ldrb	r3, [r2, #0]
 800c44a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c44e:	2b10      	cmp	r3, #16
 800c450:	d016      	beq.n	800c480 <lwip_netconn_do_delconn+0x80>
 800c452:	2b20      	cmp	r3, #32
 800c454:	d102      	bne.n	800c45c <lwip_netconn_do_delconn+0x5c>
          msg->conn->pcb.udp->recv_arg = NULL;
 800c456:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 800c458:	f005 fb6e 	bl	8011b38 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	2200      	movs	r2, #0
 800c460:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c462:	6820      	ldr	r0, [r4, #0]
 800c464:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c466:	b113      	cbz	r3, 800c46e <lwip_netconn_do_delconn+0x6e>
 800c468:	2200      	movs	r2, #0
 800c46a:	4611      	mov	r1, r2
 800c46c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c46e:	6820      	ldr	r0, [r4, #0]
 800c470:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0df      	beq.n	800c436 <lwip_netconn_do_delconn+0x36>
 800c476:	2200      	movs	r2, #0
 800c478:	2102      	movs	r1, #2
}
 800c47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c47e:	4718      	bx	r3
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c480:	6a13      	ldr	r3, [r2, #32]
 800c482:	b133      	cbz	r3, 800c492 <lwip_netconn_do_delconn+0x92>
 800c484:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f0 <lwip_netconn_do_delconn+0xf0>)
 800c486:	f44f 6293 	mov.w	r2, #1176	@ 0x498
 800c48a:	491c      	ldr	r1, [pc, #112]	@ (800c4fc <lwip_netconn_do_delconn+0xfc>)
 800c48c:	481a      	ldr	r0, [pc, #104]	@ (800c4f8 <lwip_netconn_do_delconn+0xf8>)
 800c48e:	f008 f903 	bl	8014698 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c492:	6820      	ldr	r0, [r4, #0]
 800c494:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c496:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 800c498:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c49a:	2303      	movs	r3, #3
 800c49c:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800c49e:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c4a0:	f7ff fbce 	bl	800bc40 <lwip_netconn_do_close_internal>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0c6      	beq.n	800c436 <lwip_netconn_do_delconn+0x36>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	785b      	ldrb	r3, [r3, #1]
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d006      	beq.n	800c4be <lwip_netconn_do_delconn+0xbe>
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f0 <lwip_netconn_do_delconn+0xf0>)
 800c4b2:	f240 429e 	movw	r2, #1182	@ 0x49e
 800c4b6:	4912      	ldr	r1, [pc, #72]	@ (800c500 <lwip_netconn_do_delconn+0x100>)
 800c4b8:	480f      	ldr	r0, [pc, #60]	@ (800c4f8 <lwip_netconn_do_delconn+0xf8>)
 800c4ba:	f008 f8ed 	bl	8014698 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c4be:	4811      	ldr	r0, [pc, #68]	@ (800c504 <lwip_netconn_do_delconn+0x104>)
 800c4c0:	f006 fe98 	bl	80131f4 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c4c4:	6820      	ldr	r0, [r4, #0]
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	300c      	adds	r0, #12
 800c4ca:	f006 ff27 	bl	801331c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c4ce:	480d      	ldr	r0, [pc, #52]	@ (800c504 <lwip_netconn_do_delconn+0x104>)
 800c4d0:	f006 fe64 	bl	801319c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0ac      	beq.n	800c436 <lwip_netconn_do_delconn+0x36>
 800c4dc:	4b04      	ldr	r3, [pc, #16]	@ (800c4f0 <lwip_netconn_do_delconn+0xf0>)
 800c4de:	f240 42a2 	movw	r2, #1186	@ 0x4a2
 800c4e2:	4907      	ldr	r1, [pc, #28]	@ (800c500 <lwip_netconn_do_delconn+0x100>)
 800c4e4:	4804      	ldr	r0, [pc, #16]	@ (800c4f8 <lwip_netconn_do_delconn+0xf8>)
}
 800c4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c4ea:	f008 b8d5 	b.w	8014698 <iprintf>
 800c4ee:	bf00      	nop
 800c4f0:	0801620e 	.word	0x0801620e
 800c4f4:	080165a8 	.word	0x080165a8
 800c4f8:	08015927 	.word	0x08015927
 800c4fc:	080165bc 	.word	0x080165bc
 800c500:	080165d7 	.word	0x080165d7
 800c504:	2000b514 	.word	0x2000b514

0800c508 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 800c508:	6803      	ldr	r3, [r0, #0]
{
 800c50a:	b510      	push	{r4, lr}
 800c50c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800c50e:	6858      	ldr	r0, [r3, #4]
 800c510:	b188      	cbz	r0, 800c536 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c518:	2b10      	cmp	r3, #16
 800c51a:	d007      	beq.n	800c52c <lwip_netconn_do_bind+0x24>
 800c51c:	2b20      	cmp	r3, #32
 800c51e:	d10a      	bne.n	800c536 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c520:	89a2      	ldrh	r2, [r4, #12]
 800c522:	68a1      	ldr	r1, [r4, #8]
 800c524:	f005 faa4 	bl	8011a70 <udp_bind>
  msg->err = err;
 800c528:	7120      	strb	r0, [r4, #4]
}
 800c52a:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c52c:	89a2      	ldrh	r2, [r4, #12]
 800c52e:	68a1      	ldr	r1, [r4, #8]
 800c530:	f001 feae 	bl	800e290 <tcp_bind>
        break;
 800c534:	e7f8      	b.n	800c528 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c536:	f06f 0005 	mvn.w	r0, #5
 800c53a:	e7f5      	b.n	800c528 <lwip_netconn_do_bind+0x20>

0800c53c <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 800c53c:	6803      	ldr	r3, [r0, #0]
{
 800c53e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c540:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800c542:	6858      	ldr	r0, [r3, #4]
 800c544:	2800      	cmp	r0, #0
 800c546:	d045      	beq.n	800c5d4 <lwip_netconn_do_listen+0x98>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c548:	781a      	ldrb	r2, [r3, #0]
 800c54a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c54e:	2a10      	cmp	r2, #16
 800c550:	d142      	bne.n	800c5d8 <lwip_netconn_do_listen+0x9c>
      if (msg->conn->state == NETCONN_NONE) {
 800c552:	785b      	ldrb	r3, [r3, #1]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d139      	bne.n	800c5cc <lwip_netconn_do_listen+0x90>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800c558:	7d06      	ldrb	r6, [r0, #20]
 800c55a:	b11e      	cbz	r6, 800c564 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 800c55c:	23fa      	movs	r3, #250	@ 0xfa
      err = ERR_ARG;
 800c55e:	f88d 3007 	strb.w	r3, [sp, #7]
 800c562:	e020      	b.n	800c5a6 <lwip_netconn_do_listen+0x6a>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800c564:	f10d 0207 	add.w	r2, sp, #7
 800c568:	21ff      	movs	r1, #255	@ 0xff
 800c56a:	f001 fed1 	bl	800e310 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800c56e:	4605      	mov	r5, r0
 800c570:	b1c8      	cbz	r0, 800c5a6 <lwip_netconn_do_listen+0x6a>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	6903      	ldr	r3, [r0, #16]
 800c576:	b123      	cbz	r3, 800c582 <lwip_netconn_do_listen+0x46>
              sys_mbox_free(&msg->conn->recvmbox);
 800c578:	3010      	adds	r0, #16
 800c57a:	f007 f805 	bl	8013588 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	611e      	str	r6, [r3, #16]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c582:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800c584:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c586:	6946      	ldr	r6, [r0, #20]
            err = ERR_OK;
 800c588:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c58c:	b186      	cbz	r6, 800c5b0 <lwip_netconn_do_listen+0x74>
              msg->conn->state = NETCONN_LISTEN;
 800c58e:	6821      	ldr	r1, [r4, #0]
 800c590:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c592:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800c594:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 800c596:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c598:	f001 ff8e 	bl	800e4b8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	490f      	ldr	r1, [pc, #60]	@ (800c5dc <lwip_netconn_do_listen+0xa0>)
 800c5a0:	6858      	ldr	r0, [r3, #4]
 800c5a2:	f001 ffd3 	bl	800e54c <tcp_accept>
  msg->err = err;
 800c5a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5aa:	7123      	strb	r3, [r4, #4]
}
 800c5ac:	b002      	add	sp, #8
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800c5b0:	2106      	movs	r1, #6
 800c5b2:	3014      	adds	r0, #20
 800c5b4:	f006 ff10 	bl	80133d8 <sys_mbox_new>
 800c5b8:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d0e6      	beq.n	800c58e <lwip_netconn_do_listen+0x52>
              tcp_close(lpcb);
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f002 fb21 	bl	800ec08 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	605e      	str	r6, [r3, #4]
 800c5ca:	e7ec      	b.n	800c5a6 <lwip_netconn_do_listen+0x6a>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d101      	bne.n	800c5d4 <lwip_netconn_do_listen+0x98>
        err = ERR_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e7c4      	b.n	800c55e <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 800c5d4:	23f5      	movs	r3, #245	@ 0xf5
 800c5d6:	e7c2      	b.n	800c55e <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 800c5d8:	23f0      	movs	r3, #240	@ 0xf0
 800c5da:	e7c0      	b.n	800c55e <lwip_netconn_do_listen+0x22>
 800c5dc:	0800c325 	.word	0x0800c325

0800c5e0 <lwip_netconn_do_recv>:
{
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800c5e2:	2300      	movs	r3, #0
{
 800c5e4:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800c5e6:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c5e8:	6803      	ldr	r3, [r0, #0]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	b192      	cbz	r2, 800c614 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5f4:	2b10      	cmp	r3, #16
 800c5f6:	d10d      	bne.n	800c614 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 800c5f8:	6885      	ldr	r5, [r0, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c5fa:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800c5fe:	42bd      	cmp	r5, r7
 800c600:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c602:	6823      	ldr	r3, [r4, #0]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c604:	bf28      	it	cs
 800c606:	463e      	movcs	r6, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c608:	6858      	ldr	r0, [r3, #4]
 800c60a:	b2b1      	uxth	r1, r6
 800c60c:	f001 ff0c 	bl	800e428 <tcp_recved>
      } while (remaining != 0);
 800c610:	1bad      	subs	r5, r5, r6
 800c612:	d1f4      	bne.n	800c5fe <lwip_netconn_do_recv+0x1e>
}
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c618 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c618:	b510      	push	{r4, lr}
 800c61a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800c61c:	6800      	ldr	r0, [r0, #0]
 800c61e:	f7ff f82c 	bl	800b67a <netconn_err>
  if (err == ERR_OK) {
 800c622:	2800      	cmp	r0, #0
 800c624:	d14a      	bne.n	800c6bc <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c62e:	2a10      	cmp	r2, #16
 800c630:	d142      	bne.n	800c6b8 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c632:	785a      	ldrb	r2, [r3, #1]
 800c634:	2a00      	cmp	r2, #0
 800c636:	d143      	bne.n	800c6c0 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	d043      	beq.n	800c6c6 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 800c63e:	2201      	movs	r2, #1
 800c640:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	b133      	cbz	r3, 800c654 <lwip_netconn_do_write+0x3c>
 800c646:	4b21      	ldr	r3, [pc, #132]	@ (800c6cc <lwip_netconn_do_write+0xb4>)
 800c648:	f240 7227 	movw	r2, #1831	@ 0x727
 800c64c:	4920      	ldr	r1, [pc, #128]	@ (800c6d0 <lwip_netconn_do_write+0xb8>)
 800c64e:	4821      	ldr	r0, [pc, #132]	@ (800c6d4 <lwip_netconn_do_write+0xbc>)
 800c650:	f008 f822 	bl	8014698 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c654:	6963      	ldr	r3, [r4, #20]
 800c656:	b933      	cbnz	r3, 800c666 <lwip_netconn_do_write+0x4e>
 800c658:	4b1c      	ldr	r3, [pc, #112]	@ (800c6cc <lwip_netconn_do_write+0xb4>)
 800c65a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800c65e:	491e      	ldr	r1, [pc, #120]	@ (800c6d8 <lwip_netconn_do_write+0xc0>)
 800c660:	481c      	ldr	r0, [pc, #112]	@ (800c6d4 <lwip_netconn_do_write+0xbc>)
 800c662:	f008 f819 	bl	8014698 <iprintf>
        msg->conn->current_msg = msg;
 800c666:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c668:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800c66a:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c66c:	f7ff f9c0 	bl	800b9f0 <lwip_netconn_do_writemore>
 800c670:	b328      	cbz	r0, 800c6be <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	785b      	ldrb	r3, [r3, #1]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d006      	beq.n	800c688 <lwip_netconn_do_write+0x70>
 800c67a:	4b14      	ldr	r3, [pc, #80]	@ (800c6cc <lwip_netconn_do_write+0xb4>)
 800c67c:	f240 722c 	movw	r2, #1836	@ 0x72c
 800c680:	4916      	ldr	r1, [pc, #88]	@ (800c6dc <lwip_netconn_do_write+0xc4>)
 800c682:	4814      	ldr	r0, [pc, #80]	@ (800c6d4 <lwip_netconn_do_write+0xbc>)
 800c684:	f008 f808 	bl	8014698 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c688:	4815      	ldr	r0, [pc, #84]	@ (800c6e0 <lwip_netconn_do_write+0xc8>)
 800c68a:	f006 fdb3 	bl	80131f4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c68e:	6820      	ldr	r0, [r4, #0]
 800c690:	2100      	movs	r1, #0
 800c692:	300c      	adds	r0, #12
 800c694:	f006 fe42 	bl	801331c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c698:	4811      	ldr	r0, [pc, #68]	@ (800c6e0 <lwip_netconn_do_write+0xc8>)
 800c69a:	f006 fd7f 	bl	801319c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d10b      	bne.n	800c6be <lwip_netconn_do_write+0xa6>
 800c6a6:	4b09      	ldr	r3, [pc, #36]	@ (800c6cc <lwip_netconn_do_write+0xb4>)
 800c6a8:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 800c6ac:	490b      	ldr	r1, [pc, #44]	@ (800c6dc <lwip_netconn_do_write+0xc4>)
 800c6ae:	4809      	ldr	r0, [pc, #36]	@ (800c6d4 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 800c6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c6b4:	f007 bff0 	b.w	8014698 <iprintf>
      err = ERR_VAL;
 800c6b8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800c6bc:	7120      	strb	r0, [r4, #4]
}
 800c6be:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 800c6c0:	f06f 0004 	mvn.w	r0, #4
 800c6c4:	e7fa      	b.n	800c6bc <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 800c6c6:	f06f 000a 	mvn.w	r0, #10
 800c6ca:	e7f7      	b.n	800c6bc <lwip_netconn_do_write+0xa4>
 800c6cc:	0801620e 	.word	0x0801620e
 800c6d0:	080165bc 	.word	0x080165bc
 800c6d4:	08015927 	.word	0x08015927
 800c6d8:	080165de 	.word	0x080165de
 800c6dc:	080165d7 	.word	0x080165d7
 800c6e0:	2000b514 	.word	0x2000b514

0800c6e4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c6e4:	b510      	push	{r4, lr}
 800c6e6:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c6e8:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c6ea:	6842      	ldr	r2, [r0, #4]
  enum netconn_state state = msg->conn->state;
 800c6ec:	7843      	ldrb	r3, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 800c6ee:	b15a      	cbz	r2, 800c708 <lwip_netconn_do_close+0x24>
 800c6f0:	7802      	ldrb	r2, [r0, #0]
 800c6f2:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c6f6:	2a10      	cmp	r2, #16
 800c6f8:	d106      	bne.n	800c708 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c6fa:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c6fc:	2a03      	cmp	r2, #3
 800c6fe:	d001      	beq.n	800c704 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c700:	2b02      	cmp	r3, #2
 800c702:	d001      	beq.n	800c708 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c704:	2b03      	cmp	r3, #3
 800c706:	d102      	bne.n	800c70e <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c708:	23f5      	movs	r3, #245	@ 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c70a:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c70c:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d101      	bne.n	800c716 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 800c712:	23fb      	movs	r3, #251	@ 0xfb
 800c714:	e7f9      	b.n	800c70a <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c716:	07d3      	lsls	r3, r2, #31
 800c718:	d501      	bpl.n	800c71e <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 800c71a:	f7ff fdb9 	bl	800c290 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	b133      	cbz	r3, 800c732 <lwip_netconn_do_close+0x4e>
 800c724:	4b19      	ldr	r3, [pc, #100]	@ (800c78c <lwip_netconn_do_close+0xa8>)
 800c726:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800c72a:	4919      	ldr	r1, [pc, #100]	@ (800c790 <lwip_netconn_do_close+0xac>)
 800c72c:	4819      	ldr	r0, [pc, #100]	@ (800c794 <lwip_netconn_do_close+0xb0>)
 800c72e:	f007 ffb3 	bl	8014698 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c732:	6820      	ldr	r0, [r4, #0]
 800c734:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c736:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 800c738:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800c73a:	6204      	str	r4, [r0, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c73c:	f7ff fa80 	bl	800bc40 <lwip_netconn_do_close_internal>
 800c740:	2800      	cmp	r0, #0
 800c742:	d0e3      	beq.n	800c70c <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d006      	beq.n	800c75a <lwip_netconn_do_close+0x76>
 800c74c:	4b0f      	ldr	r3, [pc, #60]	@ (800c78c <lwip_netconn_do_close+0xa8>)
 800c74e:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800c752:	4911      	ldr	r1, [pc, #68]	@ (800c798 <lwip_netconn_do_close+0xb4>)
 800c754:	480f      	ldr	r0, [pc, #60]	@ (800c794 <lwip_netconn_do_close+0xb0>)
 800c756:	f007 ff9f 	bl	8014698 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c75a:	4810      	ldr	r0, [pc, #64]	@ (800c79c <lwip_netconn_do_close+0xb8>)
 800c75c:	f006 fd4a 	bl	80131f4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c760:	6820      	ldr	r0, [r4, #0]
 800c762:	2100      	movs	r1, #0
 800c764:	300c      	adds	r0, #12
 800c766:	f006 fdd9 	bl	801331c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c76a:	480c      	ldr	r0, [pc, #48]	@ (800c79c <lwip_netconn_do_close+0xb8>)
 800c76c:	f006 fd16 	bl	801319c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	785b      	ldrb	r3, [r3, #1]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d0c9      	beq.n	800c70c <lwip_netconn_do_close+0x28>
 800c778:	4b04      	ldr	r3, [pc, #16]	@ (800c78c <lwip_netconn_do_close+0xa8>)
 800c77a:	f240 72ca 	movw	r2, #1994	@ 0x7ca
 800c77e:	4906      	ldr	r1, [pc, #24]	@ (800c798 <lwip_netconn_do_close+0xb4>)
 800c780:	4804      	ldr	r0, [pc, #16]	@ (800c794 <lwip_netconn_do_close+0xb0>)
}
 800c782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c786:	f007 bf87 	b.w	8014698 <iprintf>
 800c78a:	bf00      	nop
 800c78c:	0801620e 	.word	0x0801620e
 800c790:	080165bc 	.word	0x080165bc
 800c794:	08015927 	.word	0x08015927
 800c798:	080165d7 	.word	0x080165d7
 800c79c:	2000b514 	.word	0x2000b514

0800c7a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c7a0:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	b160      	cbz	r0, 800c7c0 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800c7a6:	6800      	ldr	r0, [r0, #0]
 800c7a8:	b120      	cbz	r0, 800c7b4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800c7aa:	f001 fa41 	bl	800dc30 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	2006      	movs	r0, #6
  }
}
 800c7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800c7bc:	f001 b83c 	b.w	800d838 <memp_free>
}
 800c7c0:	bd10      	pop	{r4, pc}

0800c7c2 <netbuf_data>:
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c7c2:	b150      	cbz	r0, 800c7da <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c7c4:	b149      	cbz	r1, 800c7da <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c7c6:	b142      	cbz	r2, 800c7da <netbuf_data+0x18>

  if (buf->ptr == NULL) {
 800c7c8:	6843      	ldr	r3, [r0, #4]
 800c7ca:	b14b      	cbz	r3, 800c7e0 <netbuf_data+0x1e>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 800c7d0:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 800c7d2:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 800c7d4:	895b      	ldrh	r3, [r3, #10]
 800c7d6:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800c7d8:	4770      	bx	lr
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c7da:	f06f 000f 	mvn.w	r0, #15
 800c7de:	4770      	bx	lr
    return ERR_BUF;
 800c7e0:	f06f 0001 	mvn.w	r0, #1
}
 800c7e4:	4770      	bx	lr

0800c7e6 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800c7e6:	b510      	push	{r4, lr}
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  if (msg->msg.common.errtfunc != NULL) {
 800c7e8:	68c4      	ldr	r4, [r0, #12]
{
 800c7ea:	4603      	mov	r3, r0
    return msg->msg.common.errtfunc(msg->netif);
 800c7ec:	6840      	ldr	r0, [r0, #4]
  if (msg->msg.common.errtfunc != NULL) {
 800c7ee:	b11c      	cbz	r4, 800c7f8 <netifapi_do_netif_common+0x12>
    return msg->msg.common.errtfunc(msg->netif);
 800c7f0:	4623      	mov	r3, r4
  } else {
    msg->msg.common.voidfunc(msg->netif);
    return ERR_OK;
  }
}
 800c7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return msg->msg.common.errtfunc(msg->netif);
 800c7f6:	4718      	bx	r3
    msg->msg.common.voidfunc(msg->netif);
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	4798      	blx	r3
}
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	bd10      	pop	{r4, pc}

0800c800 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800c800:	b500      	push	{lr}
 800c802:	b089      	sub	sp, #36	@ 0x24
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800c804:	e9cd 0101 	strd	r0, r1, [sp, #4]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800c808:	4669      	mov	r1, sp
 800c80a:	4803      	ldr	r0, [pc, #12]	@ (800c818 <netifapi_netif_common+0x18>)
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800c80c:	9203      	str	r2, [sp, #12]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800c80e:	f000 f8b7 	bl	800c980 <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 800c812:	b009      	add	sp, #36	@ 0x24
 800c814:	f85d fb04 	ldr.w	pc, [sp], #4
 800c818:	0800c7e7 	.word	0x0800c7e7

0800c81c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c81c:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c81e:	482c      	ldr	r0, [pc, #176]	@ (800c8d0 <tcpip_thread+0xb4>)
 800c820:	f006 fcbc 	bl	801319c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c824:	4b2b      	ldr	r3, [pc, #172]	@ (800c8d4 <tcpip_thread+0xb8>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	b113      	cbz	r3, 800c830 <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 800c82a:	4a2b      	ldr	r2, [pc, #172]	@ (800c8d8 <tcpip_thread+0xbc>)
 800c82c:	6810      	ldr	r0, [r2, #0]
 800c82e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c830:	4d27      	ldr	r5, [pc, #156]	@ (800c8d0 <tcpip_thread+0xb4>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c832:	4f2a      	ldr	r7, [pc, #168]	@ (800c8dc <tcpip_thread+0xc0>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c834:	4e2a      	ldr	r6, [pc, #168]	@ (800c8e0 <tcpip_thread+0xc4>)
  sleeptime = sys_timeouts_sleeptime();
 800c836:	f005 f827 	bl	8011888 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c83a:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800c83c:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c83e:	d113      	bne.n	800c868 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 800c840:	4628      	mov	r0, r5
 800c842:	f006 fcd7 	bl	80131f4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c846:	2200      	movs	r2, #0
 800c848:	a901      	add	r1, sp, #4
 800c84a:	4638      	mov	r0, r7
 800c84c:	f006 fe20 	bl	8013490 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c850:	4628      	mov	r0, r5
 800c852:	f006 fca3 	bl	801319c <sys_mutex_lock>
    if (msg == NULL) {
 800c856:	9c01      	ldr	r4, [sp, #4]
 800c858:	b9cc      	cbnz	r4, 800c88e <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c85a:	4633      	mov	r3, r6
 800c85c:	229a      	movs	r2, #154	@ 0x9a
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c85e:	4921      	ldr	r1, [pc, #132]	@ (800c8e4 <tcpip_thread+0xc8>)
 800c860:	4821      	ldr	r0, [pc, #132]	@ (800c8e8 <tcpip_thread+0xcc>)
 800c862:	f007 ff19 	bl	8014698 <iprintf>
      break;
 800c866:	e7e6      	b.n	800c836 <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 800c868:	b910      	cbnz	r0, 800c870 <tcpip_thread+0x54>
    sys_check_timeouts();
 800c86a:	f004 ffeb 	bl	8011844 <sys_check_timeouts>
    goto again;
 800c86e:	e7e2      	b.n	800c836 <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 800c870:	4628      	mov	r0, r5
 800c872:	f006 fcbf 	bl	80131f4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c876:	4622      	mov	r2, r4
 800c878:	a901      	add	r1, sp, #4
 800c87a:	4638      	mov	r0, r7
 800c87c:	f006 fe08 	bl	8013490 <sys_arch_mbox_fetch>
 800c880:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800c882:	4628      	mov	r0, r5
 800c884:	f006 fc8a 	bl	801319c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c888:	3401      	adds	r4, #1
 800c88a:	d0ee      	beq.n	800c86a <tcpip_thread+0x4e>
 800c88c:	e7e3      	b.n	800c856 <tcpip_thread+0x3a>
  switch (msg->type) {
 800c88e:	7823      	ldrb	r3, [r4, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d00f      	beq.n	800c8b4 <tcpip_thread+0x98>
 800c894:	2b02      	cmp	r3, #2
 800c896:	d013      	beq.n	800c8c0 <tcpip_thread+0xa4>
 800c898:	b9b3      	cbnz	r3, 800c8c8 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c89a:	6860      	ldr	r0, [r4, #4]
 800c89c:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800c8a0:	4798      	blx	r3
 800c8a2:	b110      	cbz	r0, 800c8aa <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 800c8a4:	6860      	ldr	r0, [r4, #4]
 800c8a6:	f001 f9c3 	bl	800dc30 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8ae:	f000 ffc3 	bl	800d838 <memp_free>
      break;
 800c8b2:	e7c0      	b.n	800c836 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c8b4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c8b8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	2008      	movs	r0, #8
 800c8be:	e7f6      	b.n	800c8ae <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c8c0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c8c4:	4798      	blx	r3
      break;
 800c8c6:	e7b6      	b.n	800c836 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c8c8:	4633      	mov	r3, r6
 800c8ca:	22dd      	movs	r2, #221	@ 0xdd
 800c8cc:	e7c7      	b.n	800c85e <tcpip_thread+0x42>
 800c8ce:	bf00      	nop
 800c8d0:	2000b514 	.word	0x2000b514
 800c8d4:	2000b520 	.word	0x2000b520
 800c8d8:	2000b51c 	.word	0x2000b51c
 800c8dc:	2000b518 	.word	0x2000b518
 800c8e0:	080165f2 	.word	0x080165f2
 800c8e4:	08016610 	.word	0x08016610
 800c8e8:	08015927 	.word	0x08015927

0800c8ec <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c8ee:	4b11      	ldr	r3, [pc, #68]	@ (800c934 <tcpip_inpkt+0x48>)
{
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	460e      	mov	r6, r1
 800c8f4:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	b933      	cbnz	r3, 800c908 <tcpip_inpkt+0x1c>
 800c8fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c938 <tcpip_inpkt+0x4c>)
 800c8fc:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 800c900:	490e      	ldr	r1, [pc, #56]	@ (800c93c <tcpip_inpkt+0x50>)
 800c902:	480f      	ldr	r0, [pc, #60]	@ (800c940 <tcpip_inpkt+0x54>)
 800c904:	f007 fec8 	bl	8014698 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c908:	2009      	movs	r0, #9
 800c90a:	f000 ff77 	bl	800d7fc <memp_malloc>
  if (msg == NULL) {
 800c90e:	4604      	mov	r4, r0
 800c910:	b168      	cbz	r0, 800c92e <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800c912:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c914:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 800c916:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 800c918:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 800c91a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c91e:	4805      	ldr	r0, [pc, #20]	@ (800c934 <tcpip_inpkt+0x48>)
 800c920:	f006 fd82 	bl	8013428 <sys_mbox_trypost>
 800c924:	b128      	cbz	r0, 800c932 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c926:	4621      	mov	r1, r4
 800c928:	2009      	movs	r0, #9
 800c92a:	f000 ff85 	bl	800d838 <memp_free>
    return ERR_MEM;
 800c92e:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c934:	2000b518 	.word	0x2000b518
 800c938:	080165f2 	.word	0x080165f2
 800c93c:	0801662e 	.word	0x0801662e
 800c940:	08015927 	.word	0x08015927

0800c944 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c944:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 800c948:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800c94c:	bf14      	ite	ne
 800c94e:	4a02      	ldrne	r2, [pc, #8]	@ (800c958 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c950:	4a02      	ldreq	r2, [pc, #8]	@ (800c95c <tcpip_input+0x18>)
 800c952:	f7ff bfcb 	b.w	800c8ec <tcpip_inpkt>
 800c956:	bf00      	nop
 800c958:	08013049 	.word	0x08013049
 800c95c:	08012581 	.word	0x08012581

0800c960 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c960:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c962:	4e06      	ldr	r6, [pc, #24]	@ (800c97c <tcpip_send_msg_wait_sem+0x1c>)
{
 800c964:	460d      	mov	r5, r1
 800c966:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800c968:	4630      	mov	r0, r6
 800c96a:	f006 fc17 	bl	801319c <sys_mutex_lock>
  fn(apimsg);
 800c96e:	4628      	mov	r0, r5
 800c970:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800c972:	4630      	mov	r0, r6
 800c974:	f006 fc3e 	bl	80131f4 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c978:	2000      	movs	r0, #0
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	2000b514 	.word	0x2000b514

0800c980 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800c980:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800c982:	4e07      	ldr	r6, [pc, #28]	@ (800c9a0 <tcpip_api_call+0x20>)
{
 800c984:	460d      	mov	r5, r1
 800c986:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800c988:	4630      	mov	r0, r6
 800c98a:	f006 fc07 	bl	801319c <sys_mutex_lock>
  err = fn(call);
 800c98e:	4628      	mov	r0, r5
 800c990:	47a0      	blx	r4
 800c992:	4604      	mov	r4, r0
  UNLOCK_TCPIP_CORE();
 800c994:	4630      	mov	r0, r6
 800c996:	f006 fc2d 	bl	80131f4 <sys_mutex_unlock>
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c99a:	4620      	mov	r0, r4
 800c99c:	bd70      	pop	{r4, r5, r6, pc}
 800c99e:	bf00      	nop
 800c9a0:	2000b514 	.word	0x2000b514

0800c9a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	460c      	mov	r4, r1
  lwip_init();
 800c9aa:	f000 fc3b 	bl	800d224 <lwip_init>

  tcpip_init_done = initfunc;
 800c9ae:	4b13      	ldr	r3, [pc, #76]	@ (800c9fc <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c9b0:	2106      	movs	r1, #6
 800c9b2:	4813      	ldr	r0, [pc, #76]	@ (800ca00 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 800c9b4:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 800c9b6:	4b13      	ldr	r3, [pc, #76]	@ (800ca04 <tcpip_init+0x60>)
 800c9b8:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c9ba:	f006 fd0d 	bl	80133d8 <sys_mbox_new>
 800c9be:	b130      	cbz	r0, 800c9ce <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c9c0:	4b11      	ldr	r3, [pc, #68]	@ (800ca08 <tcpip_init+0x64>)
 800c9c2:	f240 229a 	movw	r2, #666	@ 0x29a
 800c9c6:	4911      	ldr	r1, [pc, #68]	@ (800ca0c <tcpip_init+0x68>)
 800c9c8:	4811      	ldr	r0, [pc, #68]	@ (800ca10 <tcpip_init+0x6c>)
 800c9ca:	f007 fe65 	bl	8014698 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c9ce:	4811      	ldr	r0, [pc, #68]	@ (800ca14 <tcpip_init+0x70>)
 800c9d0:	f006 fbcc 	bl	801316c <sys_mutex_new>
 800c9d4:	b130      	cbz	r0, 800c9e4 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca08 <tcpip_init+0x64>)
 800c9d8:	f240 229e 	movw	r2, #670	@ 0x29e
 800c9dc:	490e      	ldr	r1, [pc, #56]	@ (800ca18 <tcpip_init+0x74>)
 800c9de:	480c      	ldr	r0, [pc, #48]	@ (800ca10 <tcpip_init+0x6c>)
 800c9e0:	f007 fe5a 	bl	8014698 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	490c      	ldr	r1, [pc, #48]	@ (800ca1c <tcpip_init+0x78>)
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c9f0:	480b      	ldr	r0, [pc, #44]	@ (800ca20 <tcpip_init+0x7c>)
 800c9f2:	f006 fde9 	bl	80135c8 <sys_thread_new>
}
 800c9f6:	b003      	add	sp, #12
 800c9f8:	bd30      	pop	{r4, r5, pc}
 800c9fa:	bf00      	nop
 800c9fc:	2000b520 	.word	0x2000b520
 800ca00:	2000b518 	.word	0x2000b518
 800ca04:	2000b51c 	.word	0x2000b51c
 800ca08:	080165f2 	.word	0x080165f2
 800ca0c:	0801663b 	.word	0x0801663b
 800ca10:	08015927 	.word	0x08015927
 800ca14:	2000b514 	.word	0x2000b514
 800ca18:	0801665e 	.word	0x0801665e
 800ca1c:	0800c81d 	.word	0x0800c81d
 800ca20:	0801667f 	.word	0x0801667f

0800ca24 <lwiperf_tcp_close>:
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800ca24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca28:	4604      	mov	r4, r0
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800ca2a:	4838      	ldr	r0, [pc, #224]	@ (800cb0c <lwiperf_tcp_close+0xe8>)
{
 800ca2c:	b087      	sub	sp, #28
 800ca2e:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800ca30:	6803      	ldr	r3, [r0, #0]
  lwiperf_state_base_t *prev = NULL;
 800ca32:	2200      	movs	r2, #0
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800ca34:	bb23      	cbnz	r3, 800ca80 <lwiperf_tcp_close+0x5c>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 800ca36:	bb7c      	cbnz	r4, 800ca98 <lwiperf_tcp_close+0x74>
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 800ca38:	6920      	ldr	r0, [r4, #16]
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d056      	beq.n	800caec <lwiperf_tcp_close+0xc8>
    tcp_arg(conn->conn_pcb, NULL);
 800ca3e:	2100      	movs	r1, #0
 800ca40:	f001 fd3a 	bl	800e4b8 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800ca44:	2200      	movs	r2, #0
 800ca46:	6920      	ldr	r0, [r4, #16]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	f001 fd85 	bl	800e558 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 800ca4e:	2100      	movs	r1, #0
 800ca50:	6920      	ldr	r0, [r4, #16]
 800ca52:	f001 fd4d 	bl	800e4f0 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800ca56:	2100      	movs	r1, #0
 800ca58:	6920      	ldr	r0, [r4, #16]
 800ca5a:	f001 fd31 	bl	800e4c0 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 800ca5e:	6920      	ldr	r0, [r4, #16]
 800ca60:	2100      	movs	r1, #0
 800ca62:	f001 fd5b 	bl	800e51c <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800ca66:	6920      	ldr	r0, [r4, #16]
 800ca68:	f002 f8ce 	bl	800ec08 <tcp_close>
    if (err != ERR_OK) {
 800ca6c:	b110      	cbz	r0, 800ca74 <lwiperf_tcp_close+0x50>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 800ca6e:	6920      	ldr	r0, [r4, #16]
 800ca70:	f002 fa18 	bl	800eea4 <tcp_abort>
  } else if (conn->server_pcb != NULL) {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800ca74:	4620      	mov	r0, r4
}
 800ca76:	b007      	add	sp, #28
 800ca78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800ca7c:	f000 bc18 	b.w	800d2b0 <mem_free>
    if (iter == item) {
 800ca80:	429c      	cmp	r4, r3
        lwiperf_all_connections = iter->next;
 800ca82:	6819      	ldr	r1, [r3, #0]
    if (iter == item) {
 800ca84:	d12f      	bne.n	800cae6 <lwiperf_tcp_close+0xc2>
      if (prev == NULL) {
 800ca86:	bb12      	cbnz	r2, 800cace <lwiperf_tcp_close+0xaa>
        lwiperf_all_connections = iter->next;
 800ca88:	6001      	str	r1, [r0, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800ca8a:	681d      	ldr	r5, [r3, #0]
        LWIP_ASSERT("duplicate entry", iter != item);
 800ca8c:	4f20      	ldr	r7, [pc, #128]	@ (800cb10 <lwiperf_tcp_close+0xec>)
 800ca8e:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800cb1c <lwiperf_tcp_close+0xf8>
 800ca92:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 800cb18 <lwiperf_tcp_close+0xf4>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800ca96:	b9e5      	cbnz	r5, 800cad2 <lwiperf_tcp_close+0xae>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 800ca98:	69a3      	ldr	r3, [r4, #24]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0cc      	beq.n	800ca38 <lwiperf_tcp_close+0x14>
    now = sys_now();
 800ca9e:	f006 fb5c 	bl	801315a <sys_now>
    duration_ms = now - conn->time_started;
 800caa2:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 800caa4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800caa6:	1ac0      	subs	r0, r0, r3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 800caa8:	6922      	ldr	r2, [r4, #16]
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800caaa:	bf16      	itet	ne
 800caac:	fbb1 f5f0 	udivne	r5, r1, r0
      bandwidth_kbitpsec = 0;
 800cab0:	4605      	moveq	r5, r0
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800cab2:	00ed      	lslne	r5, r5, #3
    conn->report_fn(conn->report_arg, report_type,
 800cab4:	8ad3      	ldrh	r3, [r2, #22]
 800cab6:	9102      	str	r1, [sp, #8]
 800cab8:	e9cd 0503 	strd	r0, r5, [sp, #12]
 800cabc:	8b11      	ldrh	r1, [r2, #24]
 800cabe:	9101      	str	r1, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800cac0:	1d11      	adds	r1, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 800cac2:	9100      	str	r1, [sp, #0]
 800cac4:	4631      	mov	r1, r6
 800cac6:	69a5      	ldr	r5, [r4, #24]
 800cac8:	69e0      	ldr	r0, [r4, #28]
 800caca:	47a8      	blx	r5
 800cacc:	e7b4      	b.n	800ca38 <lwiperf_tcp_close+0x14>
        prev->next = iter->next;
 800cace:	6011      	str	r1, [r2, #0]
 800cad0:	e7db      	b.n	800ca8a <lwiperf_tcp_close+0x66>
        LWIP_ASSERT("duplicate entry", iter != item);
 800cad2:	42ac      	cmp	r4, r5
 800cad4:	d105      	bne.n	800cae2 <lwiperf_tcp_close+0xbe>
 800cad6:	463b      	mov	r3, r7
 800cad8:	22d1      	movs	r2, #209	@ 0xd1
 800cada:	4641      	mov	r1, r8
 800cadc:	4648      	mov	r0, r9
 800cade:	f007 fddb 	bl	8014698 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800cae2:	682d      	ldr	r5, [r5, #0]
 800cae4:	e7d7      	b.n	800ca96 <lwiperf_tcp_close+0x72>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800cae6:	461a      	mov	r2, r3
 800cae8:	460b      	mov	r3, r1
 800caea:	e7a3      	b.n	800ca34 <lwiperf_tcp_close+0x10>
  } else if (conn->server_pcb != NULL) {
 800caec:	68e0      	ldr	r0, [r4, #12]
 800caee:	2800      	cmp	r0, #0
 800caf0:	d0c0      	beq.n	800ca74 <lwiperf_tcp_close+0x50>
    err = tcp_close(conn->server_pcb);
 800caf2:	f002 f889 	bl	800ec08 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0bc      	beq.n	800ca74 <lwiperf_tcp_close+0x50>
 800cafa:	4b05      	ldr	r3, [pc, #20]	@ (800cb10 <lwiperf_tcp_close+0xec>)
 800cafc:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800cb00:	4904      	ldr	r1, [pc, #16]	@ (800cb14 <lwiperf_tcp_close+0xf0>)
 800cb02:	4805      	ldr	r0, [pc, #20]	@ (800cb18 <lwiperf_tcp_close+0xf4>)
 800cb04:	f007 fdc8 	bl	8014698 <iprintf>
 800cb08:	e7b4      	b.n	800ca74 <lwiperf_tcp_close+0x50>
 800cb0a:	bf00      	nop
 800cb0c:	2000b524 	.word	0x2000b524
 800cb10:	08016686 	.word	0x08016686
 800cb14:	08016472 	.word	0x08016472
 800cb18:	08015927 	.word	0x08015927
 800cb1c:	080166af 	.word	0x080166af

0800cb20 <lwiperf_tcp_accept>:
}

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	4604      	mov	r4, r0
 800cb24:	460e      	mov	r6, r1
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800cb26:	4617      	mov	r7, r2
 800cb28:	b11a      	cbz	r2, 800cb32 <lwiperf_tcp_accept+0x12>
    return ERR_VAL;
 800cb2a:	f06f 0705 	mvn.w	r7, #5
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
}
 800cb2e:	4638      	mov	r0, r7
 800cb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800cb32:	2900      	cmp	r1, #0
 800cb34:	d0f9      	beq.n	800cb2a <lwiperf_tcp_accept+0xa>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d0f7      	beq.n	800cb2a <lwiperf_tcp_accept+0xa>
  LWIP_ASSERT("invalid session", s->base.server);
 800cb3a:	7943      	ldrb	r3, [r0, #5]
 800cb3c:	b933      	cbnz	r3, 800cb4c <lwiperf_tcp_accept+0x2c>
 800cb3e:	4b3b      	ldr	r3, [pc, #236]	@ (800cc2c <lwiperf_tcp_accept+0x10c>)
 800cb40:	f240 225e 	movw	r2, #606	@ 0x25e
 800cb44:	493a      	ldr	r1, [pc, #232]	@ (800cc30 <lwiperf_tcp_accept+0x110>)
 800cb46:	483b      	ldr	r0, [pc, #236]	@ (800cc34 <lwiperf_tcp_accept+0x114>)
 800cb48:	f007 fda6 	bl	8014698 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800cb4c:	68e3      	ldr	r3, [r4, #12]
 800cb4e:	b933      	cbnz	r3, 800cb5e <lwiperf_tcp_accept+0x3e>
 800cb50:	4b36      	ldr	r3, [pc, #216]	@ (800cc2c <lwiperf_tcp_accept+0x10c>)
 800cb52:	f240 225f 	movw	r2, #607	@ 0x25f
 800cb56:	4938      	ldr	r1, [pc, #224]	@ (800cc38 <lwiperf_tcp_accept+0x118>)
 800cb58:	4836      	ldr	r0, [pc, #216]	@ (800cc34 <lwiperf_tcp_accept+0x114>)
 800cb5a:	f007 fd9d 	bl	8014698 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	b133      	cbz	r3, 800cb70 <lwiperf_tcp_accept+0x50>
 800cb62:	4b32      	ldr	r3, [pc, #200]	@ (800cc2c <lwiperf_tcp_accept+0x10c>)
 800cb64:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800cb68:	4934      	ldr	r1, [pc, #208]	@ (800cc3c <lwiperf_tcp_accept+0x11c>)
 800cb6a:	4832      	ldr	r0, [pc, #200]	@ (800cc34 <lwiperf_tcp_accept+0x114>)
 800cb6c:	f007 fd94 	bl	8014698 <iprintf>
  if (s->specific_remote) {
 800cb70:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800cb74:	68a3      	ldr	r3, [r4, #8]
  if (s->specific_remote) {
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	d047      	beq.n	800cc0a <lwiperf_tcp_accept+0xea>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800cb7a:	b933      	cbnz	r3, 800cb8a <lwiperf_tcp_accept+0x6a>
 800cb7c:	4b2b      	ldr	r3, [pc, #172]	@ (800cc2c <lwiperf_tcp_accept+0x10c>)
 800cb7e:	f240 2262 	movw	r2, #610	@ 0x262
 800cb82:	492f      	ldr	r1, [pc, #188]	@ (800cc40 <lwiperf_tcp_accept+0x120>)
 800cb84:	482b      	ldr	r0, [pc, #172]	@ (800cc34 <lwiperf_tcp_accept+0x114>)
 800cb86:	f007 fd87 	bl	8014698 <iprintf>
    if (!ip_addr_eq(&newpcb->remote_ip, &s->remote_addr)) {
 800cb8a:	6872      	ldr	r2, [r6, #4]
 800cb8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d1cb      	bne.n	800cb2a <lwiperf_tcp_accept+0xa>
  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800cb92:	2048      	movs	r0, #72	@ 0x48
 800cb94:	f000 fd1a 	bl	800d5cc <mem_malloc>
  if (conn == NULL) {
 800cb98:	4605      	mov	r5, r0
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d043      	beq.n	800cc26 <lwiperf_tcp_accept+0x106>
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 800cb9e:	2248      	movs	r2, #72	@ 0x48
 800cba0:	2100      	movs	r1, #0
 800cba2:	f007 ff7f 	bl	8014aa4 <memset>
  conn->base.tcp = 1;
 800cba6:	f240 1301 	movw	r3, #257	@ 0x101
  conn->conn_pcb = newpcb;
 800cbaa:	612e      	str	r6, [r5, #16]
  conn->base.tcp = 1;
 800cbac:	80ab      	strh	r3, [r5, #4]
  conn->base.related_master_state = &s->base;
 800cbae:	60ac      	str	r4, [r5, #8]
  conn->time_started = sys_now();
 800cbb0:	f006 fad3 	bl	801315a <sys_now>
  conn->report_fn = s->report_fn;
 800cbb4:	69a3      	ldr	r3, [r4, #24]
  tcp_arg(newpcb, conn);
 800cbb6:	4629      	mov	r1, r5
  conn->time_started = sys_now();
 800cbb8:	6168      	str	r0, [r5, #20]
  conn->report_fn = s->report_fn;
 800cbba:	61ab      	str	r3, [r5, #24]
  tcp_arg(newpcb, conn);
 800cbbc:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 800cbbe:	69e3      	ldr	r3, [r4, #28]
 800cbc0:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 800cbc2:	f001 fc79 	bl	800e4b8 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	491e      	ldr	r1, [pc, #120]	@ (800cc44 <lwiperf_tcp_accept+0x124>)
 800cbca:	f001 fc79 	bl	800e4c0 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800cbce:	4630      	mov	r0, r6
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	491d      	ldr	r1, [pc, #116]	@ (800cc48 <lwiperf_tcp_accept+0x128>)
 800cbd4:	f001 fcc0 	bl	800e558 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 800cbd8:	491c      	ldr	r1, [pc, #112]	@ (800cc4c <lwiperf_tcp_accept+0x12c>)
 800cbda:	6928      	ldr	r0, [r5, #16]
 800cbdc:	f001 fc9e 	bl	800e51c <tcp_err>
  if (s->specific_remote) {
 800cbe0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cbe4:	4e1a      	ldr	r6, [pc, #104]	@ (800cc50 <lwiperf_tcp_accept+0x130>)
 800cbe6:	b163      	cbz	r3, 800cc02 <lwiperf_tcp_accept+0xe2>
    conn->base.related_master_state = s->base.related_master_state;
 800cbe8:	68a2      	ldr	r2, [r4, #8]
 800cbea:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 800cbec:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800cbf0:	b10b      	cbz	r3, 800cbf6 <lwiperf_tcp_accept+0xd6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800cbf2:	6833      	ldr	r3, [r6, #0]
 800cbf4:	b99b      	cbnz	r3, 800cc1e <lwiperf_tcp_accept+0xfe>
      s->report_fn = NULL;
 800cbf6:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800cbf8:	2102      	movs	r1, #2
 800cbfa:	4620      	mov	r0, r4
      s->report_fn = NULL;
 800cbfc:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800cbfe:	f7ff ff11 	bl	800ca24 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 800cc02:	6833      	ldr	r3, [r6, #0]
  lwiperf_all_connections = item;
 800cc04:	6035      	str	r5, [r6, #0]
  item->next = lwiperf_all_connections;
 800cc06:	602b      	str	r3, [r5, #0]
}
 800cc08:	e791      	b.n	800cb2e <lwiperf_tcp_accept+0xe>
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0c1      	beq.n	800cb92 <lwiperf_tcp_accept+0x72>
 800cc0e:	4b07      	ldr	r3, [pc, #28]	@ (800cc2c <lwiperf_tcp_accept+0x10c>)
 800cc10:	f44f 721a 	mov.w	r2, #616	@ 0x268
 800cc14:	490f      	ldr	r1, [pc, #60]	@ (800cc54 <lwiperf_tcp_accept+0x134>)
 800cc16:	4807      	ldr	r0, [pc, #28]	@ (800cc34 <lwiperf_tcp_accept+0x114>)
 800cc18:	f007 fd3e 	bl	8014698 <iprintf>
 800cc1c:	e7b9      	b.n	800cb92 <lwiperf_tcp_accept+0x72>
    if (iter == item) {
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d0ef      	beq.n	800cc02 <lwiperf_tcp_accept+0xe2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	e7e6      	b.n	800cbf4 <lwiperf_tcp_accept+0xd4>
    return ERR_MEM;
 800cc26:	f04f 37ff 	mov.w	r7, #4294967295
 800cc2a:	e780      	b.n	800cb2e <lwiperf_tcp_accept+0xe>
 800cc2c:	08016686 	.word	0x08016686
 800cc30:	080166bf 	.word	0x080166bf
 800cc34:	08015927 	.word	0x08015927
 800cc38:	080166cf 	.word	0x080166cf
 800cc3c:	080166e2 	.word	0x080166e2
 800cc40:	080166f3 	.word	0x080166f3
 800cc44:	0800d009 	.word	0x0800d009
 800cc48:	0800cd85 	.word	0x0800cd85
 800cc4c:	0800cc59 	.word	0x0800cc59
 800cc50:	2000b524 	.word	0x2000b524
 800cc54:	08016718 	.word	0x08016718

0800cc58 <lwiperf_tcp_err>:
  conn->conn_pcb = NULL;
 800cc58:	2200      	movs	r2, #0
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800cc5a:	2105      	movs	r1, #5
  conn->server_pcb = NULL;
 800cc5c:	e9c0 2203 	strd	r2, r2, [r0, #12]
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800cc60:	f7ff bee0 	b.w	800ca24 <lwiperf_tcp_close>

0800cc64 <lwiperf_tcp_client_send_more>:
{
 800cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 800cc68:	4604      	mov	r4, r0
 800cc6a:	b118      	cbz	r0, 800cc74 <lwiperf_tcp_client_send_more+0x10>
 800cc6c:	7903      	ldrb	r3, [r0, #4]
 800cc6e:	b10b      	cbz	r3, 800cc74 <lwiperf_tcp_client_send_more+0x10>
 800cc70:	7943      	ldrb	r3, [r0, #5]
 800cc72:	b133      	cbz	r3, 800cc82 <lwiperf_tcp_client_send_more+0x1e>
 800cc74:	4b32      	ldr	r3, [pc, #200]	@ (800cd40 <lwiperf_tcp_client_send_more+0xdc>)
 800cc76:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800cc7a:	4932      	ldr	r1, [pc, #200]	@ (800cd44 <lwiperf_tcp_client_send_more+0xe0>)
 800cc7c:	4832      	ldr	r0, [pc, #200]	@ (800cd48 <lwiperf_tcp_client_send_more+0xe4>)
 800cc7e:	f007 fd0b 	bl	8014698 <iprintf>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800cc82:	4f32      	ldr	r7, [pc, #200]	@ (800cd4c <lwiperf_tcp_client_send_more+0xe8>)
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800cc84:	f240 28da 	movw	r8, #730	@ 0x2da
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 800cc88:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800cc8a:	0602      	lsls	r2, r0, #24
 800cc8c:	d512      	bpl.n	800ccb4 <lwiperf_tcp_client_send_more+0x50>
      u32_t now = sys_now();
 800cc8e:	f006 fa64 	bl	801315a <sys_now>
      u32_t diff_ms = now - conn->time_started;
 800cc92:	6963      	ldr	r3, [r4, #20]
 800cc94:	1ac5      	subs	r5, r0, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800cc96:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800cc98:	f000 fa75 	bl	800d186 <lwip_htonl>
      u32_t time_ms = time * 10;
 800cc9c:	f06f 0309 	mvn.w	r3, #9
 800cca0:	4358      	muls	r0, r3
      if (diff_ms >= time_ms) {
 800cca2:	4285      	cmp	r5, r0
 800cca4:	d30b      	bcc.n	800ccbe <lwiperf_tcp_client_send_more+0x5a>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800cca6:	2101      	movs	r1, #1
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f7ff febb 	bl	800ca24 <lwiperf_tcp_close>
}
 800ccae:	2000      	movs	r0, #0
 800ccb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 800ccb4:	f000 fa67 	bl	800d186 <lwip_htonl>
      if (conn->bytes_transferred >= amount_bytes) {
 800ccb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ccba:	4283      	cmp	r3, r0
 800ccbc:	e7f2      	b.n	800cca4 <lwiperf_tcp_client_send_more+0x40>
    if (conn->bytes_transferred < 24) {
 800ccbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ccc0:	2817      	cmp	r0, #23
 800ccc2:	d818      	bhi.n	800ccf6 <lwiperf_tcp_client_send_more+0x92>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800ccc4:	f104 0528 	add.w	r5, r4, #40	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 800ccc8:	f04f 0a01 	mov.w	sl, #1
    send_more = 0;
 800cccc:	f04f 0900 	mov.w	r9, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800ccd0:	4405      	add	r5, r0
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800ccd2:	f1c0 0018 	rsb	r0, r0, #24
 800ccd6:	b286      	uxth	r6, r0
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 800ccd8:	4653      	mov	r3, sl
 800ccda:	4632      	mov	r2, r6
 800ccdc:	4629      	mov	r1, r5
 800ccde:	6920      	ldr	r0, [r4, #16]
 800cce0:	f003 fd58 	bl	8010794 <tcp_write>
      if (err ==  ERR_MEM) {
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d122      	bne.n	800cd2e <lwiperf_tcp_client_send_more+0xca>
        txlen /= 2;
 800cce8:	0876      	lsrs	r6, r6, #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800ccea:	4546      	cmp	r6, r8
 800ccec:	d0f4      	beq.n	800ccd8 <lwiperf_tcp_client_send_more+0x74>
  tcp_output(conn->conn_pcb);
 800ccee:	6920      	ldr	r0, [r4, #16]
 800ccf0:	f004 fa88 	bl	8011204 <tcp_output>
  return ERR_OK;
 800ccf4:	e7db      	b.n	800ccae <lwiperf_tcp_client_send_more+0x4a>
    } else if (conn->bytes_transferred < 48) {
 800ccf6:	282f      	cmp	r0, #47	@ 0x2f
 800ccf8:	d809      	bhi.n	800cd0e <lwiperf_tcp_client_send_more+0xaa>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800ccfa:	1825      	adds	r5, r4, r0
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800ccfc:	f1c0 0030 	rsb	r0, r0, #48	@ 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 800cd00:	f04f 0a03 	mov.w	sl, #3
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800cd04:	3510      	adds	r5, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800cd06:	b286      	uxth	r6, r0
      apiflags = 0; /* no copying needed */
 800cd08:	f04f 0901 	mov.w	r9, #1
    txlen = txlen_max;
 800cd0c:	e7e4      	b.n	800ccd8 <lwiperf_tcp_client_send_more+0x74>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800cd0e:	230a      	movs	r3, #10
      apiflags = 0; /* no copying needed */
 800cd10:	f240 569c 	movw	r6, #1436	@ 0x59c
 800cd14:	f04f 0a00 	mov.w	sl, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800cd18:	fbb0 f5f3 	udiv	r5, r0, r3
 800cd1c:	fb03 0515 	mls	r5, r3, r5, r0
      apiflags = 0; /* no copying needed */
 800cd20:	f240 53b4 	movw	r3, #1460	@ 0x5b4
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800cd24:	443d      	add	r5, r7
      apiflags = 0; /* no copying needed */
 800cd26:	2830      	cmp	r0, #48	@ 0x30
 800cd28:	bf18      	it	ne
 800cd2a:	461e      	movne	r6, r3
 800cd2c:	e7ec      	b.n	800cd08 <lwiperf_tcp_client_send_more+0xa4>
    if (err == ERR_OK) {
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d1dd      	bne.n	800ccee <lwiperf_tcp_client_send_more+0x8a>
      conn->bytes_transferred += txlen;
 800cd32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd34:	4433      	add	r3, r6
 800cd36:	6263      	str	r3, [r4, #36]	@ 0x24
  } while (send_more);
 800cd38:	f1b9 0f00 	cmp.w	r9, #0
 800cd3c:	d1a4      	bne.n	800cc88 <lwiperf_tcp_client_send_more+0x24>
 800cd3e:	e7d6      	b.n	800ccee <lwiperf_tcp_client_send_more+0x8a>
 800cd40:	08016686 	.word	0x08016686
 800cd44:	0801673d 	.word	0x0801673d
 800cd48:	08015927 	.word	0x08015927
 800cd4c:	0808e5e7 	.word	0x0808e5e7

0800cd50 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800cd50:	6903      	ldr	r3, [r0, #16]
 800cd52:	428b      	cmp	r3, r1
{
 800cd54:	b510      	push	{r4, lr}
 800cd56:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800cd58:	d006      	beq.n	800cd68 <lwiperf_tcp_client_sent+0x18>
 800cd5a:	4b07      	ldr	r3, [pc, #28]	@ (800cd78 <lwiperf_tcp_client_sent+0x28>)
 800cd5c:	f240 1267 	movw	r2, #359	@ 0x167
 800cd60:	4906      	ldr	r1, [pc, #24]	@ (800cd7c <lwiperf_tcp_client_sent+0x2c>)
 800cd62:	4807      	ldr	r0, [pc, #28]	@ (800cd80 <lwiperf_tcp_client_sent+0x30>)
 800cd64:	f007 fc98 	bl	8014698 <iprintf>
  conn->poll_count = 0;
 800cd68:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 800cd6a:	4620      	mov	r0, r4
  conn->poll_count = 0;
 800cd6c:	f884 3020 	strb.w	r3, [r4, #32]
}
 800cd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 800cd74:	f7ff bf76 	b.w	800cc64 <lwiperf_tcp_client_send_more>
 800cd78:	08016686 	.word	0x08016686
 800cd7c:	0801636c 	.word	0x0801636c
 800cd80:	08015927 	.word	0x08015927

0800cd84 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800cd84:	6903      	ldr	r3, [r0, #16]
 800cd86:	428b      	cmp	r3, r1
{
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800cd8c:	d006      	beq.n	800cd9c <lwiperf_tcp_poll+0x18>
 800cd8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc8 <lwiperf_tcp_poll+0x44>)
 800cd90:	f240 2246 	movw	r2, #582	@ 0x246
 800cd94:	490d      	ldr	r1, [pc, #52]	@ (800cdcc <lwiperf_tcp_poll+0x48>)
 800cd96:	480e      	ldr	r0, [pc, #56]	@ (800cdd0 <lwiperf_tcp_poll+0x4c>)
 800cd98:	f007 fc7e 	bl	8014698 <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 800cd9c:	f894 3020 	ldrb.w	r3, [r4, #32]
 800cda0:	3301      	adds	r3, #1
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2b09      	cmp	r3, #9
 800cda6:	f884 3020 	strb.w	r3, [r4, #32]
 800cdaa:	d905      	bls.n	800cdb8 <lwiperf_tcp_poll+0x34>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800cdac:	2102      	movs	r1, #2
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f7ff fe38 	bl	800ca24 <lwiperf_tcp_close>
}
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	bd10      	pop	{r4, pc}
  if (!conn->base.server) {
 800cdb8:	7963      	ldrb	r3, [r4, #5]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1fa      	bne.n	800cdb4 <lwiperf_tcp_poll+0x30>
    lwiperf_tcp_client_send_more(conn);
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f7ff ff50 	bl	800cc64 <lwiperf_tcp_client_send_more>
 800cdc4:	e7f6      	b.n	800cdb4 <lwiperf_tcp_poll+0x30>
 800cdc6:	bf00      	nop
 800cdc8:	08016686 	.word	0x08016686
 800cdcc:	0801674a 	.word	0x0801674a
 800cdd0:	08015927 	.word	0x08015927

0800cdd4 <lwiperf_tcp_client_connected>:
{
 800cdd4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800cdd6:	6903      	ldr	r3, [r0, #16]
{
 800cdd8:	4604      	mov	r4, r0
 800cdda:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800cddc:	428b      	cmp	r3, r1
 800cdde:	d006      	beq.n	800cdee <lwiperf_tcp_client_connected+0x1a>
 800cde0:	4b0b      	ldr	r3, [pc, #44]	@ (800ce10 <lwiperf_tcp_client_connected+0x3c>)
 800cde2:	f240 1275 	movw	r2, #373	@ 0x175
 800cde6:	490b      	ldr	r1, [pc, #44]	@ (800ce14 <lwiperf_tcp_client_connected+0x40>)
 800cde8:	480b      	ldr	r0, [pc, #44]	@ (800ce18 <lwiperf_tcp_client_connected+0x44>)
 800cdea:	f007 fc55 	bl	8014698 <iprintf>
  if (err != ERR_OK) {
 800cdee:	b94d      	cbnz	r5, 800ce04 <lwiperf_tcp_client_connected+0x30>
  conn->poll_count = 0;
 800cdf0:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 800cdf4:	f006 f9b1 	bl	801315a <sys_now>
 800cdf8:	6160      	str	r0, [r4, #20]
  return lwiperf_tcp_client_send_more(conn);
 800cdfa:	4620      	mov	r0, r4
}
 800cdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 800ce00:	f7ff bf30 	b.w	800cc64 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800ce04:	4620      	mov	r0, r4
 800ce06:	2105      	movs	r1, #5
 800ce08:	f7ff fe0c 	bl	800ca24 <lwiperf_tcp_close>
}
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	08016686 	.word	0x08016686
 800ce14:	0801636c 	.word	0x0801636c
 800ce18:	08015927 	.word	0x08015927

0800ce1c <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 800ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce20:	460f      	mov	r7, r1
 800ce22:	4690      	mov	r8, r2
 800ce24:	461e      	mov	r6, r3

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 800ce26:	4605      	mov	r5, r0
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d039      	beq.n	800cea0 <lwiperf_start_tcp_server_impl.constprop.0+0x84>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800ce2c:	2048      	movs	r0, #72	@ 0x48
 800ce2e:	f000 fbcd 	bl	800d5cc <mem_malloc>
  if (s == NULL) {
 800ce32:	4604      	mov	r4, r0
 800ce34:	b308      	cbz	r0, 800ce7a <lwiperf_start_tcp_server_impl.constprop.0+0x5e>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 800ce36:	2248      	movs	r2, #72	@ 0x48
 800ce38:	2100      	movs	r1, #0
 800ce3a:	f007 fe33 	bl	8014aa4 <memset>
  s->base.tcp = 1;
 800ce3e:	f240 1301 	movw	r3, #257	@ 0x101
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
  s->report_fn = report_fn;
  s->report_arg = report_arg;

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800ce42:	202e      	movs	r0, #46	@ 0x2e
  s->base.tcp = 1;
 800ce44:	80a3      	strh	r3, [r4, #4]
  s->base.related_master_state = related_master_state;
 800ce46:	9b06      	ldr	r3, [sp, #24]
  s->report_arg = report_arg;
 800ce48:	e9c4 8606 	strd	r8, r6, [r4, #24]
  s->base.related_master_state = related_master_state;
 800ce4c:	60a3      	str	r3, [r4, #8]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800ce4e:	f002 f919 	bl	800f084 <tcp_new_ip_type>
  if (pcb == NULL) {
 800ce52:	4606      	mov	r6, r0
 800ce54:	b188      	cbz	r0, 800ce7a <lwiperf_start_tcp_server_impl.constprop.0+0x5e>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 800ce56:	4629      	mov	r1, r5
 800ce58:	463a      	mov	r2, r7
 800ce5a:	f001 fa19 	bl	800e290 <tcp_bind>
  if (err != ERR_OK) {
 800ce5e:	4605      	mov	r5, r0
 800ce60:	b968      	cbnz	r0, 800ce7e <lwiperf_start_tcp_server_impl.constprop.0+0x62>
    return err;
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800ce62:	2101      	movs	r1, #1
 800ce64:	4630      	mov	r0, r6
 800ce66:	f001 faa7 	bl	800e3b8 <tcp_listen_with_backlog>
 800ce6a:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 800ce6c:	b950      	cbnz	r0, 800ce84 <lwiperf_start_tcp_server_impl.constprop.0+0x68>
    if (pcb != NULL) {
      tcp_close(pcb);
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f001 feca 	bl	800ec08 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 fa1b 	bl	800d2b0 <mem_free>
    return ERR_MEM;
 800ce7a:	f04f 35ff 	mov.w	r5, #4294967295
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 800ce7e:	4628      	mov	r0, r5
 800ce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tcp_arg(s->server_pcb, s);
 800ce84:	4621      	mov	r1, r4
 800ce86:	f001 fb17 	bl	800e4b8 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 800ce8a:	4907      	ldr	r1, [pc, #28]	@ (800cea8 <lwiperf_start_tcp_server_impl.constprop.0+0x8c>)
 800ce8c:	68e0      	ldr	r0, [r4, #12]
 800ce8e:	f001 fb5d 	bl	800e54c <tcp_accept>
  item->next = lwiperf_all_connections;
 800ce92:	4b06      	ldr	r3, [pc, #24]	@ (800ceac <lwiperf_start_tcp_server_impl.constprop.0+0x90>)
 800ce94:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800ce96:	601c      	str	r4, [r3, #0]
  *state = s;
 800ce98:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 800ce9a:	6022      	str	r2, [r4, #0]
  *state = s;
 800ce9c:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800ce9e:	e7ee      	b.n	800ce7e <lwiperf_start_tcp_server_impl.constprop.0+0x62>
    return ERR_ARG;
 800cea0:	f06f 050f 	mvn.w	r5, #15
 800cea4:	e7eb      	b.n	800ce7e <lwiperf_start_tcp_server_impl.constprop.0+0x62>
 800cea6:	bf00      	nop
 800cea8:	0800cb21 	.word	0x0800cb21
 800ceac:	2000b524 	.word	0x2000b524

0800ceb0 <lwiperf_tx_start_impl>:
{
 800ceb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800ceb8:	468a      	mov	sl, r1
 800ceba:	4616      	mov	r6, r2
 800cebc:	469b      	mov	fp, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800cebe:	4607      	mov	r7, r0
 800cec0:	b930      	cbnz	r0, 800ced0 <lwiperf_tx_start_impl+0x20>
 800cec2:	4b34      	ldr	r3, [pc, #208]	@ (800cf94 <lwiperf_tx_start_impl+0xe4>)
 800cec4:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800cec8:	4933      	ldr	r1, [pc, #204]	@ (800cf98 <lwiperf_tx_start_impl+0xe8>)
 800ceca:	4834      	ldr	r0, [pc, #208]	@ (800cf9c <lwiperf_tx_start_impl+0xec>)
 800cecc:	f007 fbe4 	bl	8014698 <iprintf>
  *new_conn = NULL;
 800ced0:	f04f 0900 	mov.w	r9, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800ced4:	2048      	movs	r0, #72	@ 0x48
  *new_conn = NULL;
 800ced6:	f8c8 9000 	str.w	r9, [r8]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800ceda:	f000 fb77 	bl	800d5cc <mem_malloc>
  if (client_conn == NULL) {
 800cede:	4604      	mov	r4, r0
 800cee0:	b138      	cbz	r0, 800cef2 <lwiperf_tx_start_impl+0x42>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 800cee2:	4648      	mov	r0, r9
 800cee4:	f002 f8ce 	bl	800f084 <tcp_new_ip_type>
  if (newpcb == NULL) {
 800cee8:	4605      	mov	r5, r0
 800ceea:	b940      	cbnz	r0, 800cefe <lwiperf_tx_start_impl+0x4e>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800ceec:	4620      	mov	r0, r4
 800ceee:	f000 f9df 	bl	800d2b0 <mem_free>
    return ERR_MEM;
 800cef2:	f04f 35ff 	mov.w	r5, #4294967295
}
 800cef6:	4628      	mov	r0, r5
 800cef8:	b003      	add	sp, #12
 800cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 800cefe:	2248      	movs	r2, #72	@ 0x48
 800cf00:	4649      	mov	r1, r9
 800cf02:	4620      	mov	r0, r4
 800cf04:	f007 fdce 	bl	8014aa4 <memset>
  client_conn->base.tcp = 1;
 800cf08:	2301      	movs	r3, #1
  client_conn->conn_pcb = newpcb;
 800cf0a:	6125      	str	r5, [r4, #16]
  client_conn->base.tcp = 1;
 800cf0c:	7123      	strb	r3, [r4, #4]
  client_conn->base.related_master_state = related_master_state;
 800cf0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf10:	60a3      	str	r3, [r4, #8]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 800cf12:	f006 f922 	bl	801315a <sys_now>
  client_conn->report_arg = report_arg;
 800cf16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800cf18:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800cf1c:	f106 0118 	add.w	r1, r6, #24
  client_conn->report_arg = report_arg;
 800cf20:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800cf22:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 800cf24:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800cf28:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800cf2c:	4633      	mov	r3, r6
  client_conn->report_fn = report_fn;
 800cf2e:	e9c4 0b05 	strd	r0, fp, [r4, #20]
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800cf32:	f853 0b04 	ldr.w	r0, [r3], #4
 800cf36:	428b      	cmp	r3, r1
 800cf38:	f842 0b04 	str.w	r0, [r2], #4
 800cf3c:	d1f9      	bne.n	800cf32 <lwiperf_tx_start_impl+0x82>
  client_conn->have_settings_buf = 1;
 800cf3e:	2301      	movs	r3, #1
  tcp_arg(newpcb, client_conn);
 800cf40:	4628      	mov	r0, r5
 800cf42:	4621      	mov	r1, r4
  client_conn->have_settings_buf = 1;
 800cf44:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  tcp_arg(newpcb, client_conn);
 800cf48:	f001 fab6 	bl	800e4b8 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	4914      	ldr	r1, [pc, #80]	@ (800cfa0 <lwiperf_tx_start_impl+0xf0>)
 800cf50:	f001 face 	bl	800e4f0 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800cf54:	2202      	movs	r2, #2
 800cf56:	4628      	mov	r0, r5
 800cf58:	4912      	ldr	r1, [pc, #72]	@ (800cfa4 <lwiperf_tx_start_impl+0xf4>)
 800cf5a:	f001 fafd 	bl	800e558 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800cf5e:	4628      	mov	r0, r5
 800cf60:	4911      	ldr	r1, [pc, #68]	@ (800cfa8 <lwiperf_tx_start_impl+0xf8>)
 800cf62:	f001 fadb 	bl	800e51c <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 800cf66:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800cf68:	4628      	mov	r0, r5
 800cf6a:	4652      	mov	r2, sl
  ip_addr_copy(remote_addr, *remote_ip);
 800cf6c:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800cf6e:	a901      	add	r1, sp, #4
 800cf70:	4b0e      	ldr	r3, [pc, #56]	@ (800cfac <lwiperf_tx_start_impl+0xfc>)
 800cf72:	f002 f8c3 	bl	800f0fc <tcp_connect>
  if (err != ERR_OK) {
 800cf76:	4605      	mov	r5, r0
 800cf78:	b120      	cbz	r0, 800cf84 <lwiperf_tx_start_impl+0xd4>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800cf7a:	2102      	movs	r1, #2
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7ff fd51 	bl	800ca24 <lwiperf_tcp_close>
    return err;
 800cf82:	e7b8      	b.n	800cef6 <lwiperf_tx_start_impl+0x46>
  item->next = lwiperf_all_connections;
 800cf84:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb0 <lwiperf_tx_start_impl+0x100>)
 800cf86:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800cf88:	601c      	str	r4, [r3, #0]
  item->next = lwiperf_all_connections;
 800cf8a:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 800cf8c:	f8c8 4000 	str.w	r4, [r8]
  return ERR_OK;
 800cf90:	e7b1      	b.n	800cef6 <lwiperf_tx_start_impl+0x46>
 800cf92:	bf00      	nop
 800cf94:	08016686 	.word	0x08016686
 800cf98:	08016757 	.word	0x08016757
 800cf9c:	08015927 	.word	0x08015927
 800cfa0:	0800cd51 	.word	0x0800cd51
 800cfa4:	0800cd85 	.word	0x0800cd85
 800cfa8:	0800cc59 	.word	0x0800cc59
 800cfac:	0800cdd5 	.word	0x0800cdd5
 800cfb0:	2000b524 	.word	0x2000b524

0800cfb4 <lwiperf_tx_start_passive>:
{
 800cfb4:	b530      	push	{r4, r5, lr}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	4604      	mov	r4, r0
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 800cfba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800cfbc:	f000 f8e3 	bl	800d186 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 800cfc0:	ab05      	add	r3, sp, #20
 800cfc2:	6925      	ldr	r5, [r4, #16]
 800cfc4:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800cfc8:	9302      	str	r3, [sp, #8]
 800cfca:	b281      	uxth	r1, r0
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	1d28      	adds	r0, r5, #4
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	69e3      	ldr	r3, [r4, #28]
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	69a3      	ldr	r3, [r4, #24]
 800cfd8:	f7ff ff6a 	bl	800ceb0 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 800cfdc:	4604      	mov	r4, r0
 800cfde:	b950      	cbnz	r0, 800cff6 <lwiperf_tx_start_passive+0x42>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800cfe0:	9d05      	ldr	r5, [sp, #20]
 800cfe2:	b935      	cbnz	r5, 800cff2 <lwiperf_tx_start_passive+0x3e>
 800cfe4:	4b05      	ldr	r3, [pc, #20]	@ (800cffc <lwiperf_tx_start_passive+0x48>)
 800cfe6:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800cfea:	4905      	ldr	r1, [pc, #20]	@ (800d000 <lwiperf_tx_start_passive+0x4c>)
 800cfec:	4805      	ldr	r0, [pc, #20]	@ (800d004 <lwiperf_tx_start_passive+0x50>)
 800cfee:	f007 fb53 	bl	8014698 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 800cff2:	2300      	movs	r3, #0
 800cff4:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 800cff6:	4620      	mov	r0, r4
 800cff8:	b007      	add	sp, #28
 800cffa:	bd30      	pop	{r4, r5, pc}
 800cffc:	08016686 	.word	0x08016686
 800d000:	08016769 	.word	0x08016769
 800d004:	08015927 	.word	0x08015927

0800d008 <lwiperf_tcp_recv>:
{
 800d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d00c:	461e      	mov	r6, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800d00e:	6903      	ldr	r3, [r0, #16]
{
 800d010:	4604      	mov	r4, r0
 800d012:	460f      	mov	r7, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800d014:	428b      	cmp	r3, r1
{
 800d016:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800d018:	d006      	beq.n	800d028 <lwiperf_tcp_recv+0x20>
 800d01a:	4b46      	ldr	r3, [pc, #280]	@ (800d134 <lwiperf_tcp_recv+0x12c>)
 800d01c:	f240 12d1 	movw	r2, #465	@ 0x1d1
 800d020:	4945      	ldr	r1, [pc, #276]	@ (800d138 <lwiperf_tcp_recv+0x130>)
 800d022:	4846      	ldr	r0, [pc, #280]	@ (800d13c <lwiperf_tcp_recv+0x134>)
 800d024:	f007 fb38 	bl	8014698 <iprintf>
  if (err != ERR_OK) {
 800d028:	b136      	cbz	r6, 800d038 <lwiperf_tcp_recv+0x30>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800d02a:	2105      	movs	r1, #5
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 800d02c:	4620      	mov	r0, r4
 800d02e:	f7ff fcf9 	bl	800ca24 <lwiperf_tcp_close>
}
 800d032:	2000      	movs	r0, #0
 800d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (p == NULL) {
 800d038:	b94d      	cbnz	r5, 800d04e <lwiperf_tcp_recv+0x46>
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800d03a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d03c:	0619      	lsls	r1, r3, #24
 800d03e:	d504      	bpl.n	800d04a <lwiperf_tcp_recv+0x42>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 800d040:	01da      	lsls	r2, r3, #7
 800d042:	d402      	bmi.n	800d04a <lwiperf_tcp_recv+0x42>
        lwiperf_tx_start_passive(conn);
 800d044:	4620      	mov	r0, r4
 800d046:	f7ff ffb5 	bl	800cfb4 <lwiperf_tx_start_passive>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 800d04a:	2100      	movs	r1, #0
 800d04c:	e7ee      	b.n	800d02c <lwiperf_tcp_recv+0x24>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800d04e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  tot_len = p->tot_len;
 800d052:	f8b5 8008 	ldrh.w	r8, [r5, #8]
  conn->poll_count = 0;
 800d056:	f884 6020 	strb.w	r6, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d05b      	beq.n	800d116 <lwiperf_tcp_recv+0x10e>
 800d05e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d060:	03db      	lsls	r3, r3, #15
 800d062:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d066:	d04b      	beq.n	800d100 <lwiperf_tcp_recv+0xf8>
  for (q = p; q != NULL; q = q->next) {
 800d068:	462b      	mov	r3, r5
  packet_idx = 0;
 800d06a:	2600      	movs	r6, #0
    packet_idx += q->len;
 800d06c:	895a      	ldrh	r2, [r3, #10]
  for (q = p; q != NULL; q = q->next) {
 800d06e:	681b      	ldr	r3, [r3, #0]
    packet_idx += q->len;
 800d070:	4416      	add	r6, r2
  for (q = p; q != NULL; q = q->next) {
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1fa      	bne.n	800d06c <lwiperf_tcp_recv+0x64>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 800d076:	892b      	ldrh	r3, [r5, #8]
 800d078:	42b3      	cmp	r3, r6
 800d07a:	d006      	beq.n	800d08a <lwiperf_tcp_recv+0x82>
 800d07c:	4b2d      	ldr	r3, [pc, #180]	@ (800d134 <lwiperf_tcp_recv+0x12c>)
 800d07e:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800d082:	492f      	ldr	r1, [pc, #188]	@ (800d140 <lwiperf_tcp_recv+0x138>)
 800d084:	482d      	ldr	r0, [pc, #180]	@ (800d13c <lwiperf_tcp_recv+0x134>)
 800d086:	f007 fb07 	bl	8014698 <iprintf>
  conn->bytes_transferred += packet_idx;
 800d08a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 800d08c:	4641      	mov	r1, r8
  conn->bytes_transferred += packet_idx;
 800d08e:	4433      	add	r3, r6
 800d090:	6263      	str	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 800d092:	e020      	b.n	800d0d6 <lwiperf_tcp_recv+0xce>
      conn->have_settings_buf = 1;
 800d094:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800d096:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      conn->have_settings_buf = 1;
 800d098:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800d09c:	4b29      	ldr	r3, [pc, #164]	@ (800d144 <lwiperf_tcp_recv+0x13c>)
 800d09e:	4393      	bics	r3, r2
 800d0a0:	d110      	bne.n	800d0c4 <lwiperf_tcp_recv+0xbc>
          err_t err2 = lwiperf_tx_start_passive(conn);
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7ff ff86 	bl	800cfb4 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 800d0a8:	b160      	cbz	r0, 800d0c4 <lwiperf_tcp_recv+0xbc>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800d0aa:	2104      	movs	r1, #4
 800d0ac:	e02c      	b.n	800d108 <lwiperf_tcp_recv+0x100>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800d0ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d0b0:	061b      	lsls	r3, r3, #24
 800d0b2:	d507      	bpl.n	800d0c4 <lwiperf_tcp_recv+0xbc>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 800d0b4:	2318      	movs	r3, #24
 800d0b6:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f001 f843 	bl	800e148 <pbuf_memcmp>
 800d0c2:	bb00      	cbnz	r0, 800d106 <lwiperf_tcp_recv+0xfe>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800d0c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d0c6:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 800d0c8:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800d0ca:	6263      	str	r3, [r4, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 800d0cc:	d807      	bhi.n	800d0de <lwiperf_tcp_recv+0xd6>
      conn->time_started = sys_now();
 800d0ce:	f006 f844 	bl	801315a <sys_now>
      tcp_recved(tpcb, p->tot_len);
 800d0d2:	8929      	ldrh	r1, [r5, #8]
      conn->time_started = sys_now();
 800d0d4:	6160      	str	r0, [r4, #20]
  tcp_recved(tpcb, tot_len);
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f001 f9a6 	bl	800e428 <tcp_recved>
 800d0dc:	e017      	b.n	800d10e <lwiperf_tcp_recv+0x106>
    conn->next_num = 4; /* 24 bytes received... */
 800d0de:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 800d0e0:	2118      	movs	r1, #24
 800d0e2:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 800d0e4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 800d0e8:	f000 fd76 	bl	800dbd8 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d0bb      	beq.n	800d068 <lwiperf_tcp_recv+0x60>
 800d0f0:	4b10      	ldr	r3, [pc, #64]	@ (800d134 <lwiperf_tcp_recv+0x12c>)
 800d0f2:	f240 2212 	movw	r2, #530	@ 0x212
 800d0f6:	4914      	ldr	r1, [pc, #80]	@ (800d148 <lwiperf_tcp_recv+0x140>)
 800d0f8:	4810      	ldr	r0, [pc, #64]	@ (800d13c <lwiperf_tcp_recv+0x134>)
 800d0fa:	f007 facd 	bl	8014698 <iprintf>
 800d0fe:	e7b3      	b.n	800d068 <lwiperf_tcp_recv+0x60>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 800d100:	f1b8 0f17 	cmp.w	r8, #23
 800d104:	d8d3      	bhi.n	800d0ae <lwiperf_tcp_recv+0xa6>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800d106:	2103      	movs	r1, #3
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800d108:	4620      	mov	r0, r4
 800d10a:	f7ff fc8b 	bl	800ca24 <lwiperf_tcp_close>
  pbuf_free(p);
 800d10e:	4628      	mov	r0, r5
 800d110:	f000 fd8e 	bl	800dc30 <pbuf_free>
  return ERR_OK;
 800d114:	e78d      	b.n	800d032 <lwiperf_tcp_recv+0x2a>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 800d116:	f1b8 0f17 	cmp.w	r8, #23
 800d11a:	d9f4      	bls.n	800d106 <lwiperf_tcp_recv+0xfe>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 800d11c:	4633      	mov	r3, r6
 800d11e:	2218      	movs	r2, #24
 800d120:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800d124:	4628      	mov	r0, r5
 800d126:	f000 ffa9 	bl	800e07c <pbuf_copy_partial>
 800d12a:	2818      	cmp	r0, #24
 800d12c:	d0b2      	beq.n	800d094 <lwiperf_tcp_recv+0x8c>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800d12e:	2102      	movs	r1, #2
 800d130:	e7ea      	b.n	800d108 <lwiperf_tcp_recv+0x100>
 800d132:	bf00      	nop
 800d134:	08016686 	.word	0x08016686
 800d138:	0801674a 	.word	0x0801674a
 800d13c:	08015927 	.word	0x08015927
 800d140:	08016794 	.word	0x08016794
 800d144:	01000080 	.word	0x01000080
 800d148:	0801677a 	.word	0x0801677a

0800d14c <lwiperf_start_tcp_server>:
{
 800d14c:	b530      	push	{r4, r5, lr}
 800d14e:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 800d150:	2400      	movs	r4, #0
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800d152:	ad03      	add	r5, sp, #12
  lwiperf_state_tcp_t *state = NULL;
 800d154:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800d156:	e9cd 4500 	strd	r4, r5, [sp]
 800d15a:	f7ff fe5f 	bl	800ce1c <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 800d15e:	b910      	cbnz	r0, 800d166 <lwiperf_start_tcp_server+0x1a>
    return state;
 800d160:	9803      	ldr	r0, [sp, #12]
}
 800d162:	b005      	add	sp, #20
 800d164:	bd30      	pop	{r4, r5, pc}
  return NULL;
 800d166:	4620      	mov	r0, r4
 800d168:	e7fb      	b.n	800d162 <lwiperf_start_tcp_server+0x16>
	...

0800d16c <lwiperf_start_tcp_server_default>:
{
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 800d170:	4802      	ldr	r0, [pc, #8]	@ (800d17c <lwiperf_start_tcp_server_default+0x10>)
 800d172:	f241 3189 	movw	r1, #5001	@ 0x1389
 800d176:	f7ff bfe9 	b.w	800d14c <lwiperf_start_tcp_server>
 800d17a:	bf00      	nop
 800d17c:	0808ed34 	.word	0x0808ed34

0800d180 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800d180:	ba40      	rev16	r0, r0
}
 800d182:	b280      	uxth	r0, r0
 800d184:	4770      	bx	lr

0800d186 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800d186:	ba00      	rev	r0, r0
 800d188:	4770      	bx	lr

0800d18a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d18a:	b530      	push	{r4, r5, lr}
  u16_t t = 0;
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d18c:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800d190:	f04f 0300 	mov.w	r3, #0
  if (odd && len > 0) {
 800d194:	d006      	beq.n	800d1a4 <lwip_standard_chksum+0x1a>
 800d196:	4299      	cmp	r1, r3
 800d198:	dd20      	ble.n	800d1dc <lwip_standard_chksum+0x52>
    ((u8_t *)&t)[1] = *pb++;
 800d19a:	f810 2b01 	ldrb.w	r2, [r0], #1
    len--;
 800d19e:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800d1a0:	f362 231f 	bfi	r3, r2, #8, #24
  u32_t sum = 0;
 800d1a4:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800d1a6:	2901      	cmp	r1, #1
 800d1a8:	dc13      	bgt.n	800d1d2 <lwip_standard_chksum+0x48>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d1aa:	d103      	bne.n	800d1b4 <lwip_standard_chksum+0x2a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d1ac:	7801      	ldrb	r1, [r0, #0]
 800d1ae:	f361 0307 	bfi	r3, r1, #0, #8
 800d1b2:	b29b      	uxth	r3, r3
  }

  /* Add end bytes */
  sum += t;
 800d1b4:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	eb02 4313 	add.w	r3, r2, r3, lsr #16
  sum = FOLD_U32T(sum);
 800d1bc:	b298      	uxth	r0, r3
 800d1be:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800d1c2:	b124      	cbz	r4, 800d1ce <lwip_standard_chksum+0x44>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d1c4:	0203      	lsls	r3, r0, #8
 800d1c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800d1ce:	b280      	uxth	r0, r0
 800d1d0:	bd30      	pop	{r4, r5, pc}
    sum += *ps++;
 800d1d2:	f830 5b02 	ldrh.w	r5, [r0], #2
    len -= 2;
 800d1d6:	3902      	subs	r1, #2
    sum += *ps++;
 800d1d8:	442a      	add	r2, r5
    len -= 2;
 800d1da:	e7e4      	b.n	800d1a6 <lwip_standard_chksum+0x1c>
  u32_t sum = 0;
 800d1dc:	461a      	mov	r2, r3
 800d1de:	e7e9      	b.n	800d1b4 <lwip_standard_chksum+0x2a>

0800d1e0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d1e2:	2600      	movs	r6, #0
{
 800d1e4:	4605      	mov	r5, r0

  acc = 0;
 800d1e6:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 800d1e8:	b945      	cbnz	r5, 800d1fc <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 800d1ea:	b126      	cbz	r6, 800d1f6 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d1ec:	0223      	lsls	r3, r4, #8
 800d1ee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800d1f6:	43e0      	mvns	r0, r4
}
 800d1f8:	b280      	uxth	r0, r0
 800d1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d1fc:	896f      	ldrh	r7, [r5, #10]
 800d1fe:	6868      	ldr	r0, [r5, #4]
 800d200:	4639      	mov	r1, r7
 800d202:	f7ff ffc2 	bl	800d18a <lwip_standard_chksum>
 800d206:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 800d208:	b2a3      	uxth	r3, r4
 800d20a:	eb03 4414 	add.w	r4, r3, r4, lsr #16
    if (q->len % 2 != 0) {
 800d20e:	07fb      	lsls	r3, r7, #31
 800d210:	d506      	bpl.n	800d220 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800d212:	0223      	lsls	r3, r4, #8
 800d214:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d218:	f086 0601 	eor.w	r6, r6, #1
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 800d220:	682d      	ldr	r5, [r5, #0]
 800d222:	e7e1      	b.n	800d1e8 <inet_chksum_pbuf+0x8>

0800d224 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d224:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d226:	f005 ff97 	bl	8013158 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d22a:	f000 f80d 	bl	800d248 <mem_init>
  memp_init();
 800d22e:	f000 fac1 	bl	800d7b4 <memp_init>
  pbuf_init();
  netif_init();
 800d232:	f000 fb4d 	bl	800d8d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d236:	f004 fb39 	bl	80118ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d23a:	f001 f805 	bl	800e248 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800d23e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800d242:	f004 bae9 	b.w	8011818 <sys_timeouts_init>
	...

0800d248 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d248:	4b10      	ldr	r3, [pc, #64]	@ (800d28c <mem_init+0x44>)
 800d24a:	4a11      	ldr	r2, [pc, #68]	@ (800d290 <mem_init+0x48>)
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d24c:	4911      	ldr	r1, [pc, #68]	@ (800d294 <mem_init+0x4c>)
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d24e:	4812      	ldr	r0, [pc, #72]	@ (800d298 <mem_init+0x50>)
{
 800d250:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d252:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800d254:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800d258:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 800d25a:	2200      	movs	r2, #0
 800d25c:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d25e:	4a0f      	ldr	r2, [pc, #60]	@ (800d29c <mem_init+0x54>)
 800d260:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d262:	f04f 2140 	mov.w	r1, #1073758208	@ 0x40004000
 800d266:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 800d268:	2101      	movs	r1, #1
 800d26a:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 800d26c:	4a0c      	ldr	r2, [pc, #48]	@ (800d2a0 <mem_init+0x58>)
 800d26e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d270:	f005 ff7c 	bl	801316c <sys_mutex_new>
 800d274:	b140      	cbz	r0, 800d288 <mem_init+0x40>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d276:	4b0b      	ldr	r3, [pc, #44]	@ (800d2a4 <mem_init+0x5c>)
 800d278:	f240 2212 	movw	r2, #530	@ 0x212
 800d27c:	490a      	ldr	r1, [pc, #40]	@ (800d2a8 <mem_init+0x60>)
 800d27e:	480b      	ldr	r0, [pc, #44]	@ (800d2ac <mem_init+0x64>)
  }
}
 800d280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d284:	f007 ba08 	b.w	8014698 <iprintf>
}
 800d288:	bd10      	pop	{r4, pc}
 800d28a:	bf00      	nop
 800d28c:	20078000 	.word	0x20078000
 800d290:	2000b54c 	.word	0x2000b54c
 800d294:	2000b548 	.word	0x2000b548
 800d298:	2000b544 	.word	0x2000b544
 800d29c:	2007c000 	.word	0x2007c000
 800d2a0:	2000b540 	.word	0x2000b540
 800d2a4:	080167a3 	.word	0x080167a3
 800d2a8:	080167c0 	.word	0x080167c0
 800d2ac:	08015927 	.word	0x08015927

0800d2b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	f000 80b4 	beq.w	800d424 <mem_free+0x174>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d2bc:	0783      	lsls	r3, r0, #30
 800d2be:	d00c      	beq.n	800d2da <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d2c0:	4b59      	ldr	r3, [pc, #356]	@ (800d428 <mem_free+0x178>)
 800d2c2:	f240 2266 	movw	r2, #614	@ 0x266
 800d2c6:	4959      	ldr	r1, [pc, #356]	@ (800d42c <mem_free+0x17c>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d2c8:	4859      	ldr	r0, [pc, #356]	@ (800d430 <mem_free+0x180>)
 800d2ca:	f007 f9e5 	bl	8014698 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2ce:	f005 ff46 	bl	801315e <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800d2d6:	f005 bf47 	b.w	8013168 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d2da:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 800d45c <mem_free+0x1ac>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2de:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d2e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e6:	42ab      	cmp	r3, r5
 800d2e8:	d805      	bhi.n	800d2f6 <mem_free+0x46>
 800d2ea:	4f52      	ldr	r7, [pc, #328]	@ (800d434 <mem_free+0x184>)
 800d2ec:	f100 030c 	add.w	r3, r0, #12
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d204      	bcs.n	800d300 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d2f6:	4b4c      	ldr	r3, [pc, #304]	@ (800d428 <mem_free+0x178>)
 800d2f8:	f240 2272 	movw	r2, #626	@ 0x272
 800d2fc:	494e      	ldr	r1, [pc, #312]	@ (800d438 <mem_free+0x188>)
 800d2fe:	e7e3      	b.n	800d2c8 <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 800d300:	484e      	ldr	r0, [pc, #312]	@ (800d43c <mem_free+0x18c>)
 800d302:	f005 ff4b 	bl	801319c <sys_mutex_lock>
  if (!mem->used) {
 800d306:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800d30a:	b953      	cbnz	r3, 800d322 <mem_free+0x72>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d30c:	4b46      	ldr	r3, [pc, #280]	@ (800d428 <mem_free+0x178>)
 800d30e:	f240 227f 	movw	r2, #639	@ 0x27f
 800d312:	494b      	ldr	r1, [pc, #300]	@ (800d440 <mem_free+0x190>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d314:	4846      	ldr	r0, [pc, #280]	@ (800d430 <mem_free+0x180>)
 800d316:	f007 f9bf 	bl	8014698 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d31a:	4848      	ldr	r0, [pc, #288]	@ (800d43c <mem_free+0x18c>)
 800d31c:	f005 ff6a 	bl	80131f4 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800d320:	e7d5      	b.n	800d2ce <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 800d322:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800d326:	f8d8 1000 	ldr.w	r1, [r8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d32a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
  pmem = ptr_to_mem(mem->prev);
 800d32e:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d332:	d810      	bhi.n	800d356 <mem_free+0xa6>
 800d334:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800d338:	d80d      	bhi.n	800d356 <mem_free+0xa6>
  return (mem_size_t)((u8_t *)mem - ram);
 800d33a:	1a6b      	subs	r3, r5, r1
 800d33c:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d33e:	4283      	cmp	r3, r0
 800d340:	d002      	beq.n	800d348 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d342:	5a08      	ldrh	r0, [r1, r0]
 800d344:	4298      	cmp	r0, r3
 800d346:	d106      	bne.n	800d356 <mem_free+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 800d348:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d34a:	6838      	ldr	r0, [r7, #0]
 800d34c:	4282      	cmp	r2, r0
 800d34e:	d007      	beq.n	800d360 <mem_free+0xb0>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d350:	8852      	ldrh	r2, [r2, #2]
 800d352:	429a      	cmp	r2, r3
 800d354:	d004      	beq.n	800d360 <mem_free+0xb0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d356:	4b34      	ldr	r3, [pc, #208]	@ (800d428 <mem_free+0x178>)
 800d358:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800d35c:	4939      	ldr	r1, [pc, #228]	@ (800d444 <mem_free+0x194>)
 800d35e:	e7d9      	b.n	800d314 <mem_free+0x64>
  mem->used = 0;
 800d360:	2300      	movs	r3, #0
  if (mem < lfree) {
 800d362:	4e39      	ldr	r6, [pc, #228]	@ (800d448 <mem_free+0x198>)
  mem->used = 0;
 800d364:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800d368:	6833      	ldr	r3, [r6, #0]
 800d36a:	42ab      	cmp	r3, r5
    lfree = mem;
 800d36c:	bf88      	it	hi
 800d36e:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d370:	428d      	cmp	r5, r1
 800d372:	d206      	bcs.n	800d382 <mem_free+0xd2>
 800d374:	4b2c      	ldr	r3, [pc, #176]	@ (800d428 <mem_free+0x178>)
 800d376:	f44f 72e9 	mov.w	r2, #466	@ 0x1d2
 800d37a:	4934      	ldr	r1, [pc, #208]	@ (800d44c <mem_free+0x19c>)
 800d37c:	482c      	ldr	r0, [pc, #176]	@ (800d430 <mem_free+0x180>)
 800d37e:	f007 f98b 	bl	8014698 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	429d      	cmp	r5, r3
 800d386:	d306      	bcc.n	800d396 <mem_free+0xe6>
 800d388:	4b27      	ldr	r3, [pc, #156]	@ (800d428 <mem_free+0x178>)
 800d38a:	f240 12d3 	movw	r2, #467	@ 0x1d3
 800d38e:	4930      	ldr	r1, [pc, #192]	@ (800d450 <mem_free+0x1a0>)
 800d390:	4827      	ldr	r0, [pc, #156]	@ (800d430 <mem_free+0x180>)
 800d392:	f007 f981 	bl	8014698 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d396:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800d39a:	b133      	cbz	r3, 800d3aa <mem_free+0xfa>
 800d39c:	4b22      	ldr	r3, [pc, #136]	@ (800d428 <mem_free+0x178>)
 800d39e:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800d3a2:	492c      	ldr	r1, [pc, #176]	@ (800d454 <mem_free+0x1a4>)
 800d3a4:	4822      	ldr	r0, [pc, #136]	@ (800d430 <mem_free+0x180>)
 800d3a6:	f007 f977 	bl	8014698 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d3aa:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800d3ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d3b2:	d906      	bls.n	800d3c2 <mem_free+0x112>
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d428 <mem_free+0x178>)
 800d3b6:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800d3ba:	4927      	ldr	r1, [pc, #156]	@ (800d458 <mem_free+0x1a8>)
 800d3bc:	481c      	ldr	r0, [pc, #112]	@ (800d430 <mem_free+0x180>)
 800d3be:	f007 f96b 	bl	8014698 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800d3c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d3c6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800d3ca:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d3cc:	4295      	cmp	r5, r2
 800d3ce:	d011      	beq.n	800d3f4 <mem_free+0x144>
 800d3d0:	7910      	ldrb	r0, [r2, #4]
 800d3d2:	b978      	cbnz	r0, 800d3f4 <mem_free+0x144>
 800d3d4:	6838      	ldr	r0, [r7, #0]
 800d3d6:	4282      	cmp	r2, r0
 800d3d8:	d00c      	beq.n	800d3f4 <mem_free+0x144>
    if (lfree == nmem) {
 800d3da:	6830      	ldr	r0, [r6, #0]
 800d3dc:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800d3de:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800d3e0:	bf08      	it	eq
 800d3e2:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d3e4:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
    mem->next = nmem->next;
 800d3e8:	f824 2c08 	strh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800d3ec:	bf1e      	ittt	ne
 800d3ee:	1ae9      	subne	r1, r5, r3
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d3f0:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800d3f2:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800d3f4:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800d3f8:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800d3fa:	428d      	cmp	r5, r1
 800d3fc:	d00d      	beq.n	800d41a <mem_free+0x16a>
 800d3fe:	7908      	ldrb	r0, [r1, #4]
 800d400:	b958      	cbnz	r0, 800d41a <mem_free+0x16a>
    if (lfree == mem) {
 800d402:	6830      	ldr	r0, [r6, #0]
 800d404:	4285      	cmp	r5, r0
      lfree = pmem;
 800d406:	bf08      	it	eq
 800d408:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 800d40a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d40e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
    pmem->next = mem->next;
 800d412:	5299      	strh	r1, [r3, r2]
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d414:	bf1c      	itt	ne
 800d416:	185b      	addne	r3, r3, r1
 800d418:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800d41a:	4808      	ldr	r0, [pc, #32]	@ (800d43c <mem_free+0x18c>)
}
 800d41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800d420:	f005 bee8 	b.w	80131f4 <sys_mutex_unlock>
}
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d428:	080167a3 	.word	0x080167a3
 800d42c:	080167db 	.word	0x080167db
 800d430:	08015927 	.word	0x08015927
 800d434:	2000b548 	.word	0x2000b548
 800d438:	080167fc 	.word	0x080167fc
 800d43c:	2000b544 	.word	0x2000b544
 800d440:	08016815 	.word	0x08016815
 800d444:	0801683b 	.word	0x0801683b
 800d448:	2000b540 	.word	0x2000b540
 800d44c:	0801686d 	.word	0x0801686d
 800d450:	08016884 	.word	0x08016884
 800d454:	0801689e 	.word	0x0801689e
 800d458:	080168b9 	.word	0x080168b9
 800d45c:	2000b54c 	.word	0x2000b54c

0800d460 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d464:	1ccc      	adds	r4, r1, #3
{
 800d466:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d468:	f024 0403 	bic.w	r4, r4, #3
 800d46c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800d46e:	2c0b      	cmp	r4, #11
 800d470:	d904      	bls.n	800d47c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d472:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 800d476:	d902      	bls.n	800d47e <mem_trim+0x1e>
    return NULL;
 800d478:	2500      	movs	r5, #0
 800d47a:	e01f      	b.n	800d4bc <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 800d47c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d47e:	42a1      	cmp	r1, r4
 800d480:	d8fa      	bhi.n	800d478 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d482:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800d5c8 <mem_trim+0x168>
 800d486:	f8d8 3000 	ldr.w	r3, [r8]
 800d48a:	42ab      	cmp	r3, r5
 800d48c:	d803      	bhi.n	800d496 <mem_trim+0x36>
 800d48e:	4b46      	ldr	r3, [pc, #280]	@ (800d5a8 <mem_trim+0x148>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	42ab      	cmp	r3, r5
 800d494:	d806      	bhi.n	800d4a4 <mem_trim+0x44>
 800d496:	4b45      	ldr	r3, [pc, #276]	@ (800d5ac <mem_trim+0x14c>)
 800d498:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800d49c:	4944      	ldr	r1, [pc, #272]	@ (800d5b0 <mem_trim+0x150>)
 800d49e:	4845      	ldr	r0, [pc, #276]	@ (800d5b4 <mem_trim+0x154>)
 800d4a0:	f007 f8fa 	bl	8014698 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a8:	42ab      	cmp	r3, r5
 800d4aa:	d803      	bhi.n	800d4b4 <mem_trim+0x54>
 800d4ac:	4a3e      	ldr	r2, [pc, #248]	@ (800d5a8 <mem_trim+0x148>)
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	42aa      	cmp	r2, r5
 800d4b2:	d806      	bhi.n	800d4c2 <mem_trim+0x62>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4b4:	f005 fe53 	bl	801315e <sys_arch_protect>
 800d4b8:	f005 fe56 	bl	8013168 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800d4bc:	4628      	mov	r0, r5
 800d4be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d4c2:	f1a5 0608 	sub.w	r6, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d4c6:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800d4ca:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d4cc:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800d4ce:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d4d0:	1bbf      	subs	r7, r7, r6
 800d4d2:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d4d4:	42a7      	cmp	r7, r4
 800d4d6:	d335      	bcc.n	800d544 <mem_trim+0xe4>
  if (newsize == size) {
 800d4d8:	d0f0      	beq.n	800d4bc <mem_trim+0x5c>
  LWIP_MEM_FREE_PROTECT();
 800d4da:	4837      	ldr	r0, [pc, #220]	@ (800d5b8 <mem_trim+0x158>)
 800d4dc:	f005 fe5e 	bl	801319c <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800d4e0:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800d4e4:	f8d8 b000 	ldr.w	fp, [r8]
 800d4e8:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 800d4ec:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800d4f0:	bb83      	cbnz	r3, 800d554 <mem_trim+0xf4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d4f2:	f5b9 4f80 	cmp.w	r9, #16384	@ 0x4000
 800d4f6:	d106      	bne.n	800d506 <mem_trim+0xa6>
 800d4f8:	4b2c      	ldr	r3, [pc, #176]	@ (800d5ac <mem_trim+0x14c>)
 800d4fa:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800d4fe:	492f      	ldr	r1, [pc, #188]	@ (800d5bc <mem_trim+0x15c>)
 800d500:	482c      	ldr	r0, [pc, #176]	@ (800d5b4 <mem_trim+0x154>)
 800d502:	f007 f8c9 	bl	8014698 <iprintf>
    if (lfree == mem2) {
 800d506:	482e      	ldr	r0, [pc, #184]	@ (800d5c0 <mem_trim+0x160>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d508:	f106 0308 	add.w	r3, r6, #8
  return (struct mem *)(void *)&ram[ptr];
 800d50c:	f8d8 2000 	ldr.w	r2, [r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d510:	4423      	add	r3, r4
    if (lfree == mem2) {
 800d512:	6804      	ldr	r4, [r0, #0]
    next = mem2->next;
 800d514:	f83b 7009 	ldrh.w	r7, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d518:	b299      	uxth	r1, r3
    if (lfree == mem2) {
 800d51a:	4554      	cmp	r4, sl
  return (struct mem *)(void *)&ram[ptr];
 800d51c:	fa12 f383 	uxtah	r3, r2, r3
      lfree = ptr_to_mem(ptr2);
 800d520:	bf08      	it	eq
 800d522:	6003      	streq	r3, [r0, #0]
    mem2->used = 0;
 800d524:	2000      	movs	r0, #0
 800d526:	7118      	strb	r0, [r3, #4]
    mem2->next = next;
 800d528:	5257      	strh	r7, [r2, r1]
    mem2->prev = ptr;
 800d52a:	805e      	strh	r6, [r3, #2]
    mem->next = ptr2;
 800d52c:	f825 1c08 	strh.w	r1, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d530:	5a53      	ldrh	r3, [r2, r1]
 800d532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d536:	d001      	beq.n	800d53c <mem_trim+0xdc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d538:	441a      	add	r2, r3
 800d53a:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800d53c:	481e      	ldr	r0, [pc, #120]	@ (800d5b8 <mem_trim+0x158>)
 800d53e:	f005 fe59 	bl	80131f4 <sys_mutex_unlock>
  return rmem;
 800d542:	e7bb      	b.n	800d4bc <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d544:	4b19      	ldr	r3, [pc, #100]	@ (800d5ac <mem_trim+0x14c>)
 800d546:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800d54a:	491e      	ldr	r1, [pc, #120]	@ (800d5c4 <mem_trim+0x164>)
 800d54c:	4819      	ldr	r0, [pc, #100]	@ (800d5b4 <mem_trim+0x154>)
 800d54e:	f007 f8a3 	bl	8014698 <iprintf>
  if (newsize > size) {
 800d552:	e791      	b.n	800d478 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d554:	f104 0314 	add.w	r3, r4, #20
 800d558:	b29b      	uxth	r3, r3
 800d55a:	42bb      	cmp	r3, r7
 800d55c:	d8ee      	bhi.n	800d53c <mem_trim+0xdc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d55e:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d562:	f5b9 4f80 	cmp.w	r9, #16384	@ 0x4000
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d566:	441c      	add	r4, r3
 800d568:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d56a:	d106      	bne.n	800d57a <mem_trim+0x11a>
 800d56c:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <mem_trim+0x14c>)
 800d56e:	f240 3209 	movw	r2, #777	@ 0x309
 800d572:	4912      	ldr	r1, [pc, #72]	@ (800d5bc <mem_trim+0x15c>)
 800d574:	480f      	ldr	r0, [pc, #60]	@ (800d5b4 <mem_trim+0x154>)
 800d576:	f007 f88f 	bl	8014698 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800d57a:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 800d57e:	4910      	ldr	r1, [pc, #64]	@ (800d5c0 <mem_trim+0x160>)
  return (struct mem *)(void *)&ram[ptr];
 800d580:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800d582:	6808      	ldr	r0, [r1, #0]
 800d584:	4290      	cmp	r0, r2
      lfree = mem2;
 800d586:	bf88      	it	hi
 800d588:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 800d58a:	2100      	movs	r1, #0
 800d58c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800d58e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800d592:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 800d594:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800d596:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d59a:	5b1a      	ldrh	r2, [r3, r4]
 800d59c:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d5a0:	bf1c      	itt	ne
 800d5a2:	189b      	addne	r3, r3, r2
 800d5a4:	805c      	strhne	r4, [r3, #2]
 800d5a6:	e7c9      	b.n	800d53c <mem_trim+0xdc>
 800d5a8:	2000b548 	.word	0x2000b548
 800d5ac:	080167a3 	.word	0x080167a3
 800d5b0:	080168e3 	.word	0x080168e3
 800d5b4:	08015927 	.word	0x08015927
 800d5b8:	2000b544 	.word	0x2000b544
 800d5bc:	0801691a 	.word	0x0801691a
 800d5c0:	2000b540 	.word	0x2000b540
 800d5c4:	080168fa 	.word	0x080168fa
 800d5c8:	2000b54c 	.word	0x2000b54c

0800d5cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d5d0:	b140      	cbz	r0, 800d5e4 <mem_malloc+0x18>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d5d2:	1cc4      	adds	r4, r0, #3
 800d5d4:	f024 0403 	bic.w	r4, r4, #3
 800d5d8:	b2a4      	uxth	r4, r4
  if (size < MIN_SIZE_ALIGNED) {
 800d5da:	2c0b      	cmp	r4, #11
 800d5dc:	d904      	bls.n	800d5e8 <mem_malloc+0x1c>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d5de:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 800d5e2:	d902      	bls.n	800d5ea <mem_malloc+0x1e>
    return NULL;
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	e06b      	b.n	800d6c0 <mem_malloc+0xf4>
    size = MIN_SIZE_ALIGNED;
 800d5e8:	240c      	movs	r4, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d5ea:	42a0      	cmp	r0, r4
 800d5ec:	d8fa      	bhi.n	800d5e4 <mem_malloc+0x18>
  return (mem_size_t)((u8_t *)mem - ram);
 800d5ee:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 800d710 <mem_malloc+0x144>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d5f2:	f06f 0707 	mvn.w	r7, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d5f6:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800d714 <mem_malloc+0x148>
  sys_mutex_lock(&mem_mutex);
 800d5fa:	483d      	ldr	r0, [pc, #244]	@ (800d6f0 <mem_malloc+0x124>)
 800d5fc:	f005 fdce 	bl	801319c <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800d600:	f8d9 2000 	ldr.w	r2, [r9]
 800d604:	f8d8 6000 	ldr.w	r6, [r8]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d608:	f5c4 4080 	rsb	r0, r4, #16384	@ 0x4000
  return (mem_size_t)((u8_t *)mem - ram);
 800d60c:	1ab6      	subs	r6, r6, r2
 800d60e:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d610:	4286      	cmp	r6, r0
 800d612:	d303      	bcc.n	800d61c <mem_malloc+0x50>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d614:	4836      	ldr	r0, [pc, #216]	@ (800d6f0 <mem_malloc+0x124>)
 800d616:	f005 fded 	bl	80131f4 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d61a:	e7e3      	b.n	800d5e4 <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 800d61c:	1995      	adds	r5, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d61e:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 800d620:	792b      	ldrb	r3, [r5, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d161      	bne.n	800d6ea <mem_malloc+0x11e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d626:	1bbb      	subs	r3, r7, r6
 800d628:	440b      	add	r3, r1
      if ((!mem->used) &&
 800d62a:	42a3      	cmp	r3, r4
 800d62c:	d35d      	bcc.n	800d6ea <mem_malloc+0x11e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d62e:	f104 0214 	add.w	r2, r4, #20
 800d632:	4293      	cmp	r3, r2
 800d634:	d346      	bcc.n	800d6c4 <mem_malloc+0xf8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d636:	f104 0708 	add.w	r7, r4, #8
 800d63a:	4437      	add	r7, r6
 800d63c:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d63e:	f5b7 4f80 	cmp.w	r7, #16384	@ 0x4000
 800d642:	d106      	bne.n	800d652 <mem_malloc+0x86>
 800d644:	4b2b      	ldr	r3, [pc, #172]	@ (800d6f4 <mem_malloc+0x128>)
 800d646:	f240 327a 	movw	r2, #890	@ 0x37a
 800d64a:	492b      	ldr	r1, [pc, #172]	@ (800d6f8 <mem_malloc+0x12c>)
 800d64c:	482b      	ldr	r0, [pc, #172]	@ (800d6fc <mem_malloc+0x130>)
 800d64e:	f007 f823 	bl	8014698 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800d652:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 800d656:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800d658:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 800d65a:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800d65c:	8829      	ldrh	r1, [r5, #0]
 800d65e:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 800d660:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 800d662:	2201      	movs	r2, #1
          mem->next = ptr2;
 800d664:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 800d666:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d668:	5bda      	ldrh	r2, [r3, r7]
 800d66a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800d66e:	d001      	beq.n	800d674 <mem_malloc+0xa8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d670:	4413      	add	r3, r2
 800d672:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 800d674:	f8d8 3000 	ldr.w	r3, [r8]
 800d678:	4e21      	ldr	r6, [pc, #132]	@ (800d700 <mem_malloc+0x134>)
 800d67a:	42ab      	cmp	r3, r5
 800d67c:	d025      	beq.n	800d6ca <mem_malloc+0xfe>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d67e:	3408      	adds	r4, #8
        sys_mutex_unlock(&mem_mutex);
 800d680:	481b      	ldr	r0, [pc, #108]	@ (800d6f0 <mem_malloc+0x124>)
 800d682:	f005 fdb7 	bl	80131f4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d686:	6833      	ldr	r3, [r6, #0]
 800d688:	442c      	add	r4, r5
 800d68a:	42a3      	cmp	r3, r4
 800d68c:	d206      	bcs.n	800d69c <mem_malloc+0xd0>
 800d68e:	4b19      	ldr	r3, [pc, #100]	@ (800d6f4 <mem_malloc+0x128>)
 800d690:	f44f 726b 	mov.w	r2, #940	@ 0x3ac
 800d694:	491b      	ldr	r1, [pc, #108]	@ (800d704 <mem_malloc+0x138>)
 800d696:	4819      	ldr	r0, [pc, #100]	@ (800d6fc <mem_malloc+0x130>)
 800d698:	f006 fffe 	bl	8014698 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d69c:	07ab      	lsls	r3, r5, #30
 800d69e:	d00d      	beq.n	800d6bc <mem_malloc+0xf0>
 800d6a0:	4b14      	ldr	r3, [pc, #80]	@ (800d6f4 <mem_malloc+0x128>)
 800d6a2:	f240 32ae 	movw	r2, #942	@ 0x3ae
 800d6a6:	4918      	ldr	r1, [pc, #96]	@ (800d708 <mem_malloc+0x13c>)
 800d6a8:	4814      	ldr	r0, [pc, #80]	@ (800d6fc <mem_malloc+0x130>)
 800d6aa:	f006 fff5 	bl	8014698 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d6ae:	4b11      	ldr	r3, [pc, #68]	@ (800d6f4 <mem_malloc+0x128>)
 800d6b0:	f44f 726c 	mov.w	r2, #944	@ 0x3b0
 800d6b4:	4915      	ldr	r1, [pc, #84]	@ (800d70c <mem_malloc+0x140>)
 800d6b6:	4811      	ldr	r0, [pc, #68]	@ (800d6fc <mem_malloc+0x130>)
 800d6b8:	f006 ffee 	bl	8014698 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d6bc:	f105 0008 	add.w	r0, r5, #8
}
 800d6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	712b      	strb	r3, [r5, #4]
 800d6c8:	e7d4      	b.n	800d674 <mem_malloc+0xa8>
          while (cur->used && cur != ram_end) {
 800d6ca:	6832      	ldr	r2, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 800d6cc:	f8d9 1000 	ldr.w	r1, [r9]
          while (cur->used && cur != ram_end) {
 800d6d0:	7918      	ldrb	r0, [r3, #4]
 800d6d2:	b138      	cbz	r0, 800d6e4 <mem_malloc+0x118>
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d102      	bne.n	800d6de <mem_malloc+0x112>
          lfree = cur;
 800d6d8:	f8c8 2000 	str.w	r2, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d6dc:	e7cf      	b.n	800d67e <mem_malloc+0xb2>
  return (struct mem *)(void *)&ram[ptr];
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	440b      	add	r3, r1
 800d6e2:	e7f5      	b.n	800d6d0 <mem_malloc+0x104>
          lfree = cur;
 800d6e4:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d6e8:	e7c9      	b.n	800d67e <mem_malloc+0xb2>
    size = MIN_SIZE_ALIGNED;
 800d6ea:	460e      	mov	r6, r1
 800d6ec:	e790      	b.n	800d610 <mem_malloc+0x44>
 800d6ee:	bf00      	nop
 800d6f0:	2000b544 	.word	0x2000b544
 800d6f4:	080167a3 	.word	0x080167a3
 800d6f8:	0801691a 	.word	0x0801691a
 800d6fc:	08015927 	.word	0x08015927
 800d700:	2000b548 	.word	0x2000b548
 800d704:	0801692b 	.word	0x0801692b
 800d708:	0801695b 	.word	0x0801695b
 800d70c:	0801698a 	.word	0x0801698a
 800d710:	2000b54c 	.word	0x2000b54c
 800d714:	2000b540 	.word	0x2000b540

0800d718 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d71c:	f005 fd1f 	bl	801315e <sys_arch_protect>
 800d720:	4605      	mov	r5, r0

  memp = *desc->tab;
 800d722:	68a3      	ldr	r3, [r4, #8]
 800d724:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d726:	b15c      	cbz	r4, 800d740 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d728:	6822      	ldr	r2, [r4, #0]
 800d72a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d72c:	07a3      	lsls	r3, r4, #30
 800d72e:	d006      	beq.n	800d73e <do_memp_malloc_pool+0x26>
 800d730:	4b05      	ldr	r3, [pc, #20]	@ (800d748 <do_memp_malloc_pool+0x30>)
 800d732:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d736:	4905      	ldr	r1, [pc, #20]	@ (800d74c <do_memp_malloc_pool+0x34>)
 800d738:	4805      	ldr	r0, [pc, #20]	@ (800d750 <do_memp_malloc_pool+0x38>)
 800d73a:	f006 ffad 	bl	8014698 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d73e:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d740:	f005 fd12 	bl	8013168 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800d744:	4620      	mov	r0, r4
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	080169ad 	.word	0x080169ad
 800d74c:	080169cb 	.word	0x080169cb
 800d750:	08015927 	.word	0x08015927

0800d754 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d754:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d756:	078b      	lsls	r3, r1, #30
{
 800d758:	4605      	mov	r5, r0
 800d75a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800d75c:	d006      	beq.n	800d76c <do_memp_free_pool+0x18>
 800d75e:	4b08      	ldr	r3, [pc, #32]	@ (800d780 <do_memp_free_pool+0x2c>)
 800d760:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d764:	4907      	ldr	r1, [pc, #28]	@ (800d784 <do_memp_free_pool+0x30>)
 800d766:	4808      	ldr	r0, [pc, #32]	@ (800d788 <do_memp_free_pool+0x34>)
 800d768:	f006 ff96 	bl	8014698 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800d76c:	f005 fcf7 	bl	801315e <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d770:	68ab      	ldr	r3, [r5, #8]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800d776:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800d77c:	f005 bcf4 	b.w	8013168 <sys_arch_unprotect>
 800d780:	080169ad 	.word	0x080169ad
 800d784:	080169ee 	.word	0x080169ee
 800d788:	08015927 	.word	0x08015927

0800d78c <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d78c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800d78e:	2200      	movs	r2, #0
 800d790:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d792:	3303      	adds	r3, #3
{
 800d794:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d796:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800d79a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800d79c:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800d79e:	4294      	cmp	r4, r2
 800d7a0:	dc00      	bgt.n	800d7a4 <memp_init_pool+0x18>
}
 800d7a2:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800d7a4:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800d7a6:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800d7a8:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d7aa:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800d7ac:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d7ae:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 800d7b0:	e7f5      	b.n	800d79e <memp_init_pool+0x12>
	...

0800d7b4 <memp_init>:
{
 800d7b4:	b538      	push	{r3, r4, r5, lr}
 800d7b6:	4d05      	ldr	r5, [pc, #20]	@ (800d7cc <memp_init+0x18>)
 800d7b8:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7ba:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 800d7bc:	f855 0b04 	ldr.w	r0, [r5], #4
 800d7c0:	f7ff ffe4 	bl	800d78c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7c4:	b2a4      	uxth	r4, r4
 800d7c6:	2c00      	cmp	r4, #0
 800d7c8:	d1f7      	bne.n	800d7ba <memp_init+0x6>
}
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	0808ec28 	.word	0x0808ec28

0800d7d0 <memp_malloc_pool>:
{
 800d7d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	b118      	cbz	r0, 800d7de <memp_malloc_pool+0xe>
}
 800d7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800d7da:	f7ff bf9d 	b.w	800d718 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d7de:	4b04      	ldr	r3, [pc, #16]	@ (800d7f0 <memp_malloc_pool+0x20>)
 800d7e0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d7e4:	4903      	ldr	r1, [pc, #12]	@ (800d7f4 <memp_malloc_pool+0x24>)
 800d7e6:	4804      	ldr	r0, [pc, #16]	@ (800d7f8 <memp_malloc_pool+0x28>)
 800d7e8:	f006 ff56 	bl	8014698 <iprintf>
}
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	bd10      	pop	{r4, pc}
 800d7f0:	080169ad 	.word	0x080169ad
 800d7f4:	08016a0e 	.word	0x08016a0e
 800d7f8:	08015927 	.word	0x08015927

0800d7fc <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d7fc:	280c      	cmp	r0, #12
 800d7fe:	d804      	bhi.n	800d80a <memp_malloc+0xe>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d800:	4b03      	ldr	r3, [pc, #12]	@ (800d810 <memp_malloc+0x14>)
 800d802:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d806:	f7ff bf87 	b.w	800d718 <do_memp_malloc_pool>
}
 800d80a:	2000      	movs	r0, #0
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	0808ec28 	.word	0x0808ec28

0800d814 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d814:	b108      	cbz	r0, 800d81a <memp_free_pool+0x6>
  if ((desc == NULL) || (mem == NULL)) {
 800d816:	b939      	cbnz	r1, 800d828 <memp_free_pool+0x14>
 800d818:	4770      	bx	lr
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d81a:	4b04      	ldr	r3, [pc, #16]	@ (800d82c <memp_free_pool+0x18>)
 800d81c:	f240 1295 	movw	r2, #405	@ 0x195
 800d820:	4903      	ldr	r1, [pc, #12]	@ (800d830 <memp_free_pool+0x1c>)
 800d822:	4804      	ldr	r0, [pc, #16]	@ (800d834 <memp_free_pool+0x20>)
 800d824:	f006 bf38 	b.w	8014698 <iprintf>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d828:	f7ff bf94 	b.w	800d754 <do_memp_free_pool>
 800d82c:	080169ad 	.word	0x080169ad
 800d830:	08016a0e 	.word	0x08016a0e
 800d834:	08015927 	.word	0x08015927

0800d838 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d838:	280c      	cmp	r0, #12
 800d83a:	d805      	bhi.n	800d848 <memp_free+0x10>

  if (mem == NULL) {
 800d83c:	b121      	cbz	r1, 800d848 <memp_free+0x10>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d83e:	4b03      	ldr	r3, [pc, #12]	@ (800d84c <memp_free+0x14>)
 800d840:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d844:	f7ff bf86 	b.w	800d754 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	0808ec28 	.word	0x0808ec28

0800d850 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800d850:	f06f 000b 	mvn.w	r0, #11
 800d854:	4770      	bx	lr
	...

0800d858 <netif_issue_reports>:
{
 800d858:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d85a:	4604      	mov	r4, r0
 800d85c:	b930      	cbnz	r0, 800d86c <netif_issue_reports+0x14>
 800d85e:	4b0c      	ldr	r3, [pc, #48]	@ (800d890 <netif_issue_reports+0x38>)
 800d860:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800d864:	490b      	ldr	r1, [pc, #44]	@ (800d894 <netif_issue_reports+0x3c>)
 800d866:	480c      	ldr	r0, [pc, #48]	@ (800d898 <netif_issue_reports+0x40>)
 800d868:	f006 ff16 	bl	8014698 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d86c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d870:	f003 0205 	and.w	r2, r3, #5
 800d874:	2a05      	cmp	r2, #5
 800d876:	d109      	bne.n	800d88c <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d878:	6862      	ldr	r2, [r4, #4]
 800d87a:	b13a      	cbz	r2, 800d88c <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d87c:	071b      	lsls	r3, r3, #28
 800d87e:	d505      	bpl.n	800d88c <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 800d880:	1d21      	adds	r1, r4, #4
 800d882:	4620      	mov	r0, r4
}
 800d884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800d888:	f004 bb60 	b.w	8011f4c <etharp_request>
}
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	bf00      	nop
 800d890:	08016a20 	.word	0x08016a20
 800d894:	08016a3f 	.word	0x08016a3f
 800d898:	08015927 	.word	0x08015927

0800d89c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800d89c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d89e:	6843      	ldr	r3, [r0, #4]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800d8a0:	4615      	mov	r5, r2
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d8a2:	680a      	ldr	r2, [r1, #0]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	460e      	mov	r6, r1
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d00f      	beq.n	800d8cc <netif_do_set_ipaddr.isra.0+0x30>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d8ac:	602b      	str	r3, [r5, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d8ae:	a901      	add	r1, sp, #4
 800d8b0:	4628      	mov	r0, r5
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d8b2:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d8b4:	f001 fc9e 	bl	800f1f4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d8b8:	a901      	add	r1, sp, #4
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f004 f966 	bl	8011b8c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d8c0:	6833      	ldr	r3, [r6, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d8c2:	2101      	movs	r1, #1
 800d8c4:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d8c6:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d8c8:	f7ff ffc6 	bl	800d858 <netif_issue_reports>
}
 800d8cc:	b002      	add	sp, #8
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}

0800d8d0 <netif_init>:
}
 800d8d0:	4770      	bx	lr
	...

0800d8d4 <netif_set_addr>:
{
 800d8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800d8d6:	4e14      	ldr	r6, [pc, #80]	@ (800d928 <netif_set_addr+0x54>)
{
 800d8d8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800d8da:	2900      	cmp	r1, #0
 800d8dc:	bf14      	ite	ne
 800d8de:	460d      	movne	r5, r1
 800d8e0:	4635      	moveq	r5, r6
    netmask = IP4_ADDR_ANY4;
 800d8e2:	2a00      	cmp	r2, #0
 800d8e4:	bf14      	ite	ne
 800d8e6:	4617      	movne	r7, r2
 800d8e8:	4637      	moveq	r7, r6
    gw = IP4_ADDR_ANY4;
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bf18      	it	ne
 800d8ee:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 800d8f0:	682b      	ldr	r3, [r5, #0]
 800d8f2:	b9b3      	cbnz	r3, 800d922 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d8f4:	aa01      	add	r2, sp, #4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7ff ffd0 	bl	800d89c <netif_do_set_ipaddr.isra.0>
 800d8fc:	2301      	movs	r3, #1
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	68a1      	ldr	r1, [r4, #8]
 800d902:	428a      	cmp	r2, r1
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 800d904:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d906:	bf18      	it	ne
 800d908:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 800d90a:	6832      	ldr	r2, [r6, #0]
 800d90c:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d90e:	bf18      	it	ne
 800d910:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800d912:	b923      	cbnz	r3, 800d91e <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d914:	aa01      	add	r2, sp, #4
 800d916:	4629      	mov	r1, r5
 800d918:	4620      	mov	r0, r4
 800d91a:	f7ff ffbf 	bl	800d89c <netif_do_set_ipaddr.isra.0>
}
 800d91e:	b003      	add	sp, #12
 800d920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800d922:	2300      	movs	r3, #0
 800d924:	e7eb      	b.n	800d8fe <netif_set_addr+0x2a>
 800d926:	bf00      	nop
 800d928:	0808ed34 	.word	0x0808ed34

0800d92c <netif_add>:
{
 800d92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d932:	4604      	mov	r4, r0
 800d934:	b918      	cbnz	r0, 800d93e <netif_add+0x12>
 800d936:	2400      	movs	r4, #0
}
 800d938:	4620      	mov	r0, r4
 800d93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d93e:	2e00      	cmp	r6, #0
 800d940:	d0f9      	beq.n	800d936 <netif_add+0xa>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d942:	2500      	movs	r5, #0
  netif->num = netif_num;
 800d944:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 800da14 <netif_add+0xe8>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d948:	4f2f      	ldr	r7, [pc, #188]	@ (800da08 <netif_add+0xdc>)
  ip_addr_set_zero_ip4(&netif->gw);
 800d94a:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 800d94c:	8485      	strh	r5, [r0, #36]	@ 0x24
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d94e:	2b00      	cmp	r3, #0
 800d950:	bf08      	it	eq
 800d952:	463b      	moveq	r3, r7
  netif->flags = 0;
 800d954:	f880 502d 	strb.w	r5, [r0, #45]	@ 0x2d
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d958:	2a00      	cmp	r2, #0
 800d95a:	bf08      	it	eq
 800d95c:	463a      	moveq	r2, r7
  netif->link_callback = NULL;
 800d95e:	61c5      	str	r5, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d960:	2900      	cmp	r1, #0
 800d962:	bf08      	it	eq
 800d964:	4639      	moveq	r1, r7
  netif->output = netif_null_output_ip4;
 800d966:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 800da18 <netif_add+0xec>
  ip_addr_set_zero_ip4(&netif->netmask);
 800d96a:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif->state = state;
 800d96e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  netif->output = netif_null_output_ip4;
 800d970:	f8c0 c014 	str.w	ip, [r0, #20]
  netif->state = state;
 800d974:	6205      	str	r5, [r0, #32]
  netif->num = netif_num;
 800d976:	f898 5000 	ldrb.w	r5, [r8]
 800d97a:	f880 5030 	strb.w	r5, [r0, #48]	@ 0x30
  netif->input = input;
 800d97e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d980:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d982:	f7ff ffa7 	bl	800d8d4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800d986:	4620      	mov	r0, r4
 800d988:	47b0      	blx	r6
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d1d3      	bne.n	800d936 <netif_add+0xa>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d98e:	4e1f      	ldr	r6, [pc, #124]	@ (800da0c <netif_add+0xe0>)
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d990:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800da1c <netif_add+0xf0>
      if (netif->num == 255) {
 800d994:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
      num_netifs = 0;
 800d998:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d99a:	6835      	ldr	r5, [r6, #0]
      if (netif->num == 255) {
 800d99c:	2bff      	cmp	r3, #255	@ 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d99e:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800da20 <netif_add+0xf4>
 800d9a2:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800da24 <netif_add+0xf8>
        netif->num = 0;
 800d9a6:	bf04      	itt	eq
 800d9a8:	2300      	moveq	r3, #0
 800d9aa:	f884 3030 	strbeq.w	r3, [r4, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d9ae:	b95d      	cbnz	r5, 800d9c8 <netif_add+0x9c>
  if (netif->num == 254) {
 800d9b0:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800d9b4:	2bfe      	cmp	r3, #254	@ 0xfe
    netif_num = (u8_t)(netif->num + 1);
 800d9b6:	bf1c      	itt	ne
 800d9b8:	3301      	addne	r3, #1
 800d9ba:	b2dd      	uxtbne	r5, r3
  netif->next = netif_list;
 800d9bc:	6833      	ldr	r3, [r6, #0]
 800d9be:	f888 5000 	strb.w	r5, [r8]
 800d9c2:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800d9c4:	6034      	str	r4, [r6, #0]
  return netif;
 800d9c6:	e7b7      	b.n	800d938 <netif_add+0xc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d9c8:	42a5      	cmp	r5, r4
 800d9ca:	d106      	bne.n	800d9da <netif_add+0xae>
 800d9cc:	464b      	mov	r3, r9
 800d9ce:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d9d2:	4659      	mov	r1, fp
 800d9d4:	4650      	mov	r0, sl
 800d9d6:	f006 fe5f 	bl	8014698 <iprintf>
        num_netifs++;
 800d9da:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d9dc:	2fff      	cmp	r7, #255	@ 0xff
 800d9de:	dd06      	ble.n	800d9ee <netif_add+0xc2>
 800d9e0:	464b      	mov	r3, r9
 800d9e2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d9e6:	490a      	ldr	r1, [pc, #40]	@ (800da10 <netif_add+0xe4>)
 800d9e8:	4650      	mov	r0, sl
 800d9ea:	f006 fe55 	bl	8014698 <iprintf>
        if (netif2->num == netif->num) {
 800d9ee:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 800d9f2:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d103      	bne.n	800da02 <netif_add+0xd6>
          netif->num++;
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    } while (netif2 != NULL);
 800da00:	e7c8      	b.n	800d994 <netif_add+0x68>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da02:	682d      	ldr	r5, [r5, #0]
 800da04:	e7d3      	b.n	800d9ae <netif_add+0x82>
 800da06:	bf00      	nop
 800da08:	0808ed34 	.word	0x0808ed34
 800da0c:	2000f320 	.word	0x2000f320
 800da10:	08016a76 	.word	0x08016a76
 800da14:	2000f31b 	.word	0x2000f31b
 800da18:	0800d851 	.word	0x0800d851
 800da1c:	08016a20 	.word	0x08016a20
 800da20:	08016a62 	.word	0x08016a62
 800da24:	08015927 	.word	0x08015927

0800da28 <netif_set_default>:
  netif_default = netif;
 800da28:	4b01      	ldr	r3, [pc, #4]	@ (800da30 <netif_set_default+0x8>)
 800da2a:	6018      	str	r0, [r3, #0]
}
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	2000f31c 	.word	0x2000f31c

0800da34 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800da34:	b150      	cbz	r0, 800da4c <netif_set_up+0x18>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800da36:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800da3a:	07d1      	lsls	r1, r2, #31
 800da3c:	d406      	bmi.n	800da4c <netif_set_up+0x18>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800da3e:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da42:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800da44:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da48:	f7ff bf06 	b.w	800d858 <netif_issue_reports>
}
 800da4c:	4770      	bx	lr

0800da4e <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800da4e:	b158      	cbz	r0, 800da68 <netif_set_down+0x1a>
  if (netif->flags & NETIF_FLAG_UP) {
 800da50:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800da54:	07d1      	lsls	r1, r2, #31
 800da56:	d507      	bpl.n	800da68 <netif_set_down+0x1a>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800da58:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800da5c:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800da5e:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800da62:	d501      	bpl.n	800da68 <netif_set_down+0x1a>
      etharp_cleanup_netif(netif);
 800da64:	f004 b9b8 	b.w	8011dd8 <etharp_cleanup_netif>
}
 800da68:	4770      	bx	lr

0800da6a <netif_set_link_up>:
{
 800da6a:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800da6c:	4604      	mov	r4, r0
 800da6e:	b180      	cbz	r0, 800da92 <netif_set_link_up+0x28>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800da70:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800da74:	075a      	lsls	r2, r3, #29
 800da76:	d40c      	bmi.n	800da92 <netif_set_link_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800da78:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da7c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800da7e:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da82:	f7ff fee9 	bl	800d858 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800da86:	69e3      	ldr	r3, [r4, #28]
 800da88:	b11b      	cbz	r3, 800da92 <netif_set_link_up+0x28>
 800da8a:	4620      	mov	r0, r4
}
 800da8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800da90:	4718      	bx	r3
}
 800da92:	bd10      	pop	{r4, pc}

0800da94 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800da94:	b150      	cbz	r0, 800daac <netif_set_link_down+0x18>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800da96:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800da9a:	0751      	lsls	r1, r2, #29
 800da9c:	d506      	bpl.n	800daac <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800da9e:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 800daa2:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800daa4:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800daa8:	b103      	cbz	r3, 800daac <netif_set_link_down+0x18>
 800daaa:	4718      	bx	r3
}
 800daac:	4770      	bx	lr

0800daae <netif_set_link_callback>:
  if (netif) {
 800daae:	b100      	cbz	r0, 800dab2 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800dab0:	61c1      	str	r1, [r0, #28]
}
 800dab2:	4770      	bx	lr

0800dab4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dab4:	4603      	mov	r3, r0
 800dab6:	b158      	cbz	r0, 800dad0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800dab8:	4a06      	ldr	r2, [pc, #24]	@ (800dad4 <netif_get_by_index+0x20>)
 800daba:	6810      	ldr	r0, [r2, #0]
 800dabc:	b900      	cbnz	r0, 800dac0 <netif_get_by_index+0xc>
 800dabe:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800dac0:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 800dac4:	3201      	adds	r2, #1
 800dac6:	b2d2      	uxtb	r2, r2
 800dac8:	429a      	cmp	r2, r3
 800daca:	d001      	beq.n	800dad0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800dacc:	6800      	ldr	r0, [r0, #0]
 800dace:	e7f5      	b.n	800dabc <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	2000f320 	.word	0x2000f320

0800dad8 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800dad8:	b110      	cbz	r0, 800dae0 <pbuf_skip_const+0x8>
 800dada:	8943      	ldrh	r3, [r0, #10]
 800dadc:	428b      	cmp	r3, r1
 800dade:	d902      	bls.n	800dae6 <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
 800dae0:	b102      	cbz	r2, 800dae4 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 800dae2:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 800dae4:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
 800dae6:	1ac9      	subs	r1, r1, r3
    q = q->next;
 800dae8:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800daea:	b289      	uxth	r1, r1
    q = q->next;
 800daec:	e7f4      	b.n	800dad8 <pbuf_skip_const>
	...

0800daf0 <pbuf_add_header_impl>:
{
 800daf0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800daf2:	b120      	cbz	r0, 800dafe <pbuf_add_header_impl+0xe>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800daf4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800daf8:	d309      	bcc.n	800db0e <pbuf_add_header_impl+0x1e>
    return 1;
 800dafa:	2001      	movs	r0, #1
}
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800dafe:	4b13      	ldr	r3, [pc, #76]	@ (800db4c <pbuf_add_header_impl+0x5c>)
 800db00:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800db04:	4912      	ldr	r1, [pc, #72]	@ (800db50 <pbuf_add_header_impl+0x60>)
 800db06:	4813      	ldr	r0, [pc, #76]	@ (800db54 <pbuf_add_header_impl+0x64>)
 800db08:	f006 fdc6 	bl	8014698 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800db0c:	e7f5      	b.n	800dafa <pbuf_add_header_impl+0xa>
  if (header_size_increment == 0) {
 800db0e:	b1a9      	cbz	r1, 800db3c <pbuf_add_header_impl+0x4c>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800db10:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800db12:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800db14:	fa13 f381 	uxtah	r3, r3, r1
 800db18:	b29b      	uxth	r3, r3
 800db1a:	42a3      	cmp	r3, r4
 800db1c:	d3ed      	bcc.n	800dafa <pbuf_add_header_impl+0xa>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800db1e:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800db22:	2d00      	cmp	r5, #0
 800db24:	da0c      	bge.n	800db40 <pbuf_add_header_impl+0x50>
    payload = (u8_t *)p->payload - header_size_increment;
 800db26:	6842      	ldr	r2, [r0, #4]
 800db28:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800db2a:	f100 0210 	add.w	r2, r0, #16
 800db2e:	4291      	cmp	r1, r2
 800db30:	d3e3      	bcc.n	800dafa <pbuf_add_header_impl+0xa>
  p->len = (u16_t)(p->len + increment_magnitude);
 800db32:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800db34:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800db36:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800db38:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800db3a:	8144      	strh	r4, [r0, #10]
    return 0;
 800db3c:	2000      	movs	r0, #0
 800db3e:	e7dd      	b.n	800dafc <pbuf_add_header_impl+0xc>
    if (force) {
 800db40:	2a00      	cmp	r2, #0
 800db42:	d0da      	beq.n	800dafa <pbuf_add_header_impl+0xa>
      payload = (u8_t *)p->payload - header_size_increment;
 800db44:	6842      	ldr	r2, [r0, #4]
 800db46:	1a51      	subs	r1, r2, r1
 800db48:	e7f3      	b.n	800db32 <pbuf_add_header_impl+0x42>
 800db4a:	bf00      	nop
 800db4c:	08016aa4 	.word	0x08016aa4
 800db50:	08016b46 	.word	0x08016b46
 800db54:	08015927 	.word	0x08015927

0800db58 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800db58:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800db5c:	2b01      	cmp	r3, #1
{
 800db5e:	b570      	push	{r4, r5, r6, lr}
 800db60:	4606      	mov	r6, r0
 800db62:	460d      	mov	r5, r1
 800db64:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800db66:	d006      	beq.n	800db76 <pbuf_alloc_reference+0x1e>
 800db68:	4b0a      	ldr	r3, [pc, #40]	@ (800db94 <pbuf_alloc_reference+0x3c>)
 800db6a:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800db6e:	490a      	ldr	r1, [pc, #40]	@ (800db98 <pbuf_alloc_reference+0x40>)
 800db70:	480a      	ldr	r0, [pc, #40]	@ (800db9c <pbuf_alloc_reference+0x44>)
 800db72:	f006 fd91 	bl	8014698 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800db76:	200b      	movs	r0, #11
 800db78:	f7ff fe40 	bl	800d7fc <memp_malloc>
  if (p == NULL) {
 800db7c:	b140      	cbz	r0, 800db90 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800db7e:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800db80:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800db82:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 800db84:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800db86:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800db88:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 800db8c:	2301      	movs	r3, #1
 800db8e:	81c3      	strh	r3, [r0, #14]
}
 800db90:	bd70      	pop	{r4, r5, r6, pc}
 800db92:	bf00      	nop
 800db94:	08016aa4 	.word	0x08016aa4
 800db98:	08016ac2 	.word	0x08016ac2
 800db9c:	08015927 	.word	0x08015927

0800dba0 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dba0:	3003      	adds	r0, #3
{
 800dba2:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dba4:	f020 0403 	bic.w	r4, r0, #3
 800dba8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
{
 800dbac:	9d04      	ldr	r5, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dbae:	190e      	adds	r6, r1, r4
 800dbb0:	4286      	cmp	r6, r0
 800dbb2:	f04f 0000 	mov.w	r0, #0
 800dbb6:	d80b      	bhi.n	800dbd0 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800dbb8:	b105      	cbz	r5, 800dbbc <pbuf_alloced_custom+0x1c>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dbba:	4425      	add	r5, r4
  p->type_internal = (u8_t)type;
 800dbbc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dbbe:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 800dbc0:	8119      	strh	r1, [r3, #8]
  p->flags = flags;
 800dbc2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dbc4:	2201      	movs	r2, #1
  p->len = len;
 800dbc6:	8159      	strh	r1, [r3, #10]
  p->ref = 1;
 800dbc8:	81da      	strh	r2, [r3, #14]
  p->payload = payload;
 800dbca:	e9c3 0500 	strd	r0, r5, [r3]
  return &p->pbuf;
 800dbce:	4618      	mov	r0, r3
}
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}

0800dbd2 <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f7ff bf8c 	b.w	800daf0 <pbuf_add_header_impl>

0800dbd8 <pbuf_remove_header>:
{
 800dbd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800dbda:	b120      	cbz	r0, 800dbe6 <pbuf_remove_header+0xe>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dbdc:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800dbe0:	d309      	bcc.n	800dbf6 <pbuf_remove_header+0x1e>
    return 1;
 800dbe2:	2001      	movs	r0, #1
}
 800dbe4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800dbe6:	4b0b      	ldr	r3, [pc, #44]	@ (800dc14 <pbuf_remove_header+0x3c>)
 800dbe8:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800dbec:	490a      	ldr	r1, [pc, #40]	@ (800dc18 <pbuf_remove_header+0x40>)
 800dbee:	480b      	ldr	r0, [pc, #44]	@ (800dc1c <pbuf_remove_header+0x44>)
 800dbf0:	f006 fd52 	bl	8014698 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dbf4:	e7f5      	b.n	800dbe2 <pbuf_remove_header+0xa>
  if (header_size_decrement == 0) {
 800dbf6:	b159      	cbz	r1, 800dc10 <pbuf_remove_header+0x38>
  increment_magnitude = (u16_t)header_size_decrement;
 800dbf8:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dbfa:	8943      	ldrh	r3, [r0, #10]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d3f0      	bcc.n	800dbe2 <pbuf_remove_header+0xa>
  p->len = (u16_t)(p->len - increment_magnitude);
 800dc00:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dc02:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800dc04:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dc06:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dc08:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dc0a:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dc0c:	1a9b      	subs	r3, r3, r2
 800dc0e:	8103      	strh	r3, [r0, #8]
    return 0;
 800dc10:	2000      	movs	r0, #0
 800dc12:	e7e7      	b.n	800dbe4 <pbuf_remove_header+0xc>
 800dc14:	08016aa4 	.word	0x08016aa4
 800dc18:	08016b46 	.word	0x08016b46
 800dc1c:	08015927 	.word	0x08015927

0800dc20 <pbuf_header_force>:
  if (header_size_increment < 0) {
 800dc20:	1e0b      	subs	r3, r1, #0
 800dc22:	da02      	bge.n	800dc2a <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dc24:	4259      	negs	r1, r3
 800dc26:	f7ff bfd7 	b.w	800dbd8 <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f7ff bf60 	b.w	800daf0 <pbuf_add_header_impl>

0800dc30 <pbuf_free>:
{
 800dc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 800dc34:	4604      	mov	r4, r0
 800dc36:	b950      	cbnz	r0, 800dc4e <pbuf_free+0x1e>
    return 0;
 800dc38:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800dc3a:	4b2c      	ldr	r3, [pc, #176]	@ (800dcec <pbuf_free+0xbc>)
 800dc3c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800dc40:	492b      	ldr	r1, [pc, #172]	@ (800dcf0 <pbuf_free+0xc0>)
 800dc42:	482c      	ldr	r0, [pc, #176]	@ (800dcf4 <pbuf_free+0xc4>)
 800dc44:	f006 fd28 	bl	8014698 <iprintf>
}
 800dc48:	4628      	mov	r0, r5
 800dc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800dc4e:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dc50:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800dcec <pbuf_free+0xbc>
 800dc54:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 800dd00 <pbuf_free+0xd0>
 800dc58:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 800dcf4 <pbuf_free+0xc4>
    SYS_ARCH_PROTECT(old_level);
 800dc5c:	f005 fa7f 	bl	801315e <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dc60:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800dc62:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dc64:	b933      	cbnz	r3, 800dc74 <pbuf_free+0x44>
 800dc66:	4643      	mov	r3, r8
 800dc68:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800dc6c:	4651      	mov	r1, sl
 800dc6e:	4648      	mov	r0, r9
 800dc70:	f006 fd12 	bl	8014698 <iprintf>
    ref = --(p->ref);
 800dc74:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800dc76:	4638      	mov	r0, r7
    ref = --(p->ref);
 800dc78:	3e01      	subs	r6, #1
 800dc7a:	b2f6      	uxtb	r6, r6
 800dc7c:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800dc7e:	f005 fa73 	bl	8013168 <sys_arch_unprotect>
    if (ref == 0) {
 800dc82:	2e00      	cmp	r6, #0
 800dc84:	d1e0      	bne.n	800dc48 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dc86:	7b62      	ldrb	r2, [r4, #13]
      q = p->next;
 800dc88:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dc8a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800dc8c:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dc8e:	d511      	bpl.n	800dcb4 <pbuf_free+0x84>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	b933      	cbnz	r3, 800dca2 <pbuf_free+0x72>
 800dc94:	4b15      	ldr	r3, [pc, #84]	@ (800dcec <pbuf_free+0xbc>)
 800dc96:	f240 3203 	movw	r2, #771	@ 0x303
 800dc9a:	4917      	ldr	r1, [pc, #92]	@ (800dcf8 <pbuf_free+0xc8>)
 800dc9c:	4815      	ldr	r0, [pc, #84]	@ (800dcf4 <pbuf_free+0xc4>)
 800dc9e:	f006 fcfb 	bl	8014698 <iprintf>
        pc->custom_free_function(p);
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	4620      	mov	r0, r4
 800dca6:	4798      	blx	r3
      count++;
 800dca8:	3501      	adds	r5, #1
 800dcaa:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800dcac:	2e00      	cmp	r6, #0
 800dcae:	d0cb      	beq.n	800dc48 <pbuf_free+0x18>
 800dcb0:	4634      	mov	r4, r6
 800dcb2:	e7d3      	b.n	800dc5c <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
 800dcb4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d104      	bne.n	800dcc6 <pbuf_free+0x96>
          memp_free(MEMP_PBUF_POOL, p);
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800dcc0:	f7ff fdba 	bl	800d838 <memp_free>
 800dcc4:	e7f0      	b.n	800dca8 <pbuf_free+0x78>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d102      	bne.n	800dcd0 <pbuf_free+0xa0>
          memp_free(MEMP_PBUF, p);
 800dcca:	4621      	mov	r1, r4
 800dccc:	200b      	movs	r0, #11
 800dcce:	e7f7      	b.n	800dcc0 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dcd0:	b91b      	cbnz	r3, 800dcda <pbuf_free+0xaa>
          mem_free(p);
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7ff faec 	bl	800d2b0 <mem_free>
 800dcd8:	e7e6      	b.n	800dca8 <pbuf_free+0x78>
          LWIP_ASSERT("invalid pbuf type", 0);
 800dcda:	4643      	mov	r3, r8
 800dcdc:	f240 3213 	movw	r2, #787	@ 0x313
 800dce0:	4906      	ldr	r1, [pc, #24]	@ (800dcfc <pbuf_free+0xcc>)
 800dce2:	4648      	mov	r0, r9
 800dce4:	f006 fcd8 	bl	8014698 <iprintf>
 800dce8:	e7de      	b.n	800dca8 <pbuf_free+0x78>
 800dcea:	bf00      	nop
 800dcec:	08016aa4 	.word	0x08016aa4
 800dcf0:	08016b46 	.word	0x08016b46
 800dcf4:	08015927 	.word	0x08015927
 800dcf8:	08016aea 	.word	0x08016aea
 800dcfc:	08016b0b 	.word	0x08016b0b
 800dd00:	08016ad4 	.word	0x08016ad4

0800dd04 <pbuf_alloc>:
  switch (type) {
 800dd04:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 800dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd0c:	4607      	mov	r7, r0
 800dd0e:	460d      	mov	r5, r1
  u16_t offset = (u16_t)layer;
 800dd10:	4606      	mov	r6, r0
  switch (type) {
 800dd12:	d014      	beq.n	800dd3e <pbuf_alloc+0x3a>
 800dd14:	d808      	bhi.n	800dd28 <pbuf_alloc+0x24>
 800dd16:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d107      	bne.n	800dd2e <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800dd1e:	2000      	movs	r0, #0
}
 800dd20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800dd24:	f7ff bf18 	b.w	800db58 <pbuf_alloc_reference>
  switch (type) {
 800dd28:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800dd2c:	d038      	beq.n	800dda0 <pbuf_alloc+0x9c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dd2e:	4b2c      	ldr	r3, [pc, #176]	@ (800dde0 <pbuf_alloc+0xdc>)
 800dd30:	f240 1229 	movw	r2, #297	@ 0x129
 800dd34:	492b      	ldr	r1, [pc, #172]	@ (800dde4 <pbuf_alloc+0xe0>)
 800dd36:	482c      	ldr	r0, [pc, #176]	@ (800dde8 <pbuf_alloc+0xe4>)
 800dd38:	f006 fcae 	bl	8014698 <iprintf>
      return NULL;
 800dd3c:	e00e      	b.n	800dd5c <pbuf_alloc+0x58>
  switch (type) {
 800dd3e:	2000      	movs	r0, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd40:	f240 57f4 	movw	r7, #1524	@ 0x5f4
  p->type_internal = (u8_t)type;
 800dd44:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800ddf0 <pbuf_alloc+0xec>
  switch (type) {
 800dd48:	4604      	mov	r4, r0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dd4a:	4681      	mov	r9, r0
 800dd4c:	200c      	movs	r0, #12
 800dd4e:	f7ff fd55 	bl	800d7fc <memp_malloc>
        if (q == NULL) {
 800dd52:	b938      	cbnz	r0, 800dd64 <pbuf_alloc+0x60>
          if (p) {
 800dd54:	b114      	cbz	r4, 800dd5c <pbuf_alloc+0x58>
            pbuf_free(p);
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7ff ff6a 	bl	800dc30 <pbuf_free>
          return NULL;
 800dd5c:	2400      	movs	r4, #0
}
 800dd5e:	4620      	mov	r0, r4
 800dd60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd64:	1cf3      	adds	r3, r6, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dd66:	4406      	add	r6, r0
  p->next = NULL;
 800dd68:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800dd6a:	8105      	strh	r5, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd6c:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dd70:	3613      	adds	r6, #19
  p->next = NULL;
 800dd72:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd74:	1afb      	subs	r3, r7, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dd76:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 800dd7a:	f8c0 800c 	str.w	r8, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd7e:	b29b      	uxth	r3, r3
  p->payload = payload;
 800dd80:	6046      	str	r6, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd82:	42ab      	cmp	r3, r5
 800dd84:	bf28      	it	cs
 800dd86:	462b      	movcs	r3, r5
  p->len = len;
 800dd88:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800dd8a:	b13c      	cbz	r4, 800dd9c <pbuf_alloc+0x98>
          last->next = q;
 800dd8c:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 800dd90:	1aeb      	subs	r3, r5, r3
        offset = 0;
 800dd92:	2600      	movs	r6, #0
        rem_len = (u16_t)(rem_len - qlen);
 800dd94:	b29d      	uxth	r5, r3
      } while (rem_len > 0);
 800dd96:	2d00      	cmp	r5, #0
 800dd98:	d1d7      	bne.n	800dd4a <pbuf_alloc+0x46>
 800dd9a:	e7e0      	b.n	800dd5e <pbuf_alloc+0x5a>
          p = q;
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	e7f7      	b.n	800dd90 <pbuf_alloc+0x8c>
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dda0:	1cc3      	adds	r3, r0, #3
 800dda2:	1cca      	adds	r2, r1, #3
 800dda4:	f023 0303 	bic.w	r3, r3, #3
 800dda8:	f022 0203 	bic.w	r2, r2, #3
 800ddac:	4413      	add	r3, r2
 800ddae:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ddb0:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ddb4:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ddb6:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ddb8:	d3d0      	bcc.n	800dd5c <pbuf_alloc+0x58>
 800ddba:	4282      	cmp	r2, r0
 800ddbc:	d8ce      	bhi.n	800dd5c <pbuf_alloc+0x58>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ddbe:	f7ff fc05 	bl	800d5cc <mem_malloc>
      if (p == NULL) {
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d0ca      	beq.n	800dd5e <pbuf_alloc+0x5a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ddc8:	4407      	add	r7, r0
  p->next = NULL;
 800ddca:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800ddcc:	8105      	strh	r5, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ddce:	3713      	adds	r7, #19
  p->next = NULL;
 800ddd0:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800ddd2:	4b06      	ldr	r3, [pc, #24]	@ (800ddec <pbuf_alloc+0xe8>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ddd4:	f027 0703 	bic.w	r7, r7, #3
  p->len = len;
 800ddd8:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800ddda:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800dddc:	6047      	str	r7, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ddde:	e7be      	b.n	800dd5e <pbuf_alloc+0x5a>
 800dde0:	08016aa4 	.word	0x08016aa4
 800dde4:	08016b1d 	.word	0x08016b1d
 800dde8:	08015927 	.word	0x08015927
 800ddec:	00010080 	.word	0x00010080
 800ddf0:	00010082 	.word	0x00010082

0800ddf4 <pbuf_realloc>:
{
 800ddf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf8:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	b930      	cbnz	r0, 800de0c <pbuf_realloc+0x18>
 800ddfe:	4b28      	ldr	r3, [pc, #160]	@ (800dea0 <pbuf_realloc+0xac>)
 800de00:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 800de04:	4927      	ldr	r1, [pc, #156]	@ (800dea4 <pbuf_realloc+0xb0>)
 800de06:	4828      	ldr	r0, [pc, #160]	@ (800dea8 <pbuf_realloc+0xb4>)
 800de08:	f006 fc46 	bl	8014698 <iprintf>
  if (new_len >= p->tot_len) {
 800de0c:	8927      	ldrh	r7, [r4, #8]
 800de0e:	42b7      	cmp	r7, r6
 800de10:	d943      	bls.n	800de9a <pbuf_realloc+0xa6>
  rem_len = new_len;
 800de12:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800de14:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800dea0 <pbuf_realloc+0xac>
 800de18:	f8df a098 	ldr.w	sl, [pc, #152]	@ 800deb4 <pbuf_realloc+0xc0>
 800de1c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800dea8 <pbuf_realloc+0xb4>
  while (rem_len > q->len) {
 800de20:	8962      	ldrh	r2, [r4, #10]
 800de22:	42aa      	cmp	r2, r5
 800de24:	d31e      	bcc.n	800de64 <pbuf_realloc+0x70>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800de26:	7b23      	ldrb	r3, [r4, #12]
 800de28:	0719      	lsls	r1, r3, #28
 800de2a:	d12e      	bne.n	800de8a <pbuf_realloc+0x96>
 800de2c:	42aa      	cmp	r2, r5
 800de2e:	d02c      	beq.n	800de8a <pbuf_realloc+0x96>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800de30:	7b63      	ldrb	r3, [r4, #13]
 800de32:	079b      	lsls	r3, r3, #30
 800de34:	d429      	bmi.n	800de8a <pbuf_realloc+0x96>
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800de36:	6861      	ldr	r1, [r4, #4]
 800de38:	4620      	mov	r0, r4
 800de3a:	1b09      	subs	r1, r1, r4
 800de3c:	4429      	add	r1, r5
 800de3e:	b289      	uxth	r1, r1
 800de40:	f7ff fb0e 	bl	800d460 <mem_trim>
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 800de44:	b9f8      	cbnz	r0, 800de86 <pbuf_realloc+0x92>
 800de46:	4b16      	ldr	r3, [pc, #88]	@ (800dea0 <pbuf_realloc+0xac>)
 800de48:	f240 12bf 	movw	r2, #447	@ 0x1bf
 800de4c:	4917      	ldr	r1, [pc, #92]	@ (800deac <pbuf_realloc+0xb8>)
 800de4e:	4816      	ldr	r0, [pc, #88]	@ (800dea8 <pbuf_realloc+0xb4>)
 800de50:	f006 fc22 	bl	8014698 <iprintf>
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800de54:	4b12      	ldr	r3, [pc, #72]	@ (800dea0 <pbuf_realloc+0xac>)
 800de56:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800de5a:	4915      	ldr	r1, [pc, #84]	@ (800deb0 <pbuf_realloc+0xbc>)
 800de5c:	4812      	ldr	r0, [pc, #72]	@ (800dea8 <pbuf_realloc+0xb4>)
 800de5e:	f006 fc1b 	bl	8014698 <iprintf>
 800de62:	e012      	b.n	800de8a <pbuf_realloc+0x96>
    rem_len = (u16_t)(rem_len - q->len);
 800de64:	1aaa      	subs	r2, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800de66:	1bf3      	subs	r3, r6, r7
    rem_len = (u16_t)(rem_len - q->len);
 800de68:	b295      	uxth	r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800de6a:	8922      	ldrh	r2, [r4, #8]
 800de6c:	4413      	add	r3, r2
 800de6e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800de70:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800de72:	2c00      	cmp	r4, #0
 800de74:	d1d4      	bne.n	800de20 <pbuf_realloc+0x2c>
 800de76:	4643      	mov	r3, r8
 800de78:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800de7c:	4651      	mov	r1, sl
 800de7e:	4648      	mov	r0, r9
 800de80:	f006 fc0a 	bl	8014698 <iprintf>
 800de84:	e7cc      	b.n	800de20 <pbuf_realloc+0x2c>
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800de86:	4284      	cmp	r4, r0
 800de88:	d1e4      	bne.n	800de54 <pbuf_realloc+0x60>
  if (q->next != NULL) {
 800de8a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800de8c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800de8e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800de90:	b108      	cbz	r0, 800de96 <pbuf_realloc+0xa2>
    pbuf_free(q->next);
 800de92:	f7ff fecd 	bl	800dc30 <pbuf_free>
  q->next = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	6023      	str	r3, [r4, #0]
}
 800de9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9e:	bf00      	nop
 800dea0:	08016aa4 	.word	0x08016aa4
 800dea4:	08016b38 	.word	0x08016b38
 800dea8:	08015927 	.word	0x08015927
 800deac:	08016b68 	.word	0x08016b68
 800deb0:	08016b84 	.word	0x08016b84
 800deb4:	08016b50 	.word	0x08016b50

0800deb8 <pbuf_clen>:
  while (p != NULL) {
 800deb8:	2300      	movs	r3, #0
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	b908      	cbnz	r0, 800dec2 <pbuf_clen+0xa>
}
 800debe:	b298      	uxth	r0, r3
 800dec0:	4770      	bx	lr
    p = p->next;
 800dec2:	6800      	ldr	r0, [r0, #0]
 800dec4:	4613      	mov	r3, r2
 800dec6:	e7f8      	b.n	800deba <pbuf_clen+0x2>

0800dec8 <pbuf_ref>:
{
 800dec8:	b510      	push	{r4, lr}
  if (p != NULL) {
 800deca:	4604      	mov	r4, r0
 800decc:	b188      	cbz	r0, 800def2 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dece:	f005 f946 	bl	801315e <sys_arch_protect>
 800ded2:	7ba3      	ldrb	r3, [r4, #14]
 800ded4:	3301      	adds	r3, #1
 800ded6:	73a3      	strb	r3, [r4, #14]
 800ded8:	f005 f946 	bl	8013168 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dedc:	7ba3      	ldrb	r3, [r4, #14]
 800dede:	b943      	cbnz	r3, 800def2 <pbuf_ref+0x2a>
 800dee0:	4b04      	ldr	r3, [pc, #16]	@ (800def4 <pbuf_ref+0x2c>)
 800dee2:	f240 3246 	movw	r2, #838	@ 0x346
 800dee6:	4904      	ldr	r1, [pc, #16]	@ (800def8 <pbuf_ref+0x30>)
 800dee8:	4804      	ldr	r0, [pc, #16]	@ (800defc <pbuf_ref+0x34>)
}
 800deea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800deee:	f006 bbd3 	b.w	8014698 <iprintf>
}
 800def2:	bd10      	pop	{r4, pc}
 800def4:	08016aa4 	.word	0x08016aa4
 800def8:	08016b9d 	.word	0x08016b9d
 800defc:	08015927 	.word	0x08015927

0800df00 <pbuf_cat>:
{
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df04:	4604      	mov	r4, r0
 800df06:	b320      	cbz	r0, 800df52 <pbuf_cat+0x52>
 800df08:	b319      	cbz	r1, 800df52 <pbuf_cat+0x52>
  LWIP_ASSERT("Creating an infinite loop", h != t);
 800df0a:	4288      	cmp	r0, r1
 800df0c:	d106      	bne.n	800df1c <pbuf_cat+0x1c>
 800df0e:	4b14      	ldr	r3, [pc, #80]	@ (800df60 <pbuf_cat+0x60>)
 800df10:	f240 325f 	movw	r2, #863	@ 0x35f
 800df14:	4913      	ldr	r1, [pc, #76]	@ (800df64 <pbuf_cat+0x64>)
 800df16:	4814      	ldr	r0, [pc, #80]	@ (800df68 <pbuf_cat+0x68>)
 800df18:	f006 fbbe 	bl	8014698 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 800df1c:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df1e:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df20:	b9c2      	cbnz	r2, 800df54 <pbuf_cat+0x54>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800df22:	8962      	ldrh	r2, [r4, #10]
 800df24:	429a      	cmp	r2, r3
 800df26:	d00f      	beq.n	800df48 <pbuf_cat+0x48>
 800df28:	4b0d      	ldr	r3, [pc, #52]	@ (800df60 <pbuf_cat+0x60>)
 800df2a:	f240 3267 	movw	r2, #871	@ 0x367
 800df2e:	490f      	ldr	r1, [pc, #60]	@ (800df6c <pbuf_cat+0x6c>)
 800df30:	480d      	ldr	r0, [pc, #52]	@ (800df68 <pbuf_cat+0x68>)
 800df32:	f006 fbb1 	bl	8014698 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	b133      	cbz	r3, 800df48 <pbuf_cat+0x48>
 800df3a:	4b09      	ldr	r3, [pc, #36]	@ (800df60 <pbuf_cat+0x60>)
 800df3c:	f44f 725a 	mov.w	r2, #872	@ 0x368
 800df40:	490b      	ldr	r1, [pc, #44]	@ (800df70 <pbuf_cat+0x70>)
 800df42:	4809      	ldr	r0, [pc, #36]	@ (800df68 <pbuf_cat+0x68>)
 800df44:	f006 fba8 	bl	8014698 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df48:	892a      	ldrh	r2, [r5, #8]
 800df4a:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800df4c:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df4e:	4413      	add	r3, r2
 800df50:	8123      	strh	r3, [r4, #8]
}
 800df52:	bd38      	pop	{r3, r4, r5, pc}
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df54:	8929      	ldrh	r1, [r5, #8]
 800df56:	440b      	add	r3, r1
 800df58:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df5a:	4614      	mov	r4, r2
 800df5c:	e7de      	b.n	800df1c <pbuf_cat+0x1c>
 800df5e:	bf00      	nop
 800df60:	08016aa4 	.word	0x08016aa4
 800df64:	08016baf 	.word	0x08016baf
 800df68:	08015927 	.word	0x08015927
 800df6c:	08016bc9 	.word	0x08016bc9
 800df70:	08016bf6 	.word	0x08016bf6

0800df74 <pbuf_copy_partial_pbuf>:
{
 800df74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	4605      	mov	r5, r0
 800df7a:	4616      	mov	r6, r2
 800df7c:	461f      	mov	r7, r3
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800df7e:	460c      	mov	r4, r1
 800df80:	2900      	cmp	r1, #0
 800df82:	d049      	beq.n	800e018 <pbuf_copy_partial_pbuf+0xa4>
 800df84:	890b      	ldrh	r3, [r1, #8]
 800df86:	4293      	cmp	r3, r2
 800df88:	d346      	bcc.n	800e018 <pbuf_copy_partial_pbuf+0xa4>
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800df8a:	2800      	cmp	r0, #0
 800df8c:	d044      	beq.n	800e018 <pbuf_copy_partial_pbuf+0xa4>
 800df8e:	8902      	ldrh	r2, [r0, #8]
 800df90:	19bb      	adds	r3, r7, r6
 800df92:	429a      	cmp	r2, r3
 800df94:	db40      	blt.n	800e018 <pbuf_copy_partial_pbuf+0xa4>
  size_t offset_to = offset, offset_from = 0, len;
 800df96:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800df9a:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 800e060 <pbuf_copy_partial_pbuf+0xec>
 800df9e:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 800e064 <pbuf_copy_partial_pbuf+0xf0>
 800dfa2:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 800e068 <pbuf_copy_partial_pbuf+0xf4>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dfa6:	896a      	ldrh	r2, [r5, #10]
 800dfa8:	8963      	ldrh	r3, [r4, #10]
 800dfaa:	1bd2      	subs	r2, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dfac:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dfae:	eba3 0308 	sub.w	r3, r3, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dfb2:	6861      	ldr	r1, [r4, #4]
 800dfb4:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dfb6:	429a      	cmp	r2, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dfb8:	4441      	add	r1, r8
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dfba:	bf28      	it	cs
 800dfbc:	461a      	movcs	r2, r3
    len = LWIP_MIN(copy_len, len);
 800dfbe:	42b2      	cmp	r2, r6
 800dfc0:	bf28      	it	cs
 800dfc2:	4632      	movcs	r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dfc4:	9201      	str	r2, [sp, #4]
 800dfc6:	f006 fe18 	bl	8014bfa <memcpy>
    offset_to += len;
 800dfca:	9a01      	ldr	r2, [sp, #4]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfcc:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800dfce:	4417      	add	r7, r2
    offset_from += len;
 800dfd0:	4490      	add	r8, r2
    copy_len = (u16_t)(copy_len - len);
 800dfd2:	1ab2      	subs	r2, r6, r2
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfd4:	42bb      	cmp	r3, r7
    copy_len = (u16_t)(copy_len - len);
 800dfd6:	b296      	uxth	r6, r2
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfd8:	d206      	bcs.n	800dfe8 <pbuf_copy_partial_pbuf+0x74>
 800dfda:	464b      	mov	r3, r9
 800dfdc:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 800dfe0:	4659      	mov	r1, fp
 800dfe2:	4650      	mov	r0, sl
 800dfe4:	f006 fb58 	bl	8014698 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dfe8:	8963      	ldrh	r3, [r4, #10]
 800dfea:	4543      	cmp	r3, r8
 800dfec:	d206      	bcs.n	800dffc <pbuf_copy_partial_pbuf+0x88>
 800dfee:	464b      	mov	r3, r9
 800dff0:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 800dff4:	4919      	ldr	r1, [pc, #100]	@ (800e05c <pbuf_copy_partial_pbuf+0xe8>)
 800dff6:	4650      	mov	r0, sl
 800dff8:	f006 fb4e 	bl	8014698 <iprintf>
    if (offset_from >= p_from->len) {
 800dffc:	8963      	ldrh	r3, [r4, #10]
 800dffe:	4543      	cmp	r3, r8
 800e000:	d804      	bhi.n	800e00c <pbuf_copy_partial_pbuf+0x98>
      p_from = p_from->next;
 800e002:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800e004:	b904      	cbnz	r4, 800e008 <pbuf_copy_partial_pbuf+0x94>
 800e006:	b93e      	cbnz	r6, 800e018 <pbuf_copy_partial_pbuf+0xa4>
      offset_from = 0;
 800e008:	f04f 0800 	mov.w	r8, #0
    if (offset_to == p_to->len) {
 800e00c:	896b      	ldrh	r3, [r5, #10]
 800e00e:	42bb      	cmp	r3, r7
 800e010:	d121      	bne.n	800e056 <pbuf_copy_partial_pbuf+0xe2>
      p_to = p_to->next;
 800e012:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800e014:	b9f5      	cbnz	r5, 800e054 <pbuf_copy_partial_pbuf+0xe0>
 800e016:	b1ce      	cbz	r6, 800e04c <pbuf_copy_partial_pbuf+0xd8>
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800e018:	f06f 000f 	mvn.w	r0, #15
 800e01c:	e010      	b.n	800e040 <pbuf_copy_partial_pbuf+0xcc>
      offset_to = 0;
 800e01e:	4637      	mov	r7, r6
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e020:	8962      	ldrh	r2, [r4, #10]
 800e022:	8923      	ldrh	r3, [r4, #8]
 800e024:	429a      	cmp	r2, r3
 800e026:	d101      	bne.n	800e02c <pbuf_copy_partial_pbuf+0xb8>
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	b963      	cbnz	r3, 800e046 <pbuf_copy_partial_pbuf+0xd2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e02c:	b12d      	cbz	r5, 800e03a <pbuf_copy_partial_pbuf+0xc6>
 800e02e:	896a      	ldrh	r2, [r5, #10]
 800e030:	892b      	ldrh	r3, [r5, #8]
 800e032:	429a      	cmp	r2, r3
 800e034:	d101      	bne.n	800e03a <pbuf_copy_partial_pbuf+0xc6>
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800e036:	682b      	ldr	r3, [r5, #0]
 800e038:	b92b      	cbnz	r3, 800e046 <pbuf_copy_partial_pbuf+0xd2>
  } while (copy_len);
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	d1b3      	bne.n	800dfa6 <pbuf_copy_partial_pbuf+0x32>
  return ERR_OK;
 800e03e:	4630      	mov	r0, r6
}
 800e040:	b003      	add	sp, #12
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800e046:	f06f 0005 	mvn.w	r0, #5
 800e04a:	e7f9      	b.n	800e040 <pbuf_copy_partial_pbuf+0xcc>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e04c:	2c00      	cmp	r4, #0
 800e04e:	d1e6      	bne.n	800e01e <pbuf_copy_partial_pbuf+0xaa>
  return ERR_OK;
 800e050:	4620      	mov	r0, r4
 800e052:	e7f5      	b.n	800e040 <pbuf_copy_partial_pbuf+0xcc>
      offset_to = 0;
 800e054:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e056:	2c00      	cmp	r4, #0
 800e058:	d1e2      	bne.n	800e020 <pbuf_copy_partial_pbuf+0xac>
 800e05a:	e7e8      	b.n	800e02e <pbuf_copy_partial_pbuf+0xba>
 800e05c:	08016c1d 	.word	0x08016c1d
 800e060:	08016aa4 	.word	0x08016aa4
 800e064:	08016c06 	.word	0x08016c06
 800e068:	08015927 	.word	0x08015927

0800e06c <pbuf_copy>:
  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800e06c:	b119      	cbz	r1, 800e076 <pbuf_copy+0xa>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800e06e:	2300      	movs	r3, #0
 800e070:	890a      	ldrh	r2, [r1, #8]
 800e072:	f7ff bf7f 	b.w	800df74 <pbuf_copy_partial_pbuf>
}
 800e076:	f06f 000f 	mvn.w	r0, #15
 800e07a:	4770      	bx	lr

0800e07c <pbuf_copy_partial>:
{
 800e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e080:	460f      	mov	r7, r1
 800e082:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e084:	4605      	mov	r5, r0
 800e086:	b328      	cbz	r0, 800e0d4 <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e088:	b331      	cbz	r1, 800e0d8 <pbuf_copy_partial+0x5c>
  u16_t left = 0;
 800e08a:	2600      	movs	r6, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e08c:	f1b8 0f00 	cmp.w	r8, #0
 800e090:	d109      	bne.n	800e0a6 <pbuf_copy_partial+0x2a>
}
 800e092:	4630      	mov	r0, r6
 800e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((offset != 0) && (offset >= p->len)) {
 800e098:	896c      	ldrh	r4, [r5, #10]
 800e09a:	b13b      	cbz	r3, 800e0ac <pbuf_copy_partial+0x30>
 800e09c:	429c      	cmp	r4, r3
 800e09e:	d805      	bhi.n	800e0ac <pbuf_copy_partial+0x30>
      offset = (u16_t)(offset - p->len);
 800e0a0:	1b1b      	subs	r3, r3, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0a2:	682d      	ldr	r5, [r5, #0]
      offset = (u16_t)(offset - p->len);
 800e0a4:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0a6:	2d00      	cmp	r5, #0
 800e0a8:	d1f6      	bne.n	800e098 <pbuf_copy_partial+0x1c>
 800e0aa:	e7f2      	b.n	800e092 <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 800e0ac:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e0ae:	6869      	ldr	r1, [r5, #4]
 800e0b0:	19b8      	adds	r0, r7, r6
      if (buf_copy_len > len) {
 800e0b2:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e0b4:	4419      	add	r1, r3
      if (buf_copy_len > len) {
 800e0b6:	4544      	cmp	r4, r8
 800e0b8:	bf28      	it	cs
 800e0ba:	4644      	movcs	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e0bc:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e0be:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 800e0c0:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e0c4:	f006 fd99 	bl	8014bfa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e0c8:	b2b6      	uxth	r6, r6
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0ca:	682d      	ldr	r5, [r5, #0]
      len = (u16_t)(len - buf_copy_len);
 800e0cc:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e7db      	b.n	800e08c <pbuf_copy_partial+0x10>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	e7dc      	b.n	800e092 <pbuf_copy_partial+0x16>
 800e0d8:	460e      	mov	r6, r1
 800e0da:	e7da      	b.n	800e092 <pbuf_copy_partial+0x16>

0800e0dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e0e0:	460a      	mov	r2, r1
 800e0e2:	8929      	ldrh	r1, [r5, #8]
 800e0e4:	f7ff fe0e 	bl	800dd04 <pbuf_alloc>
  if (q == NULL) {
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	b150      	cbz	r0, 800e102 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7ff ffbd 	bl	800e06c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e0f2:	b130      	cbz	r0, 800e102 <pbuf_clone+0x26>
 800e0f4:	4b04      	ldr	r3, [pc, #16]	@ (800e108 <pbuf_clone+0x2c>)
 800e0f6:	f240 524c 	movw	r2, #1356	@ 0x54c
 800e0fa:	4904      	ldr	r1, [pc, #16]	@ (800e10c <pbuf_clone+0x30>)
 800e0fc:	4804      	ldr	r0, [pc, #16]	@ (800e110 <pbuf_clone+0x34>)
 800e0fe:	f006 facb 	bl	8014698 <iprintf>
  return q;
}
 800e102:	4620      	mov	r0, r4
 800e104:	bd38      	pop	{r3, r4, r5, pc}
 800e106:	bf00      	nop
 800e108:	08016aa4 	.word	0x08016aa4
 800e10c:	08016c38 	.word	0x08016c38
 800e110:	08015927 	.word	0x08015927

0800e114 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800e114:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800e116:	f10d 0206 	add.w	r2, sp, #6
 800e11a:	f7ff fcdd 	bl	800dad8 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e11e:	b148      	cbz	r0, 800e134 <pbuf_try_get_at+0x20>
 800e120:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e124:	8942      	ldrh	r2, [r0, #10]
 800e126:	429a      	cmp	r2, r3
 800e128:	d904      	bls.n	800e134 <pbuf_try_get_at+0x20>
    return ((u8_t *)q->payload)[q_idx];
 800e12a:	6842      	ldr	r2, [r0, #4]
 800e12c:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 800e12e:	b003      	add	sp, #12
 800e130:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	e7f9      	b.n	800e12e <pbuf_try_get_at+0x1a>

0800e13a <pbuf_get_at>:
{
 800e13a:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 800e13c:	f7ff ffea 	bl	800e114 <pbuf_try_get_at>
  if (ret >= 0) {
 800e140:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800e144:	b2c0      	uxtb	r0, r0
 800e146:	bd08      	pop	{r3, pc}

0800e148 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800e148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14c:	460e      	mov	r6, r1
 800e14e:	4698      	mov	r8, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800e150:	8901      	ldrh	r1, [r0, #8]
{
 800e152:	4605      	mov	r5, r0
  if (p->tot_len < (offset + n)) {
 800e154:	18f3      	adds	r3, r6, r3
 800e156:	4299      	cmp	r1, r3
 800e158:	da05      	bge.n	800e166 <pbuf_memcmp+0x1e>
    return 0xffff;
 800e15a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800e15e:	e017      	b.n	800e190 <pbuf_memcmp+0x48>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800e160:	1af3      	subs	r3, r6, r3
    q = q->next;
 800e162:	682d      	ldr	r5, [r5, #0]
    start = (u16_t)(start - q->len);
 800e164:	b29e      	uxth	r6, r3
  while ((q != NULL) && (q->len <= start)) {
 800e166:	b115      	cbz	r5, 800e16e <pbuf_memcmp+0x26>
 800e168:	896b      	ldrh	r3, [r5, #10]
 800e16a:	429e      	cmp	r6, r3
 800e16c:	d2f8      	bcs.n	800e160 <pbuf_memcmp+0x18>
 800e16e:	1e57      	subs	r7, r2, #1
{
 800e170:	2400      	movs	r4, #0
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800e172:	45a0      	cmp	r8, r4
 800e174:	d101      	bne.n	800e17a <pbuf_memcmp+0x32>
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 800e176:	2400      	movs	r4, #0
 800e178:	e00a      	b.n	800e190 <pbuf_memcmp+0x48>
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800e17a:	1931      	adds	r1, r6, r4
 800e17c:	4628      	mov	r0, r5
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800e17e:	3401      	adds	r4, #1
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800e180:	b289      	uxth	r1, r1
 800e182:	f7ff ffda 	bl	800e13a <pbuf_get_at>
    if (a != b) {
 800e186:	f817 3f01 	ldrb.w	r3, [r7, #1]!
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800e18a:	b2a4      	uxth	r4, r4
    if (a != b) {
 800e18c:	4283      	cmp	r3, r0
 800e18e:	d0f0      	beq.n	800e172 <pbuf_memcmp+0x2a>
}
 800e190:	4620      	mov	r0, r4
 800e192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e198 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19a:	4c11      	ldr	r4, [pc, #68]	@ (800e1e0 <tcp_new_port+0x48>)
 800e19c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e1a0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800e1a4:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	4d0e      	ldr	r5, [pc, #56]	@ (800e1e4 <tcp_new_port+0x4c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1aa:	2200      	movs	r2, #0
  tcp_port++;
 800e1ac:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e1ae:	42b3      	cmp	r3, r6
 800e1b0:	bf08      	it	eq
 800e1b2:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1b6:	f855 1b04 	ldr.w	r1, [r5], #4
 800e1ba:	6809      	ldr	r1, [r1, #0]
 800e1bc:	b929      	cbnz	r1, 800e1ca <tcp_new_port+0x32>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1be:	3201      	adds	r2, #1
 800e1c0:	b2d2      	uxtb	r2, r2
 800e1c2:	2a04      	cmp	r2, #4
 800e1c4:	d1f7      	bne.n	800e1b6 <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	e006      	b.n	800e1d8 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800e1ca:	8acf      	ldrh	r7, [r1, #22]
 800e1cc:	429f      	cmp	r7, r3
 800e1ce:	d105      	bne.n	800e1dc <tcp_new_port+0x44>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e1d0:	3801      	subs	r0, #1
 800e1d2:	b280      	uxth	r0, r0
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d1e6      	bne.n	800e1a6 <tcp_new_port+0xe>
 800e1d8:	8023      	strh	r3, [r4, #0]
}
 800e1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1dc:	68c9      	ldr	r1, [r1, #12]
 800e1de:	e7ed      	b.n	800e1bc <tcp_new_port+0x24>
 800e1e0:	2000005c 	.word	0x2000005c
 800e1e4:	0808ecf8 	.word	0x0808ecf8

0800e1e8 <tcp_close_shutdown_fin>:
{
 800e1e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	b930      	cbnz	r0, 800e1fc <tcp_close_shutdown_fin+0x14>
 800e1ee:	4b13      	ldr	r3, [pc, #76]	@ (800e23c <tcp_close_shutdown_fin+0x54>)
 800e1f0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e1f4:	4912      	ldr	r1, [pc, #72]	@ (800e240 <tcp_close_shutdown_fin+0x58>)
 800e1f6:	4813      	ldr	r0, [pc, #76]	@ (800e244 <tcp_close_shutdown_fin+0x5c>)
 800e1f8:	f006 fa4e 	bl	8014698 <iprintf>
  switch (pcb->state) {
 800e1fc:	7d23      	ldrb	r3, [r4, #20]
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d003      	beq.n	800e20a <tcp_close_shutdown_fin+0x22>
 800e202:	2b07      	cmp	r3, #7
 800e204:	d00c      	beq.n	800e220 <tcp_close_shutdown_fin+0x38>
 800e206:	2b03      	cmp	r3, #3
 800e208:	d108      	bne.n	800e21c <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800e20a:	4620      	mov	r0, r4
 800e20c:	f002 fea6 	bl	8010f5c <tcp_send_fin>
      if (err == ERR_OK) {
 800e210:	b960      	cbnz	r0, 800e22c <tcp_close_shutdown_fin+0x44>
  if (err == ERR_OK) {
 800e212:	2305      	movs	r3, #5
    tcp_output(pcb);
 800e214:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800e216:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800e218:	f002 fff4 	bl	8011204 <tcp_output>
      return ERR_OK;
 800e21c:	2000      	movs	r0, #0
}
 800e21e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800e220:	4620      	mov	r0, r4
 800e222:	f002 fe9b 	bl	8010f5c <tcp_send_fin>
      if (err == ERR_OK) {
 800e226:	b908      	cbnz	r0, 800e22c <tcp_close_shutdown_fin+0x44>
 800e228:	2309      	movs	r3, #9
 800e22a:	e7f3      	b.n	800e214 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800e22c:	1c43      	adds	r3, r0, #1
 800e22e:	d1f6      	bne.n	800e21e <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e230:	8b63      	ldrh	r3, [r4, #26]
 800e232:	f043 0308 	orr.w	r3, r3, #8
 800e236:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800e238:	e7f0      	b.n	800e21c <tcp_close_shutdown_fin+0x34>
 800e23a:	bf00      	nop
 800e23c:	08016c49 	.word	0x08016c49
 800e240:	08016c66 	.word	0x08016c66
 800e244:	08015927 	.word	0x08015927

0800e248 <tcp_init>:
{
 800e248:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e24a:	f006 f925 	bl	8014498 <rand>
 800e24e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800e252:	4b02      	ldr	r3, [pc, #8]	@ (800e25c <tcp_init+0x14>)
 800e254:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800e258:	8018      	strh	r0, [r3, #0]
}
 800e25a:	bd08      	pop	{r3, pc}
 800e25c:	2000005c 	.word	0x2000005c

0800e260 <tcp_free>:
{
 800e260:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e262:	7d03      	ldrb	r3, [r0, #20]
{
 800e264:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e266:	2b01      	cmp	r3, #1
 800e268:	d105      	bne.n	800e276 <tcp_free+0x16>
 800e26a:	4b06      	ldr	r3, [pc, #24]	@ (800e284 <tcp_free+0x24>)
 800e26c:	22d4      	movs	r2, #212	@ 0xd4
 800e26e:	4906      	ldr	r1, [pc, #24]	@ (800e288 <tcp_free+0x28>)
 800e270:	4806      	ldr	r0, [pc, #24]	@ (800e28c <tcp_free+0x2c>)
 800e272:	f006 fa11 	bl	8014698 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800e276:	4621      	mov	r1, r4
 800e278:	2001      	movs	r0, #1
}
 800e27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800e27e:	f7ff badb 	b.w	800d838 <memp_free>
 800e282:	bf00      	nop
 800e284:	08016c49 	.word	0x08016c49
 800e288:	08016c72 	.word	0x08016c72
 800e28c:	08015927 	.word	0x08015927

0800e290 <tcp_bind>:
{
 800e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800e292:	4b1c      	ldr	r3, [pc, #112]	@ (800e304 <tcp_bind+0x74>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e294:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800e296:	2900      	cmp	r1, #0
 800e298:	bf14      	ite	ne
 800e29a:	460d      	movne	r5, r1
 800e29c:	461d      	moveq	r5, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e29e:	b340      	cbz	r0, 800e2f2 <tcp_bind+0x62>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e2a0:	7d03      	ldrb	r3, [r0, #20]
 800e2a2:	bb4b      	cbnz	r3, 800e2f8 <tcp_bind+0x68>
  if (port == 0) {
 800e2a4:	b932      	cbnz	r2, 800e2b4 <tcp_bind+0x24>
    port = tcp_new_port();
 800e2a6:	f7ff ff77 	bl	800e198 <tcp_new_port>
    if (port == 0) {
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	b950      	cbnz	r0, 800e2c4 <tcp_bind+0x34>
      return ERR_BUF;
 800e2ae:	f06f 0001 	mvn.w	r0, #1
 800e2b2:	e012      	b.n	800e2da <tcp_bind+0x4a>
 800e2b4:	4814      	ldr	r0, [pc, #80]	@ (800e308 <tcp_bind+0x78>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e2b6:	f850 1b04 	ldr.w	r1, [r0], #4
 800e2ba:	6809      	ldr	r1, [r1, #0]
 800e2bc:	b971      	cbnz	r1, 800e2dc <tcp_bind+0x4c>
    for (i = 0; i < max_pcb_list; i++) {
 800e2be:	3301      	adds	r3, #1
 800e2c0:	2b04      	cmp	r3, #4
 800e2c2:	d1f8      	bne.n	800e2b6 <tcp_bind+0x26>
  if (!ip_addr_isany(ipaddr)
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <tcp_bind+0x3a>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e2c8:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e2ca:	4b10      	ldr	r3, [pc, #64]	@ (800e30c <tcp_bind+0x7c>)
  pcb->local_port = port;
 800e2cc:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	601c      	str	r4, [r3, #0]
 800e2d2:	60e2      	str	r2, [r4, #12]
 800e2d4:	f003 fa6a 	bl	80117ac <tcp_timer_needed>
  return ERR_OK;
 800e2d8:	2000      	movs	r0, #0
}
 800e2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800e2dc:	8ace      	ldrh	r6, [r1, #22]
 800e2de:	4296      	cmp	r6, r2
 800e2e0:	d105      	bne.n	800e2ee <tcp_bind+0x5e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e2e2:	680f      	ldr	r7, [r1, #0]
 800e2e4:	b15f      	cbz	r7, 800e2fe <tcp_bind+0x6e>
                 ip_addr_isany(ipaddr) ||
 800e2e6:	682e      	ldr	r6, [r5, #0]
 800e2e8:	b14e      	cbz	r6, 800e2fe <tcp_bind+0x6e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e2ea:	42b7      	cmp	r7, r6
 800e2ec:	d007      	beq.n	800e2fe <tcp_bind+0x6e>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e2ee:	68c9      	ldr	r1, [r1, #12]
 800e2f0:	e7e4      	b.n	800e2bc <tcp_bind+0x2c>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2f2:	f06f 000f 	mvn.w	r0, #15
 800e2f6:	e7f0      	b.n	800e2da <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e2f8:	f06f 0005 	mvn.w	r0, #5
 800e2fc:	e7ed      	b.n	800e2da <tcp_bind+0x4a>
              return ERR_USE;
 800e2fe:	f06f 0007 	mvn.w	r0, #7
 800e302:	e7ea      	b.n	800e2da <tcp_bind+0x4a>
 800e304:	0808ed34 	.word	0x0808ed34
 800e308:	0808ecf8 	.word	0x0808ecf8
 800e30c:	2000f334 	.word	0x2000f334

0800e310 <tcp_listen_with_backlog_and_err>:
{
 800e310:	b570      	push	{r4, r5, r6, lr}
 800e312:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e314:	4604      	mov	r4, r0
 800e316:	2800      	cmp	r0, #0
 800e318:	d03c      	beq.n	800e394 <tcp_listen_with_backlog_and_err+0x84>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e31a:	7d03      	ldrb	r3, [r0, #20]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d13d      	bne.n	800e39c <tcp_listen_with_backlog_and_err+0x8c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e320:	2002      	movs	r0, #2
 800e322:	f7ff fa6b 	bl	800d7fc <memp_malloc>
  if (lpcb == NULL) {
 800e326:	4605      	mov	r5, r0
 800e328:	2800      	cmp	r0, #0
 800e32a:	d03b      	beq.n	800e3a4 <tcp_listen_with_backlog_and_err+0x94>
  lpcb->callback_arg = pcb->callback_arg;
 800e32c:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800e32e:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800e330:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800e332:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800e334:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800e336:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800e338:	7d62      	ldrb	r2, [r4, #21]
 800e33a:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800e33c:	7a62      	ldrb	r2, [r4, #9]
 800e33e:	7242      	strb	r2, [r0, #9]
  lpcb->netif_idx = pcb->netif_idx;
 800e340:	7a22      	ldrb	r2, [r4, #8]
 800e342:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800e344:	7ae2      	ldrb	r2, [r4, #11]
 800e346:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800e348:	7aa2      	ldrb	r2, [r4, #10]
 800e34a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e34c:	6822      	ldr	r2, [r4, #0]
 800e34e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800e350:	b13b      	cbz	r3, 800e362 <tcp_listen_with_backlog_and_err+0x52>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e352:	4a16      	ldr	r2, [pc, #88]	@ (800e3ac <tcp_listen_with_backlog_and_err+0x9c>)
 800e354:	6813      	ldr	r3, [r2, #0]
 800e356:	42a3      	cmp	r3, r4
 800e358:	d114      	bne.n	800e384 <tcp_listen_with_backlog_and_err+0x74>
 800e35a:	68e3      	ldr	r3, [r4, #12]
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	2300      	movs	r3, #0
 800e360:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 800e362:	4620      	mov	r0, r4
 800e364:	f7ff ff7c 	bl	800e260 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800e368:	4b11      	ldr	r3, [pc, #68]	@ (800e3b0 <tcp_listen_with_backlog_and_err+0xa0>)
 800e36a:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e36c:	4b11      	ldr	r3, [pc, #68]	@ (800e3b4 <tcp_listen_with_backlog_and_err+0xa4>)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	601d      	str	r5, [r3, #0]
 800e372:	60ea      	str	r2, [r5, #12]
 800e374:	f003 fa1a 	bl	80117ac <tcp_timer_needed>
  res = ERR_OK;
 800e378:	2300      	movs	r3, #0
  if (err != NULL) {
 800e37a:	b106      	cbz	r6, 800e37e <tcp_listen_with_backlog_and_err+0x6e>
    *err = res;
 800e37c:	7033      	strb	r3, [r6, #0]
}
 800e37e:	4628      	mov	r0, r5
 800e380:	bd70      	pop	{r4, r5, r6, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e382:	4613      	mov	r3, r2
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0ea      	beq.n	800e35e <tcp_listen_with_backlog_and_err+0x4e>
 800e388:	68da      	ldr	r2, [r3, #12]
 800e38a:	42a2      	cmp	r2, r4
 800e38c:	d1f9      	bne.n	800e382 <tcp_listen_with_backlog_and_err+0x72>
 800e38e:	68e2      	ldr	r2, [r4, #12]
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	e7e4      	b.n	800e35e <tcp_listen_with_backlog_and_err+0x4e>
  struct tcp_pcb_listen *lpcb = NULL;
 800e394:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e396:	f06f 030f 	mvn.w	r3, #15
 800e39a:	e7ee      	b.n	800e37a <tcp_listen_with_backlog_and_err+0x6a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e39c:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 800e3a0:	2500      	movs	r5, #0
 800e3a2:	e7ea      	b.n	800e37a <tcp_listen_with_backlog_and_err+0x6a>
    res = ERR_MEM;
 800e3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a8:	e7e7      	b.n	800e37a <tcp_listen_with_backlog_and_err+0x6a>
 800e3aa:	bf00      	nop
 800e3ac:	2000f334 	.word	0x2000f334
 800e3b0:	0800eead 	.word	0x0800eead
 800e3b4:	2000f330 	.word	0x2000f330

0800e3b8 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f7ff bfa9 	b.w	800e310 <tcp_listen_with_backlog_and_err>
	...

0800e3c0 <tcp_update_rcv_ann_wnd>:
{
 800e3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	b930      	cbnz	r0, 800e3d4 <tcp_update_rcv_ann_wnd+0x14>
 800e3c6:	4b14      	ldr	r3, [pc, #80]	@ (800e418 <tcp_update_rcv_ann_wnd+0x58>)
 800e3c8:	f240 32aa 	movw	r2, #938	@ 0x3aa
 800e3cc:	4913      	ldr	r1, [pc, #76]	@ (800e41c <tcp_update_rcv_ann_wnd+0x5c>)
 800e3ce:	4814      	ldr	r0, [pc, #80]	@ (800e420 <tcp_update_rcv_ann_wnd+0x60>)
 800e3d0:	f006 f962 	bl	8014698 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e3d4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e3d6:	f240 56b4 	movw	r6, #1460	@ 0x5b4
 800e3da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e3dc:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e3de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e3e0:	1a58      	subs	r0, r3, r1
 800e3e2:	42b7      	cmp	r7, r6
 800e3e4:	4410      	add	r0, r2
 800e3e6:	bf94      	ite	ls
 800e3e8:	1bc5      	subls	r5, r0, r7
 800e3ea:	1b85      	subhi	r5, r0, r6
 800e3ec:	2d00      	cmp	r5, #0
 800e3ee:	da0d      	bge.n	800e40c <tcp_update_rcv_ann_wnd+0x4c>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e3f0:	1a8d      	subs	r5, r1, r2
 800e3f2:	d40d      	bmi.n	800e410 <tcp_update_rcv_ann_wnd+0x50>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e3f4:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800e3f8:	d306      	bcc.n	800e408 <tcp_update_rcv_ann_wnd+0x48>
 800e3fa:	4b07      	ldr	r3, [pc, #28]	@ (800e418 <tcp_update_rcv_ann_wnd+0x58>)
 800e3fc:	f240 32ba 	movw	r2, #954	@ 0x3ba
 800e400:	4908      	ldr	r1, [pc, #32]	@ (800e424 <tcp_update_rcv_ann_wnd+0x64>)
 800e402:	4807      	ldr	r0, [pc, #28]	@ (800e420 <tcp_update_rcv_ann_wnd+0x60>)
 800e404:	f006 f948 	bl	8014698 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e408:	b2ab      	uxth	r3, r5
    return 0;
 800e40a:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e40c:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800e40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e410:	2300      	movs	r3, #0
    return 0;
 800e412:	4618      	mov	r0, r3
 800e414:	e7fa      	b.n	800e40c <tcp_update_rcv_ann_wnd+0x4c>
 800e416:	bf00      	nop
 800e418:	08016c49 	.word	0x08016c49
 800e41c:	08016c83 	.word	0x08016c83
 800e420:	08015927 	.word	0x08015927
 800e424:	08016ca7 	.word	0x08016ca7

0800e428 <tcp_recved>:
{
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e42c:	4605      	mov	r5, r0
 800e42e:	b330      	cbz	r0, 800e47e <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e430:	7d03      	ldrb	r3, [r0, #20]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d106      	bne.n	800e444 <tcp_recved+0x1c>
 800e436:	4b12      	ldr	r3, [pc, #72]	@ (800e480 <tcp_recved+0x58>)
 800e438:	f240 32d6 	movw	r2, #982	@ 0x3d6
 800e43c:	4911      	ldr	r1, [pc, #68]	@ (800e484 <tcp_recved+0x5c>)
 800e43e:	4812      	ldr	r0, [pc, #72]	@ (800e488 <tcp_recved+0x60>)
 800e440:	f006 f92a 	bl	8014698 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e444:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e446:	f640 3368 	movw	r3, #2920	@ 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e44a:	1911      	adds	r1, r2, r4
 800e44c:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e44e:	4299      	cmp	r1, r3
 800e450:	d813      	bhi.n	800e47a <tcp_recved+0x52>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e452:	428a      	cmp	r2, r1
 800e454:	bf88      	it	hi
 800e456:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e458:	4628      	mov	r0, r5
 800e45a:	8529      	strh	r1, [r5, #40]	@ 0x28
 800e45c:	f7ff ffb0 	bl	800e3c0 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e460:	f240 23d9 	movw	r3, #729	@ 0x2d9
 800e464:	4298      	cmp	r0, r3
 800e466:	d90a      	bls.n	800e47e <tcp_recved+0x56>
    tcp_ack_now(pcb);
 800e468:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800e46a:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800e46c:	f043 0302 	orr.w	r3, r3, #2
 800e470:	836b      	strh	r3, [r5, #26]
}
 800e472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800e476:	f002 bec5 	b.w	8011204 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e47a:	4619      	mov	r1, r3
 800e47c:	e7ec      	b.n	800e458 <tcp_recved+0x30>
}
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	08016c49 	.word	0x08016c49
 800e484:	08016cc1 	.word	0x08016cc1
 800e488:	08015927 	.word	0x08015927

0800e48c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e48c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800e48e:	4604      	mov	r4, r0
 800e490:	b148      	cbz	r0, 800e4a6 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800e492:	6840      	ldr	r0, [r0, #4]
 800e494:	b108      	cbz	r0, 800e49a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800e496:	f7ff fbcb 	bl	800dc30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e49a:	4621      	mov	r1, r4
 800e49c:	2003      	movs	r0, #3
  }
}
 800e49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800e4a2:	f7ff b9c9 	b.w	800d838 <memp_free>
}
 800e4a6:	bd10      	pop	{r4, pc}

0800e4a8 <tcp_segs_free>:
{
 800e4a8:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800e4aa:	b900      	cbnz	r0, 800e4ae <tcp_segs_free+0x6>
}
 800e4ac:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800e4ae:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800e4b0:	f7ff ffec 	bl	800e48c <tcp_seg_free>
    seg = next;
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	e7f8      	b.n	800e4aa <tcp_segs_free+0x2>

0800e4b8 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e4b8:	b100      	cbz	r0, 800e4bc <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800e4ba:	6101      	str	r1, [r0, #16]
  }
}
 800e4bc:	4770      	bx	lr
	...

0800e4c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e4c0:	b538      	push	{r3, r4, r5, lr}
 800e4c2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	b158      	cbz	r0, 800e4e0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e4c8:	7d03      	ldrb	r3, [r0, #20]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d106      	bne.n	800e4dc <tcp_recv+0x1c>
 800e4ce:	4b05      	ldr	r3, [pc, #20]	@ (800e4e4 <tcp_recv+0x24>)
 800e4d0:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 800e4d4:	4904      	ldr	r1, [pc, #16]	@ (800e4e8 <tcp_recv+0x28>)
 800e4d6:	4805      	ldr	r0, [pc, #20]	@ (800e4ec <tcp_recv+0x2c>)
 800e4d8:	f006 f8de 	bl	8014698 <iprintf>
    pcb->recv = recv;
 800e4dc:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  }
}
 800e4e0:	bd38      	pop	{r3, r4, r5, pc}
 800e4e2:	bf00      	nop
 800e4e4:	08016c49 	.word	0x08016c49
 800e4e8:	08016ce7 	.word	0x08016ce7
 800e4ec:	08015927 	.word	0x08015927

0800e4f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	b150      	cbz	r0, 800e50e <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e4f8:	7d03      	ldrb	r3, [r0, #20]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d106      	bne.n	800e50c <tcp_sent+0x1c>
 800e4fe:	4b04      	ldr	r3, [pc, #16]	@ (800e510 <tcp_sent+0x20>)
 800e500:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 800e504:	4903      	ldr	r1, [pc, #12]	@ (800e514 <tcp_sent+0x24>)
 800e506:	4804      	ldr	r0, [pc, #16]	@ (800e518 <tcp_sent+0x28>)
 800e508:	f006 f8c6 	bl	8014698 <iprintf>
    pcb->sent = sent;
 800e50c:	67e5      	str	r5, [r4, #124]	@ 0x7c
  }
}
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	08016c49 	.word	0x08016c49
 800e514:	08016d0e 	.word	0x08016d0e
 800e518:	08015927 	.word	0x08015927

0800e51c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e520:	4604      	mov	r4, r0
 800e522:	b158      	cbz	r0, 800e53c <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e524:	7d03      	ldrb	r3, [r0, #20]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d106      	bne.n	800e538 <tcp_err+0x1c>
 800e52a:	4b05      	ldr	r3, [pc, #20]	@ (800e540 <tcp_err+0x24>)
 800e52c:	f640 0216 	movw	r2, #2070	@ 0x816
 800e530:	4904      	ldr	r1, [pc, #16]	@ (800e544 <tcp_err+0x28>)
 800e532:	4805      	ldr	r0, [pc, #20]	@ (800e548 <tcp_err+0x2c>)
 800e534:	f006 f8b0 	bl	8014698 <iprintf>
    pcb->errf = err;
 800e538:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  }
}
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
 800e53e:	bf00      	nop
 800e540:	08016c49 	.word	0x08016c49
 800e544:	08016d35 	.word	0x08016d35
 800e548:	08015927 	.word	0x08015927

0800e54c <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e54c:	b118      	cbz	r0, 800e556 <tcp_accept+0xa>
 800e54e:	7d03      	ldrb	r3, [r0, #20]
 800e550:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800e552:	bf08      	it	eq
 800e554:	6181      	streq	r1, [r0, #24]
  }
}
 800e556:	4770      	bx	lr

0800e558 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	460e      	mov	r6, r1
 800e55c:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e55e:	4604      	mov	r4, r0
 800e560:	b160      	cbz	r0, 800e57c <tcp_poll+0x24>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e562:	7d03      	ldrb	r3, [r0, #20]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d106      	bne.n	800e576 <tcp_poll+0x1e>
 800e568:	4b05      	ldr	r3, [pc, #20]	@ (800e580 <tcp_poll+0x28>)
 800e56a:	f640 0248 	movw	r2, #2120	@ 0x848
 800e56e:	4905      	ldr	r1, [pc, #20]	@ (800e584 <tcp_poll+0x2c>)
 800e570:	4805      	ldr	r0, [pc, #20]	@ (800e588 <tcp_poll+0x30>)
 800e572:	f006 f891 	bl	8014698 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e576:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e57a:	7765      	strb	r5, [r4, #29]
}
 800e57c:	bd70      	pop	{r4, r5, r6, pc}
 800e57e:	bf00      	nop
 800e580:	08016c49 	.word	0x08016c49
 800e584:	08016d5b 	.word	0x08016d5b
 800e588:	08015927 	.word	0x08015927

0800e58c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e58c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e58e:	4604      	mov	r4, r0
 800e590:	b1c0      	cbz	r0, 800e5c4 <tcp_pcb_purge+0x38>

  if (pcb->state != CLOSED &&
 800e592:	7d03      	ldrb	r3, [r0, #20]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d915      	bls.n	800e5c4 <tcp_pcb_purge+0x38>
 800e598:	2b0a      	cmp	r3, #10
 800e59a:	d013      	beq.n	800e5c4 <tcp_pcb_purge+0x38>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e59c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800e59e:	b118      	cbz	r0, 800e5a8 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e5a0:	f7ff fb46 	bl	800dc30 <pbuf_free>
      pcb->refused_data = NULL;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6763      	str	r3, [r4, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e5a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff

    tcp_segs_free(pcb->unsent);
 800e5ac:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    pcb->rtime = -1;
 800e5ae:	8623      	strh	r3, [r4, #48]	@ 0x30
    tcp_segs_free(pcb->unsent);
 800e5b0:	f7ff ff7a 	bl	800e4a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e5b4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800e5b6:	f7ff ff77 	bl	800e4a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e9c4 331b 	strd	r3, r3, [r4, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e5c0:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e5c4:	bd10      	pop	{r4, pc}
	...

0800e5c8 <tcp_slowtmr>:
{
 800e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800e5cc:	4dae      	ldr	r5, [pc, #696]	@ (800e888 <tcp_slowtmr+0x2c0>)
{
 800e5ce:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800e5d0:	4aae      	ldr	r2, [pc, #696]	@ (800e88c <tcp_slowtmr+0x2c4>)
  ++tcp_ticks;
 800e5d2:	682b      	ldr	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800e5d4:	f8df 82e8 	ldr.w	r8, [pc, #744]	@ 800e8c0 <tcp_slowtmr+0x2f8>
  ++tcp_ticks;
 800e5d8:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e5da:	4ead      	ldr	r6, [pc, #692]	@ (800e890 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 800e5dc:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800e5de:	7813      	ldrb	r3, [r2, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800e5e4:	f8d8 4000 	ldr.w	r4, [r8]
  prev = NULL;
 800e5e8:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e5ea:	f8df 92bc 	ldr.w	r9, [pc, #700]	@ 800e8a8 <tcp_slowtmr+0x2e0>
  while (pcb != NULL) {
 800e5ee:	b96c      	cbnz	r4, 800e60c <tcp_slowtmr+0x44>
  pcb = tcp_tw_pcbs;
 800e5f0:	4fa8      	ldr	r7, [pc, #672]	@ (800e894 <tcp_slowtmr+0x2cc>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5f2:	f8df 829c 	ldr.w	r8, [pc, #668]	@ 800e890 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 800e5f6:	683e      	ldr	r6, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5f8:	f8df 92c8 	ldr.w	r9, [pc, #712]	@ 800e8c4 <tcp_slowtmr+0x2fc>
 800e5fc:	f8df a2a8 	ldr.w	sl, [pc, #680]	@ 800e8a8 <tcp_slowtmr+0x2e0>
  while (pcb != NULL) {
 800e600:	2e00      	cmp	r6, #0
 800e602:	f040 81ae 	bne.w	800e962 <tcp_slowtmr+0x39a>
}
 800e606:	b007      	add	sp, #28
 800e608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e60c:	7d23      	ldrb	r3, [r4, #20]
 800e60e:	b933      	cbnz	r3, 800e61e <tcp_slowtmr+0x56>
 800e610:	4633      	mov	r3, r6
 800e612:	f240 42c2 	movw	r2, #1218	@ 0x4c2
 800e616:	49a0      	ldr	r1, [pc, #640]	@ (800e898 <tcp_slowtmr+0x2d0>)
 800e618:	4648      	mov	r0, r9
 800e61a:	f006 f83d 	bl	8014698 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e61e:	7d23      	ldrb	r3, [r4, #20]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d106      	bne.n	800e632 <tcp_slowtmr+0x6a>
 800e624:	4633      	mov	r3, r6
 800e626:	f240 42c3 	movw	r2, #1219	@ 0x4c3
 800e62a:	499c      	ldr	r1, [pc, #624]	@ (800e89c <tcp_slowtmr+0x2d4>)
 800e62c:	4648      	mov	r0, r9
 800e62e:	f006 f833 	bl	8014698 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e632:	7d23      	ldrb	r3, [r4, #20]
 800e634:	2b0a      	cmp	r3, #10
 800e636:	d106      	bne.n	800e646 <tcp_slowtmr+0x7e>
 800e638:	4633      	mov	r3, r6
 800e63a:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800e63e:	4998      	ldr	r1, [pc, #608]	@ (800e8a0 <tcp_slowtmr+0x2d8>)
 800e640:	4648      	mov	r0, r9
 800e642:	f006 f829 	bl	8014698 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e646:	4b91      	ldr	r3, [pc, #580]	@ (800e88c <tcp_slowtmr+0x2c4>)
 800e648:	7fa2      	ldrb	r2, [r4, #30]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d104      	bne.n	800e65a <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800e650:	f8d4 a00c 	ldr.w	sl, [r4, #12]
        ++pcb_reset;
 800e654:	4627      	mov	r7, r4
 800e656:	4654      	mov	r4, sl
 800e658:	e7c9      	b.n	800e5ee <tcp_slowtmr+0x26>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e65a:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800e65c:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e65e:	2a02      	cmp	r2, #2
 800e660:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800e664:	d165      	bne.n	800e732 <tcp_slowtmr+0x16a>
 800e666:	2b05      	cmp	r3, #5
 800e668:	d965      	bls.n	800e736 <tcp_slowtmr+0x16e>
      ++pcb_remove;
 800e66a:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800e66e:	7d23      	ldrb	r3, [r4, #20]
 800e670:	2b06      	cmp	r3, #6
 800e672:	d10b      	bne.n	800e68c <tcp_slowtmr+0xc4>
      if (pcb->flags & TF_RXCLOSED) {
 800e674:	8b62      	ldrh	r2, [r4, #26]
 800e676:	06d1      	lsls	r1, r2, #27
 800e678:	d508      	bpl.n	800e68c <tcp_slowtmr+0xc4>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e67a:	682a      	ldr	r2, [r5, #0]
 800e67c:	6a21      	ldr	r1, [r4, #32]
 800e67e:	1a52      	subs	r2, r2, r1
 800e680:	2a28      	cmp	r2, #40	@ 0x28
          ++pcb_remove;
 800e682:	bf84      	itt	hi
 800e684:	f10b 0b01 	addhi.w	fp, fp, #1
 800e688:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e68c:	7a62      	ldrb	r2, [r4, #9]
 800e68e:	0712      	lsls	r2, r2, #28
 800e690:	d505      	bpl.n	800e69e <tcp_slowtmr+0xd6>
 800e692:	2b04      	cmp	r3, #4
 800e694:	f000 80e2 	beq.w	800e85c <tcp_slowtmr+0x294>
        ((pcb->state == ESTABLISHED) ||
 800e698:	2b07      	cmp	r3, #7
 800e69a:	f000 80df 	beq.w	800e85c <tcp_slowtmr+0x294>
    pcb_reset = 0;
 800e69e:	f04f 0a00 	mov.w	sl, #0
    if (pcb->state == SYN_RCVD) {
 800e6a2:	7d23      	ldrb	r3, [r4, #20]
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	f040 8126 	bne.w	800e8f6 <tcp_slowtmr+0x32e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6aa:	682b      	ldr	r3, [r5, #0]
 800e6ac:	6a22      	ldr	r2, [r4, #32]
 800e6ae:	1a9b      	subs	r3, r3, r2
 800e6b0:	2b28      	cmp	r3, #40	@ 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e6b2:	d803      	bhi.n	800e6bc <tcp_slowtmr+0xf4>
    if (pcb_remove) {
 800e6b4:	f1bb 0f00 	cmp.w	fp, #0
 800e6b8:	f000 8132 	beq.w	800e920 <tcp_slowtmr+0x358>
      tcp_pcb_purge(pcb);
 800e6bc:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800e6be:	f8d4 b08c 	ldr.w	fp, [r4, #140]	@ 0x8c
      tcp_pcb_purge(pcb);
 800e6c2:	f7ff ff63 	bl	800e58c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e6c6:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	f000 811b 	beq.w	800e906 <tcp_slowtmr+0x33e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e6d0:	42a3      	cmp	r3, r4
 800e6d2:	d106      	bne.n	800e6e2 <tcp_slowtmr+0x11a>
 800e6d4:	4b6e      	ldr	r3, [pc, #440]	@ (800e890 <tcp_slowtmr+0x2c8>)
 800e6d6:	f240 5271 	movw	r2, #1393	@ 0x571
 800e6da:	4972      	ldr	r1, [pc, #456]	@ (800e8a4 <tcp_slowtmr+0x2dc>)
 800e6dc:	4872      	ldr	r0, [pc, #456]	@ (800e8a8 <tcp_slowtmr+0x2e0>)
 800e6de:	f005 ffdb 	bl	8014698 <iprintf>
        prev->next = pcb->next;
 800e6e2:	68e3      	ldr	r3, [r4, #12]
 800e6e4:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 800e6e6:	f1ba 0f00 	cmp.w	sl, #0
 800e6ea:	d00b      	beq.n	800e704 <tcp_slowtmr+0x13c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6ec:	8b23      	ldrh	r3, [r4, #24]
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	9302      	str	r3, [sp, #8]
 800e6f2:	8ae3      	ldrh	r3, [r4, #22]
 800e6f4:	9301      	str	r3, [sp, #4]
 800e6f6:	1d23      	adds	r3, r4, #4
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	4623      	mov	r3, r4
 800e6fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e6fe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800e700:	f002 fd14 	bl	801112c <tcp_rst>
      err_arg = pcb->callback_arg;
 800e704:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800e706:	4620      	mov	r0, r4
      pcb = pcb->next;
 800e708:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      err_arg = pcb->callback_arg;
 800e70c:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800e70e:	f7ff fda7 	bl	800e260 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e712:	4c66      	ldr	r4, [pc, #408]	@ (800e8ac <tcp_slowtmr+0x2e4>)
 800e714:	2300      	movs	r3, #0
 800e716:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e718:	f1bb 0f00 	cmp.w	fp, #0
 800e71c:	d007      	beq.n	800e72e <tcp_slowtmr+0x166>
 800e71e:	f06f 010c 	mvn.w	r1, #12
 800e722:	9805      	ldr	r0, [sp, #20]
 800e724:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800e726:	7823      	ldrb	r3, [r4, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f47f af5b 	bne.w	800e5e4 <tcp_slowtmr+0x1c>
        ++pcb_reset;
 800e72e:	463c      	mov	r4, r7
 800e730:	e790      	b.n	800e654 <tcp_slowtmr+0x8c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e732:	2b0b      	cmp	r3, #11
 800e734:	e798      	b.n	800e668 <tcp_slowtmr+0xa0>
      if (pcb->persist_backoff > 0) {
 800e736:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d045      	beq.n	800e7ca <tcp_slowtmr+0x202>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e73e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e740:	b133      	cbz	r3, 800e750 <tcp_slowtmr+0x188>
 800e742:	4633      	mov	r3, r6
 800e744:	f44f 629b 	mov.w	r2, #1240	@ 0x4d8
 800e748:	4959      	ldr	r1, [pc, #356]	@ (800e8b0 <tcp_slowtmr+0x2e8>)
 800e74a:	4648      	mov	r0, r9
 800e74c:	f005 ffa4 	bl	8014698 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e750:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e752:	b933      	cbnz	r3, 800e762 <tcp_slowtmr+0x19a>
 800e754:	4b4e      	ldr	r3, [pc, #312]	@ (800e890 <tcp_slowtmr+0x2c8>)
 800e756:	f240 42d9 	movw	r2, #1241	@ 0x4d9
 800e75a:	4956      	ldr	r1, [pc, #344]	@ (800e8b4 <tcp_slowtmr+0x2ec>)
 800e75c:	4852      	ldr	r0, [pc, #328]	@ (800e8a8 <tcp_slowtmr+0x2e0>)
 800e75e:	f005 ff9b 	bl	8014698 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e762:	f894 3096 	ldrb.w	r3, [r4, #150]	@ 0x96
 800e766:	2b0b      	cmp	r3, #11
 800e768:	f63f af7f 	bhi.w	800e66a <tcp_slowtmr+0xa2>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e76c:	f894 2095 	ldrb.w	r2, [r4, #149]	@ 0x95
 800e770:	4b51      	ldr	r3, [pc, #324]	@ (800e8b8 <tcp_slowtmr+0x2f0>)
 800e772:	4413      	add	r3, r2
 800e774:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800e778:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d30b      	bcc.n	800e798 <tcp_slowtmr+0x1d0>
            if (pcb->snd_wnd == 0) {
 800e780:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e784:	b189      	cbz	r1, 800e7aa <tcp_slowtmr+0x1e2>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e786:	4620      	mov	r0, r4
 800e788:	f002 fa88 	bl	8010c9c <tcp_split_unsent_seg>
 800e78c:	b990      	cbnz	r0, 800e7b4 <tcp_slowtmr+0x1ec>
                if (tcp_output(pcb) == ERR_OK) {
 800e78e:	4620      	mov	r0, r4
 800e790:	f002 fd38 	bl	8011204 <tcp_output>
 800e794:	b130      	cbz	r0, 800e7a4 <tcp_slowtmr+0x1dc>
 800e796:	e00d      	b.n	800e7b4 <tcp_slowtmr+0x1ec>
            pcb->persist_cnt++;
 800e798:	3301      	adds	r3, #1
 800e79a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800e79c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800e79e:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800e7a2:	d2ed      	bcs.n	800e780 <tcp_slowtmr+0x1b8>
    pcb_remove = 0;
 800e7a4:	f04f 0b00 	mov.w	fp, #0
 800e7a8:	e761      	b.n	800e66e <tcp_slowtmr+0xa6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	f002 ff30 	bl	8011610 <tcp_zero_window_probe>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d1f7      	bne.n	800e7a4 <tcp_slowtmr+0x1dc>
              pcb->persist_cnt = 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e7ba:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 800e7be:	2b06      	cmp	r3, #6
 800e7c0:	d8f0      	bhi.n	800e7a4 <tcp_slowtmr+0x1dc>
                pcb->persist_backoff++;
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
 800e7c8:	e7ec      	b.n	800e7a4 <tcp_slowtmr+0x1dc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e7ca:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e7cc:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e7d0:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800e7d2:	bf9c      	itt	ls
 800e7d4:	3301      	addls	r3, #1
 800e7d6:	8623      	strhls	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e7d8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800e7dc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	@ 0x30
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	dbdf      	blt.n	800e7a4 <tcp_slowtmr+0x1dc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f002 fbe9 	bl	8010fbc <tcp_rexmit_rto_prepare>
 800e7ea:	b128      	cbz	r0, 800e7f8 <tcp_slowtmr+0x230>
 800e7ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1d8      	bne.n	800e7a4 <tcp_slowtmr+0x1dc>
 800e7f2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d0d5      	beq.n	800e7a4 <tcp_slowtmr+0x1dc>
            if (pcb->state != SYN_SENT) {
 800e7f8:	7d23      	ldrb	r3, [r4, #20]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d014      	beq.n	800e828 <tcp_slowtmr+0x260>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e7fe:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
 800e802:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800e806:	492d      	ldr	r1, [pc, #180]	@ (800e8bc <tcp_slowtmr+0x2f4>)
 800e808:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e80c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e810:	2a0c      	cmp	r2, #12
 800e812:	bf28      	it	cs
 800e814:	220c      	movcs	r2, #12
 800e816:	5c8a      	ldrb	r2, [r1, r2]
 800e818:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e81a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e81e:	4293      	cmp	r3, r2
 800e820:	bfa8      	it	ge
 800e822:	4613      	movge	r3, r2
 800e824:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e828:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
            pcb->rtime = 0;
 800e82c:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e82e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e832:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800e834:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 800e836:	8622      	strh	r2, [r4, #48]	@ 0x30
            pcb->cwnd = pcb->mss;
 800e838:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800e83c:	bf28      	it	cs
 800e83e:	4603      	movcs	r3, r0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e840:	0048      	lsls	r0, r1, #1
            pcb->bytes_acked = 0;
 800e842:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e846:	085b      	lsrs	r3, r3, #1
 800e848:	b280      	uxth	r0, r0
 800e84a:	4283      	cmp	r3, r0
 800e84c:	bf38      	it	cc
 800e84e:	4603      	movcc	r3, r0
            tcp_rexmit_rto_commit(pcb);
 800e850:	4620      	mov	r0, r4
 800e852:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800e856:	f002 fe7d 	bl	8011554 <tcp_rexmit_rto_commit>
 800e85a:	e7a3      	b.n	800e7a4 <tcp_slowtmr+0x1dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e85c:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e85e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e862:	6829      	ldr	r1, [r5, #0]
 800e864:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e866:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e86a:	f503 2224 	add.w	r2, r3, #671744	@ 0xa4000
 800e86e:	f602 42b8 	addw	r2, r2, #3256	@ 0xcb8
 800e872:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e876:	4291      	cmp	r1, r2
 800e878:	d926      	bls.n	800e8c8 <tcp_slowtmr+0x300>
        ++pcb_remove;
 800e87a:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800e87e:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800e882:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 800e886:	e70c      	b.n	800e6a2 <tcp_slowtmr+0xda>
 800e888:	2000f338 	.word	0x2000f338
 800e88c:	2000f324 	.word	0x2000f324
 800e890:	08016c49 	.word	0x08016c49
 800e894:	2000f328 	.word	0x2000f328
 800e898:	08016d79 	.word	0x08016d79
 800e89c:	08016da2 	.word	0x08016da2
 800e8a0:	08016dcb 	.word	0x08016dcb
 800e8a4:	08016e5e 	.word	0x08016e5e
 800e8a8:	08015927 	.word	0x08015927
 800e8ac:	2000f326 	.word	0x2000f326
 800e8b0:	08016df7 	.word	0x08016df7
 800e8b4:	08016e29 	.word	0x08016e29
 800e8b8:	0808ed08 	.word	0x0808ed08
 800e8bc:	0808ed0f 	.word	0x0808ed0f
 800e8c0:	2000f32c 	.word	0x2000f32c
 800e8c4:	08016eb3 	.word	0x08016eb3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e8c8:	f894 2097 	ldrb.w	r2, [r4, #151]	@ 0x97
 800e8cc:	f8df c118 	ldr.w	ip, [pc, #280]	@ 800e9e8 <tcp_slowtmr+0x420>
 800e8d0:	fb0c 3302 	mla	r3, ip, r2, r3
                 / TCP_SLOW_INTERVAL) {
 800e8d4:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8d8:	4299      	cmp	r1, r3
 800e8da:	f67f aee0 	bls.w	800e69e <tcp_slowtmr+0xd6>
        err = tcp_keepalive(pcb);
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f002 fe6e 	bl	80115c0 <tcp_keepalive>
        if (err == ERR_OK) {
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f47f aeda 	bne.w	800e69e <tcp_slowtmr+0xd6>
          pcb->keep_cnt_sent++;
 800e8ea:	f894 3097 	ldrb.w	r3, [r4, #151]	@ 0x97
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
 800e8f4:	e6d3      	b.n	800e69e <tcp_slowtmr+0xd6>
    if (pcb->state == LAST_ACK) {
 800e8f6:	2b09      	cmp	r3, #9
 800e8f8:	f47f aedc 	bne.w	800e6b4 <tcp_slowtmr+0xec>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	6a22      	ldr	r2, [r4, #32]
 800e900:	1a9b      	subs	r3, r3, r2
 800e902:	2bf0      	cmp	r3, #240	@ 0xf0
 800e904:	e6d5      	b.n	800e6b2 <tcp_slowtmr+0xea>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e906:	42a3      	cmp	r3, r4
 800e908:	d006      	beq.n	800e918 <tcp_slowtmr+0x350>
 800e90a:	4633      	mov	r3, r6
 800e90c:	f240 5275 	movw	r2, #1397	@ 0x575
 800e910:	492f      	ldr	r1, [pc, #188]	@ (800e9d0 <tcp_slowtmr+0x408>)
 800e912:	4830      	ldr	r0, [pc, #192]	@ (800e9d4 <tcp_slowtmr+0x40c>)
 800e914:	f005 fec0 	bl	8014698 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e918:	68e3      	ldr	r3, [r4, #12]
 800e91a:	f8c8 3000 	str.w	r3, [r8]
 800e91e:	e6e2      	b.n	800e6e6 <tcp_slowtmr+0x11e>
      ++prev->polltmr;
 800e920:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e922:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800e924:	3301      	adds	r3, #1
      pcb = pcb->next;
 800e926:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 800e92a:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800e92c:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800e92e:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e930:	f63f ae90 	bhi.w	800e654 <tcp_slowtmr+0x8c>
        tcp_active_pcbs_changed = 0;
 800e934:	4f28      	ldr	r7, [pc, #160]	@ (800e9d8 <tcp_slowtmr+0x410>)
        TCP_EVENT_POLL(prev, err);
 800e936:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
        prev->polltmr = 0;
 800e93a:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800e93e:	f887 b000 	strb.w	fp, [r7]
        TCP_EVENT_POLL(prev, err);
 800e942:	b91b      	cbnz	r3, 800e94c <tcp_slowtmr+0x384>
          tcp_output(prev);
 800e944:	4620      	mov	r0, r4
 800e946:	f002 fc5d 	bl	8011204 <tcp_output>
 800e94a:	e683      	b.n	800e654 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 800e94c:	4621      	mov	r1, r4
 800e94e:	6920      	ldr	r0, [r4, #16]
 800e950:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800e952:	783b      	ldrb	r3, [r7, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	f47f ae45 	bne.w	800e5e4 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800e95a:	2800      	cmp	r0, #0
 800e95c:	f47f ae7a 	bne.w	800e654 <tcp_slowtmr+0x8c>
 800e960:	e7f0      	b.n	800e944 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e962:	7d33      	ldrb	r3, [r6, #20]
 800e964:	2b0a      	cmp	r3, #10
 800e966:	d006      	beq.n	800e976 <tcp_slowtmr+0x3ae>
 800e968:	4643      	mov	r3, r8
 800e96a:	f240 52a5 	movw	r2, #1445	@ 0x5a5
 800e96e:	4649      	mov	r1, r9
 800e970:	4650      	mov	r0, sl
 800e972:	f005 fe91 	bl	8014698 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e976:	682b      	ldr	r3, [r5, #0]
 800e978:	6a32      	ldr	r2, [r6, #32]
 800e97a:	1a9b      	subs	r3, r3, r2
 800e97c:	2bf0      	cmp	r3, #240	@ 0xf0
 800e97e:	d910      	bls.n	800e9a2 <tcp_slowtmr+0x3da>
      tcp_pcb_purge(pcb);
 800e980:	4630      	mov	r0, r6
 800e982:	f7ff fe03 	bl	800e58c <tcp_pcb_purge>
      if (prev != NULL) {
 800e986:	b97c      	cbnz	r4, 800e9a8 <tcp_slowtmr+0x3e0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	42b3      	cmp	r3, r6
 800e98c:	d006      	beq.n	800e99c <tcp_slowtmr+0x3d4>
 800e98e:	4b13      	ldr	r3, [pc, #76]	@ (800e9dc <tcp_slowtmr+0x414>)
 800e990:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800e994:	4912      	ldr	r1, [pc, #72]	@ (800e9e0 <tcp_slowtmr+0x418>)
 800e996:	480f      	ldr	r0, [pc, #60]	@ (800e9d4 <tcp_slowtmr+0x40c>)
 800e998:	f005 fe7e 	bl	8014698 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e99c:	68f3      	ldr	r3, [r6, #12]
 800e99e:	603b      	str	r3, [r7, #0]
 800e9a0:	e00e      	b.n	800e9c0 <tcp_slowtmr+0x3f8>
      prev = pcb;
 800e9a2:	4634      	mov	r4, r6
      pcb = pcb->next;
 800e9a4:	68f6      	ldr	r6, [r6, #12]
 800e9a6:	e62b      	b.n	800e600 <tcp_slowtmr+0x38>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	42b3      	cmp	r3, r6
 800e9ac:	d106      	bne.n	800e9bc <tcp_slowtmr+0x3f4>
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e9dc <tcp_slowtmr+0x414>)
 800e9b0:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e9b4:	490b      	ldr	r1, [pc, #44]	@ (800e9e4 <tcp_slowtmr+0x41c>)
 800e9b6:	4807      	ldr	r0, [pc, #28]	@ (800e9d4 <tcp_slowtmr+0x40c>)
 800e9b8:	f005 fe6e 	bl	8014698 <iprintf>
        prev->next = pcb->next;
 800e9bc:	68f3      	ldr	r3, [r6, #12]
 800e9be:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800e9c0:	f8d6 b00c 	ldr.w	fp, [r6, #12]
      tcp_free(pcb2);
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff fc4b 	bl	800e260 <tcp_free>
      pcb = pcb->next;
 800e9ca:	465e      	mov	r6, fp
 800e9cc:	e618      	b.n	800e600 <tcp_slowtmr+0x38>
 800e9ce:	bf00      	nop
 800e9d0:	08016e89 	.word	0x08016e89
 800e9d4:	08015927 	.word	0x08015927
 800e9d8:	2000f326 	.word	0x2000f326
 800e9dc:	08016c49 	.word	0x08016c49
 800e9e0:	08016f09 	.word	0x08016f09
 800e9e4:	08016ee2 	.word	0x08016ee2
 800e9e8:	000124f8 	.word	0x000124f8

0800e9ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	b931      	cbnz	r1, 800ea02 <tcp_pcb_remove+0x16>
 800e9f4:	4b25      	ldr	r3, [pc, #148]	@ (800ea8c <tcp_pcb_remove+0xa0>)
 800e9f6:	f640 028d 	movw	r2, #2189	@ 0x88d
 800e9fa:	4925      	ldr	r1, [pc, #148]	@ (800ea90 <tcp_pcb_remove+0xa4>)
 800e9fc:	4825      	ldr	r0, [pc, #148]	@ (800ea94 <tcp_pcb_remove+0xa8>)
 800e9fe:	f005 fe4b 	bl	8014698 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ea02:	b935      	cbnz	r5, 800ea12 <tcp_pcb_remove+0x26>
 800ea04:	4b21      	ldr	r3, [pc, #132]	@ (800ea8c <tcp_pcb_remove+0xa0>)
 800ea06:	f640 028e 	movw	r2, #2190	@ 0x88e
 800ea0a:	4923      	ldr	r1, [pc, #140]	@ (800ea98 <tcp_pcb_remove+0xac>)
 800ea0c:	4821      	ldr	r0, [pc, #132]	@ (800ea94 <tcp_pcb_remove+0xa8>)
 800ea0e:	f005 fe43 	bl	8014698 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	42a3      	cmp	r3, r4
 800ea16:	d116      	bne.n	800ea46 <tcp_pcb_remove+0x5a>
 800ea18:	68e3      	ldr	r3, [r4, #12]
 800ea1a:	602b      	str	r3, [r5, #0]
 800ea1c:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800ea1e:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800ea20:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800ea22:	f7ff fdb3 	bl	800e58c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ea26:	7d23      	ldrb	r3, [r4, #20]
 800ea28:	2b0a      	cmp	r3, #10
 800ea2a:	d114      	bne.n	800ea56 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ea2c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ea2e:	bb23      	cbnz	r3, 800ea7a <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ea30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea32:	b1f3      	cbz	r3, 800ea72 <tcp_pcb_remove+0x86>
 800ea34:	4b15      	ldr	r3, [pc, #84]	@ (800ea8c <tcp_pcb_remove+0xa0>)
 800ea36:	f640 029e 	movw	r2, #2206	@ 0x89e
 800ea3a:	4918      	ldr	r1, [pc, #96]	@ (800ea9c <tcp_pcb_remove+0xb0>)
 800ea3c:	4815      	ldr	r0, [pc, #84]	@ (800ea94 <tcp_pcb_remove+0xa8>)
 800ea3e:	f005 fe2b 	bl	8014698 <iprintf>
 800ea42:	e016      	b.n	800ea72 <tcp_pcb_remove+0x86>
  TCP_RMV(pcblist, pcb);
 800ea44:	4613      	mov	r3, r2
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0e8      	beq.n	800ea1c <tcp_pcb_remove+0x30>
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	42a2      	cmp	r2, r4
 800ea4e:	d1f9      	bne.n	800ea44 <tcp_pcb_remove+0x58>
 800ea50:	68e2      	ldr	r2, [r4, #12]
 800ea52:	60da      	str	r2, [r3, #12]
 800ea54:	e7e2      	b.n	800ea1c <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d00b      	beq.n	800ea72 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800ea5a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800ea5c:	07da      	lsls	r2, r3, #31
 800ea5e:	d5e5      	bpl.n	800ea2c <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800ea60:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800ea64:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800ea66:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800ea68:	f002 fbcc 	bl	8011204 <tcp_output>
  if (pcb->state != LISTEN) {
 800ea6c:	7d23      	ldrb	r3, [r4, #20]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d1dc      	bne.n	800ea2c <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ea72:	2300      	movs	r3, #0
 800ea74:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ea76:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ea78:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ea7a:	4b04      	ldr	r3, [pc, #16]	@ (800ea8c <tcp_pcb_remove+0xa0>)
 800ea7c:	f640 029d 	movw	r2, #2205	@ 0x89d
 800ea80:	4907      	ldr	r1, [pc, #28]	@ (800eaa0 <tcp_pcb_remove+0xb4>)
 800ea82:	4804      	ldr	r0, [pc, #16]	@ (800ea94 <tcp_pcb_remove+0xa8>)
 800ea84:	f005 fe08 	bl	8014698 <iprintf>
 800ea88:	e7d2      	b.n	800ea30 <tcp_pcb_remove+0x44>
 800ea8a:	bf00      	nop
 800ea8c:	08016c49 	.word	0x08016c49
 800ea90:	08016f2f 	.word	0x08016f2f
 800ea94:	08015927 	.word	0x08015927
 800ea98:	08016f4b 	.word	0x08016f4b
 800ea9c:	08016f83 	.word	0x08016f83
 800eaa0:	08016f6b 	.word	0x08016f6b

0800eaa4 <tcp_close_shutdown>:
{
 800eaa4:	b530      	push	{r4, r5, lr}
 800eaa6:	460d      	mov	r5, r1
 800eaa8:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eaaa:	4604      	mov	r4, r0
 800eaac:	b930      	cbnz	r0, 800eabc <tcp_close_shutdown+0x18>
 800eaae:	4b4b      	ldr	r3, [pc, #300]	@ (800ebdc <tcp_close_shutdown+0x138>)
 800eab0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800eab4:	494a      	ldr	r1, [pc, #296]	@ (800ebe0 <tcp_close_shutdown+0x13c>)
 800eab6:	484b      	ldr	r0, [pc, #300]	@ (800ebe4 <tcp_close_shutdown+0x140>)
 800eab8:	f005 fdee 	bl	8014698 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eabc:	7d23      	ldrb	r3, [r4, #20]
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	d040      	beq.n	800eb44 <tcp_close_shutdown+0xa0>
 800eac2:	2b04      	cmp	r3, #4
 800eac4:	d001      	beq.n	800eaca <tcp_close_shutdown+0x26>
 800eac6:	2b07      	cmp	r3, #7
 800eac8:	d13c      	bne.n	800eb44 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eaca:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800eacc:	b923      	cbnz	r3, 800ead8 <tcp_close_shutdown+0x34>
 800eace:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800ead0:	f640 3368 	movw	r3, #2920	@ 0xb68
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d07b      	beq.n	800ebd0 <tcp_close_shutdown+0x12c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ead8:	8b63      	ldrh	r3, [r4, #26]
 800eada:	06db      	lsls	r3, r3, #27
 800eadc:	d406      	bmi.n	800eaec <tcp_close_shutdown+0x48>
 800eade:	4b3f      	ldr	r3, [pc, #252]	@ (800ebdc <tcp_close_shutdown+0x138>)
 800eae0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800eae4:	4940      	ldr	r1, [pc, #256]	@ (800ebe8 <tcp_close_shutdown+0x144>)
 800eae6:	483f      	ldr	r0, [pc, #252]	@ (800ebe4 <tcp_close_shutdown+0x140>)
 800eae8:	f005 fdd6 	bl	8014698 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eaec:	8b23      	ldrh	r3, [r4, #24]
 800eaee:	4620      	mov	r0, r4
 800eaf0:	9302      	str	r3, [sp, #8]
 800eaf2:	8ae3      	ldrh	r3, [r4, #22]
 800eaf4:	9301      	str	r3, [sp, #4]
 800eaf6:	1d23      	adds	r3, r4, #4
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4623      	mov	r3, r4
 800eafc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800eafe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800eb00:	f002 fb14 	bl	801112c <tcp_rst>
      tcp_pcb_purge(pcb);
 800eb04:	4620      	mov	r0, r4
 800eb06:	f7ff fd41 	bl	800e58c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eb0a:	4a38      	ldr	r2, [pc, #224]	@ (800ebec <tcp_close_shutdown+0x148>)
 800eb0c:	6813      	ldr	r3, [r2, #0]
 800eb0e:	42a3      	cmp	r3, r4
 800eb10:	d110      	bne.n	800eb34 <tcp_close_shutdown+0x90>
 800eb12:	68e3      	ldr	r3, [r4, #12]
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	2300      	movs	r3, #0
 800eb18:	2201      	movs	r2, #1
 800eb1a:	60e3      	str	r3, [r4, #12]
 800eb1c:	4b34      	ldr	r3, [pc, #208]	@ (800ebf0 <tcp_close_shutdown+0x14c>)
 800eb1e:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800eb20:	4b34      	ldr	r3, [pc, #208]	@ (800ebf4 <tcp_close_shutdown+0x150>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	42a3      	cmp	r3, r4
 800eb26:	d11d      	bne.n	800eb64 <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 800eb28:	f001 fc4e 	bl	80103c8 <tcp_trigger_input_pcb_close>
}
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	b005      	add	sp, #20
 800eb30:	bd30      	pop	{r4, r5, pc}
      TCP_RMV_ACTIVE(pcb);
 800eb32:	4613      	mov	r3, r2
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d0ee      	beq.n	800eb16 <tcp_close_shutdown+0x72>
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	42a2      	cmp	r2, r4
 800eb3c:	d1f9      	bne.n	800eb32 <tcp_close_shutdown+0x8e>
 800eb3e:	68e2      	ldr	r2, [r4, #12]
 800eb40:	60da      	str	r2, [r3, #12]
 800eb42:	e7e8      	b.n	800eb16 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d01a      	beq.n	800eb7e <tcp_close_shutdown+0xda>
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d039      	beq.n	800ebc0 <tcp_close_shutdown+0x11c>
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d13f      	bne.n	800ebd0 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800eb50:	8ae3      	ldrh	r3, [r4, #22]
 800eb52:	b13b      	cbz	r3, 800eb64 <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb54:	4a28      	ldr	r2, [pc, #160]	@ (800ebf8 <tcp_close_shutdown+0x154>)
 800eb56:	6813      	ldr	r3, [r2, #0]
 800eb58:	42a3      	cmp	r3, r4
 800eb5a:	d108      	bne.n	800eb6e <tcp_close_shutdown+0xca>
 800eb5c:	68e3      	ldr	r3, [r4, #12]
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	2300      	movs	r3, #0
 800eb62:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800eb64:	4620      	mov	r0, r4
 800eb66:	f7ff fb7b 	bl	800e260 <tcp_free>
      break;
 800eb6a:	e7df      	b.n	800eb2c <tcp_close_shutdown+0x88>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d0f6      	beq.n	800eb60 <tcp_close_shutdown+0xbc>
 800eb72:	68da      	ldr	r2, [r3, #12]
 800eb74:	42a2      	cmp	r2, r4
 800eb76:	d1f9      	bne.n	800eb6c <tcp_close_shutdown+0xc8>
 800eb78:	68e2      	ldr	r2, [r4, #12]
 800eb7a:	60da      	str	r2, [r3, #12]
 800eb7c:	e7f0      	b.n	800eb60 <tcp_close_shutdown+0xbc>
 800eb7e:	491f      	ldr	r1, [pc, #124]	@ (800ebfc <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800eb80:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eb82:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800eb86:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eb88:	b9a2      	cbnz	r2, 800ebb4 <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	2b04      	cmp	r3, #4
 800eb8e:	d1f8      	bne.n	800eb82 <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800eb90:	4621      	mov	r1, r4
 800eb92:	481b      	ldr	r0, [pc, #108]	@ (800ec00 <tcp_close_shutdown+0x15c>)
 800eb94:	f7ff ff2a 	bl	800e9ec <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eb98:	7d23      	ldrb	r3, [r4, #20]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d105      	bne.n	800ebaa <tcp_close_shutdown+0x106>
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800ebdc <tcp_close_shutdown+0x138>)
 800eba0:	22df      	movs	r2, #223	@ 0xdf
 800eba2:	4918      	ldr	r1, [pc, #96]	@ (800ec04 <tcp_close_shutdown+0x160>)
 800eba4:	480f      	ldr	r0, [pc, #60]	@ (800ebe4 <tcp_close_shutdown+0x140>)
 800eba6:	f005 fd77 	bl	8014698 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ebaa:	4621      	mov	r1, r4
 800ebac:	2002      	movs	r0, #2
 800ebae:	f7fe fe43 	bl	800d838 <memp_free>
}
 800ebb2:	e7bb      	b.n	800eb2c <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800ebb4:	6f95      	ldr	r5, [r2, #120]	@ 0x78
 800ebb6:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800ebb8:	bf08      	it	eq
 800ebba:	6790      	streq	r0, [r2, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ebbc:	68d2      	ldr	r2, [r2, #12]
 800ebbe:	e7e3      	b.n	800eb88 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	480a      	ldr	r0, [pc, #40]	@ (800ebec <tcp_close_shutdown+0x148>)
 800ebc4:	f7ff ff12 	bl	800e9ec <tcp_pcb_remove>
 800ebc8:	4b09      	ldr	r3, [pc, #36]	@ (800ebf0 <tcp_close_shutdown+0x14c>)
 800ebca:	2201      	movs	r2, #1
 800ebcc:	701a      	strb	r2, [r3, #0]
 800ebce:	e7c9      	b.n	800eb64 <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 800ebd0:	4620      	mov	r0, r4
}
 800ebd2:	b005      	add	sp, #20
 800ebd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800ebd8:	f7ff bb06 	b.w	800e1e8 <tcp_close_shutdown_fin>
 800ebdc:	08016c49 	.word	0x08016c49
 800ebe0:	08016f9c 	.word	0x08016f9c
 800ebe4:	08015927 	.word	0x08015927
 800ebe8:	08016fbc 	.word	0x08016fbc
 800ebec:	2000f32c 	.word	0x2000f32c
 800ebf0:	2000f326 	.word	0x2000f326
 800ebf4:	2000f33c 	.word	0x2000f33c
 800ebf8:	2000f334 	.word	0x2000f334
 800ebfc:	0808ecf8 	.word	0x0808ecf8
 800ec00:	2000f330 	.word	0x2000f330
 800ec04:	08016fd5 	.word	0x08016fd5

0800ec08 <tcp_close>:
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec08:	b148      	cbz	r0, 800ec1e <tcp_close+0x16>
  if (pcb->state != LISTEN) {
 800ec0a:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800ec0c:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800ec0e:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ec10:	bf1e      	ittt	ne
 800ec12:	8b43      	ldrhne	r3, [r0, #26]
 800ec14:	f043 0310 	orrne.w	r3, r3, #16
 800ec18:	8343      	strhne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800ec1a:	f7ff bf43 	b.w	800eaa4 <tcp_close_shutdown>
}
 800ec1e:	f06f 000f 	mvn.w	r0, #15
 800ec22:	4770      	bx	lr

0800ec24 <tcp_recv_null>:
{
 800ec24:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec26:	4608      	mov	r0, r1
{
 800ec28:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec2a:	b171      	cbz	r1, 800ec4a <tcp_recv_null+0x26>
  if (p != NULL) {
 800ec2c:	b13a      	cbz	r2, 800ec3e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 800ec2e:	8911      	ldrh	r1, [r2, #8]
 800ec30:	f7ff fbfa 	bl	800e428 <tcp_recved>
    pbuf_free(p);
 800ec34:	4620      	mov	r0, r4
 800ec36:	f7fe fffb 	bl	800dc30 <pbuf_free>
  return ERR_OK;
 800ec3a:	2000      	movs	r0, #0
}
 800ec3c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1fb      	bne.n	800ec3a <tcp_recv_null+0x16>
}
 800ec42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800ec46:	f7ff bfdf 	b.w	800ec08 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec4a:	f06f 000f 	mvn.w	r0, #15
 800ec4e:	e7f5      	b.n	800ec3c <tcp_recv_null+0x18>

0800ec50 <tcp_process_refused_data>:
{
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec52:	4604      	mov	r4, r0
 800ec54:	b380      	cbz	r0, 800ecb8 <tcp_process_refused_data+0x68>
    u8_t refused_flags = pcb->refused_data->flags;
 800ec56:	6f46      	ldr	r6, [r0, #116]	@ 0x74
    pcb->refused_data = NULL;
 800ec58:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ec5a:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800ec5e:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800ec60:	6743      	str	r3, [r0, #116]	@ 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ec62:	b1e5      	cbz	r5, 800ec9e <tcp_process_refused_data+0x4e>
 800ec64:	4601      	mov	r1, r0
 800ec66:	4632      	mov	r2, r6
 800ec68:	6900      	ldr	r0, [r0, #16]
 800ec6a:	47a8      	blx	r5
 800ec6c:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800ec6e:	b9e8      	cbnz	r0, 800ecac <tcp_process_refused_data+0x5c>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec70:	06bb      	lsls	r3, r7, #26
 800ec72:	d512      	bpl.n	800ec9a <tcp_process_refused_data+0x4a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec74:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800ec76:	f640 3268 	movw	r2, #2920	@ 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800ec7a:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec7e:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800ec80:	bf1c      	itt	ne
 800ec82:	3301      	addne	r3, #1
 800ec84:	8523      	strhne	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800ec86:	b146      	cbz	r6, 800ec9a <tcp_process_refused_data+0x4a>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	6920      	ldr	r0, [r4, #16]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800ec92:	300d      	adds	r0, #13
 800ec94:	d101      	bne.n	800ec9a <tcp_process_refused_data+0x4a>
          return ERR_ABRT;
 800ec96:	f06f 050c 	mvn.w	r5, #12
}
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ec9e:	4601      	mov	r1, r0
 800eca0:	462b      	mov	r3, r5
 800eca2:	4632      	mov	r2, r6
 800eca4:	4628      	mov	r0, r5
 800eca6:	f7ff ffbd 	bl	800ec24 <tcp_recv_null>
 800ecaa:	e7df      	b.n	800ec6c <tcp_process_refused_data+0x1c>
    } else if (err == ERR_ABRT) {
 800ecac:	350d      	adds	r5, #13
 800ecae:	d0f2      	beq.n	800ec96 <tcp_process_refused_data+0x46>
      return ERR_INPROGRESS;
 800ecb0:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800ecb4:	6766      	str	r6, [r4, #116]	@ 0x74
      return ERR_INPROGRESS;
 800ecb6:	e7f0      	b.n	800ec9a <tcp_process_refused_data+0x4a>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecb8:	f06f 050f 	mvn.w	r5, #15
 800ecbc:	e7ed      	b.n	800ec9a <tcp_process_refused_data+0x4a>
	...

0800ecc0 <tcp_fasttmr>:
{
 800ecc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800ecc4:	4d1b      	ldr	r5, [pc, #108]	@ (800ed34 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800ecc6:	4f1c      	ldr	r7, [pc, #112]	@ (800ed38 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800ecc8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800ecca:	4e1c      	ldr	r6, [pc, #112]	@ (800ed3c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800eccc:	3301      	adds	r3, #1
 800ecce:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800ecd0:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800ecd2:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800ecd6:	b90c      	cbnz	r4, 800ecdc <tcp_fasttmr+0x1c>
}
 800ecd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800ecdc:	782b      	ldrb	r3, [r5, #0]
 800ecde:	7fa2      	ldrb	r2, [r4, #30]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d024      	beq.n	800ed2e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800ece4:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800ece6:	8b63      	ldrh	r3, [r4, #26]
 800ece8:	07d9      	lsls	r1, r3, #31
 800ecea:	d509      	bpl.n	800ed00 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800ecec:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ecf0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ecf2:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800ecf4:	f002 fa86 	bl	8011204 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ecf8:	8b63      	ldrh	r3, [r4, #26]
 800ecfa:	f023 0303 	bic.w	r3, r3, #3
 800ecfe:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800ed00:	8b63      	ldrh	r3, [r4, #26]
 800ed02:	071a      	lsls	r2, r3, #28
 800ed04:	d505      	bpl.n	800ed12 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed06:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800ed0a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed0c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ed0e:	f7ff fa6b 	bl	800e1e8 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800ed12:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      next = pcb->next;
 800ed14:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800ed18:	b13b      	cbz	r3, 800ed2a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800ed1a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800ed1c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800ed20:	f7ff ff96 	bl	800ec50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ed24:	7833      	ldrb	r3, [r6, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1d2      	bne.n	800ecd0 <tcp_fasttmr+0x10>
      pcb = next;
 800ed2a:	464c      	mov	r4, r9
 800ed2c:	e7d3      	b.n	800ecd6 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800ed2e:	68e4      	ldr	r4, [r4, #12]
 800ed30:	e7d1      	b.n	800ecd6 <tcp_fasttmr+0x16>
 800ed32:	bf00      	nop
 800ed34:	2000f324 	.word	0x2000f324
 800ed38:	2000f32c 	.word	0x2000f32c
 800ed3c:	2000f326 	.word	0x2000f326

0800ed40 <tcp_tmr>:
{
 800ed40:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ed42:	f7ff ffbd 	bl	800ecc0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ed46:	4a06      	ldr	r2, [pc, #24]	@ (800ed60 <tcp_tmr+0x20>)
 800ed48:	7813      	ldrb	r3, [r2, #0]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	7013      	strb	r3, [r2, #0]
 800ed50:	07db      	lsls	r3, r3, #31
 800ed52:	d503      	bpl.n	800ed5c <tcp_tmr+0x1c>
}
 800ed54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800ed58:	f7ff bc36 	b.w	800e5c8 <tcp_slowtmr>
}
 800ed5c:	bd08      	pop	{r3, pc}
 800ed5e:	bf00      	nop
 800ed60:	2000f325 	.word	0x2000f325

0800ed64 <tcp_shutdown>:
{
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4615      	mov	r5, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed68:	4604      	mov	r4, r0
 800ed6a:	b310      	cbz	r0, 800edb2 <tcp_shutdown+0x4e>
  if (pcb->state == LISTEN) {
 800ed6c:	7d03      	ldrb	r3, [r0, #20]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d017      	beq.n	800eda2 <tcp_shutdown+0x3e>
  if (shut_rx) {
 800ed72:	b181      	cbz	r1, 800ed96 <tcp_shutdown+0x32>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ed74:	8b43      	ldrh	r3, [r0, #26]
 800ed76:	f043 0310 	orr.w	r3, r3, #16
 800ed7a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800ed7c:	b122      	cbz	r2, 800ed88 <tcp_shutdown+0x24>
      return tcp_close_shutdown(pcb, 1);
 800ed7e:	2101      	movs	r1, #1
}
 800ed80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ed84:	f7ff be8e 	b.w	800eaa4 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800ed88:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ed8a:	b110      	cbz	r0, 800ed92 <tcp_shutdown+0x2e>
      pbuf_free(pcb->refused_data);
 800ed8c:	f7fe ff50 	bl	800dc30 <pbuf_free>
      pcb->refused_data = NULL;
 800ed90:	6765      	str	r5, [r4, #116]	@ 0x74
  return ERR_OK;
 800ed92:	2000      	movs	r0, #0
}
 800ed94:	bd38      	pop	{r3, r4, r5, pc}
  if (shut_tx) {
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	d0fb      	beq.n	800ed92 <tcp_shutdown+0x2e>
    switch (pcb->state) {
 800ed9a:	2b04      	cmp	r3, #4
 800ed9c:	d804      	bhi.n	800eda8 <tcp_shutdown+0x44>
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d804      	bhi.n	800edac <tcp_shutdown+0x48>
 800eda2:	f06f 000a 	mvn.w	r0, #10
 800eda6:	e7f5      	b.n	800ed94 <tcp_shutdown+0x30>
 800eda8:	2b07      	cmp	r3, #7
 800edaa:	d1fa      	bne.n	800eda2 <tcp_shutdown+0x3e>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800edac:	2100      	movs	r1, #0
 800edae:	4620      	mov	r0, r4
 800edb0:	e7e6      	b.n	800ed80 <tcp_shutdown+0x1c>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800edb2:	f06f 000f 	mvn.w	r0, #15
 800edb6:	e7ed      	b.n	800ed94 <tcp_shutdown+0x30>

0800edb8 <tcp_abandon>:
{
 800edb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edbc:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800edbe:	4604      	mov	r4, r0
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d05e      	beq.n	800ee82 <tcp_abandon+0xca>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800edc4:	7d03      	ldrb	r3, [r0, #20]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d106      	bne.n	800edd8 <tcp_abandon+0x20>
 800edca:	4b2f      	ldr	r3, [pc, #188]	@ (800ee88 <tcp_abandon+0xd0>)
 800edcc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800edd0:	492e      	ldr	r1, [pc, #184]	@ (800ee8c <tcp_abandon+0xd4>)
 800edd2:	482f      	ldr	r0, [pc, #188]	@ (800ee90 <tcp_abandon+0xd8>)
 800edd4:	f005 fc60 	bl	8014698 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800edd8:	7d23      	ldrb	r3, [r4, #20]
 800edda:	2b0a      	cmp	r3, #10
 800eddc:	d109      	bne.n	800edf2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800edde:	4621      	mov	r1, r4
 800ede0:	482c      	ldr	r0, [pc, #176]	@ (800ee94 <tcp_abandon+0xdc>)
 800ede2:	f7ff fe03 	bl	800e9ec <tcp_pcb_remove>
    tcp_free(pcb);
 800ede6:	4620      	mov	r0, r4
}
 800ede8:	b004      	add	sp, #16
 800edea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800edee:	f7ff ba37 	b.w	800e260 <tcp_free>
    seqno = pcb->snd_nxt;
 800edf2:	f8d4 9050 	ldr.w	r9, [r4, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800edf6:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
    errf = pcb->errf;
 800edfa:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
    errf_arg = pcb->callback_arg;
 800edfe:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800ee02:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d134      	bne.n	800ee72 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 800ee08:	bb0d      	cbnz	r5, 800ee4e <tcp_abandon+0x96>
    u16_t local_port = 0;
 800ee0a:	2500      	movs	r5, #0
    int send_rst = 0;
 800ee0c:	462e      	mov	r6, r5
    if (pcb->unacked != NULL) {
 800ee0e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800ee10:	b108      	cbz	r0, 800ee16 <tcp_abandon+0x5e>
      tcp_segs_free(pcb->unacked);
 800ee12:	f7ff fb49 	bl	800e4a8 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800ee16:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800ee18:	b108      	cbz	r0, 800ee1e <tcp_abandon+0x66>
      tcp_segs_free(pcb->unsent);
 800ee1a:	f7ff fb45 	bl	800e4a8 <tcp_segs_free>
    if (send_rst) {
 800ee1e:	b156      	cbz	r6, 800ee36 <tcp_abandon+0x7e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ee20:	8b23      	ldrh	r3, [r4, #24]
 800ee22:	4652      	mov	r2, sl
 800ee24:	4649      	mov	r1, r9
 800ee26:	4620      	mov	r0, r4
 800ee28:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800ee2c:	1d23      	adds	r3, r4, #4
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	4623      	mov	r3, r4
 800ee32:	f002 f97b 	bl	801112c <tcp_rst>
    tcp_free(pcb);
 800ee36:	4620      	mov	r0, r4
 800ee38:	f7ff fa12 	bl	800e260 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ee3c:	b30f      	cbz	r7, 800ee82 <tcp_abandon+0xca>
 800ee3e:	f06f 010c 	mvn.w	r1, #12
 800ee42:	4640      	mov	r0, r8
 800ee44:	463b      	mov	r3, r7
}
 800ee46:	b004      	add	sp, #16
 800ee48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ee4c:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ee4e:	4a12      	ldr	r2, [pc, #72]	@ (800ee98 <tcp_abandon+0xe0>)
 800ee50:	6813      	ldr	r3, [r2, #0]
 800ee52:	42a3      	cmp	r3, r4
 800ee54:	d105      	bne.n	800ee62 <tcp_abandon+0xaa>
 800ee56:	68e3      	ldr	r3, [r4, #12]
 800ee58:	6013      	str	r3, [r2, #0]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60e3      	str	r3, [r4, #12]
 800ee5e:	e7d4      	b.n	800ee0a <tcp_abandon+0x52>
 800ee60:	4613      	mov	r3, r2
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d0f9      	beq.n	800ee5a <tcp_abandon+0xa2>
 800ee66:	68da      	ldr	r2, [r3, #12]
 800ee68:	42a2      	cmp	r2, r4
 800ee6a:	d1f9      	bne.n	800ee60 <tcp_abandon+0xa8>
 800ee6c:	68e2      	ldr	r2, [r4, #12]
 800ee6e:	60da      	str	r2, [r3, #12]
 800ee70:	e7f3      	b.n	800ee5a <tcp_abandon+0xa2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee72:	4621      	mov	r1, r4
 800ee74:	4809      	ldr	r0, [pc, #36]	@ (800ee9c <tcp_abandon+0xe4>)
 800ee76:	f7ff fdb9 	bl	800e9ec <tcp_pcb_remove>
 800ee7a:	4b09      	ldr	r3, [pc, #36]	@ (800eea0 <tcp_abandon+0xe8>)
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	e7c5      	b.n	800ee0e <tcp_abandon+0x56>
}
 800ee82:	b004      	add	sp, #16
 800ee84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee88:	08016c49 	.word	0x08016c49
 800ee8c:	08016fee 	.word	0x08016fee
 800ee90:	08015927 	.word	0x08015927
 800ee94:	2000f328 	.word	0x2000f328
 800ee98:	2000f334 	.word	0x2000f334
 800ee9c:	2000f32c 	.word	0x2000f32c
 800eea0:	2000f326 	.word	0x2000f326

0800eea4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800eea4:	2101      	movs	r1, #1
 800eea6:	f7ff bf87 	b.w	800edb8 <tcp_abandon>
	...

0800eeac <tcp_accept_null>:
{
 800eeac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800eeae:	460c      	mov	r4, r1
 800eeb0:	b931      	cbnz	r1, 800eec0 <tcp_accept_null+0x14>
 800eeb2:	4b06      	ldr	r3, [pc, #24]	@ (800eecc <tcp_accept_null+0x20>)
 800eeb4:	f44f 7244 	mov.w	r2, #784	@ 0x310
 800eeb8:	4905      	ldr	r1, [pc, #20]	@ (800eed0 <tcp_accept_null+0x24>)
 800eeba:	4806      	ldr	r0, [pc, #24]	@ (800eed4 <tcp_accept_null+0x28>)
 800eebc:	f005 fbec 	bl	8014698 <iprintf>
  tcp_abort(pcb);
 800eec0:	4620      	mov	r0, r4
 800eec2:	f7ff ffef 	bl	800eea4 <tcp_abort>
}
 800eec6:	f06f 000c 	mvn.w	r0, #12
 800eeca:	bd10      	pop	{r4, pc}
 800eecc:	08016c49 	.word	0x08016c49
 800eed0:	0801701f 	.word	0x0801701f
 800eed4:	08015927 	.word	0x08015927

0800eed8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eedc:	4605      	mov	r5, r0
 800eede:	b930      	cbnz	r0, 800eeee <tcp_netif_ip_addr_changed_pcblist+0x16>
 800eee0:	4b09      	ldr	r3, [pc, #36]	@ (800ef08 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800eee2:	f640 120a 	movw	r2, #2314	@ 0x90a
 800eee6:	4909      	ldr	r1, [pc, #36]	@ (800ef0c <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800eee8:	4809      	ldr	r0, [pc, #36]	@ (800ef10 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800eeea:	f005 fbd5 	bl	8014698 <iprintf>

  while (pcb != NULL) {
 800eeee:	b904      	cbnz	r4, 800eef2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800eef0:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 800eef2:	6822      	ldr	r2, [r4, #0]
 800eef4:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800eef6:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d102      	bne.n	800ef02 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7ff ffd1 	bl	800eea4 <tcp_abort>
{
 800ef02:	4634      	mov	r4, r6
 800ef04:	e7f3      	b.n	800eeee <tcp_netif_ip_addr_changed_pcblist+0x16>
 800ef06:	bf00      	nop
 800ef08:	08016c49 	.word	0x08016c49
 800ef0c:	0801703c 	.word	0x0801703c
 800ef10:	08015927 	.word	0x08015927

0800ef14 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef14:	4b0c      	ldr	r3, [pc, #48]	@ (800ef48 <tcp_kill_state+0x34>)
  inactivity = 0;
 800ef16:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef18:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef4c <tcp_kill_state+0x38>)
{
 800ef1c:	b430      	push	{r4, r5}
 800ef1e:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef20:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800ef22:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef24:	b919      	cbnz	r1, 800ef2e <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800ef26:	b168      	cbz	r0, 800ef44 <tcp_kill_state+0x30>
}
 800ef28:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800ef2a:	f7ff bf45 	b.w	800edb8 <tcp_abandon>
    if (pcb->state == state) {
 800ef2e:	7d0b      	ldrb	r3, [r1, #20]
 800ef30:	42a3      	cmp	r3, r4
 800ef32:	d105      	bne.n	800ef40 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef34:	6a0b      	ldr	r3, [r1, #32]
 800ef36:	1aeb      	subs	r3, r5, r3
 800ef38:	4293      	cmp	r3, r2
        inactivity = tcp_ticks - pcb->tmr;
 800ef3a:	bf24      	itt	cs
 800ef3c:	461a      	movcs	r2, r3
        inactive = pcb;
 800ef3e:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef40:	68c9      	ldr	r1, [r1, #12]
 800ef42:	e7ef      	b.n	800ef24 <tcp_kill_state+0x10>
}
 800ef44:	bc30      	pop	{r4, r5}
 800ef46:	4770      	bx	lr
 800ef48:	2000f32c 	.word	0x2000f32c
 800ef4c:	2000f338 	.word	0x2000f338

0800ef50 <tcp_alloc>:
{
 800ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef52:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef54:	2001      	movs	r0, #1
 800ef56:	f7fe fc51 	bl	800d7fc <memp_malloc>
  if (pcb == NULL) {
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d136      	bne.n	800efce <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef60:	4e3f      	ldr	r6, [pc, #252]	@ (800f060 <tcp_alloc+0x110>)
 800ef62:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d157      	bne.n	800f018 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef68:	4b3e      	ldr	r3, [pc, #248]	@ (800f064 <tcp_alloc+0x114>)
  inactivity = 0;
 800ef6a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef6c:	4d3e      	ldr	r5, [pc, #248]	@ (800f068 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef6e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef70:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d15b      	bne.n	800f02e <tcp_alloc+0xde>
  if (inactive != NULL) {
 800ef76:	b108      	cbz	r0, 800ef7c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800ef78:	f7ff ff94 	bl	800eea4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f7fe fc3d 	bl	800d7fc <memp_malloc>
    if (pcb == NULL) {
 800ef82:	4603      	mov	r3, r0
 800ef84:	bb18      	cbnz	r0, 800efce <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800ef86:	2009      	movs	r0, #9
 800ef88:	f7ff ffc4 	bl	800ef14 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef8c:	2001      	movs	r0, #1
 800ef8e:	f7fe fc35 	bl	800d7fc <memp_malloc>
      if (pcb == NULL) {
 800ef92:	4603      	mov	r3, r0
 800ef94:	b9d8      	cbnz	r0, 800efce <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800ef96:	2008      	movs	r0, #8
 800ef98:	f7ff ffbc 	bl	800ef14 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef9c:	2001      	movs	r0, #1
 800ef9e:	f7fe fc2d 	bl	800d7fc <memp_malloc>
        if (pcb == NULL) {
 800efa2:	4603      	mov	r3, r0
 800efa4:	b998      	cbnz	r0, 800efce <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800efa6:	0622      	lsls	r2, r4, #24
 800efa8:	d44a      	bmi.n	800f040 <tcp_alloc+0xf0>
  if (mprio == 0) {
 800efaa:	b15c      	cbz	r4, 800efc4 <tcp_alloc+0x74>
 800efac:	4621      	mov	r1, r4
  mprio--;
 800efae:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efb0:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 800efb2:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800efb4:	682e      	ldr	r6, [r5, #0]
  mprio--;
 800efb6:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efb8:	2a00      	cmp	r2, #0
 800efba:	d143      	bne.n	800f044 <tcp_alloc+0xf4>
  if (inactive != NULL) {
 800efbc:	b113      	cbz	r3, 800efc4 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff ff70 	bl	800eea4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efc4:	2001      	movs	r0, #1
 800efc6:	f7fe fc19 	bl	800d7fc <memp_malloc>
  if (pcb != NULL) {
 800efca:	4603      	mov	r3, r0
 800efcc:	b310      	cbz	r0, 800f014 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800efce:	2298      	movs	r2, #152	@ 0x98
 800efd0:	4618      	mov	r0, r3
 800efd2:	2100      	movs	r1, #0
 800efd4:	f005 fd66 	bl	8014aa4 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800efd8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800efdc:	4603      	mov	r3, r0
    pcb->prio = prio;
 800efde:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800efe0:	f8a0 2064 	strh.w	r2, [r0, #100]	@ 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800efe4:	4a21      	ldr	r2, [pc, #132]	@ (800f06c <tcp_alloc+0x11c>)
 800efe6:	6282      	str	r2, [r0, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800efe8:	22ff      	movs	r2, #255	@ 0xff
 800efea:	72c2      	strb	r2, [r0, #11]
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800efec:	2206      	movs	r2, #6
 800efee:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800eff2:	87c2      	strh	r2, [r0, #62]	@ 0x3e
    pcb->rtime = -1;
 800eff4:	4a1e      	ldr	r2, [pc, #120]	@ (800f070 <tcp_alloc+0x120>)
 800eff6:	6302      	str	r2, [r0, #48]	@ 0x30
    pcb->tmr = tcp_ticks;
 800eff8:	4a1b      	ldr	r2, [pc, #108]	@ (800f068 <tcp_alloc+0x118>)
 800effa:	6812      	ldr	r2, [r2, #0]
 800effc:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800effe:	4a1d      	ldr	r2, [pc, #116]	@ (800f074 <tcp_alloc+0x124>)
 800f000:	7812      	ldrb	r2, [r2, #0]
 800f002:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800f004:	4a1c      	ldr	r2, [pc, #112]	@ (800f078 <tcp_alloc+0x128>)
 800f006:	6482      	str	r2, [r0, #72]	@ 0x48
    pcb->recv = tcp_recv_null;
 800f008:	4a1c      	ldr	r2, [pc, #112]	@ (800f07c <tcp_alloc+0x12c>)
 800f00a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f00e:	4a1c      	ldr	r2, [pc, #112]	@ (800f080 <tcp_alloc+0x130>)
 800f010:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
}
 800f014:	4618      	mov	r0, r3
 800f016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800f018:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800f01a:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800f01c:	0719      	lsls	r1, r3, #28
 800f01e:	d504      	bpl.n	800f02a <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f020:	f023 0308 	bic.w	r3, r3, #8
 800f024:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800f026:	f7ff f8df 	bl	800e1e8 <tcp_close_shutdown_fin>
{
 800f02a:	4628      	mov	r0, r5
 800f02c:	e79a      	b.n	800ef64 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f02e:	6a1a      	ldr	r2, [r3, #32]
 800f030:	1aba      	subs	r2, r7, r2
 800f032:	428a      	cmp	r2, r1
 800f034:	bf34      	ite	cc
 800f036:	460a      	movcc	r2, r1
      inactive = pcb;
 800f038:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	4611      	mov	r1, r2
 800f03e:	e798      	b.n	800ef72 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f040:	217f      	movs	r1, #127	@ 0x7f
 800f042:	e7b4      	b.n	800efae <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 800f044:	7d57      	ldrb	r7, [r2, #21]
 800f046:	428f      	cmp	r7, r1
 800f048:	d304      	bcc.n	800f054 <tcp_alloc+0x104>
 800f04a:	d107      	bne.n	800f05c <tcp_alloc+0x10c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f04c:	6a15      	ldr	r5, [r2, #32]
 800f04e:	1b75      	subs	r5, r6, r5
 800f050:	4285      	cmp	r5, r0
 800f052:	d303      	bcc.n	800f05c <tcp_alloc+0x10c>
      inactivity = tcp_ticks - pcb->tmr;
 800f054:	6a10      	ldr	r0, [r2, #32]
      mprio      = pcb->prio;
 800f056:	4639      	mov	r1, r7
      inactive   = pcb;
 800f058:	4613      	mov	r3, r2
      inactivity = tcp_ticks - pcb->tmr;
 800f05a:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f05c:	68d2      	ldr	r2, [r2, #12]
 800f05e:	e7ab      	b.n	800efb8 <tcp_alloc+0x68>
 800f060:	2000f32c 	.word	0x2000f32c
 800f064:	2000f328 	.word	0x2000f328
 800f068:	2000f338 	.word	0x2000f338
 800f06c:	0b680b68 	.word	0x0b680b68
 800f070:	0218ffff 	.word	0x0218ffff
 800f074:	2000f324 	.word	0x2000f324
 800f078:	16d00001 	.word	0x16d00001
 800f07c:	0800ec25 	.word	0x0800ec25
 800f080:	006ddd00 	.word	0x006ddd00

0800f084 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f084:	2040      	movs	r0, #64	@ 0x40
 800f086:	f7ff bf63 	b.w	800ef50 <tcp_alloc>
	...

0800f08c <tcp_next_iss>:
{
 800f08c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f08e:	b930      	cbnz	r0, 800f09e <tcp_next_iss+0x12>
 800f090:	4b06      	ldr	r3, [pc, #24]	@ (800f0ac <tcp_next_iss+0x20>)
 800f092:	f640 02b9 	movw	r2, #2233	@ 0x8b9
 800f096:	4906      	ldr	r1, [pc, #24]	@ (800f0b0 <tcp_next_iss+0x24>)
 800f098:	4806      	ldr	r0, [pc, #24]	@ (800f0b4 <tcp_next_iss+0x28>)
 800f09a:	f005 fafd 	bl	8014698 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800f09e:	4b06      	ldr	r3, [pc, #24]	@ (800f0b8 <tcp_next_iss+0x2c>)
 800f0a0:	4a06      	ldr	r2, [pc, #24]	@ (800f0bc <tcp_next_iss+0x30>)
 800f0a2:	6818      	ldr	r0, [r3, #0]
 800f0a4:	6812      	ldr	r2, [r2, #0]
 800f0a6:	4410      	add	r0, r2
 800f0a8:	6018      	str	r0, [r3, #0]
}
 800f0aa:	bd08      	pop	{r3, pc}
 800f0ac:	08016c49 	.word	0x08016c49
 800f0b0:	08017070 	.word	0x08017070
 800f0b4:	08015927 	.word	0x08015927
 800f0b8:	20000058 	.word	0x20000058
 800f0bc:	2000f338 	.word	0x2000f338

0800f0c0 <tcp_eff_send_mss_netif>:
{
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f0c6:	b932      	cbnz	r2, 800f0d6 <tcp_eff_send_mss_netif+0x16>
 800f0c8:	4b09      	ldr	r3, [pc, #36]	@ (800f0f0 <tcp_eff_send_mss_netif+0x30>)
 800f0ca:	f640 02cf 	movw	r2, #2255	@ 0x8cf
 800f0ce:	4909      	ldr	r1, [pc, #36]	@ (800f0f4 <tcp_eff_send_mss_netif+0x34>)
 800f0d0:	4809      	ldr	r0, [pc, #36]	@ (800f0f8 <tcp_eff_send_mss_netif+0x38>)
 800f0d2:	f005 fae1 	bl	8014698 <iprintf>
    if (outif == NULL) {
 800f0d6:	b14d      	cbz	r5, 800f0ec <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800f0d8:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
  if (mtu != 0) {
 800f0da:	b13b      	cbz	r3, 800f0ec <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f0dc:	2b28      	cmp	r3, #40	@ 0x28
 800f0de:	bf38      	it	cc
 800f0e0:	2328      	movcc	r3, #40	@ 0x28
 800f0e2:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	429c      	cmp	r4, r3
 800f0e8:	bf28      	it	cs
 800f0ea:	461c      	movcs	r4, r3
}
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	bd38      	pop	{r3, r4, r5, pc}
 800f0f0:	08016c49 	.word	0x08016c49
 800f0f4:	0801708a 	.word	0x0801708a
 800f0f8:	08015927 	.word	0x08015927

0800f0fc <tcp_connect>:
{
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f100:	4604      	mov	r4, r0
 800f102:	2800      	cmp	r0, #0
 800f104:	d065      	beq.n	800f1d2 <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f106:	2900      	cmp	r1, #0
 800f108:	d063      	beq.n	800f1d2 <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f10a:	7d03      	ldrb	r3, [r0, #20]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d163      	bne.n	800f1d8 <tcp_connect+0xdc>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f110:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;
 800f112:	8302      	strh	r2, [r0, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f114:	6043      	str	r3, [r0, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f116:	7a00      	ldrb	r0, [r0, #8]
 800f118:	b380      	cbz	r0, 800f17c <tcp_connect+0x80>
    netif = netif_get_by_index(pcb->netif_idx);
 800f11a:	f7fe fccb 	bl	800dab4 <netif_get_by_index>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f11e:	4605      	mov	r5, r0
  if (netif == NULL) {
 800f120:	2800      	cmp	r0, #0
 800f122:	d05c      	beq.n	800f1de <tcp_connect+0xe2>
  if (ip_addr_isany(&pcb->local_ip)) {
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	b90b      	cbnz	r3, 800f12c <tcp_connect+0x30>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f128:	6843      	ldr	r3, [r0, #4]
 800f12a:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 800f12c:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 800f12e:	b34e      	cbz	r6, 800f184 <tcp_connect+0x88>
  iss = tcp_next_iss(pcb);
 800f130:	4620      	mov	r0, r4
 800f132:	f7ff ffab 	bl	800f08c <tcp_next_iss>
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f136:	2300      	movs	r3, #0
 800f138:	4a2a      	ldr	r2, [pc, #168]	@ (800f1e4 <tcp_connect+0xe8>)
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f13a:	4629      	mov	r1, r5
  pcb->snd_nxt = iss;
 800f13c:	6520      	str	r0, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800f13e:	3801      	subs	r0, #1
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f140:	62e3      	str	r3, [r4, #44]	@ 0x2c
  pcb->lastack = iss - 1;
 800f142:	6460      	str	r0, [r4, #68]	@ 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f144:	e9c4 3209 	strd	r3, r2, [r4, #36]	@ 0x24
  pcb->snd_lbb = iss - 1;
 800f148:	e9c4 0016 	strd	r0, r0, [r4, #88]	@ 0x58
  pcb->snd_wnd = TCP_WND;
 800f14c:	f640 3368 	movw	r3, #2920	@ 0xb68
  pcb->mss = INITIAL_MSS;
 800f150:	f44f 7006 	mov.w	r0, #536	@ 0x218
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f154:	1d22      	adds	r2, r4, #4
  pcb->snd_wnd = TCP_WND;
 800f156:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->mss = INITIAL_MSS;
 800f15a:	8660      	strh	r0, [r4, #50]	@ 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f15c:	f7ff ffb0 	bl	800f0c0 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 800f160:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f162:	8660      	strh	r0, [r4, #50]	@ 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f164:	2102      	movs	r1, #2
 800f166:	4620      	mov	r0, r4
  pcb->cwnd = 1;
 800f168:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  pcb->connected = connected;
 800f16c:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f170:	f001 fe60 	bl	8010e34 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800f174:	4605      	mov	r5, r0
 800f176:	b168      	cbz	r0, 800f194 <tcp_connect+0x98>
}
 800f178:	4628      	mov	r0, r5
 800f17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f17c:	1d20      	adds	r0, r4, #4
 800f17e:	f003 f9d1 	bl	8012524 <ip4_route>
 800f182:	e7cc      	b.n	800f11e <tcp_connect+0x22>
    pcb->local_port = tcp_new_port();
 800f184:	f7ff f808 	bl	800e198 <tcp_new_port>
 800f188:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d1d0      	bne.n	800f130 <tcp_connect+0x34>
      return ERR_BUF;
 800f18e:	f06f 0501 	mvn.w	r5, #1
 800f192:	e7f1      	b.n	800f178 <tcp_connect+0x7c>
    pcb->state = SYN_SENT;
 800f194:	2302      	movs	r3, #2
 800f196:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800f198:	b12e      	cbz	r6, 800f1a6 <tcp_connect+0xaa>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f19a:	4a13      	ldr	r2, [pc, #76]	@ (800f1e8 <tcp_connect+0xec>)
 800f19c:	6813      	ldr	r3, [r2, #0]
 800f19e:	42a3      	cmp	r3, r4
 800f1a0:	d10f      	bne.n	800f1c2 <tcp_connect+0xc6>
 800f1a2:	68e3      	ldr	r3, [r4, #12]
 800f1a4:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 800f1a6:	4b11      	ldr	r3, [pc, #68]	@ (800f1ec <tcp_connect+0xf0>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	601c      	str	r4, [r3, #0]
 800f1ac:	60e2      	str	r2, [r4, #12]
 800f1ae:	f002 fafd 	bl	80117ac <tcp_timer_needed>
 800f1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800f1f0 <tcp_connect+0xf4>)
 800f1b4:	2201      	movs	r2, #1
    tcp_output(pcb);
 800f1b6:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800f1b8:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800f1ba:	f002 f823 	bl	8011204 <tcp_output>
 800f1be:	e7db      	b.n	800f178 <tcp_connect+0x7c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d0ef      	beq.n	800f1a6 <tcp_connect+0xaa>
 800f1c6:	68da      	ldr	r2, [r3, #12]
 800f1c8:	42a2      	cmp	r2, r4
 800f1ca:	d1f9      	bne.n	800f1c0 <tcp_connect+0xc4>
 800f1cc:	68e2      	ldr	r2, [r4, #12]
 800f1ce:	60da      	str	r2, [r3, #12]
 800f1d0:	e7e9      	b.n	800f1a6 <tcp_connect+0xaa>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1d2:	f06f 050f 	mvn.w	r5, #15
 800f1d6:	e7cf      	b.n	800f178 <tcp_connect+0x7c>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f1d8:	f06f 0509 	mvn.w	r5, #9
 800f1dc:	e7cc      	b.n	800f178 <tcp_connect+0x7c>
    return ERR_RTE;
 800f1de:	f06f 0503 	mvn.w	r5, #3
 800f1e2:	e7c9      	b.n	800f178 <tcp_connect+0x7c>
 800f1e4:	0b680b68 	.word	0x0b680b68
 800f1e8:	2000f334 	.word	0x2000f334
 800f1ec:	2000f32c 	.word	0x2000f32c
 800f1f0:	2000f326 	.word	0x2000f326

0800f1f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f1f4:	b538      	push	{r3, r4, r5, lr}
 800f1f6:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	b180      	cbz	r0, 800f21e <tcp_netif_ip_addr_changed+0x2a>
 800f1fc:	6803      	ldr	r3, [r0, #0]
 800f1fe:	b173      	cbz	r3, 800f21e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f200:	4b0b      	ldr	r3, [pc, #44]	@ (800f230 <tcp_netif_ip_addr_changed+0x3c>)
 800f202:	6819      	ldr	r1, [r3, #0]
 800f204:	f7ff fe68 	bl	800eed8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f208:	4b0a      	ldr	r3, [pc, #40]	@ (800f234 <tcp_netif_ip_addr_changed+0x40>)
 800f20a:	4620      	mov	r0, r4
 800f20c:	6819      	ldr	r1, [r3, #0]
 800f20e:	f7ff fe63 	bl	800eed8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f212:	b125      	cbz	r5, 800f21e <tcp_netif_ip_addr_changed+0x2a>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	b113      	cbz	r3, 800f21e <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f218:	4b07      	ldr	r3, [pc, #28]	@ (800f238 <tcp_netif_ip_addr_changed+0x44>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	b903      	cbnz	r3, 800f220 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 800f220:	6819      	ldr	r1, [r3, #0]
 800f222:	6822      	ldr	r2, [r4, #0]
 800f224:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f226:	bf04      	itt	eq
 800f228:	682a      	ldreq	r2, [r5, #0]
 800f22a:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	e7f5      	b.n	800f21c <tcp_netif_ip_addr_changed+0x28>
 800f230:	2000f32c 	.word	0x2000f32c
 800f234:	2000f334 	.word	0x2000f334
 800f238:	2000f330 	.word	0x2000f330

0800f23c <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800f23c:	4a09      	ldr	r2, [pc, #36]	@ (800f264 <tcp_get_next_optbyte+0x28>)
 800f23e:	8813      	ldrh	r3, [r2, #0]
 800f240:	1c59      	adds	r1, r3, #1
 800f242:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f244:	4a08      	ldr	r2, [pc, #32]	@ (800f268 <tcp_get_next_optbyte+0x2c>)
 800f246:	6812      	ldr	r2, [r2, #0]
 800f248:	b11a      	cbz	r2, 800f252 <tcp_get_next_optbyte+0x16>
 800f24a:	4908      	ldr	r1, [pc, #32]	@ (800f26c <tcp_get_next_optbyte+0x30>)
 800f24c:	8809      	ldrh	r1, [r1, #0]
 800f24e:	428b      	cmp	r3, r1
 800f250:	d204      	bcs.n	800f25c <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800f252:	4a07      	ldr	r2, [pc, #28]	@ (800f270 <tcp_get_next_optbyte+0x34>)
 800f254:	6812      	ldr	r2, [r2, #0]
 800f256:	4413      	add	r3, r2
 800f258:	7d18      	ldrb	r0, [r3, #20]
 800f25a:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f25c:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800f262:	4770      	bx	lr
 800f264:	2000f354 	.word	0x2000f354
 800f268:	2000f358 	.word	0x2000f358
 800f26c:	2000f35c 	.word	0x2000f35c
 800f270:	2000f360 	.word	0x2000f360

0800f274 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f276:	4605      	mov	r5, r0
 800f278:	b930      	cbnz	r0, 800f288 <tcp_parseopt+0x14>
 800f27a:	4b1e      	ldr	r3, [pc, #120]	@ (800f2f4 <tcp_parseopt+0x80>)
 800f27c:	f240 728d 	movw	r2, #1933	@ 0x78d
 800f280:	491d      	ldr	r1, [pc, #116]	@ (800f2f8 <tcp_parseopt+0x84>)
 800f282:	481e      	ldr	r0, [pc, #120]	@ (800f2fc <tcp_parseopt+0x88>)
 800f284:	f005 fa08 	bl	8014698 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f288:	4b1d      	ldr	r3, [pc, #116]	@ (800f300 <tcp_parseopt+0x8c>)
 800f28a:	881e      	ldrh	r6, [r3, #0]
 800f28c:	b386      	cbz	r6, 800f2f0 <tcp_parseopt+0x7c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f28e:	4c1d      	ldr	r4, [pc, #116]	@ (800f304 <tcp_parseopt+0x90>)
 800f290:	2300      	movs	r3, #0
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f292:	8023      	strh	r3, [r4, #0]
 800f294:	e029      	b.n	800f2ea <tcp_parseopt+0x76>
      u8_t opt = tcp_get_next_optbyte();
 800f296:	f7ff ffd1 	bl	800f23c <tcp_get_next_optbyte>
      switch (opt) {
 800f29a:	2801      	cmp	r0, #1
 800f29c:	d025      	beq.n	800f2ea <tcp_parseopt+0x76>
 800f29e:	2802      	cmp	r0, #2
 800f2a0:	d008      	beq.n	800f2b4 <tcp_parseopt+0x40>
 800f2a2:	b328      	cbz	r0, 800f2f0 <tcp_parseopt+0x7c>
          data = tcp_get_next_optbyte();
 800f2a4:	f7ff ffca 	bl	800f23c <tcp_get_next_optbyte>
          if (data < 2) {
 800f2a8:	2801      	cmp	r0, #1
 800f2aa:	d921      	bls.n	800f2f0 <tcp_parseopt+0x7c>
          tcp_optidx += data - 2;
 800f2ac:	8823      	ldrh	r3, [r4, #0]
 800f2ae:	3b02      	subs	r3, #2
 800f2b0:	4403      	add	r3, r0
 800f2b2:	e7ee      	b.n	800f292 <tcp_parseopt+0x1e>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f2b4:	f7ff ffc2 	bl	800f23c <tcp_get_next_optbyte>
 800f2b8:	2804      	cmp	r0, #4
 800f2ba:	d119      	bne.n	800f2f0 <tcp_parseopt+0x7c>
 800f2bc:	8823      	ldrh	r3, [r4, #0]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	42b3      	cmp	r3, r6
 800f2c2:	da15      	bge.n	800f2f0 <tcp_parseopt+0x7c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f2c4:	f7ff ffba 	bl	800f23c <tcp_get_next_optbyte>
 800f2c8:	0207      	lsls	r7, r0, #8
          mss |= tcp_get_next_optbyte();
 800f2ca:	f7ff ffb7 	bl	800f23c <tcp_get_next_optbyte>
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f2ce:	f240 51b4 	movw	r1, #1460	@ 0x5b4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f2d2:	b2bf      	uxth	r7, r7
          mss |= tcp_get_next_optbyte();
 800f2d4:	ea40 0307 	orr.w	r3, r0, r7
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f2d8:	f240 50b3 	movw	r0, #1459	@ 0x5b3
          mss |= tcp_get_next_optbyte();
 800f2dc:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f2de:	1e5a      	subs	r2, r3, #1
 800f2e0:	b292      	uxth	r2, r2
 800f2e2:	4282      	cmp	r2, r0
 800f2e4:	bf88      	it	hi
 800f2e6:	460b      	movhi	r3, r1
 800f2e8:	866b      	strh	r3, [r5, #50]	@ 0x32
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f2ea:	8823      	ldrh	r3, [r4, #0]
 800f2ec:	42b3      	cmp	r3, r6
 800f2ee:	d3d2      	bcc.n	800f296 <tcp_parseopt+0x22>
      }
    }
  }
}
 800f2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	080170b1 	.word	0x080170b1
 800f2f8:	080170d1 	.word	0x080170d1
 800f2fc:	08015927 	.word	0x08015927
 800f300:	2000f35e 	.word	0x2000f35e
 800f304:	2000f354 	.word	0x2000f354

0800f308 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800f308:	4b0c      	ldr	r3, [pc, #48]	@ (800f33c <tcp_input_delayed_close+0x34>)
{
 800f30a:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800f30c:	781b      	ldrb	r3, [r3, #0]
{
 800f30e:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800f310:	f013 0010 	ands.w	r0, r3, #16
 800f314:	d011      	beq.n	800f33a <tcp_input_delayed_close+0x32>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f316:	8b63      	ldrh	r3, [r4, #26]
 800f318:	06db      	lsls	r3, r3, #27
 800f31a:	d406      	bmi.n	800f32a <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f31c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800f320:	b11b      	cbz	r3, 800f32a <tcp_input_delayed_close+0x22>
 800f322:	f06f 010e 	mvn.w	r1, #14
 800f326:	6920      	ldr	r0, [r4, #16]
 800f328:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f32a:	4621      	mov	r1, r4
 800f32c:	4804      	ldr	r0, [pc, #16]	@ (800f340 <tcp_input_delayed_close+0x38>)
 800f32e:	f7ff fb5d 	bl	800e9ec <tcp_pcb_remove>
    tcp_free(pcb);
 800f332:	4620      	mov	r0, r4
 800f334:	f7fe ff94 	bl	800e260 <tcp_free>
 800f338:	2001      	movs	r0, #1
}
 800f33a:	bd10      	pop	{r4, pc}
 800f33c:	2000f344 	.word	0x2000f344
 800f340:	2000f32c 	.word	0x2000f32c

0800f344 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800f344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	4607      	mov	r7, r0
 800f34a:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f34c:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 800f400 <tcp_free_acked_segments.isra.0+0xbc>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f350:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800f404 <tcp_free_acked_segments.isra.0+0xc0>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800f354:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 800f356:	2c00      	cmp	r4, #0
 800f358:	d045      	beq.n	800f3e6 <tcp_free_acked_segments.isra.0+0xa2>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f35a:	68e3      	ldr	r3, [r4, #12]
 800f35c:	4626      	mov	r6, r4
 800f35e:	f8da 5000 	ldr.w	r5, [sl]
 800f362:	6858      	ldr	r0, [r3, #4]
 800f364:	f7fd ff0f 	bl	800d186 <lwip_htonl>
 800f368:	68e2      	ldr	r2, [r4, #12]
 800f36a:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800f36e:	4683      	mov	fp, r0
 800f370:	8990      	ldrh	r0, [r2, #12]
 800f372:	eba5 0508 	sub.w	r5, r5, r8
 800f376:	f7fd ff03 	bl	800d180 <lwip_htons>
 800f37a:	f010 0003 	ands.w	r0, r0, #3
 800f37e:	eba5 050b 	sub.w	r5, r5, fp
 800f382:	bf18      	it	ne
 800f384:	2001      	movne	r0, #1
 800f386:	1a2d      	subs	r5, r5, r0
  while (seg_list != NULL &&
 800f388:	2d00      	cmp	r5, #0
 800f38a:	db2d      	blt.n	800f3e8 <tcp_free_acked_segments.isra.0+0xa4>
    clen = pbuf_clen(next->p);
 800f38c:	6870      	ldr	r0, [r6, #4]
    seg_list = seg_list->next;
 800f38e:	6824      	ldr	r4, [r4, #0]
    clen = pbuf_clen(next->p);
 800f390:	f7fe fd92 	bl	800deb8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f394:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800f398:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f39a:	4283      	cmp	r3, r0
 800f39c:	d206      	bcs.n	800f3ac <tcp_free_acked_segments.isra.0+0x68>
 800f39e:	4b14      	ldr	r3, [pc, #80]	@ (800f3f0 <tcp_free_acked_segments.isra.0+0xac>)
 800f3a0:	f240 4264 	movw	r2, #1124	@ 0x464
 800f3a4:	4913      	ldr	r1, [pc, #76]	@ (800f3f4 <tcp_free_acked_segments.isra.0+0xb0>)
 800f3a6:	4814      	ldr	r0, [pc, #80]	@ (800f3f8 <tcp_free_acked_segments.isra.0+0xb4>)
 800f3a8:	f005 f976 	bl	8014698 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f3ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    tcp_seg_free(next);
 800f3b0:	4630      	mov	r0, r6
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f3b2:	f8b9 2000 	ldrh.w	r2, [r9]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f3b6:	1b5b      	subs	r3, r3, r5
 800f3b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f3bc:	8933      	ldrh	r3, [r6, #8]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f8a9 3000 	strh.w	r3, [r9]
    tcp_seg_free(next);
 800f3c4:	f7ff f862 	bl	800e48c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800f3c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d0c2      	beq.n	800f356 <tcp_free_acked_segments.isra.0+0x12>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f3d0:	2c00      	cmp	r4, #0
 800f3d2:	d1c2      	bne.n	800f35a <tcp_free_acked_segments.isra.0+0x16>
 800f3d4:	9b01      	ldr	r3, [sp, #4]
 800f3d6:	b933      	cbnz	r3, 800f3e6 <tcp_free_acked_segments.isra.0+0xa2>
 800f3d8:	4b05      	ldr	r3, [pc, #20]	@ (800f3f0 <tcp_free_acked_segments.isra.0+0xac>)
 800f3da:	f240 426e 	movw	r2, #1134	@ 0x46e
 800f3de:	4907      	ldr	r1, [pc, #28]	@ (800f3fc <tcp_free_acked_segments.isra.0+0xb8>)
 800f3e0:	4805      	ldr	r0, [pc, #20]	@ (800f3f8 <tcp_free_acked_segments.isra.0+0xb4>)
 800f3e2:	f005 f959 	bl	8014698 <iprintf>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800f3e6:	2600      	movs	r6, #0
}
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	b003      	add	sp, #12
 800f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f0:	080170b1 	.word	0x080170b1
 800f3f4:	080170eb 	.word	0x080170eb
 800f3f8:	08015927 	.word	0x08015927
 800f3fc:	08017113 	.word	0x08017113
 800f400:	2000f34c 	.word	0x2000f34c
 800f404:	2000f348 	.word	0x2000f348

0800f408 <tcp_receive>:
{
 800f408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f40c:	7d03      	ldrb	r3, [r0, #20]
{
 800f40e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f410:	2b03      	cmp	r3, #3
 800f412:	d806      	bhi.n	800f422 <tcp_receive+0x1a>
 800f414:	4b33      	ldr	r3, [pc, #204]	@ (800f4e4 <tcp_receive+0xdc>)
 800f416:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 800f41a:	4933      	ldr	r1, [pc, #204]	@ (800f4e8 <tcp_receive+0xe0>)
 800f41c:	4833      	ldr	r0, [pc, #204]	@ (800f4ec <tcp_receive+0xe4>)
 800f41e:	f005 f93b 	bl	8014698 <iprintf>
  if (flags & TCP_ACK) {
 800f422:	4b33      	ldr	r3, [pc, #204]	@ (800f4f0 <tcp_receive+0xe8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f424:	4e33      	ldr	r6, [pc, #204]	@ (800f4f4 <tcp_receive+0xec>)
  if (flags & TCP_ACK) {
 800f426:	781b      	ldrb	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f428:	6832      	ldr	r2, [r6, #0]
  if (flags & TCP_ACK) {
 800f42a:	f013 0f10 	tst.w	r3, #16
 800f42e:	4d32      	ldr	r5, [pc, #200]	@ (800f4f8 <tcp_receive+0xf0>)
 800f430:	f000 8093 	beq.w	800f55a <tcp_receive+0x152>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f434:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800f500 <tcp_receive+0xf8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f438:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f43c:	f8d9 3000 	ldr.w	r3, [r9]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f440:	e9d4 0c15 	ldrd	r0, ip, [r4, #84]	@ 0x54
 800f444:	eba0 0e02 	sub.w	lr, r0, r2
 800f448:	f1be 0f00 	cmp.w	lr, #0
 800f44c:	db0c      	blt.n	800f468 <tcp_receive+0x60>
 800f44e:	4290      	cmp	r0, r2
 800f450:	d103      	bne.n	800f45a <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f452:	ebac 0003 	sub.w	r0, ip, r3
 800f456:	2800      	cmp	r0, #0
 800f458:	db06      	blt.n	800f468 <tcp_receive+0x60>
 800f45a:	459c      	cmp	ip, r3
 800f45c:	d113      	bne.n	800f486 <tcp_receive+0x7e>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f45e:	4827      	ldr	r0, [pc, #156]	@ (800f4fc <tcp_receive+0xf4>)
 800f460:	6800      	ldr	r0, [r0, #0]
 800f462:	89c0      	ldrh	r0, [r0, #14]
 800f464:	4288      	cmp	r0, r1
 800f466:	d90e      	bls.n	800f486 <tcp_receive+0x7e>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f468:	4824      	ldr	r0, [pc, #144]	@ (800f4fc <tcp_receive+0xf4>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f46a:	f8b4 8062 	ldrh.w	r8, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f46e:	6800      	ldr	r0, [r0, #0]
 800f470:	89c0      	ldrh	r0, [r0, #14]
 800f472:	fa1f fe80 	uxth.w	lr, r0
 800f476:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f47a:	45f0      	cmp	r8, lr
      pcb->snd_wl2 = ackno;
 800f47c:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f480:	bf38      	it	cc
 800f482:	f8a4 0062 	strhcc.w	r0, [r4, #98]	@ 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f486:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800f488:	1ad0      	subs	r0, r2, r3
 800f48a:	2800      	cmp	r0, #0
 800f48c:	f2c0 814b 	blt.w	800f726 <tcp_receive+0x31e>
      if (tcplen == 0) {
 800f490:	8828      	ldrh	r0, [r5, #0]
 800f492:	2800      	cmp	r0, #0
 800f494:	d137      	bne.n	800f506 <tcp_receive+0xfe>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f496:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f49a:	4461      	add	r1, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f49c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800f49e:	4438      	add	r0, r7
 800f4a0:	4288      	cmp	r0, r1
 800f4a2:	d130      	bne.n	800f506 <tcp_receive+0xfe>
          if (pcb->rtime >= 0) {
 800f4a4:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	@ 0x30
 800f4a8:	2900      	cmp	r1, #0
 800f4aa:	db2c      	blt.n	800f506 <tcp_receive+0xfe>
            if (pcb->lastack == ackno) {
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d12a      	bne.n	800f506 <tcp_receive+0xfe>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f4b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4b4:	2bff      	cmp	r3, #255	@ 0xff
                ++pcb->dupacks;
 800f4b6:	bf1c      	itt	ne
 800f4b8:	3301      	addne	r3, #1
 800f4ba:	f884 3043 	strbne.w	r3, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800f4be:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	d91e      	bls.n	800f504 <tcp_receive+0xfc>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f4c6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800f4ca:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f4cc:	4413      	add	r3, r2
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	bf88      	it	hi
 800f4d4:	f64f 73ff 	movwhi	r3, #65535	@ 0xffff
 800f4d8:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f001 fdf1 	bl	80110c4 <tcp_rexmit_fast>
 800f4e2:	e010      	b.n	800f506 <tcp_receive+0xfe>
 800f4e4:	080170b1 	.word	0x080170b1
 800f4e8:	08017133 	.word	0x08017133
 800f4ec:	08015927 	.word	0x08015927
 800f4f0:	2000f345 	.word	0x2000f345
 800f4f4:	2000f350 	.word	0x2000f350
 800f4f8:	2000f346 	.word	0x2000f346
 800f4fc:	2000f360 	.word	0x2000f360
 800f500:	2000f34c 	.word	0x2000f34c
              if (pcb->dupacks >= 3) {
 800f504:	d0ea      	beq.n	800f4dc <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f506:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f508:	b33b      	cbz	r3, 800f55a <tcp_receive+0x152>
 800f50a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f50c:	f8d9 1000 	ldr.w	r1, [r9]
 800f510:	1a52      	subs	r2, r2, r1
 800f512:	2a00      	cmp	r2, #0
 800f514:	da21      	bge.n	800f55a <tcp_receive+0x152>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f516:	4aa5      	ldr	r2, [pc, #660]	@ (800f7ac <tcp_receive+0x3a4>)
 800f518:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800f51a:	f9b4 c03c 	ldrsh.w	ip, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f51e:	8817      	ldrh	r7, [r2, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800f520:	f3cc 01cf 	ubfx	r1, ip, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f524:	1afa      	subs	r2, r7, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800f526:	1a52      	subs	r2, r2, r1
 800f528:	b210      	sxth	r0, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800f52a:	fa1c f282 	uxtah	r2, ip, r2
      if (m < 0) {
 800f52e:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800f530:	b212      	sxth	r2, r2
        m = (s16_t) - m;
 800f532:	bfb8      	it	lt
 800f534:	1bdb      	sublt	r3, r3, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800f536:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        m = (s16_t) - m;
 800f538:	bfb8      	it	lt
 800f53a:	18c9      	addlt	r1, r1, r3
      m = (s16_t)(m - (pcb->sv >> 2));
 800f53c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
        m = (s16_t) - m;
 800f540:	bfb8      	it	lt
 800f542:	b208      	sxthlt	r0, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800f544:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 800f548:	4403      	add	r3, r0
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f54e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800f552:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800f556:	2300      	movs	r3, #0
 800f558:	6363      	str	r3, [r4, #52]	@ 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f55a:	8828      	ldrh	r0, [r5, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f55c:	6832      	ldr	r2, [r6, #0]
 800f55e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f560:	2800      	cmp	r0, #0
 800f562:	f000 819f 	beq.w	800f8a4 <tcp_receive+0x49c>
 800f566:	7d21      	ldrb	r1, [r4, #20]
 800f568:	2906      	cmp	r1, #6
 800f56a:	f200 819b 	bhi.w	800f8a4 <tcp_receive+0x49c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f56e:	1a9f      	subs	r7, r3, r2
 800f570:	2f01      	cmp	r7, #1
 800f572:	f100 8185 	bmi.w	800f880 <tcp_receive+0x478>
 800f576:	1e51      	subs	r1, r2, #1
 800f578:	4401      	add	r1, r0
 800f57a:	1ac9      	subs	r1, r1, r3
 800f57c:	2900      	cmp	r1, #0
 800f57e:	f2c0 817f 	blt.w	800f880 <tcp_receive+0x478>
      struct pbuf *p = inseg.p;
 800f582:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 800f7c4 <tcp_receive+0x3bc>
 800f586:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f58a:	f1b8 0f00 	cmp.w	r8, #0
 800f58e:	d106      	bne.n	800f59e <tcp_receive+0x196>
 800f590:	4b87      	ldr	r3, [pc, #540]	@ (800f7b0 <tcp_receive+0x3a8>)
 800f592:	f240 529a 	movw	r2, #1434	@ 0x59a
 800f596:	4987      	ldr	r1, [pc, #540]	@ (800f7b4 <tcp_receive+0x3ac>)
 800f598:	4887      	ldr	r0, [pc, #540]	@ (800f7b8 <tcp_receive+0x3b0>)
 800f59a:	f005 f87d 	bl	8014698 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f59e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800f5a2:	429f      	cmp	r7, r3
 800f5a4:	d906      	bls.n	800f5b4 <tcp_receive+0x1ac>
 800f5a6:	4b82      	ldr	r3, [pc, #520]	@ (800f7b0 <tcp_receive+0x3a8>)
 800f5a8:	f240 529b 	movw	r2, #1435	@ 0x59b
 800f5ac:	4983      	ldr	r1, [pc, #524]	@ (800f7bc <tcp_receive+0x3b4>)
 800f5ae:	4882      	ldr	r0, [pc, #520]	@ (800f7b8 <tcp_receive+0x3b0>)
 800f5b0:	f005 f872 	bl	8014698 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f5b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800f5b8:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f5ba:	891b      	ldrh	r3, [r3, #8]
 800f5bc:	42bb      	cmp	r3, r7
 800f5be:	d206      	bcs.n	800f5ce <tcp_receive+0x1c6>
 800f5c0:	4b7b      	ldr	r3, [pc, #492]	@ (800f7b0 <tcp_receive+0x3a8>)
 800f5c2:	f240 529d 	movw	r2, #1437	@ 0x59d
 800f5c6:	497e      	ldr	r1, [pc, #504]	@ (800f7c0 <tcp_receive+0x3b8>)
 800f5c8:	487b      	ldr	r0, [pc, #492]	@ (800f7b8 <tcp_receive+0x3b0>)
 800f5ca:	f005 f865 	bl	8014698 <iprintf>
      inseg.len -= off;
 800f5ce:	f8b9 3008 	ldrh.w	r3, [r9, #8]
        p->len = 0;
 800f5d2:	2100      	movs	r1, #0
      inseg.len -= off;
 800f5d4:	1bdb      	subs	r3, r3, r7
 800f5d6:	f8a9 3008 	strh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f5da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f5de:	891b      	ldrh	r3, [r3, #8]
 800f5e0:	1bdb      	subs	r3, r3, r7
 800f5e2:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800f5e4:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800f5e8:	42ba      	cmp	r2, r7
 800f5ea:	f0c0 8140 	bcc.w	800f86e <tcp_receive+0x466>
      pbuf_remove_header(p, off);
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	4640      	mov	r0, r8
 800f5f2:	f7fe faf1 	bl	800dbd8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f5f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f5f8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f5fc:	6033      	str	r3, [r6, #0]
 800f5fe:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f600:	6832      	ldr	r2, [r6, #0]
 800f602:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f604:	1ad1      	subs	r1, r2, r3
 800f606:	2900      	cmp	r1, #0
 800f608:	f2c0 8147 	blt.w	800f89a <tcp_receive+0x492>
 800f60c:	1a99      	subs	r1, r3, r2
 800f60e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800f610:	3901      	subs	r1, #1
 800f612:	42c1      	cmn	r1, r0
 800f614:	f100 8141 	bmi.w	800f89a <tcp_receive+0x492>
      if (pcb->rcv_nxt == seqno) {
 800f618:	429a      	cmp	r2, r3
 800f61a:	f040 813e 	bne.w	800f89a <tcp_receive+0x492>
        tcplen = TCP_TCPLEN(&inseg);
 800f61e:	4f69      	ldr	r7, [pc, #420]	@ (800f7c4 <tcp_receive+0x3bc>)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 800f626:	8998      	ldrh	r0, [r3, #12]
 800f628:	f7fd fdaa 	bl	800d180 <lwip_htons>
 800f62c:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800f630:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800f632:	bf18      	it	ne
 800f634:	2001      	movne	r0, #1
 800f636:	eb08 0300 	add.w	r3, r8, r0
 800f63a:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800f63c:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800f63e:	802b      	strh	r3, [r5, #0]
        if (tcplen > pcb->rcv_wnd) {
 800f640:	d241      	bcs.n	800f6c6 <tcp_receive+0x2be>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	8998      	ldrh	r0, [r3, #12]
 800f646:	f7fd fd9b 	bl	800d180 <lwip_htons>
 800f64a:	07c3      	lsls	r3, r0, #31
 800f64c:	d50f      	bpl.n	800f66e <tcp_receive+0x266>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800f654:	4640      	mov	r0, r8
 800f656:	f428 587c 	bic.w	r8, r8, #16128	@ 0x3f00
 800f65a:	f7fd fd91 	bl	800d180 <lwip_htons>
 800f65e:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800f662:	f7fd fd8d 	bl	800d180 <lwip_htons>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	ea40 0008 	orr.w	r0, r0, r8
 800f66c:	8198      	strh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f66e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800f670:	813b      	strh	r3, [r7, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	8998      	ldrh	r0, [r3, #12]
 800f676:	f7fd fd83 	bl	800d180 <lwip_htons>
 800f67a:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800f67c:	6878      	ldr	r0, [r7, #4]
            inseg.len -= 1;
 800f67e:	bf42      	ittt	mi
 800f680:	893b      	ldrhmi	r3, [r7, #8]
 800f682:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f686:	813b      	strhmi	r3, [r7, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800f688:	8939      	ldrh	r1, [r7, #8]
 800f68a:	f7fe fbb3 	bl	800ddf4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 800f694:	8998      	ldrh	r0, [r3, #12]
 800f696:	f7fd fd73 	bl	800d180 <lwip_htons>
 800f69a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800f69e:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800f6a0:	bf18      	it	ne
 800f6a2:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800f6a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800f6a6:	eb08 0300 	add.w	r3, r8, r0
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	802b      	strh	r3, [r5, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800f6ae:	4413      	add	r3, r2
 800f6b0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800f6b2:	440a      	add	r2, r1
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d006      	beq.n	800f6c6 <tcp_receive+0x2be>
 800f6b8:	4b3d      	ldr	r3, [pc, #244]	@ (800f7b0 <tcp_receive+0x3a8>)
 800f6ba:	f240 52d1 	movw	r2, #1489	@ 0x5d1
 800f6be:	4942      	ldr	r1, [pc, #264]	@ (800f7c8 <tcp_receive+0x3c0>)
 800f6c0:	483d      	ldr	r0, [pc, #244]	@ (800f7b8 <tcp_receive+0x3b0>)
 800f6c2:	f004 ffe9 	bl	8014698 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800f6c6:	882a      	ldrh	r2, [r5, #0]
 800f6c8:	6833      	ldr	r3, [r6, #0]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	6263      	str	r3, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800f6ce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d206      	bcs.n	800f6e2 <tcp_receive+0x2da>
 800f6d4:	4b36      	ldr	r3, [pc, #216]	@ (800f7b0 <tcp_receive+0x3a8>)
 800f6d6:	f240 620d 	movw	r2, #1549	@ 0x60d
 800f6da:	493c      	ldr	r1, [pc, #240]	@ (800f7cc <tcp_receive+0x3c4>)
 800f6dc:	4836      	ldr	r0, [pc, #216]	@ (800f7b8 <tcp_receive+0x3b0>)
 800f6de:	f004 ffdb 	bl	8014698 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f6e2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800f6e4:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800f6e6:	882a      	ldrh	r2, [r5, #0]
 800f6e8:	1a9b      	subs	r3, r3, r2
 800f6ea:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800f6ec:	f7fe fe68 	bl	800e3c0 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	891a      	ldrh	r2, [r3, #8]
 800f6f4:	b11a      	cbz	r2, 800f6fe <tcp_receive+0x2f6>
          recv_data = inseg.p;
 800f6f6:	4a36      	ldr	r2, [pc, #216]	@ (800f7d0 <tcp_receive+0x3c8>)
 800f6f8:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	607b      	str	r3, [r7, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	8998      	ldrh	r0, [r3, #12]
 800f702:	f7fd fd3d 	bl	800d180 <lwip_htons>
 800f706:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800f708:	bf41      	itttt	mi
 800f70a:	4a32      	ldrmi	r2, [pc, #200]	@ (800f7d4 <tcp_receive+0x3cc>)
 800f70c:	7813      	ldrbmi	r3, [r2, #0]
 800f70e:	f043 0320 	orrmi.w	r3, r3, #32
 800f712:	7013      	strbmi	r3, [r2, #0]
        tcp_ack(pcb);
 800f714:	8b63      	ldrh	r3, [r4, #26]
 800f716:	07da      	lsls	r2, r3, #31
 800f718:	f140 80ba 	bpl.w	800f890 <tcp_receive+0x488>
 800f71c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800f720:	f043 0302 	orr.w	r3, r3, #2
 800f724:	e0b6      	b.n	800f894 <tcp_receive+0x48c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f726:	43d1      	mvns	r1, r2
 800f728:	42d9      	cmn	r1, r3
 800f72a:	f100 809c 	bmi.w	800f866 <tcp_receive+0x45e>
 800f72e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800f730:	1ac9      	subs	r1, r1, r3
 800f732:	2900      	cmp	r1, #0
 800f734:	f2c0 8097 	blt.w	800f866 <tcp_receive+0x45e>
      if (pcb->flags & TF_INFR) {
 800f738:	8b61      	ldrh	r1, [r4, #26]
 800f73a:	0748      	lsls	r0, r1, #29
 800f73c:	d509      	bpl.n	800f752 <tcp_receive+0x34a>
        tcp_clear_flags(pcb, TF_INFR);
 800f73e:	f021 0104 	bic.w	r1, r1, #4
 800f742:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800f744:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 800f748:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f74c:	2100      	movs	r1, #0
 800f74e:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f752:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800f756:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800f758:	6463      	str	r3, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f75a:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 800f75e:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
      pcb->nrtx = 0;
 800f762:	2100      	movs	r1, #0
 800f764:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800f768:	7d21      	ldrb	r1, [r4, #20]
 800f76a:	2903      	cmp	r1, #3
 800f76c:	d93e      	bls.n	800f7ec <tcp_receive+0x3e4>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f76e:	1a9b      	subs	r3, r3, r2
        if (pcb->cwnd < pcb->ssthresh) {
 800f770:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 800f774:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f778:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800f77a:	4291      	cmp	r1, r2
 800f77c:	d92c      	bls.n	800f7d8 <tcp_receive+0x3d0>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f77e:	8b61      	ldrh	r1, [r4, #26]
 800f780:	f411 6f00 	tst.w	r1, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f784:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f786:	bf0c      	ite	eq
 800f788:	2002      	moveq	r0, #2
 800f78a:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f78c:	fb11 f100 	smulbb	r1, r1, r0
 800f790:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800f792:	4299      	cmp	r1, r3
 800f794:	bf94      	ite	ls
 800f796:	1850      	addls	r0, r2, r1
 800f798:	18d0      	addhi	r0, r2, r3
 800f79a:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d901      	bls.n	800f7a4 <tcp_receive+0x39c>
          TCP_WND_INC(pcb->cwnd, increase);
 800f7a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f7a4:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800f7a8:	e020      	b.n	800f7ec <tcp_receive+0x3e4>
 800f7aa:	bf00      	nop
 800f7ac:	2000f338 	.word	0x2000f338
 800f7b0:	080170b1 	.word	0x080170b1
 800f7b4:	0801714c 	.word	0x0801714c
 800f7b8:	08015927 	.word	0x08015927
 800f7bc:	0801715c 	.word	0x0801715c
 800f7c0:	0801716b 	.word	0x0801716b
 800f7c4:	2000f364 	.word	0x2000f364
 800f7c8:	0801717b 	.word	0x0801717b
 800f7cc:	080171b1 	.word	0x080171b1
 800f7d0:	2000f340 	.word	0x2000f340
 800f7d4:	2000f344 	.word	0x2000f344
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f7d8:	f8b4 106a 	ldrh.w	r1, [r4, #106]	@ 0x6a
 800f7dc:	440b      	add	r3, r1
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	4299      	cmp	r1, r3
 800f7e2:	d82c      	bhi.n	800f83e <tcp_receive+0x436>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d92c      	bls.n	800f842 <tcp_receive+0x43a>
 800f7e8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800f7f2:	f7ff fda7 	bl	800f344 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f7f6:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f7ff fda1 	bl	800f344 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800f802:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f804:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800f806:	fab2 f382 	clz	r3, r2
 800f80a:	095b      	lsrs	r3, r3, #5
 800f80c:	425b      	negs	r3, r3
 800f80e:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800f814:	b908      	cbnz	r0, 800f81a <tcp_receive+0x412>
        pcb->unsent_oversize = 0;
 800f816:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f81a:	4927      	ldr	r1, [pc, #156]	@ (800f8b8 <tcp_receive+0x4b0>)
 800f81c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800f820:	8809      	ldrh	r1, [r1, #0]
 800f822:	440b      	add	r3, r1
 800f824:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800f828:	8b63      	ldrh	r3, [r4, #26]
 800f82a:	0519      	lsls	r1, r3, #20
 800f82c:	f57f ae6b 	bpl.w	800f506 <tcp_receive+0xfe>
        if (pcb->unacked == NULL) {
 800f830:	b9ba      	cbnz	r2, 800f862 <tcp_receive+0x45a>
          if ((pcb->unsent == NULL) ||
 800f832:	b968      	cbnz	r0, 800f850 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f834:	8b63      	ldrh	r3, [r4, #26]
 800f836:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f83a:	8363      	strh	r3, [r4, #26]
 800f83c:	e663      	b.n	800f506 <tcp_receive+0xfe>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f83e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f842:	1a9b      	subs	r3, r3, r2
 800f844:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f848:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f84a:	4413      	add	r3, r2
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	e7a5      	b.n	800f79c <tcp_receive+0x394>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f850:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f852:	6858      	ldr	r0, [r3, #4]
 800f854:	f7fd fc97 	bl	800d186 <lwip_htonl>
 800f858:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f85a:	1ac0      	subs	r0, r0, r3
 800f85c:	2800      	cmp	r0, #0
 800f85e:	dae9      	bge.n	800f834 <tcp_receive+0x42c>
 800f860:	e651      	b.n	800f506 <tcp_receive+0xfe>
 800f862:	68d3      	ldr	r3, [r2, #12]
 800f864:	e7f5      	b.n	800f852 <tcp_receive+0x44a>
      tcp_send_empty_ack(pcb);
 800f866:	4620      	mov	r0, r4
 800f868:	f001 fc9a 	bl	80111a0 <tcp_send_empty_ack>
 800f86c:	e64b      	b.n	800f506 <tcp_receive+0xfe>
        off -= p->len;
 800f86e:	1aba      	subs	r2, r7, r2
        p->tot_len = new_tot_len;
 800f870:	f8a8 3008 	strh.w	r3, [r8, #8]
        p->len = 0;
 800f874:	f8a8 100a 	strh.w	r1, [r8, #10]
        off -= p->len;
 800f878:	b297      	uxth	r7, r2
        p = p->next;
 800f87a:	f8d8 8000 	ldr.w	r8, [r8]
 800f87e:	e6b1      	b.n	800f5e4 <tcp_receive+0x1dc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f880:	1ad2      	subs	r2, r2, r3
 800f882:	2a00      	cmp	r2, #0
        tcp_ack_now(pcb);
 800f884:	bfbe      	ittt	lt
 800f886:	8b63      	ldrhlt	r3, [r4, #26]
 800f888:	f043 0302 	orrlt.w	r3, r3, #2
 800f88c:	8363      	strhlt	r3, [r4, #26]
 800f88e:	e6b7      	b.n	800f600 <tcp_receive+0x1f8>
        tcp_ack(pcb);
 800f890:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800f894:	8363      	strh	r3, [r4, #26]
}
 800f896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tcp_send_empty_ack(pcb);
 800f89a:	4620      	mov	r0, r4
}
 800f89c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        tcp_send_empty_ack(pcb);
 800f8a0:	f001 bc7e 	b.w	80111a0 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f8a4:	1ad1      	subs	r1, r2, r3
 800f8a6:	2900      	cmp	r1, #0
 800f8a8:	db04      	blt.n	800f8b4 <tcp_receive+0x4ac>
 800f8aa:	1a9b      	subs	r3, r3, r2
 800f8ac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	42d3      	cmn	r3, r2
 800f8b2:	d5f0      	bpl.n	800f896 <tcp_receive+0x48e>
      tcp_ack_now(pcb);
 800f8b4:	8b63      	ldrh	r3, [r4, #26]
 800f8b6:	e733      	b.n	800f720 <tcp_receive+0x318>
 800f8b8:	2000f348 	.word	0x2000f348

0800f8bc <tcp_input>:
{
 800f8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f8c0:	4605      	mov	r5, r0
{
 800f8c2:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f8c4:	b928      	cbnz	r0, 800f8d2 <tcp_input+0x16>
 800f8c6:	4b74      	ldr	r3, [pc, #464]	@ (800fa98 <tcp_input+0x1dc>)
 800f8c8:	2283      	movs	r2, #131	@ 0x83
 800f8ca:	4974      	ldr	r1, [pc, #464]	@ (800fa9c <tcp_input+0x1e0>)
 800f8cc:	4874      	ldr	r0, [pc, #464]	@ (800faa0 <tcp_input+0x1e4>)
 800f8ce:	f004 fee3 	bl	8014698 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800f8d2:	686b      	ldr	r3, [r5, #4]
 800f8d4:	4e73      	ldr	r6, [pc, #460]	@ (800faa4 <tcp_input+0x1e8>)
 800f8d6:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800f8d8:	896b      	ldrh	r3, [r5, #10]
 800f8da:	2b13      	cmp	r3, #19
 800f8dc:	f240 80d6 	bls.w	800fa8c <tcp_input+0x1d0>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f8e0:	f8df 81ec 	ldr.w	r8, [pc, #492]	@ 800fad0 <tcp_input+0x214>
 800f8e4:	f8d8 1000 	ldr.w	r1, [r8]
 800f8e8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800f8ec:	f002 ff8b 	bl	8012806 <ip4_addr_isbroadcast_u32>
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f040 80ca 	bne.w	800fa8c <tcp_input+0x1d0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f8f8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800f8fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f900:	2be0      	cmp	r3, #224	@ 0xe0
 800f902:	f000 80c3 	beq.w	800fa8c <tcp_input+0x1d0>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f906:	6833      	ldr	r3, [r6, #0]
 800f908:	8998      	ldrh	r0, [r3, #12]
 800f90a:	f7fd fc39 	bl	800d180 <lwip_htons>
 800f90e:	0a81      	lsrs	r1, r0, #10
 800f910:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f914:	2913      	cmp	r1, #19
 800f916:	f240 80b9 	bls.w	800fa8c <tcp_input+0x1d0>
 800f91a:	892b      	ldrh	r3, [r5, #8]
 800f91c:	428b      	cmp	r3, r1
 800f91e:	f0c0 80b5 	bcc.w	800fa8c <tcp_input+0x1d0>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f922:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800f926:	896a      	ldrh	r2, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f928:	4f5f      	ldr	r7, [pc, #380]	@ (800faa8 <tcp_input+0x1ec>)
 800f92a:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800f92c:	f8df a1a4 	ldr.w	sl, [pc, #420]	@ 800fad4 <tcp_input+0x218>
  if (p->len >= hdrlen_bytes) {
 800f930:	428a      	cmp	r2, r1
 800f932:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 800fad8 <tcp_input+0x21c>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f936:	803b      	strh	r3, [r7, #0]
  tcphdr_opt2 = NULL;
 800f938:	f8ca 4000 	str.w	r4, [sl]
  if (p->len >= hdrlen_bytes) {
 800f93c:	d364      	bcc.n	800fa08 <tcp_input+0x14c>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f93e:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800f940:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f944:	f7fe f948 	bl	800dbd8 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f948:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f94a:	f8df b190 	ldr.w	fp, [pc, #400]	@ 800fadc <tcp_input+0x220>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f94e:	8820      	ldrh	r0, [r4, #0]
 800f950:	f7fd fc16 	bl	800d180 <lwip_htons>
 800f954:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f956:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f958:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800fae0 <tcp_input+0x224>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f95c:	8860      	ldrh	r0, [r4, #2]
 800f95e:	f7fd fc0f 	bl	800d180 <lwip_htons>
 800f962:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f964:	6834      	ldr	r4, [r6, #0]
 800f966:	6860      	ldr	r0, [r4, #4]
 800f968:	f7fd fc0d 	bl	800d186 <lwip_htonl>
 800f96c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f96e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f970:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f974:	68a0      	ldr	r0, [r4, #8]
 800f976:	f7fd fc06 	bl	800d186 <lwip_htonl>
 800f97a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f97c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f97e:	f8ca 0000 	str.w	r0, [sl]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f982:	89e0      	ldrh	r0, [r4, #14]
 800f984:	f7fd fbfc 	bl	800d180 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800f988:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f98a:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800f98c:	8998      	ldrh	r0, [r3, #12]
 800f98e:	f7fd fbf7 	bl	800d180 <lwip_htons>
 800f992:	4a46      	ldr	r2, [pc, #280]	@ (800faac <tcp_input+0x1f0>)
 800f994:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f998:	0787      	lsls	r7, r0, #30
  flags = TCPH_FLAGS(tcphdr);
 800f99a:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len;
 800f99c:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f99e:	d16f      	bne.n	800fa80 <tcp_input+0x1c4>
  tcplen = p->tot_len;
 800f9a0:	4b43      	ldr	r3, [pc, #268]	@ (800fab0 <tcp_input+0x1f4>)
 800f9a2:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9a4:	4f43      	ldr	r7, [pc, #268]	@ (800fab4 <tcp_input+0x1f8>)
  prev = NULL;
 800f9a6:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9aa:	683c      	ldr	r4, [r7, #0]
 800f9ac:	2c00      	cmp	r4, #0
 800f9ae:	f040 8099 	bne.w	800fae4 <tcp_input+0x228>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9b2:	4b41      	ldr	r3, [pc, #260]	@ (800fab8 <tcp_input+0x1fc>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f9b4:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800faa0 <tcp_input+0x1e4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9b8:	681c      	ldr	r4, [r3, #0]
 800f9ba:	2c00      	cmp	r4, #0
 800f9bc:	f040 8129 	bne.w	800fc12 <tcp_input+0x356>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9c0:	4b3e      	ldr	r3, [pc, #248]	@ (800fabc <tcp_input+0x200>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f9c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9c6:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800f9c8:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 800f9ca:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9ce:	4691      	mov	r9, r2
 800f9d0:	f1b9 0f00 	cmp.w	r9, #0
 800f9d4:	f040 8175 	bne.w	800fcc2 <tcp_input+0x406>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f9d8:	8988      	ldrh	r0, [r1, #12]
 800f9da:	f7fd fbd1 	bl	800d180 <lwip_htons>
 800f9de:	0743      	lsls	r3, r0, #29
 800f9e0:	d454      	bmi.n	800fa8c <tcp_input+0x1d0>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9e2:	6833      	ldr	r3, [r6, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9e4:	4a32      	ldr	r2, [pc, #200]	@ (800fab0 <tcp_input+0x1f4>)
 800f9e6:	8818      	ldrh	r0, [r3, #0]
 800f9e8:	8811      	ldrh	r1, [r2, #0]
 800f9ea:	f8db 2000 	ldr.w	r2, [fp]
 800f9ee:	9002      	str	r0, [sp, #8]
 800f9f0:	885b      	ldrh	r3, [r3, #2]
 800f9f2:	440a      	add	r2, r1
 800f9f4:	9301      	str	r3, [sp, #4]
 800f9f6:	4b32      	ldr	r3, [pc, #200]	@ (800fac0 <tcp_input+0x204>)
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	f8da 1000 	ldr.w	r1, [sl]
 800fa00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fa04:	f000 bcd4 	b.w	80103b0 <tcp_input+0xaf4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fa08:	682b      	ldr	r3, [r5, #0]
 800fa0a:	b92b      	cbnz	r3, 800fa18 <tcp_input+0x15c>
 800fa0c:	4b22      	ldr	r3, [pc, #136]	@ (800fa98 <tcp_input+0x1dc>)
 800fa0e:	22c2      	movs	r2, #194	@ 0xc2
 800fa10:	492c      	ldr	r1, [pc, #176]	@ (800fac4 <tcp_input+0x208>)
 800fa12:	4823      	ldr	r0, [pc, #140]	@ (800faa0 <tcp_input+0x1e4>)
 800fa14:	f004 fe40 	bl	8014698 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800fa18:	2114      	movs	r1, #20
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	f7fe f8dc 	bl	800dbd8 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800fa20:	896c      	ldrh	r4, [r5, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa22:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 800fa24:	f8a9 4000 	strh.w	r4, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa28:	4621      	mov	r1, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa2a:	f8b7 9000 	ldrh.w	r9, [r7]
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa2e:	f7fe f8d3 	bl	800dbd8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800fa32:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa34:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 800fa38:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa3a:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800fa3c:	42bb      	cmp	r3, r7
 800fa3e:	d325      	bcc.n	800fa8c <tcp_input+0x1d0>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fa40:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800fa42:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fa44:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 800fa48:	f7fe f8c6 	bl	800dbd8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fa4c:	892b      	ldrh	r3, [r5, #8]
 800fa4e:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fa50:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fa52:	eba4 0409 	sub.w	r4, r4, r9
 800fa56:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fa58:	b12b      	cbz	r3, 800fa66 <tcp_input+0x1aa>
 800fa5a:	4b0f      	ldr	r3, [pc, #60]	@ (800fa98 <tcp_input+0x1dc>)
 800fa5c:	22df      	movs	r2, #223	@ 0xdf
 800fa5e:	491a      	ldr	r1, [pc, #104]	@ (800fac8 <tcp_input+0x20c>)
 800fa60:	480f      	ldr	r0, [pc, #60]	@ (800faa0 <tcp_input+0x1e4>)
 800fa62:	f004 fe19 	bl	8014698 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fa66:	682b      	ldr	r3, [r5, #0]
 800fa68:	892a      	ldrh	r2, [r5, #8]
 800fa6a:	891b      	ldrh	r3, [r3, #8]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	f43f af6b 	beq.w	800f948 <tcp_input+0x8c>
 800fa72:	4b09      	ldr	r3, [pc, #36]	@ (800fa98 <tcp_input+0x1dc>)
 800fa74:	22e0      	movs	r2, #224	@ 0xe0
 800fa76:	4915      	ldr	r1, [pc, #84]	@ (800facc <tcp_input+0x210>)
 800fa78:	4809      	ldr	r0, [pc, #36]	@ (800faa0 <tcp_input+0x1e4>)
 800fa7a:	f004 fe0d 	bl	8014698 <iprintf>
 800fa7e:	e763      	b.n	800f948 <tcp_input+0x8c>
    tcplen++;
 800fa80:	1c53      	adds	r3, r2, #1
 800fa82:	490b      	ldr	r1, [pc, #44]	@ (800fab0 <tcp_input+0x1f4>)
 800fa84:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800fa86:	429a      	cmp	r2, r3
    tcplen++;
 800fa88:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800fa8a:	d98b      	bls.n	800f9a4 <tcp_input+0xe8>
  pbuf_free(p);
 800fa8c:	4628      	mov	r0, r5
}
 800fa8e:	b005      	add	sp, #20
 800fa90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800fa94:	f7fe b8cc 	b.w	800dc30 <pbuf_free>
 800fa98:	080170b1 	.word	0x080170b1
 800fa9c:	080171cf 	.word	0x080171cf
 800faa0:	08015927 	.word	0x08015927
 800faa4:	2000f360 	.word	0x2000f360
 800faa8:	2000f35e 	.word	0x2000f35e
 800faac:	2000f345 	.word	0x2000f345
 800fab0:	2000f346 	.word	0x2000f346
 800fab4:	2000f32c 	.word	0x2000f32c
 800fab8:	2000f328 	.word	0x2000f328
 800fabc:	2000f330 	.word	0x2000f330
 800fac0:	2000b538 	.word	0x2000b538
 800fac4:	080171e7 	.word	0x080171e7
 800fac8:	080171f7 	.word	0x080171f7
 800facc:	08017203 	.word	0x08017203
 800fad0:	2000b528 	.word	0x2000b528
 800fad4:	2000f358 	.word	0x2000f358
 800fad8:	2000f35c 	.word	0x2000f35c
 800fadc:	2000f350 	.word	0x2000f350
 800fae0:	2000f34c 	.word	0x2000f34c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fae4:	7d23      	ldrb	r3, [r4, #20]
 800fae6:	b92b      	cbnz	r3, 800faf4 <tcp_input+0x238>
 800fae8:	4b8e      	ldr	r3, [pc, #568]	@ (800fd24 <tcp_input+0x468>)
 800faea:	22fb      	movs	r2, #251	@ 0xfb
 800faec:	498e      	ldr	r1, [pc, #568]	@ (800fd28 <tcp_input+0x46c>)
 800faee:	488f      	ldr	r0, [pc, #572]	@ (800fd2c <tcp_input+0x470>)
 800faf0:	f004 fdd2 	bl	8014698 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800faf4:	7d23      	ldrb	r3, [r4, #20]
 800faf6:	2b0a      	cmp	r3, #10
 800faf8:	d105      	bne.n	800fb06 <tcp_input+0x24a>
 800fafa:	4b8a      	ldr	r3, [pc, #552]	@ (800fd24 <tcp_input+0x468>)
 800fafc:	22fc      	movs	r2, #252	@ 0xfc
 800fafe:	498c      	ldr	r1, [pc, #560]	@ (800fd30 <tcp_input+0x474>)
 800fb00:	488a      	ldr	r0, [pc, #552]	@ (800fd2c <tcp_input+0x470>)
 800fb02:	f004 fdc9 	bl	8014698 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fb06:	7d23      	ldrb	r3, [r4, #20]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d105      	bne.n	800fb18 <tcp_input+0x25c>
 800fb0c:	4b85      	ldr	r3, [pc, #532]	@ (800fd24 <tcp_input+0x468>)
 800fb0e:	22fd      	movs	r2, #253	@ 0xfd
 800fb10:	4988      	ldr	r1, [pc, #544]	@ (800fd34 <tcp_input+0x478>)
 800fb12:	4886      	ldr	r0, [pc, #536]	@ (800fd2c <tcp_input+0x470>)
 800fb14:	f004 fdc0 	bl	8014698 <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb18:	7a21      	ldrb	r1, [r4, #8]
 800fb1a:	68e2      	ldr	r2, [r4, #12]
 800fb1c:	b139      	cbz	r1, 800fb2e <tcp_input+0x272>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fb26:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	4299      	cmp	r1, r3
 800fb2c:	d16e      	bne.n	800fc0c <tcp_input+0x350>
    if (pcb->remote_port == tcphdr->src &&
 800fb2e:	6833      	ldr	r3, [r6, #0]
 800fb30:	8b20      	ldrh	r0, [r4, #24]
 800fb32:	8819      	ldrh	r1, [r3, #0]
 800fb34:	4288      	cmp	r0, r1
 800fb36:	d169      	bne.n	800fc0c <tcp_input+0x350>
 800fb38:	8ae1      	ldrh	r1, [r4, #22]
 800fb3a:	885b      	ldrh	r3, [r3, #2]
 800fb3c:	4299      	cmp	r1, r3
 800fb3e:	d165      	bne.n	800fc0c <tcp_input+0x350>
        pcb->local_port == tcphdr->dest &&
 800fb40:	6861      	ldr	r1, [r4, #4]
 800fb42:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fb46:	4299      	cmp	r1, r3
 800fb48:	d160      	bne.n	800fc0c <tcp_input+0x350>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb4a:	6821      	ldr	r1, [r4, #0]
 800fb4c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fb50:	4299      	cmp	r1, r3
 800fb52:	d15b      	bne.n	800fc0c <tcp_input+0x350>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fb54:	42a2      	cmp	r2, r4
 800fb56:	f040 8406 	bne.w	8010366 <tcp_input+0xaaa>
 800fb5a:	4b72      	ldr	r3, [pc, #456]	@ (800fd24 <tcp_input+0x468>)
 800fb5c:	f240 120d 	movw	r2, #269	@ 0x10d
 800fb60:	4975      	ldr	r1, [pc, #468]	@ (800fd38 <tcp_input+0x47c>)
 800fb62:	4872      	ldr	r0, [pc, #456]	@ (800fd2c <tcp_input+0x470>)
 800fb64:	f004 fd98 	bl	8014698 <iprintf>
      if (prev != NULL) {
 800fb68:	f1b9 0f00 	cmp.w	r9, #0
 800fb6c:	d005      	beq.n	800fb7a <tcp_input+0x2be>
        prev->next = pcb->next;
 800fb6e:	68e3      	ldr	r3, [r4, #12]
 800fb70:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800fb74:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 800fb76:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 800fb78:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fb7a:	68e3      	ldr	r3, [r4, #12]
 800fb7c:	42a3      	cmp	r3, r4
 800fb7e:	d106      	bne.n	800fb8e <tcp_input+0x2d2>
 800fb80:	4b68      	ldr	r3, [pc, #416]	@ (800fd24 <tcp_input+0x468>)
 800fb82:	f240 1215 	movw	r2, #277	@ 0x115
 800fb86:	496d      	ldr	r1, [pc, #436]	@ (800fd3c <tcp_input+0x480>)
 800fb88:	4868      	ldr	r0, [pc, #416]	@ (800fd2c <tcp_input+0x470>)
 800fb8a:	f004 fd85 	bl	8014698 <iprintf>
    inseg.next = NULL;
 800fb8e:	496c      	ldr	r1, [pc, #432]	@ (800fd40 <tcp_input+0x484>)
 800fb90:	2300      	movs	r3, #0
    inseg.len = p->tot_len;
 800fb92:	892a      	ldrh	r2, [r5, #8]
    recv_data = NULL;
 800fb94:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 800fd60 <tcp_input+0x4a4>
    inseg.len = p->tot_len;
 800fb98:	810a      	strh	r2, [r1, #8]
    inseg.tcphdr = tcphdr;
 800fb9a:	6832      	ldr	r2, [r6, #0]
    recv_flags = 0;
 800fb9c:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800fd64 <tcp_input+0x4a8>
    inseg.tcphdr = tcphdr;
 800fba0:	60ca      	str	r2, [r1, #12]
    recv_acked = 0;
 800fba2:	4a68      	ldr	r2, [pc, #416]	@ (800fd44 <tcp_input+0x488>)
    inseg.next = NULL;
 800fba4:	600b      	str	r3, [r1, #0]
    recv_data = NULL;
 800fba6:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 800fbaa:	f888 3000 	strb.w	r3, [r8]
    recv_acked = 0;
 800fbae:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800fbb0:	4b65      	ldr	r3, [pc, #404]	@ (800fd48 <tcp_input+0x48c>)
    inseg.p = p;
 800fbb2:	604d      	str	r5, [r1, #4]
    if (flags & TCP_PSH) {
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	071b      	lsls	r3, r3, #28
      p->flags |= PBUF_FLAG_PUSH;
 800fbb8:	bf42      	ittt	mi
 800fbba:	7b6b      	ldrbmi	r3, [r5, #13]
 800fbbc:	f043 0301 	orrmi.w	r3, r3, #1
 800fbc0:	736b      	strbmi	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800fbc2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800fbc4:	4d61      	ldr	r5, [pc, #388]	@ (800fd4c <tcp_input+0x490>)
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f000 8130 	beq.w	800fe2c <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f7ff f83f 	bl	800ec50 <tcp_process_refused_data>
 800fbd2:	300d      	adds	r0, #13
 800fbd4:	d008      	beq.n	800fbe8 <tcp_input+0x32c>
 800fbd6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f000 8127 	beq.w	800fe2c <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fbde:	4b5c      	ldr	r3, [pc, #368]	@ (800fd50 <tcp_input+0x494>)
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f000 8122 	beq.w	800fe2c <tcp_input+0x570>
        if (pcb->rcv_ann_wnd == 0) {
 800fbe8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800fbea:	b913      	cbnz	r3, 800fbf2 <tcp_input+0x336>
          tcp_send_empty_ack(pcb);
 800fbec:	4620      	mov	r0, r4
 800fbee:	f001 fad7 	bl	80111a0 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800fbf2:	2400      	movs	r4, #0
 800fbf4:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL) {
 800fbf6:	4d52      	ldr	r5, [pc, #328]	@ (800fd40 <tcp_input+0x484>)
    recv_data = NULL;
 800fbf8:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 800fbfc:	6868      	ldr	r0, [r5, #4]
 800fbfe:	b110      	cbz	r0, 800fc06 <tcp_input+0x34a>
      pbuf_free(inseg.p);
 800fc00:	f7fe f816 	bl	800dc30 <pbuf_free>
      inseg.p = NULL;
 800fc04:	606c      	str	r4, [r5, #4]
}
 800fc06:	b005      	add	sp, #20
 800fc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc0c:	46a1      	mov	r9, r4
 800fc0e:	4614      	mov	r4, r2
 800fc10:	e6cc      	b.n	800f9ac <tcp_input+0xf0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fc12:	7d23      	ldrb	r3, [r4, #20]
 800fc14:	2b0a      	cmp	r3, #10
 800fc16:	d006      	beq.n	800fc26 <tcp_input+0x36a>
 800fc18:	4b42      	ldr	r3, [pc, #264]	@ (800fd24 <tcp_input+0x468>)
 800fc1a:	f240 121f 	movw	r2, #287	@ 0x11f
 800fc1e:	494d      	ldr	r1, [pc, #308]	@ (800fd54 <tcp_input+0x498>)
 800fc20:	4648      	mov	r0, r9
 800fc22:	f004 fd39 	bl	8014698 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc26:	7a22      	ldrb	r2, [r4, #8]
 800fc28:	b13a      	cbz	r2, 800fc3a <tcp_input+0x37e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fc32:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d141      	bne.n	800fcbe <tcp_input+0x402>
      if (pcb->remote_port == tcphdr->src &&
 800fc3a:	6833      	ldr	r3, [r6, #0]
 800fc3c:	8b21      	ldrh	r1, [r4, #24]
 800fc3e:	881a      	ldrh	r2, [r3, #0]
 800fc40:	4291      	cmp	r1, r2
 800fc42:	d13c      	bne.n	800fcbe <tcp_input+0x402>
          pcb->local_port == tcphdr->dest &&
 800fc44:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800fc46:	8ae3      	ldrh	r3, [r4, #22]
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d138      	bne.n	800fcbe <tcp_input+0x402>
          pcb->local_port == tcphdr->dest &&
 800fc4c:	6860      	ldr	r0, [r4, #4]
 800fc4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc52:	4290      	cmp	r0, r2
 800fc54:	d133      	bne.n	800fcbe <tcp_input+0x402>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc56:	6820      	ldr	r0, [r4, #0]
 800fc58:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800fc5c:	4290      	cmp	r0, r2
 800fc5e:	d12e      	bne.n	800fcbe <tcp_input+0x402>
  if (flags & TCP_RST) {
 800fc60:	4a39      	ldr	r2, [pc, #228]	@ (800fd48 <tcp_input+0x48c>)
 800fc62:	7810      	ldrb	r0, [r2, #0]
 800fc64:	0746      	lsls	r6, r0, #29
 800fc66:	f53f af11 	bmi.w	800fa8c <tcp_input+0x1d0>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc6a:	4a39      	ldr	r2, [pc, #228]	@ (800fd50 <tcp_input+0x494>)
 800fc6c:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800fc6e:	0782      	lsls	r2, r0, #30
 800fc70:	d515      	bpl.n	800fc9e <tcp_input+0x3e2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fc72:	f8db 2000 	ldr.w	r2, [fp]
 800fc76:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fc78:	1a17      	subs	r7, r2, r0
 800fc7a:	2f00      	cmp	r7, #0
 800fc7c:	db14      	blt.n	800fca8 <tcp_input+0x3ec>
 800fc7e:	8d27      	ldrh	r7, [r4, #40]	@ 0x28
 800fc80:	1a80      	subs	r0, r0, r2
 800fc82:	42c7      	cmn	r7, r0
 800fc84:	d410      	bmi.n	800fca8 <tcp_input+0x3ec>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc86:	4432      	add	r2, r6
 800fc88:	4620      	mov	r0, r4
 800fc8a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fc8e:	4b32      	ldr	r3, [pc, #200]	@ (800fd58 <tcp_input+0x49c>)
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	3304      	adds	r3, #4
 800fc94:	f8da 1000 	ldr.w	r1, [sl]
 800fc98:	f001 fa48 	bl	801112c <tcp_rst>
      return;
 800fc9c:	e6f6      	b.n	800fa8c <tcp_input+0x1d0>
  } else if (flags & TCP_FIN) {
 800fc9e:	07c7      	lsls	r7, r0, #31
    pcb->tmr = tcp_ticks;
 800fca0:	bf42      	ittt	mi
 800fca2:	4b2e      	ldrmi	r3, [pc, #184]	@ (800fd5c <tcp_input+0x4a0>)
 800fca4:	681b      	ldrmi	r3, [r3, #0]
 800fca6:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800fca8:	2e00      	cmp	r6, #0
 800fcaa:	f43f aeef 	beq.w	800fa8c <tcp_input+0x1d0>
    tcp_ack_now(pcb);
 800fcae:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 800fcb0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800fcb2:	f043 0302 	orr.w	r3, r3, #2
 800fcb6:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800fcb8:	f001 faa4 	bl	8011204 <tcp_output>
        pbuf_free(p);
 800fcbc:	e6e6      	b.n	800fa8c <tcp_input+0x1d0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcbe:	68e4      	ldr	r4, [r4, #12]
 800fcc0:	e67b      	b.n	800f9ba <tcp_input+0xfe>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fcc2:	f899 c008 	ldrb.w	ip, [r9, #8]
 800fcc6:	f1bc 0f00 	cmp.w	ip, #0
 800fcca:	d005      	beq.n	800fcd8 <tcp_input+0x41c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fccc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800fcd0:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	459c      	cmp	ip, r3
 800fcd6:	d10c      	bne.n	800fcf2 <tcp_input+0x436>
      if (lpcb->local_port == tcphdr->dest) {
 800fcd8:	f8b9 c016 	ldrh.w	ip, [r9, #22]
 800fcdc:	884b      	ldrh	r3, [r1, #2]
 800fcde:	459c      	cmp	ip, r3
 800fce0:	d107      	bne.n	800fcf2 <tcp_input+0x436>
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 800fce2:	f8d9 3000 	ldr.w	r3, [r9]
 800fce6:	4573      	cmp	r3, lr
 800fce8:	f000 8342 	beq.w	8010370 <tcp_input+0xab4>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f000 833f 	beq.w	8010370 <tcp_input+0xab4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcf2:	464c      	mov	r4, r9
 800fcf4:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800fcf8:	e66a      	b.n	800f9d0 <tcp_input+0x114>
  } else if (flags & TCP_SYN) {
 800fcfa:	079a      	lsls	r2, r3, #30
 800fcfc:	f57f aec6 	bpl.w	800fa8c <tcp_input+0x1d0>
    npcb = tcp_alloc(pcb->prio);
 800fd00:	f899 0015 	ldrb.w	r0, [r9, #21]
 800fd04:	f7ff f924 	bl	800ef50 <tcp_alloc>
    if (npcb == NULL) {
 800fd08:	4682      	mov	sl, r0
 800fd0a:	bb68      	cbnz	r0, 800fd68 <tcp_input+0x4ac>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd0c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f43f aebb 	beq.w	800fa8c <tcp_input+0x1d0>
 800fd16:	4601      	mov	r1, r0
 800fd18:	f04f 32ff 	mov.w	r2, #4294967295
 800fd1c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fd20:	4798      	blx	r3
 800fd22:	e6b3      	b.n	800fa8c <tcp_input+0x1d0>
 800fd24:	080170b1 	.word	0x080170b1
 800fd28:	08017222 	.word	0x08017222
 800fd2c:	08015927 	.word	0x08015927
 800fd30:	08017249 	.word	0x08017249
 800fd34:	08017273 	.word	0x08017273
 800fd38:	0801729a 	.word	0x0801729a
 800fd3c:	080172c5 	.word	0x080172c5
 800fd40:	2000f364 	.word	0x2000f364
 800fd44:	2000f348 	.word	0x2000f348
 800fd48:	2000f345 	.word	0x2000f345
 800fd4c:	2000f33c 	.word	0x2000f33c
 800fd50:	2000f346 	.word	0x2000f346
 800fd54:	080172ef 	.word	0x080172ef
 800fd58:	2000b538 	.word	0x2000b538
 800fd5c:	2000f338 	.word	0x2000f338
 800fd60:	2000f340 	.word	0x2000f340
 800fd64:	2000f344 	.word	0x2000f344
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd68:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800fd6c:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd6e:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd70:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fd74:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800fd76:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800fd7a:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800fd7c:	7813      	ldrb	r3, [r2, #0]
 800fd7e:	7852      	ldrb	r2, [r2, #1]
 800fd80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fd84:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800fd86:	2303      	movs	r3, #3
 800fd88:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd8a:	f8db 3000 	ldr.w	r3, [fp]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd92:	62c3      	str	r3, [r0, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fd94:	f7ff f97a 	bl	800f08c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd98:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800fd9c:	f8ca 0058 	str.w	r0, [sl, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fda0:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800fda2:	f8ca 0050 	str.w	r0, [sl, #80]	@ 0x50
    npcb->lastack = iss;
 800fda6:	f8ca 0044 	str.w	r0, [sl, #68]	@ 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fdaa:	f8ca 3054 	str.w	r3, [sl, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fdae:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 800fdb2:	f8ca 005c 	str.w	r0, [sl, #92]	@ 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800fdb6:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 800fdba:	f8ca 9078 	str.w	r9, [sl, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fdbe:	f899 3009 	ldrb.w	r3, [r9, #9]
 800fdc2:	f003 030c 	and.w	r3, r3, #12
 800fdc6:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fdca:	f899 3008 	ldrb.w	r3, [r9, #8]
 800fdce:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	f8c7 a000 	str.w	sl, [r7]
 800fdd8:	f8ca 300c 	str.w	r3, [sl, #12]
 800fddc:	f001 fce6 	bl	80117ac <tcp_timer_needed>
 800fde0:	2201      	movs	r2, #1
 800fde2:	4ba2      	ldr	r3, [pc, #648]	@ (801006c <tcp_input+0x7b0>)
    tcp_parseopt(npcb);
 800fde4:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 800fde6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fde8:	f7ff fa44 	bl	800f274 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fdec:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fdee:	f10a 0604 	add.w	r6, sl, #4
 800fdf2:	f8ba 7032 	ldrh.w	r7, [sl, #50]	@ 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800fdf6:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fdf8:	4630      	mov	r0, r6
    npcb->snd_wnd = tcphdr->wnd;
 800fdfa:	f8aa 3060 	strh.w	r3, [sl, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fdfe:	f8aa 3062 	strh.w	r3, [sl, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe02:	f002 fb8f 	bl	8012524 <ip4_route>
 800fe06:	4632      	mov	r2, r6
 800fe08:	4601      	mov	r1, r0
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	f7ff f958 	bl	800f0c0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe10:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe12:	f8aa 0032 	strh.w	r0, [sl, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe16:	4650      	mov	r0, sl
 800fe18:	f001 f80c 	bl	8010e34 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800fe1c:	b120      	cbz	r0, 800fe28 <tcp_input+0x56c>
      tcp_abandon(npcb, 0);
 800fe1e:	4621      	mov	r1, r4
 800fe20:	4650      	mov	r0, sl
 800fe22:	f7fe ffc9 	bl	800edb8 <tcp_abandon>
      return;
 800fe26:	e631      	b.n	800fa8c <tcp_input+0x1d0>
    tcp_output(npcb);
 800fe28:	4650      	mov	r0, sl
 800fe2a:	e745      	b.n	800fcb8 <tcp_input+0x3fc>
  if (flags & TCP_RST) {
 800fe2c:	4b90      	ldr	r3, [pc, #576]	@ (8010070 <tcp_input+0x7b4>)
    tcp_input_pcb = pcb;
 800fe2e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 800fe30:	781a      	ldrb	r2, [r3, #0]
 800fe32:	0750      	lsls	r0, r2, #29
 800fe34:	d53d      	bpl.n	800feb2 <tcp_input+0x5f6>
    if (pcb->state == SYN_SENT) {
 800fe36:	7d21      	ldrb	r1, [r4, #20]
 800fe38:	2902      	cmp	r1, #2
 800fe3a:	d122      	bne.n	800fe82 <tcp_input+0x5c6>
      if (ackno == pcb->snd_nxt) {
 800fe3c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800fe3e:	f8da 3000 	ldr.w	r3, [sl]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d109      	bne.n	800fe5a <tcp_input+0x59e>
      recv_flags |= TF_RESET;
 800fe46:	f898 3000 	ldrb.w	r3, [r8]
 800fe4a:	f043 0308 	orr.w	r3, r3, #8
 800fe4e:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe52:	8b63      	ldrh	r3, [r4, #26]
 800fe54:	f023 0301 	bic.w	r3, r3, #1
 800fe58:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800fe5a:	f898 3000 	ldrb.w	r3, [r8]
 800fe5e:	0719      	lsls	r1, r3, #28
 800fe60:	f140 8205 	bpl.w	801026e <tcp_input+0x9b2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fe64:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800fe68:	b11b      	cbz	r3, 800fe72 <tcp_input+0x5b6>
 800fe6a:	f06f 010d 	mvn.w	r1, #13
 800fe6e:	6920      	ldr	r0, [r4, #16]
 800fe70:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe72:	4621      	mov	r1, r4
 800fe74:	487f      	ldr	r0, [pc, #508]	@ (8010074 <tcp_input+0x7b8>)
 800fe76:	f7fe fdb9 	bl	800e9ec <tcp_pcb_remove>
        tcp_free(pcb);
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	f7fe f9f0 	bl	800e260 <tcp_free>
 800fe80:	e6b7      	b.n	800fbf2 <tcp_input+0x336>
      if (seqno == pcb->rcv_nxt) {
 800fe82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fe84:	f8db 2000 	ldr.w	r2, [fp]
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d008      	beq.n	800fe9e <tcp_input+0x5e2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe8c:	1ad1      	subs	r1, r2, r3
 800fe8e:	2900      	cmp	r1, #0
 800fe90:	dbe3      	blt.n	800fe5a <tcp_input+0x59e>
 800fe92:	1a9b      	subs	r3, r3, r2
 800fe94:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800fe96:	42d3      	cmn	r3, r2
 800fe98:	d4df      	bmi.n	800fe5a <tcp_input+0x59e>
        tcp_ack_now(pcb);
 800fe9a:	8b63      	ldrh	r3, [r4, #26]
 800fe9c:	e010      	b.n	800fec0 <tcp_input+0x604>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe9e:	2900      	cmp	r1, #0
 800fea0:	d1d1      	bne.n	800fe46 <tcp_input+0x58a>
 800fea2:	4b75      	ldr	r3, [pc, #468]	@ (8010078 <tcp_input+0x7bc>)
 800fea4:	f240 323b 	movw	r2, #827	@ 0x33b
 800fea8:	4974      	ldr	r1, [pc, #464]	@ (801007c <tcp_input+0x7c0>)
 800feaa:	4875      	ldr	r0, [pc, #468]	@ (8010080 <tcp_input+0x7c4>)
 800feac:	f004 fbf4 	bl	8014698 <iprintf>
 800feb0:	e7c9      	b.n	800fe46 <tcp_input+0x58a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800feb2:	0791      	lsls	r1, r2, #30
        tcp_ack_now(pcb);
 800feb4:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800feb6:	d506      	bpl.n	800fec6 <tcp_input+0x60a>
 800feb8:	7d22      	ldrb	r2, [r4, #20]
 800feba:	3a02      	subs	r2, #2
 800febc:	2a01      	cmp	r2, #1
 800febe:	d902      	bls.n	800fec6 <tcp_input+0x60a>
        tcp_ack_now(pcb);
 800fec0:	f043 0302 	orr.w	r3, r3, #2
 800fec4:	e7c8      	b.n	800fe58 <tcp_input+0x59c>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fec6:	06da      	lsls	r2, r3, #27
  tcp_parseopt(pcb);
 800fec8:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800feca:	bf5e      	ittt	pl
 800fecc:	4b6d      	ldrpl	r3, [pc, #436]	@ (8010084 <tcp_input+0x7c8>)
 800fece:	681b      	ldrpl	r3, [r3, #0]
 800fed0:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800fed2:	2300      	movs	r3, #0
 800fed4:	f8a4 3096 	strh.w	r3, [r4, #150]	@ 0x96
  tcp_parseopt(pcb);
 800fed8:	f7ff f9cc 	bl	800f274 <tcp_parseopt>
  if (flags & TCP_SYN) {
 800fedc:	4b64      	ldr	r3, [pc, #400]	@ (8010070 <tcp_input+0x7b4>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f013 0102 	ands.w	r1, r3, #2
 800fee4:	d003      	beq.n	800feee <tcp_input+0x632>
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 800fee6:	7d22      	ldrb	r2, [r4, #20]
 800fee8:	3a02      	subs	r2, #2
 800feea:	2a01      	cmp	r2, #1
 800feec:	d8b5      	bhi.n	800fe5a <tcp_input+0x59e>
  switch (pcb->state) {
 800feee:	7d22      	ldrb	r2, [r4, #20]
 800fef0:	3a02      	subs	r2, #2
 800fef2:	2a07      	cmp	r2, #7
 800fef4:	d8b1      	bhi.n	800fe5a <tcp_input+0x59e>
 800fef6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fefa:	0008      	.short	0x0008
 800fefc:	011d0098 	.word	0x011d0098
 800ff00:	01690121 	.word	0x01690121
 800ff04:	0182011d 	.word	0x0182011d
 800ff08:	01a1      	.short	0x01a1
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff0a:	f003 0212 	and.w	r2, r3, #18
 800ff0e:	2a12      	cmp	r2, #18
 800ff10:	d16b      	bne.n	800ffea <tcp_input+0x72e>
          && (ackno == pcb->lastack + 1)) {
 800ff12:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ff14:	f8da 1000 	ldr.w	r1, [sl]
 800ff18:	3201      	adds	r2, #1
 800ff1a:	428a      	cmp	r2, r1
 800ff1c:	d165      	bne.n	800ffea <tcp_input+0x72e>
        pcb->rcv_nxt = seqno + 1;
 800ff1e:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 800ff22:	6462      	str	r2, [r4, #68]	@ 0x44
        pcb->rcv_nxt = seqno + 1;
 800ff24:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800ff26:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff28:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff2a:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800ff2c:	6261      	str	r1, [r4, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff2e:	62e1      	str	r1, [r4, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800ff30:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff32:	6563      	str	r3, [r4, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ff34:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800ff36:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff3a:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 800ff3c:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff3e:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff42:	4630      	mov	r0, r6
 800ff44:	f002 faee 	bl	8012524 <ip4_route>
 800ff48:	4632      	mov	r2, r6
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4638      	mov	r0, r7
 800ff4e:	f7ff f8b7 	bl	800f0c0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff52:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ff56:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff58:	8660      	strh	r0, [r4, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff5a:	0081      	lsls	r1, r0, #2
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	4616      	mov	r6, r2
 800ff60:	bf38      	it	cc
 800ff62:	461e      	movcc	r6, r3
 800ff64:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800ff68:	d933      	bls.n	800ffd2 <tcp_input+0x716>
 800ff6a:	b28b      	uxth	r3, r1
 800ff6c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ff70:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800ff74:	b933      	cbnz	r3, 800ff84 <tcp_input+0x6c8>
 800ff76:	4b40      	ldr	r3, [pc, #256]	@ (8010078 <tcp_input+0x7bc>)
 800ff78:	f240 3277 	movw	r2, #887	@ 0x377
 800ff7c:	4942      	ldr	r1, [pc, #264]	@ (8010088 <tcp_input+0x7cc>)
 800ff7e:	4840      	ldr	r0, [pc, #256]	@ (8010080 <tcp_input+0x7c4>)
 800ff80:	f004 fb8a 	bl	8014698 <iprintf>
        --pcb->snd_queuelen;
 800ff84:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
        rseg = pcb->unacked;
 800ff88:	6f26      	ldr	r6, [r4, #112]	@ 0x70
        --pcb->snd_queuelen;
 800ff8a:	3b01      	subs	r3, #1
 800ff8c:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
        if (rseg == NULL) {
 800ff90:	bb1e      	cbnz	r6, 800ffda <tcp_input+0x71e>
          rseg = pcb->unsent;
 800ff92:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ff94:	b936      	cbnz	r6, 800ffa4 <tcp_input+0x6e8>
 800ff96:	4b38      	ldr	r3, [pc, #224]	@ (8010078 <tcp_input+0x7bc>)
 800ff98:	f240 327f 	movw	r2, #895	@ 0x37f
 800ff9c:	493b      	ldr	r1, [pc, #236]	@ (801008c <tcp_input+0x7d0>)
 800ff9e:	4838      	ldr	r0, [pc, #224]	@ (8010080 <tcp_input+0x7c4>)
 800ffa0:	f004 fb7a 	bl	8014698 <iprintf>
          pcb->unsent = rseg->next;
 800ffa4:	6833      	ldr	r3, [r6, #0]
 800ffa6:	66e3      	str	r3, [r4, #108]	@ 0x6c
        tcp_seg_free(rseg);
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f7fe fa6f 	bl	800e48c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800ffae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ffb0:	b9b3      	cbnz	r3, 800ffe0 <tcp_input+0x724>
          pcb->rtime = -1;
 800ffb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ffb6:	8623      	strh	r3, [r4, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ffb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f43f af6c 	beq.w	800fe9a <tcp_input+0x5de>
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	4621      	mov	r1, r4
 800ffc6:	6920      	ldr	r0, [r4, #16]
 800ffc8:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800ffca:	300d      	adds	r0, #13
 800ffcc:	f47f af65 	bne.w	800fe9a <tcp_input+0x5de>
 800ffd0:	e60f      	b.n	800fbf2 <tcp_input+0x336>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	bf88      	it	hi
 800ffd6:	b293      	uxthhi	r3, r2
 800ffd8:	e7c8      	b.n	800ff6c <tcp_input+0x6b0>
          pcb->unacked = rseg->next;
 800ffda:	6833      	ldr	r3, [r6, #0]
 800ffdc:	6723      	str	r3, [r4, #112]	@ 0x70
 800ffde:	e7e3      	b.n	800ffa8 <tcp_input+0x6ec>
          pcb->rtime = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	8623      	strh	r3, [r4, #48]	@ 0x30
          pcb->nrtx = 0;
 800ffe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ffe8:	e7e6      	b.n	800ffb8 <tcp_input+0x6fc>
      else if (flags & TCP_ACK) {
 800ffea:	06db      	lsls	r3, r3, #27
 800ffec:	f57f af35 	bpl.w	800fe5a <tcp_input+0x59e>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fff0:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fff2:	4a27      	ldr	r2, [pc, #156]	@ (8010090 <tcp_input+0x7d4>)
 800fff4:	8818      	ldrh	r0, [r3, #0]
 800fff6:	8811      	ldrh	r1, [r2, #0]
 800fff8:	f8db 2000 	ldr.w	r2, [fp]
 800fffc:	9002      	str	r0, [sp, #8]
 800fffe:	4620      	mov	r0, r4
 8010000:	885b      	ldrh	r3, [r3, #2]
 8010002:	440a      	add	r2, r1
 8010004:	9301      	str	r3, [sp, #4]
 8010006:	4b23      	ldr	r3, [pc, #140]	@ (8010094 <tcp_input+0x7d8>)
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	3304      	adds	r3, #4
 801000c:	f8da 1000 	ldr.w	r1, [sl]
 8010010:	f001 f88c 	bl	801112c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010014:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8010018:	2b05      	cmp	r3, #5
 801001a:	f63f af1e 	bhi.w	800fe5a <tcp_input+0x59e>
          pcb->rtime = 0;
 801001e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 8010020:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8010022:	8623      	strh	r3, [r4, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010024:	f001 fab2 	bl	801158c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 8010028:	e717      	b.n	800fe5a <tcp_input+0x59e>
      if (flags & TCP_SYN) {
 801002a:	b151      	cbz	r1, 8010042 <tcp_input+0x786>
        if (seqno == pcb->rcv_nxt - 1) {
 801002c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801002e:	f8db 2000 	ldr.w	r2, [fp]
 8010032:	3b01      	subs	r3, #1
 8010034:	4293      	cmp	r3, r2
 8010036:	f47f af10 	bne.w	800fe5a <tcp_input+0x59e>
          tcp_rexmit(pcb);
 801003a:	4620      	mov	r0, r4
 801003c:	f001 f802 	bl	8011044 <tcp_rexmit>
    if (err != ERR_ABRT) {
 8010040:	e70b      	b.n	800fe5a <tcp_input+0x59e>
      } else if (flags & TCP_ACK) {
 8010042:	06df      	lsls	r7, r3, #27
 8010044:	f57f af09 	bpl.w	800fe5a <tcp_input+0x59e>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010048:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801004a:	f8da 1000 	ldr.w	r1, [sl]
 801004e:	43db      	mvns	r3, r3
 8010050:	42cb      	cmn	r3, r1
 8010052:	d45e      	bmi.n	8010112 <tcp_input+0x856>
 8010054:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010056:	1a5b      	subs	r3, r3, r1
 8010058:	2b00      	cmp	r3, #0
 801005a:	db5a      	blt.n	8010112 <tcp_input+0x856>
          pcb->state = ESTABLISHED;
 801005c:	2304      	movs	r3, #4
 801005e:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8010060:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010062:	b9cb      	cbnz	r3, 8010098 <tcp_input+0x7dc>
            tcp_abort(pcb);
 8010064:	4620      	mov	r0, r4
 8010066:	f7fe ff1d 	bl	800eea4 <tcp_abort>
            goto aborted;
 801006a:	e5c2      	b.n	800fbf2 <tcp_input+0x336>
 801006c:	2000f326 	.word	0x2000f326
 8010070:	2000f345 	.word	0x2000f345
 8010074:	2000f32c 	.word	0x2000f32c
 8010078:	080170b1 	.word	0x080170b1
 801007c:	0801731c 	.word	0x0801731c
 8010080:	08015927 	.word	0x08015927
 8010084:	2000f338 	.word	0x2000f338
 8010088:	0801733c 	.word	0x0801733c
 801008c:	08017352 	.word	0x08017352
 8010090:	2000f346 	.word	0x2000f346
 8010094:	2000b538 	.word	0x2000b538
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010098:	699b      	ldr	r3, [r3, #24]
 801009a:	b933      	cbnz	r3, 80100aa <tcp_input+0x7ee>
 801009c:	4b9e      	ldr	r3, [pc, #632]	@ (8010318 <tcp_input+0xa5c>)
 801009e:	f44f 726e 	mov.w	r2, #952	@ 0x3b8
 80100a2:	499e      	ldr	r1, [pc, #632]	@ (801031c <tcp_input+0xa60>)
 80100a4:	489e      	ldr	r0, [pc, #632]	@ (8010320 <tcp_input+0xa64>)
 80100a6:	f004 faf7 	bl	8014698 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80100aa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80100ac:	699b      	ldr	r3, [r3, #24]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d0d8      	beq.n	8010064 <tcp_input+0x7a8>
 80100b2:	2200      	movs	r2, #0
 80100b4:	4621      	mov	r1, r4
 80100b6:	6920      	ldr	r0, [r4, #16]
 80100b8:	4798      	blx	r3
          if (err != ERR_OK) {
 80100ba:	b118      	cbz	r0, 80100c4 <tcp_input+0x808>
            if (err != ERR_ABRT) {
 80100bc:	300d      	adds	r0, #13
 80100be:	f43f ad98 	beq.w	800fbf2 <tcp_input+0x336>
 80100c2:	e7cf      	b.n	8010064 <tcp_input+0x7a8>
          tcp_receive(pcb);
 80100c4:	4620      	mov	r0, r4
 80100c6:	f7ff f99f 	bl	800f408 <tcp_receive>
          if (recv_acked != 0) {
 80100ca:	4a96      	ldr	r2, [pc, #600]	@ (8010324 <tcp_input+0xa68>)
 80100cc:	8813      	ldrh	r3, [r2, #0]
 80100ce:	b10b      	cbz	r3, 80100d4 <tcp_input+0x818>
            recv_acked--;
 80100d0:	3b01      	subs	r3, #1
 80100d2:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80100d4:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 80100d6:	f241 131c 	movw	r3, #4380	@ 0x111c
 80100da:	004a      	lsls	r2, r1, #1
 80100dc:	0088      	lsls	r0, r1, #2
 80100de:	429a      	cmp	r2, r3
 80100e0:	4616      	mov	r6, r2
 80100e2:	bf38      	it	cc
 80100e4:	461e      	movcc	r6, r3
 80100e6:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 80100ea:	d90e      	bls.n	801010a <tcp_input+0x84e>
 80100ec:	b283      	uxth	r3, r0
 80100ee:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80100f2:	f898 3000 	ldrb.w	r3, [r8]
 80100f6:	069e      	lsls	r6, r3, #26
 80100f8:	f57f aeaf 	bpl.w	800fe5a <tcp_input+0x59e>
        tcp_ack_now(pcb);
 80100fc:	8b63      	ldrh	r3, [r4, #26]
 80100fe:	f043 0302 	orr.w	r3, r3, #2
 8010102:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8010104:	2307      	movs	r3, #7
          pcb->state = CLOSING;
 8010106:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 8010108:	e6a7      	b.n	800fe5a <tcp_input+0x59e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801010a:	429a      	cmp	r2, r3
 801010c:	bf88      	it	hi
 801010e:	b293      	uxthhi	r3, r2
 8010110:	e7ed      	b.n	80100ee <tcp_input+0x832>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010112:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010114:	4a84      	ldr	r2, [pc, #528]	@ (8010328 <tcp_input+0xa6c>)
 8010116:	881e      	ldrh	r6, [r3, #0]
 8010118:	8810      	ldrh	r0, [r2, #0]
 801011a:	f8db 2000 	ldr.w	r2, [fp]
 801011e:	9602      	str	r6, [sp, #8]
 8010120:	885b      	ldrh	r3, [r3, #2]
 8010122:	4402      	add	r2, r0
 8010124:	4620      	mov	r0, r4
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	4b80      	ldr	r3, [pc, #512]	@ (801032c <tcp_input+0xa70>)
 801012a:	9300      	str	r3, [sp, #0]
 801012c:	3304      	adds	r3, #4
 801012e:	f000 fffd 	bl	801112c <tcp_rst>
    if (err != ERR_ABRT) {
 8010132:	e692      	b.n	800fe5a <tcp_input+0x59e>
      tcp_receive(pcb);
 8010134:	4620      	mov	r0, r4
 8010136:	f7ff f967 	bl	800f408 <tcp_receive>
 801013a:	e7da      	b.n	80100f2 <tcp_input+0x836>
      tcp_receive(pcb);
 801013c:	4620      	mov	r0, r4
 801013e:	f7ff f963 	bl	800f408 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010142:	f898 3000 	ldrb.w	r3, [r8]
 8010146:	0698      	lsls	r0, r3, #26
 8010148:	d52f      	bpl.n	80101aa <tcp_input+0x8ee>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801014a:	4a79      	ldr	r2, [pc, #484]	@ (8010330 <tcp_input+0xa74>)
          tcp_ack_now(pcb);
 801014c:	8b63      	ldrh	r3, [r4, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801014e:	7812      	ldrb	r2, [r2, #0]
          tcp_ack_now(pcb);
 8010150:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010154:	06d1      	lsls	r1, r2, #27
 8010156:	d525      	bpl.n	80101a4 <tcp_input+0x8e8>
 8010158:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801015a:	f8da 2000 	ldr.w	r2, [sl]
 801015e:	4291      	cmp	r1, r2
 8010160:	d120      	bne.n	80101a4 <tcp_input+0x8e8>
 8010162:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8010164:	b9f2      	cbnz	r2, 80101a4 <tcp_input+0x8e8>
          tcp_ack_now(pcb);
 8010166:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8010168:	4620      	mov	r0, r4
 801016a:	f7fe fa0f 	bl	800e58c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	429c      	cmp	r4, r3
 8010172:	d109      	bne.n	8010188 <tcp_input+0x8cc>
        TCP_RMV_ACTIVE(pcb);
 8010174:	68e3      	ldr	r3, [r4, #12]
 8010176:	603b      	str	r3, [r7, #0]
 8010178:	e008      	b.n	801018c <tcp_input+0x8d0>
          TCP_RMV_ACTIVE(pcb);
 801017a:	68da      	ldr	r2, [r3, #12]
 801017c:	4294      	cmp	r4, r2
 801017e:	d102      	bne.n	8010186 <tcp_input+0x8ca>
        TCP_RMV_ACTIVE(pcb);
 8010180:	68e2      	ldr	r2, [r4, #12]
 8010182:	60da      	str	r2, [r3, #12]
 8010184:	e002      	b.n	801018c <tcp_input+0x8d0>
          TCP_RMV_ACTIVE(pcb);
 8010186:	4613      	mov	r3, r2
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1f6      	bne.n	801017a <tcp_input+0x8be>
        TCP_RMV_ACTIVE(pcb);
 801018c:	4b69      	ldr	r3, [pc, #420]	@ (8010334 <tcp_input+0xa78>)
 801018e:	2201      	movs	r2, #1
 8010190:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010192:	230a      	movs	r3, #10
 8010194:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010196:	4b68      	ldr	r3, [pc, #416]	@ (8010338 <tcp_input+0xa7c>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	601c      	str	r4, [r3, #0]
 801019c:	60e2      	str	r2, [r4, #12]
 801019e:	f001 fb05 	bl	80117ac <tcp_timer_needed>
    if (err != ERR_ABRT) {
 80101a2:	e65a      	b.n	800fe5a <tcp_input+0x59e>
          tcp_ack_now(pcb);
 80101a4:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 80101a6:	2308      	movs	r3, #8
 80101a8:	e7ad      	b.n	8010106 <tcp_input+0x84a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101aa:	4b61      	ldr	r3, [pc, #388]	@ (8010330 <tcp_input+0xa74>)
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	06da      	lsls	r2, r3, #27
 80101b0:	f57f ae53 	bpl.w	800fe5a <tcp_input+0x59e>
 80101b4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80101b6:	f8da 3000 	ldr.w	r3, [sl]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	f47f ae4d 	bne.w	800fe5a <tcp_input+0x59e>
 80101c0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f47f ae49 	bne.w	800fe5a <tcp_input+0x59e>
        pcb->state = FIN_WAIT_2;
 80101c8:	2306      	movs	r3, #6
 80101ca:	e79c      	b.n	8010106 <tcp_input+0x84a>
      tcp_receive(pcb);
 80101cc:	4620      	mov	r0, r4
 80101ce:	f7ff f91b 	bl	800f408 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80101d2:	f898 3000 	ldrb.w	r3, [r8]
 80101d6:	069b      	lsls	r3, r3, #26
 80101d8:	f57f ae3f 	bpl.w	800fe5a <tcp_input+0x59e>
        tcp_ack_now(pcb);
 80101dc:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80101de:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80101e0:	f043 0302 	orr.w	r3, r3, #2
 80101e4:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80101e6:	f7fe f9d1 	bl	800e58c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	429c      	cmp	r4, r3
 80101ee:	d0c1      	beq.n	8010174 <tcp_input+0x8b8>
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d0cb      	beq.n	801018c <tcp_input+0x8d0>
 80101f4:	68da      	ldr	r2, [r3, #12]
 80101f6:	4294      	cmp	r4, r2
 80101f8:	d0c2      	beq.n	8010180 <tcp_input+0x8c4>
 80101fa:	4613      	mov	r3, r2
 80101fc:	e7f8      	b.n	80101f0 <tcp_input+0x934>
      tcp_receive(pcb);
 80101fe:	4620      	mov	r0, r4
 8010200:	f7ff f902 	bl	800f408 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010204:	4b4a      	ldr	r3, [pc, #296]	@ (8010330 <tcp_input+0xa74>)
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	06de      	lsls	r6, r3, #27
 801020a:	f57f ae26 	bpl.w	800fe5a <tcp_input+0x59e>
 801020e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8010210:	f8da 3000 	ldr.w	r3, [sl]
 8010214:	429a      	cmp	r2, r3
 8010216:	f47f ae20 	bne.w	800fe5a <tcp_input+0x59e>
 801021a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 801021c:	2b00      	cmp	r3, #0
 801021e:	f47f ae1c 	bne.w	800fe5a <tcp_input+0x59e>
        tcp_pcb_purge(pcb);
 8010222:	4620      	mov	r0, r4
 8010224:	f7fe f9b2 	bl	800e58c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	429c      	cmp	r4, r3
 801022c:	d0a2      	beq.n	8010174 <tcp_input+0x8b8>
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0ac      	beq.n	801018c <tcp_input+0x8d0>
 8010232:	68da      	ldr	r2, [r3, #12]
 8010234:	4294      	cmp	r4, r2
 8010236:	d0a3      	beq.n	8010180 <tcp_input+0x8c4>
 8010238:	4613      	mov	r3, r2
 801023a:	e7f8      	b.n	801022e <tcp_input+0x972>
      tcp_receive(pcb);
 801023c:	4620      	mov	r0, r4
 801023e:	f7ff f8e3 	bl	800f408 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010242:	4b3b      	ldr	r3, [pc, #236]	@ (8010330 <tcp_input+0xa74>)
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	06d8      	lsls	r0, r3, #27
 8010248:	f57f ae07 	bpl.w	800fe5a <tcp_input+0x59e>
 801024c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801024e:	f8da 2000 	ldr.w	r2, [sl]
        recv_flags |= TF_CLOSED;
 8010252:	f898 3000 	ldrb.w	r3, [r8]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010256:	4291      	cmp	r1, r2
 8010258:	f47f adff 	bne.w	800fe5a <tcp_input+0x59e>
 801025c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801025e:	2a00      	cmp	r2, #0
 8010260:	f47f adfb 	bne.w	800fe5a <tcp_input+0x59e>
        recv_flags |= TF_CLOSED;
 8010264:	f043 0310 	orr.w	r3, r3, #16
 8010268:	f888 3000 	strb.w	r3, [r8]
    if (err != ERR_ABRT) {
 801026c:	e5f5      	b.n	800fe5a <tcp_input+0x59e>
        if (recv_acked > 0) {
 801026e:	4b2d      	ldr	r3, [pc, #180]	@ (8010324 <tcp_input+0xa68>)
 8010270:	881a      	ldrh	r2, [r3, #0]
 8010272:	b122      	cbz	r2, 801027e <tcp_input+0x9c2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010274:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8010276:	b9f3      	cbnz	r3, 80102b6 <tcp_input+0x9fa>
          recv_acked = 0;
 8010278:	2300      	movs	r3, #0
 801027a:	4a2a      	ldr	r2, [pc, #168]	@ (8010324 <tcp_input+0xa68>)
 801027c:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff f842 	bl	800f308 <tcp_input_delayed_close>
 8010284:	2800      	cmp	r0, #0
 8010286:	f47f acb4 	bne.w	800fbf2 <tcp_input+0x336>
        if (recv_data != NULL) {
 801028a:	f8d9 3000 	ldr.w	r3, [r9]
 801028e:	b333      	cbz	r3, 80102de <tcp_input+0xa22>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010290:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010292:	b133      	cbz	r3, 80102a2 <tcp_input+0x9e6>
 8010294:	4b20      	ldr	r3, [pc, #128]	@ (8010318 <tcp_input+0xa5c>)
 8010296:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801029a:	4928      	ldr	r1, [pc, #160]	@ (801033c <tcp_input+0xa80>)
 801029c:	4820      	ldr	r0, [pc, #128]	@ (8010320 <tcp_input+0xa64>)
 801029e:	f004 f9fb 	bl	8014698 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80102a2:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 80102a4:	f8d9 2000 	ldr.w	r2, [r9]
          if (pcb->flags & TF_RXCLOSED) {
 80102a8:	f013 0310 	ands.w	r3, r3, #16
 80102ac:	d009      	beq.n	80102c2 <tcp_input+0xa06>
            pbuf_free(recv_data);
 80102ae:	4610      	mov	r0, r2
 80102b0:	f7fd fcbe 	bl	800dc30 <pbuf_free>
 80102b4:	e6d6      	b.n	8010064 <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80102b6:	4621      	mov	r1, r4
 80102b8:	6920      	ldr	r0, [r4, #16]
 80102ba:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80102bc:	300d      	adds	r0, #13
 80102be:	d1db      	bne.n	8010278 <tcp_input+0x9bc>
 80102c0:	e497      	b.n	800fbf2 <tcp_input+0x336>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80102c2:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 80102c6:	b306      	cbz	r6, 801030a <tcp_input+0xa4e>
 80102c8:	4621      	mov	r1, r4
 80102ca:	6920      	ldr	r0, [r4, #16]
 80102cc:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80102ce:	f110 0f0d 	cmn.w	r0, #13
 80102d2:	f43f ac8e 	beq.w	800fbf2 <tcp_input+0x336>
          if (err != ERR_OK) {
 80102d6:	b110      	cbz	r0, 80102de <tcp_input+0xa22>
            pcb->refused_data = recv_data;
 80102d8:	f8d9 3000 	ldr.w	r3, [r9]
 80102dc:	6763      	str	r3, [r4, #116]	@ 0x74
        if (recv_flags & TF_GOT_FIN) {
 80102de:	f898 3000 	ldrb.w	r3, [r8]
 80102e2:	069a      	lsls	r2, r3, #26
 80102e4:	d505      	bpl.n	80102f2 <tcp_input+0xa36>
          if (pcb->refused_data != NULL) {
 80102e6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80102e8:	b353      	cbz	r3, 8010340 <tcp_input+0xa84>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80102ea:	7b5a      	ldrb	r2, [r3, #13]
 80102ec:	f042 0220 	orr.w	r2, r2, #32
 80102f0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80102f2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80102f4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 80102f6:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 80102f8:	f7ff f806 	bl	800f308 <tcp_input_delayed_close>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	f47f ac78 	bne.w	800fbf2 <tcp_input+0x336>
        tcp_output(pcb);
 8010302:	4620      	mov	r0, r4
 8010304:	f000 ff7e 	bl	8011204 <tcp_output>
 8010308:	e473      	b.n	800fbf2 <tcp_input+0x336>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801030a:	4633      	mov	r3, r6
 801030c:	4621      	mov	r1, r4
 801030e:	4630      	mov	r0, r6
 8010310:	f7fe fc88 	bl	800ec24 <tcp_recv_null>
 8010314:	e7db      	b.n	80102ce <tcp_input+0xa12>
 8010316:	bf00      	nop
 8010318:	080170b1 	.word	0x080170b1
 801031c:	08017365 	.word	0x08017365
 8010320:	08015927 	.word	0x08015927
 8010324:	2000f348 	.word	0x2000f348
 8010328:	2000f346 	.word	0x2000f346
 801032c:	2000b538 	.word	0x2000b538
 8010330:	2000f345 	.word	0x2000f345
 8010334:	2000f326 	.word	0x2000f326
 8010338:	2000f328 	.word	0x2000f328
 801033c:	08017383 	.word	0x08017383
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010340:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8010342:	f640 3268 	movw	r2, #2920	@ 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 8010346:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801034a:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 801034c:	bf1c      	itt	ne
 801034e:	3301      	addne	r3, #1
 8010350:	8523      	strhne	r3, [r4, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8010352:	2e00      	cmp	r6, #0
 8010354:	d0cd      	beq.n	80102f2 <tcp_input+0xa36>
 8010356:	2300      	movs	r3, #0
 8010358:	4621      	mov	r1, r4
 801035a:	6920      	ldr	r0, [r4, #16]
 801035c:	461a      	mov	r2, r3
 801035e:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8010360:	300d      	adds	r0, #13
 8010362:	d1c6      	bne.n	80102f2 <tcp_input+0xa36>
 8010364:	e445      	b.n	800fbf2 <tcp_input+0x336>
      if (prev != NULL) {
 8010366:	f1b9 0f00 	cmp.w	r9, #0
 801036a:	f47f ac00 	bne.w	800fb6e <tcp_input+0x2b2>
 801036e:	e40e      	b.n	800fb8e <tcp_input+0x2d2>
      if (prev != NULL) {
 8010370:	b13c      	cbz	r4, 8010382 <tcp_input+0xac6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010372:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010376:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010378:	4b0f      	ldr	r3, [pc, #60]	@ (80103b8 <tcp_input+0xafc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801037a:	f8c9 200c 	str.w	r2, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801037e:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8010382:	4b0e      	ldr	r3, [pc, #56]	@ (80103bc <tcp_input+0xb00>)
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	075c      	lsls	r4, r3, #29
 8010388:	f53f ab80 	bmi.w	800fa8c <tcp_input+0x1d0>
  if (flags & TCP_ACK) {
 801038c:	f013 0410 	ands.w	r4, r3, #16
 8010390:	f43f acb3 	beq.w	800fcfa <tcp_input+0x43e>
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010394:	4b0a      	ldr	r3, [pc, #40]	@ (80103c0 <tcp_input+0xb04>)
 8010396:	f8db 2000 	ldr.w	r2, [fp]
 801039a:	881c      	ldrh	r4, [r3, #0]
 801039c:	880b      	ldrh	r3, [r1, #0]
 801039e:	4422      	add	r2, r4
 80103a0:	9302      	str	r3, [sp, #8]
 80103a2:	884b      	ldrh	r3, [r1, #2]
 80103a4:	9301      	str	r3, [sp, #4]
 80103a6:	4b07      	ldr	r3, [pc, #28]	@ (80103c4 <tcp_input+0xb08>)
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	3304      	adds	r3, #4
 80103ac:	f8da 1000 	ldr.w	r1, [sl]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103b0:	f000 fed8 	bl	8011164 <tcp_rst_netif>
 80103b4:	f7ff bb6a 	b.w	800fa8c <tcp_input+0x1d0>
 80103b8:	2000f330 	.word	0x2000f330
 80103bc:	2000f345 	.word	0x2000f345
 80103c0:	2000f346 	.word	0x2000f346
 80103c4:	2000b538 	.word	0x2000b538

080103c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80103c8:	4a02      	ldr	r2, [pc, #8]	@ (80103d4 <tcp_trigger_input_pcb_close+0xc>)
 80103ca:	7813      	ldrb	r3, [r2, #0]
 80103cc:	f043 0310 	orr.w	r3, r3, #16
 80103d0:	7013      	strb	r3, [r2, #0]
}
 80103d2:	4770      	bx	lr
 80103d4:	2000f344 	.word	0x2000f344

080103d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80103d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80103da:	4604      	mov	r4, r0
 80103dc:	b930      	cbnz	r0, 80103ec <tcp_output_segment_busy+0x14>
 80103de:	4b06      	ldr	r3, [pc, #24]	@ (80103f8 <tcp_output_segment_busy+0x20>)
 80103e0:	f240 529e 	movw	r2, #1438	@ 0x59e
 80103e4:	4905      	ldr	r1, [pc, #20]	@ (80103fc <tcp_output_segment_busy+0x24>)
 80103e6:	4806      	ldr	r0, [pc, #24]	@ (8010400 <tcp_output_segment_busy+0x28>)
 80103e8:	f004 f956 	bl	8014698 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80103ec:	6863      	ldr	r3, [r4, #4]
 80103ee:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 80103f0:	3801      	subs	r0, #1
 80103f2:	bf18      	it	ne
 80103f4:	2001      	movne	r0, #1
 80103f6:	bd10      	pop	{r4, pc}
 80103f8:	0801739d 	.word	0x0801739d
 80103fc:	080173be 	.word	0x080173be
 8010400:	08015927 	.word	0x08015927

08010404 <tcp_pbuf_prealloc>:
{
 8010404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801040c:	4607      	mov	r7, r0
 801040e:	460c      	mov	r4, r1
 8010410:	4615      	mov	r5, r2
 8010412:	461e      	mov	r6, r3
 8010414:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010418:	f1b8 0f00 	cmp.w	r8, #0
 801041c:	d105      	bne.n	801042a <tcp_pbuf_prealloc+0x26>
 801041e:	4b1d      	ldr	r3, [pc, #116]	@ (8010494 <tcp_pbuf_prealloc+0x90>)
 8010420:	22ec      	movs	r2, #236	@ 0xec
 8010422:	491d      	ldr	r1, [pc, #116]	@ (8010498 <tcp_pbuf_prealloc+0x94>)
 8010424:	481d      	ldr	r0, [pc, #116]	@ (801049c <tcp_pbuf_prealloc+0x98>)
 8010426:	f004 f937 	bl	8014698 <iprintf>
  if (length < max_length) {
 801042a:	42ac      	cmp	r4, r5
 801042c:	d230      	bcs.n	8010490 <tcp_pbuf_prealloc+0x8c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801042e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010432:	079a      	lsls	r2, r3, #30
 8010434:	d40c      	bmi.n	8010450 <tcp_pbuf_prealloc+0x4c>
 8010436:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801043a:	065b      	lsls	r3, r3, #25
 801043c:	d428      	bmi.n	8010490 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
 801043e:	f1b9 0f00 	cmp.w	r9, #0
 8010442:	d005      	beq.n	8010450 <tcp_pbuf_prealloc+0x4c>
         (!first_seg ||
 8010444:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 8010448:	b913      	cbnz	r3, 8010450 <tcp_pbuf_prealloc+0x4c>
          pcb->unsent != NULL ||
 801044a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801044e:	b1fb      	cbz	r3, 8010490 <tcp_pbuf_prealloc+0x8c>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010450:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 8010454:	f021 0103 	bic.w	r1, r1, #3
 8010458:	42a9      	cmp	r1, r5
 801045a:	bf28      	it	cs
 801045c:	4629      	movcs	r1, r5
 801045e:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010460:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010464:	4638      	mov	r0, r7
 8010466:	f7fd fc4d 	bl	800dd04 <pbuf_alloc>
  if (p == NULL) {
 801046a:	4605      	mov	r5, r0
 801046c:	b168      	cbz	r0, 801048a <tcp_pbuf_prealloc+0x86>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801046e:	6803      	ldr	r3, [r0, #0]
 8010470:	b133      	cbz	r3, 8010480 <tcp_pbuf_prealloc+0x7c>
 8010472:	4b08      	ldr	r3, [pc, #32]	@ (8010494 <tcp_pbuf_prealloc+0x90>)
 8010474:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8010478:	4909      	ldr	r1, [pc, #36]	@ (80104a0 <tcp_pbuf_prealloc+0x9c>)
 801047a:	4808      	ldr	r0, [pc, #32]	@ (801049c <tcp_pbuf_prealloc+0x98>)
 801047c:	f004 f90c 	bl	8014698 <iprintf>
  *oversize = p->len - length;
 8010480:	896b      	ldrh	r3, [r5, #10]
 8010482:	1b1b      	subs	r3, r3, r4
 8010484:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 8010486:	812c      	strh	r4, [r5, #8]
 8010488:	816c      	strh	r4, [r5, #10]
}
 801048a:	4628      	mov	r0, r5
 801048c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 8010490:	4621      	mov	r1, r4
 8010492:	e7e5      	b.n	8010460 <tcp_pbuf_prealloc+0x5c>
 8010494:	0801739d 	.word	0x0801739d
 8010498:	080173e3 	.word	0x080173e3
 801049c:	08015927 	.word	0x08015927
 80104a0:	08017402 	.word	0x08017402

080104a4 <tcp_create_segment>:
{
 80104a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104a8:	460e      	mov	r6, r1
 80104aa:	4690      	mov	r8, r2
 80104ac:	4699      	mov	r9, r3
 80104ae:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80104b2:	4607      	mov	r7, r0
 80104b4:	b928      	cbnz	r0, 80104c2 <tcp_create_segment+0x1e>
 80104b6:	4b2d      	ldr	r3, [pc, #180]	@ (801056c <tcp_create_segment+0xc8>)
 80104b8:	22a6      	movs	r2, #166	@ 0xa6
 80104ba:	492d      	ldr	r1, [pc, #180]	@ (8010570 <tcp_create_segment+0xcc>)
 80104bc:	482d      	ldr	r0, [pc, #180]	@ (8010574 <tcp_create_segment+0xd0>)
 80104be:	f004 f8eb 	bl	8014698 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80104c2:	b92e      	cbnz	r6, 80104d0 <tcp_create_segment+0x2c>
 80104c4:	4b29      	ldr	r3, [pc, #164]	@ (801056c <tcp_create_segment+0xc8>)
 80104c6:	22a7      	movs	r2, #167	@ 0xa7
 80104c8:	492b      	ldr	r1, [pc, #172]	@ (8010578 <tcp_create_segment+0xd4>)
 80104ca:	482a      	ldr	r0, [pc, #168]	@ (8010574 <tcp_create_segment+0xd0>)
 80104cc:	f004 f8e4 	bl	8014698 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80104d0:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80104d4:	2003      	movs	r0, #3
 80104d6:	f7fd f991 	bl	800d7fc <memp_malloc>
 80104da:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80104dc:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80104e0:	b930      	cbnz	r0, 80104f0 <tcp_create_segment+0x4c>
    pbuf_free(p);
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7fd fba4 	bl	800dc30 <pbuf_free>
    return NULL;
 80104e8:	2400      	movs	r4, #0
}
 80104ea:	4620      	mov	r0, r4
 80104ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 80104f0:	2300      	movs	r3, #0
  seg->flags = optflags;
 80104f2:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->p = p;
 80104f6:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80104fa:	8933      	ldrh	r3, [r6, #8]
 80104fc:	42ab      	cmp	r3, r5
 80104fe:	d205      	bcs.n	801050c <tcp_create_segment+0x68>
 8010500:	4b1a      	ldr	r3, [pc, #104]	@ (801056c <tcp_create_segment+0xc8>)
 8010502:	22b3      	movs	r2, #179	@ 0xb3
 8010504:	491d      	ldr	r1, [pc, #116]	@ (801057c <tcp_create_segment+0xd8>)
 8010506:	481b      	ldr	r0, [pc, #108]	@ (8010574 <tcp_create_segment+0xd0>)
 8010508:	f004 f8c6 	bl	8014698 <iprintf>
  seg->len = p->tot_len - optlen;
 801050c:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801050e:	4630      	mov	r0, r6
 8010510:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8010512:	1b5b      	subs	r3, r3, r5
 8010514:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010516:	f7fd fb5c 	bl	800dbd2 <pbuf_add_header>
 801051a:	4606      	mov	r6, r0
 801051c:	b118      	cbz	r0, 8010526 <tcp_create_segment+0x82>
    tcp_seg_free(seg);
 801051e:	4620      	mov	r0, r4
 8010520:	f7fd ffb4 	bl	800e48c <tcp_seg_free>
    return NULL;
 8010524:	e7e0      	b.n	80104e8 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010526:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010528:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801052a:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801052c:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010530:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010534:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010538:	f7fc fe22 	bl	800d180 <lwip_htons>
 801053c:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010540:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8010544:	8b38      	ldrh	r0, [r7, #24]
 8010546:	f7fc fe1b 	bl	800d180 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801054a:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801054c:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010550:	4648      	mov	r0, r9
 8010552:	f7fc fe18 	bl	800d186 <lwip_htonl>
 8010556:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010558:	ea48 0005 	orr.w	r0, r8, r5
 801055c:	68e7      	ldr	r7, [r4, #12]
 801055e:	f7fc fe0f 	bl	800d180 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8010562:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010564:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 8010566:	749e      	strb	r6, [r3, #18]
 8010568:	74de      	strb	r6, [r3, #19]
  return seg;
 801056a:	e7be      	b.n	80104ea <tcp_create_segment+0x46>
 801056c:	0801739d 	.word	0x0801739d
 8010570:	08017416 	.word	0x08017416
 8010574:	08015927 	.word	0x08015927
 8010578:	08017436 	.word	0x08017436
 801057c:	08017457 	.word	0x08017457

08010580 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8010580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010584:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8010588:	4604      	mov	r4, r0
 801058a:	460d      	mov	r5, r1
 801058c:	4616      	mov	r6, r2
 801058e:	461f      	mov	r7, r3
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 8010590:	f1b8 0f00 	cmp.w	r8, #0
 8010594:	d106      	bne.n	80105a4 <tcp_output_control_segment_netif+0x24>
 8010596:	4b0f      	ldr	r3, [pc, #60]	@ (80105d4 <tcp_output_control_segment_netif+0x54>)
 8010598:	f240 72a1 	movw	r2, #1953	@ 0x7a1
 801059c:	490e      	ldr	r1, [pc, #56]	@ (80105d8 <tcp_output_control_segment_netif+0x58>)
 801059e:	480f      	ldr	r0, [pc, #60]	@ (80105dc <tcp_output_control_segment_netif+0x5c>)
 80105a0:	f004 f87a 	bl	8014698 <iprintf>
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 80105a4:	b19c      	cbz	r4, 80105ce <tcp_output_control_segment_netif+0x4e>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 80105a6:	7ae3      	ldrb	r3, [r4, #11]
    tos = pcb->tos;
 80105a8:	7aa4      	ldrb	r4, [r4, #10]
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
    tos = 0;
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80105aa:	2206      	movs	r2, #6
 80105ac:	4631      	mov	r1, r6
 80105ae:	4628      	mov	r0, r5
 80105b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80105b4:	e9cd 4200 	strd	r4, r2, [sp]
 80105b8:	463a      	mov	r2, r7
 80105ba:	f002 f913 	bl	80127e4 <ip4_output_if>
 80105be:	4604      	mov	r4, r0
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 80105c0:	4628      	mov	r0, r5
 80105c2:	f7fd fb35 	bl	800dc30 <pbuf_free>
  return err;
}
 80105c6:	4620      	mov	r0, r4
 80105c8:	b004      	add	sp, #16
 80105ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ttl = TCP_TTL;
 80105ce:	23ff      	movs	r3, #255	@ 0xff
 80105d0:	e7eb      	b.n	80105aa <tcp_output_control_segment_netif+0x2a>
 80105d2:	bf00      	nop
 80105d4:	0801739d 	.word	0x0801739d
 80105d8:	0801746c 	.word	0x0801746c
 80105dc:	08015927 	.word	0x08015927

080105e0 <tcp_output_alloc_header_common.constprop.0>:
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80105e0:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80105e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80105e6:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80105e8:	4606      	mov	r6, r0
 80105ea:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80105ec:	2022      	movs	r0, #34	@ 0x22
 80105ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80105f2:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80105f4:	f7fd fb86 	bl	800dd04 <pbuf_alloc>
  if (p != NULL) {
 80105f8:	4605      	mov	r5, r0
 80105fa:	b348      	cbz	r0, 8010650 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80105fc:	8943      	ldrh	r3, [r0, #10]
 80105fe:	2b13      	cmp	r3, #19
 8010600:	d806      	bhi.n	8010610 <tcp_output_alloc_header_common.constprop.0+0x30>
 8010602:	4b15      	ldr	r3, [pc, #84]	@ (8010658 <tcp_output_alloc_header_common.constprop.0+0x78>)
 8010604:	f240 7227 	movw	r2, #1831	@ 0x727
 8010608:	4914      	ldr	r1, [pc, #80]	@ (801065c <tcp_output_alloc_header_common.constprop.0+0x7c>)
 801060a:	4815      	ldr	r0, [pc, #84]	@ (8010660 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801060c:	f004 f844 	bl	8014698 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 8010610:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 8010612:	4640      	mov	r0, r8
 8010614:	f7fc fdb4 	bl	800d180 <lwip_htons>
 8010618:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801061a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801061e:	f7fc fdaf 	bl	800d180 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8010622:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 8010624:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 8010626:	4630      	mov	r0, r6
 8010628:	f7fc fdad 	bl	800d186 <lwip_htonl>
 801062c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801062e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010632:	f440 40a0 	orr.w	r0, r0, #20480	@ 0x5000
 8010636:	f7fc fda3 	bl	800d180 <lwip_htons>
 801063a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801063c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8010640:	f7fc fd9e 	bl	800d180 <lwip_htons>
    tcphdr->chksum = 0;
 8010644:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8010646:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8010648:	7423      	strb	r3, [r4, #16]
 801064a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801064c:	74a3      	strb	r3, [r4, #18]
 801064e:	74e3      	strb	r3, [r4, #19]
}
 8010650:	4628      	mov	r0, r5
 8010652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010656:	bf00      	nop
 8010658:	0801739d 	.word	0x0801739d
 801065c:	0801749d 	.word	0x0801749d
 8010660:	08015927 	.word	0x08015927

08010664 <tcp_output_alloc_header.constprop.0>:
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8010664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010666:	460d      	mov	r5, r1
 8010668:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801066a:	4604      	mov	r4, r0
 801066c:	b930      	cbnz	r0, 801067c <tcp_output_alloc_header.constprop.0+0x18>
 801066e:	4b0d      	ldr	r3, [pc, #52]	@ (80106a4 <tcp_output_alloc_header.constprop.0+0x40>)
 8010670:	f240 7246 	movw	r2, #1862	@ 0x746
 8010674:	490c      	ldr	r1, [pc, #48]	@ (80106a8 <tcp_output_alloc_header.constprop.0+0x44>)
 8010676:	480d      	ldr	r0, [pc, #52]	@ (80106ac <tcp_output_alloc_header.constprop.0+0x48>)
 8010678:	f004 f80e 	bl	8014698 <iprintf>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801067c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801067e:	4632      	mov	r2, r6
 8010680:	4629      	mov	r1, r5
 8010682:	9302      	str	r3, [sp, #8]
 8010684:	2310      	movs	r3, #16
 8010686:	9301      	str	r3, [sp, #4]
 8010688:	8b23      	ldrh	r3, [r4, #24]
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	8ae3      	ldrh	r3, [r4, #22]
 801068e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010690:	f7ff ffa6 	bl	80105e0 <tcp_output_alloc_header_common.constprop.0>
  if (p != NULL) {
 8010694:	b118      	cbz	r0, 801069e <tcp_output_alloc_header.constprop.0+0x3a>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010696:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8010698:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801069a:	4413      	add	r3, r2
 801069c:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 801069e:	b004      	add	sp, #16
 80106a0:	bd70      	pop	{r4, r5, r6, pc}
 80106a2:	bf00      	nop
 80106a4:	0801739d 	.word	0x0801739d
 80106a8:	080174cb 	.word	0x080174cb
 80106ac:	08015927 	.word	0x08015927

080106b0 <tcp_output_fill_options.constprop.0>:
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80106b0:	b930      	cbnz	r0, 80106c0 <tcp_output_fill_options.constprop.0+0x10>
 80106b2:	4b04      	ldr	r3, [pc, #16]	@ (80106c4 <tcp_output_fill_options.constprop.0+0x14>)
 80106b4:	f240 725a 	movw	r2, #1882	@ 0x75a
 80106b8:	4903      	ldr	r1, [pc, #12]	@ (80106c8 <tcp_output_fill_options.constprop.0+0x18>)
 80106ba:	4804      	ldr	r0, [pc, #16]	@ (80106cc <tcp_output_fill_options.constprop.0+0x1c>)
 80106bc:	f003 bfec 	b.w	8014698 <iprintf>
}
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	0801739d 	.word	0x0801739d
 80106c8:	080174f0 	.word	0x080174f0
 80106cc:	08015927 	.word	0x08015927

080106d0 <tcp_rst_common.isra.0>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
 80106d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80106d2:	4605      	mov	r5, r0
 80106d4:	460c      	mov	r4, r1
 80106d6:	461e      	mov	r6, r3
{
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80106d8:	b932      	cbnz	r2, 80106e8 <tcp_rst_common.isra.0+0x18>
 80106da:	4b14      	ldr	r3, [pc, #80]	@ (801072c <tcp_rst_common.isra.0+0x5c>)
 80106dc:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80106e0:	4913      	ldr	r1, [pc, #76]	@ (8010730 <tcp_rst_common.isra.0+0x60>)
 80106e2:	4814      	ldr	r0, [pc, #80]	@ (8010734 <tcp_rst_common.isra.0+0x64>)
 80106e4:	f003 ffd8 	bl	8014698 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80106e8:	b936      	cbnz	r6, 80106f8 <tcp_rst_common.isra.0+0x28>
 80106ea:	4b10      	ldr	r3, [pc, #64]	@ (801072c <tcp_rst_common.isra.0+0x5c>)
 80106ec:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80106f0:	4911      	ldr	r1, [pc, #68]	@ (8010738 <tcp_rst_common.isra.0+0x68>)
 80106f2:	4810      	ldr	r0, [pc, #64]	@ (8010734 <tcp_rst_common.isra.0+0x64>)
 80106f4:	f003 ffd0 	bl	8014698 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80106f8:	4628      	mov	r0, r5
 80106fa:	f7fc fd44 	bl	800d186 <lwip_htonl>
 80106fe:	2314      	movs	r3, #20
 8010700:	f646 010b 	movw	r1, #26635	@ 0x680b
 8010704:	4602      	mov	r2, r0
 8010706:	4620      	mov	r0, r4
 8010708:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801070c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8010710:	2100      	movs	r1, #0
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010718:	f7ff ff62 	bl	80105e0 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801071c:	4604      	mov	r4, r0
 801071e:	b108      	cbz	r0, 8010724 <tcp_rst_common.isra.0+0x54>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8010720:	f7ff ffc6 	bl	80106b0 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
}
 8010724:	4620      	mov	r0, r4
 8010726:	b004      	add	sp, #16
 8010728:	bd70      	pop	{r4, r5, r6, pc}
 801072a:	bf00      	nop
 801072c:	0801739d 	.word	0x0801739d
 8010730:	08017516 	.word	0x08017516
 8010734:	08015927 	.word	0x08015927
 8010738:	08017530 	.word	0x08017530

0801073c <tcp_output_control_segment>:
{
 801073c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801073e:	4604      	mov	r4, r0
 8010740:	4617      	mov	r7, r2
 8010742:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010744:	460d      	mov	r5, r1
 8010746:	b931      	cbnz	r1, 8010756 <tcp_output_control_segment+0x1a>
 8010748:	4b0f      	ldr	r3, [pc, #60]	@ (8010788 <tcp_output_control_segment+0x4c>)
 801074a:	f240 728a 	movw	r2, #1930	@ 0x78a
 801074e:	490f      	ldr	r1, [pc, #60]	@ (801078c <tcp_output_control_segment+0x50>)
 8010750:	480f      	ldr	r0, [pc, #60]	@ (8010790 <tcp_output_control_segment+0x54>)
 8010752:	f003 ffa1 	bl	8014698 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010756:	b15c      	cbz	r4, 8010770 <tcp_output_control_segment+0x34>
 8010758:	7a20      	ldrb	r0, [r4, #8]
 801075a:	b148      	cbz	r0, 8010770 <tcp_output_control_segment+0x34>
    return netif_get_by_index(pcb->netif_idx);
 801075c:	f7fd f9aa 	bl	800dab4 <netif_get_by_index>
  if (netif == NULL) {
 8010760:	b950      	cbnz	r0, 8010778 <tcp_output_control_segment+0x3c>
    pbuf_free(p);
 8010762:	4628      	mov	r0, r5
 8010764:	f7fd fa64 	bl	800dc30 <pbuf_free>
    return ERR_RTE;
 8010768:	f06f 0003 	mvn.w	r0, #3
}
 801076c:	b003      	add	sp, #12
 801076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 8010770:	4630      	mov	r0, r6
 8010772:	f001 fed7 	bl	8012524 <ip4_route>
 8010776:	e7f3      	b.n	8010760 <tcp_output_control_segment+0x24>
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 8010778:	9000      	str	r0, [sp, #0]
 801077a:	4633      	mov	r3, r6
 801077c:	463a      	mov	r2, r7
 801077e:	4629      	mov	r1, r5
 8010780:	4620      	mov	r0, r4
 8010782:	f7ff fefd 	bl	8010580 <tcp_output_control_segment_netif>
 8010786:	e7f1      	b.n	801076c <tcp_output_control_segment+0x30>
 8010788:	0801739d 	.word	0x0801739d
 801078c:	0801754b 	.word	0x0801754b
 8010790:	08015927 	.word	0x08015927

08010794 <tcp_write>:
{
 8010794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010798:	b091      	sub	sp, #68	@ 0x44
 801079a:	4692      	mov	sl, r2
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801079c:	4604      	mov	r4, r0
{
 801079e:	930a      	str	r3, [sp, #40]	@ 0x28
  u16_t oversize = 0;
 80107a0:	2300      	movs	r3, #0
{
 80107a2:	9108      	str	r1, [sp, #32]
  u16_t oversize = 0;
 80107a4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80107a8:	2800      	cmp	r0, #0
 80107aa:	f000 8265 	beq.w	8010c78 <tcp_write+0x4e4>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80107ae:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80107b0:	9307      	str	r3, [sp, #28]
 80107b2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 80107b6:	9a07      	ldr	r2, [sp, #28]
 80107b8:	085b      	lsrs	r3, r3, #1
 80107ba:	4293      	cmp	r3, r2
 80107bc:	bf28      	it	cs
 80107be:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	bf18      	it	ne
 80107c4:	461a      	movne	r2, r3
 80107c6:	9207      	str	r2, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80107c8:	2900      	cmp	r1, #0
 80107ca:	f000 8255 	beq.w	8010c78 <tcp_write+0x4e4>
  if ((pcb->state != ESTABLISHED) &&
 80107ce:	7d03      	ldrb	r3, [r0, #20]
 80107d0:	1e9a      	subs	r2, r3, #2
 80107d2:	2a02      	cmp	r2, #2
 80107d4:	d902      	bls.n	80107dc <tcp_write+0x48>
 80107d6:	2b07      	cmp	r3, #7
 80107d8:	f040 8251 	bne.w	8010c7e <tcp_write+0x4ea>
  } else if (len == 0) {
 80107dc:	f1ba 0f00 	cmp.w	sl, #0
 80107e0:	d01a      	beq.n	8010818 <tcp_write+0x84>
  if (len > pcb->snd_buf) {
 80107e2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 80107e6:	4553      	cmp	r3, sl
 80107e8:	d206      	bcs.n	80107f8 <tcp_write+0x64>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80107ea:	8b63      	ldrh	r3, [r4, #26]
 80107ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107f0:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 80107f2:	f04f 30ff 	mov.w	r0, #4294967295
 80107f6:	e22e      	b.n	8010c56 <tcp_write+0x4c2>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80107f8:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 80107fc:	2a0f      	cmp	r2, #15
 80107fe:	d8f4      	bhi.n	80107ea <tcp_write+0x56>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010800:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 8010802:	b302      	cbz	r2, 8010846 <tcp_write+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010804:	b943      	cbnz	r3, 8010818 <tcp_write+0x84>
 8010806:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010808:	b933      	cbnz	r3, 8010818 <tcp_write+0x84>
 801080a:	4bae      	ldr	r3, [pc, #696]	@ (8010ac4 <tcp_write+0x330>)
 801080c:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8010810:	49ad      	ldr	r1, [pc, #692]	@ (8010ac8 <tcp_write+0x334>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010812:	48ae      	ldr	r0, [pc, #696]	@ (8010acc <tcp_write+0x338>)
 8010814:	f003 ff40 	bl	8014698 <iprintf>
  queuelen = pcb->snd_queuelen;
 8010818:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 801081c:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 801081e:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8010820:	b9dd      	cbnz	r5, 801085a <tcp_write+0xc6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010822:	f8b4 7068 	ldrh.w	r7, [r4, #104]	@ 0x68
 8010826:	2f00      	cmp	r7, #0
 8010828:	f000 81b7 	beq.w	8010b9a <tcp_write+0x406>
 801082c:	4ba5      	ldr	r3, [pc, #660]	@ (8010ac4 <tcp_write+0x330>)
 801082e:	f240 224d 	movw	r2, #589	@ 0x24d
 8010832:	49a7      	ldr	r1, [pc, #668]	@ (8010ad0 <tcp_write+0x33c>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010834:	46a8      	mov	r8, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010836:	48a5      	ldr	r0, [pc, #660]	@ (8010acc <tcp_write+0x338>)
  u16_t extendlen = 0;
 8010838:	46a9      	mov	r9, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801083a:	f003 ff2d 	bl	8014698 <iprintf>
  u16_t oversize_used = 0;
 801083e:	462e      	mov	r6, r5
  u16_t pos = 0; /* position in 'arg' data */
 8010840:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 8010842:	9505      	str	r5, [sp, #20]
 8010844:	e0a0      	b.n	8010988 <tcp_write+0x1f4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010846:	b913      	cbnz	r3, 801084e <tcp_write+0xba>
 8010848:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 801084a:	2b00      	cmp	r3, #0
 801084c:	d0e4      	beq.n	8010818 <tcp_write+0x84>
 801084e:	4b9d      	ldr	r3, [pc, #628]	@ (8010ac4 <tcp_write+0x330>)
 8010850:	f240 125b 	movw	r2, #347	@ 0x15b
 8010854:	499f      	ldr	r1, [pc, #636]	@ (8010ad4 <tcp_write+0x340>)
 8010856:	e7dc      	b.n	8010812 <tcp_write+0x7e>
         last_unsent = last_unsent->next);
 8010858:	9d05      	ldr	r5, [sp, #20]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801085a:	682b      	ldr	r3, [r5, #0]
 801085c:	46a8      	mov	r8, r5
 801085e:	9305      	str	r3, [sp, #20]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d1f9      	bne.n	8010858 <tcp_write+0xc4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010864:	7aae      	ldrb	r6, [r5, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010866:	892b      	ldrh	r3, [r5, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010868:	00b6      	lsls	r6, r6, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801086a:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801086c:	f006 0604 	and.w	r6, r6, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010870:	4433      	add	r3, r6
 8010872:	429a      	cmp	r2, r3
 8010874:	da06      	bge.n	8010884 <tcp_write+0xf0>
 8010876:	4b93      	ldr	r3, [pc, #588]	@ (8010ac4 <tcp_write+0x330>)
 8010878:	f240 12e9 	movw	r2, #489	@ 0x1e9
 801087c:	4996      	ldr	r1, [pc, #600]	@ (8010ad8 <tcp_write+0x344>)
 801087e:	4893      	ldr	r0, [pc, #588]	@ (8010acc <tcp_write+0x338>)
 8010880:	f003 ff0a 	bl	8014698 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010884:	892f      	ldrh	r7, [r5, #8]
 8010886:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8010888:	f8b4 9068 	ldrh.w	r9, [r4, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801088c:	1bdf      	subs	r7, r3, r7
    oversize = pcb->unsent_oversize;
 801088e:	f8ad 903e 	strh.w	r9, [sp, #62]	@ 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010892:	1bbf      	subs	r7, r7, r6
 8010894:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 8010896:	f1b9 0f00 	cmp.w	r9, #0
 801089a:	d05a      	beq.n	8010952 <tcp_write+0x1be>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801089c:	45b9      	cmp	r9, r7
 801089e:	d906      	bls.n	80108ae <tcp_write+0x11a>
 80108a0:	4b88      	ldr	r3, [pc, #544]	@ (8010ac4 <tcp_write+0x330>)
 80108a2:	f240 12fb 	movw	r2, #507	@ 0x1fb
 80108a6:	498d      	ldr	r1, [pc, #564]	@ (8010adc <tcp_write+0x348>)
 80108a8:	4888      	ldr	r0, [pc, #544]	@ (8010acc <tcp_write+0x338>)
 80108aa:	f003 fef5 	bl	8014698 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80108ae:	45d1      	cmp	r9, sl
 80108b0:	464e      	mov	r6, r9
 80108b2:	bf28      	it	cs
 80108b4:	4656      	movcs	r6, sl
 80108b6:	42be      	cmp	r6, r7
 80108b8:	bf28      	it	cs
 80108ba:	463e      	movcs	r6, r7
      oversize -= oversize_used;
 80108bc:	eba9 0906 	sub.w	r9, r9, r6
 80108c0:	fa1f f389 	uxth.w	r3, r9
 80108c4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d137      	bne.n	801093c <tcp_write+0x1a8>
      space -= oversize_used;
 80108cc:	1bbf      	subs	r7, r7, r6
 80108ce:	b2bf      	uxth	r7, r7
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80108d0:	4556      	cmp	r6, sl
 80108d2:	f080 815b 	bcs.w	8010b8c <tcp_write+0x3f8>
 80108d6:	2f00      	cmp	r7, #0
 80108d8:	f000 815c 	beq.w	8010b94 <tcp_write+0x400>
 80108dc:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 80108e0:	f1b9 0f00 	cmp.w	r9, #0
 80108e4:	f000 8157 	beq.w	8010b96 <tcp_write+0x402>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80108e8:	ebaa 0906 	sub.w	r9, sl, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80108ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 80108ee:	45b9      	cmp	r9, r7
 80108f0:	bfa8      	it	ge
 80108f2:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80108f4:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 80108f6:	fa1f f589 	uxth.w	r5, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80108fa:	d52d      	bpl.n	8010958 <tcp_write+0x1c4>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80108fc:	2301      	movs	r3, #1
 80108fe:	463a      	mov	r2, r7
 8010900:	4629      	mov	r1, r5
 8010902:	2000      	movs	r0, #0
 8010904:	9302      	str	r3, [sp, #8]
 8010906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010908:	e9cd 4300 	strd	r4, r3, [sp]
 801090c:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 8010910:	f7ff fd78 	bl	8010404 <tcp_pbuf_prealloc>
 8010914:	4683      	mov	fp, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	f000 81ab 	beq.w	8010c72 <tcp_write+0x4de>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801091c:	9b08      	ldr	r3, [sp, #32]
 801091e:	462a      	mov	r2, r5
 8010920:	6840      	ldr	r0, [r0, #4]
 8010922:	1999      	adds	r1, r3, r6
 8010924:	f004 f969 	bl	8014bfa <memcpy>
        queuelen += pbuf_clen(concat_p);
 8010928:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 801092a:	f7fd fac5 	bl	800deb8 <pbuf_clen>
 801092e:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 8010930:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 8010934:	4403      	add	r3, r0
 8010936:	b29b      	uxth	r3, r3
 8010938:	9306      	str	r3, [sp, #24]
 801093a:	e020      	b.n	801097e <tcp_write+0x1ea>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801093c:	45b2      	cmp	sl, r6
 801093e:	f000 8131 	beq.w	8010ba4 <tcp_write+0x410>
 8010942:	4b60      	ldr	r3, [pc, #384]	@ (8010ac4 <tcp_write+0x330>)
 8010944:	f240 2203 	movw	r2, #515	@ 0x203
 8010948:	4965      	ldr	r1, [pc, #404]	@ (8010ae0 <tcp_write+0x34c>)
 801094a:	4860      	ldr	r0, [pc, #384]	@ (8010acc <tcp_write+0x338>)
 801094c:	f003 fea4 	bl	8014698 <iprintf>
 8010950:	e7bc      	b.n	80108cc <tcp_write+0x138>
  u16_t pos = 0; /* position in 'arg' data */
 8010952:	464d      	mov	r5, r9
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010954:	464e      	mov	r6, r9
 8010956:	e7bb      	b.n	80108d0 <tcp_write+0x13c>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010958:	f8d8 b004 	ldr.w	fp, [r8, #4]
 801095c:	465b      	mov	r3, fp
 801095e:	f8db b000 	ldr.w	fp, [fp]
 8010962:	f1bb 0f00 	cmp.w	fp, #0
 8010966:	d1f9      	bne.n	801095c <tcp_write+0x1c8>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010968:	7b1a      	ldrb	r2, [r3, #12]
 801096a:	2a3f      	cmp	r2, #63	@ 0x3f
 801096c:	d81d      	bhi.n	80109aa <tcp_write+0x216>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801096e:	895a      	ldrh	r2, [r3, #10]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010974:	9a08      	ldr	r2, [sp, #32]
 8010976:	429a      	cmp	r2, r3
 8010978:	d117      	bne.n	80109aa <tcp_write+0x216>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801097a:	b976      	cbnz	r6, 801099a <tcp_write+0x206>
          extendlen = seglen;
 801097c:	46a9      	mov	r9, r5
      pos += seglen;
 801097e:	1977      	adds	r7, r6, r5
      seg = last_unsent;
 8010980:	4645      	mov	r5, r8
      pos += seglen;
 8010982:	f8cd b014 	str.w	fp, [sp, #20]
 8010986:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801098a:	f04f 0b00 	mov.w	fp, #0
 801098e:	f003 0301 	and.w	r3, r3, #1
 8010992:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8010996:	930c      	str	r3, [sp, #48]	@ 0x30
 8010998:	e0c9      	b.n	8010b2e <tcp_write+0x39a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801099a:	4b4a      	ldr	r3, [pc, #296]	@ (8010ac4 <tcp_write+0x330>)
 801099c:	f44f 720d 	mov.w	r2, #564	@ 0x234
 80109a0:	4950      	ldr	r1, [pc, #320]	@ (8010ae4 <tcp_write+0x350>)
 80109a2:	484a      	ldr	r0, [pc, #296]	@ (8010acc <tcp_write+0x338>)
 80109a4:	f003 fe78 	bl	8014698 <iprintf>
 80109a8:	e7e8      	b.n	801097c <tcp_write+0x1e8>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80109aa:	2201      	movs	r2, #1
 80109ac:	4629      	mov	r1, r5
 80109ae:	2000      	movs	r0, #0
 80109b0:	f7fd f9a8 	bl	800dd04 <pbuf_alloc>
 80109b4:	4683      	mov	fp, r0
 80109b6:	2800      	cmp	r0, #0
 80109b8:	f000 815b 	beq.w	8010c72 <tcp_write+0x4de>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80109bc:	9b08      	ldr	r3, [sp, #32]
 80109be:	4433      	add	r3, r6
 80109c0:	6043      	str	r3, [r0, #4]
 80109c2:	e7b2      	b.n	801092a <tcp_write+0x196>
    u16_t left = len - pos;
 80109c4:	ebaa 0307 	sub.w	r3, sl, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 80109c8:	9a07      	ldr	r2, [sp, #28]
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	4293      	cmp	r3, r2
 80109ce:	bf28      	it	cs
 80109d0:	4613      	movcs	r3, r2
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	9309      	str	r3, [sp, #36]	@ 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80109d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109d8:	b35b      	cbz	r3, 8010a32 <tcp_write+0x29e>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80109da:	fabb f38b 	clz	r3, fp
 80109de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80109e0:	2036      	movs	r0, #54	@ 0x36
 80109e2:	095b      	lsrs	r3, r3, #5
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109e8:	e9cd 4300 	strd	r4, r3, [sp]
 80109ec:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 80109f0:	f7ff fd08 	bl	8010404 <tcp_pbuf_prealloc>
 80109f4:	4605      	mov	r5, r0
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d03b      	beq.n	8010a72 <tcp_write+0x2de>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80109fa:	8943      	ldrh	r3, [r0, #10]
 80109fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d206      	bcs.n	8010a10 <tcp_write+0x27c>
 8010a02:	4b30      	ldr	r3, [pc, #192]	@ (8010ac4 <tcp_write+0x330>)
 8010a04:	f240 2269 	movw	r2, #617	@ 0x269
 8010a08:	4937      	ldr	r1, [pc, #220]	@ (8010ae8 <tcp_write+0x354>)
 8010a0a:	4830      	ldr	r0, [pc, #192]	@ (8010acc <tcp_write+0x338>)
 8010a0c:	f003 fe44 	bl	8014698 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010a10:	6868      	ldr	r0, [r5, #4]
 8010a12:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8010a16:	19d9      	adds	r1, r3, r7
 8010a18:	f004 f8ef 	bl	8014bfa <memcpy>
    queuelen += pbuf_clen(p);
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f7fd fa4b 	bl	800deb8 <pbuf_clen>
 8010a22:	9b06      	ldr	r3, [sp, #24]
 8010a24:	4403      	add	r3, r0
 8010a26:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a28:	2b10      	cmp	r3, #16
    queuelen += pbuf_clen(p);
 8010a2a:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a2c:	d962      	bls.n	8010af4 <tcp_write+0x360>
      pbuf_free(p);
 8010a2e:	4628      	mov	r0, r5
 8010a30:	e01d      	b.n	8010a6e <tcp_write+0x2da>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a32:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8010a36:	b133      	cbz	r3, 8010a46 <tcp_write+0x2b2>
 8010a38:	4b22      	ldr	r3, [pc, #136]	@ (8010ac4 <tcp_write+0x330>)
 8010a3a:	f44f 721d 	mov.w	r2, #628	@ 0x274
 8010a3e:	492b      	ldr	r1, [pc, #172]	@ (8010aec <tcp_write+0x358>)
 8010a40:	4822      	ldr	r0, [pc, #136]	@ (8010acc <tcp_write+0x338>)
 8010a42:	f003 fe29 	bl	8014698 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010a46:	2201      	movs	r2, #1
 8010a48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a4a:	2036      	movs	r0, #54	@ 0x36
 8010a4c:	f7fd f95a 	bl	800dd04 <pbuf_alloc>
 8010a50:	b178      	cbz	r0, 8010a72 <tcp_write+0x2de>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a52:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a54:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a56:	900d      	str	r0, [sp, #52]	@ 0x34
 8010a58:	443a      	add	r2, r7
 8010a5a:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a5c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a60:	2036      	movs	r0, #54	@ 0x36
 8010a62:	f7fd f94f 	bl	800dd04 <pbuf_alloc>
 8010a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a68:	4605      	mov	r5, r0
 8010a6a:	bb30      	cbnz	r0, 8010aba <tcp_write+0x326>
        pbuf_free(p2);
 8010a6c:	4618      	mov	r0, r3
      pbuf_free(p);
 8010a6e:	f7fd f8df 	bl	800dc30 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a72:	8b63      	ldrh	r3, [r4, #26]
 8010a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a78:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 8010a7a:	9b05      	ldr	r3, [sp, #20]
 8010a7c:	b113      	cbz	r3, 8010a84 <tcp_write+0x2f0>
    pbuf_free(concat_p);
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fd f8d6 	bl	800dc30 <pbuf_free>
  if (queue != NULL) {
 8010a84:	f1bb 0f00 	cmp.w	fp, #0
 8010a88:	d002      	beq.n	8010a90 <tcp_write+0x2fc>
    tcp_segs_free(queue);
 8010a8a:	4658      	mov	r0, fp
 8010a8c:	f7fd fd0c 	bl	800e4a8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8010a90:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f43f aeac 	beq.w	80107f2 <tcp_write+0x5e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010a9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f47f aea8 	bne.w	80107f2 <tcp_write+0x5e>
 8010aa2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f47f aea4 	bne.w	80107f2 <tcp_write+0x5e>
 8010aaa:	4b06      	ldr	r3, [pc, #24]	@ (8010ac4 <tcp_write+0x330>)
 8010aac:	f240 322a 	movw	r2, #810	@ 0x32a
 8010ab0:	490f      	ldr	r1, [pc, #60]	@ (8010af0 <tcp_write+0x35c>)
 8010ab2:	4806      	ldr	r0, [pc, #24]	@ (8010acc <tcp_write+0x338>)
 8010ab4:	f003 fdf0 	bl	8014698 <iprintf>
 8010ab8:	e69b      	b.n	80107f2 <tcp_write+0x5e>
      pbuf_cat(p/*header*/, p2/*data*/);
 8010aba:	4619      	mov	r1, r3
 8010abc:	f7fd fa20 	bl	800df00 <pbuf_cat>
 8010ac0:	e7ac      	b.n	8010a1c <tcp_write+0x288>
 8010ac2:	bf00      	nop
 8010ac4:	0801739d 	.word	0x0801739d
 8010ac8:	08017574 	.word	0x08017574
 8010acc:	08015927 	.word	0x08015927
 8010ad0:	0801765e 	.word	0x0801765e
 8010ad4:	080175ae 	.word	0x080175ae
 8010ad8:	080175e0 	.word	0x080175e0
 8010adc:	080175f7 	.word	0x080175f7
 8010ae0:	08017617 	.word	0x08017617
 8010ae4:	08017635 	.word	0x08017635
 8010ae8:	0801768d 	.word	0x0801768d
 8010aec:	080176cb 	.word	0x080176cb
 8010af0:	08017757 	.word	0x08017757
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010af4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010af6:	2200      	movs	r2, #0
 8010af8:	4629      	mov	r1, r5
 8010afa:	4620      	mov	r0, r4
 8010afc:	443b      	add	r3, r7
 8010afe:	9200      	str	r2, [sp, #0]
 8010b00:	f7ff fcd0 	bl	80104a4 <tcp_create_segment>
 8010b04:	4605      	mov	r5, r0
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d0b3      	beq.n	8010a72 <tcp_write+0x2de>
    if (queue == NULL) {
 8010b0a:	f1bb 0f00 	cmp.w	fp, #0
 8010b0e:	d03b      	beq.n	8010b88 <tcp_write+0x3f4>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010b10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b12:	b933      	cbnz	r3, 8010b22 <tcp_write+0x38e>
 8010b14:	4b5b      	ldr	r3, [pc, #364]	@ (8010c84 <tcp_write+0x4f0>)
 8010b16:	f240 22ae 	movw	r2, #686	@ 0x2ae
 8010b1a:	495b      	ldr	r1, [pc, #364]	@ (8010c88 <tcp_write+0x4f4>)
 8010b1c:	485b      	ldr	r0, [pc, #364]	@ (8010c8c <tcp_write+0x4f8>)
 8010b1e:	f003 fdbb 	bl	8014698 <iprintf>
      prev_seg->next = seg;
 8010b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b24:	601d      	str	r5, [r3, #0]
    pos += seglen;
 8010b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    prev_seg = seg;
 8010b28:	950b      	str	r5, [sp, #44]	@ 0x2c
    pos += seglen;
 8010b2a:	443b      	add	r3, r7
 8010b2c:	b29f      	uxth	r7, r3
  while (pos < len) {
 8010b2e:	4557      	cmp	r7, sl
 8010b30:	f4ff af48 	bcc.w	80109c4 <tcp_write+0x230>
  if (oversize_used > 0) {
 8010b34:	b146      	cbz	r6, 8010b48 <tcp_write+0x3b4>
    for (p = last_unsent->p; p; p = p->next) {
 8010b36:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b3a:	2f00      	cmp	r7, #0
 8010b3c:	d136      	bne.n	8010bac <tcp_write+0x418>
    last_unsent->len += oversize_used;
 8010b3e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8010b42:	441e      	add	r6, r3
 8010b44:	f8a8 6008 	strh.w	r6, [r8, #8]
  pcb->unsent_oversize = oversize;
 8010b48:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8010b4c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (concat_p != NULL) {
 8010b50:	9b05      	ldr	r3, [sp, #20]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d03b      	beq.n	8010bce <tcp_write+0x43a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b56:	f1b8 0f00 	cmp.w	r8, #0
 8010b5a:	d106      	bne.n	8010b6a <tcp_write+0x3d6>
 8010b5c:	4b49      	ldr	r3, [pc, #292]	@ (8010c84 <tcp_write+0x4f0>)
 8010b5e:	f240 22e3 	movw	r2, #739	@ 0x2e3
 8010b62:	494b      	ldr	r1, [pc, #300]	@ (8010c90 <tcp_write+0x4fc>)
 8010b64:	4849      	ldr	r0, [pc, #292]	@ (8010c8c <tcp_write+0x4f8>)
 8010b66:	f003 fd97 	bl	8014698 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8010b6a:	9905      	ldr	r1, [sp, #20]
 8010b6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010b70:	f7fd f9c6 	bl	800df00 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b74:	9a05      	ldr	r2, [sp, #20]
 8010b76:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8010b7a:	8912      	ldrh	r2, [r2, #8]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 8010b82:	f8c8 b000 	str.w	fp, [r8]
 8010b86:	e04a      	b.n	8010c1e <tcp_write+0x48a>
      queue = seg;
 8010b88:	4683      	mov	fp, r0
 8010b8a:	e7cc      	b.n	8010b26 <tcp_write+0x392>
 8010b8c:	4637      	mov	r7, r6
  u16_t extendlen = 0;
 8010b8e:	f04f 0900 	mov.w	r9, #0
 8010b92:	e6f9      	b.n	8010988 <tcp_write+0x1f4>
 8010b94:	46b9      	mov	r9, r7
 8010b96:	4637      	mov	r7, r6
 8010b98:	e6f6      	b.n	8010988 <tcp_write+0x1f4>
 8010b9a:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 8010b9c:	463e      	mov	r6, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010b9e:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 8010ba0:	9705      	str	r7, [sp, #20]
 8010ba2:	e6f1      	b.n	8010988 <tcp_write+0x1f4>
 8010ba4:	f04f 0b00 	mov.w	fp, #0
  u16_t extendlen = 0;
 8010ba8:	46d9      	mov	r9, fp
 8010baa:	e7c3      	b.n	8010b34 <tcp_write+0x3a0>
      p->tot_len += oversize_used;
 8010bac:	893b      	ldrh	r3, [r7, #8]
 8010bae:	4433      	add	r3, r6
 8010bb0:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	b94b      	cbnz	r3, 8010bca <tcp_write+0x436>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	4632      	mov	r2, r6
 8010bba:	8978      	ldrh	r0, [r7, #10]
 8010bbc:	9908      	ldr	r1, [sp, #32]
 8010bbe:	4418      	add	r0, r3
 8010bc0:	f004 f81b 	bl	8014bfa <memcpy>
        p->len += oversize_used;
 8010bc4:	897b      	ldrh	r3, [r7, #10]
 8010bc6:	4433      	add	r3, r6
 8010bc8:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010bca:	683f      	ldr	r7, [r7, #0]
 8010bcc:	e7b5      	b.n	8010b3a <tcp_write+0x3a6>
  } else if (extendlen > 0) {
 8010bce:	f1b9 0f00 	cmp.w	r9, #0
 8010bd2:	d01f      	beq.n	8010c14 <tcp_write+0x480>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010bd4:	f1b8 0f00 	cmp.w	r8, #0
 8010bd8:	d002      	beq.n	8010be0 <tcp_write+0x44c>
 8010bda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bde:	b933      	cbnz	r3, 8010bee <tcp_write+0x45a>
 8010be0:	4b28      	ldr	r3, [pc, #160]	@ (8010c84 <tcp_write+0x4f0>)
 8010be2:	f240 22e9 	movw	r2, #745	@ 0x2e9
 8010be6:	492b      	ldr	r1, [pc, #172]	@ (8010c94 <tcp_write+0x500>)
 8010be8:	4828      	ldr	r0, [pc, #160]	@ (8010c8c <tcp_write+0x4f8>)
 8010bea:	f003 fd55 	bl	8014698 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bee:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 8010bf2:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bf4:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8010bf6:	444a      	add	r2, r9
 8010bf8:	b292      	uxth	r2, r2
 8010bfa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bfc:	b941      	cbnz	r1, 8010c10 <tcp_write+0x47c>
    p->len += extendlen;
 8010bfe:	895a      	ldrh	r2, [r3, #10]
 8010c00:	444a      	add	r2, r9
 8010c02:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010c04:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8010c08:	4499      	add	r9, r3
 8010c0a:	f8a8 9008 	strh.w	r9, [r8, #8]
  if (last_unsent == NULL) {
 8010c0e:	e7b8      	b.n	8010b82 <tcp_write+0x3ee>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c10:	460b      	mov	r3, r1
 8010c12:	e7ee      	b.n	8010bf2 <tcp_write+0x45e>
  if (last_unsent == NULL) {
 8010c14:	f1b8 0f00 	cmp.w	r8, #0
 8010c18:	d1b3      	bne.n	8010b82 <tcp_write+0x3ee>
    pcb->unsent = queue;
 8010c1a:	f8c4 b06c 	str.w	fp, [r4, #108]	@ 0x6c
  pcb->snd_lbb += len;
 8010c1e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010c20:	4453      	add	r3, sl
 8010c22:	65e3      	str	r3, [r4, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8010c24:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8010c28:	eba3 030a 	sub.w	r3, r3, sl
 8010c2c:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8010c30:	9b06      	ldr	r3, [sp, #24]
 8010c32:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 8010c36:	b153      	cbz	r3, 8010c4e <tcp_write+0x4ba>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c38:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c3a:	b943      	cbnz	r3, 8010c4e <tcp_write+0x4ba>
 8010c3c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010c3e:	b933      	cbnz	r3, 8010c4e <tcp_write+0x4ba>
 8010c40:	4b10      	ldr	r3, [pc, #64]	@ (8010c84 <tcp_write+0x4f0>)
 8010c42:	f240 3215 	movw	r2, #789	@ 0x315
 8010c46:	4914      	ldr	r1, [pc, #80]	@ (8010c98 <tcp_write+0x504>)
 8010c48:	4810      	ldr	r0, [pc, #64]	@ (8010c8c <tcp_write+0x4f8>)
 8010c4a:	f003 fd25 	bl	8014698 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c4e:	b10d      	cbz	r5, 8010c54 <tcp_write+0x4c0>
 8010c50:	68eb      	ldr	r3, [r5, #12]
 8010c52:	b91b      	cbnz	r3, 8010c5c <tcp_write+0x4c8>
  return ERR_OK;
 8010c54:	2000      	movs	r0, #0
}
 8010c56:	b011      	add	sp, #68	@ 0x44
 8010c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010c5e:	0792      	lsls	r2, r2, #30
 8010c60:	d4f8      	bmi.n	8010c54 <tcp_write+0x4c0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010c62:	899c      	ldrh	r4, [r3, #12]
 8010c64:	2008      	movs	r0, #8
 8010c66:	f7fc fa8b 	bl	800d180 <lwip_htons>
 8010c6a:	68eb      	ldr	r3, [r5, #12]
 8010c6c:	4304      	orrs	r4, r0
 8010c6e:	819c      	strh	r4, [r3, #12]
 8010c70:	e7f0      	b.n	8010c54 <tcp_write+0x4c0>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010c72:	f04f 0b00 	mov.w	fp, #0
 8010c76:	e6fc      	b.n	8010a72 <tcp_write+0x2de>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c78:	f06f 000f 	mvn.w	r0, #15
 8010c7c:	e7eb      	b.n	8010c56 <tcp_write+0x4c2>
    return err;
 8010c7e:	f06f 000a 	mvn.w	r0, #10
 8010c82:	e7e8      	b.n	8010c56 <tcp_write+0x4c2>
 8010c84:	0801739d 	.word	0x0801739d
 8010c88:	080176d9 	.word	0x080176d9
 8010c8c:	08015927 	.word	0x08015927
 8010c90:	080176ea 	.word	0x080176ea
 8010c94:	08017722 	.word	0x08017722
 8010c98:	08017757 	.word	0x08017757

08010c9c <tcp_split_unsent_seg>:
{
 8010c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010ca2:	4606      	mov	r6, r0
 8010ca4:	b930      	cbnz	r0, 8010cb4 <tcp_split_unsent_seg+0x18>
 8010ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8010e1c <tcp_split_unsent_seg+0x180>)
 8010ca8:	f240 324e 	movw	r2, #846	@ 0x34e
 8010cac:	495c      	ldr	r1, [pc, #368]	@ (8010e20 <tcp_split_unsent_seg+0x184>)
 8010cae:	485d      	ldr	r0, [pc, #372]	@ (8010e24 <tcp_split_unsent_seg+0x188>)
 8010cb0:	f003 fcf2 	bl	8014698 <iprintf>
  useg = pcb->unsent;
 8010cb4:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 8010cb6:	2c00      	cmp	r4, #0
 8010cb8:	f000 80ac 	beq.w	8010e14 <tcp_split_unsent_seg+0x178>
  if (split == 0) {
 8010cbc:	b95d      	cbnz	r5, 8010cd6 <tcp_split_unsent_seg+0x3a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010cbe:	4b57      	ldr	r3, [pc, #348]	@ (8010e1c <tcp_split_unsent_seg+0x180>)
 8010cc0:	f240 3256 	movw	r2, #854	@ 0x356
 8010cc4:	4958      	ldr	r1, [pc, #352]	@ (8010e28 <tcp_split_unsent_seg+0x18c>)
 8010cc6:	4857      	ldr	r0, [pc, #348]	@ (8010e24 <tcp_split_unsent_seg+0x188>)
 8010cc8:	f003 fce6 	bl	8014698 <iprintf>
    return ERR_VAL;
 8010ccc:	f06f 0005 	mvn.w	r0, #5
}
 8010cd0:	b003      	add	sp, #12
 8010cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 8010cd6:	8923      	ldrh	r3, [r4, #8]
 8010cd8:	42ab      	cmp	r3, r5
 8010cda:	f240 8096 	bls.w	8010e0a <tcp_split_unsent_seg+0x16e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010cde:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8010ce0:	42ab      	cmp	r3, r5
 8010ce2:	d20f      	bcs.n	8010d04 <tcp_split_unsent_seg+0x68>
 8010ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8010e1c <tcp_split_unsent_seg+0x180>)
 8010ce6:	f240 325e 	movw	r2, #862	@ 0x35e
 8010cea:	4950      	ldr	r1, [pc, #320]	@ (8010e2c <tcp_split_unsent_seg+0x190>)
 8010cec:	484d      	ldr	r0, [pc, #308]	@ (8010e24 <tcp_split_unsent_seg+0x188>)
 8010cee:	f003 fcd3 	bl	8014698 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010cf2:	8923      	ldrh	r3, [r4, #8]
 8010cf4:	b933      	cbnz	r3, 8010d04 <tcp_split_unsent_seg+0x68>
 8010cf6:	4b49      	ldr	r3, [pc, #292]	@ (8010e1c <tcp_split_unsent_seg+0x180>)
 8010cf8:	f240 325f 	movw	r2, #863	@ 0x35f
 8010cfc:	494c      	ldr	r1, [pc, #304]	@ (8010e30 <tcp_split_unsent_seg+0x194>)
 8010cfe:	4849      	ldr	r0, [pc, #292]	@ (8010e24 <tcp_split_unsent_seg+0x188>)
 8010d00:	f003 fcca 	bl	8014698 <iprintf>
  optflags = useg->flags;
 8010d04:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010d08:	f44f 7220 	mov.w	r2, #640	@ 0x280
  remainder = useg->len - split;
 8010d0c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010d10:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010d12:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 8010d16:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010d1a:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 8010d1e:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010d22:	fa17 f181 	uxtah	r1, r7, r1
 8010d26:	b289      	uxth	r1, r1
 8010d28:	f7fc ffec 	bl	800dd04 <pbuf_alloc>
  if (p == NULL) {
 8010d2c:	4681      	mov	r9, r0
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d070      	beq.n	8010e14 <tcp_split_unsent_seg+0x178>
  offset = useg->p->tot_len - useg->len + split;
 8010d32:	6860      	ldr	r0, [r4, #4]
 8010d34:	8922      	ldrh	r2, [r4, #8]
 8010d36:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010d38:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 8010d3c:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010d3e:	4642      	mov	r2, r8
 8010d40:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 8010d42:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	f7fd f999 	bl	800e07c <pbuf_copy_partial>
 8010d4a:	4540      	cmp	r0, r8
 8010d4c:	d15f      	bne.n	8010e0e <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010d4e:	68e3      	ldr	r3, [r4, #12]
 8010d50:	8998      	ldrh	r0, [r3, #12]
 8010d52:	f7fc fa15 	bl	800d180 <lwip_htons>
  if (split_flags & TCP_PSH) {
 8010d56:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010d5a:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 8010d5c:	bf16      	itet	ne
 8010d5e:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010d62:	f007 073f 	andeq.w	r7, r7, #63	@ 0x3f
    split_flags &= ~TCP_PSH;
 8010d66:	f007 0737 	andne.w	r7, r7, #55	@ 0x37
  if (split_flags & TCP_FIN) {
 8010d6a:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010d6c:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 8010d6e:	bf48      	it	mi
 8010d70:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010d74:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 8010d76:	bf48      	it	mi
 8010d78:	f007 07fe 	andmi.w	r7, r7, #254	@ 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010d7c:	f7fc fa03 	bl	800d186 <lwip_htonl>
 8010d80:	4642      	mov	r2, r8
 8010d82:	182b      	adds	r3, r5, r0
 8010d84:	4649      	mov	r1, r9
 8010d86:	4630      	mov	r0, r6
 8010d88:	f8cd b000 	str.w	fp, [sp]
 8010d8c:	f7ff fb8a 	bl	80104a4 <tcp_create_segment>
  if (seg == NULL) {
 8010d90:	4680      	mov	r8, r0
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d03e      	beq.n	8010e14 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010d96:	6860      	ldr	r0, [r4, #4]
 8010d98:	eba5 050a 	sub.w	r5, r5, sl
 8010d9c:	f7fd f88c 	bl	800deb8 <pbuf_clen>
 8010da0:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8010da4:	fa1f f985 	uxth.w	r9, r5
 8010da8:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010daa:	6860      	ldr	r0, [r4, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010dac:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010db0:	8903      	ldrh	r3, [r0, #8]
 8010db2:	fa13 f585 	uxtah	r5, r3, r5
 8010db6:	b2a9      	uxth	r1, r5
 8010db8:	f7fd f81c 	bl	800ddf4 <pbuf_realloc>
  useg->len -= remainder;
 8010dbc:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010dbe:	4638      	mov	r0, r7
  useg->len -= remainder;
 8010dc0:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010dc2:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 8010dc4:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010dc8:	899d      	ldrh	r5, [r3, #12]
 8010dca:	f7fc f9d9 	bl	800d180 <lwip_htons>
 8010dce:	68e3      	ldr	r3, [r4, #12]
 8010dd0:	4305      	orrs	r5, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010dd2:	6860      	ldr	r0, [r4, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010dd4:	819d      	strh	r5, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010dd6:	f7fd f86f 	bl	800deb8 <pbuf_clen>
 8010dda:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8010dde:	4418      	add	r0, r3
 8010de0:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010de4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010de8:	f7fd f866 	bl	800deb8 <pbuf_clen>
 8010dec:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8010df0:	4418      	add	r0, r3
  seg->next = useg->next;
 8010df2:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010df4:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 8010df8:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 8010dfc:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 8010e00:	f8d8 3000 	ldr.w	r3, [r8]
 8010e04:	b90b      	cbnz	r3, 8010e0a <tcp_split_unsent_seg+0x16e>
    pcb->unsent_oversize = 0;
 8010e06:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
    return ERR_OK;
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	e760      	b.n	8010cd0 <tcp_split_unsent_seg+0x34>
    pbuf_free(p);
 8010e0e:	4648      	mov	r0, r9
 8010e10:	f7fc ff0e 	bl	800dc30 <pbuf_free>
    return ERR_MEM;
 8010e14:	f04f 30ff 	mov.w	r0, #4294967295
 8010e18:	e75a      	b.n	8010cd0 <tcp_split_unsent_seg+0x34>
 8010e1a:	bf00      	nop
 8010e1c:	0801739d 	.word	0x0801739d
 8010e20:	08017775 	.word	0x08017775
 8010e24:	08015927 	.word	0x08015927
 8010e28:	08017797 	.word	0x08017797
 8010e2c:	080177b9 	.word	0x080177b9
 8010e30:	080177c6 	.word	0x080177c6

08010e34 <tcp_enqueue_flags>:
{
 8010e34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e38:	f011 0803 	ands.w	r8, r1, #3
{
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e40:	d106      	bne.n	8010e50 <tcp_enqueue_flags+0x1c>
 8010e42:	4b3e      	ldr	r3, [pc, #248]	@ (8010f3c <tcp_enqueue_flags+0x108>)
 8010e44:	f240 4213 	movw	r2, #1043	@ 0x413
 8010e48:	493d      	ldr	r1, [pc, #244]	@ (8010f40 <tcp_enqueue_flags+0x10c>)
 8010e4a:	483e      	ldr	r0, [pc, #248]	@ (8010f44 <tcp_enqueue_flags+0x110>)
 8010e4c:	f003 fc24 	bl	8014698 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010e50:	b934      	cbnz	r4, 8010e60 <tcp_enqueue_flags+0x2c>
 8010e52:	4b3a      	ldr	r3, [pc, #232]	@ (8010f3c <tcp_enqueue_flags+0x108>)
 8010e54:	f240 4215 	movw	r2, #1045	@ 0x415
 8010e58:	493b      	ldr	r1, [pc, #236]	@ (8010f48 <tcp_enqueue_flags+0x114>)
 8010e5a:	483a      	ldr	r0, [pc, #232]	@ (8010f44 <tcp_enqueue_flags+0x110>)
 8010e5c:	f003 fc1c 	bl	8014698 <iprintf>
  if (flags & TCP_SYN) {
 8010e60:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010e64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010e68:	2036      	movs	r0, #54	@ 0x36
 8010e6a:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8010e6e:	4649      	mov	r1, r9
 8010e70:	f7fc ff48 	bl	800dd04 <pbuf_alloc>
 8010e74:	4605      	mov	r5, r0
 8010e76:	b940      	cbnz	r0, 8010e8a <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e78:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 8010e7a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e82:	8363      	strh	r3, [r4, #26]
}
 8010e84:	b003      	add	sp, #12
 8010e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010e8a:	8943      	ldrh	r3, [r0, #10]
 8010e8c:	454b      	cmp	r3, r9
 8010e8e:	d206      	bcs.n	8010e9e <tcp_enqueue_flags+0x6a>
 8010e90:	4b2a      	ldr	r3, [pc, #168]	@ (8010f3c <tcp_enqueue_flags+0x108>)
 8010e92:	f240 423d 	movw	r2, #1085	@ 0x43d
 8010e96:	492d      	ldr	r1, [pc, #180]	@ (8010f4c <tcp_enqueue_flags+0x118>)
 8010e98:	482a      	ldr	r0, [pc, #168]	@ (8010f44 <tcp_enqueue_flags+0x110>)
 8010e9a:	f003 fbfd 	bl	8014698 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	9700      	str	r7, [sp, #0]
 8010ea2:	4632      	mov	r2, r6
 8010ea4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f7ff fafc 	bl	80104a4 <tcp_create_segment>
 8010eac:	4605      	mov	r5, r0
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0e2      	beq.n	8010e78 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010eb2:	68c3      	ldr	r3, [r0, #12]
 8010eb4:	079a      	lsls	r2, r3, #30
 8010eb6:	d006      	beq.n	8010ec6 <tcp_enqueue_flags+0x92>
 8010eb8:	4b20      	ldr	r3, [pc, #128]	@ (8010f3c <tcp_enqueue_flags+0x108>)
 8010eba:	f240 4246 	movw	r2, #1094	@ 0x446
 8010ebe:	4924      	ldr	r1, [pc, #144]	@ (8010f50 <tcp_enqueue_flags+0x11c>)
 8010ec0:	4820      	ldr	r0, [pc, #128]	@ (8010f44 <tcp_enqueue_flags+0x110>)
 8010ec2:	f003 fbe9 	bl	8014698 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010ec6:	892b      	ldrh	r3, [r5, #8]
 8010ec8:	b133      	cbz	r3, 8010ed8 <tcp_enqueue_flags+0xa4>
 8010eca:	4b1c      	ldr	r3, [pc, #112]	@ (8010f3c <tcp_enqueue_flags+0x108>)
 8010ecc:	f240 4247 	movw	r2, #1095	@ 0x447
 8010ed0:	4920      	ldr	r1, [pc, #128]	@ (8010f54 <tcp_enqueue_flags+0x120>)
 8010ed2:	481c      	ldr	r0, [pc, #112]	@ (8010f44 <tcp_enqueue_flags+0x110>)
 8010ed4:	f003 fbe0 	bl	8014698 <iprintf>
  if (pcb->unsent == NULL) {
 8010ed8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010eda:	b9db      	cbnz	r3, 8010f14 <tcp_enqueue_flags+0xe0>
    pcb->unsent = seg;
 8010edc:	66e5      	str	r5, [r4, #108]	@ 0x6c
  pcb->unsent_oversize = 0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ee4:	f1b8 0f00 	cmp.w	r8, #0
 8010ee8:	d008      	beq.n	8010efc <tcp_enqueue_flags+0xc8>
    pcb->snd_lbb++;
 8010eea:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010eec:	3301      	adds	r3, #1
 8010eee:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 8010ef0:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 8010ef2:	bf42      	ittt	mi
 8010ef4:	8b63      	ldrhmi	r3, [r4, #26]
 8010ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8010efa:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010efc:	6868      	ldr	r0, [r5, #4]
 8010efe:	f7fc ffdb 	bl	800deb8 <pbuf_clen>
 8010f02:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8010f06:	4418      	add	r0, r3
 8010f08:	b280      	uxth	r0, r0
 8010f0a:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 8010f0e:	b938      	cbnz	r0, 8010f20 <tcp_enqueue_flags+0xec>
  return ERR_OK;
 8010f10:	2000      	movs	r0, #0
 8010f12:	e7b7      	b.n	8010e84 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f14:	461a      	mov	r2, r3
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d1fb      	bne.n	8010f14 <tcp_enqueue_flags+0xe0>
    useg->next = seg;
 8010f1c:	6015      	str	r5, [r2, #0]
 8010f1e:	e7de      	b.n	8010ede <tcp_enqueue_flags+0xaa>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010f20:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1f4      	bne.n	8010f10 <tcp_enqueue_flags+0xdc>
 8010f26:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1f1      	bne.n	8010f10 <tcp_enqueue_flags+0xdc>
 8010f2c:	4b03      	ldr	r3, [pc, #12]	@ (8010f3c <tcp_enqueue_flags+0x108>)
 8010f2e:	f240 4269 	movw	r2, #1129	@ 0x469
 8010f32:	4909      	ldr	r1, [pc, #36]	@ (8010f58 <tcp_enqueue_flags+0x124>)
 8010f34:	4803      	ldr	r0, [pc, #12]	@ (8010f44 <tcp_enqueue_flags+0x110>)
 8010f36:	f003 fbaf 	bl	8014698 <iprintf>
 8010f3a:	e7e9      	b.n	8010f10 <tcp_enqueue_flags+0xdc>
 8010f3c:	0801739d 	.word	0x0801739d
 8010f40:	080177d4 	.word	0x080177d4
 8010f44:	08015927 	.word	0x08015927
 8010f48:	08017829 	.word	0x08017829
 8010f4c:	08017848 	.word	0x08017848
 8010f50:	08017881 	.word	0x08017881
 8010f54:	08017899 	.word	0x08017899
 8010f58:	080178c3 	.word	0x080178c3

08010f5c <tcp_send_fin>:
{
 8010f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010f5e:	4604      	mov	r4, r0
 8010f60:	b930      	cbnz	r0, 8010f70 <tcp_send_fin+0x14>
 8010f62:	4b13      	ldr	r3, [pc, #76]	@ (8010fb0 <tcp_send_fin+0x54>)
 8010f64:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8010f68:	4912      	ldr	r1, [pc, #72]	@ (8010fb4 <tcp_send_fin+0x58>)
 8010f6a:	4813      	ldr	r0, [pc, #76]	@ (8010fb8 <tcp_send_fin+0x5c>)
 8010f6c:	f003 fb94 	bl	8014698 <iprintf>
  if (pcb->unsent != NULL) {
 8010f70:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8010f72:	b14d      	cbz	r5, 8010f88 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f74:	462f      	mov	r7, r5
 8010f76:	682d      	ldr	r5, [r5, #0]
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	d1fb      	bne.n	8010f74 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	8998      	ldrh	r0, [r3, #12]
 8010f80:	f7fc f8fe 	bl	800d180 <lwip_htons>
 8010f84:	0743      	lsls	r3, r0, #29
 8010f86:	d005      	beq.n	8010f94 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010f88:	4620      	mov	r0, r4
 8010f8a:	2101      	movs	r1, #1
}
 8010f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010f90:	f7ff bf50 	b.w	8010e34 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2001      	movs	r0, #1
 8010f98:	899e      	ldrh	r6, [r3, #12]
 8010f9a:	f7fc f8f1 	bl	800d180 <lwip_htons>
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	4306      	orrs	r6, r0
}
 8010fa2:	4628      	mov	r0, r5
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010fa4:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010fa6:	8b63      	ldrh	r3, [r4, #26]
 8010fa8:	f043 0320 	orr.w	r3, r3, #32
 8010fac:	8363      	strh	r3, [r4, #26]
}
 8010fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb0:	0801739d 	.word	0x0801739d
 8010fb4:	080178eb 	.word	0x080178eb
 8010fb8:	08015927 	.word	0x08015927

08010fbc <tcp_rexmit_rto_prepare>:
{
 8010fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	b930      	cbnz	r0, 8010fd2 <tcp_rexmit_rto_prepare+0x16>
 8010fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8011038 <tcp_rexmit_rto_prepare+0x7c>)
 8010fc6:	f240 6267 	movw	r2, #1639	@ 0x667
 8010fca:	491c      	ldr	r1, [pc, #112]	@ (801103c <tcp_rexmit_rto_prepare+0x80>)
 8010fcc:	481c      	ldr	r0, [pc, #112]	@ (8011040 <tcp_rexmit_rto_prepare+0x84>)
 8010fce:	f003 fb63 	bl	8014698 <iprintf>
  if (pcb->unacked == NULL) {
 8010fd2:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8010fd4:	b945      	cbnz	r5, 8010fe8 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 8010fd6:	f06f 0005 	mvn.w	r0, #5
}
 8010fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 8010fde:	f7ff f9fb 	bl	80103d8 <tcp_output_segment_busy>
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d1f7      	bne.n	8010fd6 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010fe6:	682d      	ldr	r5, [r5, #0]
 8010fe8:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 8010fea:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d1f6      	bne.n	8010fde <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 8010ff0:	f7ff f9f2 	bl	80103d8 <tcp_output_segment_busy>
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d1ed      	bne.n	8010fd6 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 8010ffa:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010ffc:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 8010ffe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  pcb->unacked = NULL;
 8011000:	e9c4 301b 	strd	r3, r0, [r4, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 8011004:	8b63      	ldrh	r3, [r4, #26]
 8011006:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801100a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801100c:	68eb      	ldr	r3, [r5, #12]
 801100e:	6858      	ldr	r0, [r3, #4]
 8011010:	f7fc f8b9 	bl	800d186 <lwip_htonl>
 8011014:	68eb      	ldr	r3, [r5, #12]
 8011016:	4607      	mov	r7, r0
 8011018:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801101c:	8998      	ldrh	r0, [r3, #12]
 801101e:	f7fc f8af 	bl	800d180 <lwip_htons>
 8011022:	f010 0303 	ands.w	r3, r0, #3
 8011026:	4447      	add	r7, r8
  return ERR_OK;
 8011028:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801102a:	bf18      	it	ne
 801102c:	2301      	movne	r3, #1
  pcb->rttest = 0;
 801102e:	6366      	str	r6, [r4, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011030:	443b      	add	r3, r7
 8011032:	64e3      	str	r3, [r4, #76]	@ 0x4c
  return ERR_OK;
 8011034:	e7d1      	b.n	8010fda <tcp_rexmit_rto_prepare+0x1e>
 8011036:	bf00      	nop
 8011038:	0801739d 	.word	0x0801739d
 801103c:	08017905 	.word	0x08017905
 8011040:	08015927 	.word	0x08015927

08011044 <tcp_rexmit>:
{
 8011044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011046:	4604      	mov	r4, r0
 8011048:	b930      	cbnz	r0, 8011058 <tcp_rexmit+0x14>
 801104a:	4b1b      	ldr	r3, [pc, #108]	@ (80110b8 <tcp_rexmit+0x74>)
 801104c:	f240 62c5 	movw	r2, #1733	@ 0x6c5
 8011050:	491a      	ldr	r1, [pc, #104]	@ (80110bc <tcp_rexmit+0x78>)
 8011052:	481b      	ldr	r0, [pc, #108]	@ (80110c0 <tcp_rexmit+0x7c>)
 8011054:	f003 fb20 	bl	8014698 <iprintf>
  if (pcb->unacked == NULL) {
 8011058:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 801105a:	b915      	cbnz	r5, 8011062 <tcp_rexmit+0x1e>
    return ERR_VAL;
 801105c:	f06f 0005 	mvn.w	r0, #5
}
 8011060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 8011062:	4628      	mov	r0, r5
 8011064:	f7ff f9b8 	bl	80103d8 <tcp_output_segment_busy>
 8011068:	2800      	cmp	r0, #0
 801106a:	d1f7      	bne.n	801105c <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 801106c:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 801106e:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
  pcb->unacked = seg->next;
 8011072:	6723      	str	r3, [r4, #112]	@ 0x70
  while (*cur_seg &&
 8011074:	6833      	ldr	r3, [r6, #0]
 8011076:	b983      	cbnz	r3, 801109a <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 8011078:	6833      	ldr	r3, [r6, #0]
 801107a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 801107c:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 801107e:	682b      	ldr	r3, [r5, #0]
 8011080:	b90b      	cbnz	r3, 8011086 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 8011082:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (pcb->nrtx < 0xFF) {
 8011086:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  pcb->rttest = 0;
 801108a:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 801108c:	2bff      	cmp	r3, #255	@ 0xff
  pcb->rttest = 0;
 801108e:	6360      	str	r0, [r4, #52]	@ 0x34
    ++pcb->nrtx;
 8011090:	bf1c      	itt	ne
 8011092:	3301      	addne	r3, #1
 8011094:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
  return ERR_OK;
 8011098:	e7e2      	b.n	8011060 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	6858      	ldr	r0, [r3, #4]
 801109e:	f7fc f872 	bl	800d186 <lwip_htonl>
 80110a2:	68eb      	ldr	r3, [r5, #12]
 80110a4:	4607      	mov	r7, r0
 80110a6:	6858      	ldr	r0, [r3, #4]
 80110a8:	f7fc f86d 	bl	800d186 <lwip_htonl>
 80110ac:	1a3f      	subs	r7, r7, r0
  while (*cur_seg &&
 80110ae:	2f00      	cmp	r7, #0
 80110b0:	dae2      	bge.n	8011078 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 80110b2:	6836      	ldr	r6, [r6, #0]
 80110b4:	e7de      	b.n	8011074 <tcp_rexmit+0x30>
 80110b6:	bf00      	nop
 80110b8:	0801739d 	.word	0x0801739d
 80110bc:	08017929 	.word	0x08017929
 80110c0:	08015927 	.word	0x08015927

080110c4 <tcp_rexmit_fast>:
{
 80110c4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80110c6:	4604      	mov	r4, r0
 80110c8:	b930      	cbnz	r0, 80110d8 <tcp_rexmit_fast+0x14>
 80110ca:	4b15      	ldr	r3, [pc, #84]	@ (8011120 <tcp_rexmit_fast+0x5c>)
 80110cc:	f240 62fd 	movw	r2, #1789	@ 0x6fd
 80110d0:	4914      	ldr	r1, [pc, #80]	@ (8011124 <tcp_rexmit_fast+0x60>)
 80110d2:	4815      	ldr	r0, [pc, #84]	@ (8011128 <tcp_rexmit_fast+0x64>)
 80110d4:	f003 fae0 	bl	8014698 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80110d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110da:	b1fb      	cbz	r3, 801111c <tcp_rexmit_fast+0x58>
 80110dc:	8b63      	ldrh	r3, [r4, #26]
 80110de:	075b      	lsls	r3, r3, #29
 80110e0:	d41c      	bmi.n	801111c <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 80110e2:	4620      	mov	r0, r4
 80110e4:	f7ff ffae 	bl	8011044 <tcp_rexmit>
 80110e8:	b9c0      	cbnz	r0, 801111c <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80110ea:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80110ee:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      pcb->rtime = 0;
 80110f2:	8620      	strh	r0, [r4, #48]	@ 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80110f4:	4299      	cmp	r1, r3
 80110f6:	bf28      	it	cs
 80110f8:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80110fa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80110fc:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80110fe:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 8011100:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011104:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 8011106:	bf88      	it	hi
 8011108:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801110a:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 801110c:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011110:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011114:	8b63      	ldrh	r3, [r4, #26]
 8011116:	f043 0304 	orr.w	r3, r3, #4
 801111a:	8363      	strh	r3, [r4, #26]
}
 801111c:	bd38      	pop	{r3, r4, r5, pc}
 801111e:	bf00      	nop
 8011120:	0801739d 	.word	0x0801739d
 8011124:	08017941 	.word	0x08017941
 8011128:	08015927 	.word	0x08015927

0801112c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801112c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801112e:	9e06      	ldr	r6, [sp, #24]
 8011130:	461c      	mov	r4, r3
 8011132:	4605      	mov	r5, r0
 8011134:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8011138:	4608      	mov	r0, r1
 801113a:	4611      	mov	r1, r2
 801113c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8011140:	e9cd 3200 	strd	r3, r2, [sp]
 8011144:	4633      	mov	r3, r6
 8011146:	4622      	mov	r2, r4
 8011148:	f7ff fac2 	bl	80106d0 <tcp_rst_common.isra.0>
  if (p != NULL) {
 801114c:	4601      	mov	r1, r0
 801114e:	b138      	cbz	r0, 8011160 <tcp_rst+0x34>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011150:	4633      	mov	r3, r6
 8011152:	4622      	mov	r2, r4
 8011154:	4628      	mov	r0, r5
  }
}
 8011156:	b002      	add	sp, #8
 8011158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801115c:	f7ff baee 	b.w	801073c <tcp_output_control_segment>
}
 8011160:	b002      	add	sp, #8
 8011162:	bd70      	pop	{r4, r5, r6, pc}

08011164 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 8011164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011166:	4605      	mov	r5, r0
 8011168:	461c      	mov	r4, r3
 801116a:	4608      	mov	r0, r1
 801116c:	9e06      	ldr	r6, [sp, #24]
 801116e:	4611      	mov	r1, r2
 8011170:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8011174:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  if (netif) {
 8011178:	b185      	cbz	r5, 801119c <tcp_rst_netif+0x38>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 801117a:	e9cd 3200 	strd	r3, r2, [sp]
 801117e:	4633      	mov	r3, r6
 8011180:	4622      	mov	r2, r4
 8011182:	f7ff faa5 	bl	80106d0 <tcp_rst_common.isra.0>
    if (p != NULL) {
 8011186:	4601      	mov	r1, r0
 8011188:	b140      	cbz	r0, 801119c <tcp_rst_netif+0x38>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 801118a:	4633      	mov	r3, r6
 801118c:	4622      	mov	r2, r4
 801118e:	2000      	movs	r0, #0
 8011190:	9506      	str	r5, [sp, #24]
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 8011192:	b002      	add	sp, #8
 8011194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 8011198:	f7ff b9f2 	b.w	8010580 <tcp_output_control_segment_netif>
}
 801119c:	b002      	add	sp, #8
 801119e:	bd70      	pop	{r4, r5, r6, pc}

080111a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80111a0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80111a2:	4604      	mov	r4, r0
 80111a4:	b930      	cbnz	r0, 80111b4 <tcp_send_empty_ack+0x14>
 80111a6:	4b14      	ldr	r3, [pc, #80]	@ (80111f8 <tcp_send_empty_ack+0x58>)
 80111a8:	f44f 6203 	mov.w	r2, #2096	@ 0x830
 80111ac:	4913      	ldr	r1, [pc, #76]	@ (80111fc <tcp_send_empty_ack+0x5c>)
 80111ae:	4814      	ldr	r0, [pc, #80]	@ (8011200 <tcp_send_empty_ack+0x60>)
 80111b0:	f003 fa72 	bl	8014698 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80111b4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80111b6:	f7fb ffe6 	bl	800d186 <lwip_htonl>
 80111ba:	2100      	movs	r1, #0
 80111bc:	4602      	mov	r2, r0
 80111be:	4620      	mov	r0, r4
 80111c0:	f7ff fa50 	bl	8010664 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80111c4:	4605      	mov	r5, r0
 80111c6:	b930      	cbnz	r0, 80111d6 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111c8:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80111ca:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111ce:	f043 0303 	orr.w	r3, r3, #3
 80111d2:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80111d4:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80111d6:	f7ff fa6b 	bl	80106b0 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80111da:	1d23      	adds	r3, r4, #4
 80111dc:	4622      	mov	r2, r4
 80111de:	4629      	mov	r1, r5
 80111e0:	4620      	mov	r0, r4
 80111e2:	f7ff faab 	bl	801073c <tcp_output_control_segment>
  if (err != ERR_OK) {
 80111e6:	8b63      	ldrh	r3, [r4, #26]
 80111e8:	b118      	cbz	r0, 80111f2 <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111ea:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	e7ef      	b.n	80111d2 <tcp_send_empty_ack+0x32>
 80111f2:	f023 0303 	bic.w	r3, r3, #3
 80111f6:	e7fa      	b.n	80111ee <tcp_send_empty_ack+0x4e>
 80111f8:	0801739d 	.word	0x0801739d
 80111fc:	0801795e 	.word	0x0801795e
 8011200:	08015927 	.word	0x08015927

08011204 <tcp_output>:
{
 8011204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011208:	4604      	mov	r4, r0
{
 801120a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801120c:	b930      	cbnz	r0, 801121c <tcp_output+0x18>
 801120e:	4b8e      	ldr	r3, [pc, #568]	@ (8011448 <tcp_output+0x244>)
 8011210:	f240 42e5 	movw	r2, #1253	@ 0x4e5
 8011214:	498d      	ldr	r1, [pc, #564]	@ (801144c <tcp_output+0x248>)
 8011216:	488e      	ldr	r0, [pc, #568]	@ (8011450 <tcp_output+0x24c>)
 8011218:	f003 fa3e 	bl	8014698 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801121c:	7d23      	ldrb	r3, [r4, #20]
 801121e:	2b01      	cmp	r3, #1
 8011220:	d106      	bne.n	8011230 <tcp_output+0x2c>
 8011222:	4b89      	ldr	r3, [pc, #548]	@ (8011448 <tcp_output+0x244>)
 8011224:	f240 42e7 	movw	r2, #1255	@ 0x4e7
 8011228:	498a      	ldr	r1, [pc, #552]	@ (8011454 <tcp_output+0x250>)
 801122a:	4889      	ldr	r0, [pc, #548]	@ (8011450 <tcp_output+0x24c>)
 801122c:	f003 fa34 	bl	8014698 <iprintf>
  if (tcp_input_pcb == pcb) {
 8011230:	4b89      	ldr	r3, [pc, #548]	@ (8011458 <tcp_output+0x254>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	42a3      	cmp	r3, r4
 8011236:	f000 816f 	beq.w	8011518 <tcp_output+0x314>
  seg = pcb->unsent;
 801123a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801123c:	f8b4 8048 	ldrh.w	r8, [r4, #72]	@ 0x48
 8011240:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 8011244:	b94d      	cbnz	r5, 801125a <tcp_output+0x56>
    if (pcb->flags & TF_ACK_NOW) {
 8011246:	8b63      	ldrh	r3, [r4, #26]
 8011248:	0798      	lsls	r0, r3, #30
 801124a:	f140 8161 	bpl.w	8011510 <tcp_output+0x30c>
      return tcp_send_empty_ack(pcb);
 801124e:	4620      	mov	r0, r4
}
 8011250:	b007      	add	sp, #28
 8011252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8011256:	f7ff bfa3 	b.w	80111a0 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801125a:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801125c:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011260:	b340      	cbz	r0, 80112b4 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 8011262:	f7fc fc27 	bl	800dab4 <netif_get_by_index>
    return ip_route(src, dst);
 8011266:	4607      	mov	r7, r0
  if (netif == NULL) {
 8011268:	2800      	cmp	r0, #0
 801126a:	f000 816e 	beq.w	801154a <tcp_output+0x346>
  if (ip_addr_isany(&pcb->local_ip)) {
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	b90b      	cbnz	r3, 8011276 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011272:	6843      	ldr	r3, [r0, #4]
 8011274:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011276:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011278:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801127a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801127c:	bf28      	it	cs
 801127e:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011280:	f7fb ff81 	bl	800d186 <lwip_htonl>
 8011284:	892b      	ldrh	r3, [r5, #8]
 8011286:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011288:	1a9b      	subs	r3, r3, r2
 801128a:	4403      	add	r3, r0
 801128c:	4543      	cmp	r3, r8
 801128e:	d915      	bls.n	80112bc <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011290:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 8011294:	4543      	cmp	r3, r8
 8011296:	d1d6      	bne.n	8011246 <tcp_output+0x42>
 8011298:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801129a:	2b00      	cmp	r3, #0
 801129c:	d1d3      	bne.n	8011246 <tcp_output+0x42>
 801129e:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1cf      	bne.n	8011246 <tcp_output+0x42>
      pcb->persist_cnt = 0;
 80112a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 80112aa:	f884 3096 	strb.w	r3, [r4, #150]	@ 0x96
      pcb->persist_cnt = 0;
 80112ae:	f8a4 2094 	strh.w	r2, [r4, #148]	@ 0x94
 80112b2:	e7c8      	b.n	8011246 <tcp_output+0x42>
    return ip_route(src, dst);
 80112b4:	4648      	mov	r0, r9
 80112b6:	f001 f935 	bl	8012524 <ip4_route>
 80112ba:	e7d4      	b.n	8011266 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 80112bc:	2300      	movs	r3, #0
  useg = pcb->unacked;
 80112be:	6f26      	ldr	r6, [r4, #112]	@ 0x70
  pcb->persist_backoff = 0;
 80112c0:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
  if (useg != NULL) {
 80112c4:	b126      	cbz	r6, 80112d0 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 80112c6:	4633      	mov	r3, r6
 80112c8:	6836      	ldr	r6, [r6, #0]
 80112ca:	2e00      	cmp	r6, #0
 80112cc:	d1fb      	bne.n	80112c6 <tcp_output+0xc2>
 80112ce:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 80112d0:	f8df a174 	ldr.w	sl, [pc, #372]	@ 8011448 <tcp_output+0x244>
 80112d4:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8011450 <tcp_output+0x24c>
 80112d8:	e0dc      	b.n	8011494 <tcp_output+0x290>
    if (pcb->state != SYN_SENT) {
 80112da:	7d23      	ldrb	r3, [r4, #20]
 80112dc:	2b02      	cmp	r3, #2
 80112de:	d009      	beq.n	80112f4 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80112e0:	68eb      	ldr	r3, [r5, #12]
 80112e2:	2010      	movs	r0, #16
 80112e4:	899b      	ldrh	r3, [r3, #12]
 80112e6:	9304      	str	r3, [sp, #16]
 80112e8:	f7fb ff4a 	bl	800d180 <lwip_htons>
 80112ec:	9b04      	ldr	r3, [sp, #16]
 80112ee:	68ea      	ldr	r2, [r5, #12]
 80112f0:	4303      	orrs	r3, r0
 80112f2:	8193      	strh	r3, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 80112f4:	4628      	mov	r0, r5
 80112f6:	f7ff f86f 	bl	80103d8 <tcp_output_segment_busy>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d170      	bne.n	80113e0 <tcp_output+0x1dc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80112fe:	68eb      	ldr	r3, [r5, #12]
 8011300:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	f7fb ff3f 	bl	800d186 <lwip_htonl>
 8011308:	9b04      	ldr	r3, [sp, #16]
 801130a:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801130c:	68eb      	ldr	r3, [r5, #12]
 801130e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8011310:	9304      	str	r3, [sp, #16]
 8011312:	f7fb ff35 	bl	800d180 <lwip_htons>
 8011316:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011318:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801131a:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801131c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801131e:	4413      	add	r3, r2
 8011320:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011322:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011324:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011326:	07d2      	lsls	r2, r2, #31
 8011328:	d44a      	bmi.n	80113c0 <tcp_output+0x1bc>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801132a:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 801132e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8011332:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8011334:	bfbc      	itt	lt
 8011336:	2300      	movlt	r3, #0
 8011338:	8623      	strhlt	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 801133a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801133c:	b94b      	cbnz	r3, 8011352 <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 801133e:	4947      	ldr	r1, [pc, #284]	@ (801145c <tcp_output+0x258>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011340:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 8011342:	6809      	ldr	r1, [r1, #0]
 8011344:	9204      	str	r2, [sp, #16]
 8011346:	6361      	str	r1, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011348:	6858      	ldr	r0, [r3, #4]
 801134a:	f7fb ff1c 	bl	800d186 <lwip_htonl>
 801134e:	9a04      	ldr	r2, [sp, #16]
 8011350:	63a0      	str	r0, [r4, #56]	@ 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011352:	6869      	ldr	r1, [r5, #4]
 8011354:	68eb      	ldr	r3, [r5, #12]
 8011356:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 8011358:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801135c:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 801135e:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011360:	b280      	uxth	r0, r0
  seg->p->len -= len;
 8011362:	ebac 0c00 	sub.w	ip, ip, r0
 8011366:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 801136a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801136e:	ebac 0000 	sub.w	r0, ip, r0
 8011372:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 8011374:	2100      	movs	r1, #0
 8011376:	7419      	strb	r1, [r3, #16]
 8011378:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801137a:	7aa9      	ldrb	r1, [r5, #10]
 801137c:	f011 0f01 	tst.w	r1, #1
 8011380:	bf0c      	ite	eq
 8011382:	2114      	moveq	r1, #20
 8011384:	2118      	movne	r1, #24
 8011386:	440b      	add	r3, r1
 8011388:	429a      	cmp	r2, r3
 801138a:	d006      	beq.n	801139a <tcp_output+0x196>
 801138c:	4653      	mov	r3, sl
 801138e:	f44f 62c4 	mov.w	r2, #1568	@ 0x620
 8011392:	4933      	ldr	r1, [pc, #204]	@ (8011460 <tcp_output+0x25c>)
 8011394:	4658      	mov	r0, fp
 8011396:	f003 f97f 	bl	8014698 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801139a:	2306      	movs	r3, #6
 801139c:	9702      	str	r7, [sp, #8]
 801139e:	464a      	mov	r2, r9
 80113a0:	4621      	mov	r1, r4
 80113a2:	9301      	str	r3, [sp, #4]
 80113a4:	7aa3      	ldrb	r3, [r4, #10]
 80113a6:	9300      	str	r3, [sp, #0]
 80113a8:	7ae3      	ldrb	r3, [r4, #11]
 80113aa:	6868      	ldr	r0, [r5, #4]
 80113ac:	f001 fa1a 	bl	80127e4 <ip4_output_if>
    if (err != ERR_OK) {
 80113b0:	b1b0      	cbz	r0, 80113e0 <tcp_output+0x1dc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113b2:	8b63      	ldrh	r3, [r4, #26]
 80113b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113b8:	8363      	strh	r3, [r4, #26]
}
 80113ba:	b007      	add	sp, #28
 80113bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80113c0:	464a      	mov	r2, r9
 80113c2:	4639      	mov	r1, r7
 80113c4:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80113c8:	9304      	str	r3, [sp, #16]
 80113ca:	f7fd fe79 	bl	800f0c0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80113ce:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 80113d2:	f7fb fed8 	bl	800d186 <lwip_htonl>
 80113d6:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 80113d8:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80113dc:	6158      	str	r0, [r3, #20]
    opts += 1;
 80113de:	e7a6      	b.n	801132e <tcp_output+0x12a>
    pcb->unsent = seg->next;
 80113e0:	682b      	ldr	r3, [r5, #0]
 80113e2:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80113e4:	7d23      	ldrb	r3, [r4, #20]
 80113e6:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80113e8:	bf1e      	ittt	ne
 80113ea:	8b63      	ldrhne	r3, [r4, #26]
 80113ec:	f023 0303 	bicne.w	r3, r3, #3
 80113f0:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80113f2:	68eb      	ldr	r3, [r5, #12]
 80113f4:	6858      	ldr	r0, [r3, #4]
 80113f6:	f7fb fec6 	bl	800d186 <lwip_htonl>
 80113fa:	8929      	ldrh	r1, [r5, #8]
 80113fc:	68eb      	ldr	r3, [r5, #12]
 80113fe:	9104      	str	r1, [sp, #16]
 8011400:	9005      	str	r0, [sp, #20]
 8011402:	8998      	ldrh	r0, [r3, #12]
 8011404:	f7fb febc 	bl	800d180 <lwip_htons>
 8011408:	f010 0303 	ands.w	r3, r0, #3
 801140c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8011410:	bf18      	it	ne
 8011412:	2301      	movne	r3, #1
 8011414:	440a      	add	r2, r1
 8011416:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011418:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801141a:	1ad2      	subs	r2, r2, r3
 801141c:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 801141e:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 8011420:	bfb8      	it	lt
 8011422:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8011424:	892b      	ldrh	r3, [r5, #8]
 8011426:	9304      	str	r3, [sp, #16]
 8011428:	8990      	ldrh	r0, [r2, #12]
 801142a:	f7fb fea9 	bl	800d180 <lwip_htons>
 801142e:	0783      	lsls	r3, r0, #30
 8011430:	d103      	bne.n	801143a <tcp_output+0x236>
 8011432:	9b04      	ldr	r3, [sp, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	f000 8084 	beq.w	8011542 <tcp_output+0x33e>
      seg->next = NULL;
 801143a:	2300      	movs	r3, #0
 801143c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801143e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011440:	b983      	cbnz	r3, 8011464 <tcp_output+0x260>
        pcb->unacked = seg;
 8011442:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 8011444:	462e      	mov	r6, r5
 8011446:	e022      	b.n	801148e <tcp_output+0x28a>
 8011448:	0801739d 	.word	0x0801739d
 801144c:	0801797e 	.word	0x0801797e
 8011450:	08015927 	.word	0x08015927
 8011454:	08017996 	.word	0x08017996
 8011458:	2000f33c 	.word	0x2000f33c
 801145c:	2000f338 	.word	0x2000f338
 8011460:	080179d3 	.word	0x080179d3
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011464:	68eb      	ldr	r3, [r5, #12]
 8011466:	6858      	ldr	r0, [r3, #4]
 8011468:	f7fb fe8d 	bl	800d186 <lwip_htonl>
 801146c:	68f2      	ldr	r2, [r6, #12]
 801146e:	9004      	str	r0, [sp, #16]
 8011470:	6850      	ldr	r0, [r2, #4]
 8011472:	f7fb fe88 	bl	800d186 <lwip_htonl>
 8011476:	9b04      	ldr	r3, [sp, #16]
 8011478:	1a1b      	subs	r3, r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	da5f      	bge.n	801153e <tcp_output+0x33a>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801147e:	f104 0370 	add.w	r3, r4, #112	@ 0x70
          while (*cur_seg &&
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	2a00      	cmp	r2, #0
 8011486:	d149      	bne.n	801151c <tcp_output+0x318>
          seg->next = (*cur_seg);
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 801148c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 801148e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 8011490:	2d00      	cmp	r5, #0
 8011492:	d03a      	beq.n	801150a <tcp_output+0x306>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011494:	68eb      	ldr	r3, [r5, #12]
 8011496:	6858      	ldr	r0, [r3, #4]
 8011498:	f7fb fe75 	bl	800d186 <lwip_htonl>
 801149c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801149e:	1ac0      	subs	r0, r0, r3
 80114a0:	892b      	ldrh	r3, [r5, #8]
 80114a2:	4418      	add	r0, r3
  while (seg != NULL &&
 80114a4:	4540      	cmp	r0, r8
 80114a6:	d82e      	bhi.n	8011506 <tcp_output+0x302>
    LWIP_ASSERT("RST not expected here!",
 80114a8:	68eb      	ldr	r3, [r5, #12]
 80114aa:	8998      	ldrh	r0, [r3, #12]
 80114ac:	f7fb fe68 	bl	800d180 <lwip_htons>
 80114b0:	0741      	lsls	r1, r0, #29
 80114b2:	d506      	bpl.n	80114c2 <tcp_output+0x2be>
 80114b4:	4653      	mov	r3, sl
 80114b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80114ba:	4925      	ldr	r1, [pc, #148]	@ (8011550 <tcp_output+0x34c>)
 80114bc:	4658      	mov	r0, fp
 80114be:	f003 f8eb 	bl	8014698 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80114c2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f43f af08 	beq.w	80112da <tcp_output+0xd6>
 80114ca:	8b62      	ldrh	r2, [r4, #26]
 80114cc:	f012 0f44 	tst.w	r2, #68	@ 0x44
 80114d0:	f47f af03 	bne.w	80112da <tcp_output+0xd6>
 80114d4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80114d6:	b143      	cbz	r3, 80114ea <tcp_output+0x2e6>
 80114d8:	6819      	ldr	r1, [r3, #0]
 80114da:	2900      	cmp	r1, #0
 80114dc:	f47f aefd 	bne.w	80112da <tcp_output+0xd6>
 80114e0:	8919      	ldrh	r1, [r3, #8]
 80114e2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80114e4:	4299      	cmp	r1, r3
 80114e6:	f4bf aef8 	bcs.w	80112da <tcp_output+0xd6>
 80114ea:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f43f aef3 	beq.w	80112da <tcp_output+0xd6>
 80114f4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 80114f8:	2b0f      	cmp	r3, #15
 80114fa:	f63f aeee 	bhi.w	80112da <tcp_output+0xd6>
 80114fe:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 8011502:	f47f aeea 	bne.w	80112da <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 8011506:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8011508:	b913      	cbnz	r3, 8011510 <tcp_output+0x30c>
    pcb->unsent_oversize = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011510:	8b63      	ldrh	r3, [r4, #26]
 8011512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011516:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8011518:	2000      	movs	r0, #0
 801151a:	e74e      	b.n	80113ba <tcp_output+0x1b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801151c:	68d2      	ldr	r2, [r2, #12]
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	6850      	ldr	r0, [r2, #4]
 8011522:	f7fb fe30 	bl	800d186 <lwip_htonl>
 8011526:	68e9      	ldr	r1, [r5, #12]
 8011528:	9004      	str	r0, [sp, #16]
 801152a:	6848      	ldr	r0, [r1, #4]
 801152c:	f7fb fe2b 	bl	800d186 <lwip_htonl>
 8011530:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 8011532:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011534:	1a12      	subs	r2, r2, r0
          while (*cur_seg &&
 8011536:	2a00      	cmp	r2, #0
 8011538:	daa6      	bge.n	8011488 <tcp_output+0x284>
            cur_seg = &((*cur_seg)->next );
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	e7a1      	b.n	8011482 <tcp_output+0x27e>
          useg->next = seg;
 801153e:	6035      	str	r5, [r6, #0]
          useg = useg->next;
 8011540:	e780      	b.n	8011444 <tcp_output+0x240>
      tcp_seg_free(seg);
 8011542:	4628      	mov	r0, r5
 8011544:	f7fc ffa2 	bl	800e48c <tcp_seg_free>
 8011548:	e7a1      	b.n	801148e <tcp_output+0x28a>
    return ERR_RTE;
 801154a:	f06f 0003 	mvn.w	r0, #3
 801154e:	e734      	b.n	80113ba <tcp_output+0x1b6>
 8011550:	080179bc 	.word	0x080179bc

08011554 <tcp_rexmit_rto_commit>:
{
 8011554:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011556:	4604      	mov	r4, r0
 8011558:	b930      	cbnz	r0, 8011568 <tcp_rexmit_rto_commit+0x14>
 801155a:	4b09      	ldr	r3, [pc, #36]	@ (8011580 <tcp_rexmit_rto_commit+0x2c>)
 801155c:	f240 629c 	movw	r2, #1692	@ 0x69c
 8011560:	4908      	ldr	r1, [pc, #32]	@ (8011584 <tcp_rexmit_rto_commit+0x30>)
 8011562:	4809      	ldr	r0, [pc, #36]	@ (8011588 <tcp_rexmit_rto_commit+0x34>)
 8011564:	f003 f898 	bl	8014698 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8011568:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 801156c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 801156e:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->nrtx;
 8011570:	bf1c      	itt	ne
 8011572:	3301      	addne	r3, #1
 8011574:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
}
 8011578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801157c:	f7ff be42 	b.w	8011204 <tcp_output>
 8011580:	0801739d 	.word	0x0801739d
 8011584:	080179e6 	.word	0x080179e6
 8011588:	08015927 	.word	0x08015927

0801158c <tcp_rexmit_rto>:
{
 801158c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801158e:	4604      	mov	r4, r0
 8011590:	b930      	cbnz	r0, 80115a0 <tcp_rexmit_rto+0x14>
 8011592:	4b08      	ldr	r3, [pc, #32]	@ (80115b4 <tcp_rexmit_rto+0x28>)
 8011594:	f240 62b1 	movw	r2, #1713	@ 0x6b1
 8011598:	4907      	ldr	r1, [pc, #28]	@ (80115b8 <tcp_rexmit_rto+0x2c>)
 801159a:	4808      	ldr	r0, [pc, #32]	@ (80115bc <tcp_rexmit_rto+0x30>)
 801159c:	f003 f87c 	bl	8014698 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80115a0:	4620      	mov	r0, r4
 80115a2:	f7ff fd0b 	bl	8010fbc <tcp_rexmit_rto_prepare>
 80115a6:	b920      	cbnz	r0, 80115b2 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 80115a8:	4620      	mov	r0, r4
}
 80115aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 80115ae:	f7ff bfd1 	b.w	8011554 <tcp_rexmit_rto_commit>
}
 80115b2:	bd10      	pop	{r4, pc}
 80115b4:	0801739d 	.word	0x0801739d
 80115b8:	08017a09 	.word	0x08017a09
 80115bc:	08015927 	.word	0x08015927

080115c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80115c0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80115c2:	4604      	mov	r4, r0
 80115c4:	b930      	cbnz	r0, 80115d4 <tcp_keepalive+0x14>
 80115c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011604 <tcp_keepalive+0x44>)
 80115c8:	f640 026a 	movw	r2, #2154	@ 0x86a
 80115cc:	490e      	ldr	r1, [pc, #56]	@ (8011608 <tcp_keepalive+0x48>)
 80115ce:	480f      	ldr	r0, [pc, #60]	@ (801160c <tcp_keepalive+0x4c>)
 80115d0:	f003 f862 	bl	8014698 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80115d4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80115d6:	3801      	subs	r0, #1
 80115d8:	f7fb fdd5 	bl	800d186 <lwip_htonl>
 80115dc:	2100      	movs	r1, #0
 80115de:	4602      	mov	r2, r0
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7ff f83f 	bl	8010664 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80115e6:	4605      	mov	r5, r0
 80115e8:	b148      	cbz	r0, 80115fe <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 80115ea:	f7ff f861 	bl	80106b0 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80115ee:	1d23      	adds	r3, r4, #4
 80115f0:	4622      	mov	r2, r4
 80115f2:	4629      	mov	r1, r5
 80115f4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80115f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80115fa:	f7ff b89f 	b.w	801073c <tcp_output_control_segment>
}
 80115fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011602:	bd70      	pop	{r4, r5, r6, pc}
 8011604:	0801739d 	.word	0x0801739d
 8011608:	08017a25 	.word	0x08017a25
 801160c:	08015927 	.word	0x08015927

08011610 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011614:	4606      	mov	r6, r0
 8011616:	b930      	cbnz	r0, 8011626 <tcp_zero_window_probe+0x16>
 8011618:	4b2c      	ldr	r3, [pc, #176]	@ (80116cc <tcp_zero_window_probe+0xbc>)
 801161a:	f640 0295 	movw	r2, #2197	@ 0x895
 801161e:	492c      	ldr	r1, [pc, #176]	@ (80116d0 <tcp_zero_window_probe+0xc0>)
 8011620:	482c      	ldr	r0, [pc, #176]	@ (80116d4 <tcp_zero_window_probe+0xc4>)
 8011622:	f003 f839 	bl	8014698 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011626:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (seg == NULL) {
 8011628:	2d00      	cmp	r5, #0
 801162a:	d049      	beq.n	80116c0 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801162c:	f896 3096 	ldrb.w	r3, [r6, #150]	@ 0x96
 8011630:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->persist_probe;
 8011632:	bf1c      	itt	ne
 8011634:	3301      	addne	r3, #1
 8011636:	f886 3096 	strbne.w	r3, [r6, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801163a:	68eb      	ldr	r3, [r5, #12]
 801163c:	8998      	ldrh	r0, [r3, #12]
 801163e:	f7fb fd9f 	bl	800d180 <lwip_htons>
 8011642:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011646:	68eb      	ldr	r3, [r5, #12]
 8011648:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801164a:	bf18      	it	ne
 801164c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801164e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011650:	bf1c      	itt	ne
 8011652:	fab4 f484 	clzne	r4, r4
 8011656:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011658:	f084 0101 	eor.w	r1, r4, #1
 801165c:	f7ff f802 	bl	8010664 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8011660:	4607      	mov	r7, r0
 8011662:	b380      	cbz	r0, 80116c6 <tcp_zero_window_probe+0xb6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011664:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8011668:	b1fc      	cbz	r4, 80116aa <tcp_zero_window_probe+0x9a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801166a:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 801166e:	2011      	movs	r0, #17
 8011670:	f7fb fd86 	bl	800d180 <lwip_htons>
 8011674:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
 8011678:	b2a4      	uxth	r4, r4
 801167a:	4320      	orrs	r0, r4
 801167c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011680:	68eb      	ldr	r3, [r5, #12]
 8011682:	6858      	ldr	r0, [r3, #4]
 8011684:	f7fb fd7f 	bl	800d186 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011688:	6d33      	ldr	r3, [r6, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801168a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801168c:	1a1b      	subs	r3, r3, r0
 801168e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8011690:	bfb8      	it	lt
 8011692:	6530      	strlt	r0, [r6, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8011694:	4638      	mov	r0, r7
 8011696:	f7ff f80b 	bl	80106b0 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801169a:	1d33      	adds	r3, r6, #4
 801169c:	4632      	mov	r2, r6
 801169e:	4639      	mov	r1, r7
 80116a0:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80116a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80116a6:	f7ff b849 	b.w	801073c <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80116aa:	6868      	ldr	r0, [r5, #4]
 80116ac:	f108 0114 	add.w	r1, r8, #20
 80116b0:	892a      	ldrh	r2, [r5, #8]
 80116b2:	8903      	ldrh	r3, [r0, #8]
 80116b4:	1a9b      	subs	r3, r3, r2
 80116b6:	2201      	movs	r2, #1
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	f7fc fcdf 	bl	800e07c <pbuf_copy_partial>
 80116be:	e7df      	b.n	8011680 <tcp_zero_window_probe+0x70>
    return ERR_OK;
 80116c0:	4628      	mov	r0, r5
}
 80116c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 80116c6:	f04f 30ff 	mov.w	r0, #4294967295
 80116ca:	e7fa      	b.n	80116c2 <tcp_zero_window_probe+0xb2>
 80116cc:	0801739d 	.word	0x0801739d
 80116d0:	08017a40 	.word	0x08017a40
 80116d4:	08015927 	.word	0x08015927

080116d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80116dc:	200a      	movs	r0, #10
{
 80116de:	460e      	mov	r6, r1
 80116e0:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80116e2:	f7fc f88b 	bl	800d7fc <memp_malloc>
  if (timeout == NULL) {
 80116e6:	b938      	cbnz	r0, 80116f8 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80116e8:	4b10      	ldr	r3, [pc, #64]	@ (801172c <sys_timeout_abs+0x54>)
 80116ea:	22be      	movs	r2, #190	@ 0xbe
 80116ec:	4910      	ldr	r1, [pc, #64]	@ (8011730 <sys_timeout_abs+0x58>)
 80116ee:	4811      	ldr	r0, [pc, #68]	@ (8011734 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 80116f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80116f4:	f002 bfd0 	b.w	8014698 <iprintf>
  timeout->next = NULL;
 80116f8:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 80116fa:	4a0f      	ldr	r2, [pc, #60]	@ (8011738 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 80116fc:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 80116fe:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 8011700:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 8011702:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 8011706:	b90b      	cbnz	r3, 801170c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 8011708:	6010      	str	r0, [r2, #0]
}
 801170a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801170c:	6859      	ldr	r1, [r3, #4]
 801170e:	1a61      	subs	r1, r4, r1
 8011710:	2900      	cmp	r1, #0
 8011712:	da01      	bge.n	8011718 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 8011714:	6003      	str	r3, [r0, #0]
 8011716:	e7f7      	b.n	8011708 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011718:	4619      	mov	r1, r3
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	b11b      	cbz	r3, 8011726 <sys_timeout_abs+0x4e>
 801171e:	685a      	ldr	r2, [r3, #4]
 8011720:	1aa2      	subs	r2, r4, r2
 8011722:	2a00      	cmp	r2, #0
 8011724:	daf8      	bge.n	8011718 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 8011726:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8011728:	6008      	str	r0, [r1, #0]
        break;
 801172a:	e7ee      	b.n	801170a <sys_timeout_abs+0x32>
 801172c:	08017a63 	.word	0x08017a63
 8011730:	08017a85 	.word	0x08017a85
 8011734:	08015927 	.word	0x08015927
 8011738:	2000f37c 	.word	0x2000f37c

0801173c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801173c:	b570      	push	{r4, r5, r6, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801173e:	6843      	ldr	r3, [r0, #4]
{
 8011740:	4604      	mov	r4, r0
  cyclic->handler();
 8011742:	4798      	blx	r3

  now = sys_now();
 8011744:	f001 fd09 	bl	801315a <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 8011748:	4b07      	ldr	r3, [pc, #28]	@ (8011768 <lwip_cyclic_timer+0x2c>)
  now = sys_now();
 801174a:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 801174c:	6826      	ldr	r6, [r4, #0]
 801174e:	6818      	ldr	r0, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011750:	4622      	mov	r2, r4
 8011752:	4906      	ldr	r1, [pc, #24]	@ (801176c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 8011754:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011756:	1b43      	subs	r3, r0, r5
 8011758:	2b00      	cmp	r3, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801175a:	bfb8      	it	lt
 801175c:	1970      	addlt	r0, r6, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801175e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011762:	f7ff bfb9 	b.w	80116d8 <sys_timeout_abs>
 8011766:	bf00      	nop
 8011768:	2000f378 	.word	0x2000f378
 801176c:	0801173d 	.word	0x0801173d

08011770 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011770:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
{
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	4604      	mov	r4, r0
 8011778:	460d      	mov	r5, r1
 801177a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801177c:	d306      	bcc.n	801178c <sys_timeout+0x1c>
 801177e:	4b08      	ldr	r3, [pc, #32]	@ (80117a0 <sys_timeout+0x30>)
 8011780:	f240 1229 	movw	r2, #297	@ 0x129
 8011784:	4907      	ldr	r1, [pc, #28]	@ (80117a4 <sys_timeout+0x34>)
 8011786:	4808      	ldr	r0, [pc, #32]	@ (80117a8 <sys_timeout+0x38>)
 8011788:	f002 ff86 	bl	8014698 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 801178c:	f001 fce5 	bl	801315a <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011790:	4632      	mov	r2, r6
 8011792:	4629      	mov	r1, r5
 8011794:	4420      	add	r0, r4
#endif
}
 8011796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801179a:	f7ff bf9d 	b.w	80116d8 <sys_timeout_abs>
 801179e:	bf00      	nop
 80117a0:	08017a63 	.word	0x08017a63
 80117a4:	08017ac2 	.word	0x08017ac2
 80117a8:	08015927 	.word	0x08015927

080117ac <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80117ac:	4b08      	ldr	r3, [pc, #32]	@ (80117d0 <tcp_timer_needed+0x24>)
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	b962      	cbnz	r2, 80117cc <tcp_timer_needed+0x20>
 80117b2:	4a08      	ldr	r2, [pc, #32]	@ (80117d4 <tcp_timer_needed+0x28>)
 80117b4:	6812      	ldr	r2, [r2, #0]
 80117b6:	b912      	cbnz	r2, 80117be <tcp_timer_needed+0x12>
 80117b8:	4a07      	ldr	r2, [pc, #28]	@ (80117d8 <tcp_timer_needed+0x2c>)
 80117ba:	6812      	ldr	r2, [r2, #0]
 80117bc:	b132      	cbz	r2, 80117cc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80117be:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80117c0:	4906      	ldr	r1, [pc, #24]	@ (80117dc <tcp_timer_needed+0x30>)
 80117c2:	20fa      	movs	r0, #250	@ 0xfa
    tcpip_tcp_timer_active = 1;
 80117c4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80117c6:	2200      	movs	r2, #0
 80117c8:	f7ff bfd2 	b.w	8011770 <sys_timeout>
}
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	2000f374 	.word	0x2000f374
 80117d4:	2000f32c 	.word	0x2000f32c
 80117d8:	2000f328 	.word	0x2000f328
 80117dc:	080117e1 	.word	0x080117e1

080117e0 <tcpip_tcp_timer>:
{
 80117e0:	b508      	push	{r3, lr}
  tcp_tmr();
 80117e2:	f7fd faad 	bl	800ed40 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80117e6:	4b08      	ldr	r3, [pc, #32]	@ (8011808 <tcpip_tcp_timer+0x28>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	b913      	cbnz	r3, 80117f2 <tcpip_tcp_timer+0x12>
 80117ec:	4b07      	ldr	r3, [pc, #28]	@ (801180c <tcpip_tcp_timer+0x2c>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	b133      	cbz	r3, 8011800 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80117f2:	2200      	movs	r2, #0
 80117f4:	4906      	ldr	r1, [pc, #24]	@ (8011810 <tcpip_tcp_timer+0x30>)
 80117f6:	20fa      	movs	r0, #250	@ 0xfa
}
 80117f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80117fc:	f7ff bfb8 	b.w	8011770 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8011800:	4a04      	ldr	r2, [pc, #16]	@ (8011814 <tcpip_tcp_timer+0x34>)
 8011802:	6013      	str	r3, [r2, #0]
}
 8011804:	bd08      	pop	{r3, pc}
 8011806:	bf00      	nop
 8011808:	2000f32c 	.word	0x2000f32c
 801180c:	2000f328 	.word	0x2000f328
 8011810:	080117e1 	.word	0x080117e1
 8011814:	2000f374 	.word	0x2000f374

08011818 <sys_timeouts_init>:
{
 8011818:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801181a:	4d08      	ldr	r5, [pc, #32]	@ (801183c <sys_timeouts_init+0x24>)
 801181c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011820:	4c07      	ldr	r4, [pc, #28]	@ (8011840 <sys_timeouts_init+0x28>)
 8011822:	462a      	mov	r2, r5
 8011824:	4621      	mov	r1, r4
 8011826:	f7ff ffa3 	bl	8011770 <sys_timeout>
 801182a:	f105 0208 	add.w	r2, r5, #8
 801182e:	4621      	mov	r1, r4
 8011830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
}
 8011834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011838:	f7ff bf9a 	b.w	8011770 <sys_timeout>
 801183c:	0808ed24 	.word	0x0808ed24
 8011840:	0801173d 	.word	0x0801173d

08011844 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011848:	f001 fc87 	bl	801315a <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801184c:	4e0c      	ldr	r6, [pc, #48]	@ (8011880 <sys_check_timeouts+0x3c>)
  now = sys_now();
 801184e:	4604      	mov	r4, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8011850:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8011884 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 8011854:	6831      	ldr	r1, [r6, #0]
    if (tmptimeout == NULL) {
 8011856:	b189      	cbz	r1, 801187c <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011858:	684b      	ldr	r3, [r1, #4]
 801185a:	1ae2      	subs	r2, r4, r3
 801185c:	2a00      	cmp	r2, #0
 801185e:	db0d      	blt.n	801187c <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 8011860:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011862:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 8011864:	f8c8 3000 	str.w	r3, [r8]
    next_timeout = tmptimeout->next;
 8011868:	6032      	str	r2, [r6, #0]
    arg = tmptimeout->arg;
 801186a:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801186e:	f7fb ffe3 	bl	800d838 <memp_free>
    if (handler != NULL) {
 8011872:	2d00      	cmp	r5, #0
 8011874:	d0ee      	beq.n	8011854 <sys_check_timeouts+0x10>
      handler(arg);
 8011876:	4638      	mov	r0, r7
 8011878:	47a8      	blx	r5
 801187a:	e7eb      	b.n	8011854 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011880:	2000f37c 	.word	0x2000f37c
 8011884:	2000f378 	.word	0x2000f378

08011888 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011888:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801188a:	4c07      	ldr	r4, [pc, #28]	@ (80118a8 <sys_timeouts_sleeptime+0x20>)
 801188c:	6823      	ldr	r3, [r4, #0]
 801188e:	b13b      	cbz	r3, 80118a0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8011890:	f001 fc63 	bl	801315a <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	685b      	ldr	r3, [r3, #4]
    return 0;
 8011898:	1a18      	subs	r0, r3, r0
 801189a:	bf48      	it	mi
 801189c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801189e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80118a0:	f04f 30ff 	mov.w	r0, #4294967295
 80118a4:	e7fb      	b.n	801189e <sys_timeouts_sleeptime+0x16>
 80118a6:	bf00      	nop
 80118a8:	2000f37c 	.word	0x2000f37c

080118ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80118ac:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80118ae:	f002 fdf3 	bl	8014498 <rand>
 80118b2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80118b6:	4b02      	ldr	r3, [pc, #8]	@ (80118c0 <udp_init+0x14>)
 80118b8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80118bc:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 80118be:	bd08      	pop	{r3, pc}
 80118c0:	2000005e 	.word	0x2000005e

080118c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80118c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c8:	4688      	mov	r8, r1
 80118ca:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80118cc:	4605      	mov	r5, r0
 80118ce:	b928      	cbnz	r0, 80118dc <udp_input+0x18>
 80118d0:	4b5e      	ldr	r3, [pc, #376]	@ (8011a4c <udp_input+0x188>)
 80118d2:	22cf      	movs	r2, #207	@ 0xcf
 80118d4:	495e      	ldr	r1, [pc, #376]	@ (8011a50 <udp_input+0x18c>)
 80118d6:	485f      	ldr	r0, [pc, #380]	@ (8011a54 <udp_input+0x190>)
 80118d8:	f002 fede 	bl	8014698 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80118dc:	f1b8 0f00 	cmp.w	r8, #0
 80118e0:	d105      	bne.n	80118ee <udp_input+0x2a>
 80118e2:	4b5a      	ldr	r3, [pc, #360]	@ (8011a4c <udp_input+0x188>)
 80118e4:	22d0      	movs	r2, #208	@ 0xd0
 80118e6:	495c      	ldr	r1, [pc, #368]	@ (8011a58 <udp_input+0x194>)
 80118e8:	485a      	ldr	r0, [pc, #360]	@ (8011a54 <udp_input+0x190>)
 80118ea:	f002 fed5 	bl	8014698 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80118ee:	896b      	ldrh	r3, [r5, #10]
 80118f0:	2b07      	cmp	r3, #7
 80118f2:	d805      	bhi.n	8011900 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80118f4:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80118f6:	b005      	add	sp, #20
 80118f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80118fc:	f7fc b998 	b.w	800dc30 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011900:	4f56      	ldr	r7, [pc, #344]	@ (8011a5c <udp_input+0x198>)
  uncon_pcb = NULL;
 8011902:	2600      	movs	r6, #0
  udphdr = (struct udp_hdr *)p->payload;
 8011904:	686c      	ldr	r4, [r5, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011906:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 8011908:	46b2      	mov	sl, r6
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801190a:	6978      	ldr	r0, [r7, #20]
 801190c:	f000 ff7b 	bl	8012806 <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011910:	f8df b158 	ldr.w	fp, [pc, #344]	@ 8011a6c <udp_input+0x1a8>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011914:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 8011916:	8820      	ldrh	r0, [r4, #0]
 8011918:	f7fb fc32 	bl	800d180 <lwip_htons>
 801191c:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 801191e:	8860      	ldrh	r0, [r4, #2]
 8011920:	f7fb fc2e 	bl	800d180 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011924:	f8db 4000 	ldr.w	r4, [fp]
  dest = lwip_ntohs(udphdr->dest);
 8011928:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801192a:	b93c      	cbnz	r4, 801193c <udp_input+0x78>
  if (pcb != NULL) {
 801192c:	2e00      	cmp	r6, #0
 801192e:	d148      	bne.n	80119c2 <udp_input+0xfe>
  if (for_us) {
 8011930:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	429a      	cmp	r2, r3
 8011938:	d043      	beq.n	80119c2 <udp_input+0xfe>
 801193a:	e7db      	b.n	80118f4 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 801193c:	8a63      	ldrh	r3, [r4, #18]
 801193e:	9a03      	ldr	r2, [sp, #12]
 8011940:	4293      	cmp	r3, r2
 8011942:	d150      	bne.n	80119e6 <udp_input+0x122>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011944:	f1b8 0f00 	cmp.w	r8, #0
 8011948:	d105      	bne.n	8011956 <udp_input+0x92>
 801194a:	4b40      	ldr	r3, [pc, #256]	@ (8011a4c <udp_input+0x188>)
 801194c:	2288      	movs	r2, #136	@ 0x88
 801194e:	4944      	ldr	r1, [pc, #272]	@ (8011a60 <udp_input+0x19c>)
 8011950:	4840      	ldr	r0, [pc, #256]	@ (8011a54 <udp_input+0x190>)
 8011952:	f002 fea1 	bl	8014698 <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011956:	7a22      	ldrb	r2, [r4, #8]
 8011958:	b132      	cbz	r2, 8011968 <udp_input+0xa4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011960:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011962:	b2db      	uxtb	r3, r3
 8011964:	429a      	cmp	r2, r3
 8011966:	d13e      	bne.n	80119e6 <udp_input+0x122>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011968:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801196a:	f1b9 0f00 	cmp.w	r9, #0
 801196e:	d035      	beq.n	80119dc <udp_input+0x118>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011970:	b13b      	cbz	r3, 8011982 <udp_input+0xbe>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011972:	697a      	ldr	r2, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011974:	1c51      	adds	r1, r2, #1
 8011976:	d004      	beq.n	8011982 <udp_input+0xbe>
            ip4_addr_net_eq(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011978:	405a      	eors	r2, r3
 801197a:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801197e:	420a      	tst	r2, r1
 8011980:	d131      	bne.n	80119e6 <udp_input+0x122>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011982:	7c22      	ldrb	r2, [r4, #16]
 8011984:	0752      	lsls	r2, r2, #29
 8011986:	d40f      	bmi.n	80119a8 <udp_input+0xe4>
        if (uncon_pcb == NULL) {
 8011988:	2e00      	cmp	r6, #0
 801198a:	d02f      	beq.n	80119ec <udp_input+0x128>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801198c:	f1b9 0f00 	cmp.w	r9, #0
 8011990:	d00a      	beq.n	80119a8 <udp_input+0xe4>
 8011992:	697a      	ldr	r2, [r7, #20]
 8011994:	3201      	adds	r2, #1
 8011996:	d107      	bne.n	80119a8 <udp_input+0xe4>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_eq(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011998:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801199c:	6831      	ldr	r1, [r6, #0]
 801199e:	4291      	cmp	r1, r2
 80119a0:	d002      	beq.n	80119a8 <udp_input+0xe4>
          uncon_pcb = pcb;
 80119a2:	429a      	cmp	r2, r3
 80119a4:	bf08      	it	eq
 80119a6:	4626      	moveq	r6, r4
      if ((pcb->remote_port == src) &&
 80119a8:	8aa3      	ldrh	r3, [r4, #20]
 80119aa:	9a02      	ldr	r2, [sp, #8]
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d11a      	bne.n	80119e6 <udp_input+0x122>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119b0:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 80119b2:	b113      	cbz	r3, 80119ba <udp_input+0xf6>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119b4:	693a      	ldr	r2, [r7, #16]
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d115      	bne.n	80119e6 <udp_input+0x122>
        if (prev != NULL) {
 80119ba:	f1ba 0f00 	cmp.w	sl, #0
 80119be:	d117      	bne.n	80119f0 <udp_input+0x12c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80119c0:	4626      	mov	r6, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80119c2:	2108      	movs	r1, #8
 80119c4:	4628      	mov	r0, r5
 80119c6:	f7fc f907 	bl	800dbd8 <pbuf_remove_header>
 80119ca:	b1d0      	cbz	r0, 8011a02 <udp_input+0x13e>
      LWIP_ASSERT("pbuf_remove_header failed", 0);
 80119cc:	4b1f      	ldr	r3, [pc, #124]	@ (8011a4c <udp_input+0x188>)
 80119ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80119d2:	4924      	ldr	r1, [pc, #144]	@ (8011a64 <udp_input+0x1a0>)
 80119d4:	481f      	ldr	r0, [pc, #124]	@ (8011a54 <udp_input+0x190>)
 80119d6:	f002 fe5f 	bl	8014698 <iprintf>
 80119da:	e78b      	b.n	80118f4 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d0d0      	beq.n	8011982 <udp_input+0xbe>
 80119e0:	697a      	ldr	r2, [r7, #20]
 80119e2:	4293      	cmp	r3, r2
 80119e4:	d0cd      	beq.n	8011982 <udp_input+0xbe>
    prev = pcb;
 80119e6:	46a2      	mov	sl, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80119e8:	68e4      	ldr	r4, [r4, #12]
 80119ea:	e79e      	b.n	801192a <udp_input+0x66>
          uncon_pcb = pcb;
 80119ec:	4626      	mov	r6, r4
 80119ee:	e7db      	b.n	80119a8 <udp_input+0xe4>
          prev->next = pcb->next;
 80119f0:	68e3      	ldr	r3, [r4, #12]
 80119f2:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 80119f6:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 80119fa:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 80119fe:	60e3      	str	r3, [r4, #12]
  if (pcb != NULL) {
 8011a00:	e7de      	b.n	80119c0 <udp_input+0xfc>
    if (pcb != NULL) {
 8011a02:	b16e      	cbz	r6, 8011a20 <udp_input+0x15c>
      if (pcb->recv != NULL) {
 8011a04:	69b4      	ldr	r4, [r6, #24]
 8011a06:	2c00      	cmp	r4, #0
 8011a08:	f43f af74 	beq.w	80118f4 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011a0c:	9b02      	ldr	r3, [sp, #8]
 8011a0e:	462a      	mov	r2, r5
 8011a10:	4631      	mov	r1, r6
 8011a12:	9300      	str	r3, [sp, #0]
 8011a14:	4b14      	ldr	r3, [pc, #80]	@ (8011a68 <udp_input+0x1a4>)
 8011a16:	69f0      	ldr	r0, [r6, #28]
 8011a18:	47a0      	blx	r4
}
 8011a1a:	b005      	add	sp, #20
 8011a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011a20:	f1b9 0f00 	cmp.w	r9, #0
 8011a24:	f47f af66 	bne.w	80118f4 <udp_input+0x30>
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a2e:	2be0      	cmp	r3, #224	@ 0xe0
 8011a30:	f43f af60 	beq.w	80118f4 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011a34:	89b9      	ldrh	r1, [r7, #12]
 8011a36:	4628      	mov	r0, r5
 8011a38:	3108      	adds	r1, #8
 8011a3a:	b209      	sxth	r1, r1
 8011a3c:	f7fc f8f0 	bl	800dc20 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011a40:	2103      	movs	r1, #3
 8011a42:	4628      	mov	r0, r5
 8011a44:	f000 fd4c 	bl	80124e0 <icmp_dest_unreach>
 8011a48:	e754      	b.n	80118f4 <udp_input+0x30>
 8011a4a:	bf00      	nop
 8011a4c:	08017af8 	.word	0x08017af8
 8011a50:	08017b15 	.word	0x08017b15
 8011a54:	08015927 	.word	0x08015927
 8011a58:	08017b2d 	.word	0x08017b2d
 8011a5c:	2000b528 	.word	0x2000b528
 8011a60:	08017b46 	.word	0x08017b46
 8011a64:	0801677a 	.word	0x0801677a
 8011a68:	2000b538 	.word	0x2000b538
 8011a6c:	2000f380 	.word	0x2000f380

08011a70 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8011a70:	4b2c      	ldr	r3, [pc, #176]	@ (8011b24 <udp_bind+0xb4>)
{
 8011a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8011a76:	2900      	cmp	r1, #0
 8011a78:	bf14      	ite	ne
 8011a7a:	460f      	movne	r7, r1
 8011a7c:	461f      	moveq	r7, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d04d      	beq.n	8011b1e <udp_bind+0xae>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a82:	4e29      	ldr	r6, [pc, #164]	@ (8011b28 <udp_bind+0xb8>)
 8011a84:	6834      	ldr	r4, [r6, #0]
 8011a86:	4621      	mov	r1, r4
 8011a88:	b959      	cbnz	r1, 8011aa2 <udp_bind+0x32>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011a8a:	b182      	cbz	r2, 8011aae <udp_bind+0x3e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011a8c:	683d      	ldr	r5, [r7, #0]
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a8e:	4623      	mov	r3, r4
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d130      	bne.n	8011af6 <udp_bind+0x86>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011a94:	683b      	ldr	r3, [r7, #0]

  pcb->local_port = port;
 8011a96:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011a98:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011a9a:	2900      	cmp	r1, #0
 8011a9c:	d03c      	beq.n	8011b18 <udp_bind+0xa8>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	e025      	b.n	8011aee <udp_bind+0x7e>
    if (pcb == ipcb) {
 8011aa2:	4281      	cmp	r1, r0
 8011aa4:	d001      	beq.n	8011aaa <udp_bind+0x3a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011aa6:	68c9      	ldr	r1, [r1, #12]
 8011aa8:	e7ee      	b.n	8011a88 <udp_bind+0x18>
      rebind = 1;
 8011aaa:	2101      	movs	r1, #1
 8011aac:	e7ed      	b.n	8011a8a <udp_bind+0x1a>
 8011aae:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8011b2c <udp_bind+0xbc>
  if (port == 0) {
 8011ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011ab6:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 8011aba:	f8bc 3000 	ldrh.w	r3, [ip]
 8011abe:	4573      	cmp	r3, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ac0:	4625      	mov	r5, r4
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011ac2:	bf16      	itet	ne
 8011ac4:	3301      	addne	r3, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011ac6:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011aca:	b29b      	uxthne	r3, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011acc:	b90d      	cbnz	r5, 8011ad2 <udp_bind+0x62>
  return udp_port;
 8011ace:	461a      	mov	r2, r3
 8011ad0:	e007      	b.n	8011ae2 <udp_bind+0x72>
    if (pcb->local_port == udp_port) {
 8011ad2:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 8011ad6:	4598      	cmp	r8, r3
 8011ad8:	d10b      	bne.n	8011af2 <udp_bind+0x82>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011ada:	3a01      	subs	r2, #1
 8011adc:	b292      	uxth	r2, r2
 8011ade:	2a00      	cmp	r2, #0
 8011ae0:	d1ed      	bne.n	8011abe <udp_bind+0x4e>
 8011ae2:	f8ac 3000 	strh.w	r3, [ip]
    if (port == 0) {
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	d1d4      	bne.n	8011a94 <udp_bind+0x24>
      return ERR_USE;
 8011aea:	f06f 0007 	mvn.w	r0, #7
}
 8011aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011af2:	68ed      	ldr	r5, [r5, #12]
 8011af4:	e7ea      	b.n	8011acc <udp_bind+0x5c>
      if (pcb != ipcb) {
 8011af6:	4283      	cmp	r3, r0
 8011af8:	d00c      	beq.n	8011b14 <udp_bind+0xa4>
          if ((ipcb->local_port == port) &&
 8011afa:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8011afe:	4594      	cmp	ip, r2
 8011b00:	d108      	bne.n	8011b14 <udp_bind+0xa4>
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 8011b02:	f8d3 c000 	ldr.w	ip, [r3]
          if ((ipcb->local_port == port) &&
 8011b06:	45ac      	cmp	ip, r5
 8011b08:	d0ef      	beq.n	8011aea <udp_bind+0x7a>
              ip_addr_isany(ipaddr) ||
 8011b0a:	2d00      	cmp	r5, #0
 8011b0c:	d0ed      	beq.n	8011aea <udp_bind+0x7a>
              ip_addr_isany(&ipcb->local_ip))) ||
 8011b0e:	f1bc 0f00 	cmp.w	ip, #0
 8011b12:	d0ea      	beq.n	8011aea <udp_bind+0x7a>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	e7bb      	b.n	8011a90 <udp_bind+0x20>
    pcb->next = udp_pcbs;
 8011b18:	60c4      	str	r4, [r0, #12]
    udp_pcbs = pcb;
 8011b1a:	6030      	str	r0, [r6, #0]
 8011b1c:	e7bf      	b.n	8011a9e <udp_bind+0x2e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b1e:	f06f 000f 	mvn.w	r0, #15
 8011b22:	e7e4      	b.n	8011aee <udp_bind+0x7e>
 8011b24:	0808ed34 	.word	0x0808ed34
 8011b28:	2000f380 	.word	0x2000f380
 8011b2c:	2000005e 	.word	0x2000005e

08011b30 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011b30:	b108      	cbz	r0, 8011b36 <udp_recv+0x6>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8011b32:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 8011b36:	4770      	bx	lr

08011b38 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011b38:	4601      	mov	r1, r0
 8011b3a:	b198      	cbz	r0, 8011b64 <udp_remove+0x2c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8011b68 <udp_remove+0x30>)
 8011b3e:	6813      	ldr	r3, [r2, #0]
 8011b40:	4283      	cmp	r3, r0
 8011b42:	d104      	bne.n	8011b4e <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011b44:	68c3      	ldr	r3, [r0, #12]
 8011b46:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011b48:	2000      	movs	r0, #0
 8011b4a:	f7fb be75 	b.w	800d838 <memp_free>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d0fa      	beq.n	8011b48 <udp_remove+0x10>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011b52:	461a      	mov	r2, r3
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d0f6      	beq.n	8011b48 <udp_remove+0x10>
 8011b5a:	428b      	cmp	r3, r1
 8011b5c:	d1f9      	bne.n	8011b52 <udp_remove+0x1a>
        pcb2->next = pcb->next;
 8011b5e:	68cb      	ldr	r3, [r1, #12]
 8011b60:	60d3      	str	r3, [r2, #12]
        break;
 8011b62:	e7f1      	b.n	8011b48 <udp_remove+0x10>
}
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	2000f380 	.word	0x2000f380

08011b6c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011b6c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011b6e:	2000      	movs	r0, #0
 8011b70:	f7fb fe44 	bl	800d7fc <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011b74:	4604      	mov	r4, r0
 8011b76:	b128      	cbz	r0, 8011b84 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011b78:	2220      	movs	r2, #32
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	f002 ff92 	bl	8014aa4 <memset>
    pcb->ttl = UDP_TTL;
 8011b80:	23ff      	movs	r3, #255	@ 0xff
 8011b82:	72e3      	strb	r3, [r4, #11]
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb_tci_init(pcb);
  }
  return pcb;
}
 8011b84:	4620      	mov	r0, r4
 8011b86:	bd10      	pop	{r4, pc}

08011b88 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8011b88:	f7ff bff0 	b.w	8011b6c <udp_new>

08011b8c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011b8c:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011b8e:	b138      	cbz	r0, 8011ba0 <udp_netif_ip_addr_changed+0x14>
 8011b90:	6803      	ldr	r3, [r0, #0]
 8011b92:	b12b      	cbz	r3, 8011ba0 <udp_netif_ip_addr_changed+0x14>
 8011b94:	b121      	cbz	r1, 8011ba0 <udp_netif_ip_addr_changed+0x14>
 8011b96:	680b      	ldr	r3, [r1, #0]
 8011b98:	b113      	cbz	r3, 8011ba0 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011b9a:	4b06      	ldr	r3, [pc, #24]	@ (8011bb4 <udp_netif_ip_addr_changed+0x28>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	b903      	cbnz	r3, 8011ba2 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8011ba0:	bd10      	pop	{r4, pc}
      if (ip_addr_eq(&upcb->local_ip, old_addr)) {
 8011ba2:	681c      	ldr	r4, [r3, #0]
 8011ba4:	6802      	ldr	r2, [r0, #0]
 8011ba6:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011ba8:	bf04      	itt	eq
 8011baa:	680a      	ldreq	r2, [r1, #0]
 8011bac:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	e7f5      	b.n	8011b9e <udp_netif_ip_addr_changed+0x12>
 8011bb2:	bf00      	nop
 8011bb4:	2000f380 	.word	0x2000f380

08011bb8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011bb8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011bba:	2618      	movs	r6, #24
 8011bbc:	4c07      	ldr	r4, [pc, #28]	@ (8011bdc <etharp_free_entry+0x24>)
{
 8011bbe:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8011bc0:	4346      	muls	r6, r0
 8011bc2:	59a0      	ldr	r0, [r4, r6]
 8011bc4:	b118      	cbz	r0, 8011bce <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011bc6:	f7fc f833 	bl	800dc30 <pbuf_free>
    arp_table[i].q = NULL;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011bce:	2318      	movs	r3, #24
 8011bd0:	fb03 4405 	mla	r4, r3, r5, r4
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011bd8:	bd70      	pop	{r4, r5, r6, pc}
 8011bda:	bf00      	nop
 8011bdc:	2000f388 	.word	0x2000f388

08011be0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011be6:	f04f 0e0a 	mov.w	lr, #10
{
 8011bea:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011bec:	4699      	mov	r9, r3
 8011bee:	469b      	mov	fp, r3
 8011bf0:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8011bf2:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011bf4:	4677      	mov	r7, lr
 8011bf6:	46f0      	mov	r8, lr
{
 8011bf8:	e9cd 2100 	strd	r2, r1, [sp]
 8011bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8011ce8 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011bfe:	2c0a      	cmp	r4, #10
 8011c00:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 8011c02:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011c06:	d11a      	bne.n	8011c3e <etharp_find_entry+0x5e>
 8011c08:	f1ba 0f00 	cmp.w	sl, #0
 8011c0c:	d05e      	beq.n	8011ccc <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_eq(ipaddr, &arp_table[i].ipaddr)
 8011c0e:	b155      	cbz	r5, 8011c26 <etharp_find_entry+0x46>
 8011c10:	6829      	ldr	r1, [r5, #0]
 8011c12:	6856      	ldr	r6, [r2, #4]
 8011c14:	42b1      	cmp	r1, r6
 8011c16:	d106      	bne.n	8011c26 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011c18:	9900      	ldr	r1, [sp, #0]
 8011c1a:	2900      	cmp	r1, #0
 8011c1c:	d049      	beq.n	8011cb2 <etharp_find_entry+0xd2>
 8011c1e:	6891      	ldr	r1, [r2, #8]
 8011c20:	9e00      	ldr	r6, [sp, #0]
 8011c22:	42b1      	cmp	r1, r6
 8011c24:	d045      	beq.n	8011cb2 <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011c26:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8011c2a:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8011c2c:	d149      	bne.n	8011cc2 <etharp_find_entry+0xe2>
        if (arp_table[i].q != NULL) {
 8011c2e:	6816      	ldr	r6, [r2, #0]
 8011c30:	2e00      	cmp	r6, #0
 8011c32:	d041      	beq.n	8011cb8 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 8011c34:	458c      	cmp	ip, r1
 8011c36:	d805      	bhi.n	8011c44 <etharp_find_entry+0x64>
            old_queue = i;
            age_queue = arp_table[i].ctime;
 8011c38:	468c      	mov	ip, r1
            old_queue = i;
 8011c3a:	4686      	mov	lr, r0
 8011c3c:	e002      	b.n	8011c44 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011c3e:	f1ba 0f00 	cmp.w	sl, #0
 8011c42:	d1e4      	bne.n	8011c0e <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c44:	3301      	adds	r3, #1
 8011c46:	3218      	adds	r2, #24
 8011c48:	2b0a      	cmp	r3, #10
 8011c4a:	d1d8      	bne.n	8011bfe <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011c4c:	9b01      	ldr	r3, [sp, #4]
 8011c4e:	2b01      	cmp	r3, #1
 8011c50:	d146      	bne.n	8011ce0 <etharp_find_entry+0x100>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011c52:	2c09      	cmp	r4, #9
 8011c54:	dd12      	ble.n	8011c7c <etharp_find_entry+0x9c>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011c56:	2f09      	cmp	r7, #9
 8011c58:	dc3a      	bgt.n	8011cd0 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011c5a:	2318      	movs	r3, #24
 8011c5c:	4a22      	ldr	r2, [pc, #136]	@ (8011ce8 <etharp_find_entry+0x108>)
 8011c5e:	437b      	muls	r3, r7
 8011c60:	58d3      	ldr	r3, [r2, r3]
 8011c62:	b133      	cbz	r3, 8011c72 <etharp_find_entry+0x92>
 8011c64:	4b21      	ldr	r3, [pc, #132]	@ (8011cec <etharp_find_entry+0x10c>)
 8011c66:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8011c6a:	4921      	ldr	r1, [pc, #132]	@ (8011cf0 <etharp_find_entry+0x110>)
 8011c6c:	4821      	ldr	r0, [pc, #132]	@ (8011cf4 <etharp_find_entry+0x114>)
 8011c6e:	f002 fd13 	bl	8014698 <iprintf>
            old_stable = i;
 8011c72:	46b8      	mov	r8, r7
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8011c74:	4644      	mov	r4, r8
 8011c76:	4640      	mov	r0, r8
 8011c78:	f7ff ff9e 	bl	8011bb8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011c7c:	4f1a      	ldr	r7, [pc, #104]	@ (8011ce8 <etharp_find_entry+0x108>)
 8011c7e:	2318      	movs	r3, #24
 8011c80:	fb03 7304 	mla	r3, r3, r4, r7
 8011c84:	7d1b      	ldrb	r3, [r3, #20]
 8011c86:	b133      	cbz	r3, 8011c96 <etharp_find_entry+0xb6>
 8011c88:	4b18      	ldr	r3, [pc, #96]	@ (8011cec <etharp_find_entry+0x10c>)
 8011c8a:	f240 1285 	movw	r2, #389	@ 0x185
 8011c8e:	491a      	ldr	r1, [pc, #104]	@ (8011cf8 <etharp_find_entry+0x118>)
 8011c90:	4818      	ldr	r0, [pc, #96]	@ (8011cf4 <etharp_find_entry+0x114>)
 8011c92:	f002 fd01 	bl	8014698 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011c96:	b125      	cbz	r5, 8011ca2 <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011c98:	2318      	movs	r3, #24
 8011c9a:	682a      	ldr	r2, [r5, #0]
 8011c9c:	fb03 7304 	mla	r3, r3, r4, r7
 8011ca0:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8011ca2:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011ca4:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8011ca6:	fb03 7704 	mla	r7, r3, r4, r7
 8011caa:	2300      	movs	r3, #0
 8011cac:	827b      	strh	r3, [r7, #18]
  arp_table[i].netif = netif;
 8011cae:	9b00      	ldr	r3, [sp, #0]
 8011cb0:	60bb      	str	r3, [r7, #8]
}
 8011cb2:	b003      	add	sp, #12
 8011cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8011cb8:	458b      	cmp	fp, r1
 8011cba:	d8c3      	bhi.n	8011c44 <etharp_find_entry+0x64>
            age_pending = arp_table[i].ctime;
 8011cbc:	468b      	mov	fp, r1
            old_pending = i;
 8011cbe:	4680      	mov	r8, r0
 8011cc0:	e7c0      	b.n	8011c44 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8011cc2:	4589      	cmp	r9, r1
 8011cc4:	d8be      	bhi.n	8011c44 <etharp_find_entry+0x64>
            age_stable = arp_table[i].ctime;
 8011cc6:	4689      	mov	r9, r1
            old_stable = i;
 8011cc8:	4607      	mov	r7, r0
 8011cca:	e7bb      	b.n	8011c44 <etharp_find_entry+0x64>
      empty = i;
 8011ccc:	4604      	mov	r4, r0
 8011cce:	e7b9      	b.n	8011c44 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011cd0:	f1b8 0f09 	cmp.w	r8, #9
 8011cd4:	ddce      	ble.n	8011c74 <etharp_find_entry+0x94>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011cd6:	f1be 0f09 	cmp.w	lr, #9
 8011cda:	dc01      	bgt.n	8011ce0 <etharp_find_entry+0x100>
      i = old_queue;
 8011cdc:	46f0      	mov	r8, lr
 8011cde:	e7c9      	b.n	8011c74 <etharp_find_entry+0x94>
    return (s16_t)ERR_MEM;
 8011ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce4:	e7e5      	b.n	8011cb2 <etharp_find_entry+0xd2>
 8011ce6:	bf00      	nop
 8011ce8:	2000f388 	.word	0x2000f388
 8011cec:	08017b6b 	.word	0x08017b6b
 8011cf0:	08017b90 	.word	0x08017b90
 8011cf4:	08015927 	.word	0x08015927
 8011cf8:	08017ba7 	.word	0x08017ba7

08011cfc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011cfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d00:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8011d04:	4688      	mov	r8, r1
 8011d06:	4691      	mov	r9, r2
 8011d08:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011d0a:	4607      	mov	r7, r0
 8011d0c:	b930      	cbnz	r0, 8011d1c <etharp_raw+0x20>
 8011d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8011dc4 <etharp_raw+0xc8>)
 8011d10:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 8011d14:	492c      	ldr	r1, [pc, #176]	@ (8011dc8 <etharp_raw+0xcc>)
 8011d16:	482d      	ldr	r0, [pc, #180]	@ (8011dcc <etharp_raw+0xd0>)
 8011d18:	f002 fcbe 	bl	8014698 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011d1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d20:	211c      	movs	r1, #28
 8011d22:	200e      	movs	r0, #14
 8011d24:	f7fb ffee 	bl	800dd04 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011d28:	4605      	mov	r5, r0
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	d047      	beq.n	8011dbe <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011d2e:	8943      	ldrh	r3, [r0, #10]
 8011d30:	2b1b      	cmp	r3, #27
 8011d32:	d806      	bhi.n	8011d42 <etharp_raw+0x46>
 8011d34:	4b23      	ldr	r3, [pc, #140]	@ (8011dc4 <etharp_raw+0xc8>)
 8011d36:	f240 426b 	movw	r2, #1131	@ 0x46b
 8011d3a:	4925      	ldr	r1, [pc, #148]	@ (8011dd0 <etharp_raw+0xd4>)
 8011d3c:	4823      	ldr	r0, [pc, #140]	@ (8011dcc <etharp_raw+0xd0>)
 8011d3e:	f002 fcab 	bl	8014698 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011d42:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011d44:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8011d48:	f7fb fa1a 	bl	800d180 <lwip_htons>
 8011d4c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011d52:	2b06      	cmp	r3, #6
 8011d54:	d006      	beq.n	8011d64 <etharp_raw+0x68>
 8011d56:	4b1b      	ldr	r3, [pc, #108]	@ (8011dc4 <etharp_raw+0xc8>)
 8011d58:	f240 4272 	movw	r2, #1138	@ 0x472
 8011d5c:	491d      	ldr	r1, [pc, #116]	@ (8011dd4 <etharp_raw+0xd8>)
 8011d5e:	481b      	ldr	r0, [pc, #108]	@ (8011dcc <etharp_raw+0xd0>)
 8011d60:	f002 fc9a 	bl	8014698 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011d64:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011d66:	4642      	mov	r2, r8
 8011d68:	4629      	mov	r1, r5
 8011d6a:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011d6c:	60a3      	str	r3, [r4, #8]
 8011d6e:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011d70:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011d72:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011d74:	f8da 3000 	ldr.w	r3, [sl]
 8011d78:	f8c4 3012 	str.w	r3, [r4, #18]
 8011d7c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011d80:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d8c:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011d8e:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011d90:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011d92:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011d94:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011d96:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011d98:	2308      	movs	r3, #8
 8011d9a:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8011d9c:	2306      	movs	r3, #6
 8011d9e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011da0:	2304      	movs	r3, #4
 8011da2:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011da4:	f640 0306 	movw	r3, #2054	@ 0x806
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	464b      	mov	r3, r9
 8011dac:	f001 f99c 	bl	80130e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011db0:	4628      	mov	r0, r5
 8011db2:	f7fb ff3d 	bl	800dc30 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8011db6:	4630      	mov	r0, r6
}
 8011db8:	b002      	add	sp, #8
 8011dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8011dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc2:	e7f9      	b.n	8011db8 <etharp_raw+0xbc>
 8011dc4:	08017b6b 	.word	0x08017b6b
 8011dc8:	08015919 	.word	0x08015919
 8011dcc:	08015927 	.word	0x08015927
 8011dd0:	08017bd0 	.word	0x08017bd0
 8011dd4:	08017c01 	.word	0x08017c01

08011dd8 <etharp_cleanup_netif>:
{
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	4606      	mov	r6, r0
 8011ddc:	4d07      	ldr	r5, [pc, #28]	@ (8011dfc <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dde:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011de0:	7d2b      	ldrb	r3, [r5, #20]
 8011de2:	b12b      	cbz	r3, 8011df0 <etharp_cleanup_netif+0x18>
 8011de4:	68ab      	ldr	r3, [r5, #8]
 8011de6:	42b3      	cmp	r3, r6
 8011de8:	d102      	bne.n	8011df0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8011dea:	4620      	mov	r0, r4
 8011dec:	f7ff fee4 	bl	8011bb8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011df0:	3401      	adds	r4, #1
 8011df2:	3518      	adds	r5, #24
 8011df4:	2c0a      	cmp	r4, #10
 8011df6:	d1f3      	bne.n	8011de0 <etharp_cleanup_netif+0x8>
}
 8011df8:	bd70      	pop	{r4, r5, r6, pc}
 8011dfa:	bf00      	nop
 8011dfc:	2000f388 	.word	0x2000f388

08011e00 <etharp_input>:
{
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	4607      	mov	r7, r0
 8011e06:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e08:	460c      	mov	r4, r1
 8011e0a:	2900      	cmp	r1, #0
 8011e0c:	f000 8093 	beq.w	8011f36 <etharp_input+0x136>
  hdr = (struct etharp_hdr *)p->payload;
 8011e10:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e12:	882b      	ldrh	r3, [r5, #0]
 8011e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e18:	d108      	bne.n	8011e2c <etharp_input+0x2c>
 8011e1a:	792b      	ldrb	r3, [r5, #4]
 8011e1c:	2b06      	cmp	r3, #6
 8011e1e:	d105      	bne.n	8011e2c <etharp_input+0x2c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e20:	796b      	ldrb	r3, [r5, #5]
 8011e22:	2b04      	cmp	r3, #4
 8011e24:	d102      	bne.n	8011e2c <etharp_input+0x2c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e26:	886b      	ldrh	r3, [r5, #2]
 8011e28:	2b08      	cmp	r3, #8
 8011e2a:	d005      	beq.n	8011e38 <etharp_input+0x38>
  pbuf_free(p);
 8011e2c:	4638      	mov	r0, r7
}
 8011e2e:	b009      	add	sp, #36	@ 0x24
 8011e30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011e34:	f7fb befc 	b.w	800dc30 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e38:	f8d5 600e 	ldr.w	r6, [r5, #14]
 8011e3c:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e40:	684b      	ldr	r3, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011e42:	69aa      	ldr	r2, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e44:	9607      	str	r6, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e46:	b92b      	cbnz	r3, 8011e54 <etharp_input+0x54>
    from_us = 0;
 8011e48:	469a      	mov	sl, r3
 8011e4a:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e4e:	f04f 0b02 	mov.w	fp, #2
 8011e52:	e009      	b.n	8011e68 <etharp_input+0x68>
    from_us = (u8_t)ip4_addr_eq(&sipaddr, netif_ip4_addr(netif));
 8011e54:	1b99      	subs	r1, r3, r6
 8011e56:	f1d1 0a00 	rsbs	sl, r1, #0
 8011e5a:	eb4a 0a01 	adc.w	sl, sl, r1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d1f3      	bne.n	8011e4a <etharp_input+0x4a>
 8011e62:	f04f 0901 	mov.w	r9, #1
 8011e66:	46cb      	mov	fp, r9
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011e68:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011e6c:	2b06      	cmp	r3, #6
 8011e6e:	d006      	beq.n	8011e7e <etharp_input+0x7e>
 8011e70:	4b32      	ldr	r3, [pc, #200]	@ (8011f3c <etharp_input+0x13c>)
 8011e72:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011e76:	4932      	ldr	r1, [pc, #200]	@ (8011f40 <etharp_input+0x140>)
 8011e78:	4832      	ldr	r0, [pc, #200]	@ (8011f44 <etharp_input+0x144>)
 8011e7a:	f002 fc0d 	bl	8014698 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8011e7e:	2e00      	cmp	r6, #0
 8011e80:	d040      	beq.n	8011f04 <etharp_input+0x104>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e82:	4621      	mov	r1, r4
 8011e84:	4630      	mov	r0, r6
 8011e86:	f000 fcbe 	bl	8012806 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8011e8a:	9005      	str	r0, [sp, #20]
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d139      	bne.n	8011f04 <etharp_input+0x104>
      ip4_addr_ismulticast(ipaddr)) {
 8011e90:	f006 06f0 	and.w	r6, r6, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e94:	2ee0      	cmp	r6, #224	@ 0xe0
 8011e96:	d035      	beq.n	8011f04 <etharp_input+0x104>
  i = etharp_find_entry(ipaddr, flags, netif);
 8011e98:	4622      	mov	r2, r4
 8011e9a:	4659      	mov	r1, fp
 8011e9c:	a807      	add	r0, sp, #28
 8011e9e:	f7ff fe9f 	bl	8011be0 <etharp_find_entry>
  if (i < 0) {
 8011ea2:	1e02      	subs	r2, r0, #0
 8011ea4:	db2e      	blt.n	8011f04 <etharp_input+0x104>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011ea6:	2018      	movs	r0, #24
 8011ea8:	4e27      	ldr	r6, [pc, #156]	@ (8011f48 <etharp_input+0x148>)
 8011eaa:	f04f 0e02 	mov.w	lr, #2
  arp_table[i].ctime = 0;
 8011eae:	9b05      	ldr	r3, [sp, #20]
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011eb0:	fb00 f102 	mul.w	r1, r0, r2
 8011eb4:	eb06 0c01 	add.w	ip, r6, r1
 8011eb8:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011ebc:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8011ec0:	f8cc 4008 	str.w	r4, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011ec4:	fb12 e200 	smlabb	r2, r2, r0, lr
 8011ec8:	f8d8 0000 	ldr.w	r0, [r8]
 8011ecc:	eb02 0e06 	add.w	lr, r2, r6
 8011ed0:	50b0      	str	r0, [r6, r2]
 8011ed2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011ed6:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 8011eda:	f856 b001 	ldr.w	fp, [r6, r1]
  arp_table[i].ctime = 0;
 8011ede:	f8ac 3012 	strh.w	r3, [ip, #18]
  if (arp_table[i].q != NULL) {
 8011ee2:	f1bb 0f00 	cmp.w	fp, #0
 8011ee6:	d00d      	beq.n	8011f04 <etharp_input+0x104>
    arp_table[i].q = NULL;
 8011ee8:	5073      	str	r3, [r6, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011eea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011eee:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 8011ef2:	4659      	mov	r1, fp
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	4643      	mov	r3, r8
 8011efa:	f001 f8f5 	bl	80130e8 <ethernet_output>
    pbuf_free(p);
 8011efe:	4658      	mov	r0, fp
 8011f00:	f7fb fe96 	bl	800dc30 <pbuf_free>
  switch (hdr->opcode) {
 8011f04:	88eb      	ldrh	r3, [r5, #6]
 8011f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f0a:	d18f      	bne.n	8011e2c <etharp_input+0x2c>
      if (for_us && !from_us) {
 8011f0c:	f1b9 0f00 	cmp.w	r9, #0
 8011f10:	d08c      	beq.n	8011e2c <etharp_input+0x2c>
 8011f12:	f1ba 0f00 	cmp.w	sl, #0
 8011f16:	d189      	bne.n	8011e2c <etharp_input+0x2c>
        etharp_raw(netif,
 8011f18:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011f1a:	f104 0326 	add.w	r3, r4, #38	@ 0x26
        etharp_raw(netif,
 8011f1e:	4620      	mov	r0, r4
 8011f20:	9203      	str	r2, [sp, #12]
 8011f22:	aa07      	add	r2, sp, #28
 8011f24:	4619      	mov	r1, r3
 8011f26:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011f2a:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8011f2c:	9200      	str	r2, [sp, #0]
 8011f2e:	4642      	mov	r2, r8
 8011f30:	f7ff fee4 	bl	8011cfc <etharp_raw>
 8011f34:	e77a      	b.n	8011e2c <etharp_input+0x2c>
}
 8011f36:	b009      	add	sp, #36	@ 0x24
 8011f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f3c:	08017b6b 	.word	0x08017b6b
 8011f40:	08017c61 	.word	0x08017c61
 8011f44:	08015927 	.word	0x08015927
 8011f48:	2000f388 	.word	0x2000f388

08011f4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f4e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011f50:	2401      	movs	r4, #1
 8011f52:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011f56:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011f58:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8011f5c:	4904      	ldr	r1, [pc, #16]	@ (8011f70 <etharp_request+0x24>)
 8011f5e:	9200      	str	r2, [sp, #0]
 8011f60:	9101      	str	r1, [sp, #4]
 8011f62:	4619      	mov	r1, r3
 8011f64:	4a03      	ldr	r2, [pc, #12]	@ (8011f74 <etharp_request+0x28>)
 8011f66:	f7ff fec9 	bl	8011cfc <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8011f6a:	b004      	add	sp, #16
 8011f6c:	bd10      	pop	{r4, pc}
 8011f6e:	bf00      	nop
 8011f70:	0808ed38 	.word	0x0808ed38
 8011f74:	0808ed3e 	.word	0x0808ed3e

08011f78 <etharp_tmr>:
{
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4c12      	ldr	r4, [pc, #72]	@ (8011fc4 <etharp_tmr+0x4c>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f7c:	2500      	movs	r5, #0
    u8_t state = arp_table[i].state;
 8011f7e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8011f80:	b16a      	cbz	r2, 8011f9e <etharp_tmr+0x26>
      arp_table[i].ctime++;
 8011f82:	8a63      	ldrh	r3, [r4, #18]
 8011f84:	3301      	adds	r3, #1
 8011f86:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011f88:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 8011f8c:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011f8e:	d203      	bcs.n	8011f98 <etharp_tmr+0x20>
 8011f90:	2a01      	cmp	r2, #1
 8011f92:	d109      	bne.n	8011fa8 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011f94:	2b04      	cmp	r3, #4
 8011f96:	d90c      	bls.n	8011fb2 <etharp_tmr+0x3a>
        etharp_free_entry(i);
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f7ff fe0d 	bl	8011bb8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f9e:	3501      	adds	r5, #1
 8011fa0:	3418      	adds	r4, #24
 8011fa2:	2d0a      	cmp	r5, #10
 8011fa4:	d1eb      	bne.n	8011f7e <etharp_tmr+0x6>
}
 8011fa6:	bd38      	pop	{r3, r4, r5, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011fa8:	2a03      	cmp	r2, #3
 8011faa:	d107      	bne.n	8011fbc <etharp_tmr+0x44>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011fac:	2304      	movs	r3, #4
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011fae:	7523      	strb	r3, [r4, #20]
 8011fb0:	e7f5      	b.n	8011f9e <etharp_tmr+0x26>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011fb2:	1d21      	adds	r1, r4, #4
 8011fb4:	68a0      	ldr	r0, [r4, #8]
 8011fb6:	f7ff ffc9 	bl	8011f4c <etharp_request>
 8011fba:	e7f0      	b.n	8011f9e <etharp_tmr+0x26>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011fbc:	2a04      	cmp	r2, #4
 8011fbe:	d1ee      	bne.n	8011f9e <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011fc0:	2302      	movs	r3, #2
 8011fc2:	e7f4      	b.n	8011fae <etharp_tmr+0x36>
 8011fc4:	2000f388 	.word	0x2000f388

08011fc8 <etharp_output_to_arp_index>:
{
 8011fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011fcc:	4f24      	ldr	r7, [pc, #144]	@ (8012060 <etharp_output_to_arp_index+0x98>)
 8011fce:	2318      	movs	r3, #24
{
 8011fd0:	4606      	mov	r6, r0
 8011fd2:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011fd4:	fb03 7302 	mla	r3, r3, r2, r7
{
 8011fd8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011fda:	7d1b      	ldrb	r3, [r3, #20]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d806      	bhi.n	8011fee <etharp_output_to_arp_index+0x26>
 8011fe0:	4b20      	ldr	r3, [pc, #128]	@ (8012064 <etharp_output_to_arp_index+0x9c>)
 8011fe2:	f240 22ef 	movw	r2, #751	@ 0x2ef
 8011fe6:	4920      	ldr	r1, [pc, #128]	@ (8012068 <etharp_output_to_arp_index+0xa0>)
 8011fe8:	4820      	ldr	r0, [pc, #128]	@ (801206c <etharp_output_to_arp_index+0xa4>)
 8011fea:	f002 fb55 	bl	8014698 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011fee:	2318      	movs	r3, #24
 8011ff0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011ff4:	f106 0a26 	add.w	sl, r6, #38	@ 0x26
 8011ff8:	fb03 7404 	mla	r4, r3, r4, r7
 8011ffc:	00ed      	lsls	r5, r5, #3
 8011ffe:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012000:	f105 080c 	add.w	r8, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012004:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012006:	44b8      	add	r8, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012008:	d10b      	bne.n	8012022 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801200a:	8a63      	ldrh	r3, [r4, #18]
 801200c:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012010:	d913      	bls.n	801203a <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012012:	1d29      	adds	r1, r5, #4
 8012014:	4630      	mov	r0, r6
 8012016:	4439      	add	r1, r7
 8012018:	f7ff ff98 	bl	8011f4c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801201c:	b908      	cbnz	r0, 8012022 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801201e:	2303      	movs	r3, #3
 8012020:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012026:	4652      	mov	r2, sl
 8012028:	4649      	mov	r1, r9
 801202a:	4630      	mov	r0, r6
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	4643      	mov	r3, r8
 8012030:	f001 f85a 	bl	80130e8 <ethernet_output>
}
 8012034:	b004      	add	sp, #16
 8012036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801203a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801203e:	d3f0      	bcc.n	8012022 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012040:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012042:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012044:	4642      	mov	r2, r8
 8012046:	4651      	mov	r1, sl
 8012048:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801204a:	442f      	add	r7, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801204c:	4b08      	ldr	r3, [pc, #32]	@ (8012070 <etharp_output_to_arp_index+0xa8>)
 801204e:	4630      	mov	r0, r6
 8012050:	9702      	str	r7, [sp, #8]
 8012052:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012054:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012056:	9300      	str	r3, [sp, #0]
 8012058:	4653      	mov	r3, sl
 801205a:	f7ff fe4f 	bl	8011cfc <etharp_raw>
 801205e:	e7dd      	b.n	801201c <etharp_output_to_arp_index+0x54>
 8012060:	2000f388 	.word	0x2000f388
 8012064:	08017b6b 	.word	0x08017b6b
 8012068:	08017c85 	.word	0x08017c85
 801206c:	08015927 	.word	0x08015927
 8012070:	0808ed38 	.word	0x0808ed38

08012074 <etharp_query>:
{
 8012074:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012078:	4688      	mov	r8, r1
 801207a:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801207c:	4601      	mov	r1, r0
{
 801207e:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012080:	f8d8 0000 	ldr.w	r0, [r8]
 8012084:	f000 fbbf 	bl	8012806 <ip4_addr_isbroadcast_u32>
 8012088:	2800      	cmp	r0, #0
 801208a:	d17a      	bne.n	8012182 <etharp_query+0x10e>
      ip4_addr_ismulticast(ipaddr) ||
 801208c:	f8d8 3000 	ldr.w	r3, [r8]
 8012090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012094:	2ae0      	cmp	r2, #224	@ 0xe0
 8012096:	d074      	beq.n	8012182 <etharp_query+0x10e>
      ip4_addr_isany(ipaddr)) {
 8012098:	2b00      	cmp	r3, #0
 801209a:	d072      	beq.n	8012182 <etharp_query+0x10e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801209c:	4632      	mov	r2, r6
 801209e:	2101      	movs	r1, #1
 80120a0:	4640      	mov	r0, r8
 80120a2:	f7ff fd9d 	bl	8011be0 <etharp_find_entry>
  if (i_err < 0) {
 80120a6:	1e04      	subs	r4, r0, #0
 80120a8:	da03      	bge.n	80120b2 <etharp_query+0x3e>
    return (err_t)i_err;
 80120aa:	b260      	sxtb	r0, r4
}
 80120ac:	b002      	add	sp, #8
 80120ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80120b2:	b2a3      	uxth	r3, r4
 80120b4:	2b7e      	cmp	r3, #126	@ 0x7e
 80120b6:	d906      	bls.n	80120c6 <etharp_query+0x52>
 80120b8:	4b3c      	ldr	r3, [pc, #240]	@ (80121ac <etharp_query+0x138>)
 80120ba:	f240 32c2 	movw	r2, #962	@ 0x3c2
 80120be:	493c      	ldr	r1, [pc, #240]	@ (80121b0 <etharp_query+0x13c>)
 80120c0:	483c      	ldr	r0, [pc, #240]	@ (80121b4 <etharp_query+0x140>)
 80120c2:	f002 fae9 	bl	8014698 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80120c6:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80120c8:	4f3b      	ldr	r7, [pc, #236]	@ (80121b8 <etharp_query+0x144>)
 80120ca:	2318      	movs	r3, #24
 80120cc:	fb03 7304 	mla	r3, r3, r4, r7
 80120d0:	7d1a      	ldrb	r2, [r3, #20]
 80120d2:	2a00      	cmp	r2, #0
 80120d4:	d158      	bne.n	8012188 <etharp_query+0x114>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80120d6:	f04f 0901 	mov.w	r9, #1
    arp_table[i].netif = netif;
 80120da:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80120dc:	f883 9014 	strb.w	r9, [r3, #20]
    result = etharp_request(netif, ipaddr);
 80120e0:	4641      	mov	r1, r8
 80120e2:	4630      	mov	r0, r6
 80120e4:	f7ff ff32 	bl	8011f4c <etharp_request>
    if (result != ERR_OK) {
 80120e8:	b948      	cbnz	r0, 80120fe <etharp_query+0x8a>
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 80120ea:	2318      	movs	r3, #24
 80120ec:	fb03 7304 	mla	r3, r3, r4, r7
 80120f0:	7d1a      	ldrb	r2, [r3, #20]
 80120f2:	2a01      	cmp	r2, #1
 80120f4:	d103      	bne.n	80120fe <etharp_query+0x8a>
 80120f6:	f1b9 0f00 	cmp.w	r9, #0
 80120fa:	d100      	bne.n	80120fe <etharp_query+0x8a>
        arp_table[i].ctime = 0;
 80120fc:	8258      	strh	r0, [r3, #18]
    if (q == NULL) {
 80120fe:	2d00      	cmp	r5, #0
 8012100:	d0d4      	beq.n	80120ac <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012102:	2318      	movs	r3, #24
 8012104:	fb03 7204 	mla	r2, r3, r4, r7
 8012108:	7d12      	ldrb	r2, [r2, #20]
 801210a:	2a01      	cmp	r2, #1
 801210c:	d910      	bls.n	8012130 <etharp_query+0xbc>
    ETHARP_SET_ADDRHINT(netif, i);
 801210e:	4a2b      	ldr	r2, [pc, #172]	@ (80121bc <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012110:	fb03 7304 	mla	r3, r3, r4, r7
 8012114:	4629      	mov	r1, r5
 8012116:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 8012118:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801211a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801211e:	330c      	adds	r3, #12
 8012120:	9200      	str	r2, [sp, #0]
 8012122:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8012126:	f000 ffdf 	bl	80130e8 <ethernet_output>
 801212a:	e7bf      	b.n	80120ac <etharp_query+0x38>
  int is_new_entry = 0;
 801212c:	46a9      	mov	r9, r5
 801212e:	e7d7      	b.n	80120e0 <etharp_query+0x6c>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012130:	d1bc      	bne.n	80120ac <etharp_query+0x38>
    p = q;
 8012132:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == NULL));
 8012134:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80121ac <etharp_query+0x138>
 8012138:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80121c0 <etharp_query+0x14c>
 801213c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80121b4 <etharp_query+0x140>
 8012140:	8972      	ldrh	r2, [r6, #10]
 8012142:	8933      	ldrh	r3, [r6, #8]
 8012144:	429a      	cmp	r2, r3
 8012146:	d108      	bne.n	801215a <etharp_query+0xe6>
 8012148:	6833      	ldr	r3, [r6, #0]
 801214a:	b133      	cbz	r3, 801215a <etharp_query+0xe6>
 801214c:	4643      	mov	r3, r8
 801214e:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8012152:	4649      	mov	r1, r9
 8012154:	4650      	mov	r0, sl
 8012156:	f002 fa9f 	bl	8014698 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801215a:	7b33      	ldrb	r3, [r6, #12]
 801215c:	065b      	lsls	r3, r3, #25
 801215e:	d418      	bmi.n	8012192 <etharp_query+0x11e>
      p = p->next;
 8012160:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8012162:	2e00      	cmp	r6, #0
 8012164:	d1ec      	bne.n	8012140 <etharp_query+0xcc>
      pbuf_ref(p);
 8012166:	4628      	mov	r0, r5
 8012168:	f7fb feae 	bl	800dec8 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 801216c:	2618      	movs	r6, #24
 801216e:	fb06 f304 	mul.w	r3, r6, r4
 8012172:	58f8      	ldr	r0, [r7, r3]
 8012174:	b108      	cbz	r0, 801217a <etharp_query+0x106>
        pbuf_free(arp_table[i].q);
 8012176:	f7fb fd5b 	bl	800dc30 <pbuf_free>
      arp_table[i].q = p;
 801217a:	4366      	muls	r6, r4
      result = ERR_OK;
 801217c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 801217e:	51bd      	str	r5, [r7, r6]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8012180:	e794      	b.n	80120ac <etharp_query+0x38>
    return ERR_ARG;
 8012182:	f06f 000f 	mvn.w	r0, #15
 8012186:	e791      	b.n	80120ac <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8012188:	2d00      	cmp	r5, #0
 801218a:	d0cf      	beq.n	801212c <etharp_query+0xb8>
  err_t result = ERR_MEM;
 801218c:	f04f 30ff 	mov.w	r0, #4294967295
 8012190:	e7b7      	b.n	8012102 <etharp_query+0x8e>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012192:	462a      	mov	r2, r5
 8012194:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012198:	200e      	movs	r0, #14
 801219a:	f7fb ff9f 	bl	800e0dc <pbuf_clone>
    if (p != NULL) {
 801219e:	4605      	mov	r5, r0
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d1e3      	bne.n	801216c <etharp_query+0xf8>
      result = ERR_MEM;
 80121a4:	f04f 30ff 	mov.w	r0, #4294967295
 80121a8:	e780      	b.n	80120ac <etharp_query+0x38>
 80121aa:	bf00      	nop
 80121ac:	08017b6b 	.word	0x08017b6b
 80121b0:	08017cb5 	.word	0x08017cb5
 80121b4:	08015927 	.word	0x08015927
 80121b8:	2000f388 	.word	0x2000f388
 80121bc:	2000f384 	.word	0x2000f384
 80121c0:	08017cc3 	.word	0x08017cc3

080121c4 <etharp_output>:
{
 80121c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121c6:	460e      	mov	r6, r1
 80121c8:	b085      	sub	sp, #20
 80121ca:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80121cc:	4604      	mov	r4, r0
 80121ce:	b930      	cbnz	r0, 80121de <etharp_output+0x1a>
 80121d0:	4b42      	ldr	r3, [pc, #264]	@ (80122dc <etharp_output+0x118>)
 80121d2:	f240 321f 	movw	r2, #799	@ 0x31f
 80121d6:	4942      	ldr	r1, [pc, #264]	@ (80122e0 <etharp_output+0x11c>)
 80121d8:	4842      	ldr	r0, [pc, #264]	@ (80122e4 <etharp_output+0x120>)
 80121da:	f002 fa5d 	bl	8014698 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80121de:	b936      	cbnz	r6, 80121ee <etharp_output+0x2a>
 80121e0:	4b3e      	ldr	r3, [pc, #248]	@ (80122dc <etharp_output+0x118>)
 80121e2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80121e6:	4940      	ldr	r1, [pc, #256]	@ (80122e8 <etharp_output+0x124>)
 80121e8:	483e      	ldr	r0, [pc, #248]	@ (80122e4 <etharp_output+0x120>)
 80121ea:	f002 fa55 	bl	8014698 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80121ee:	b935      	cbnz	r5, 80121fe <etharp_output+0x3a>
 80121f0:	4b3a      	ldr	r3, [pc, #232]	@ (80122dc <etharp_output+0x118>)
 80121f2:	f240 3221 	movw	r2, #801	@ 0x321
 80121f6:	493d      	ldr	r1, [pc, #244]	@ (80122ec <etharp_output+0x128>)
 80121f8:	483a      	ldr	r0, [pc, #232]	@ (80122e4 <etharp_output+0x120>)
 80121fa:	f002 fa4d 	bl	8014698 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80121fe:	4621      	mov	r1, r4
 8012200:	6828      	ldr	r0, [r5, #0]
 8012202:	f000 fb00 	bl	8012806 <ip4_addr_isbroadcast_u32>
 8012206:	2800      	cmp	r0, #0
 8012208:	d162      	bne.n	80122d0 <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801220a:	682b      	ldr	r3, [r5, #0]
 801220c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8012210:	2ae0      	cmp	r2, #224	@ 0xe0
 8012212:	d11c      	bne.n	801224e <etharp_output+0x8a>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012214:	2301      	movs	r3, #1
 8012216:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801221a:	235e      	movs	r3, #94	@ 0x5e
 801221c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012220:	786b      	ldrb	r3, [r5, #1]
 8012222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012226:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801222a:	78ab      	ldrb	r3, [r5, #2]
 801222c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012230:	78eb      	ldrb	r3, [r5, #3]
 8012232:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8012236:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801223c:	4631      	mov	r1, r6
 801223e:	4620      	mov	r0, r4
 8012240:	9200      	str	r2, [sp, #0]
 8012242:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 8012246:	f000 ff4f 	bl	80130e8 <ethernet_output>
}
 801224a:	b005      	add	sp, #20
 801224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801224e:	6862      	ldr	r2, [r4, #4]
 8012250:	68a1      	ldr	r1, [r4, #8]
 8012252:	405a      	eors	r2, r3
 8012254:	420a      	tst	r2, r1
 8012256:	d009      	beq.n	801226c <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8012258:	b29b      	uxth	r3, r3
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801225a:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801225e:	4293      	cmp	r3, r2
 8012260:	d004      	beq.n	801226c <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012262:	68e3      	ldr	r3, [r4, #12]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d035      	beq.n	80122d4 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 8012268:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801226c:	4920      	ldr	r1, [pc, #128]	@ (80122f0 <etharp_output+0x12c>)
 801226e:	2018      	movs	r0, #24
 8012270:	4b20      	ldr	r3, [pc, #128]	@ (80122f4 <etharp_output+0x130>)
 8012272:	780a      	ldrb	r2, [r1, #0]
 8012274:	fb00 3302 	mla	r3, r0, r2, r3
 8012278:	7d18      	ldrb	r0, [r3, #20]
 801227a:	2801      	cmp	r0, #1
 801227c:	d90d      	bls.n	801229a <etharp_output+0xd6>
 801227e:	6898      	ldr	r0, [r3, #8]
 8012280:	42a0      	cmp	r0, r4
 8012282:	d10a      	bne.n	801229a <etharp_output+0xd6>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012284:	6828      	ldr	r0, [r5, #0]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	4298      	cmp	r0, r3
 801228a:	d106      	bne.n	801229a <etharp_output+0xd6>
        return etharp_output_to_arp_index(netif, q, i);
 801228c:	4631      	mov	r1, r6
 801228e:	4620      	mov	r0, r4
}
 8012290:	b005      	add	sp, #20
 8012292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8012296:	f7ff be97 	b.w	8011fc8 <etharp_output_to_arp_index>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801229a:	4b16      	ldr	r3, [pc, #88]	@ (80122f4 <etharp_output+0x130>)
{
 801229c:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801229e:	7d18      	ldrb	r0, [r3, #20]
 80122a0:	2801      	cmp	r0, #1
 80122a2:	d909      	bls.n	80122b8 <etharp_output+0xf4>
 80122a4:	6898      	ldr	r0, [r3, #8]
 80122a6:	42a0      	cmp	r0, r4
 80122a8:	d106      	bne.n	80122b8 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 80122aa:	682f      	ldr	r7, [r5, #0]
 80122ac:	6858      	ldr	r0, [r3, #4]
 80122ae:	4287      	cmp	r7, r0
 80122b0:	d102      	bne.n	80122b8 <etharp_output+0xf4>
 80122b2:	b2d2      	uxtb	r2, r2
        ETHARP_SET_ADDRHINT(netif, i);
 80122b4:	700a      	strb	r2, [r1, #0]
 80122b6:	e7e9      	b.n	801228c <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80122b8:	3201      	adds	r2, #1
 80122ba:	3318      	adds	r3, #24
 80122bc:	2a0a      	cmp	r2, #10
 80122be:	d1ee      	bne.n	801229e <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 80122c0:	4632      	mov	r2, r6
 80122c2:	4629      	mov	r1, r5
 80122c4:	4620      	mov	r0, r4
}
 80122c6:	b005      	add	sp, #20
 80122c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 80122cc:	f7ff bed2 	b.w	8012074 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 80122d0:	4b09      	ldr	r3, [pc, #36]	@ (80122f8 <etharp_output+0x134>)
 80122d2:	e7b1      	b.n	8012238 <etharp_output+0x74>
            return ERR_RTE;
 80122d4:	f06f 0003 	mvn.w	r0, #3
 80122d8:	e7b7      	b.n	801224a <etharp_output+0x86>
 80122da:	bf00      	nop
 80122dc:	08017b6b 	.word	0x08017b6b
 80122e0:	08015919 	.word	0x08015919
 80122e4:	08015927 	.word	0x08015927
 80122e8:	08016b5e 	.word	0x08016b5e
 80122ec:	08017c42 	.word	0x08017c42
 80122f0:	2000f384 	.word	0x2000f384
 80122f4:	2000f388 	.word	0x2000f388
 80122f8:	0808ed3e 	.word	0x0808ed3e

080122fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
  if (p->tot_len < response_pkt_len) {
 8012300:	f8b0 8008 	ldrh.w	r8, [r0, #8]
{
 8012304:	b087      	sub	sp, #28
 8012306:	4607      	mov	r7, r0
 8012308:	468a      	mov	sl, r1
  if (p->tot_len < response_pkt_len) {
 801230a:	f1b8 0f1c 	cmp.w	r8, #28
{
 801230e:	4691      	mov	r9, r2
    response_pkt_len = p->tot_len;
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 8012310:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8012314:	f44f 7220 	mov.w	r2, #640	@ 0x280
  if (p->tot_len < response_pkt_len) {
 8012318:	bf28      	it	cs
 801231a:	f04f 081c 	movcs.w	r8, #28
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 801231e:	f108 0508 	add.w	r5, r8, #8
 8012322:	b2ad      	uxth	r5, r5
 8012324:	4629      	mov	r1, r5
 8012326:	f7fb fced 	bl	800dd04 <pbuf_alloc>
  if (q == NULL) {
 801232a:	4604      	mov	r4, r0
 801232c:	b388      	cbz	r0, 8012392 <icmp_send_response+0x96>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801232e:	8943      	ldrh	r3, [r0, #10]
 8012330:	42ab      	cmp	r3, r5
 8012332:	d206      	bcs.n	8012342 <icmp_send_response+0x46>
 8012334:	4b18      	ldr	r3, [pc, #96]	@ (8012398 <icmp_send_response+0x9c>)
 8012336:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801233a:	4918      	ldr	r1, [pc, #96]	@ (801239c <icmp_send_response+0xa0>)
 801233c:	4818      	ldr	r0, [pc, #96]	@ (80123a0 <icmp_send_response+0xa4>)
 801233e:	f002 f9ab 	bl	8014698 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8012342:	6866      	ldr	r6, [r4, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->data = 0;
 8012344:	2500      	movs	r5, #0
  iphdr = (struct ip_hdr *)p->payload;
 8012346:	f8d7 b004 	ldr.w	fp, [r7, #4]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 801234a:	2308      	movs	r3, #8
 801234c:	4642      	mov	r2, r8
 801234e:	4639      	mov	r1, r7
 8012350:	4620      	mov	r0, r4
  icmphdr->type = type;
 8012352:	f886 a000 	strb.w	sl, [r6]
  icmphdr->code = code;
 8012356:	f886 9001 	strb.w	r9, [r6, #1]
  icmphdr->data = 0;
 801235a:	7135      	strb	r5, [r6, #4]
 801235c:	7175      	strb	r5, [r6, #5]
 801235e:	71b5      	strb	r5, [r6, #6]
 8012360:	71f5      	strb	r5, [r6, #7]
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8012362:	f7fb fe07 	bl	800df74 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012366:	f8db 300c 	ldr.w	r3, [fp, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801236a:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 801236c:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 801236e:	f000 f8d9 	bl	8012524 <ip4_route>
#endif
  if (netif != NULL) {
 8012372:	b158      	cbz	r0, 801238c <icmp_send_response+0x90>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012374:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8012376:	70b5      	strb	r5, [r6, #2]
 8012378:	70f5      	strb	r5, [r6, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801237a:	aa05      	add	r2, sp, #20
 801237c:	9002      	str	r0, [sp, #8]
 801237e:	4629      	mov	r1, r5
 8012380:	4620      	mov	r0, r4
 8012382:	e9cd 5300 	strd	r5, r3, [sp]
 8012386:	23ff      	movs	r3, #255	@ 0xff
 8012388:	f000 fa2c 	bl	80127e4 <ip4_output_if>
  }
  pbuf_free(q);
 801238c:	4620      	mov	r0, r4
 801238e:	f7fb fc4f 	bl	800dc30 <pbuf_free>
}
 8012392:	b007      	add	sp, #28
 8012394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012398:	08017cdd 	.word	0x08017cdd
 801239c:	08017d00 	.word	0x08017d00
 80123a0:	08015927 	.word	0x08015927

080123a4 <icmp_input>:
{
 80123a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80123a8:	4f47      	ldr	r7, [pc, #284]	@ (80124c8 <icmp_input+0x124>)
{
 80123aa:	b085      	sub	sp, #20
 80123ac:	4604      	mov	r4, r0
 80123ae:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 80123b0:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80123b4:	f899 5000 	ldrb.w	r5, [r9]
 80123b8:	f005 050f 	and.w	r5, r5, #15
 80123bc:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80123be:	2d13      	cmp	r5, #19
 80123c0:	d916      	bls.n	80123f0 <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 80123c2:	8943      	ldrh	r3, [r0, #10]
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d913      	bls.n	80123f0 <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 80123c8:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	2b08      	cmp	r3, #8
 80123ce:	d10f      	bne.n	80123f0 <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123d0:	6978      	ldr	r0, [r7, #20]
 80123d2:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80123d6:	2be0      	cmp	r3, #224	@ 0xe0
 80123d8:	d00a      	beq.n	80123f0 <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80123da:	6839      	ldr	r1, [r7, #0]
 80123dc:	f000 fa13 	bl	8012806 <ip4_addr_isbroadcast_u32>
 80123e0:	b930      	cbnz	r0, 80123f0 <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80123e2:	8923      	ldrh	r3, [r4, #8]
 80123e4:	2b07      	cmp	r3, #7
 80123e6:	d903      	bls.n	80123f0 <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 80123e8:	4620      	mov	r0, r4
 80123ea:	f7fa fef9 	bl	800d1e0 <inet_chksum_pbuf>
 80123ee:	b128      	cbz	r0, 80123fc <icmp_input+0x58>
  pbuf_free(p);
 80123f0:	4620      	mov	r0, r4
}
 80123f2:	b005      	add	sp, #20
 80123f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80123f8:	f7fb bc1a 	b.w	800dc30 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80123fc:	f105 060e 	add.w	r6, r5, #14
 8012400:	4620      	mov	r0, r4
 8012402:	4631      	mov	r1, r6
 8012404:	f7fb fbe5 	bl	800dbd2 <pbuf_add_header>
 8012408:	2800      	cmp	r0, #0
 801240a:	d04f      	beq.n	80124ac <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801240c:	8923      	ldrh	r3, [r4, #8]
 801240e:	18e9      	adds	r1, r5, r3
 8012410:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8012412:	428b      	cmp	r3, r1
 8012414:	d8ec      	bhi.n	80123f0 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012416:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801241a:	200e      	movs	r0, #14
 801241c:	f7fb fc72 	bl	800dd04 <pbuf_alloc>
        if (r == NULL) {
 8012420:	4606      	mov	r6, r0
 8012422:	2800      	cmp	r0, #0
 8012424:	d0e4      	beq.n	80123f0 <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012426:	8942      	ldrh	r2, [r0, #10]
 8012428:	f105 0308 	add.w	r3, r5, #8
 801242c:	429a      	cmp	r2, r3
 801242e:	d203      	bcs.n	8012438 <icmp_input+0x94>
          pbuf_free(r);
 8012430:	4630      	mov	r0, r6
 8012432:	f7fb fbfd 	bl	800dc30 <pbuf_free>
          goto icmperr;
 8012436:	e7db      	b.n	80123f0 <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8012438:	4649      	mov	r1, r9
 801243a:	462a      	mov	r2, r5
 801243c:	6840      	ldr	r0, [r0, #4]
 801243e:	f002 fbdc 	bl	8014bfa <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8012442:	4629      	mov	r1, r5
 8012444:	4630      	mov	r0, r6
 8012446:	f7fb fbc7 	bl	800dbd8 <pbuf_remove_header>
 801244a:	b130      	cbz	r0, 801245a <icmp_input+0xb6>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 801244c:	4b1f      	ldr	r3, [pc, #124]	@ (80124cc <icmp_input+0x128>)
 801244e:	22b6      	movs	r2, #182	@ 0xb6
 8012450:	491f      	ldr	r1, [pc, #124]	@ (80124d0 <icmp_input+0x12c>)
 8012452:	4820      	ldr	r0, [pc, #128]	@ (80124d4 <icmp_input+0x130>)
 8012454:	f002 f920 	bl	8014698 <iprintf>
          pbuf_free(r);
 8012458:	e7ea      	b.n	8012430 <icmp_input+0x8c>
        if (pbuf_copy(r, p) != ERR_OK) {
 801245a:	4621      	mov	r1, r4
 801245c:	4630      	mov	r0, r6
 801245e:	f7fb fe05 	bl	800e06c <pbuf_copy>
 8012462:	2800      	cmp	r0, #0
 8012464:	d1e4      	bne.n	8012430 <icmp_input+0x8c>
        pbuf_free(p);
 8012466:	4620      	mov	r0, r4
        p = r;
 8012468:	4634      	mov	r4, r6
        pbuf_free(p);
 801246a:	f7fb fbe1 	bl	800dc30 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 801246e:	4629      	mov	r1, r5
 8012470:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012472:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8012474:	f7fb fbad 	bl	800dbd2 <pbuf_add_header>
 8012478:	4602      	mov	r2, r0
 801247a:	2800      	cmp	r0, #0
 801247c:	d1b8      	bne.n	80123f0 <icmp_input+0x4c>
        ip4_addr_copy(iphdr->src, *src);
 801247e:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012480:	2101      	movs	r1, #1
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012482:	6860      	ldr	r0, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8012484:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	6103      	str	r3, [r0, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801248a:	23ff      	movs	r3, #255	@ 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801248c:	7032      	strb	r2, [r6, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 801248e:	73e2      	strb	r2, [r4, #15]
        iecho->chksum = 0;
 8012490:	70b2      	strb	r2, [r6, #2]
 8012492:	70f2      	strb	r2, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012494:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012496:	7282      	strb	r2, [r0, #10]
 8012498:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801249a:	4620      	mov	r0, r4
 801249c:	f8cd 8008 	str.w	r8, [sp, #8]
 80124a0:	e9cd 2100 	strd	r2, r1, [sp]
 80124a4:	490c      	ldr	r1, [pc, #48]	@ (80124d8 <icmp_input+0x134>)
 80124a6:	f000 f99d 	bl	80127e4 <ip4_output_if>
  pbuf_free(p);
 80124aa:	e7a1      	b.n	80123f0 <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80124ac:	4631      	mov	r1, r6
 80124ae:	4620      	mov	r0, r4
 80124b0:	f7fb fb92 	bl	800dbd8 <pbuf_remove_header>
 80124b4:	2800      	cmp	r0, #0
 80124b6:	d0da      	beq.n	801246e <icmp_input+0xca>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 80124b8:	4b04      	ldr	r3, [pc, #16]	@ (80124cc <icmp_input+0x128>)
 80124ba:	22c7      	movs	r2, #199	@ 0xc7
 80124bc:	4907      	ldr	r1, [pc, #28]	@ (80124dc <icmp_input+0x138>)
 80124be:	4805      	ldr	r0, [pc, #20]	@ (80124d4 <icmp_input+0x130>)
 80124c0:	f002 f8ea 	bl	8014698 <iprintf>
          goto icmperr;
 80124c4:	e794      	b.n	80123f0 <icmp_input+0x4c>
 80124c6:	bf00      	nop
 80124c8:	2000b528 	.word	0x2000b528
 80124cc:	08017cdd 	.word	0x08017cdd
 80124d0:	08017d2c 	.word	0x08017d2c
 80124d4:	08015927 	.word	0x08015927
 80124d8:	2000b53c 	.word	0x2000b53c
 80124dc:	08017d60 	.word	0x08017d60

080124e0 <icmp_dest_unreach>:
{
 80124e0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80124e2:	2103      	movs	r1, #3
 80124e4:	f7ff bf0a 	b.w	80122fc <icmp_send_response>

080124e8 <icmp_time_exceeded>:
{
 80124e8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80124ea:	210b      	movs	r1, #11
 80124ec:	f7ff bf06 	b.w	80122fc <icmp_send_response>

080124f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80124f0:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80124f2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
{
 80124f6:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80124f8:	f013 0001 	ands.w	r0, r3, #1
 80124fc:	d00a      	beq.n	8012514 <ip4_input_accept+0x24>
 80124fe:	684b      	ldr	r3, [r1, #4]
 8012500:	b14b      	cbz	r3, 8012516 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012502:	4a07      	ldr	r2, [pc, #28]	@ (8012520 <ip4_input_accept+0x30>)
 8012504:	6950      	ldr	r0, [r2, #20]
 8012506:	4283      	cmp	r3, r0
 8012508:	d007      	beq.n	801251a <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801250a:	f000 f97c 	bl	8012806 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801250e:	3800      	subs	r0, #0
 8012510:	bf18      	it	ne
 8012512:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8012514:	bd08      	pop	{r3, pc}
  return 0;
 8012516:	4618      	mov	r0, r3
 8012518:	e7fc      	b.n	8012514 <ip4_input_accept+0x24>
      return 1;
 801251a:	2001      	movs	r0, #1
 801251c:	e7fa      	b.n	8012514 <ip4_input_accept+0x24>
 801251e:	bf00      	nop
 8012520:	2000b528 	.word	0x2000b528

08012524 <ip4_route>:
  NETIF_FOREACH(netif) {
 8012524:	4b14      	ldr	r3, [pc, #80]	@ (8012578 <ip4_route+0x54>)
{
 8012526:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8012528:	6818      	ldr	r0, [r3, #0]
{
 801252a:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 801252c:	b978      	cbnz	r0, 801254e <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801252e:	4b13      	ldr	r3, [pc, #76]	@ (801257c <ip4_route+0x58>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	b15b      	cbz	r3, 801254c <ip4_route+0x28>
 8012534:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 8012538:	f001 0105 	and.w	r1, r1, #5
 801253c:	2905      	cmp	r1, #5
 801253e:	d105      	bne.n	801254c <ip4_route+0x28>
 8012540:	6859      	ldr	r1, [r3, #4]
 8012542:	b119      	cbz	r1, 801254c <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012544:	7812      	ldrb	r2, [r2, #0]
  return netif_default;
 8012546:	2a7f      	cmp	r2, #127	@ 0x7f
 8012548:	bf18      	it	ne
 801254a:	4618      	movne	r0, r3
}
 801254c:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801254e:	f890 102d 	ldrb.w	r1, [r0, #45]	@ 0x2d
 8012552:	07cd      	lsls	r5, r1, #31
 8012554:	d50d      	bpl.n	8012572 <ip4_route+0x4e>
 8012556:	074c      	lsls	r4, r1, #29
 8012558:	d50b      	bpl.n	8012572 <ip4_route+0x4e>
 801255a:	6843      	ldr	r3, [r0, #4]
 801255c:	b14b      	cbz	r3, 8012572 <ip4_route+0x4e>
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801255e:	6814      	ldr	r4, [r2, #0]
 8012560:	6885      	ldr	r5, [r0, #8]
 8012562:	4063      	eors	r3, r4
 8012564:	422b      	tst	r3, r5
 8012566:	d0f1      	beq.n	801254c <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8012568:	078b      	lsls	r3, r1, #30
 801256a:	d402      	bmi.n	8012572 <ip4_route+0x4e>
 801256c:	68c3      	ldr	r3, [r0, #12]
 801256e:	429c      	cmp	r4, r3
 8012570:	d0ec      	beq.n	801254c <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8012572:	6800      	ldr	r0, [r0, #0]
 8012574:	e7da      	b.n	801252c <ip4_route+0x8>
 8012576:	bf00      	nop
 8012578:	2000f320 	.word	0x2000f320
 801257c:	2000f31c 	.word	0x2000f31c

08012580 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012584:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 8012588:	4604      	mov	r4, r0
 801258a:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 801258c:	f899 8000 	ldrb.w	r8, [r9]
 8012590:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8012594:	2b04      	cmp	r3, #4
 8012596:	d005      	beq.n	80125a4 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012598:	4620      	mov	r0, r4
 801259a:	f7fb fb49 	bl	800dc30 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801259e:	2000      	movs	r0, #0
 80125a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80125a4:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80125a8:	f008 080f 	and.w	r8, r8, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80125ac:	f7fa fde8 	bl	800d180 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80125b0:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80125b2:	ea4f 0888 	mov.w	r8, r8, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80125b6:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 80125b8:	4283      	cmp	r3, r0
 80125ba:	d903      	bls.n	80125c4 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 80125bc:	4601      	mov	r1, r0
 80125be:	4620      	mov	r0, r4
 80125c0:	f7fb fc18 	bl	800ddf4 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80125c4:	8963      	ldrh	r3, [r4, #10]
 80125c6:	4543      	cmp	r3, r8
 80125c8:	d3e6      	bcc.n	8012598 <ip4_input+0x18>
 80125ca:	8923      	ldrh	r3, [r4, #8]
 80125cc:	42ab      	cmp	r3, r5
 80125ce:	d3e3      	bcc.n	8012598 <ip4_input+0x18>
 80125d0:	f1b8 0f13 	cmp.w	r8, #19
 80125d4:	d9e0      	bls.n	8012598 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80125d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80125da:	4d42      	ldr	r5, [pc, #264]	@ (80126e4 <ip4_input+0x164>)
 80125dc:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80125e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125e6:	2be0      	cmp	r3, #224	@ 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80125e8:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125ea:	d14d      	bne.n	8012688 <ip4_input+0x108>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80125ec:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 80125f0:	07db      	lsls	r3, r3, #31
 80125f2:	d554      	bpl.n	801269e <ip4_input+0x11e>
 80125f4:	6873      	ldr	r3, [r6, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d051      	beq.n	801269e <ip4_input+0x11e>
      netif = inp;
 80125fa:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80125fc:	4631      	mov	r1, r6
 80125fe:	6928      	ldr	r0, [r5, #16]
 8012600:	f000 f901 	bl	8012806 <ip4_addr_isbroadcast_u32>
 8012604:	2800      	cmp	r0, #0
 8012606:	d1c7      	bne.n	8012598 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012608:	692b      	ldr	r3, [r5, #16]
 801260a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801260e:	2be0      	cmp	r3, #224	@ 0xe0
 8012610:	d0c2      	beq.n	8012598 <ip4_input+0x18>
  if (netif == NULL) {
 8012612:	2f00      	cmp	r7, #0
 8012614:	d0c0      	beq.n	8012598 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012616:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801261a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801261e:	b13b      	cbz	r3, 8012630 <ip4_input+0xb0>
    p = ip4_reass(p);
 8012620:	4620      	mov	r0, r4
 8012622:	f000 fa5f 	bl	8012ae4 <ip4_reass>
    if (p == NULL) {
 8012626:	4604      	mov	r4, r0
 8012628:	2800      	cmp	r0, #0
 801262a:	d0b8      	beq.n	801259e <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 801262c:	f8d0 9004 	ldr.w	r9, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8012630:	f8c5 9008 	str.w	r9, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012634:	4641      	mov	r1, r8
 8012636:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8012638:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801263c:	f899 3000 	ldrb.w	r3, [r9]
 8012640:	f003 030f 	and.w	r3, r3, #15
 8012644:	009b      	lsls	r3, r3, #2
 8012646:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012648:	f7fb fac6 	bl	800dbd8 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801264c:	f899 3009 	ldrb.w	r3, [r9, #9]
 8012650:	2b06      	cmp	r3, #6
 8012652:	d03c      	beq.n	80126ce <ip4_input+0x14e>
 8012654:	2b11      	cmp	r3, #17
 8012656:	d02e      	beq.n	80126b6 <ip4_input+0x136>
 8012658:	2b01      	cmp	r3, #1
 801265a:	d03d      	beq.n	80126d8 <ip4_input+0x158>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801265c:	4639      	mov	r1, r7
 801265e:	6968      	ldr	r0, [r5, #20]
 8012660:	f000 f8d1 	bl	8012806 <ip4_addr_isbroadcast_u32>
 8012664:	b960      	cbnz	r0, 8012680 <ip4_input+0x100>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012666:	696b      	ldr	r3, [r5, #20]
 8012668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801266c:	2be0      	cmp	r3, #224	@ 0xe0
 801266e:	d007      	beq.n	8012680 <ip4_input+0x100>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012670:	4641      	mov	r1, r8
 8012672:	4620      	mov	r0, r4
 8012674:	f7fb fad4 	bl	800dc20 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012678:	2102      	movs	r1, #2
 801267a:	4620      	mov	r0, r4
 801267c:	f7ff ff30 	bl	80124e0 <icmp_dest_unreach>
        pbuf_free(p);
 8012680:	4620      	mov	r0, r4
 8012682:	f7fb fad5 	bl	800dc30 <pbuf_free>
        break;
 8012686:	e01a      	b.n	80126be <ip4_input+0x13e>
    if (ip4_input_accept(inp)) {
 8012688:	4630      	mov	r0, r6
 801268a:	f7ff ff31 	bl	80124f0 <ip4_input_accept>
 801268e:	2800      	cmp	r0, #0
 8012690:	d1b3      	bne.n	80125fa <ip4_input+0x7a>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012692:	7d2b      	ldrb	r3, [r5, #20]
 8012694:	2b7f      	cmp	r3, #127	@ 0x7f
 8012696:	d002      	beq.n	801269e <ip4_input+0x11e>
        NETIF_FOREACH(netif) {
 8012698:	4b13      	ldr	r3, [pc, #76]	@ (80126e8 <ip4_input+0x168>)
 801269a:	681f      	ldr	r7, [r3, #0]
 801269c:	b90f      	cbnz	r7, 80126a2 <ip4_input+0x122>
      netif = NULL;
 801269e:	2700      	movs	r7, #0
 80126a0:	e7ac      	b.n	80125fc <ip4_input+0x7c>
          if (netif == inp) {
 80126a2:	42b7      	cmp	r7, r6
 80126a4:	d101      	bne.n	80126aa <ip4_input+0x12a>
        NETIF_FOREACH(netif) {
 80126a6:	683f      	ldr	r7, [r7, #0]
 80126a8:	e7f8      	b.n	801269c <ip4_input+0x11c>
          if (ip4_input_accept(netif)) {
 80126aa:	4638      	mov	r0, r7
 80126ac:	f7ff ff20 	bl	80124f0 <ip4_input_accept>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d0f8      	beq.n	80126a6 <ip4_input+0x126>
 80126b4:	e7a2      	b.n	80125fc <ip4_input+0x7c>
        udp_input(p, inp);
 80126b6:	4631      	mov	r1, r6
 80126b8:	4620      	mov	r0, r4
 80126ba:	f7ff f903 	bl	80118c4 <udp_input>
  ip_data.current_netif = NULL;
 80126be:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 80126c0:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 80126c4:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 80126c6:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80126c8:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 80126cc:	e767      	b.n	801259e <ip4_input+0x1e>
        tcp_input(p, inp);
 80126ce:	4631      	mov	r1, r6
 80126d0:	4620      	mov	r0, r4
 80126d2:	f7fd f8f3 	bl	800f8bc <tcp_input>
        break;
 80126d6:	e7f2      	b.n	80126be <ip4_input+0x13e>
        icmp_input(p, inp);
 80126d8:	4631      	mov	r1, r6
 80126da:	4620      	mov	r0, r4
 80126dc:	f7ff fe62 	bl	80123a4 <icmp_input>
        break;
 80126e0:	e7ed      	b.n	80126be <ip4_input+0x13e>
 80126e2:	bf00      	nop
 80126e4:	2000b528 	.word	0x2000b528
 80126e8:	2000f320 	.word	0x2000f320

080126ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80126ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80126f0:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80126f2:	7b83      	ldrb	r3, [r0, #14]
{
 80126f4:	4604      	mov	r4, r0
 80126f6:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80126f8:	2b01      	cmp	r3, #1
{
 80126fa:	4616      	mov	r6, r2
 80126fc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80126fe:	d006      	beq.n	801270e <ip4_output_if_src+0x22>
 8012700:	4b32      	ldr	r3, [pc, #200]	@ (80127cc <ip4_output_if_src+0xe0>)
 8012702:	f240 3276 	movw	r2, #886	@ 0x376
 8012706:	4932      	ldr	r1, [pc, #200]	@ (80127d0 <ip4_output_if_src+0xe4>)
 8012708:	4832      	ldr	r0, [pc, #200]	@ (80127d4 <ip4_output_if_src+0xe8>)
 801270a:	f001 ffc5 	bl	8014698 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801270e:	2e00      	cmp	r6, #0
 8012710:	d04e      	beq.n	80127b0 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012712:	2114      	movs	r1, #20
 8012714:	4620      	mov	r0, r4
 8012716:	f7fb fa5c 	bl	800dbd2 <pbuf_add_header>
 801271a:	b120      	cbz	r0, 8012726 <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801271c:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8012720:	b002      	add	sp, #8
 8012722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012726:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8012728:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801272a:	2b13      	cmp	r3, #19
 801272c:	d806      	bhi.n	801273c <ip4_output_if_src+0x50>
 801272e:	4b27      	ldr	r3, [pc, #156]	@ (80127cc <ip4_output_if_src+0xe0>)
 8012730:	f240 32aa 	movw	r2, #938	@ 0x3aa
 8012734:	4928      	ldr	r1, [pc, #160]	@ (80127d8 <ip4_output_if_src+0xec>)
 8012736:	4827      	ldr	r0, [pc, #156]	@ (80127d4 <ip4_output_if_src+0xe8>)
 8012738:	f001 ffae 	bl	8014698 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 801273c:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8012740:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8012744:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 8012748:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 801274a:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801274c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80127e0 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 8012750:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012752:	2345      	movs	r3, #69	@ 0x45
 8012754:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8012756:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801275a:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801275c:	8920      	ldrh	r0, [r4, #8]
 801275e:	f7fa fd0f 	bl	800d180 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8012762:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012766:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8012768:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801276c:	f8ba 0000 	ldrh.w	r0, [sl]
 8012770:	f7fa fd06 	bl	800d180 <lwip_htons>
    ++ip_id;
 8012774:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012778:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 801277a:	3301      	adds	r3, #1
 801277c:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8012780:	f1b9 0f00 	cmp.w	r9, #0
 8012784:	d111      	bne.n	80127aa <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012786:	4b15      	ldr	r3, [pc, #84]	@ (80127dc <ip4_output_if_src+0xf0>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 801278c:	f885 800a 	strb.w	r8, [r5, #10]
 8012790:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012796:	b19b      	cbz	r3, 80127c0 <ip4_output_if_src+0xd4>
 8012798:	8922      	ldrh	r2, [r4, #8]
 801279a:	429a      	cmp	r2, r3
 801279c:	d910      	bls.n	80127c0 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 801279e:	4632      	mov	r2, r6
 80127a0:	4639      	mov	r1, r7
 80127a2:	4620      	mov	r0, r4
 80127a4:	f000 fb6e 	bl	8012e84 <ip4_frag>
 80127a8:	e7ba      	b.n	8012720 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 80127aa:	f8d9 3000 	ldr.w	r3, [r9]
 80127ae:	e7ec      	b.n	801278a <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 80127b0:	8963      	ldrh	r3, [r4, #10]
 80127b2:	2b13      	cmp	r3, #19
 80127b4:	d9b2      	bls.n	801271c <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80127b6:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80127b8:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80127be:	e7e9      	b.n	8012794 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	4632      	mov	r2, r6
 80127c4:	4621      	mov	r1, r4
 80127c6:	4638      	mov	r0, r7
 80127c8:	4798      	blx	r3
 80127ca:	e7a9      	b.n	8012720 <ip4_output_if_src+0x34>
 80127cc:	08017d91 	.word	0x08017d91
 80127d0:	08017db3 	.word	0x08017db3
 80127d4:	08015927 	.word	0x08015927
 80127d8:	08017dbf 	.word	0x08017dbf
 80127dc:	0808ed34 	.word	0x0808ed34
 80127e0:	2000f478 	.word	0x2000f478

080127e4 <ip4_output_if>:
{
 80127e4:	b4f0      	push	{r4, r5, r6, r7}
 80127e6:	9c06      	ldr	r4, [sp, #24]
 80127e8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80127ec:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80127f0:	b11a      	cbz	r2, 80127fa <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80127f2:	b109      	cbz	r1, 80127f8 <ip4_output_if+0x14>
 80127f4:	680f      	ldr	r7, [r1, #0]
 80127f6:	b907      	cbnz	r7, 80127fa <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80127f8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80127fa:	9504      	str	r5, [sp, #16]
 80127fc:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8012800:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012802:	f7ff bf73 	b.w	80126ec <ip4_output_if_src>

08012806 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012806:	1e43      	subs	r3, r0, #1
{
 8012808:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 801280a:	3303      	adds	r3, #3
 801280c:	d812      	bhi.n	8012834 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801280e:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8012812:	f013 0002 	ands.w	r0, r3, #2
 8012816:	d010      	beq.n	801283a <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012818:	684b      	ldr	r3, [r1, #4]
 801281a:	4293      	cmp	r3, r2
 801281c:	d00c      	beq.n	8012838 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801281e:	6889      	ldr	r1, [r1, #8]
 8012820:	4053      	eors	r3, r2
 8012822:	420b      	tst	r3, r1
 8012824:	d108      	bne.n	8012838 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012826:	43cb      	mvns	r3, r1
 8012828:	ea22 0201 	bic.w	r2, r2, r1
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	4258      	negs	r0, r3
 8012830:	4158      	adcs	r0, r3
 8012832:	4770      	bx	lr
    return 1;
 8012834:	2001      	movs	r0, #1
 8012836:	4770      	bx	lr
    return 0;
 8012838:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 801283a:	4770      	bx	lr

0801283c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801283c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8012840:	6803      	ldr	r3, [r0, #0]
  int len = 0;
 8012842:	2000      	movs	r0, #0
 8012844:	f10d 0c04 	add.w	ip, sp, #4

  rp = buf;
 8012848:	460e      	mov	r6, r1
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 801284a:	4604      	mov	r4, r0
    i = 0;
 801284c:	4680      	mov	r8, r0
    do {
      rem = *ap % (u8_t)10;
 801284e:	f04f 0e0a 	mov.w	lr, #10
  s_addr = ip4_addr_get_u32(addr);
 8012852:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 8012854:	f81c 7b01 	ldrb.w	r7, [ip], #1
    i = 0;
 8012858:	2500      	movs	r5, #0
      rem = *ap % (u8_t)10;
 801285a:	46ba      	mov	sl, r7
 801285c:	fbb7 f3fe 	udiv	r3, r7, lr
 8012860:	fb0e 7913 	mls	r9, lr, r3, r7
      *ap /= (u8_t)10;
 8012864:	b2df      	uxtb	r7, r3
      inv[i++] = (char)('0' + rem);
 8012866:	462b      	mov	r3, r5
    } while (*ap);
 8012868:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 801286c:	f105 0501 	add.w	r5, r5, #1
 8012870:	f109 0930 	add.w	r9, r9, #48	@ 0x30
 8012874:	f103 0b08 	add.w	fp, r3, #8
 8012878:	b2ed      	uxtb	r5, r5
 801287a:	44eb      	add	fp, sp
 801287c:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 8012880:	d8eb      	bhi.n	801285a <ip4addr_ntoa_r+0x1e>
 8012882:	4607      	mov	r7, r0
 8012884:	4635      	mov	r5, r6
 8012886:	f80c 8c01 	strb.w	r8, [ip, #-1]
    while (i--) {
 801288a:	2bff      	cmp	r3, #255	@ 0xff
      if (len++ >= buflen) {
 801288c:	f100 0001 	add.w	r0, r0, #1
    while (i--) {
 8012890:	d10f      	bne.n	80128b2 <ip4addr_ntoa_r+0x76>
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
 8012892:	4297      	cmp	r7, r2
 8012894:	da1a      	bge.n	80128cc <ip4addr_ntoa_r+0x90>
  for (n = 0; n < 4; n++) {
 8012896:	3401      	adds	r4, #1
      return NULL;
    }
    *rp++ = '.';
 8012898:	462e      	mov	r6, r5
 801289a:	232e      	movs	r3, #46	@ 0x2e
  for (n = 0; n < 4; n++) {
 801289c:	b2e4      	uxtb	r4, r4
    *rp++ = '.';
 801289e:	f806 3b01 	strb.w	r3, [r6], #1
  for (n = 0; n < 4; n++) {
 80128a2:	2c04      	cmp	r4, #4
 80128a4:	d1d6      	bne.n	8012854 <ip4addr_ntoa_r+0x18>
    ap++;
  }
  *--rp = 0;
 80128a6:	2300      	movs	r3, #0
  return buf;
 80128a8:	4608      	mov	r0, r1
  *--rp = 0;
 80128aa:	702b      	strb	r3, [r5, #0]
}
 80128ac:	b003      	add	sp, #12
 80128ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 80128b2:	1e5e      	subs	r6, r3, #1
 80128b4:	4297      	cmp	r7, r2
 80128b6:	b2f6      	uxtb	r6, r6
 80128b8:	da08      	bge.n	80128cc <ip4addr_ntoa_r+0x90>
      *rp++ = inv[i];
 80128ba:	3308      	adds	r3, #8
      if (len++ >= buflen) {
 80128bc:	4607      	mov	r7, r0
      *rp++ = inv[i];
 80128be:	446b      	add	r3, sp
 80128c0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80128c4:	f805 3b01 	strb.w	r3, [r5], #1
 80128c8:	4633      	mov	r3, r6
 80128ca:	e7de      	b.n	801288a <ip4addr_ntoa_r+0x4e>
        return NULL;
 80128cc:	2000      	movs	r0, #0
 80128ce:	e7ed      	b.n	80128ac <ip4addr_ntoa_r+0x70>

080128d0 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80128d0:	2210      	movs	r2, #16
 80128d2:	4901      	ldr	r1, [pc, #4]	@ (80128d8 <ip4addr_ntoa+0x8>)
 80128d4:	f7ff bfb2 	b.w	801283c <ip4addr_ntoa_r>
 80128d8:	2000f47a 	.word	0x2000f47a

080128dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80128dc:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80128de:	4b0c      	ldr	r3, [pc, #48]	@ (8012910 <ip_reass_dequeue_datagram+0x34>)
{
 80128e0:	4604      	mov	r4, r0
 80128e2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	4282      	cmp	r2, r0
 80128e8:	d107      	bne.n	80128fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80128ea:	6802      	ldr	r2, [r0, #0]
 80128ec:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80128ee:	4621      	mov	r1, r4
 80128f0:	2004      	movs	r0, #4
}
 80128f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80128f6:	f7fa bf9f 	b.w	800d838 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80128fa:	b931      	cbnz	r1, 801290a <ip_reass_dequeue_datagram+0x2e>
 80128fc:	4b05      	ldr	r3, [pc, #20]	@ (8012914 <ip_reass_dequeue_datagram+0x38>)
 80128fe:	f240 1245 	movw	r2, #325	@ 0x145
 8012902:	4905      	ldr	r1, [pc, #20]	@ (8012918 <ip_reass_dequeue_datagram+0x3c>)
 8012904:	4805      	ldr	r0, [pc, #20]	@ (801291c <ip_reass_dequeue_datagram+0x40>)
 8012906:	f001 fec7 	bl	8014698 <iprintf>
    prev->next = ipr->next;
 801290a:	6823      	ldr	r3, [r4, #0]
 801290c:	602b      	str	r3, [r5, #0]
 801290e:	e7ee      	b.n	80128ee <ip_reass_dequeue_datagram+0x12>
 8012910:	2000f48c 	.word	0x2000f48c
 8012914:	08017dec 	.word	0x08017dec
 8012918:	08017e13 	.word	0x08017e13
 801291c:	08015927 	.word	0x08015927

08012920 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012920:	4281      	cmp	r1, r0
{
 8012922:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012926:	4604      	mov	r4, r0
 8012928:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801292a:	d105      	bne.n	8012938 <ip_reass_free_complete_datagram+0x18>
 801292c:	4b2f      	ldr	r3, [pc, #188]	@ (80129ec <ip_reass_free_complete_datagram+0xcc>)
 801292e:	22ab      	movs	r2, #171	@ 0xab
 8012930:	492f      	ldr	r1, [pc, #188]	@ (80129f0 <ip_reass_free_complete_datagram+0xd0>)
 8012932:	4830      	ldr	r0, [pc, #192]	@ (80129f4 <ip_reass_free_complete_datagram+0xd4>)
 8012934:	f001 feb0 	bl	8014698 <iprintf>
  if (prev != NULL) {
 8012938:	b146      	cbz	r6, 801294c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801293a:	6833      	ldr	r3, [r6, #0]
 801293c:	42a3      	cmp	r3, r4
 801293e:	d005      	beq.n	801294c <ip_reass_free_complete_datagram+0x2c>
 8012940:	4b2a      	ldr	r3, [pc, #168]	@ (80129ec <ip_reass_free_complete_datagram+0xcc>)
 8012942:	22ad      	movs	r2, #173	@ 0xad
 8012944:	492c      	ldr	r1, [pc, #176]	@ (80129f8 <ip_reass_free_complete_datagram+0xd8>)
 8012946:	482b      	ldr	r0, [pc, #172]	@ (80129f4 <ip_reass_free_complete_datagram+0xd4>)
 8012948:	f001 fea6 	bl	8014698 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801294c:	6867      	ldr	r7, [r4, #4]
 801294e:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8012950:	889a      	ldrh	r2, [r3, #4]
 8012952:	bb92      	cbnz	r2, 80129ba <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8012954:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012956:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 801295a:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801295c:	f104 0208 	add.w	r2, r4, #8
 8012960:	f852 0b04 	ldr.w	r0, [r2], #4
 8012964:	428a      	cmp	r2, r1
 8012966:	f843 0b04 	str.w	r0, [r3], #4
 801296a:	d1f9      	bne.n	8012960 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801296c:	2101      	movs	r1, #1
 801296e:	4638      	mov	r0, r7
 8012970:	f7ff fdba 	bl	80124e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012974:	4638      	mov	r0, r7
 8012976:	f7fb fa9f 	bl	800deb8 <pbuf_clen>
 801297a:	4605      	mov	r5, r0
    pbuf_free(p);
 801297c:	4638      	mov	r0, r7
 801297e:	f7fb f957 	bl	800dc30 <pbuf_free>
  p = ipr->p;
 8012982:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012984:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80129ec <ip_reass_free_complete_datagram+0xcc>
 8012988:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8012a04 <ip_reass_free_complete_datagram+0xe4>
 801298c:	f8df a064 	ldr.w	sl, [pc, #100]	@ 80129f4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8012990:	b9af      	cbnz	r7, 80129be <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8012992:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012994:	4c19      	ldr	r4, [pc, #100]	@ (80129fc <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8012996:	4631      	mov	r1, r6
 8012998:	f7ff ffa0 	bl	80128dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801299c:	8823      	ldrh	r3, [r4, #0]
 801299e:	42ab      	cmp	r3, r5
 80129a0:	d205      	bcs.n	80129ae <ip_reass_free_complete_datagram+0x8e>
 80129a2:	4b12      	ldr	r3, [pc, #72]	@ (80129ec <ip_reass_free_complete_datagram+0xcc>)
 80129a4:	22d2      	movs	r2, #210	@ 0xd2
 80129a6:	4916      	ldr	r1, [pc, #88]	@ (8012a00 <ip_reass_free_complete_datagram+0xe0>)
 80129a8:	4812      	ldr	r0, [pc, #72]	@ (80129f4 <ip_reass_free_complete_datagram+0xd4>)
 80129aa:	f001 fe75 	bl	8014698 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80129ae:	8823      	ldrh	r3, [r4, #0]
}
 80129b0:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80129b2:	1b5b      	subs	r3, r3, r5
 80129b4:	8023      	strh	r3, [r4, #0]
}
 80129b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80129ba:	2500      	movs	r5, #0
 80129bc:	e7e1      	b.n	8012982 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80129be:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 80129c0:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 80129c2:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80129c6:	f7fb fa77 	bl	800deb8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80129ca:	4405      	add	r5, r0
 80129cc:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80129d0:	db05      	blt.n	80129de <ip_reass_free_complete_datagram+0xbe>
 80129d2:	4643      	mov	r3, r8
 80129d4:	22cc      	movs	r2, #204	@ 0xcc
 80129d6:	4649      	mov	r1, r9
 80129d8:	4650      	mov	r0, sl
 80129da:	f001 fe5d 	bl	8014698 <iprintf>
    pbuf_free(pcur);
 80129de:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80129e0:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 80129e2:	465f      	mov	r7, fp
    pbuf_free(pcur);
 80129e4:	f7fb f924 	bl	800dc30 <pbuf_free>
 80129e8:	e7d2      	b.n	8012990 <ip_reass_free_complete_datagram+0x70>
 80129ea:	bf00      	nop
 80129ec:	08017dec 	.word	0x08017dec
 80129f0:	08017e2c 	.word	0x08017e2c
 80129f4:	08015927 	.word	0x08015927
 80129f8:	08017e38 	.word	0x08017e38
 80129fc:	2000f48a 	.word	0x2000f48a
 8012a00:	08017e67 	.word	0x08017e67
 8012a04:	08017e4a 	.word	0x08017e4a

08012a08 <ip_reass_remove_oldest_datagram>:
{
 8012a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8012a10:	2600      	movs	r6, #0
    r = reassdatagrams;
 8012a12:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8012a80 <ip_reass_remove_oldest_datagram+0x78>
 8012a16:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8012a1a:	b373      	cbz	r3, 8012a7a <ip_reass_remove_oldest_datagram+0x72>
 8012a1c:	2400      	movs	r4, #0
 8012a1e:	4621      	mov	r1, r4
 8012a20:	46a4      	mov	ip, r4
 8012a22:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012a24:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8012a28:	695a      	ldr	r2, [r3, #20]
 8012a2a:	4572      	cmp	r2, lr
 8012a2c:	d109      	bne.n	8012a42 <ip_reass_remove_oldest_datagram+0x3a>
 8012a2e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8012a32:	699a      	ldr	r2, [r3, #24]
 8012a34:	4572      	cmp	r2, lr
 8012a36:	d104      	bne.n	8012a42 <ip_reass_remove_oldest_datagram+0x3a>
 8012a38:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8012a3c:	88aa      	ldrh	r2, [r5, #4]
 8012a3e:	4596      	cmp	lr, r2
 8012a40:	d008      	beq.n	8012a54 <ip_reass_remove_oldest_datagram+0x4c>
        other_datagrams++;
 8012a42:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8012a44:	b1b0      	cbz	r0, 8012a74 <ip_reass_remove_oldest_datagram+0x6c>
        } else if (r->timer <= oldest->timer) {
 8012a46:	7fc2      	ldrb	r2, [r0, #31]
 8012a48:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest = r;
 8012a4c:	4596      	cmp	lr, r2
 8012a4e:	bf9c      	itt	ls
 8012a50:	4661      	movls	r1, ip
 8012a52:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8012a54:	681a      	ldr	r2, [r3, #0]
        prev = r;
 8012a56:	469c      	mov	ip, r3
      if (r->next != NULL) {
 8012a58:	b952      	cbnz	r2, 8012a70 <ip_reass_remove_oldest_datagram+0x68>
    if (oldest != NULL) {
 8012a5a:	b110      	cbz	r0, 8012a62 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012a5c:	f7ff ff60 	bl	8012920 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8012a60:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012a62:	42be      	cmp	r6, r7
 8012a64:	da01      	bge.n	8012a6a <ip_reass_remove_oldest_datagram+0x62>
 8012a66:	2c01      	cmp	r4, #1
 8012a68:	dcd5      	bgt.n	8012a16 <ip_reass_remove_oldest_datagram+0xe>
}
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	4613      	mov	r3, r2
 8012a72:	e7d7      	b.n	8012a24 <ip_reass_remove_oldest_datagram+0x1c>
          oldest_prev = prev;
 8012a74:	4661      	mov	r1, ip
          oldest = r;
 8012a76:	4618      	mov	r0, r3
 8012a78:	e7ec      	b.n	8012a54 <ip_reass_remove_oldest_datagram+0x4c>
 8012a7a:	461c      	mov	r4, r3
 8012a7c:	e7f1      	b.n	8012a62 <ip_reass_remove_oldest_datagram+0x5a>
 8012a7e:	bf00      	nop
 8012a80:	2000f48c 	.word	0x2000f48c

08012a84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012a84:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012a86:	4604      	mov	r4, r0
 8012a88:	b930      	cbnz	r0, 8012a98 <ipfrag_free_pbuf_custom+0x14>
 8012a8a:	4b08      	ldr	r3, [pc, #32]	@ (8012aac <ipfrag_free_pbuf_custom+0x28>)
 8012a8c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012a90:	4907      	ldr	r1, [pc, #28]	@ (8012ab0 <ipfrag_free_pbuf_custom+0x2c>)
 8012a92:	4808      	ldr	r0, [pc, #32]	@ (8012ab4 <ipfrag_free_pbuf_custom+0x30>)
 8012a94:	f001 fe00 	bl	8014698 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8012a98:	6960      	ldr	r0, [r4, #20]
 8012a9a:	b108      	cbz	r0, 8012aa0 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8012a9c:	f7fb f8c8 	bl	800dc30 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8012aa0:	4621      	mov	r1, r4
 8012aa2:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8012aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8012aa8:	f7fa bec6 	b.w	800d838 <memp_free>
 8012aac:	08017dec 	.word	0x08017dec
 8012ab0:	08017e89 	.word	0x08017e89
 8012ab4:	08015927 	.word	0x08015927

08012ab8 <ip_reass_tmr>:
{
 8012ab8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8012aba:	4b09      	ldr	r3, [pc, #36]	@ (8012ae0 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8012abc:	2400      	movs	r4, #0
  r = reassdatagrams;
 8012abe:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8012ac0:	b900      	cbnz	r0, 8012ac4 <ip_reass_tmr+0xc>
}
 8012ac2:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8012ac4:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8012ac6:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8012ac8:	b123      	cbz	r3, 8012ad4 <ip_reass_tmr+0x1c>
      r->timer--;
 8012aca:	3b01      	subs	r3, #1
 8012acc:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8012ace:	4604      	mov	r4, r0
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	e7f5      	b.n	8012ac0 <ip_reass_tmr+0x8>
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	f7ff ff23 	bl	8012920 <ip_reass_free_complete_datagram>
 8012ada:	4620      	mov	r0, r4
 8012adc:	e7f7      	b.n	8012ace <ip_reass_tmr+0x16>
 8012ade:	bf00      	nop
 8012ae0:	2000f48c 	.word	0x2000f48c

08012ae4 <ip4_reass>:
{
 8012ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8012ae8:	6845      	ldr	r5, [r0, #4]
{
 8012aea:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012aec:	782b      	ldrb	r3, [r5, #0]
 8012aee:	f003 030f 	and.w	r3, r3, #15
 8012af2:	2b05      	cmp	r3, #5
 8012af4:	f040 80a6 	bne.w	8012c44 <ip4_reass+0x160>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012af8:	88e8      	ldrh	r0, [r5, #6]
 8012afa:	f7fa fb41 	bl	800d180 <lwip_htons>
 8012afe:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012b00:	8868      	ldrh	r0, [r5, #2]
 8012b02:	f7fa fb3d 	bl	800d180 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8012b06:	782b      	ldrb	r3, [r5, #0]
 8012b08:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8012b0c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8012b10:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012b14:	f0c0 8096 	bcc.w	8012c44 <ip4_reass+0x160>
  len = (u16_t)(len - hlen);
 8012b18:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012b1a:	4cb6      	ldr	r4, [pc, #728]	@ (8012df4 <ip4_reass+0x310>)
  clen = pbuf_clen(p);
 8012b1c:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8012b22:	f7fb f9c9 	bl	800deb8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012b26:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8012b28:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012b2a:	4403      	add	r3, r0
 8012b2c:	2b0a      	cmp	r3, #10
 8012b2e:	dc7f      	bgt.n	8012c30 <ip4_reass+0x14c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b30:	4eb1      	ldr	r6, [pc, #708]	@ (8012df8 <ip4_reass+0x314>)
 8012b32:	6834      	ldr	r4, [r6, #0]
 8012b34:	2c00      	cmp	r4, #0
 8012b36:	f040 808a 	bne.w	8012c4e <ip4_reass+0x16a>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b3a:	2004      	movs	r0, #4
 8012b3c:	f7fa fe5e 	bl	800d7fc <memp_malloc>
  if (ipr == NULL) {
 8012b40:	4604      	mov	r4, r0
 8012b42:	b958      	cbnz	r0, 8012b5c <ip4_reass+0x78>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012b44:	4651      	mov	r1, sl
 8012b46:	4628      	mov	r0, r5
 8012b48:	f7ff ff5e 	bl	8012a08 <ip_reass_remove_oldest_datagram>
 8012b4c:	4582      	cmp	sl, r0
 8012b4e:	dc79      	bgt.n	8012c44 <ip4_reass+0x160>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b50:	2004      	movs	r0, #4
 8012b52:	f7fa fe53 	bl	800d7fc <memp_malloc>
    if (ipr == NULL)
 8012b56:	4604      	mov	r4, r0
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	d073      	beq.n	8012c44 <ip4_reass+0x160>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012b5c:	221c      	movs	r2, #28
 8012b5e:	2100      	movs	r1, #0
 8012b60:	1d20      	adds	r0, r4, #4
 8012b62:	f001 ff9f 	bl	8014aa4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012b66:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012b68:	f104 0208 	add.w	r2, r4, #8
 8012b6c:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8012b70:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8012b72:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8012b74:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8012b76:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012b78:	462b      	mov	r3, r5
 8012b7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8012b7e:	428b      	cmp	r3, r1
 8012b80:	f842 0b04 	str.w	r0, [r2], #4
 8012b84:	d1f9      	bne.n	8012b7a <ip4_reass+0x96>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012b86:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012b8a:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8012b8e:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012b92:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8012b96:	d10a      	bne.n	8012bae <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8012b98:	9b01      	ldr	r3, [sp, #4]
 8012b9a:	18fb      	adds	r3, r7, r3
 8012b9c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012b9e:	429f      	cmp	r7, r3
 8012ba0:	f200 8154 	bhi.w	8012e4c <ip4_reass+0x368>
 8012ba4:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	f200 814f 	bhi.w	8012e4c <ip4_reass+0x368>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012bae:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012bb2:	8868      	ldrh	r0, [r5, #2]
 8012bb4:	f7fa fae4 	bl	800d180 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8012bb8:	782b      	ldrb	r3, [r5, #0]
 8012bba:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8012bbe:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8012bc2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012bc6:	f0c0 8141 	bcc.w	8012e4c <ip4_reass+0x368>
  len = (u16_t)(len - hlen);
 8012bca:	1a80      	subs	r0, r0, r2
 8012bcc:	fa1f f980 	uxth.w	r9, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012bd0:	88e8      	ldrh	r0, [r5, #6]
 8012bd2:	f7fa fad5 	bl	800d180 <lwip_htons>
 8012bd6:	f3c0 030c 	ubfx	r3, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012bda:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 8012bde:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012be0:	00db      	lsls	r3, r3, #3
  iprh->next_pbuf = NULL;
 8012be2:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8012be4:	eb09 0003 	add.w	r0, r9, r3
  iprh->next_pbuf = NULL;
 8012be8:	7075      	strb	r5, [r6, #1]
 8012bea:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8012bec:	fa1f fc80 	uxth.w	ip, r0
  iprh->next_pbuf = NULL;
 8012bf0:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8012bf2:	80b3      	strh	r3, [r6, #4]
  if (iprh->end < offset) {
 8012bf4:	4563      	cmp	r3, ip
  iprh->end = (u16_t)(offset + len);
 8012bf6:	80f0      	strh	r0, [r6, #6]
  if (iprh->end < offset) {
 8012bf8:	f200 8128 	bhi.w	8012e4c <ip4_reass+0x368>
  for (q = ipr->p; q != NULL;) {
 8012bfc:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8012c00:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 8012c04:	4670      	mov	r0, lr
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d14a      	bne.n	8012ca0 <ip4_reass+0x1bc>
    if (iprh_prev != NULL) {
 8012c0a:	2d00      	cmp	r5, #0
 8012c0c:	f000 80e7 	beq.w	8012dde <ip4_reass+0x2fa>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012c10:	88ea      	ldrh	r2, [r5, #6]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d906      	bls.n	8012c24 <ip4_reass+0x140>
 8012c16:	4b79      	ldr	r3, [pc, #484]	@ (8012dfc <ip4_reass+0x318>)
 8012c18:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8012c1c:	4978      	ldr	r1, [pc, #480]	@ (8012e00 <ip4_reass+0x31c>)
 8012c1e:	4879      	ldr	r0, [pc, #484]	@ (8012e04 <ip4_reass+0x320>)
 8012c20:	f001 fd3a 	bl	8014698 <iprintf>
      if (iprh_prev->end != iprh->start) {
 8012c24:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 8012c26:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8012c2a:	88b3      	ldrh	r3, [r6, #4]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	e04a      	b.n	8012cc6 <ip4_reass+0x1e2>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c30:	4601      	mov	r1, r0
 8012c32:	4628      	mov	r0, r5
 8012c34:	f7ff fee8 	bl	8012a08 <ip_reass_remove_oldest_datagram>
 8012c38:	b120      	cbz	r0, 8012c44 <ip4_reass+0x160>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012c3a:	8823      	ldrh	r3, [r4, #0]
 8012c3c:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c3e:	2b0a      	cmp	r3, #10
 8012c40:	f77f af76 	ble.w	8012b30 <ip4_reass+0x4c>
  pbuf_free(p);
 8012c44:	4640      	mov	r0, r8
 8012c46:	f7fa fff3 	bl	800dc30 <pbuf_free>
  return NULL;
 8012c4a:	2700      	movs	r7, #0
 8012c4c:	e0b1      	b.n	8012db2 <ip4_reass+0x2ce>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012c4e:	68eb      	ldr	r3, [r5, #12]
 8012c50:	6962      	ldr	r2, [r4, #20]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d107      	bne.n	8012c66 <ip4_reass+0x182>
 8012c56:	692b      	ldr	r3, [r5, #16]
 8012c58:	69a2      	ldr	r2, [r4, #24]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d103      	bne.n	8012c66 <ip4_reass+0x182>
 8012c5e:	89a2      	ldrh	r2, [r4, #12]
 8012c60:	88ab      	ldrh	r3, [r5, #4]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d001      	beq.n	8012c6a <ip4_reass+0x186>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012c66:	6824      	ldr	r4, [r4, #0]
 8012c68:	e764      	b.n	8012b34 <ip4_reass+0x50>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012c6a:	88e8      	ldrh	r0, [r5, #6]
 8012c6c:	f7fa fa88 	bl	800d180 <lwip_htons>
 8012c70:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d186      	bne.n	8012b86 <ip4_reass+0xa2>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012c78:	89e0      	ldrh	r0, [r4, #14]
 8012c7a:	f7fa fa81 	bl	800d180 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012c7e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012c82:	2800      	cmp	r0, #0
 8012c84:	f43f af7f 	beq.w	8012b86 <ip4_reass+0xa2>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012c88:	462b      	mov	r3, r5
 8012c8a:	f104 0208 	add.w	r2, r4, #8
 8012c8e:	f105 0114 	add.w	r1, r5, #20
 8012c92:	f853 0b04 	ldr.w	r0, [r3], #4
 8012c96:	428b      	cmp	r3, r1
 8012c98:	f842 0b04 	str.w	r0, [r2], #4
 8012c9c:	d1f9      	bne.n	8012c92 <ip4_reass+0x1ae>
 8012c9e:	e772      	b.n	8012b86 <ip4_reass+0xa2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012ca0:	6842      	ldr	r2, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 8012ca2:	8891      	ldrh	r1, [r2, #4]
 8012ca4:	428b      	cmp	r3, r1
 8012ca6:	f080 808d 	bcs.w	8012dc4 <ip4_reass+0x2e0>
      iprh->next_pbuf = q;
 8012caa:	6030      	str	r0, [r6, #0]
      if (iprh_prev != NULL) {
 8012cac:	2d00      	cmp	r5, #0
 8012cae:	f000 8084 	beq.w	8012dba <ip4_reass+0x2d6>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012cb2:	88ea      	ldrh	r2, [r5, #6]
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	f0c0 80c9 	bcc.w	8012e4c <ip4_reass+0x368>
 8012cba:	458c      	cmp	ip, r1
 8012cbc:	f200 80c6 	bhi.w	8012e4c <ip4_reass+0x368>
        if (iprh_prev->end != iprh->start) {
 8012cc0:	4293      	cmp	r3, r2
        iprh_prev->next_pbuf = new_p;
 8012cc2:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8012cc6:	d001      	beq.n	8012ccc <ip4_reass+0x1e8>
          valid = 0;
 8012cc8:	f04f 0900 	mov.w	r9, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012ccc:	f1bb 0f00 	cmp.w	fp, #0
 8012cd0:	d004      	beq.n	8012cdc <ip4_reass+0x1f8>
 8012cd2:	7fa3      	ldrb	r3, [r4, #30]
 8012cd4:	f013 0301 	ands.w	r3, r3, #1
 8012cd8:	f000 80a6 	beq.w	8012e28 <ip4_reass+0x344>
    if (valid) {
 8012cdc:	f1b9 0f00 	cmp.w	r9, #0
 8012ce0:	d01e      	beq.n	8012d20 <ip4_reass+0x23c>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012ce2:	6863      	ldr	r3, [r4, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	f000 809f 	beq.w	8012e28 <ip4_reass+0x344>
 8012cea:	6859      	ldr	r1, [r3, #4]
 8012cec:	888b      	ldrh	r3, [r1, #4]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f040 809a 	bne.w	8012e28 <ip4_reass+0x344>
        q = iprh->next_pbuf;
 8012cf4:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f040 808e 	bne.w	8012e18 <ip4_reass+0x334>
          LWIP_ASSERT("sanity check",
 8012cfc:	42b1      	cmp	r1, r6
 8012cfe:	d106      	bne.n	8012d0e <ip4_reass+0x22a>
 8012d00:	4b3e      	ldr	r3, [pc, #248]	@ (8012dfc <ip4_reass+0x318>)
 8012d02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012d06:	4940      	ldr	r1, [pc, #256]	@ (8012e08 <ip4_reass+0x324>)
 8012d08:	483e      	ldr	r0, [pc, #248]	@ (8012e04 <ip4_reass+0x320>)
 8012d0a:	f001 fcc5 	bl	8014698 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012d0e:	6833      	ldr	r3, [r6, #0]
 8012d10:	b133      	cbz	r3, 8012d20 <ip4_reass+0x23c>
 8012d12:	4b3a      	ldr	r3, [pc, #232]	@ (8012dfc <ip4_reass+0x318>)
 8012d14:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8012d18:	493c      	ldr	r1, [pc, #240]	@ (8012e0c <ip4_reass+0x328>)
 8012d1a:	483a      	ldr	r0, [pc, #232]	@ (8012e04 <ip4_reass+0x320>)
 8012d1c:	f001 fcbc 	bl	8014698 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012d20:	4e34      	ldr	r6, [pc, #208]	@ (8012df4 <ip4_reass+0x310>)
 8012d22:	8833      	ldrh	r3, [r6, #0]
 8012d24:	4453      	add	r3, sl
 8012d26:	8033      	strh	r3, [r6, #0]
  if (is_last) {
 8012d28:	f1bb 0f00 	cmp.w	fp, #0
 8012d2c:	d106      	bne.n	8012d3c <ip4_reass+0x258>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012d32:	7fa3      	ldrb	r3, [r4, #30]
 8012d34:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8012d38:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012d3a:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012d3c:	f1b9 0f01 	cmp.w	r9, #1
 8012d40:	d183      	bne.n	8012c4a <ip4_reass+0x166>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012d42:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012d44:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012d48:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012d4a:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012d4c:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012d50:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012d52:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012d54:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012d56:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012d58:	f853 cb04 	ldr.w	ip, [r3], #4
 8012d5c:	428b      	cmp	r3, r1
 8012d5e:	f842 cb04 	str.w	ip, [r2], #4
 8012d62:	d1f9      	bne.n	8012d58 <ip4_reass+0x274>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012d64:	f7fa fa0c 	bl	800d180 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8012d68:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012d6a:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012d6c:	71bb      	strb	r3, [r7, #6]
 8012d6e:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012d70:	72bb      	strb	r3, [r7, #10]
 8012d72:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8012d74:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8012d76:	2d00      	cmp	r5, #0
 8012d78:	d159      	bne.n	8012e2e <ip4_reass+0x34a>
    if (ipr == reassdatagrams) {
 8012d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8012df8 <ip4_reass+0x314>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
        if (ipr_prev->next == ipr) {
 8012d7e:	42a3      	cmp	r3, r4
 8012d80:	d002      	beq.n	8012d88 <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d82:	461d      	mov	r5, r3
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d15f      	bne.n	8012e48 <ip4_reass+0x364>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012d88:	4620      	mov	r0, r4
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7ff fda6 	bl	80128dc <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8012d90:	4638      	mov	r0, r7
 8012d92:	f7fb f891 	bl	800deb8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d96:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(p);
 8012d98:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d9a:	4283      	cmp	r3, r0
 8012d9c:	d206      	bcs.n	8012dac <ip4_reass+0x2c8>
 8012d9e:	4b17      	ldr	r3, [pc, #92]	@ (8012dfc <ip4_reass+0x318>)
 8012da0:	f240 229b 	movw	r2, #667	@ 0x29b
 8012da4:	491a      	ldr	r1, [pc, #104]	@ (8012e10 <ip4_reass+0x32c>)
 8012da6:	4817      	ldr	r0, [pc, #92]	@ (8012e04 <ip4_reass+0x320>)
 8012da8:	f001 fc76 	bl	8014698 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012dac:	8833      	ldrh	r3, [r6, #0]
 8012dae:	1b1b      	subs	r3, r3, r4
 8012db0:	8033      	strh	r3, [r6, #0]
}
 8012db2:	4638      	mov	r0, r7
 8012db4:	b003      	add	sp, #12
 8012db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8012dba:	458c      	cmp	ip, r1
 8012dbc:	d846      	bhi.n	8012e4c <ip4_reass+0x368>
      ipr->p = new_p;
 8012dbe:	f8c4 8004 	str.w	r8, [r4, #4]
 8012dc2:	e783      	b.n	8012ccc <ip4_reass+0x1e8>
    } else if (iprh->start == iprh_tmp->start) {
 8012dc4:	d042      	beq.n	8012e4c <ip4_reass+0x368>
    } else if (iprh->start < iprh_tmp->end) {
 8012dc6:	88d0      	ldrh	r0, [r2, #6]
 8012dc8:	4298      	cmp	r0, r3
 8012dca:	d83f      	bhi.n	8012e4c <ip4_reass+0x368>
      if (iprh_prev != NULL) {
 8012dcc:	b125      	cbz	r5, 8012dd8 <ip4_reass+0x2f4>
        if (iprh_prev->end != iprh_tmp->start) {
 8012dce:	88e8      	ldrh	r0, [r5, #6]
          valid = 0;
 8012dd0:	4288      	cmp	r0, r1
 8012dd2:	bf18      	it	ne
 8012dd4:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 8012dd8:	6810      	ldr	r0, [r2, #0]
    iprh_prev = iprh_tmp;
 8012dda:	4615      	mov	r5, r2
 8012ddc:	e713      	b.n	8012c06 <ip4_reass+0x122>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012dde:	f1be 0f00 	cmp.w	lr, #0
 8012de2:	d0ec      	beq.n	8012dbe <ip4_reass+0x2da>
 8012de4:	4b05      	ldr	r3, [pc, #20]	@ (8012dfc <ip4_reass+0x318>)
 8012de6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8012dea:	490a      	ldr	r1, [pc, #40]	@ (8012e14 <ip4_reass+0x330>)
 8012dec:	4805      	ldr	r0, [pc, #20]	@ (8012e04 <ip4_reass+0x320>)
 8012dee:	f001 fc53 	bl	8014698 <iprintf>
 8012df2:	e7e4      	b.n	8012dbe <ip4_reass+0x2da>
 8012df4:	2000f48a 	.word	0x2000f48a
 8012df8:	2000f48c 	.word	0x2000f48c
 8012dfc:	08017dec 	.word	0x08017dec
 8012e00:	08017e95 	.word	0x08017e95
 8012e04:	08015927 	.word	0x08015927
 8012e08:	08017eea 	.word	0x08017eea
 8012e0c:	08017ef7 	.word	0x08017ef7
 8012e10:	08017f19 	.word	0x08017f19
 8012e14:	08017eb3 	.word	0x08017eb3
          iprh = (struct ip_reass_helper *)q->payload;
 8012e18:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8012e1a:	88f0      	ldrh	r0, [r6, #6]
 8012e1c:	8893      	ldrh	r3, [r2, #4]
 8012e1e:	4298      	cmp	r0, r3
 8012e20:	d102      	bne.n	8012e28 <ip4_reass+0x344>
          q = iprh->next_pbuf;
 8012e22:	6813      	ldr	r3, [r2, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 8012e24:	4616      	mov	r6, r2
 8012e26:	e766      	b.n	8012cf6 <ip4_reass+0x212>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012e28:	f04f 0900 	mov.w	r9, #0
 8012e2c:	e778      	b.n	8012d20 <ip4_reass+0x23c>
      iprh = (struct ip_reass_helper *)r->payload;
 8012e2e:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8012e32:	2114      	movs	r1, #20
 8012e34:	4628      	mov	r0, r5
 8012e36:	f7fa fecf 	bl	800dbd8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	4638      	mov	r0, r7
 8012e3e:	f7fb f85f 	bl	800df00 <pbuf_cat>
      r = iprh->next_pbuf;
 8012e42:	f8d8 5000 	ldr.w	r5, [r8]
 8012e46:	e796      	b.n	8012d76 <ip4_reass+0x292>
        if (ipr_prev->next == ipr) {
 8012e48:	682b      	ldr	r3, [r5, #0]
 8012e4a:	e798      	b.n	8012d7e <ip4_reass+0x29a>
  if (ipr->p == NULL) {
 8012e4c:	6863      	ldr	r3, [r4, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f47f aef8 	bne.w	8012c44 <ip4_reass+0x160>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012e54:	4b07      	ldr	r3, [pc, #28]	@ (8012e74 <ip4_reass+0x390>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	42a3      	cmp	r3, r4
 8012e5a:	d006      	beq.n	8012e6a <ip4_reass+0x386>
 8012e5c:	4b06      	ldr	r3, [pc, #24]	@ (8012e78 <ip4_reass+0x394>)
 8012e5e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012e62:	4906      	ldr	r1, [pc, #24]	@ (8012e7c <ip4_reass+0x398>)
 8012e64:	4806      	ldr	r0, [pc, #24]	@ (8012e80 <ip4_reass+0x39c>)
 8012e66:	f001 fc17 	bl	8014698 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7ff fd35 	bl	80128dc <ip_reass_dequeue_datagram>
 8012e72:	e6e7      	b.n	8012c44 <ip4_reass+0x160>
 8012e74:	2000f48c 	.word	0x2000f48c
 8012e78:	08017dec 	.word	0x08017dec
 8012e7c:	08017f34 	.word	0x08017f34
 8012e80:	08015927 	.word	0x08015927

08012e84 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012e88:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 8012e8a:	b08d      	sub	sp, #52	@ 0x34
 8012e8c:	4605      	mov	r5, r0
 8012e8e:	4689      	mov	r9, r1
 8012e90:	9209      	str	r2, [sp, #36]	@ 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012e92:	f1b3 0214 	subs.w	r2, r3, #20
 8012e96:	bf48      	it	mi
 8012e98:	f1a3 020d 	submi.w	r2, r3, #13
 8012e9c:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8012ea0:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012ea2:	6843      	ldr	r3, [r0, #4]
 8012ea4:	9303      	str	r3, [sp, #12]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	f003 030f 	and.w	r3, r3, #15
 8012eac:	2b05      	cmp	r3, #5
 8012eae:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8012eb2:	f040 80bb 	bne.w	801302c <ip4_frag+0x1a8>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012eb6:	8943      	ldrh	r3, [r0, #10]
 8012eb8:	2b13      	cmp	r3, #19
 8012eba:	f240 80b7 	bls.w	801302c <ip4_frag+0x1a8>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012ebe:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 8012ec0:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012ec2:	88d8      	ldrh	r0, [r3, #6]
 8012ec4:	f7fa f95c 	bl	800d180 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8012ec8:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012ecc:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8012ece:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 8012ed0:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8012ed4:	3c14      	subs	r4, #20
 8012ed6:	9308      	str	r3, [sp, #32]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012ed8:	9b06      	ldr	r3, [sp, #24]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8012eda:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012edc:	00db      	lsls	r3, r3, #3
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	9307      	str	r3, [sp, #28]
  while (left) {
 8012ee2:	b90c      	cbnz	r4, 8012ee8 <ip4_frag+0x64>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	e062      	b.n	8012fae <ip4_frag+0x12a>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012ee8:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012eea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012eee:	2114      	movs	r1, #20
 8012ef0:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012ef2:	42a3      	cmp	r3, r4
 8012ef4:	bf28      	it	cs
 8012ef6:	4623      	movcs	r3, r4
 8012ef8:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012efa:	f7fa ff03 	bl	800dd04 <pbuf_alloc>
    if (rambuf == NULL) {
 8012efe:	4680      	mov	r8, r0
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d052      	beq.n	8012faa <ip4_frag+0x126>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012f04:	8943      	ldrh	r3, [r0, #10]
 8012f06:	2b13      	cmp	r3, #19
 8012f08:	d806      	bhi.n	8012f18 <ip4_frag+0x94>
 8012f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8013034 <ip4_frag+0x1b0>)
 8012f0c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012f10:	4949      	ldr	r1, [pc, #292]	@ (8013038 <ip4_frag+0x1b4>)
 8012f12:	484a      	ldr	r0, [pc, #296]	@ (801303c <ip4_frag+0x1b8>)
 8012f14:	f001 fbc0 	bl	8014698 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012f18:	9b03      	ldr	r3, [sp, #12]
 8012f1a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	3114      	adds	r1, #20
 8012f22:	f853 0b04 	ldr.w	r0, [r3], #4
 8012f26:	428b      	cmp	r3, r1
 8012f28:	f842 0b04 	str.w	r0, [r2], #4
 8012f2c:	d1f9      	bne.n	8012f22 <ip4_frag+0x9e>
    while (left_to_copy) {
 8012f2e:	9b04      	ldr	r3, [sp, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012f30:	f8d8 b004 	ldr.w	fp, [r8, #4]
    while (left_to_copy) {
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d163      	bne.n	8013000 <ip4_frag+0x17c>
    tmp = (IP_OFFMASK & (ofo));
 8012f38:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8012f3a:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 8012f3c:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8012f40:	f8b9 3024 	ldrh.w	r3, [r9, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 8012f44:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8012f46:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8012f48:	42a3      	cmp	r3, r4
 8012f4a:	dd01      	ble.n	8012f50 <ip4_frag+0xcc>
 8012f4c:	9b08      	ldr	r3, [sp, #32]
 8012f4e:	b10b      	cbz	r3, 8012f54 <ip4_frag+0xd0>
      tmp = tmp | IP_MF;
 8012f50:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012f54:	f7fa f914 	bl	800d180 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f58:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012f5a:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f5e:	f103 0014 	add.w	r0, r3, #20
 8012f62:	b280      	uxth	r0, r0
 8012f64:	f7fa f90c 	bl	800d180 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8012f68:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8012f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f6c:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f6e:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8012f72:	4648      	mov	r0, r9
    IPH_CHKSUM_SET(iphdr, 0);
 8012f74:	f88b 300a 	strb.w	r3, [fp, #10]
 8012f78:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8012f7c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012f80:	4798      	blx	r3
    pbuf_free(rambuf);
 8012f82:	4640      	mov	r0, r8
 8012f84:	f7fa fe54 	bl	800dc30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012f88:	9b04      	ldr	r3, [sp, #16]
 8012f8a:	1ae3      	subs	r3, r4, r3
 8012f8c:	b29c      	uxth	r4, r3
    ofo = (u16_t)(ofo + nfb);
 8012f8e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8012f92:	4413      	add	r3, r2
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	9305      	str	r3, [sp, #20]
 8012f98:	e7a3      	b.n	8012ee2 <ip4_frag+0x5e>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012f9a:	2005      	movs	r0, #5
 8012f9c:	f7fa fc2e 	bl	800d7fc <memp_malloc>
      if (pcr == NULL) {
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	b938      	cbnz	r0, 8012fb4 <ip4_frag+0x130>
        pbuf_free(rambuf);
 8012fa4:	4640      	mov	r0, r8
 8012fa6:	f7fa fe43 	bl	800dc30 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012faa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012fae:	b00d      	add	sp, #52	@ 0x34
 8012fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fb4:	9601      	str	r6, [sp, #4]
 8012fb6:	4631      	mov	r1, r6
 8012fb8:	686a      	ldr	r2, [r5, #4]
 8012fba:	900a      	str	r0, [sp, #40]	@ 0x28
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	443a      	add	r2, r7
 8012fc0:	9200      	str	r2, [sp, #0]
 8012fc2:	2241      	movs	r2, #65	@ 0x41
 8012fc4:	f7fa fdec 	bl	800dba0 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8012fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fca:	b920      	cbnz	r0, 8012fd6 <ip4_frag+0x152>
  memp_free(MEMP_FRAG_PBUF, p);
 8012fcc:	4619      	mov	r1, r3
 8012fce:	2005      	movs	r0, #5
 8012fd0:	f7fa fc32 	bl	800d838 <memp_free>
 8012fd4:	e7e6      	b.n	8012fa4 <ip4_frag+0x120>
 8012fd6:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012fda:	ebaa 0a06 	sub.w	sl, sl, r6
      pbuf_ref(p);
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f7fa ff72 	bl	800dec8 <pbuf_ref>
      pcr->original = p;
 8012fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012fe6:	4a16      	ldr	r2, [pc, #88]	@ (8013040 <ip4_frag+0x1bc>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012fe8:	fa1f fa8a 	uxth.w	sl, sl
      pbuf_cat(rambuf, newpbuf);
 8012fec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012fee:	4640      	mov	r0, r8
      pcr->original = p;
 8012ff0:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012ff2:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8012ff4:	f7fa ff84 	bl	800df00 <pbuf_cat>
      if (left_to_copy) {
 8012ff8:	f1ba 0f00 	cmp.w	sl, #0
 8012ffc:	d113      	bne.n	8013026 <ip4_frag+0x1a2>
 8012ffe:	e79b      	b.n	8012f38 <ip4_frag+0xb4>
 8013000:	f8dd a010 	ldr.w	sl, [sp, #16]
      u16_t plen = (u16_t)(p->len - poff);
 8013004:	896b      	ldrh	r3, [r5, #10]
 8013006:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013008:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 801300a:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801300c:	d206      	bcs.n	801301c <ip4_frag+0x198>
 801300e:	4b09      	ldr	r3, [pc, #36]	@ (8013034 <ip4_frag+0x1b0>)
 8013010:	f240 322d 	movw	r2, #813	@ 0x32d
 8013014:	490b      	ldr	r1, [pc, #44]	@ (8013044 <ip4_frag+0x1c0>)
 8013016:	4809      	ldr	r0, [pc, #36]	@ (801303c <ip4_frag+0x1b8>)
 8013018:	f001 fb3e 	bl	8014698 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801301c:	4556      	cmp	r6, sl
 801301e:	bf28      	it	cs
 8013020:	4656      	movcs	r6, sl
      if (!newpbuflen) {
 8013022:	2e00      	cmp	r6, #0
 8013024:	d1b9      	bne.n	8012f9a <ip4_frag+0x116>
        p = p->next;
 8013026:	682d      	ldr	r5, [r5, #0]
 8013028:	2700      	movs	r7, #0
 801302a:	e7eb      	b.n	8013004 <ip4_frag+0x180>
    return ERR_VAL;
 801302c:	f06f 0005 	mvn.w	r0, #5
 8013030:	e7bd      	b.n	8012fae <ip4_frag+0x12a>
 8013032:	bf00      	nop
 8013034:	08017dec 	.word	0x08017dec
 8013038:	08017f54 	.word	0x08017f54
 801303c:	08015927 	.word	0x08015927
 8013040:	08012a85 	.word	0x08012a85
 8013044:	08017f74 	.word	0x08017f74

08013048 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013048:	8943      	ldrh	r3, [r0, #10]
 801304a:	2b0e      	cmp	r3, #14
{
 801304c:	b570      	push	{r4, r5, r6, lr}
 801304e:	4604      	mov	r4, r0
 8013050:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8013052:	d91a      	bls.n	801308a <ethernet_input+0x42>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013054:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (p->if_idx == NETIF_NO_INDEX) {
 8013056:	7be3      	ldrb	r3, [r4, #15]
  type = ethhdr->type;
 8013058:	8986      	ldrh	r6, [r0, #12]
  if (p->if_idx == NETIF_NO_INDEX) {
 801305a:	b91b      	cbnz	r3, 8013064 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 801305c:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 8013060:	3301      	adds	r3, #1
 8013062:	73e3      	strb	r3, [r4, #15]
  }

  if (ethhdr->dest.addr[0] & 1) {
 8013064:	7803      	ldrb	r3, [r0, #0]
 8013066:	07d9      	lsls	r1, r3, #31
 8013068:	d50a      	bpl.n	8013080 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801306a:	2b01      	cmp	r3, #1
 801306c:	d111      	bne.n	8013092 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801306e:	7843      	ldrb	r3, [r0, #1]
 8013070:	b933      	cbnz	r3, 8013080 <ethernet_input+0x38>
 8013072:	7883      	ldrb	r3, [r0, #2]
 8013074:	2b5e      	cmp	r3, #94	@ 0x5e
 8013076:	d103      	bne.n	8013080 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013078:	7b63      	ldrb	r3, [r4, #13]
 801307a:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801307e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8013080:	2e08      	cmp	r6, #8
 8013082:	d010      	beq.n	80130a6 <ethernet_input+0x5e>
 8013084:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 8013088:	d01d      	beq.n	80130c6 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801308a:	4620      	mov	r0, r4
 801308c:	f7fa fdd0 	bl	800dc30 <pbuf_free>
  return ERR_OK;
 8013090:	e017      	b.n	80130c2 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013092:	2206      	movs	r2, #6
 8013094:	4913      	ldr	r1, [pc, #76]	@ (80130e4 <ethernet_input+0x9c>)
 8013096:	f001 fcdb 	bl	8014a50 <memcmp>
 801309a:	2800      	cmp	r0, #0
 801309c:	d1f0      	bne.n	8013080 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 801309e:	7b63      	ldrb	r3, [r4, #13]
 80130a0:	f043 0308 	orr.w	r3, r3, #8
 80130a4:	e7eb      	b.n	801307e <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80130a6:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 80130aa:	071a      	lsls	r2, r3, #28
 80130ac:	d5ed      	bpl.n	801308a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80130ae:	210e      	movs	r1, #14
 80130b0:	4620      	mov	r0, r4
 80130b2:	f7fa fd91 	bl	800dbd8 <pbuf_remove_header>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d1e7      	bne.n	801308a <ethernet_input+0x42>
        ip4_input(p, netif);
 80130ba:	4629      	mov	r1, r5
 80130bc:	4620      	mov	r0, r4
 80130be:	f7ff fa5f 	bl	8012580 <ip4_input>
}
 80130c2:	2000      	movs	r0, #0
 80130c4:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80130c6:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 80130ca:	071b      	lsls	r3, r3, #28
 80130cc:	d5dd      	bpl.n	801308a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80130ce:	210e      	movs	r1, #14
 80130d0:	4620      	mov	r0, r4
 80130d2:	f7fa fd81 	bl	800dbd8 <pbuf_remove_header>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d1d7      	bne.n	801308a <ethernet_input+0x42>
        etharp_input(p, netif);
 80130da:	4629      	mov	r1, r5
 80130dc:	4620      	mov	r0, r4
 80130de:	f7fe fe8f 	bl	8011e00 <etharp_input>
      break;
 80130e2:	e7ee      	b.n	80130c2 <ethernet_input+0x7a>
 80130e4:	0808ed3e 	.word	0x0808ed3e

080130e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80130e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ec:	460d      	mov	r5, r1
 80130ee:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80130f0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80130f4:	4616      	mov	r6, r2
 80130f6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80130f8:	f7fa f842 	bl	800d180 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && (defined(LWIP_HOOK_VLAN_SET) || LWIP_VLAN_PCP) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80130fc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80130fe:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013100:	4628      	mov	r0, r5
 8013102:	f7fa fd66 	bl	800dbd2 <pbuf_add_header>
 8013106:	b9e0      	cbnz	r0, 8013142 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013108:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 801310a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	600b      	str	r3, [r1, #0]
 8013112:	88bb      	ldrh	r3, [r7, #4]
 8013114:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013116:	6833      	ldr	r3, [r6, #0]
 8013118:	f8c1 3006 	str.w	r3, [r1, #6]
 801311c:	88b3      	ldrh	r3, [r6, #4]
 801311e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013120:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013124:	2b06      	cmp	r3, #6
 8013126:	d006      	beq.n	8013136 <ethernet_output+0x4e>
 8013128:	4b08      	ldr	r3, [pc, #32]	@ (801314c <ethernet_output+0x64>)
 801312a:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 801312e:	4908      	ldr	r1, [pc, #32]	@ (8013150 <ethernet_output+0x68>)
 8013130:	4808      	ldr	r0, [pc, #32]	@ (8013154 <ethernet_output+0x6c>)
 8013132:	f001 fab1 	bl	8014698 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013136:	69a3      	ldr	r3, [r4, #24]
 8013138:	4629      	mov	r1, r5
 801313a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801313c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8013140:	4718      	bx	r3
}
 8013142:	f06f 0001 	mvn.w	r0, #1
 8013146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801314a:	bf00      	nop
 801314c:	08017f83 	.word	0x08017f83
 8013150:	08017fa6 	.word	0x08017fa6
 8013154:	08015927 	.word	0x08015927

08013158 <sys_init>:
  /* initialize sys_arch_protect global mutex */
  sys_arch_protect_mutex = xSemaphoreCreateRecursiveMutex();
  LWIP_ASSERT("failed to create sys_arch_protect mutex",
    sys_arch_protect_mutex != NULL);
#endif /* SYS_LIGHTWEIGHT_PROT && LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
}
 8013158:	4770      	bx	lr

0801315a <sys_now>:
#error This port requires 32 bit ticks or timer overflow will fail
#endif

#if LWIP_FREERTOS_SYS_NOW_FROM_FREERTOS
u32_t
sys_now(void)
 801315a:	f7f5 bb81 	b.w	8008860 <xTaskGetTickCount>

0801315e <sys_arch_protect>:

#if SYS_LIGHTWEIGHT_PROT

sys_prot_t
sys_arch_protect(void)
{
 801315e:	b508      	push	{r3, lr}
  LWIP_ASSERT("sys_arch_protect_mutex != NULL", sys_arch_protect_mutex != NULL);

  ret = xSemaphoreTakeRecursive(sys_arch_protect_mutex, portMAX_DELAY);
  LWIP_ASSERT("sys_arch_protect failed to take the mutex", ret == pdTRUE);
#else /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  taskENTER_CRITICAL();
 8013160:	f7f6 fa58 	bl	8009614 <vPortEnterCritical>
    return ret;
  }
#else
  return 1;
#endif
}
 8013164:	2001      	movs	r0, #1
 8013166:	bd08      	pop	{r3, pc}

08013168 <sys_arch_unprotect>:
  LWIP_ASSERT("sys_arch_protect_mutex != NULL", sys_arch_protect_mutex != NULL);

  ret = xSemaphoreGiveRecursive(sys_arch_protect_mutex);
  LWIP_ASSERT("sys_arch_unprotect failed to give the mutex", ret == pdTRUE);
#else /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  taskEXIT_CRITICAL();
 8013168:	f7f6 ba78 	b.w	800965c <vPortExitCritical>

0801316c <sys_mutex_new>:
#if !LWIP_COMPAT_MUTEX

/* Create a new mutex*/
err_t
sys_mutex_new(sys_mutex_t *mutex)
{
 801316c:	b510      	push	{r4, lr}
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 801316e:	4604      	mov	r4, r0
 8013170:	b928      	cbnz	r0, 801317e <sys_mutex_new+0x12>
 8013172:	4b07      	ldr	r3, [pc, #28]	@ (8013190 <sys_mutex_new+0x24>)
 8013174:	22cc      	movs	r2, #204	@ 0xcc
 8013176:	4907      	ldr	r1, [pc, #28]	@ (8013194 <sys_mutex_new+0x28>)
 8013178:	4807      	ldr	r0, [pc, #28]	@ (8013198 <sys_mutex_new+0x2c>)
 801317a:	f001 fa8d 	bl	8014698 <iprintf>

  mutex->mut = xSemaphoreCreateRecursiveMutex();
 801317e:	2004      	movs	r0, #4
 8013180:	f7f4 feae 	bl	8007ee0 <xQueueCreateMutex>
 8013184:	6020      	str	r0, [r4, #0]
  if(mutex->mut == NULL) {
 8013186:	fab0 f080 	clz	r0, r0
 801318a:	0940      	lsrs	r0, r0, #5
    SYS_STATS_INC(mutex.err);
    return ERR_MEM;
  }
  SYS_STATS_INC_USED(mutex);
  return ERR_OK;
}
 801318c:	4240      	negs	r0, r0
 801318e:	bd10      	pop	{r4, pc}
 8013190:	08017fd7 	.word	0x08017fd7
 8013194:	08017ffa 	.word	0x08017ffa
 8013198:	08015927 	.word	0x08015927

0801319c <sys_mutex_lock>:

void
sys_mutex_lock(sys_mutex_t *mutex)
{
 801319c:	b510      	push	{r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 801319e:	4604      	mov	r4, r0
 80131a0:	b928      	cbnz	r0, 80131ae <sys_mutex_lock+0x12>
 80131a2:	4b0f      	ldr	r3, [pc, #60]	@ (80131e0 <sys_mutex_lock+0x44>)
 80131a4:	22db      	movs	r2, #219	@ 0xdb
 80131a6:	490f      	ldr	r1, [pc, #60]	@ (80131e4 <sys_mutex_lock+0x48>)
 80131a8:	480f      	ldr	r0, [pc, #60]	@ (80131e8 <sys_mutex_lock+0x4c>)
 80131aa:	f001 fa75 	bl	8014698 <iprintf>
  LWIP_ASSERT("mutex->mut != NULL", mutex->mut != NULL);
 80131ae:	6823      	ldr	r3, [r4, #0]
 80131b0:	b92b      	cbnz	r3, 80131be <sys_mutex_lock+0x22>
 80131b2:	4b0b      	ldr	r3, [pc, #44]	@ (80131e0 <sys_mutex_lock+0x44>)
 80131b4:	22dc      	movs	r2, #220	@ 0xdc
 80131b6:	490d      	ldr	r1, [pc, #52]	@ (80131ec <sys_mutex_lock+0x50>)
 80131b8:	480b      	ldr	r0, [pc, #44]	@ (80131e8 <sys_mutex_lock+0x4c>)
 80131ba:	f001 fa6d 	bl	8014698 <iprintf>

  ret = xSemaphoreTakeRecursive(mutex->mut, portMAX_DELAY);
 80131be:	f04f 31ff 	mov.w	r1, #4294967295
 80131c2:	6820      	ldr	r0, [r4, #0]
 80131c4:	f7f5 f887 	bl	80082d6 <xQueueTakeMutexRecursive>
  LWIP_ASSERT("failed to take the mutex", ret == pdTRUE);
 80131c8:	2801      	cmp	r0, #1
 80131ca:	d007      	beq.n	80131dc <sys_mutex_lock+0x40>
 80131cc:	4b04      	ldr	r3, [pc, #16]	@ (80131e0 <sys_mutex_lock+0x44>)
 80131ce:	22df      	movs	r2, #223	@ 0xdf
 80131d0:	4907      	ldr	r1, [pc, #28]	@ (80131f0 <sys_mutex_lock+0x54>)
 80131d2:	4805      	ldr	r0, [pc, #20]	@ (80131e8 <sys_mutex_lock+0x4c>)
}
 80131d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("failed to take the mutex", ret == pdTRUE);
 80131d8:	f001 ba5e 	b.w	8014698 <iprintf>
}
 80131dc:	bd10      	pop	{r4, pc}
 80131de:	bf00      	nop
 80131e0:	08017fd7 	.word	0x08017fd7
 80131e4:	08017ffa 	.word	0x08017ffa
 80131e8:	08015927 	.word	0x08015927
 80131ec:	08018008 	.word	0x08018008
 80131f0:	0801801b 	.word	0x0801801b

080131f4 <sys_mutex_unlock>:

void
sys_mutex_unlock(sys_mutex_t *mutex)
{
 80131f4:	b510      	push	{r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 80131f6:	4604      	mov	r4, r0
 80131f8:	b928      	cbnz	r0, 8013206 <sys_mutex_unlock+0x12>
 80131fa:	4b0e      	ldr	r3, [pc, #56]	@ (8013234 <sys_mutex_unlock+0x40>)
 80131fc:	22e6      	movs	r2, #230	@ 0xe6
 80131fe:	490e      	ldr	r1, [pc, #56]	@ (8013238 <sys_mutex_unlock+0x44>)
 8013200:	480e      	ldr	r0, [pc, #56]	@ (801323c <sys_mutex_unlock+0x48>)
 8013202:	f001 fa49 	bl	8014698 <iprintf>
  LWIP_ASSERT("mutex->mut != NULL", mutex->mut != NULL);
 8013206:	6823      	ldr	r3, [r4, #0]
 8013208:	b92b      	cbnz	r3, 8013216 <sys_mutex_unlock+0x22>
 801320a:	4b0a      	ldr	r3, [pc, #40]	@ (8013234 <sys_mutex_unlock+0x40>)
 801320c:	22e7      	movs	r2, #231	@ 0xe7
 801320e:	490c      	ldr	r1, [pc, #48]	@ (8013240 <sys_mutex_unlock+0x4c>)
 8013210:	480a      	ldr	r0, [pc, #40]	@ (801323c <sys_mutex_unlock+0x48>)
 8013212:	f001 fa41 	bl	8014698 <iprintf>

  ret = xSemaphoreGiveRecursive(mutex->mut);
 8013216:	6820      	ldr	r0, [r4, #0]
 8013218:	f7f4 fe74 	bl	8007f04 <xQueueGiveMutexRecursive>
  LWIP_ASSERT("failed to give the mutex", ret == pdTRUE);
 801321c:	2801      	cmp	r0, #1
 801321e:	d007      	beq.n	8013230 <sys_mutex_unlock+0x3c>
 8013220:	4b04      	ldr	r3, [pc, #16]	@ (8013234 <sys_mutex_unlock+0x40>)
 8013222:	22ea      	movs	r2, #234	@ 0xea
 8013224:	4907      	ldr	r1, [pc, #28]	@ (8013244 <sys_mutex_unlock+0x50>)
 8013226:	4805      	ldr	r0, [pc, #20]	@ (801323c <sys_mutex_unlock+0x48>)
}
 8013228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("failed to give the mutex", ret == pdTRUE);
 801322c:	f001 ba34 	b.w	8014698 <iprintf>
}
 8013230:	bd10      	pop	{r4, pc}
 8013232:	bf00      	nop
 8013234:	08017fd7 	.word	0x08017fd7
 8013238:	08017ffa 	.word	0x08017ffa
 801323c:	08015927 	.word	0x08015927
 8013240:	08018008 	.word	0x08018008
 8013244:	08018034 	.word	0x08018034

08013248 <sys_sem_new>:

#endif /* !LWIP_COMPAT_MUTEX */

err_t
sys_sem_new(sys_sem_t *sem, u8_t initial_count)
{
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	460c      	mov	r4, r1
  LWIP_ASSERT("sem != NULL", sem != NULL);
 801324c:	4605      	mov	r5, r0
 801324e:	b928      	cbnz	r0, 801325c <sys_sem_new+0x14>
 8013250:	4b15      	ldr	r3, [pc, #84]	@ (80132a8 <sys_sem_new+0x60>)
 8013252:	22fd      	movs	r2, #253	@ 0xfd
 8013254:	4915      	ldr	r1, [pc, #84]	@ (80132ac <sys_sem_new+0x64>)
 8013256:	4816      	ldr	r0, [pc, #88]	@ (80132b0 <sys_sem_new+0x68>)
 8013258:	f001 fa1e 	bl	8014698 <iprintf>
  LWIP_ASSERT("initial_count invalid (not 0 or 1)",
 801325c:	2c01      	cmp	r4, #1
 801325e:	d905      	bls.n	801326c <sys_sem_new+0x24>
 8013260:	4b11      	ldr	r3, [pc, #68]	@ (80132a8 <sys_sem_new+0x60>)
 8013262:	22fe      	movs	r2, #254	@ 0xfe
 8013264:	4913      	ldr	r1, [pc, #76]	@ (80132b4 <sys_sem_new+0x6c>)
 8013266:	4812      	ldr	r0, [pc, #72]	@ (80132b0 <sys_sem_new+0x68>)
 8013268:	f001 fa16 	bl	8014698 <iprintf>
    (initial_count == 0) || (initial_count == 1));

  sem->sem = xSemaphoreCreateBinary();
 801326c:	2203      	movs	r2, #3
 801326e:	2100      	movs	r1, #0
 8013270:	2001      	movs	r0, #1
 8013272:	f7f4 fd4f 	bl	8007d14 <xQueueGenericCreate>
 8013276:	6028      	str	r0, [r5, #0]
  if(sem->sem == NULL) {
 8013278:	b190      	cbz	r0, 80132a0 <sys_sem_new+0x58>
    SYS_STATS_INC(sem.err);
    return ERR_MEM;
  }
  SYS_STATS_INC_USED(sem);

  if(initial_count == 1) {
 801327a:	2c01      	cmp	r4, #1
 801327c:	d001      	beq.n	8013282 <sys_sem_new+0x3a>
    BaseType_t ret = xSemaphoreGive(sem->sem);
    LWIP_ASSERT("sys_sem_new: initial give failed", ret == pdTRUE);
  }
  return ERR_OK;
 801327e:	2000      	movs	r0, #0
}
 8013280:	bd38      	pop	{r3, r4, r5, pc}
    BaseType_t ret = xSemaphoreGive(sem->sem);
 8013282:	2300      	movs	r3, #0
 8013284:	461a      	mov	r2, r3
 8013286:	4619      	mov	r1, r3
 8013288:	f7f4 fd70 	bl	8007d6c <xQueueGenericSend>
    LWIP_ASSERT("sys_sem_new: initial give failed", ret == pdTRUE);
 801328c:	2801      	cmp	r0, #1
 801328e:	d0f6      	beq.n	801327e <sys_sem_new+0x36>
 8013290:	4b05      	ldr	r3, [pc, #20]	@ (80132a8 <sys_sem_new+0x60>)
 8013292:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8013296:	4908      	ldr	r1, [pc, #32]	@ (80132b8 <sys_sem_new+0x70>)
 8013298:	4805      	ldr	r0, [pc, #20]	@ (80132b0 <sys_sem_new+0x68>)
 801329a:	f001 f9fd 	bl	8014698 <iprintf>
 801329e:	e7ee      	b.n	801327e <sys_sem_new+0x36>
    return ERR_MEM;
 80132a0:	f04f 30ff 	mov.w	r0, #4294967295
 80132a4:	e7ec      	b.n	8013280 <sys_sem_new+0x38>
 80132a6:	bf00      	nop
 80132a8:	08017fd7 	.word	0x08017fd7
 80132ac:	08018096 	.word	0x08018096
 80132b0:	08015927 	.word	0x08015927
 80132b4:	0801804d 	.word	0x0801804d
 80132b8:	08018070 	.word	0x08018070

080132bc <sys_sem_signal>:

void
sys_sem_signal(sys_sem_t *sem)
{
 80132bc:	b510      	push	{r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("sem != NULL", sem != NULL);
 80132be:	4604      	mov	r4, r0
 80132c0:	b930      	cbnz	r0, 80132d0 <sys_sem_signal+0x14>
 80132c2:	4b11      	ldr	r3, [pc, #68]	@ (8013308 <sys_sem_signal+0x4c>)
 80132c4:	f240 1213 	movw	r2, #275	@ 0x113
 80132c8:	4910      	ldr	r1, [pc, #64]	@ (801330c <sys_sem_signal+0x50>)
 80132ca:	4811      	ldr	r0, [pc, #68]	@ (8013310 <sys_sem_signal+0x54>)
 80132cc:	f001 f9e4 	bl	8014698 <iprintf>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 80132d0:	6823      	ldr	r3, [r4, #0]
 80132d2:	b933      	cbnz	r3, 80132e2 <sys_sem_signal+0x26>
 80132d4:	4b0c      	ldr	r3, [pc, #48]	@ (8013308 <sys_sem_signal+0x4c>)
 80132d6:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80132da:	490e      	ldr	r1, [pc, #56]	@ (8013314 <sys_sem_signal+0x58>)
 80132dc:	480c      	ldr	r0, [pc, #48]	@ (8013310 <sys_sem_signal+0x54>)
 80132de:	f001 f9db 	bl	8014698 <iprintf>

  ret = xSemaphoreGive(sem->sem);
 80132e2:	2300      	movs	r3, #0
 80132e4:	6820      	ldr	r0, [r4, #0]
 80132e6:	461a      	mov	r2, r3
 80132e8:	4619      	mov	r1, r3
 80132ea:	f7f4 fd3f 	bl	8007d6c <xQueueGenericSend>
  /* queue full is OK, this is a signal only... */
  LWIP_ASSERT("sys_sem_signal: sane return value",
 80132ee:	2801      	cmp	r0, #1
 80132f0:	d908      	bls.n	8013304 <sys_sem_signal+0x48>
 80132f2:	4b05      	ldr	r3, [pc, #20]	@ (8013308 <sys_sem_signal+0x4c>)
 80132f4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80132f8:	4907      	ldr	r1, [pc, #28]	@ (8013318 <sys_sem_signal+0x5c>)
 80132fa:	4805      	ldr	r0, [pc, #20]	@ (8013310 <sys_sem_signal+0x54>)
    (ret == pdTRUE) || (ret == errQUEUE_FULL));
}
 80132fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("sys_sem_signal: sane return value",
 8013300:	f001 b9ca 	b.w	8014698 <iprintf>
}
 8013304:	bd10      	pop	{r4, pc}
 8013306:	bf00      	nop
 8013308:	08017fd7 	.word	0x08017fd7
 801330c:	08018096 	.word	0x08018096
 8013310:	08015927 	.word	0x08015927
 8013314:	08018091 	.word	0x08018091
 8013318:	080180a2 	.word	0x080180a2

0801331c <sys_arch_sem_wait>:

u32_t
sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout_ms)
{
 801331c:	b538      	push	{r3, r4, r5, lr}
 801331e:	460d      	mov	r5, r1
  BaseType_t ret;
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8013320:	4604      	mov	r4, r0
 8013322:	b930      	cbnz	r0, 8013332 <sys_arch_sem_wait+0x16>
 8013324:	4b16      	ldr	r3, [pc, #88]	@ (8013380 <sys_arch_sem_wait+0x64>)
 8013326:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801332a:	4916      	ldr	r1, [pc, #88]	@ (8013384 <sys_arch_sem_wait+0x68>)
 801332c:	4816      	ldr	r0, [pc, #88]	@ (8013388 <sys_arch_sem_wait+0x6c>)
 801332e:	f001 f9b3 	bl	8014698 <iprintf>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 8013332:	6823      	ldr	r3, [r4, #0]
 8013334:	b933      	cbnz	r3, 8013344 <sys_arch_sem_wait+0x28>
 8013336:	4b12      	ldr	r3, [pc, #72]	@ (8013380 <sys_arch_sem_wait+0x64>)
 8013338:	f240 1221 	movw	r2, #289	@ 0x121
 801333c:	4913      	ldr	r1, [pc, #76]	@ (801338c <sys_arch_sem_wait+0x70>)
 801333e:	4812      	ldr	r0, [pc, #72]	@ (8013388 <sys_arch_sem_wait+0x6c>)
 8013340:	f001 f9aa 	bl	8014698 <iprintf>

  if(!timeout_ms) {
    /* wait infinite */
    ret = xSemaphoreTake(sem->sem, portMAX_DELAY);
 8013344:	6820      	ldr	r0, [r4, #0]
  if(!timeout_ms) {
 8013346:	b975      	cbnz	r5, 8013366 <sys_arch_sem_wait+0x4a>
    ret = xSemaphoreTake(sem->sem, portMAX_DELAY);
 8013348:	f04f 31ff 	mov.w	r1, #4294967295
 801334c:	f7f4 ff09 	bl	8008162 <xQueueSemaphoreTake>
    LWIP_ASSERT("taking semaphore failed", ret == pdTRUE);
 8013350:	2801      	cmp	r0, #1
 8013352:	d006      	beq.n	8013362 <sys_arch_sem_wait+0x46>
 8013354:	4b0a      	ldr	r3, [pc, #40]	@ (8013380 <sys_arch_sem_wait+0x64>)
 8013356:	f44f 7293 	mov.w	r2, #294	@ 0x126
 801335a:	490d      	ldr	r1, [pc, #52]	@ (8013390 <sys_arch_sem_wait+0x74>)
 801335c:	480a      	ldr	r0, [pc, #40]	@ (8013388 <sys_arch_sem_wait+0x6c>)
 801335e:	f001 f99b 	bl	8014698 <iprintf>
  }

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 8013362:	2001      	movs	r0, #1
}
 8013364:	bd38      	pop	{r3, r4, r5, pc}
    ret = xSemaphoreTake(sem->sem, timeout_ticks);
 8013366:	4629      	mov	r1, r5
 8013368:	f7f4 fefb 	bl	8008162 <xQueueSemaphoreTake>
    if (ret == errQUEUE_EMPTY) {
 801336c:	b128      	cbz	r0, 801337a <sys_arch_sem_wait+0x5e>
    LWIP_ASSERT("taking semaphore failed", ret == pdTRUE);
 801336e:	2801      	cmp	r0, #1
 8013370:	d0f7      	beq.n	8013362 <sys_arch_sem_wait+0x46>
 8013372:	4b03      	ldr	r3, [pc, #12]	@ (8013380 <sys_arch_sem_wait+0x64>)
 8013374:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8013378:	e7ef      	b.n	801335a <sys_arch_sem_wait+0x3e>
      return SYS_ARCH_TIMEOUT;
 801337a:	f04f 30ff 	mov.w	r0, #4294967295
 801337e:	e7f1      	b.n	8013364 <sys_arch_sem_wait+0x48>
 8013380:	08017fd7 	.word	0x08017fd7
 8013384:	08018096 	.word	0x08018096
 8013388:	08015927 	.word	0x08015927
 801338c:	08018091 	.word	0x08018091
 8013390:	080180c4 	.word	0x080180c4

08013394 <sys_sem_free>:

void
sys_sem_free(sys_sem_t *sem)
{
 8013394:	b510      	push	{r4, lr}
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8013396:	4604      	mov	r4, r0
 8013398:	b930      	cbnz	r0, 80133a8 <sys_sem_free+0x14>
 801339a:	4b0b      	ldr	r3, [pc, #44]	@ (80133c8 <sys_sem_free+0x34>)
 801339c:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 80133a0:	490a      	ldr	r1, [pc, #40]	@ (80133cc <sys_sem_free+0x38>)
 80133a2:	480b      	ldr	r0, [pc, #44]	@ (80133d0 <sys_sem_free+0x3c>)
 80133a4:	f001 f978 	bl	8014698 <iprintf>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	b933      	cbnz	r3, 80133ba <sys_sem_free+0x26>
 80133ac:	4b06      	ldr	r3, [pc, #24]	@ (80133c8 <sys_sem_free+0x34>)
 80133ae:	f240 123b 	movw	r2, #315	@ 0x13b
 80133b2:	4908      	ldr	r1, [pc, #32]	@ (80133d4 <sys_sem_free+0x40>)
 80133b4:	4806      	ldr	r0, [pc, #24]	@ (80133d0 <sys_sem_free+0x3c>)
 80133b6:	f001 f96f 	bl	8014698 <iprintf>

  SYS_STATS_DEC(sem.used);
  vSemaphoreDelete(sem->sem);
 80133ba:	6820      	ldr	r0, [r4, #0]
 80133bc:	f7f4 fffa 	bl	80083b4 <vQueueDelete>
  sem->sem = NULL;
 80133c0:	2300      	movs	r3, #0
 80133c2:	6023      	str	r3, [r4, #0]
}
 80133c4:	bd10      	pop	{r4, pc}
 80133c6:	bf00      	nop
 80133c8:	08017fd7 	.word	0x08017fd7
 80133cc:	08018096 	.word	0x08018096
 80133d0:	08015927 	.word	0x08015927
 80133d4:	08018091 	.word	0x08018091

080133d8 <sys_mbox_new>:

err_t
sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80133d8:	b538      	push	{r3, r4, r5, lr}
 80133da:	460d      	mov	r5, r1
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 80133dc:	4604      	mov	r4, r0
 80133de:	b930      	cbnz	r0, 80133ee <sys_mbox_new+0x16>
 80133e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013418 <sys_mbox_new+0x40>)
 80133e2:	f240 1245 	movw	r2, #325	@ 0x145
 80133e6:	490d      	ldr	r1, [pc, #52]	@ (801341c <sys_mbox_new+0x44>)
 80133e8:	480d      	ldr	r0, [pc, #52]	@ (8013420 <sys_mbox_new+0x48>)
 80133ea:	f001 f955 	bl	8014698 <iprintf>
  LWIP_ASSERT("size > 0", size > 0);
 80133ee:	2d00      	cmp	r5, #0
 80133f0:	dc06      	bgt.n	8013400 <sys_mbox_new+0x28>
 80133f2:	4b09      	ldr	r3, [pc, #36]	@ (8013418 <sys_mbox_new+0x40>)
 80133f4:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 80133f8:	490a      	ldr	r1, [pc, #40]	@ (8013424 <sys_mbox_new+0x4c>)
 80133fa:	4809      	ldr	r0, [pc, #36]	@ (8013420 <sys_mbox_new+0x48>)
 80133fc:	f001 f94c 	bl	8014698 <iprintf>

  mbox->mbx = xQueueCreate((UBaseType_t)size, sizeof(void *));
 8013400:	2200      	movs	r2, #0
 8013402:	2104      	movs	r1, #4
 8013404:	4628      	mov	r0, r5
 8013406:	f7f4 fc85 	bl	8007d14 <xQueueGenericCreate>
 801340a:	6020      	str	r0, [r4, #0]
  if(mbox->mbx == NULL) {
 801340c:	fab0 f080 	clz	r0, r0
 8013410:	0940      	lsrs	r0, r0, #5
    SYS_STATS_INC(mbox.err);
    return ERR_MEM;
  }
  SYS_STATS_INC_USED(mbox);
  return ERR_OK;
}
 8013412:	4240      	negs	r0, r0
 8013414:	bd38      	pop	{r3, r4, r5, pc}
 8013416:	bf00      	nop
 8013418:	08017fd7 	.word	0x08017fd7
 801341c:	080180dc 	.word	0x080180dc
 8013420:	08015927 	.word	0x08015927
 8013424:	080180e9 	.word	0x080180e9

08013428 <sys_mbox_trypost>:
  LWIP_ASSERT("mbox post failed", ret == pdTRUE);
}

err_t
sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013428:	b513      	push	{r0, r1, r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 801342a:	4604      	mov	r4, r0
{
 801342c:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 801342e:	b930      	cbnz	r0, 801343e <sys_mbox_trypost+0x16>
 8013430:	4b12      	ldr	r3, [pc, #72]	@ (801347c <sys_mbox_trypost+0x54>)
 8013432:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8013436:	4912      	ldr	r1, [pc, #72]	@ (8013480 <sys_mbox_trypost+0x58>)
 8013438:	4812      	ldr	r0, [pc, #72]	@ (8013484 <sys_mbox_trypost+0x5c>)
 801343a:	f001 f92d 	bl	8014698 <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	b933      	cbnz	r3, 8013450 <sys_mbox_trypost+0x28>
 8013442:	4b0e      	ldr	r3, [pc, #56]	@ (801347c <sys_mbox_trypost+0x54>)
 8013444:	f240 1261 	movw	r2, #353	@ 0x161
 8013448:	490f      	ldr	r1, [pc, #60]	@ (8013488 <sys_mbox_trypost+0x60>)
 801344a:	480e      	ldr	r0, [pc, #56]	@ (8013484 <sys_mbox_trypost+0x5c>)
 801344c:	f001 f924 	bl	8014698 <iprintf>

  ret = xQueueSendToBack(mbox->mbx, &msg, 0);
 8013450:	2300      	movs	r3, #0
 8013452:	a901      	add	r1, sp, #4
 8013454:	6820      	ldr	r0, [r4, #0]
 8013456:	461a      	mov	r2, r3
 8013458:	f7f4 fc88 	bl	8007d6c <xQueueGenericSend>
  if (ret == pdTRUE) {
 801345c:	2801      	cmp	r0, #1
 801345e:	d00b      	beq.n	8013478 <sys_mbox_trypost+0x50>
    return ERR_OK;
  } else {
    LWIP_ASSERT("mbox trypost failed", ret == errQUEUE_FULL);
 8013460:	b130      	cbz	r0, 8013470 <sys_mbox_trypost+0x48>
 8013462:	4b06      	ldr	r3, [pc, #24]	@ (801347c <sys_mbox_trypost+0x54>)
 8013464:	f240 1267 	movw	r2, #359	@ 0x167
 8013468:	4908      	ldr	r1, [pc, #32]	@ (801348c <sys_mbox_trypost+0x64>)
 801346a:	4806      	ldr	r0, [pc, #24]	@ (8013484 <sys_mbox_trypost+0x5c>)
 801346c:	f001 f914 	bl	8014698 <iprintf>
    SYS_STATS_INC(mbox.err);
    return ERR_MEM;
 8013470:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8013474:	b002      	add	sp, #8
 8013476:	bd10      	pop	{r4, pc}
    return ERR_OK;
 8013478:	2000      	movs	r0, #0
 801347a:	e7fb      	b.n	8013474 <sys_mbox_trypost+0x4c>
 801347c:	08017fd7 	.word	0x08017fd7
 8013480:	080180dc 	.word	0x080180dc
 8013484:	08015927 	.word	0x08015927
 8013488:	080180f2 	.word	0x080180f2
 801348c:	08018115 	.word	0x08018115

08013490 <sys_arch_mbox_fetch>:
  }
}

u32_t
sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout_ms)
{
 8013490:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013492:	460c      	mov	r4, r1
 8013494:	4616      	mov	r6, r2
  BaseType_t ret;
  void *msg_dummy;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8013496:	4605      	mov	r5, r0
 8013498:	b930      	cbnz	r0, 80134a8 <sys_arch_mbox_fetch+0x18>
 801349a:	4b1a      	ldr	r3, [pc, #104]	@ (8013504 <sys_arch_mbox_fetch+0x74>)
 801349c:	f240 1287 	movw	r2, #391	@ 0x187
 80134a0:	4919      	ldr	r1, [pc, #100]	@ (8013508 <sys_arch_mbox_fetch+0x78>)
 80134a2:	481a      	ldr	r0, [pc, #104]	@ (801350c <sys_arch_mbox_fetch+0x7c>)
 80134a4:	f001 f8f8 	bl	8014698 <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 80134a8:	682b      	ldr	r3, [r5, #0]
 80134aa:	b933      	cbnz	r3, 80134ba <sys_arch_mbox_fetch+0x2a>
 80134ac:	4b15      	ldr	r3, [pc, #84]	@ (8013504 <sys_arch_mbox_fetch+0x74>)
 80134ae:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 80134b2:	4917      	ldr	r1, [pc, #92]	@ (8013510 <sys_arch_mbox_fetch+0x80>)
 80134b4:	4815      	ldr	r0, [pc, #84]	@ (801350c <sys_arch_mbox_fetch+0x7c>)
 80134b6:	f001 f8ef 	bl	8014698 <iprintf>

  if (!msg) {
 80134ba:	b904      	cbnz	r4, 80134be <sys_arch_mbox_fetch+0x2e>
    msg = &msg_dummy;
 80134bc:	ac01      	add	r4, sp, #4
  }

  if (!timeout_ms) {
    /* wait infinite */
    ret = xQueueReceive(mbox->mbx, &(*msg), portMAX_DELAY);
 80134be:	6828      	ldr	r0, [r5, #0]
  if (!timeout_ms) {
 80134c0:	b986      	cbnz	r6, 80134e4 <sys_arch_mbox_fetch+0x54>
    ret = xQueueReceive(mbox->mbx, &(*msg), portMAX_DELAY);
 80134c2:	f04f 32ff 	mov.w	r2, #4294967295
 80134c6:	4621      	mov	r1, r4
 80134c8:	f7f4 fda7 	bl	800801a <xQueueReceive>
    LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 80134cc:	2801      	cmp	r0, #1
 80134ce:	d006      	beq.n	80134de <sys_arch_mbox_fetch+0x4e>
 80134d0:	4b0c      	ldr	r3, [pc, #48]	@ (8013504 <sys_arch_mbox_fetch+0x74>)
 80134d2:	f240 1291 	movw	r2, #401	@ 0x191
 80134d6:	490f      	ldr	r1, [pc, #60]	@ (8013514 <sys_arch_mbox_fetch+0x84>)
 80134d8:	480c      	ldr	r0, [pc, #48]	@ (801350c <sys_arch_mbox_fetch+0x7c>)
 80134da:	f001 f8dd 	bl	8014698 <iprintf>
  }

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 80134de:	2001      	movs	r0, #1
}
 80134e0:	b002      	add	sp, #8
 80134e2:	bd70      	pop	{r4, r5, r6, pc}
    ret = xQueueReceive(mbox->mbx, &(*msg), timeout_ticks);
 80134e4:	4632      	mov	r2, r6
 80134e6:	4621      	mov	r1, r4
 80134e8:	f7f4 fd97 	bl	800801a <xQueueReceive>
    if (ret == errQUEUE_EMPTY) {
 80134ec:	b918      	cbnz	r0, 80134f6 <sys_arch_mbox_fetch+0x66>
      *msg = NULL;
 80134ee:	6020      	str	r0, [r4, #0]
      return SYS_ARCH_TIMEOUT;
 80134f0:	f04f 30ff 	mov.w	r0, #4294967295
 80134f4:	e7f4      	b.n	80134e0 <sys_arch_mbox_fetch+0x50>
    LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 80134f6:	2801      	cmp	r0, #1
 80134f8:	d0f1      	beq.n	80134de <sys_arch_mbox_fetch+0x4e>
 80134fa:	4b02      	ldr	r3, [pc, #8]	@ (8013504 <sys_arch_mbox_fetch+0x74>)
 80134fc:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 8013500:	e7e9      	b.n	80134d6 <sys_arch_mbox_fetch+0x46>
 8013502:	bf00      	nop
 8013504:	08017fd7 	.word	0x08017fd7
 8013508:	080180dc 	.word	0x080180dc
 801350c:	08015927 	.word	0x08015927
 8013510:	080180f2 	.word	0x080180f2
 8013514:	08018129 	.word	0x08018129

08013518 <sys_arch_mbox_tryfetch>:

u32_t
sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801351a:	460c      	mov	r4, r1
  BaseType_t ret;
  void *msg_dummy;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 801351c:	4605      	mov	r5, r0
 801351e:	b930      	cbnz	r0, 801352e <sys_arch_mbox_tryfetch+0x16>
 8013520:	4b14      	ldr	r3, [pc, #80]	@ (8013574 <sys_arch_mbox_tryfetch+0x5c>)
 8013522:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
 8013526:	4914      	ldr	r1, [pc, #80]	@ (8013578 <sys_arch_mbox_tryfetch+0x60>)
 8013528:	4814      	ldr	r0, [pc, #80]	@ (801357c <sys_arch_mbox_tryfetch+0x64>)
 801352a:	f001 f8b5 	bl	8014698 <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 801352e:	682b      	ldr	r3, [r5, #0]
 8013530:	b933      	cbnz	r3, 8013540 <sys_arch_mbox_tryfetch+0x28>
 8013532:	4b10      	ldr	r3, [pc, #64]	@ (8013574 <sys_arch_mbox_tryfetch+0x5c>)
 8013534:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013538:	4911      	ldr	r1, [pc, #68]	@ (8013580 <sys_arch_mbox_tryfetch+0x68>)
 801353a:	4810      	ldr	r0, [pc, #64]	@ (801357c <sys_arch_mbox_tryfetch+0x64>)
 801353c:	f001 f8ac 	bl	8014698 <iprintf>

  if (!msg) {
 8013540:	b904      	cbnz	r4, 8013544 <sys_arch_mbox_tryfetch+0x2c>
    msg = &msg_dummy;
 8013542:	ac01      	add	r4, sp, #4
  }

  ret = xQueueReceive(mbox->mbx, &(*msg), 0);
 8013544:	2200      	movs	r2, #0
 8013546:	4621      	mov	r1, r4
 8013548:	6828      	ldr	r0, [r5, #0]
 801354a:	f7f4 fd66 	bl	800801a <xQueueReceive>
  if (ret == errQUEUE_EMPTY) {
 801354e:	b920      	cbnz	r0, 801355a <sys_arch_mbox_tryfetch+0x42>
    *msg = NULL;
 8013550:	6020      	str	r0, [r4, #0]
    return SYS_MBOX_EMPTY;
 8013552:	f04f 30ff 	mov.w	r0, #4294967295
  }
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);

  return 0;
}
 8013556:	b003      	add	sp, #12
 8013558:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 801355a:	2801      	cmp	r0, #1
 801355c:	d101      	bne.n	8013562 <sys_arch_mbox_tryfetch+0x4a>
  return 0;
 801355e:	2000      	movs	r0, #0
 8013560:	e7f9      	b.n	8013556 <sys_arch_mbox_tryfetch+0x3e>
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8013562:	4b04      	ldr	r3, [pc, #16]	@ (8013574 <sys_arch_mbox_tryfetch+0x5c>)
 8013564:	f44f 72da 	mov.w	r2, #436	@ 0x1b4
 8013568:	4906      	ldr	r1, [pc, #24]	@ (8013584 <sys_arch_mbox_tryfetch+0x6c>)
 801356a:	4804      	ldr	r0, [pc, #16]	@ (801357c <sys_arch_mbox_tryfetch+0x64>)
 801356c:	f001 f894 	bl	8014698 <iprintf>
 8013570:	e7f5      	b.n	801355e <sys_arch_mbox_tryfetch+0x46>
 8013572:	bf00      	nop
 8013574:	08017fd7 	.word	0x08017fd7
 8013578:	080180dc 	.word	0x080180dc
 801357c:	08015927 	.word	0x08015927
 8013580:	080180f2 	.word	0x080180f2
 8013584:	08018129 	.word	0x08018129

08013588 <sys_mbox_free>:

void
sys_mbox_free(sys_mbox_t *mbox)
{
 8013588:	b510      	push	{r4, lr}
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 801358a:	4604      	mov	r4, r0
 801358c:	b930      	cbnz	r0, 801359c <sys_mbox_free+0x14>
 801358e:	4b0a      	ldr	r3, [pc, #40]	@ (80135b8 <sys_mbox_free+0x30>)
 8013590:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 8013594:	4909      	ldr	r1, [pc, #36]	@ (80135bc <sys_mbox_free+0x34>)
 8013596:	480a      	ldr	r0, [pc, #40]	@ (80135c0 <sys_mbox_free+0x38>)
 8013598:	f001 f87e 	bl	8014698 <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 801359c:	6823      	ldr	r3, [r4, #0]
 801359e:	b933      	cbnz	r3, 80135ae <sys_mbox_free+0x26>
 80135a0:	4b05      	ldr	r3, [pc, #20]	@ (80135b8 <sys_mbox_free+0x30>)
 80135a2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80135a6:	4907      	ldr	r1, [pc, #28]	@ (80135c4 <sys_mbox_free+0x3c>)
 80135a8:	4805      	ldr	r0, [pc, #20]	@ (80135c0 <sys_mbox_free+0x38>)
 80135aa:	f001 f875 	bl	8014698 <iprintf>
      SYS_STATS_INC(mbox.err);
    }
  }
#endif

  vQueueDelete(mbox->mbx);
 80135ae:	6820      	ldr	r0, [r4, #0]

  SYS_STATS_DEC(mbox.used);
}
 80135b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  vQueueDelete(mbox->mbx);
 80135b4:	f7f4 befe 	b.w	80083b4 <vQueueDelete>
 80135b8:	08017fd7 	.word	0x08017fd7
 80135bc:	080180dc 	.word	0x080180dc
 80135c0:	08015927 	.word	0x08015927
 80135c4:	080180f2 	.word	0x080180f2

080135c8 <sys_thread_new>:

sys_thread_t
sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio)
{
 80135c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t rtos_task;
  BaseType_t ret;
  sys_thread_t lwip_thread;
  size_t rtos_stacksize;

  LWIP_ASSERT("invalid stacksize", stacksize > 0);
 80135ca:	1e1c      	subs	r4, r3, #0
{
 80135cc:	b085      	sub	sp, #20
 80135ce:	4606      	mov	r6, r0
 80135d0:	460d      	mov	r5, r1
 80135d2:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid stacksize", stacksize > 0);
 80135d4:	dc06      	bgt.n	80135e4 <sys_thread_new+0x1c>
 80135d6:	4b0f      	ldr	r3, [pc, #60]	@ (8013614 <sys_thread_new+0x4c>)
 80135d8:	f240 12d7 	movw	r2, #471	@ 0x1d7
 80135dc:	490e      	ldr	r1, [pc, #56]	@ (8013618 <sys_thread_new+0x50>)
 80135de:	480f      	ldr	r0, [pc, #60]	@ (801361c <sys_thread_new+0x54>)
 80135e0:	f001 f85a 	bl	8014698 <iprintf>
  rtos_stacksize = (size_t)stacksize / sizeof(StackType_t);
#endif

  /* lwIP's lwip_thread_fn matches FreeRTOS' TaskFunction_t, so we can pass the
     thread function without adaption here. */
  ret = xTaskCreate(thread, name, (configSTACK_DEPTH_TYPE)rtos_stacksize, arg, prio, &rtos_task);
 80135e4:	ab03      	add	r3, sp, #12
 80135e6:	f3c4 028f 	ubfx	r2, r4, #2, #16
 80135ea:	4631      	mov	r1, r6
 80135ec:	4628      	mov	r0, r5
 80135ee:	9301      	str	r3, [sp, #4]
 80135f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135f2:	9300      	str	r3, [sp, #0]
 80135f4:	463b      	mov	r3, r7
 80135f6:	f7f4 ff9d 	bl	8008534 <xTaskCreate>
  LWIP_ASSERT("task creation failed", ret == pdTRUE);
 80135fa:	2801      	cmp	r0, #1
 80135fc:	d006      	beq.n	801360c <sys_thread_new+0x44>
 80135fe:	4b05      	ldr	r3, [pc, #20]	@ (8013614 <sys_thread_new+0x4c>)
 8013600:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8013604:	4906      	ldr	r1, [pc, #24]	@ (8013620 <sys_thread_new+0x58>)
 8013606:	4805      	ldr	r0, [pc, #20]	@ (801361c <sys_thread_new+0x54>)
 8013608:	f001 f846 	bl	8014698 <iprintf>

  lwip_thread.thread_handle = rtos_task;
  return lwip_thread;
}
 801360c:	9803      	ldr	r0, [sp, #12]
 801360e:	b005      	add	sp, #20
 8013610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013612:	bf00      	nop
 8013614:	08017fd7 	.word	0x08017fd7
 8013618:	0801813b 	.word	0x0801813b
 801361c:	08015927 	.word	0x08015927
 8013620:	0801814d 	.word	0x0801814d

08013624 <usbd_set_address>:
/** \brief Callback that sets USB device address
 * \param dev pointer to usb device
 * \param req pointer to usb control request data
 * \return none
 */
static void usbd_set_address (usbd_device *dev, usbd_ctlreq *req) {
 8013624:	b538      	push	{r3, r4, r5, lr}
    dev->driver->setaddr(req->wValue);
 8013626:	6803      	ldr	r3, [r0, #0]
static void usbd_set_address (usbd_device *dev, usbd_ctlreq *req) {
 8013628:	460d      	mov	r5, r1
 801362a:	4604      	mov	r4, r0
    dev->driver->setaddr(req->wValue);
 801362c:	7888      	ldrb	r0, [r1, #2]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	4798      	blx	r3
    dev->status.device_state = (req->wValue) ? usbd_state_addressed : usbd_state_default;
 8013632:	886b      	ldrh	r3, [r5, #2]
 8013634:	2b00      	cmp	r3, #0
 8013636:	bf0c      	ite	eq
 8013638:	2302      	moveq	r3, #2
 801363a:	2303      	movne	r3, #3
 801363c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8013640:	bd38      	pop	{r3, r4, r5, pc}

08013642 <usbd_stall_pid>:
/** \brief Control endpoint stall (STALL PID)
 * \param dev pointer to usb device
 * \param ep endpoint number
 */
static void usbd_stall_pid(usbd_device *dev, uint8_t ep)
{
 8013642:	b538      	push	{r3, r4, r5, lr}
 8013644:	460d      	mov	r5, r1
  dev->driver->ep_setstall(ep & 0x7F, 1);
 8013646:	6803      	ldr	r3, [r0, #0]
{
 8013648:	4604      	mov	r4, r0
  dev->driver->ep_setstall(ep & 0x7F, 1);
 801364a:	2101      	movs	r1, #1
 801364c:	6a1b      	ldr	r3, [r3, #32]
 801364e:	f005 007f 	and.w	r0, r5, #127	@ 0x7f
 8013652:	4798      	blx	r3
  dev->driver->ep_setstall(ep | 0x80, 1);
 8013654:	6823      	ldr	r3, [r4, #0]
 8013656:	2101      	movs	r1, #1
 8013658:	f045 0080 	orr.w	r0, r5, #128	@ 0x80
 801365c:	6a1b      	ldr	r3, [r3, #32]
 801365e:	4798      	blx	r3
  dev->status.control_state = usbd_ctl_idle;
 8013660:	2300      	movs	r3, #0
 8013662:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
}
 8013666:	bd38      	pop	{r3, r4, r5, pc}

08013668 <usbd_process_evt>:
 * \param dev usb device
 * \param evt usb event
 * \param ep active endpoint
 */
static void usbd_process_evt(usbd_device *dev, uint8_t evt, uint8_t ep)
{
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	4604      	mov	r4, r0
 801366c:	4616      	mov	r6, r2
  switch(evt)
 801366e:	460d      	mov	r5, r1
 8013670:	b161      	cbz	r1, 801368c <usbd_process_evt+0x24>
 8013672:	1f0b      	subs	r3, r1, #4
 8013674:	2b02      	cmp	r3, #2
 8013676:	d91d      	bls.n	80136b4 <usbd_process_evt+0x4c>
        dev->endpoint[ep & 0x07](dev, evt, ep);
      break;
    default:
      break;
  }
  if(dev->events[evt])
 8013678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801367c:	695b      	ldr	r3, [r3, #20]
 801367e:	b313      	cbz	r3, 80136c6 <usbd_process_evt+0x5e>
    dev->events[evt](dev, evt, ep);
 8013680:	4632      	mov	r2, r6
 8013682:	4629      	mov	r1, r5
 8013684:	4620      	mov	r0, r4
}
 8013686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dev->events[evt](dev, evt, ep);
 801368a:	4718      	bx	r3
  dev->status.device_state = usbd_state_default;
 801368c:	2302      	movs	r3, #2
  dev->status.control_state = usbd_ctl_idle;
 801368e:	f880 1063 	strb.w	r1, [r0, #99]	@ 0x63
  dev->status.device_cfg = 0;
 8013692:	f880 1061 	strb.w	r1, [r0, #97]	@ 0x61
  dev->status.device_state = usbd_state_default;
 8013696:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
  dev->endpoint[0] = usbd_process_ep0;
 801369a:	4b0b      	ldr	r3, [pc, #44]	@ (80136c8 <usbd_process_evt+0x60>)
  dev->driver->ep_config(0, USB_EPTYPE_CONTROL, dev->status.ep0size);
 801369c:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
  dev->endpoint[0] = usbd_process_ep0;
 80136a0:	6343      	str	r3, [r0, #52]	@ 0x34
  dev->driver->ep_config(0, USB_EPTYPE_CONTROL, dev->status.ep0size);
 80136a2:	6803      	ldr	r3, [r0, #0]
 80136a4:	4608      	mov	r0, r1
 80136a6:	691b      	ldr	r3, [r3, #16]
 80136a8:	4798      	blx	r3
  dev->driver->setaddr(0);
 80136aa:	6823      	ldr	r3, [r4, #0]
 80136ac:	4628      	mov	r0, r5
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	4798      	blx	r3
}
 80136b2:	e7e1      	b.n	8013678 <usbd_process_evt+0x10>
      if(dev->endpoint[ep & 0x07])
 80136b4:	f002 0307 	and.w	r3, r2, #7
 80136b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80136bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d0da      	beq.n	8013678 <usbd_process_evt+0x10>
        dev->endpoint[ep & 0x07](dev, evt, ep);
 80136c2:	4798      	blx	r3
 80136c4:	e7d8      	b.n	8013678 <usbd_process_evt+0x10>
}
 80136c6:	bd70      	pop	{r4, r5, r6, pc}
 80136c8:	08013759 	.word	0x08013759

080136cc <usbd_process_callback.constprop.0>:
  if(dev->complete_callback)
 80136cc:	6883      	ldr	r3, [r0, #8]
static void usbd_process_callback (usbd_device *dev)
 80136ce:	b510      	push	{r4, lr}
 80136d0:	4604      	mov	r4, r0
  if(dev->complete_callback)
 80136d2:	b11b      	cbz	r3, 80136dc <usbd_process_callback.constprop.0+0x10>
    dev->complete_callback(dev, dev->status.data_buf);
 80136d4:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 80136d6:	4798      	blx	r3
    dev->complete_callback = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	60a3      	str	r3, [r4, #8]
}
 80136dc:	bd10      	pop	{r4, pc}

080136de <usbd_process_eptx>:
{
 80136de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch(dev->status.control_state)
 80136e0:	f890 3063 	ldrb.w	r3, [r0, #99]	@ 0x63
{
 80136e4:	4604      	mov	r4, r0
 80136e6:	460e      	mov	r6, r1
  switch(dev->status.control_state)
 80136e8:	2b04      	cmp	r3, #4
 80136ea:	d032      	beq.n	8013752 <usbd_process_eptx+0x74>
 80136ec:	d803      	bhi.n	80136f6 <usbd_process_eptx+0x18>
 80136ee:	3b02      	subs	r3, #2
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d909      	bls.n	8013708 <usbd_process_eptx+0x2a>
}
 80136f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch(dev->status.control_state)
 80136f6:	2b05      	cmp	r3, #5
 80136f8:	d1fc      	bne.n	80136f4 <usbd_process_eptx+0x16>
      dev->status.control_state = usbd_ctl_idle;
 80136fa:	2300      	movs	r3, #0
 80136fc:	f880 3063 	strb.w	r3, [r0, #99]	@ 0x63
}
 8013700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbd_process_callback(dev);
 8013704:	f7ff bfe2 	b.w	80136cc <usbd_process_callback.constprop.0>
      _t = _MIN(dev->status.data_count, dev->status.ep0size);
 8013708:	f8b0 505c 	ldrh.w	r5, [r0, #92]	@ 0x5c
 801370c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
      dev->driver->ep_write(ep, dev->status.data_ptr, _t);
 8013710:	6d81      	ldr	r1, [r0, #88]	@ 0x58
      _t = _MIN(dev->status.data_count, dev->status.ep0size);
 8013712:	429d      	cmp	r5, r3
 8013714:	bf28      	it	cs
 8013716:	461d      	movcs	r5, r3
      dev->driver->ep_write(ep, dev->status.data_ptr, _t);
 8013718:	6803      	ldr	r3, [r0, #0]
 801371a:	4630      	mov	r0, r6
 801371c:	b2af      	uxth	r7, r5
 801371e:	69db      	ldr	r3, [r3, #28]
 8013720:	463a      	mov	r2, r7
 8013722:	4798      	blx	r3
      dev->status.data_ptr = (uint8_t*)dev->status.data_ptr + _t;
 8013724:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013726:	442b      	add	r3, r5
 8013728:	65a3      	str	r3, [r4, #88]	@ 0x58
      dev->status.data_count -= _t;
 801372a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
 801372e:	1bda      	subs	r2, r3, r7
 8013730:	b292      	uxth	r2, r2
 8013732:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
      if(0 != dev->status.data_count)
 8013736:	2a00      	cmp	r2, #0
 8013738:	d1dc      	bne.n	80136f4 <usbd_process_eptx+0x16>
      if( usbd_ctl_txdata == dev->status.control_state || _t != dev->status.ep0size )
 801373a:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 801373e:	2b02      	cmp	r3, #2
 8013740:	d003      	beq.n	801374a <usbd_process_eptx+0x6c>
 8013742:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013746:	429d      	cmp	r5, r3
 8013748:	d0d4      	beq.n	80136f4 <usbd_process_eptx+0x16>
        dev->status.control_state = usbd_ctl_lastdata; /* no ZLP required */
 801374a:	2304      	movs	r3, #4
      dev->status.control_state = usbd_ctl_statusout;
 801374c:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
      break;
 8013750:	e7d0      	b.n	80136f4 <usbd_process_eptx+0x16>
      dev->status.control_state = usbd_ctl_statusout;
 8013752:	2306      	movs	r3, #6
 8013754:	e7fa      	b.n	801374c <usbd_process_eptx+0x6e>
	...

08013758 <usbd_process_ep0>:
  switch(event)
 8013758:	2905      	cmp	r1, #5
{
 801375a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801375c:	4604      	mov	r4, r0
 801375e:	4616      	mov	r6, r2
  switch(event)
 8013760:	d009      	beq.n	8013776 <usbd_process_ep0+0x1e>
 8013762:	2906      	cmp	r1, #6
 8013764:	d003      	beq.n	801376e <usbd_process_ep0+0x16>
 8013766:	2904      	cmp	r1, #4
 8013768:	f000 8106 	beq.w	8013978 <usbd_process_ep0+0x220>
}
 801376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      dev->status.control_state = usbd_ctl_idle;
 801376e:	2300      	movs	r3, #0
 8013770:	f880 3063 	strb.w	r3, [r0, #99]	@ 0x63
      dev->complete_callback = 0;
 8013774:	6083      	str	r3, [r0, #8]
  switch(dev->status.control_state)
 8013776:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
  usbd_ctlreq *const req = dev->status.data_buf;
 801377a:	6d65      	ldr	r5, [r4, #84]	@ 0x54
  switch(dev->status.control_state)
 801377c:	2b01      	cmp	r3, #1
 801377e:	d024      	beq.n	80137ca <usbd_process_ep0+0x72>
 8013780:	2b06      	cmp	r3, #6
 8013782:	d037      	beq.n	80137f4 <usbd_process_ep0+0x9c>
 8013784:	b943      	cbnz	r3, 8013798 <usbd_process_ep0+0x40>
      if(0x08 !=  dev->driver->ep_read(ep, req, dev->status.data_maxsize))
 8013786:	6823      	ldr	r3, [r4, #0]
 8013788:	4629      	mov	r1, r5
 801378a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 801378e:	4630      	mov	r0, r6
 8013790:	699b      	ldr	r3, [r3, #24]
 8013792:	4798      	blx	r3
 8013794:	2808      	cmp	r0, #8
 8013796:	d005      	beq.n	80137a4 <usbd_process_ep0+0x4c>
      usbd_stall_pid(dev, ep);
 8013798:	4631      	mov	r1, r6
 801379a:	4620      	mov	r0, r4
}
 801379c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbd_stall_pid(dev, ep);
 80137a0:	f7ff bf4f 	b.w	8013642 <usbd_stall_pid>
      dev->status.data_ptr = req->data;
 80137a4:	f105 0308 	add.w	r3, r5, #8
      if(req->wLength > dev->status.data_maxsize)
 80137a8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      dev->status.data_ptr = req->data;
 80137ac:	65a3      	str	r3, [r4, #88]	@ 0x58
      dev->status.data_count = req->wLength;
 80137ae:	88eb      	ldrh	r3, [r5, #6]
 80137b0:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
      if((req->bmRequestType & USB_REQ_DEVTOHOST) || (0 == req->wLength))
 80137b4:	f995 1000 	ldrsb.w	r1, [r5]
 80137b8:	2900      	cmp	r1, #0
 80137ba:	db29      	blt.n	8013810 <usbd_process_ep0+0xb8>
 80137bc:	b343      	cbz	r3, 8013810 <usbd_process_ep0+0xb8>
      if(req->wLength > dev->status.data_maxsize)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d8ea      	bhi.n	8013798 <usbd_process_ep0+0x40>
      dev->status.control_state = usbd_ctl_rxdata;
 80137c2:	2301      	movs	r3, #1
      dev->status.control_state = usbd_ctl_statusin;
 80137c4:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
      break;
 80137c8:	e7d0      	b.n	801376c <usbd_process_ep0+0x14>
      _t = dev->driver->ep_read(ep, dev->status.data_ptr, dev->status.data_count);
 80137ca:	6823      	ldr	r3, [r4, #0]
 80137cc:	4630      	mov	r0, r6
 80137ce:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
 80137d2:	699b      	ldr	r3, [r3, #24]
 80137d4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80137d6:	4798      	blx	r3
      if(dev->status.data_count < _t)
 80137d8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	@ 0x5c
      _t = dev->driver->ep_read(ep, dev->status.data_ptr, dev->status.data_count);
 80137dc:	b282      	uxth	r2, r0
      if(dev->status.data_count < _t)
 80137de:	429a      	cmp	r2, r3
 80137e0:	d8da      	bhi.n	8013798 <usbd_process_ep0+0x40>
      else if(dev->status.data_count != _t)
 80137e2:	d015      	beq.n	8013810 <usbd_process_ep0+0xb8>
        dev->status.data_count -= _t;
 80137e4:	1a9b      	subs	r3, r3, r2
 80137e6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
        dev->status.data_ptr = (uint8_t*)dev->status.data_ptr + _t;
 80137ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80137ec:	fa13 f080 	uxtah	r0, r3, r0
 80137f0:	65a0      	str	r0, [r4, #88]	@ 0x58
        return;
 80137f2:	e7bb      	b.n	801376c <usbd_process_ep0+0x14>
      dev->driver->ep_read(ep, 0, 0);
 80137f4:	6823      	ldr	r3, [r4, #0]
 80137f6:	2200      	movs	r2, #0
 80137f8:	4630      	mov	r0, r6
 80137fa:	699b      	ldr	r3, [r3, #24]
 80137fc:	4611      	mov	r1, r2
 80137fe:	4798      	blx	r3
      dev->status.control_state = usbd_ctl_idle;
 8013800:	2300      	movs	r3, #0
      usbd_process_callback(dev);
 8013802:	4620      	mov	r0, r4
      dev->status.control_state = usbd_ctl_idle;
 8013804:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
}
 8013808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbd_process_callback(dev);
 801380c:	f7ff bf5e 	b.w	80136cc <usbd_process_callback.constprop.0>
  dev->status.data_count = /*req->wLength;*/dev->status.data_maxsize;
 8013810:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
  dev->status.data_ptr = req->data;
 8013814:	f105 0708 	add.w	r7, r5, #8
  dev->status.data_count = /*req->wLength;*/dev->status.data_maxsize;
 8013818:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    if (dev->control_callback) {
 801381c:	6863      	ldr	r3, [r4, #4]
  dev->status.data_ptr = req->data;
 801381e:	65a7      	str	r7, [r4, #88]	@ 0x58
    if (dev->control_callback) {
 8013820:	bb23      	cbnz	r3, 801386c <usbd_process_ep0+0x114>
    switch (req->bmRequestType & (USB_REQ_TYPE | USB_REQ_RECIPIENT)) {
 8013822:	782b      	ldrb	r3, [r5, #0]
 8013824:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8013828:	2b01      	cmp	r3, #1
 801382a:	f000 8081 	beq.w	8013930 <usbd_process_ep0+0x1d8>
 801382e:	2b02      	cmp	r3, #2
 8013830:	f000 8083 	beq.w	801393a <usbd_process_ep0+0x1e2>
 8013834:	2b00      	cmp	r3, #0
 8013836:	d1af      	bne.n	8013798 <usbd_process_ep0+0x40>
    switch (req->bRequest) {
 8013838:	786b      	ldrb	r3, [r5, #1]
 801383a:	2b09      	cmp	r3, #9
 801383c:	d8ac      	bhi.n	8013798 <usbd_process_ep0+0x40>
 801383e:	a201      	add	r2, pc, #4	@ (adr r2, 8013844 <usbd_process_ep0+0xec>)
 8013840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013844:	080138e9 	.word	0x080138e9
 8013848:	08013799 	.word	0x08013799
 801384c:	08013799 	.word	0x08013799
 8013850:	08013799 	.word	0x08013799
 8013854:	08013799 	.word	0x08013799
 8013858:	080138ef 	.word	0x080138ef
 801385c:	080138bb 	.word	0x080138bb
 8013860:	08013799 	.word	0x08013799
 8013864:	08013887 	.word	0x08013887
 8013868:	08013909 	.word	0x08013909
        usbd_respond r = dev->control_callback(dev, req, &(dev->complete_callback));
 801386c:	f104 0208 	add.w	r2, r4, #8
 8013870:	4629      	mov	r1, r5
 8013872:	4620      	mov	r0, r4
 8013874:	4798      	blx	r3
        if (r != usbd_fail) return r;
 8013876:	2800      	cmp	r0, #0
 8013878:	d0d3      	beq.n	8013822 <usbd_process_ep0+0xca>
  switch(usbd_process_request(dev, req))
 801387a:	2801      	cmp	r0, #1
 801387c:	d006      	beq.n	801388c <usbd_process_ep0+0x134>
 801387e:	2802      	cmp	r0, #2
 8013880:	d18a      	bne.n	8013798 <usbd_process_ep0+0x40>
      dev->status.control_state = usbd_ctl_statusin;
 8013882:	2305      	movs	r3, #5
 8013884:	e79e      	b.n	80137c4 <usbd_process_ep0+0x6c>
        req->data[0] = dev->status.device_cfg;
 8013886:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801388a:	722b      	strb	r3, [r5, #8]
      if(req->bmRequestType & USB_REQ_DEVTOHOST)
 801388c:	f995 3000 	ldrsb.w	r3, [r5]
        usbd_process_eptx(dev, ep | 0x80);
 8013890:	f046 0080 	orr.w	r0, r6, #128	@ 0x80
      if(req->bmRequestType & USB_REQ_DEVTOHOST)
 8013894:	2b00      	cmp	r3, #0
 8013896:	da69      	bge.n	801396c <usbd_process_ep0+0x214>
        if(dev->status.data_count >= req->wLength)
 8013898:	88eb      	ldrh	r3, [r5, #6]
        usbd_process_eptx(dev, ep | 0x80);
 801389a:	4601      	mov	r1, r0
        if(dev->status.data_count >= req->wLength)
 801389c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
        usbd_process_eptx(dev, ep | 0x80);
 80138a0:	4620      	mov	r0, r4
        if(dev->status.data_count >= req->wLength)
 80138a2:	429a      	cmp	r2, r3
          dev->status.data_count = req->wLength;
 80138a4:	bf32      	itee	cc
 80138a6:	2303      	movcc	r3, #3
 80138a8:	f8a4 305c 	strhcs.w	r3, [r4, #92]	@ 0x5c
          dev->status.control_state = usbd_ctl_txdata;
 80138ac:	2302      	movcs	r3, #2
 80138ae:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
}
 80138b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbd_process_eptx(dev, ep);
 80138b6:	f7ff bf12 	b.w	80136de <usbd_process_eptx>
        if (req->wValue == ((USB_DTYPE_STRING << 8) | INTSERIALNO_DESCRIPTOR )) {
 80138ba:	886a      	ldrh	r2, [r5, #2]
 80138bc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d106      	bne.n	80138d2 <usbd_process_ep0+0x17a>
            dev->status.data_count = dev->driver->get_serialno_desc(req->data);
 80138c4:	6823      	ldr	r3, [r4, #0]
 80138c6:	4638      	mov	r0, r7
 80138c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138ca:	4798      	blx	r3
 80138cc:	f8a4 005c 	strh.w	r0, [r4, #92]	@ 0x5c
            return usbd_ack;
 80138d0:	e7dc      	b.n	801388c <usbd_process_ep0+0x134>
            if (dev->descriptor_callback) {
 80138d2:	6923      	ldr	r3, [r4, #16]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	f43f af5f 	beq.w	8013798 <usbd_process_ep0+0x40>
                return dev->descriptor_callback(req, &(dev->status.data_ptr), &(dev->status.data_count));
 80138da:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 80138de:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80138e2:	4628      	mov	r0, r5
 80138e4:	4798      	blx	r3
 80138e6:	e7c8      	b.n	801387a <usbd_process_ep0+0x122>
        req->data[0] = 0;
 80138e8:	2300      	movs	r3, #0
        req->data[0] = 0;
 80138ea:	812b      	strh	r3, [r5, #8]
        return usbd_ack;
 80138ec:	e7ce      	b.n	801388c <usbd_process_ep0+0x134>
}

/**\brief Retrieves status and capabilities.
 * \return current HW status, enumeration speed and capabilities \ref USBD_HW_CAPS */
inline static uint32_t usbd_getinfo(usbd_device *dev) {
    return dev->driver->getinfo();
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	4798      	blx	r3
        if (usbd_getinfo(dev) & USBD_HW_ADDRFST) {
 80138f4:	07c3      	lsls	r3, r0, #31
 80138f6:	d504      	bpl.n	8013902 <usbd_process_ep0+0x1aa>
            usbd_set_address(dev, req);
 80138f8:	4629      	mov	r1, r5
 80138fa:	4620      	mov	r0, r4
 80138fc:	f7ff fe92 	bl	8013624 <usbd_set_address>
 8013900:	e7c4      	b.n	801388c <usbd_process_ep0+0x134>
            dev->complete_callback = usbd_set_address;
 8013902:	4b1e      	ldr	r3, [pc, #120]	@ (801397c <usbd_process_ep0+0x224>)
 8013904:	60a3      	str	r3, [r4, #8]
 8013906:	e7c1      	b.n	801388c <usbd_process_ep0+0x134>
    if (dev->config_callback) {
 8013908:	68e3      	ldr	r3, [r4, #12]
 801390a:	2b00      	cmp	r3, #0
 801390c:	f43f af44 	beq.w	8013798 <usbd_process_ep0+0x40>
        return usbd_configure(dev, req->wValue);
 8013910:	78af      	ldrb	r7, [r5, #2]
        if (dev->config_callback(dev, config) == usbd_ack) {
 8013912:	4620      	mov	r0, r4
 8013914:	4639      	mov	r1, r7
 8013916:	4798      	blx	r3
 8013918:	2801      	cmp	r0, #1
 801391a:	f47f af3d 	bne.w	8013798 <usbd_process_ep0+0x40>
            dev->status.device_state = (config) ? usbd_state_configured : usbd_state_addressed;
 801391e:	2f00      	cmp	r7, #0
            dev->status.device_cfg = config;
 8013920:	f884 7061 	strb.w	r7, [r4, #97]	@ 0x61
            dev->status.device_state = (config) ? usbd_state_configured : usbd_state_addressed;
 8013924:	bf0c      	ite	eq
 8013926:	2303      	moveq	r3, #3
 8013928:	2304      	movne	r3, #4
 801392a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
            return usbd_ack;
 801392e:	e7ad      	b.n	801388c <usbd_process_ep0+0x134>
    switch (req->bRequest) {
 8013930:	786b      	ldrb	r3, [r5, #1]
 8013932:	2b00      	cmp	r3, #0
 8013934:	f47f af30 	bne.w	8013798 <usbd_process_ep0+0x40>
 8013938:	e7d7      	b.n	80138ea <usbd_process_ep0+0x192>
    switch (req->bRequest) {
 801393a:	786f      	ldrb	r7, [r5, #1]
 801393c:	2f01      	cmp	r7, #1
 801393e:	d011      	beq.n	8013964 <usbd_process_ep0+0x20c>
 8013940:	2f03      	cmp	r7, #3
 8013942:	d009      	beq.n	8013958 <usbd_process_ep0+0x200>
 8013944:	2f00      	cmp	r7, #0
 8013946:	f47f af27 	bne.w	8013798 <usbd_process_ep0+0x40>
        req->data[0] = dev->driver->ep_isstalled(req->wIndex) ? 1 : 0;
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	7928      	ldrb	r0, [r5, #4]
 801394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013950:	4798      	blx	r3
        req->data[1] = 0;
 8013952:	726f      	strb	r7, [r5, #9]
        req->data[0] = dev->driver->ep_isstalled(req->wIndex) ? 1 : 0;
 8013954:	7228      	strb	r0, [r5, #8]
        return usbd_ack;
 8013956:	e799      	b.n	801388c <usbd_process_ep0+0x134>
        dev->driver->ep_setstall(req->wIndex, 1);
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	2101      	movs	r1, #1
 801395c:	6a1b      	ldr	r3, [r3, #32]
        dev->driver->ep_setstall(req->wIndex, 0);
 801395e:	7928      	ldrb	r0, [r5, #4]
 8013960:	4798      	blx	r3
        return usbd_ack;
 8013962:	e793      	b.n	801388c <usbd_process_ep0+0x134>
        dev->driver->ep_setstall(req->wIndex, 0);
 8013964:	6823      	ldr	r3, [r4, #0]
 8013966:	2100      	movs	r1, #0
 8013968:	6a1b      	ldr	r3, [r3, #32]
 801396a:	e7f8      	b.n	801395e <usbd_process_ep0+0x206>
        dev->driver->ep_write(ep | 0x80, 0, 0);
 801396c:	6823      	ldr	r3, [r4, #0]
 801396e:	2200      	movs	r2, #0
 8013970:	69db      	ldr	r3, [r3, #28]
 8013972:	4611      	mov	r1, r2
 8013974:	4798      	blx	r3
        dev->status.control_state = usbd_ctl_statusin;
 8013976:	e784      	b.n	8013882 <usbd_process_ep0+0x12a>
      usbd_process_eptx(dev, ep);
 8013978:	4611      	mov	r1, r2
 801397a:	e79a      	b.n	80138b2 <usbd_process_ep0+0x15a>
 801397c:	08013625 	.word	0x08013625

08013980 <usbd_poll>:

/*__attribute__((externally_visible)) */
void usbd_poll(usbd_device *dev)
{
  dev->driver->poll(dev, usbd_process_evt);
 8013980:	6803      	ldr	r3, [r0, #0]
 8013982:	4901      	ldr	r1, [pc, #4]	@ (8013988 <usbd_poll+0x8>)
 8013984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013986:	4718      	bx	r3
 8013988:	08013669 	.word	0x08013669

0801398c <setaddr>:
  return usbd_lane_unk;
}

static void setaddr(uint8_t addr)
{
  _BMD(USB_OTG_FS_DEVICE->DCFG, USB_OTG_DCFG_DAD, addr << 4);
 801398c:	4a03      	ldr	r2, [pc, #12]	@ (801399c <setaddr+0x10>)
 801398e:	6813      	ldr	r3, [r2, #0]
 8013990:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8013994:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8013998:	6013      	str	r3, [r2, #0]
}
 801399a:	4770      	bx	lr
 801399c:	50000800 	.word	0x50000800

080139a0 <set_tx_fifo>:
 * \param epsize required max packet size in bytes
 * \return true if TX fifo is successfully set
 */
static bool set_tx_fifo(uint8_t ep, uint16_t epsize)
{
  uint32_t _fsa = USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ;
 80139a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80139a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  /* calculating initial TX FIFO address. next from EP0 TX fifo */
  _fsa = 0xFFFF & (_fsa + (_fsa >> 16));
 80139a6:	eb03 4313 	add.w	r3, r3, r3, lsr #16
{
 80139aa:	b510      	push	{r4, lr}
  _fsa = 0xFFFF & (_fsa + (_fsa >> 16));
 80139ac:	b29b      	uxth	r3, r3
  /* looking for next free TX fifo address */
  for(int i = 0; i < (MAX_EP - 1); i++)
 80139ae:	2400      	movs	r4, #0
  {
    uint32_t _t = USB_OTG_FS_GLOBAL->DIEPTXF[i];
 80139b0:	00a2      	lsls	r2, r4, #2
 80139b2:	f102 42a0 	add.w	r2, r2, #1342177280	@ 0x50000000
 80139b6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80139ba:	6852      	ldr	r2, [r2, #4]
    if((_t & 0xFFFF) < 0x200)
 80139bc:	f412 4f7e 	tst.w	r2, #65024	@ 0xfe00
 80139c0:	d105      	bne.n	80139ce <set_tx_fifo+0x2e>
    {
      _t = 0xFFFF & (_t + (_t >> 16));
 80139c2:	eb02 4212 	add.w	r2, r2, r2, lsr #16
 80139c6:	b292      	uxth	r2, r2
      if(_t > _fsa)
 80139c8:	4293      	cmp	r3, r2
 80139ca:	bf38      	it	cc
 80139cc:	4613      	movcc	r3, r2
  for(int i = 0; i < (MAX_EP - 1); i++)
 80139ce:	3401      	adds	r4, #1
 80139d0:	2c05      	cmp	r4, #5
 80139d2:	d1ed      	bne.n	80139b0 <set_tx_fifo+0x10>
        _fsa = _t;
    }
  }
  /* calculating requited TX fifo size */
  /* getting in 32 bit terms */
  epsize = (epsize + 0x03) >> 2;
 80139d4:	3103      	adds	r1, #3
 80139d6:	1089      	asrs	r1, r1, #2
  /* it must be 16 32-bit words minimum */
  if(epsize < 0x10)
    epsize = 0x10;
  /* checking for the available fifo */
  if((_fsa + epsize) > MAX_FIFO_SZ)
 80139d8:	2910      	cmp	r1, #16
 80139da:	bfb8      	it	lt
 80139dc:	2110      	movlt	r1, #16
 80139de:	18ca      	adds	r2, r1, r3
 80139e0:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
 80139e4:	d808      	bhi.n	80139f8 <set_tx_fifo+0x58>
    return false;
  /* programming fifo register */
  _fsa |= (epsize << 16);
  USB_OTG_FS_GLOBAL->DIEPTXF[ep - 1] = _fsa;
 80139e6:	0080      	lsls	r0, r0, #2
  _fsa |= (epsize << 16);
 80139e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  USB_OTG_FS_GLOBAL->DIEPTXF[ep - 1] = _fsa;
 80139ec:	f100 40a0 	add.w	r0, r0, #1342177280	@ 0x50000000
 80139f0:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
  return true;
 80139f4:	2001      	movs	r0, #1
}
 80139f6:	bd10      	pop	{r4, pc}
    return false;
 80139f8:	2000      	movs	r0, #0
 80139fa:	e7fc      	b.n	80139f6 <set_tx_fifo+0x56>

080139fc <ep_config>:

static bool ep_config(uint8_t ep, uint8_t eptype, uint16_t epsize)
{
 80139fc:	b570      	push	{r4, r5, r6, lr}
 80139fe:	460e      	mov	r6, r1
 8013a00:	4614      	mov	r4, r2
  if(ep == 0)
 8013a02:	bb20      	cbnz	r0, 8013a4e <ep_config+0x52>
  {
    /* configureing control endpoint EP0 */
    uint32_t mpsize;
    if(epsize <= 0x08){
 8013a04:	2a08      	cmp	r2, #8
 8013a06:	d91c      	bls.n	8013a42 <ep_config+0x46>
      epsize = 0x08;
      mpsize = 0x03;
    }
    else if(epsize <= 0x10){
 8013a08:	2a10      	cmp	r2, #16
 8013a0a:	d91d      	bls.n	8013a48 <ep_config+0x4c>
      epsize = 0x10;
      mpsize = 0x02;
    }
    else if(epsize <= 0x20){
      epsize = 0x20;
      mpsize = 0x01;
 8013a0c:	2a20      	cmp	r2, #32
 8013a0e:	bf8b      	itete	hi
 8013a10:	2200      	movhi	r2, #0
 8013a12:	2201      	movls	r2, #1
 8013a14:	2340      	movhi	r3, #64	@ 0x40
 8013a16:	2320      	movls	r3, #32
      epsize = 0x40;
      mpsize = 0x00;
    }
    /* EP0 TX FIFO size is setted on init level */
    /* enabling RX and TX interrupts from EP0 */
    USB_OTG_FS_DEVICE->DAINTMSK |= 0x00010001;
 8013a18:	482e      	ldr	r0, [pc, #184]	@ (8013ad4 <ep_config+0xd8>)
    /* setting up EP0 TX and RX registers */
    /*EPIN(ep)->DIEPTSIZ  = epsize;*/
    IN_ENDPOINT(ep)->DIEPCTL = mpsize | USB_OTG_DIEPCTL_SNAK;
    /* 1 setup packet, 1 packets total */
    OUT_ENDPOINT(ep)->DOEPTSIZ = epsize | (1 << 29) | (1 << 19);
 8013a1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
    USB_OTG_FS_DEVICE->DAINTMSK |= 0x00010001;
 8013a1e:	69c1      	ldr	r1, [r0, #28]
    OUT_ENDPOINT(ep)->DOEPTSIZ = epsize | (1 << 29) | (1 << 19);
 8013a20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    USB_OTG_FS_DEVICE->DAINTMSK |= 0x00010001;
 8013a24:	f041 1101 	orr.w	r1, r1, #65537	@ 0x10001
 8013a28:	61c1      	str	r1, [r0, #28]
    IN_ENDPOINT(ep)->DIEPCTL = mpsize | USB_OTG_DIEPCTL_SNAK;
 8013a2a:	f042 6000 	orr.w	r0, r2, #134217728	@ 0x8000000
 8013a2e:	492a      	ldr	r1, [pc, #168]	@ (8013ad8 <ep_config+0xdc>)
    OUT_ENDPOINT(ep)->DOEPCTL = mpsize | USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8013a30:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
    IN_ENDPOINT(ep)->DIEPCTL = mpsize | USB_OTG_DIEPCTL_SNAK;
 8013a34:	6008      	str	r0, [r1, #0]
    OUT_ENDPOINT(ep)->DOEPTSIZ = epsize | (1 << 29) | (1 << 19);
 8013a36:	f8c1 3210 	str.w	r3, [r1, #528]	@ 0x210
    OUT_ENDPOINT(ep)->DOEPCTL = mpsize | USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8013a3a:	f8c1 2200 	str.w	r2, [r1, #512]	@ 0x200
    //OUT_ENDPOINT(ep)->DOEPCTL = mpsize | USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_SNAK;
    return true;
 8013a3e:	2001      	movs	r0, #1
 8013a40:	e02b      	b.n	8013a9a <ep_config+0x9e>
      mpsize = 0x03;
 8013a42:	2203      	movs	r2, #3
      epsize = 0x08;
 8013a44:	2308      	movs	r3, #8
 8013a46:	e7e7      	b.n	8013a18 <ep_config+0x1c>
      mpsize = 0x02;
 8013a48:	2202      	movs	r2, #2
      epsize = 0x10;
 8013a4a:	2310      	movs	r3, #16
 8013a4c:	e7e4      	b.n	8013a18 <ep_config+0x1c>
  }
  if(ep & 0x80)
 8013a4e:	0603      	lsls	r3, r0, #24
 8013a50:	d531      	bpl.n	8013ab6 <ep_config+0xba>
  {
    ep &= 0x7F;
    /* configuring TX endpoint */
    /* setting up TX fifo and size register */
    if((eptype == USB_EPTYPE_ISOCHRONUS) || (eptype == (USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF)))
 8013a52:	2901      	cmp	r1, #1
    ep &= 0x7F;
 8013a54:	f000 057f 	and.w	r5, r0, #127	@ 0x7f
    if((eptype == USB_EPTYPE_ISOCHRONUS) || (eptype == (USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF)))
 8013a58:	d001      	beq.n	8013a5e <ep_config+0x62>
 8013a5a:	2906      	cmp	r1, #6
 8013a5c:	d11e      	bne.n	8013a9c <ep_config+0xa0>
    {
      if(!set_tx_fifo(ep, epsize << 1))
 8013a5e:	0061      	lsls	r1, r4, #1
 8013a60:	b289      	uxth	r1, r1
 8013a62:	4628      	mov	r0, r5
 8013a64:	f7ff ff9c 	bl	80139a0 <set_tx_fifo>
 8013a68:	b1b0      	cbz	r0, 8013a98 <ep_config+0x9c>
    }else{
      if(!set_tx_fifo(ep, epsize))
    	return false;
    }
    /* enabling EP TX interrupt */
    USB_OTG_FS_DEVICE->DAINTMSK |= (0x0001UL << ep);
 8013a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8013ad4 <ep_config+0xd8>)
 8013a6c:	2301      	movs	r3, #1
    {
      case USB_EPTYPE_ISOCHRONUS:
        IN_ENDPOINT(ep)->DIEPCTL = USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK |
                                   (0x01 << 18) | USB_OTG_DIEPCTL_USBAEP |
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   (ep << 22) | epsize;
 8013a6e:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
    USB_OTG_FS_DEVICE->DAINTMSK |= (0x0001UL << ep);
 8013a72:	69d1      	ldr	r1, [r2, #28]
 8013a74:	40ab      	lsls	r3, r5
        IN_ENDPOINT(ep)->DIEPCTL = USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK |
 8013a76:	f105 7520 	add.w	r5, r5, #41943040	@ 0x2800000
    USB_OTG_FS_DEVICE->DAINTMSK |= (0x0001UL << ep);
 8013a7a:	430b      	orrs	r3, r1
        IN_ENDPOINT(ep)->DIEPCTL = USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK |
 8013a7c:	3548      	adds	r5, #72	@ 0x48
    USB_OTG_FS_DEVICE->DAINTMSK |= (0x0001UL << ep);
 8013a7e:	61d3      	str	r3, [r2, #28]
    switch(eptype)
 8013a80:	f006 03fb 	and.w	r3, r6, #251	@ 0xfb
        IN_ENDPOINT(ep)->DIEPCTL = USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK |
 8013a84:	016d      	lsls	r5, r5, #5
    switch(eptype)
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d010      	beq.n	8013aac <ep_config+0xb0>
 8013a8a:	2e01      	cmp	r6, #1
 8013a8c:	d008      	beq.n	8013aa0 <ep_config+0xa4>
        break;

      default:
        IN_ENDPOINT(ep)->DIEPCTL = USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_USBAEP |
                                   (0x03 << 18) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   (ep << 22) | epsize;
 8013a8e:	f044 54c0 	orr.w	r4, r4, #402653184	@ 0x18000000
                                    (0x02 << 18) | epsize;
        break;
      default:
        OUT_ENDPOINT(ep)->DOEPCTL = USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_CNAK |
                                    USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP |
                                    (0x03 << 18) | epsize;
 8013a92:	f444 2448 	orr.w	r4, r4, #819200	@ 0xc8000
 8013a96:	e007      	b.n	8013aa8 <ep_config+0xac>
        return false;
 8013a98:	2000      	movs	r0, #0
        break;
    }
  }
  return true;
}
 8013a9a:	bd70      	pop	{r4, r5, r6, pc}
      if(!set_tx_fifo(ep, epsize))
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	e7e0      	b.n	8013a62 <ep_config+0x66>
                                   (ep << 22) | epsize;
 8013aa0:	f044 4414 	orr.w	r4, r4, #2483027968	@ 0x94000000
                                    (0x01 << 18) | epsize;
 8013aa4:	f444 2490 	orr.w	r4, r4, #294912	@ 0x48000
        OUT_ENDPOINT(ep)->DOEPCTL = USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_CNAK |
 8013aa8:	602c      	str	r4, [r5, #0]
        break;
 8013aaa:	e7c8      	b.n	8013a3e <ep_config+0x42>
                                   (ep << 22) | epsize;
 8013aac:	f044 54c0 	orr.w	r4, r4, #402653184	@ 0x18000000
                                    (0x02 << 18) | epsize;
 8013ab0:	f444 2408 	orr.w	r4, r4, #557056	@ 0x88000
 8013ab4:	e7f8      	b.n	8013aa8 <ep_config+0xac>
        OUT_ENDPOINT(ep)->DOEPCTL = USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_CNAK |
 8013ab6:	f100 7520 	add.w	r5, r0, #41943040	@ 0x2800000
    switch(eptype)
 8013aba:	f001 03fb 	and.w	r3, r1, #251	@ 0xfb
                                    (0x03 << 18) | epsize;
 8013abe:	f042 4414 	orr.w	r4, r2, #2483027968	@ 0x94000000
        OUT_ENDPOINT(ep)->DOEPCTL = USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_CNAK |
 8013ac2:	3558      	adds	r5, #88	@ 0x58
    switch(eptype)
 8013ac4:	2b02      	cmp	r3, #2
        OUT_ENDPOINT(ep)->DOEPCTL = USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_CNAK |
 8013ac6:	ea4f 1545 	mov.w	r5, r5, lsl #5
    switch(eptype)
 8013aca:	d0f1      	beq.n	8013ab0 <ep_config+0xb4>
 8013acc:	2901      	cmp	r1, #1
 8013ace:	d1e0      	bne.n	8013a92 <ep_config+0x96>
 8013ad0:	e7e8      	b.n	8013aa4 <ep_config+0xa8>
 8013ad2:	bf00      	nop
 8013ad4:	50000800 	.word	0x50000800
 8013ad8:	50000900 	.word	0x50000900

08013adc <ep_read>:

static int32_t ep_read(uint8_t ep, void* buf, uint16_t blen)
{
  uint32_t len, tmp = 0;

  ep &= 0x7F;
 8013adc:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
  //volatile uint32_t *fifo = EPFIFO(0);

  /* no data in RX FIFO */
  if(!(USB_OTG_FS_GLOBAL->GINTSTS & USB_OTG_GINTSTS_RXFLVL))
 8013ae0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
{
 8013ae4:	b570      	push	{r4, r5, r6, lr}
  if(!(USB_OTG_FS_GLOBAL->GINTSTS & USB_OTG_GINTSTS_RXFLVL))
 8013ae6:	6944      	ldr	r4, [r0, #20]
 8013ae8:	06e4      	lsls	r4, r4, #27
 8013aea:	d524      	bpl.n	8013b36 <ep_read+0x5a>
    return -1;
  if((USB_OTG_FS_GLOBAL->GRXSTSR & USB_OTG_GRXSTSP_EPNUM) != ep)
 8013aec:	69c4      	ldr	r4, [r0, #28]
 8013aee:	f004 040f 	and.w	r4, r4, #15
 8013af2:	429c      	cmp	r4, r3
 8013af4:	d11f      	bne.n	8013b36 <ep_read+0x5a>
    return -1;
  /* pop data from fifo */
  //len = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, USB_OTG_FS_GLOBAL->GRXSTSP);
  len = ((USB_OTG_FS_GLOBAL->GRXSTSP & USB_OTG_GRXSTSP_BCNT) >> USB_OTG_GRXSTSP_BCNT_Pos);
 8013af6:	6a05      	ldr	r5, [r0, #32]

  for(int idx = 0; idx < len; idx++)
 8013af8:	2400      	movs	r4, #0
  {
    if((idx & 0x03) == 0x00)
    {
      tmp = EPFIFO(0); //*fifo
 8013afa:	4e10      	ldr	r6, [pc, #64]	@ (8013b3c <ep_read+0x60>)
  len = ((USB_OTG_FS_GLOBAL->GRXSTSP & USB_OTG_GRXSTSP_BCNT) >> USB_OTG_GRXSTSP_BCNT_Pos);
 8013afc:	f3c5 150a 	ubfx	r5, r5, #4, #11
  uint32_t len, tmp = 0;
 8013b00:	4620      	mov	r0, r4
  for(int idx = 0; idx < len; idx++)
 8013b02:	42ac      	cmp	r4, r5
 8013b04:	d10d      	bne.n	8013b22 <ep_read+0x46>
      ((uint8_t*)buf)[idx] = tmp & 0xFF;
      tmp >>= 8;
    }
  }

  _BST(OUT_ENDPOINT(ep)->DOEPCTL, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013b06:	f103 7320 	add.w	r3, r3, #41943040	@ 0x2800000

  return (len < blen) ? len : blen;
 8013b0a:	42a2      	cmp	r2, r4
  _BST(OUT_ENDPOINT(ep)->DOEPCTL, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013b0c:	f103 0358 	add.w	r3, r3, #88	@ 0x58
  return (len < blen) ? len : blen;
 8013b10:	bf28      	it	cs
 8013b12:	4622      	movcs	r2, r4
  _BST(OUT_ENDPOINT(ep)->DOEPCTL, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013b14:	015b      	lsls	r3, r3, #5
  return (len < blen) ? len : blen;
 8013b16:	4610      	mov	r0, r2
  _BST(OUT_ENDPOINT(ep)->DOEPCTL, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013b18:	6819      	ldr	r1, [r3, #0]
 8013b1a:	f041 4104 	orr.w	r1, r1, #2214592512	@ 0x84000000
 8013b1e:	6019      	str	r1, [r3, #0]
}
 8013b20:	bd70      	pop	{r4, r5, r6, pc}
    if((idx & 0x03) == 0x00)
 8013b22:	f014 0f03 	tst.w	r4, #3
 8013b26:	d100      	bne.n	8013b2a <ep_read+0x4e>
      tmp = EPFIFO(0); //*fifo
 8013b28:	6830      	ldr	r0, [r6, #0]
    if(idx < blen)
 8013b2a:	42a2      	cmp	r2, r4
      ((uint8_t*)buf)[idx] = tmp & 0xFF;
 8013b2c:	bfc4      	itt	gt
 8013b2e:	5508      	strbgt	r0, [r1, r4]
      tmp >>= 8;
 8013b30:	0a00      	lsrgt	r0, r0, #8
  for(int idx = 0; idx < len; idx++)
 8013b32:	3401      	adds	r4, #1
 8013b34:	e7e5      	b.n	8013b02 <ep_read+0x26>
    return -1;
 8013b36:	f04f 30ff 	mov.w	r0, #4294967295
 8013b3a:	e7f1      	b.n	8013b20 <ep_read+0x44>
 8013b3c:	50001000 	.word	0x50001000

08013b40 <ep_write>:

static int32_t ep_write(uint8_t ep, const void *buf, uint16_t blen)
{
 8013b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len, tmp;
  ep &= 0x7F;
 8013b42:	f000 047f 	and.w	r4, r0, #127	@ 0x7f

  /* transfer data size in 32-bit words */
  len = (blen + 3) >> 2;
 8013b46:	1cd6      	adds	r6, r2, #3
 8013b48:	4610      	mov	r0, r2
  /* no enough space in TX fifo */
  if(len > IN_ENDPOINT(ep)->DTXFSTS)
 8013b4a:	f104 7520 	add.w	r5, r4, #41943040	@ 0x2800000
 8013b4e:	3548      	adds	r5, #72	@ 0x48
 8013b50:	016d      	lsls	r5, r5, #5
 8013b52:	69ab      	ldr	r3, [r5, #24]
 8013b54:	ebb3 0f96 	cmp.w	r3, r6, lsr #2
 8013b58:	d327      	bcc.n	8013baa <ep_write+0x6a>
    return -1;
  if(ep != 0 && IN_ENDPOINT(ep)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8013b5a:	b114      	cbz	r4, 8013b62 <ep_write+0x22>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	db23      	blt.n	8013baa <ep_write+0x6a>
    return -1;

  IN_ENDPOINT(ep)->DIEPTSIZ = 0;
  IN_ENDPOINT(ep)->DIEPTSIZ = (1 << 19) + blen;
 8013b62:	f502 2600 	add.w	r6, r2, #524288	@ 0x80000
  IN_ENDPOINT(ep)->DIEPTSIZ = 0;
 8013b66:	2300      	movs	r3, #0
  for(int idx = 0; idx < blen; idx++)
  {
    tmp |= (uint32_t)((const uint8_t*)buf)[idx] << ((idx & 0x03) << 3);
    if((idx & 0x03) == 0x03 || (idx + 1) == blen)
    {
      EPFIFO(ep) = tmp;
 8013b68:	f504 24a0 	add.w	r4, r4, #327680	@ 0x50000
  IN_ENDPOINT(ep)->DIEPTSIZ = 0;
 8013b6c:	612b      	str	r3, [r5, #16]
  IN_ENDPOINT(ep)->DIEPTSIZ = (1 << 19) + blen;
 8013b6e:	612e      	str	r6, [r5, #16]
      EPFIFO(ep) = tmp;
 8013b70:	3401      	adds	r4, #1
  _BMD(IN_ENDPOINT(ep)->DIEPCTL, USB_OTG_DIEPCTL_STALL, USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK);
 8013b72:	682e      	ldr	r6, [r5, #0]
      EPFIFO(ep) = tmp;
 8013b74:	0324      	lsls	r4, r4, #12
  _BMD(IN_ENDPOINT(ep)->DIEPCTL, USB_OTG_DIEPCTL_STALL, USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK);
 8013b76:	f026 4604 	bic.w	r6, r6, #2214592512	@ 0x84000000
 8013b7a:	f426 1600 	bic.w	r6, r6, #2097152	@ 0x200000
 8013b7e:	f046 4604 	orr.w	r6, r6, #2214592512	@ 0x84000000
 8013b82:	602e      	str	r6, [r5, #0]
      tmp = 0;
 8013b84:	2500      	movs	r5, #0
  for(int idx = 0; idx < blen; idx++)
 8013b86:	429a      	cmp	r2, r3
 8013b88:	dc00      	bgt.n	8013b8c <ep_write+0x4c>
    }
  }
  return blen;
}
 8013b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp |= (uint32_t)((const uint8_t*)buf)[idx] << ((idx & 0x03) << 3);
 8013b8c:	00df      	lsls	r7, r3, #3
 8013b8e:	5cce      	ldrb	r6, [r1, r3]
 8013b90:	f007 0718 	and.w	r7, r7, #24
 8013b94:	40be      	lsls	r6, r7
 8013b96:	4335      	orrs	r5, r6
    if((idx & 0x03) == 0x03 || (idx + 1) == blen)
 8013b98:	f003 0603 	and.w	r6, r3, #3
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	2e03      	cmp	r6, #3
 8013ba0:	d001      	beq.n	8013ba6 <ep_write+0x66>
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d1ef      	bne.n	8013b86 <ep_write+0x46>
      EPFIFO(ep) = tmp;
 8013ba6:	6025      	str	r5, [r4, #0]
 8013ba8:	e7ec      	b.n	8013b84 <ep_write+0x44>
    return -1;
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295
 8013bae:	e7ec      	b.n	8013b8a <ep_write+0x4a>

08013bb0 <get_frame>:

static uint16_t get_frame (void)
{
  return _FLD2VAL(USB_OTG_DSTS_FNSOF, USB_OTG_FS_DEVICE->DSTS);
 8013bb0:	4b02      	ldr	r3, [pc, #8]	@ (8013bbc <get_frame+0xc>)
 8013bb2:	6898      	ldr	r0, [r3, #8]
}
 8013bb4:	f3c0 200d 	ubfx	r0, r0, #8, #14
 8013bb8:	4770      	bx	lr
 8013bba:	bf00      	nop
 8013bbc:	50000800 	.word	0x50000800

08013bc0 <getinfo>:
    if (!(RCC->AHB2ENR & RCC_AHB2ENR_OTGFSEN)) return STATUS_VAL(0);
 8013bc0:	4b06      	ldr	r3, [pc, #24]	@ (8013bdc <getinfo+0x1c>)
 8013bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013bc4:	061b      	lsls	r3, r3, #24
 8013bc6:	d507      	bpl.n	8013bd8 <getinfo+0x18>
    if (!(USB_OTG_FS_DEVICE->DCTL & USB_OTG_DCTL_SDIS)) return STATUS_VAL(USBD_HW_ENABLED | USBD_HW_SPEED_FS);
 8013bc8:	4b05      	ldr	r3, [pc, #20]	@ (8013be0 <getinfo+0x20>)
 8013bca:	685b      	ldr	r3, [r3, #4]
    return STATUS_VAL(USBD_HW_ENABLED);
 8013bcc:	f013 0f02 	tst.w	r3, #2
 8013bd0:	bf0c      	ite	eq
 8013bd2:	2029      	moveq	r0, #41	@ 0x29
 8013bd4:	2009      	movne	r0, #9
 8013bd6:	4770      	bx	lr
    if (!(RCC->AHB2ENR & RCC_AHB2ENR_OTGFSEN)) return STATUS_VAL(0);
 8013bd8:	2001      	movs	r0, #1
}
 8013bda:	4770      	bx	lr
 8013bdc:	40023800 	.word	0x40023800
 8013be0:	50000800 	.word	0x50000800

08013be4 <ep_setstall>:
  if(ep & 0x80)
 8013be4:	0603      	lsls	r3, r0, #24
 8013be6:	d512      	bpl.n	8013c0e <ep_setstall+0x2a>
    uint32_t _t = IN_ENDPOINT(ep)->DIEPCTL;
 8013be8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8013bec:	f100 7020 	add.w	r0, r0, #41943040	@ 0x2800000
 8013bf0:	3048      	adds	r0, #72	@ 0x48
 8013bf2:	0140      	lsls	r0, r0, #5
 8013bf4:	6803      	ldr	r3, [r0, #0]
    if(_t & USB_OTG_DIEPCTL_USBAEP)
 8013bf6:	041a      	lsls	r2, r3, #16
 8013bf8:	d508      	bpl.n	8013c0c <ep_setstall+0x28>
      if(stall)
 8013bfa:	b111      	cbz	r1, 8013c02 <ep_setstall+0x1e>
        _BST(_t, USB_OTG_DOEPCTL_STALL);
 8013bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013c00:	e003      	b.n	8013c0a <ep_setstall+0x26>
        _BMD(_t, USB_OTG_DIEPCTL_STALL, USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_SNAK);
 8013c02:	f023 53c1 	bic.w	r3, r3, #404750336	@ 0x18200000
 8013c06:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
      OUT_ENDPOINT(ep)->DOEPCTL = _t;
 8013c0a:	6003      	str	r3, [r0, #0]
}
 8013c0c:	4770      	bx	lr
    uint32_t _t = OUT_ENDPOINT(ep)->DOEPCTL;
 8013c0e:	f100 7020 	add.w	r0, r0, #41943040	@ 0x2800000
 8013c12:	3058      	adds	r0, #88	@ 0x58
 8013c14:	0140      	lsls	r0, r0, #5
 8013c16:	6803      	ldr	r3, [r0, #0]
    if(_t & USB_OTG_DOEPCTL_USBAEP)
 8013c18:	041a      	lsls	r2, r3, #16
 8013c1a:	d5f7      	bpl.n	8013c0c <ep_setstall+0x28>
      if(stall)
 8013c1c:	2900      	cmp	r1, #0
 8013c1e:	d1ed      	bne.n	8013bfc <ep_setstall+0x18>
        _BMD(_t, USB_OTG_DOEPCTL_STALL, USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_CNAK);
 8013c20:	f023 53a1 	bic.w	r3, r3, #337641472	@ 0x14200000
 8013c24:	f043 53a0 	orr.w	r3, r3, #335544320	@ 0x14000000
 8013c28:	e7ef      	b.n	8013c0a <ep_setstall+0x26>

08013c2a <ep_isstalled>:
  if(ep & 0x80)
 8013c2a:	0603      	lsls	r3, r0, #24
    return (IN_ENDPOINT(ep)->DIEPCTL & USB_OTG_DIEPCTL_STALL) ? true : false;
 8013c2c:	bf4b      	itete	mi
 8013c2e:	f000 007f 	andmi.w	r0, r0, #127	@ 0x7f
    return (OUT_ENDPOINT(ep)->DOEPCTL & USB_OTG_DOEPCTL_STALL) ? true : false;
 8013c32:	f100 7020 	addpl.w	r0, r0, #41943040	@ 0x2800000
    return (IN_ENDPOINT(ep)->DIEPCTL & USB_OTG_DIEPCTL_STALL) ? true : false;
 8013c36:	f100 7020 	addmi.w	r0, r0, #41943040	@ 0x2800000
    return (OUT_ENDPOINT(ep)->DOEPCTL & USB_OTG_DOEPCTL_STALL) ? true : false;
 8013c3a:	3058      	addpl	r0, #88	@ 0x58
    return (IN_ENDPOINT(ep)->DIEPCTL & USB_OTG_DIEPCTL_STALL) ? true : false;
 8013c3c:	bf48      	it	mi
 8013c3e:	3048      	addmi	r0, #72	@ 0x48
    return (OUT_ENDPOINT(ep)->DOEPCTL & USB_OTG_DOEPCTL_STALL) ? true : false;
 8013c40:	0140      	lsls	r0, r0, #5
 8013c42:	6800      	ldr	r0, [r0, #0]
 8013c44:	f3c0 5040 	ubfx	r0, r0, #21, #1
}
 8013c48:	4770      	bx	lr
	...

08013c4c <enable>:
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 8013c4c:	4a54      	ldr	r2, [pc, #336]	@ (8013da0 <enable+0x154>)
 8013c4e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8013c50:	f043 0301 	orr.w	r3, r3, #1
{
 8013c54:	b570      	push	{r4, r5, r6, lr}
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 8013c56:	6313      	str	r3, [r2, #48]	@ 0x30
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOGEN);
 8013c58:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8013c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c5e:	6313      	str	r3, [r2, #48]	@ 0x30
  GPIOA->MODER &= ~((0x3 << 24) | (0x3 << 22));
 8013c60:	4b50      	ldr	r3, [pc, #320]	@ (8013da4 <enable+0x158>)
 8013c62:	6819      	ldr	r1, [r3, #0]
 8013c64:	f021 7170 	bic.w	r1, r1, #62914560	@ 0x3c00000
 8013c68:	6019      	str	r1, [r3, #0]
  GPIOA->MODER |= ((0x2 << 24) | (0x2 << 22)); //复用功能模式
 8013c6a:	6819      	ldr	r1, [r3, #0]
 8013c6c:	f041 7120 	orr.w	r1, r1, #41943040	@ 0x2800000
 8013c70:	6019      	str	r1, [r3, #0]
  GPIOA->AFR[1] &= 0xfff00fff;
 8013c72:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013c74:	f421 217f 	bic.w	r1, r1, #1044480	@ 0xff000
 8013c78:	6259      	str	r1, [r3, #36]	@ 0x24
  GPIOA->AFR[1] |= 0x000aa000;  //AFR12[3:0] = AFR11[3:0] = af10(0xa)
 8013c7a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013c7c:	f441 212a 	orr.w	r1, r1, #696320	@ 0xaa000
 8013c80:	6259      	str	r1, [r3, #36]	@ 0x24
  GPIOA->OTYPER &= ~((0x1 << 12) | (0x1 << 11)); // 复位状态 推挽输出
 8013c82:	6859      	ldr	r1, [r3, #4]
 8013c84:	f421 51c0 	bic.w	r1, r1, #6144	@ 0x1800
 8013c88:	6059      	str	r1, [r3, #4]
  GPIOA->OSPEEDR |= ((0x3 << 24) | (0x3 << 22)); // IO速度 高速
 8013c8a:	6899      	ldr	r1, [r3, #8]
 8013c8c:	f041 7170 	orr.w	r1, r1, #62914560	@ 0x3c00000
 8013c90:	6099      	str	r1, [r3, #8]
  GPIOA->PUPDR &= ~((0x3 << 24) | (0x3 << 22)); // 无上下拉
 8013c92:	68d9      	ldr	r1, [r3, #12]
 8013c94:	f021 7170 	bic.w	r1, r1, #62914560	@ 0x3c00000
 8013c98:	60d9      	str	r1, [r3, #12]
  GPIOA->MODER &= ~(0x3 << 12);
 8013c9a:	6819      	ldr	r1, [r3, #0]
 8013c9c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8013ca0:	6019      	str	r1, [r3, #0]
  GPIOA->MODER |= (0x1 << 12); //输出模式
 8013ca2:	6819      	ldr	r1, [r3, #0]
 8013ca4:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8013ca8:	6019      	str	r1, [r3, #0]
  GPIOA->MODER &= ~(0x3 << 14); //输入模式
 8013caa:	6819      	ldr	r1, [r3, #0]
 8013cac:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8013cb0:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013cb2:	2170      	movs	r1, #112	@ 0x70
  RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;
 8013cb4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8013cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cba:	6353      	str	r3, [r2, #52]	@ 0x34
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8013cbc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8013cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8013cc4:	4b38      	ldr	r3, [pc, #224]	@ (8013da8 <enable+0x15c>)
 8013cc6:	f883 1343 	strb.w	r1, [r3, #835]	@ 0x343
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013cca:	2108      	movs	r1, #8
 8013ccc:	6099      	str	r1, [r3, #8]
    RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN; //_BST(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8013cce:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  if(enable)
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d056      	beq.n	8013d82 <enable+0x136>
    RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN; //_BST(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8013cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cd8:	6353      	str	r3, [r2, #52]	@ 0x34
    _WBS(USB_OTG_FS_GLOBAL->GRSTCTL, USB_OTG_GRSTCTL_AHBIDL); //while((OTG->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0)
 8013cda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8013cde:	691a      	ldr	r2, [r3, #16]
 8013ce0:	2a00      	cmp	r2, #0
 8013ce2:	dafc      	bge.n	8013cde <enable+0x92>
    USB_OTG_FS_GLOBAL->GUSBCFG = USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x06);
 8013ce4:	4a31      	ldr	r2, [pc, #196]	@ (8013dac <enable+0x160>)
    USB_OTG_FS_DEVICE->DIEPMSK = USB_OTG_DIEPMSK_XFRCM;
 8013ce6:	2001      	movs	r0, #1
    USB_OTG_FS_DEVICE->DCTL |= USB_OTG_DCTL_SDIS; //_BST(OTGD->DCTL, USB_OTG_DCTL_SDIS);
 8013ce8:	4931      	ldr	r1, [pc, #196]	@ (8013db0 <enable+0x164>)
  tx_offset = USB_OTG_FS_GLOBAL->GRXFSIZ;
 8013cea:	f04f 46a0 	mov.w	r6, #1342177280	@ 0x50000000
    USB_OTG_FS_GLOBAL->GUSBCFG = USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x06);
 8013cee:	60da      	str	r2, [r3, #12]
    USB_OTG_FS_GLOBAL->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL; //BVALID信号是AXI协议中用于指示写响应有效的信号
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	4d30      	ldr	r5, [pc, #192]	@ (8013db4 <enable+0x168>)
 8013cf4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8013cf8:	601a      	str	r2, [r3, #0]
    USB_OTG_FS_GLOBAL->GCCFG = USB_OTG_GCCFG_PWRDWN; // USB_OTG_FS_GLOBAL->GCCFG = param_pa11_pa12.device_gccfg;
 8013cfa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8013cfe:	639a      	str	r2, [r3, #56]	@ 0x38
    USB_OTG_FS_PCGCCTL = 0;
 8013d00:	2200      	movs	r2, #0
 8013d02:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
    USB_OTG_FS_DEVICE->DCTL |= USB_OTG_DCTL_SDIS; //_BST(OTGD->DCTL, USB_OTG_DCTL_SDIS);
 8013d06:	684a      	ldr	r2, [r1, #4]
 8013d08:	f042 0202 	orr.w	r2, r2, #2
 8013d0c:	604a      	str	r2, [r1, #4]
    _BMD(USB_OTG_FS_DEVICE->DCFG, USB_OTG_DCFG_PERSCHIVL | USB_OTG_DCFG_DSPD,
 8013d0e:	680a      	ldr	r2, [r1, #0]
 8013d10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8013d14:	f022 0203 	bic.w	r2, r2, #3
 8013d18:	f042 0203 	orr.w	r2, r2, #3
 8013d1c:	600a      	str	r2, [r1, #0]
    USB_OTG_FS_GLOBAL->GINTMSK = USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM |
 8013d1e:	4a26      	ldr	r2, [pc, #152]	@ (8013db8 <enable+0x16c>)
    USB_OTG_FS_DEVICE->DIEPMSK = USB_OTG_DIEPMSK_XFRCM;
 8013d20:	6108      	str	r0, [r1, #16]
    USB_OTG_FS_GLOBAL->GRXFSIZ = param_pa11_pa12.device_rx_fifo_size;
 8013d22:	21e0      	movs	r1, #224	@ 0xe0
    USB_OTG_FS_GLOBAL->GINTMSK = USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM |
 8013d24:	619a      	str	r2, [r3, #24]
    USB_OTG_FS_GLOBAL->GINTSTS = 0xFFFFFFFF;
 8013d26:	f04f 32ff 	mov.w	r2, #4294967295
 8013d2a:	615a      	str	r2, [r3, #20]
    USB_OTG_FS_GLOBAL->GAHBCFG = USB_OTG_GAHBCFG_GINT;
 8013d2c:	6098      	str	r0, [r3, #8]
    USB_OTG_FS_GLOBAL->GRXFSIZ = param_pa11_pa12.device_rx_fifo_size;
 8013d2e:	6259      	str	r1, [r3, #36]	@ 0x24
    USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ = RX_FIFO_SZ | (0x10 << 16);
 8013d30:	4922      	ldr	r1, [pc, #136]	@ (8013dbc <enable+0x170>)
 8013d32:	6299      	str	r1, [r3, #40]	@ 0x28
 8013d34:	4613      	mov	r3, r2
  if(fifo == 0U)
 8013d36:	b2d9      	uxtb	r1, r3
    USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | tx_offset;
 8013d38:	f835 0f02 	ldrh.w	r0, [r5, #2]!
  tx_offset = USB_OTG_FS_GLOBAL->GRXFSIZ;
 8013d3c:	6a72      	ldr	r2, [r6, #36]	@ 0x24
  if(fifo == 0U)
 8013d3e:	29ff      	cmp	r1, #255	@ 0xff
    USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | tx_offset;
 8013d40:	ea4f 4000 	mov.w	r0, r0, lsl #16
  if(fifo == 0U)
 8013d44:	d103      	bne.n	8013d4e <enable+0x102>
    USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | tx_offset;
 8013d46:	4302      	orrs	r2, r0
    for(uint8_t i = 0; i < MAX_EP; i++)
 8013d48:	2300      	movs	r3, #0
    USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | tx_offset;
 8013d4a:	62b2      	str	r2, [r6, #40]	@ 0x28
    for(uint8_t i = 0; i < MAX_EP; i++)
 8013d4c:	e7f3      	b.n	8013d36 <enable+0xea>
    tx_offset += (USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ) >> 16;
 8013d4e:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
    for(i = 0U; i < (fifo - 1U); i++)
 8013d50:	2400      	movs	r4, #0
    tx_offset += (USB_OTG_FS_GLOBAL->DIEPTXF0_HNPTXFSIZ) >> 16;
 8013d52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    for(i = 0U; i < (fifo - 1U); i++)
 8013d56:	429c      	cmp	r4, r3
 8013d58:	d309      	bcc.n	8013d6e <enable+0x122>
    USB_OTG_FS_GLOBAL->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | tx_offset;
 8013d5a:	0099      	lsls	r1, r3, #2
    for(uint8_t i = 0; i < MAX_EP; i++)
 8013d5c:	3301      	adds	r3, #1
    USB_OTG_FS_GLOBAL->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | tx_offset;
 8013d5e:	4302      	orrs	r2, r0
 8013d60:	f101 41a0 	add.w	r1, r1, #1342177280	@ 0x50000000
    for(uint8_t i = 0; i < MAX_EP; i++)
 8013d64:	2b05      	cmp	r3, #5
    USB_OTG_FS_GLOBAL->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | tx_offset;
 8013d66:	f8c1 2104 	str.w	r2, [r1, #260]	@ 0x104
    for(uint8_t i = 0; i < MAX_EP; i++)
 8013d6a:	d1e4      	bne.n	8013d36 <enable+0xea>
}
 8013d6c:	bd70      	pop	{r4, r5, r6, pc}
      tx_offset += (USB_OTG_FS_GLOBAL->DIEPTXF[i] >> 16);
 8013d6e:	00a1      	lsls	r1, r4, #2
 8013d70:	3401      	adds	r4, #1
 8013d72:	f101 41a0 	add.w	r1, r1, #1342177280	@ 0x50000000
 8013d76:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8013d7a:	6849      	ldr	r1, [r1, #4]
 8013d7c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    for(i = 0U; i < (fifo - 1U); i++)
 8013d80:	e7e9      	b.n	8013d56 <enable+0x10a>
    if(RCC->AHB2ENR & RCC_AHB2ENR_OTGFSEN)
 8013d82:	061b      	lsls	r3, r3, #24
 8013d84:	d5f2      	bpl.n	8013d6c <enable+0x120>
      _BST(RCC->AHB2RSTR, RCC_AHB2RSTR_OTGFSRST);
 8013d86:	6953      	ldr	r3, [r2, #20]
 8013d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d8c:	6153      	str	r3, [r2, #20]
      _BCL(RCC->AHB2RSTR, RCC_AHB2RSTR_OTGFSRST);
 8013d8e:	6953      	ldr	r3, [r2, #20]
 8013d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d94:	6153      	str	r3, [r2, #20]
      _BCL(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8013d96:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8013d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d9c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8013d9e:	e7e5      	b.n	8013d6c <enable+0x120>
 8013da0:	40023800 	.word	0x40023800
 8013da4:	40020000 	.word	0x40020000
 8013da8:	e000e100 	.word	0xe000e100
 8013dac:	40001840 	.word	0x40001840
 8013db0:	50000800 	.word	0x50000800
 8013db4:	0808ed7c 	.word	0x0808ed7c
 8013db8:	800c3818 	.word	0x800c3818
 8013dbc:	0010003b 	.word	0x0010003b

08013dc0 <connect>:
  if(connect)
 8013dc0:	4b05      	ldr	r3, [pc, #20]	@ (8013dd8 <connect+0x18>)
    _BCL(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8013dc2:	685a      	ldr	r2, [r3, #4]
  if(connect)
 8013dc4:	b120      	cbz	r0, 8013dd0 <connect+0x10>
    _BCL(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8013dc6:	f022 0202 	bic.w	r2, r2, #2
}
 8013dca:	2000      	movs	r0, #0
    _BST(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8013dcc:	605a      	str	r2, [r3, #4]
}
 8013dce:	4770      	bx	lr
    _BST(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8013dd0:	f042 0202 	orr.w	r2, r2, #2
 8013dd4:	e7f9      	b.n	8013dca <connect+0xa>
 8013dd6:	bf00      	nop
 8013dd8:	50000800 	.word	0x50000800

08013ddc <flush_txfifo.isra.0>:
inline static uint8_t flush_txfifo(uint8_t ep)
 8013ddc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8013dde:	2300      	movs	r3, #0
  }while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013de0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  __IO uint32_t count = 0U;
 8013de4:	9301      	str	r3, [sp, #4]
    if(count++ > 0xF000000)
 8013de6:	9b01      	ldr	r3, [sp, #4]
 8013de8:	1c59      	adds	r1, r3, #1
 8013dea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013dee:	9101      	str	r1, [sp, #4]
 8013df0:	d815      	bhi.n	8013e1e <flush_txfifo.isra.0+0x42>
  }while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013df2:	6913      	ldr	r3, [r2, #16]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	daf6      	bge.n	8013de6 <flush_txfifo.isra.0+0xa>
  count = 0U;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	9301      	str	r3, [sp, #4]
  _BMD(USB_OTG_FS_GLOBAL->GRSTCTL, USB_OTG_GRSTCTL_TXFNUM,
 8013dfc:	6913      	ldr	r3, [r2, #16]
 8013dfe:	f360 138a 	bfi	r3, r0, #6, #5
 8013e02:	f043 0320 	orr.w	r3, r3, #32
 8013e06:	6113      	str	r3, [r2, #16]
  } while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013e08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    if (count++ > 0xF000000)
 8013e0c:	9b01      	ldr	r3, [sp, #4]
 8013e0e:	1c59      	adds	r1, r3, #1
 8013e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013e14:	9101      	str	r1, [sp, #4]
 8013e16:	d802      	bhi.n	8013e1e <flush_txfifo.isra.0+0x42>
  } while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013e18:	6913      	ldr	r3, [r2, #16]
 8013e1a:	069b      	lsls	r3, r3, #26
 8013e1c:	d4f6      	bmi.n	8013e0c <flush_txfifo.isra.0+0x30>
}
 8013e1e:	b002      	add	sp, #8
 8013e20:	4770      	bx	lr
	...

08013e24 <ep_deconfig>:
  ep &= 0x7F;
 8013e24:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  USB_OTG_FS_DEVICE->DAINTMSK &= ~(0x10001 << ep);
 8013e28:	491f      	ldr	r1, [pc, #124]	@ (8013ea8 <ep_deconfig+0x84>)
 8013e2a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8013e2e:	69cb      	ldr	r3, [r1, #28]
 8013e30:	4082      	lsls	r2, r0
{
 8013e32:	b510      	push	{r4, lr}
  IN_ENDPOINT(ep)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP); //_BCL(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8013e34:	f100 7420 	add.w	r4, r0, #41943040	@ 0x2800000
  USB_OTG_FS_DEVICE->DAINTMSK &= ~(0x10001 << ep);
 8013e38:	ea23 0302 	bic.w	r3, r3, r2
  IN_ENDPOINT(ep)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP); //_BCL(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8013e3c:	3448      	adds	r4, #72	@ 0x48
  USB_OTG_FS_DEVICE->DAINTMSK &= ~(0x10001 << ep);
 8013e3e:	61cb      	str	r3, [r1, #28]
  IN_ENDPOINT(ep)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP); //_BCL(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8013e40:	0164      	lsls	r4, r4, #5
 8013e42:	6823      	ldr	r3, [r4, #0]
 8013e44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8013e48:	6023      	str	r3, [r4, #0]
  flush_txfifo(ep);
 8013e4a:	f7ff ffc7 	bl	8013ddc <flush_txfifo.isra.0>
  if((IN_ENDPOINT(ep)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) && (ep != 0))
 8013e4e:	6823      	ldr	r3, [r4, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	f04f 03ff 	mov.w	r3, #255	@ 0xff
 8013e56:	da23      	bge.n	8013ea0 <ep_deconfig+0x7c>
 8013e58:	b9a8      	cbnz	r0, 8013e86 <ep_deconfig+0x62>
  IN_ENDPOINT(ep)->DIEPINT = 0xFF;
 8013e5a:	4a14      	ldr	r2, [pc, #80]	@ (8013eac <ep_deconfig+0x88>)
 8013e5c:	6093      	str	r3, [r2, #8]
    OUT_ENDPOINT(ep)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8013e5e:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8013e62:	f504 7200 	add.w	r2, r4, #512	@ 0x200
 8013e66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8013e6a:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
  if((OUT_ENDPOINT(ep)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) && (ep != 0))
 8013e6e:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	da04      	bge.n	8013e80 <ep_deconfig+0x5c>
 8013e76:	b118      	cbz	r0, 8013e80 <ep_deconfig+0x5c>
    OUT_ENDPOINT(ep)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8013e78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013e7c:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
  OUT_ENDPOINT(ep)->DOEPINT = 0xFF;
 8013e80:	23ff      	movs	r3, #255	@ 0xff
 8013e82:	6093      	str	r3, [r2, #8]
}
 8013e84:	bd10      	pop	{r4, pc}
    IN_ENDPOINT(ep)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS; //Disables endpoint transmission
 8013e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8013e8a:	6022      	str	r2, [r4, #0]
  IN_ENDPOINT(ep)->DIEPINT = 0xFF;
 8013e8c:	60a3      	str	r3, [r4, #8]
    USB_OTG_FS_GLOBAL->DIEPTXF[ep-1] = 0x02000200 + 0x200 * ep;
 8013e8e:	f100 1201 	add.w	r2, r0, #65537	@ 0x10001
 8013e92:	0083      	lsls	r3, r0, #2
 8013e94:	0252      	lsls	r2, r2, #9
 8013e96:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
 8013e9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8013e9e:	e7de      	b.n	8013e5e <ep_deconfig+0x3a>
  IN_ENDPOINT(ep)->DIEPINT = 0xFF;
 8013ea0:	60a3      	str	r3, [r4, #8]
  if(ep > 0)
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d0db      	beq.n	8013e5e <ep_deconfig+0x3a>
 8013ea6:	e7f2      	b.n	8013e8e <ep_deconfig+0x6a>
 8013ea8:	50000800 	.word	0x50000800
 8013eac:	50000900 	.word	0x50000900

08013eb0 <flush_rxfifo.isra.0>:
inline static uint8_t flush_rxfifo(void)
 8013eb0:	b082      	sub	sp, #8
  volatile uint32_t count = 0U;
 8013eb2:	2300      	movs	r3, #0
    if(++count > 200000U)
 8013eb4:	490e      	ldr	r1, [pc, #56]	@ (8013ef0 <flush_rxfifo.isra.0+0x40>)
  }while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013eb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  volatile uint32_t count = 0U;
 8013eba:	9301      	str	r3, [sp, #4]
    if(++count > 200000U)
 8013ebc:	9b01      	ldr	r3, [sp, #4]
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	428b      	cmp	r3, r1
 8013ec2:	9301      	str	r3, [sp, #4]
 8013ec4:	d811      	bhi.n	8013eea <flush_rxfifo.isra.0+0x3a>
  }while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ec6:	6913      	ldr	r3, [r2, #16]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	daf7      	bge.n	8013ebc <flush_rxfifo.isra.0+0xc>
  count = 0;
 8013ecc:	2300      	movs	r3, #0
    if(++count > 200000U)
 8013ece:	4908      	ldr	r1, [pc, #32]	@ (8013ef0 <flush_rxfifo.isra.0+0x40>)
  count = 0;
 8013ed0:	9301      	str	r3, [sp, #4]
  USB_OTG_FS_GLOBAL->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013ed2:	2310      	movs	r3, #16
 8013ed4:	6113      	str	r3, [r2, #16]
  }while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013ed6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    if(++count > 200000U)
 8013eda:	9b01      	ldr	r3, [sp, #4]
 8013edc:	3301      	adds	r3, #1
 8013ede:	428b      	cmp	r3, r1
 8013ee0:	9301      	str	r3, [sp, #4]
 8013ee2:	d802      	bhi.n	8013eea <flush_rxfifo.isra.0+0x3a>
  }while((USB_OTG_FS_GLOBAL->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013ee4:	6913      	ldr	r3, [r2, #16]
 8013ee6:	06db      	lsls	r3, r3, #27
 8013ee8:	d4f7      	bmi.n	8013eda <flush_rxfifo.isra.0+0x2a>
}
 8013eea:	b002      	add	sp, #8
 8013eec:	4770      	bx	lr
 8013eee:	bf00      	nop
 8013ef0:	00030d40 	.word	0x00030d40

08013ef4 <dcd_int_handler>:
  dwc2_ep0_start_read_setup();

}

static void dcd_int_handler(usbd_device *dev, usbd_evt_callback callback)
{
 8013ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	4680      	mov	r8, r0
 8013efa:	460f      	mov	r7, r1
    }

  }
#else
  uint32_t evt;
  uint32_t ep = 0;
 8013efc:	2500      	movs	r5, #0
  while(1)
  {
    uint32_t _t = USB_OTG_FS_GLOBAL->GINTSTS;
 8013efe:	f04f 46a0 	mov.w	r6, #1342177280	@ 0x50000000
      //handle_bus_reset();
      //usbd_spin_unlock(true);
    }
    else if(_t & USB_OTG_GINTSTS_ENUMDNE)/* 枚举完成 */
    {
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8013f02:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8013f06:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
    uint32_t _t = USB_OTG_FS_GLOBAL->GINTSTS;
 8013f0a:	6973      	ldr	r3, [r6, #20]
    _t &= USB_OTG_FS_GLOBAL->GINTMSK;
 8013f0c:	69b2      	ldr	r2, [r6, #24]
	if(_t == 0 )
 8013f0e:	4013      	ands	r3, r2
 8013f10:	d057      	beq.n	8013fc2 <dcd_int_handler+0xce>
    if(_t & USB_OTG_GINTSTS_USBRST)/* bus RESET event */
 8013f12:	04d8      	lsls	r0, r3, #19
 8013f14:	d510      	bpl.n	8013f38 <dcd_int_handler+0x44>
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8013f16:	2400      	movs	r4, #0
 8013f18:	f8c6 a014 	str.w	sl, [r6, #20]
        ep_deconfig(i);
 8013f1c:	b2e0      	uxtb	r0, r4
      for(uint8_t i = 0; i < MAX_EP; i++ )
 8013f1e:	3401      	adds	r4, #1
        ep_deconfig(i);
 8013f20:	f7ff ff80 	bl	8013e24 <ep_deconfig>
      for(uint8_t i = 0; i < MAX_EP; i++ )
 8013f24:	2c06      	cmp	r4, #6
 8013f26:	d1f9      	bne.n	8013f1c <dcd_int_handler+0x28>
      evt = usbd_evt_reset;
 8013f28:	2400      	movs	r4, #0
      flush_rxfifo();
 8013f2a:	f7ff ffc1 	bl	8013eb0 <flush_rxfifo.isra.0>
    else
    {
      /* no more supported events */
      return;
    }
    callback(dev, evt, ep);
 8013f2e:	b2ea      	uxtb	r2, r5
 8013f30:	4640      	mov	r0, r8
 8013f32:	b2e1      	uxtb	r1, r4
 8013f34:	47b8      	blx	r7
 8013f36:	e02c      	b.n	8013f92 <dcd_int_handler+0x9e>
    else if(_t & USB_OTG_GINTSTS_ENUMDNE)/* 枚举完成 */
 8013f38:	0499      	lsls	r1, r3, #18
 8013f3a:	d508      	bpl.n	8013f4e <dcd_int_handler+0x5a>
      callback(dev, evt, ep);
 8013f3c:	b2ea      	uxtb	r2, r5
 8013f3e:	4640      	mov	r0, r8
 8013f40:	fa5f f18b 	uxtb.w	r1, fp
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8013f44:	f8c6 9014 	str.w	r9, [r6, #20]
      callback(dev, evt, ep);
 8013f48:	465c      	mov	r4, fp
 8013f4a:	47b8      	blx	r7
 8013f4c:	e7ef      	b.n	8013f2e <dcd_int_handler+0x3a>
    else if(_t & USB_OTG_GINTSTS_IEPINT)
 8013f4e:	035a      	lsls	r2, r3, #13
 8013f50:	d512      	bpl.n	8013f78 <dcd_int_handler+0x84>
        if(ep >= MAX_EP)
 8013f52:	2d05      	cmp	r5, #5
 8013f54:	d835      	bhi.n	8013fc2 <dcd_int_handler+0xce>
        if(IN_ENDPOINT(ep)->DIEPINT & USB_OTG_DIEPINT_XFRC)
 8013f56:	016b      	lsls	r3, r5, #5
 8013f58:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
 8013f5c:	f8d3 2908 	ldr.w	r2, [r3, #2312]	@ 0x908
 8013f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f64:	07d4      	lsls	r4, r2, #31
 8013f66:	d505      	bpl.n	8013f74 <dcd_int_handler+0x80>
          IN_ENDPOINT(ep)->DIEPINT = USB_OTG_DIEPINT_XFRC;
 8013f68:	2201      	movs	r2, #1
          ep |= 0x80;
 8013f6a:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
          evt = usbd_evt_eptx;
 8013f6e:	2404      	movs	r4, #4
          IN_ENDPOINT(ep)->DIEPINT = USB_OTG_DIEPINT_XFRC;
 8013f70:	609a      	str	r2, [r3, #8]
          break;
 8013f72:	e7dc      	b.n	8013f2e <dcd_int_handler+0x3a>
      for(;; ep++)
 8013f74:	3501      	adds	r5, #1
        if(ep >= MAX_EP)
 8013f76:	e7ec      	b.n	8013f52 <dcd_int_handler+0x5e>
    else if(_t & USB_OTG_GINTSTS_RXFLVL) /* Rx FIFO 非空 */
 8013f78:	06d8      	lsls	r0, r3, #27
 8013f7a:	d50c      	bpl.n	8013f96 <dcd_int_handler+0xa2>
      _t = USB_OTG_FS_GLOBAL->GRXSTSR;
 8013f7c:	69f4      	ldr	r4, [r6, #28]
      ep = _t & USB_OTG_GRXSTSP_EPNUM;
 8013f7e:	f004 050f 	and.w	r5, r4, #15
      switch(_FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, _t))
 8013f82:	f3c4 4443 	ubfx	r4, r4, #17, #4
 8013f86:	2c02      	cmp	r4, #2
 8013f88:	d019      	beq.n	8013fbe <dcd_int_handler+0xca>
 8013f8a:	2c06      	cmp	r4, #6
 8013f8c:	d0cf      	beq.n	8013f2e <dcd_int_handler+0x3a>
          USB_OTG_FS_GLOBAL->GRXSTSP;
 8013f8e:	6a33      	ldr	r3, [r6, #32]
          continue;
 8013f90:	465c      	mov	r4, fp
 8013f92:	46a3      	mov	fp, r4
 8013f94:	e7b9      	b.n	8013f0a <dcd_int_handler+0x16>
    else if(_t & USB_OTG_GINTSTS_SOF)  /* 帧起始 (Start of frame) SOF令牌，只有USB建立连接后有效 */
 8013f96:	0719      	lsls	r1, r3, #28
 8013f98:	d503      	bpl.n	8013fa2 <dcd_int_handler+0xae>
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_SOF;
 8013f9a:	2308      	movs	r3, #8
      evt = usbd_evt_sof;
 8013f9c:	2401      	movs	r4, #1
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_SOF;
 8013f9e:	6173      	str	r3, [r6, #20]
      evt = usbd_evt_sof;
 8013fa0:	e7c5      	b.n	8013f2e <dcd_int_handler+0x3a>
    else if(_t & USB_OTG_GINTSTS_USBSUSP) /* 仅设备模式访问，USB挂起  */
 8013fa2:	051a      	lsls	r2, r3, #20
 8013fa4:	d504      	bpl.n	8013fb0 <dcd_int_handler+0xbc>
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8013fa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
      evt = usbd_evt_susp;
 8013faa:	2402      	movs	r4, #2
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8013fac:	6173      	str	r3, [r6, #20]
 8013fae:	e7be      	b.n	8013f2e <dcd_int_handler+0x3a>
    else if(_t & USB_OTG_GINTSTS_WKUINT) /* 远程唤醒中断 */
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	da06      	bge.n	8013fc2 <dcd_int_handler+0xce>
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8013fb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
      evt = usbd_evt_wkup;
 8013fb8:	2403      	movs	r4, #3
      USB_OTG_FS_GLOBAL->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8013fba:	6173      	str	r3, [r6, #20]
      evt = usbd_evt_wkup;
 8013fbc:	e7b7      	b.n	8013f2e <dcd_int_handler+0x3a>
          evt = usbd_evt_eprx;
 8013fbe:	2405      	movs	r4, #5
 8013fc0:	e7b5      	b.n	8013f2e <dcd_int_handler+0x3a>
  }
#endif
}
 8013fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013fc8 <get_serialno_desc>:

static uint16_t get_serialno_desc(void *buffer) {
    struct  usb_string_descriptor *dsc = buffer;
    uint16_t *str = dsc->wString;
    uint32_t fnv = 2166136261;
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x00));
 8013fc8:	4b20      	ldr	r3, [pc, #128]	@ (801404c <get_serialno_desc+0x84>)
 8013fca:	2204      	movs	r2, #4
static uint16_t get_serialno_desc(void *buffer) {
 8013fcc:	b570      	push	{r4, r5, r6, lr}
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x00));
 8013fce:	f8d3 1420 	ldr.w	r1, [r3, #1056]	@ 0x420
    uint16_t *str = dsc->wString;
 8013fd2:	1c85      	adds	r5, r0, #2
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x00));
 8013fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8014050 <get_serialno_desc+0x88>)
    fnv *= 16777619;
 8013fd6:	4e1f      	ldr	r6, [pc, #124]	@ (8014054 <get_serialno_desc+0x8c>)
    fnv ^= (data & 0xFF);
 8013fd8:	b2cc      	uxtb	r4, r1
  for(int i = 0; i < 4 ; i++)
 8013fda:	3a01      	subs	r2, #1
    data >>= 8;
 8013fdc:	ea4f 2111 	mov.w	r1, r1, lsr #8
    fnv ^= (data & 0xFF);
 8013fe0:	ea83 0304 	eor.w	r3, r3, r4
    fnv *= 16777619;
 8013fe4:	fb06 f303 	mul.w	r3, r6, r3
  for(int i = 0; i < 4 ; i++)
 8013fe8:	d1f6      	bne.n	8013fd8 <get_serialno_desc+0x10>
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x04));
 8013fea:	4a18      	ldr	r2, [pc, #96]	@ (801404c <get_serialno_desc+0x84>)
    fnv *= 16777619;
 8013fec:	4e19      	ldr	r6, [pc, #100]	@ (8014054 <get_serialno_desc+0x8c>)
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x04));
 8013fee:	f8d2 1424 	ldr.w	r1, [r2, #1060]	@ 0x424
 8013ff2:	2204      	movs	r2, #4
    fnv ^= (data & 0xFF);
 8013ff4:	b2cc      	uxtb	r4, r1
  for(int i = 0; i < 4 ; i++)
 8013ff6:	3a01      	subs	r2, #1
    data >>= 8;
 8013ff8:	ea4f 2111 	mov.w	r1, r1, lsr #8
    fnv ^= (data & 0xFF);
 8013ffc:	ea83 0304 	eor.w	r3, r3, r4
    fnv *= 16777619;
 8014000:	fb06 f303 	mul.w	r3, r6, r3
  for(int i = 0; i < 4 ; i++)
 8014004:	d1f6      	bne.n	8013ff4 <get_serialno_desc+0x2c>
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x08));
 8014006:	4a11      	ldr	r2, [pc, #68]	@ (801404c <get_serialno_desc+0x84>)
    fnv *= 16777619;
 8014008:	4e12      	ldr	r6, [pc, #72]	@ (8014054 <get_serialno_desc+0x8c>)
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x08));
 801400a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	@ 0x428
 801400e:	2204      	movs	r2, #4
    fnv ^= (data & 0xFF);
 8014010:	b2cc      	uxtb	r4, r1
  for(int i = 0; i < 4 ; i++)
 8014012:	3a01      	subs	r2, #1
    data >>= 8;
 8014014:	ea4f 2111 	mov.w	r1, r1, lsr #8
    fnv ^= (data & 0xFF);
 8014018:	ea83 0304 	eor.w	r3, r3, r4
    fnv *= 16777619;
 801401c:	fb06 f303 	mul.w	r3, r6, r3
  for(int i = 0; i < 4 ; i++)
 8014020:	d1f6      	bne.n	8014010 <get_serialno_desc+0x48>
    for (int i = 28; i >= 0; i -= 4 ) {
 8014022:	221c      	movs	r2, #28
        uint16_t c = (fnv >> i) & 0x0F;
 8014024:	fa23 f102 	lsr.w	r1, r3, r2
    for (int i = 28; i >= 0; i -= 4 ) {
 8014028:	3a04      	subs	r2, #4
        uint16_t c = (fnv >> i) & 0x0F;
 801402a:	f001 010f 	and.w	r1, r1, #15
        c += (c < 10) ? '0' : ('A' - 10);
 801402e:	2909      	cmp	r1, #9
 8014030:	bf8c      	ite	hi
 8014032:	2437      	movhi	r4, #55	@ 0x37
 8014034:	2430      	movls	r4, #48	@ 0x30
 8014036:	4421      	add	r1, r4
        *str++ = c;
 8014038:	f825 1b02 	strh.w	r1, [r5], #2
    for (int i = 28; i >= 0; i -= 4 ) {
 801403c:	1d11      	adds	r1, r2, #4
 801403e:	d1f1      	bne.n	8014024 <get_serialno_desc+0x5c>
    }
    dsc->bDescriptorType = USB_DTYPE_STRING;
    dsc->bLength = 18;
 8014040:	f240 3312 	movw	r3, #786	@ 0x312
 8014044:	8003      	strh	r3, [r0, #0]
    return 18;
}
 8014046:	2012      	movs	r0, #18
 8014048:	bd70      	pop	{r4, r5, r6, pc}
 801404a:	bf00      	nop
 801404c:	1ff0f000 	.word	0x1ff0f000
 8014050:	811c9dc5 	.word	0x811c9dc5
 8014054:	01000193 	.word	0x01000193

08014058 <usbd_ep_deconfig>:
    dev->driver->ep_deconfig(ep);
 8014058:	6803      	ldr	r3, [r0, #0]
 801405a:	4608      	mov	r0, r1
 801405c:	695b      	ldr	r3, [r3, #20]
 801405e:	4718      	bx	r3

08014060 <usbd_ep_write>:
inline static int32_t usbd_ep_write(usbd_device *dev, uint8_t ep, const void *buf, uint16_t blen) {
 8014060:	b410      	push	{r4}
 8014062:	4604      	mov	r4, r0
 8014064:	4608      	mov	r0, r1
 8014066:	4611      	mov	r1, r2
    return dev->driver->ep_write(ep, buf, blen);
 8014068:	6822      	ldr	r2, [r4, #0]
 801406a:	69d4      	ldr	r4, [r2, #28]
 801406c:	461a      	mov	r2, r3
 801406e:	4623      	mov	r3, r4
}
 8014070:	f85d 4b04 	ldr.w	r4, [sp], #4
    return dev->driver->ep_write(ep, buf, blen);
 8014074:	4718      	bx	r3
	...

08014078 <cdc_getdesc>:
    int8_t      y;
    uint8_t     buttons;
} __attribute__((packed)) hid_report_data;

static usbd_respond cdc_getdesc (usbd_ctlreq *req, void **address, uint16_t *length) {
    const uint8_t dtype = req->wValue >> 8;
 8014078:	8843      	ldrh	r3, [r0, #2]
 801407a:	0a18      	lsrs	r0, r3, #8
    const uint8_t dnumber = req->wValue & 0xFF;
    const void* desc;
    uint16_t len = 0;
    switch (dtype) {
 801407c:	2802      	cmp	r0, #2
 801407e:	d012      	beq.n	80140a6 <cdc_getdesc+0x2e>
 8014080:	2803      	cmp	r0, #3
 8014082:	d003      	beq.n	801408c <cdc_getdesc+0x14>
 8014084:	2801      	cmp	r0, #1
 8014086:	d00c      	beq.n	80140a2 <cdc_getdesc+0x2a>
 8014088:	2000      	movs	r0, #0
        len = ((struct usb_header_descriptor*)desc)->bLength;
    }
    *address = (void*)desc;
    *length = len;
    return usbd_ack;
}
 801408a:	4770      	bx	lr
    const uint8_t dnumber = req->wValue & 0xFF;
 801408c:	b2db      	uxtb	r3, r3
        if (dnumber < 3) {
 801408e:	2b02      	cmp	r3, #2
 8014090:	d8fa      	bhi.n	8014088 <cdc_getdesc+0x10>
            desc = dtable[dnumber];
 8014092:	4806      	ldr	r0, [pc, #24]	@ (80140ac <cdc_getdesc+0x34>)
 8014094:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        len = ((struct usb_header_descriptor*)desc)->bLength;
 8014098:	7818      	ldrb	r0, [r3, #0]
    *address = (void*)desc;
 801409a:	600b      	str	r3, [r1, #0]
    *length = len;
 801409c:	8010      	strh	r0, [r2, #0]
    return usbd_ack;
 801409e:	2001      	movs	r0, #1
 80140a0:	4770      	bx	lr
    switch (dtype) {
 80140a2:	4b03      	ldr	r3, [pc, #12]	@ (80140b0 <cdc_getdesc+0x38>)
 80140a4:	e7f8      	b.n	8014098 <cdc_getdesc+0x20>
 80140a6:	4b03      	ldr	r3, [pc, #12]	@ (80140b4 <cdc_getdesc+0x3c>)
 80140a8:	2064      	movs	r0, #100	@ 0x64
 80140aa:	e7f6      	b.n	801409a <cdc_getdesc+0x22>
 80140ac:	0808edb8 	.word	0x0808edb8
 80140b0:	0808ee94 	.word	0x0808ee94
 80140b4:	0808ee30 	.word	0x0808ee30

080140b8 <cdc_control>:


static usbd_respond cdc_control(usbd_device *dev, usbd_ctlreq *req, usbd_rqc_callback *callback)
{
  if(((USB_REQ_RECIPIENT | USB_REQ_TYPE) & req->bmRequestType) ==
		  ((USB_REQ_INTERFACE | USB_REQ_CLASS) && req->wIndex == 0))
 80140b8:	888a      	ldrh	r2, [r1, #4]
 80140ba:	780b      	ldrb	r3, [r1, #0]
{
 80140bc:	b510      	push	{r4, lr}
  if(((USB_REQ_RECIPIENT | USB_REQ_TYPE) & req->bmRequestType) ==
 80140be:	fab2 f482 	clz	r4, r2
 80140c2:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 80140c6:	0964      	lsrs	r4, r4, #5
 80140c8:	429c      	cmp	r4, r3
 80140ca:	d115      	bne.n	80140f8 <cdc_control+0x40>
  {
    switch(req->bRequest)
 80140cc:	784b      	ldrb	r3, [r1, #1]
 80140ce:	2b21      	cmp	r3, #33	@ 0x21
 80140d0:	d00c      	beq.n	80140ec <cdc_control+0x34>
 80140d2:	2b22      	cmp	r3, #34	@ 0x22
 80140d4:	d008      	beq.n	80140e8 <cdc_control+0x30>
 80140d6:	2b20      	cmp	r3, #32
 80140d8:	d12a      	bne.n	8014130 <cdc_control+0x78>
    {
      case USB_CDC_SET_CONTROL_LINE_STATE:
        return usbd_ack;
      case USB_CDC_SET_LINE_CODING:
        memcpy(&cdc_line, req->data, sizeof(cdc_line));
 80140da:	688a      	ldr	r2, [r1, #8]
 80140dc:	4b19      	ldr	r3, [pc, #100]	@ (8014144 <cdc_control+0x8c>)
 80140de:	601a      	str	r2, [r3, #0]
 80140e0:	898a      	ldrh	r2, [r1, #12]
 80140e2:	809a      	strh	r2, [r3, #4]
 80140e4:	7b8a      	ldrb	r2, [r1, #14]
 80140e6:	719a      	strb	r2, [r3, #6]
        return usbd_ack;
 80140e8:	2001      	movs	r0, #1
            return usbd_fail;
        }
    }
#endif // ENABLE_HID_COMBO
    return usbd_fail;
}
 80140ea:	bd10      	pop	{r4, pc}
        dev->status.data_ptr = &cdc_line;
 80140ec:	4b15      	ldr	r3, [pc, #84]	@ (8014144 <cdc_control+0x8c>)
 80140ee:	6583      	str	r3, [r0, #88]	@ 0x58
        dev->status.data_count = sizeof(cdc_line);
 80140f0:	2307      	movs	r3, #7
            dev->status.data_count = sizeof(config_desc.hid_desc);
 80140f2:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
            return usbd_ack;
 80140f6:	e7f7      	b.n	80140e8 <cdc_control+0x30>
    if (((USB_REQ_RECIPIENT | USB_REQ_TYPE) & req->bmRequestType) == (USB_REQ_INTERFACE | USB_REQ_CLASS)
 80140f8:	2b21      	cmp	r3, #33	@ 0x21
 80140fa:	d10c      	bne.n	8014116 <cdc_control+0x5e>
        && req->wIndex == 2 ) {
 80140fc:	2a02      	cmp	r2, #2
 80140fe:	d117      	bne.n	8014130 <cdc_control+0x78>
        switch (req->bRequest) {
 8014100:	784b      	ldrb	r3, [r1, #1]
 8014102:	2b01      	cmp	r3, #1
 8014104:	d003      	beq.n	801410e <cdc_control+0x56>
 8014106:	3b0a      	subs	r3, #10
 8014108:	4258      	negs	r0, r3
 801410a:	4158      	adcs	r0, r3
 801410c:	e7ed      	b.n	80140ea <cdc_control+0x32>
            dev->status.data_ptr = &hid_report_data;
 801410e:	4b0e      	ldr	r3, [pc, #56]	@ (8014148 <cdc_control+0x90>)
 8014110:	6583      	str	r3, [r0, #88]	@ 0x58
            dev->status.data_count = sizeof(hid_report_data);
 8014112:	2303      	movs	r3, #3
 8014114:	e7ed      	b.n	80140f2 <cdc_control+0x3a>
    if (((USB_REQ_RECIPIENT | USB_REQ_TYPE) & req->bmRequestType) == (USB_REQ_INTERFACE | USB_REQ_STANDARD)
 8014116:	2b01      	cmp	r3, #1
 8014118:	d10a      	bne.n	8014130 <cdc_control+0x78>
        && req->wIndex == 2
 801411a:	2a02      	cmp	r2, #2
 801411c:	d108      	bne.n	8014130 <cdc_control+0x78>
        && req->bRequest == USB_STD_GET_DESCRIPTOR) {
 801411e:	784b      	ldrb	r3, [r1, #1]
 8014120:	2b06      	cmp	r3, #6
 8014122:	d105      	bne.n	8014130 <cdc_control+0x78>
        switch (req->wValue >> 8) {
 8014124:	884b      	ldrh	r3, [r1, #2]
 8014126:	0a1b      	lsrs	r3, r3, #8
 8014128:	2b21      	cmp	r3, #33	@ 0x21
 801412a:	d003      	beq.n	8014134 <cdc_control+0x7c>
 801412c:	2b22      	cmp	r3, #34	@ 0x22
 801412e:	d005      	beq.n	801413c <cdc_control+0x84>
        return usbd_fail;
 8014130:	2000      	movs	r0, #0
 8014132:	e7da      	b.n	80140ea <cdc_control+0x32>
            dev->status.data_ptr = (uint8_t*)&(config_desc.hid_desc);
 8014134:	4b05      	ldr	r3, [pc, #20]	@ (801414c <cdc_control+0x94>)
 8014136:	6583      	str	r3, [r0, #88]	@ 0x58
            dev->status.data_count = sizeof(config_desc.hid_desc);
 8014138:	2309      	movs	r3, #9
 801413a:	e7da      	b.n	80140f2 <cdc_control+0x3a>
            dev->status.data_ptr = (uint8_t*)hid_report_desc;
 801413c:	4b04      	ldr	r3, [pc, #16]	@ (8014150 <cdc_control+0x98>)
 801413e:	6583      	str	r3, [r0, #88]	@ 0x58
            dev->status.data_count = sizeof(hid_report_desc);
 8014140:	2330      	movs	r3, #48	@ 0x30
 8014142:	e7d6      	b.n	80140f2 <cdc_control+0x3a>
 8014144:	20000060 	.word	0x20000060
 8014148:	2000f491 	.word	0x2000f491
 801414c:	0808ee84 	.word	0x0808ee84
 8014150:	0808eea6 	.word	0x0808eea6

08014154 <hid_mouse_move>:
  }
}

/* HID mouse IN endpoint callback */
static void hid_mouse_move(usbd_device *dev, uint8_t event, uint8_t ep)
{
 8014154:	b470      	push	{r4, r5, r6}
    static uint8_t t = 0;
    if (t < 0x10) {
 8014156:	4e19      	ldr	r6, [pc, #100]	@ (80141bc <hid_mouse_move+0x68>)
{
 8014158:	4611      	mov	r1, r2
    if (t < 0x10) {
 801415a:	7833      	ldrb	r3, [r6, #0]
 801415c:	2b0f      	cmp	r3, #15
 801415e:	d91a      	bls.n	8014196 <hid_mouse_move+0x42>
        hid_report_data.x = 1;
        hid_report_data.y = 0;
    } else if (t < 0x20) {
 8014160:	2b1f      	cmp	r3, #31
 8014162:	d91b      	bls.n	801419c <hid_mouse_move+0x48>
        hid_report_data.x = 1;
        hid_report_data.y = 1;
    } else if (t < 0x30) {
 8014164:	2b2f      	cmp	r3, #47	@ 0x2f
 8014166:	d91c      	bls.n	80141a2 <hid_mouse_move+0x4e>
        hid_report_data.x = 0;
        hid_report_data.y = 1;
    } else if (t < 0x40) {
 8014168:	2b3f      	cmp	r3, #63	@ 0x3f
 801416a:	d91d      	bls.n	80141a8 <hid_mouse_move+0x54>
        hid_report_data.x = -1;
        hid_report_data.y = 1;
    } else if (t < 0x50) {
 801416c:	2b4f      	cmp	r3, #79	@ 0x4f
 801416e:	d91e      	bls.n	80141ae <hid_mouse_move+0x5a>
        hid_report_data.x = -1;
        hid_report_data.y = 0;
    } else if (t < 0x60) {
 8014170:	2b5f      	cmp	r3, #95	@ 0x5f
 8014172:	d91f      	bls.n	80141b4 <hid_mouse_move+0x60>
        hid_report_data.x = -1;
        hid_report_data.y = -1;
    } else if (t < 0x70) {
 8014174:	2b6f      	cmp	r3, #111	@ 0x6f
 8014176:	f04f 35ff 	mov.w	r5, #4294967295
 801417a:	bf94      	ite	ls
 801417c:	2400      	movls	r4, #0
 801417e:	2401      	movhi	r4, #1
        hid_report_data.y = -1;
    } else  {
        hid_report_data.x = 1;
        hid_report_data.y = -1;
    }
    t = (t + 1) & 0x7F;
 8014180:	3301      	adds	r3, #1
        hid_report_data.x = 1;
 8014182:	4a0f      	ldr	r2, [pc, #60]	@ (80141c0 <hid_mouse_move+0x6c>)
    t = (t + 1) & 0x7F;
 8014184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        hid_report_data.x = 1;
 8014188:	7014      	strb	r4, [r2, #0]
        hid_report_data.y = 0;
 801418a:	7055      	strb	r5, [r2, #1]
    t = (t + 1) & 0x7F;
 801418c:	7033      	strb	r3, [r6, #0]
    usbd_ep_write(dev, ep, &hid_report_data, sizeof(hid_report_data));
 801418e:	2303      	movs	r3, #3
}
 8014190:	bc70      	pop	{r4, r5, r6}
    usbd_ep_write(dev, ep, &hid_report_data, sizeof(hid_report_data));
 8014192:	f7ff bf65 	b.w	8014060 <usbd_ep_write>
 8014196:	2401      	movs	r4, #1
 8014198:	2500      	movs	r5, #0
 801419a:	e7f1      	b.n	8014180 <hid_mouse_move+0x2c>
 801419c:	2401      	movs	r4, #1
 801419e:	4625      	mov	r5, r4
 80141a0:	e7ee      	b.n	8014180 <hid_mouse_move+0x2c>
 80141a2:	2400      	movs	r4, #0
 80141a4:	2501      	movs	r5, #1
 80141a6:	e7eb      	b.n	8014180 <hid_mouse_move+0x2c>
 80141a8:	f04f 34ff 	mov.w	r4, #4294967295
 80141ac:	e7fa      	b.n	80141a4 <hid_mouse_move+0x50>
 80141ae:	f04f 34ff 	mov.w	r4, #4294967295
 80141b2:	e7f1      	b.n	8014198 <hid_mouse_move+0x44>
 80141b4:	f04f 34ff 	mov.w	r4, #4294967295
 80141b8:	e7f1      	b.n	801419e <hid_mouse_move+0x4a>
 80141ba:	bf00      	nop
 80141bc:	2000f490 	.word	0x2000f490
 80141c0:	2000f491 	.word	0x2000f491

080141c4 <cdc_loopback>:

/* CDC loop callback. Both for the Data IN and Data OUT endpoint */
static void cdc_loopback(usbd_device *dev, uint8_t event, uint8_t ep) {
 80141c4:	b570      	push	{r4, r5, r6, lr}
    int _t;
    if (fpos <= (sizeof(fifo) - CDC_DATA_SZ)) {
 80141c6:	4c15      	ldr	r4, [pc, #84]	@ (801421c <cdc_loopback+0x58>)
static void cdc_loopback(usbd_device *dev, uint8_t event, uint8_t ep) {
 80141c8:	4605      	mov	r5, r0
    if (fpos <= (sizeof(fifo) - CDC_DATA_SZ)) {
 80141ca:	6823      	ldr	r3, [r4, #0]
 80141cc:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80141d0:	d80b      	bhi.n	80141ea <cdc_loopback+0x26>
    return dev->driver->ep_read(ep, buf, blen);
 80141d2:	6802      	ldr	r2, [r0, #0]
 80141d4:	2001      	movs	r0, #1
 80141d6:	4912      	ldr	r1, [pc, #72]	@ (8014220 <cdc_loopback+0x5c>)
 80141d8:	6996      	ldr	r6, [r2, #24]
 80141da:	2240      	movs	r2, #64	@ 0x40
 80141dc:	4419      	add	r1, r3
 80141de:	47b0      	blx	r6
        _t = usbd_ep_read(dev, CDC_RXD_EP, &fifo[fpos], CDC_DATA_SZ);
        if (_t > 0) {
 80141e0:	2800      	cmp	r0, #0
            fpos += _t;
 80141e2:	bfc2      	ittt	gt
 80141e4:	6823      	ldrgt	r3, [r4, #0]
 80141e6:	181b      	addgt	r3, r3, r0
 80141e8:	6023      	strgt	r3, [r4, #0]
        }
    }
    if (fpos > 0) {
 80141ea:	6823      	ldr	r3, [r4, #0]
 80141ec:	b1a3      	cbz	r3, 8014218 <cdc_loopback+0x54>
        _t = usbd_ep_write(dev, CDC_TXD_EP, &fifo[0], (fpos < CDC_DATA_SZ) ? fpos : CDC_DATA_SZ);
 80141ee:	2b40      	cmp	r3, #64	@ 0x40
 80141f0:	4e0b      	ldr	r6, [pc, #44]	@ (8014220 <cdc_loopback+0x5c>)
 80141f2:	f04f 0181 	mov.w	r1, #129	@ 0x81
 80141f6:	4628      	mov	r0, r5
 80141f8:	bf28      	it	cs
 80141fa:	2340      	movcs	r3, #64	@ 0x40
 80141fc:	4632      	mov	r2, r6
 80141fe:	b29b      	uxth	r3, r3
 8014200:	f7ff ff2e 	bl	8014060 <usbd_ep_write>
        if (_t > 0) {
 8014204:	1e01      	subs	r1, r0, #0
 8014206:	dd07      	ble.n	8014218 <cdc_loopback+0x54>
            memmove(&fifo[0], &fifo[_t], fpos - _t);
 8014208:	6825      	ldr	r5, [r4, #0]
 801420a:	4630      	mov	r0, r6
 801420c:	1a6d      	subs	r5, r5, r1
 801420e:	4431      	add	r1, r6
 8014210:	462a      	mov	r2, r5
 8014212:	f000 fc2d 	bl	8014a70 <memmove>
            fpos -= _t;
 8014216:	6025      	str	r5, [r4, #0]
        }
    }
}
 8014218:	bd70      	pop	{r4, r5, r6, pc}
 801421a:	bf00      	nop
 801421c:	2000f494 	.word	0x2000f494
 8014220:	2000f498 	.word	0x2000f498

08014224 <usbd_ep_config.isra.0>:
inline static bool usbd_ep_config(usbd_device *dev, uint8_t ep, uint8_t eptype, uint16_t epsize) {
 8014224:	b410      	push	{r4}
 8014226:	4604      	mov	r4, r0
 8014228:	4608      	mov	r0, r1
 801422a:	4611      	mov	r1, r2
    return dev->driver->ep_config(ep, eptype, epsize);
 801422c:	6822      	ldr	r2, [r4, #0]
 801422e:	6914      	ldr	r4, [r2, #16]
 8014230:	461a      	mov	r2, r3
 8014232:	4623      	mov	r3, r4
}
 8014234:	f85d 4b04 	ldr.w	r4, [sp], #4
    return dev->driver->ep_config(ep, eptype, epsize);
 8014238:	4718      	bx	r3
	...

0801423c <cdc_setconf>:

static usbd_respond cdc_setconf (usbd_device *dev, uint8_t cfg) {
 801423c:	b538      	push	{r3, r4, r5, lr}
 801423e:	4604      	mov	r4, r0
    switch (cfg) {
 8014240:	460d      	mov	r5, r1
 8014242:	b119      	cbz	r1, 801424c <cdc_setconf+0x10>
 8014244:	2901      	cmp	r1, #1
 8014246:	d014      	beq.n	8014272 <cdc_setconf+0x36>
 8014248:	2000      	movs	r0, #0
        usbd_ep_write(dev, CDC_TXD_EP, 0, 0);
        return usbd_ack;
    default:
        return usbd_fail;
    }
}
 801424a:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_deconfig(dev, HID_RIN_EP);
 801424c:	2183      	movs	r1, #131	@ 0x83
 801424e:	f7ff ff03 	bl	8014058 <usbd_ep_deconfig>
        usbd_ep_deconfig(dev, CDC_NTF_EP);
 8014252:	2182      	movs	r1, #130	@ 0x82
 8014254:	4620      	mov	r0, r4
    dev->endpoint[ep & 0x07] = callback;
 8014256:	6425      	str	r5, [r4, #64]	@ 0x40
 8014258:	f7ff fefe 	bl	8014058 <usbd_ep_deconfig>
        usbd_ep_deconfig(dev, CDC_TXD_EP);
 801425c:	2181      	movs	r1, #129	@ 0x81
 801425e:	4620      	mov	r0, r4
 8014260:	f7ff fefa 	bl	8014058 <usbd_ep_deconfig>
        usbd_ep_deconfig(dev, CDC_RXD_EP);
 8014264:	2101      	movs	r1, #1
 8014266:	4620      	mov	r0, r4
 8014268:	f7ff fef6 	bl	8014058 <usbd_ep_deconfig>
 801426c:	63a5      	str	r5, [r4, #56]	@ 0x38
        return usbd_ack;
 801426e:	2001      	movs	r0, #1
 8014270:	e7eb      	b.n	801424a <cdc_setconf+0xe>
        usbd_ep_config(dev, CDC_RXD_EP, USB_EPTYPE_BULK /*| USB_EPTYPE_DBLBUF*/, CDC_DATA_SZ);
 8014272:	2340      	movs	r3, #64	@ 0x40
 8014274:	2202      	movs	r2, #2
 8014276:	f7ff ffd5 	bl	8014224 <usbd_ep_config.isra.0>
        usbd_ep_config(dev, CDC_TXD_EP, USB_EPTYPE_BULK /*| USB_EPTYPE_DBLBUF*/, CDC_DATA_SZ);
 801427a:	4620      	mov	r0, r4
 801427c:	2340      	movs	r3, #64	@ 0x40
 801427e:	2202      	movs	r2, #2
 8014280:	2181      	movs	r1, #129	@ 0x81
 8014282:	f7ff ffcf 	bl	8014224 <usbd_ep_config.isra.0>
        usbd_ep_config(dev, CDC_NTF_EP, USB_EPTYPE_INTERRUPT, CDC_NTF_SZ);
 8014286:	4620      	mov	r0, r4
 8014288:	2308      	movs	r3, #8
 801428a:	2203      	movs	r2, #3
 801428c:	2182      	movs	r1, #130	@ 0x82
 801428e:	f7ff ffc9 	bl	8014224 <usbd_ep_config.isra.0>
 8014292:	4b0b      	ldr	r3, [pc, #44]	@ (80142c0 <cdc_setconf+0x84>)
        usbd_ep_config(dev, HID_RIN_EP, USB_EPTYPE_INTERRUPT, HID_RIN_SZ);
 8014294:	4620      	mov	r0, r4
 8014296:	2203      	movs	r2, #3
 8014298:	63a3      	str	r3, [r4, #56]	@ 0x38
 801429a:	2183      	movs	r1, #131	@ 0x83
 801429c:	2310      	movs	r3, #16
 801429e:	f7ff ffc1 	bl	8014224 <usbd_ep_config.isra.0>
 80142a2:	4b08      	ldr	r3, [pc, #32]	@ (80142c4 <cdc_setconf+0x88>)
        usbd_ep_write(dev, HID_RIN_EP, 0, 0);
 80142a4:	2183      	movs	r1, #131	@ 0x83
 80142a6:	4620      	mov	r0, r4
 80142a8:	6423      	str	r3, [r4, #64]	@ 0x40
 80142aa:	2300      	movs	r3, #0
 80142ac:	461a      	mov	r2, r3
 80142ae:	f7ff fed7 	bl	8014060 <usbd_ep_write>
        usbd_ep_write(dev, CDC_TXD_EP, 0, 0);
 80142b2:	2300      	movs	r3, #0
 80142b4:	2181      	movs	r1, #129	@ 0x81
 80142b6:	4620      	mov	r0, r4
 80142b8:	461a      	mov	r2, r3
 80142ba:	f7ff fed1 	bl	8014060 <usbd_ep_write>
        return usbd_ack;
 80142be:	e7d6      	b.n	801426e <cdc_setconf+0x32>
 80142c0:	080141c5 	.word	0x080141c5
 80142c4:	08014155 	.word	0x08014155

080142c8 <OTG_FS_IRQHandler>:
#endif


void USB_HANDLER(void)
{
  usbd_poll(&udev);
 80142c8:	4801      	ldr	r0, [pc, #4]	@ (80142d0 <OTG_FS_IRQHandler+0x8>)
 80142ca:	f7ff bb59 	b.w	8013980 <usbd_poll>
 80142ce:	bf00      	nop
 80142d0:	2000f718 	.word	0x2000f718

080142d4 <prvUSBappTask>:
  dev->driver = drv;
 80142d4:	4c0f      	ldr	r4, [pc, #60]	@ (8014314 <prvUSBappTask+0x40>)
  dev->status.ep0size = ep0size;
 80142d6:	2208      	movs	r2, #8
    dev->driver->enable(enable);
 80142d8:	2001      	movs	r0, #1
}

void prvUSBappTask(void * pvParameters)
{
 80142da:	b508      	push	{r3, lr}
  dev->status.ep0size = ep0size;
 80142dc:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
  dev->status.data_ptr = buffer;
 80142e0:	4a0d      	ldr	r2, [pc, #52]	@ (8014318 <prvUSBappTask+0x44>)
  dev->driver = drv;
 80142e2:	4b0e      	ldr	r3, [pc, #56]	@ (801431c <prvUSBappTask+0x48>)
  dev->status.data_buf = buffer;
 80142e4:	e9c4 2215 	strd	r2, r2, [r4, #84]	@ 0x54
  dev->status.data_maxsize = bsize - offsetof(usbd_ctlreq, data);
 80142e8:	2278      	movs	r2, #120	@ 0x78
  dev->driver = drv;
 80142ea:	6023      	str	r3, [r4, #0]
    dev->driver->enable(enable);
 80142ec:	685b      	ldr	r3, [r3, #4]
  dev->status.data_maxsize = bsize - offsetof(usbd_ctlreq, data);
 80142ee:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    dev->config_callback = callback;
 80142f2:	4a0b      	ldr	r2, [pc, #44]	@ (8014320 <prvUSBappTask+0x4c>)
 80142f4:	60e2      	str	r2, [r4, #12]
    dev->control_callback = callback;
 80142f6:	4a0b      	ldr	r2, [pc, #44]	@ (8014324 <prvUSBappTask+0x50>)
 80142f8:	6062      	str	r2, [r4, #4]
    dev->descriptor_callback = callback;
 80142fa:	4a0b      	ldr	r2, [pc, #44]	@ (8014328 <prvUSBappTask+0x54>)
 80142fc:	6122      	str	r2, [r4, #16]
    dev->driver->enable(enable);
 80142fe:	4798      	blx	r3
    return dev->driver->connect(connect);
 8014300:	6823      	ldr	r3, [r4, #0]
 8014302:	2001      	movs	r0, #1
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	4798      	blx	r3
  usbd_enable(&udev, true);
  usbd_connect(&udev, true);
  for(;;)
  {
    //__WFI();
    vTaskDelay(1000);
 8014308:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801430c:	f7f4 fc0a 	bl	8008b24 <vTaskDelay>
  for(;;)
 8014310:	e7fa      	b.n	8014308 <prvUSBappTask+0x34>
 8014312:	bf00      	nop
 8014314:	2000f718 	.word	0x2000f718
 8014318:	2000f698 	.word	0x2000f698
 801431c:	0808ed44 	.word	0x0808ed44
 8014320:	0801423d 	.word	0x0801423d
 8014324:	080140b9 	.word	0x080140b9
 8014328:	08014079 	.word	0x08014079

0801432c <malloc>:
 801432c:	4b02      	ldr	r3, [pc, #8]	@ (8014338 <malloc+0xc>)
 801432e:	4601      	mov	r1, r0
 8014330:	6818      	ldr	r0, [r3, #0]
 8014332:	f000 b825 	b.w	8014380 <_malloc_r>
 8014336:	bf00      	nop
 8014338:	20000074 	.word	0x20000074

0801433c <sbrk_aligned>:
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4e0f      	ldr	r6, [pc, #60]	@ (801437c <sbrk_aligned+0x40>)
 8014340:	460c      	mov	r4, r1
 8014342:	6831      	ldr	r1, [r6, #0]
 8014344:	4605      	mov	r5, r0
 8014346:	b911      	cbnz	r1, 801434e <sbrk_aligned+0x12>
 8014348:	f000 fc08 	bl	8014b5c <_sbrk_r>
 801434c:	6030      	str	r0, [r6, #0]
 801434e:	4621      	mov	r1, r4
 8014350:	4628      	mov	r0, r5
 8014352:	f000 fc03 	bl	8014b5c <_sbrk_r>
 8014356:	1c43      	adds	r3, r0, #1
 8014358:	d103      	bne.n	8014362 <sbrk_aligned+0x26>
 801435a:	f04f 34ff 	mov.w	r4, #4294967295
 801435e:	4620      	mov	r0, r4
 8014360:	bd70      	pop	{r4, r5, r6, pc}
 8014362:	1cc4      	adds	r4, r0, #3
 8014364:	f024 0403 	bic.w	r4, r4, #3
 8014368:	42a0      	cmp	r0, r4
 801436a:	d0f8      	beq.n	801435e <sbrk_aligned+0x22>
 801436c:	1a21      	subs	r1, r4, r0
 801436e:	4628      	mov	r0, r5
 8014370:	f000 fbf4 	bl	8014b5c <_sbrk_r>
 8014374:	3001      	adds	r0, #1
 8014376:	d1f2      	bne.n	801435e <sbrk_aligned+0x22>
 8014378:	e7ef      	b.n	801435a <sbrk_aligned+0x1e>
 801437a:	bf00      	nop
 801437c:	2000f77c 	.word	0x2000f77c

08014380 <_malloc_r>:
 8014380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014384:	1ccd      	adds	r5, r1, #3
 8014386:	f025 0503 	bic.w	r5, r5, #3
 801438a:	3508      	adds	r5, #8
 801438c:	2d0c      	cmp	r5, #12
 801438e:	bf38      	it	cc
 8014390:	250c      	movcc	r5, #12
 8014392:	2d00      	cmp	r5, #0
 8014394:	4606      	mov	r6, r0
 8014396:	db01      	blt.n	801439c <_malloc_r+0x1c>
 8014398:	42a9      	cmp	r1, r5
 801439a:	d904      	bls.n	80143a6 <_malloc_r+0x26>
 801439c:	230c      	movs	r3, #12
 801439e:	6033      	str	r3, [r6, #0]
 80143a0:	2000      	movs	r0, #0
 80143a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801447c <_malloc_r+0xfc>
 80143aa:	f000 f869 	bl	8014480 <__malloc_lock>
 80143ae:	f8d8 3000 	ldr.w	r3, [r8]
 80143b2:	461c      	mov	r4, r3
 80143b4:	bb44      	cbnz	r4, 8014408 <_malloc_r+0x88>
 80143b6:	4629      	mov	r1, r5
 80143b8:	4630      	mov	r0, r6
 80143ba:	f7ff ffbf 	bl	801433c <sbrk_aligned>
 80143be:	1c43      	adds	r3, r0, #1
 80143c0:	4604      	mov	r4, r0
 80143c2:	d158      	bne.n	8014476 <_malloc_r+0xf6>
 80143c4:	f8d8 4000 	ldr.w	r4, [r8]
 80143c8:	4627      	mov	r7, r4
 80143ca:	2f00      	cmp	r7, #0
 80143cc:	d143      	bne.n	8014456 <_malloc_r+0xd6>
 80143ce:	2c00      	cmp	r4, #0
 80143d0:	d04b      	beq.n	801446a <_malloc_r+0xea>
 80143d2:	6823      	ldr	r3, [r4, #0]
 80143d4:	4639      	mov	r1, r7
 80143d6:	4630      	mov	r0, r6
 80143d8:	eb04 0903 	add.w	r9, r4, r3
 80143dc:	f000 fbbe 	bl	8014b5c <_sbrk_r>
 80143e0:	4581      	cmp	r9, r0
 80143e2:	d142      	bne.n	801446a <_malloc_r+0xea>
 80143e4:	6821      	ldr	r1, [r4, #0]
 80143e6:	1a6d      	subs	r5, r5, r1
 80143e8:	4629      	mov	r1, r5
 80143ea:	4630      	mov	r0, r6
 80143ec:	f7ff ffa6 	bl	801433c <sbrk_aligned>
 80143f0:	3001      	adds	r0, #1
 80143f2:	d03a      	beq.n	801446a <_malloc_r+0xea>
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	442b      	add	r3, r5
 80143f8:	6023      	str	r3, [r4, #0]
 80143fa:	f8d8 3000 	ldr.w	r3, [r8]
 80143fe:	685a      	ldr	r2, [r3, #4]
 8014400:	bb62      	cbnz	r2, 801445c <_malloc_r+0xdc>
 8014402:	f8c8 7000 	str.w	r7, [r8]
 8014406:	e00f      	b.n	8014428 <_malloc_r+0xa8>
 8014408:	6822      	ldr	r2, [r4, #0]
 801440a:	1b52      	subs	r2, r2, r5
 801440c:	d420      	bmi.n	8014450 <_malloc_r+0xd0>
 801440e:	2a0b      	cmp	r2, #11
 8014410:	d917      	bls.n	8014442 <_malloc_r+0xc2>
 8014412:	1961      	adds	r1, r4, r5
 8014414:	42a3      	cmp	r3, r4
 8014416:	6025      	str	r5, [r4, #0]
 8014418:	bf18      	it	ne
 801441a:	6059      	strne	r1, [r3, #4]
 801441c:	6863      	ldr	r3, [r4, #4]
 801441e:	bf08      	it	eq
 8014420:	f8c8 1000 	streq.w	r1, [r8]
 8014424:	5162      	str	r2, [r4, r5]
 8014426:	604b      	str	r3, [r1, #4]
 8014428:	4630      	mov	r0, r6
 801442a:	f000 f82f 	bl	801448c <__malloc_unlock>
 801442e:	f104 000b 	add.w	r0, r4, #11
 8014432:	1d23      	adds	r3, r4, #4
 8014434:	f020 0007 	bic.w	r0, r0, #7
 8014438:	1ac2      	subs	r2, r0, r3
 801443a:	bf1c      	itt	ne
 801443c:	1a1b      	subne	r3, r3, r0
 801443e:	50a3      	strne	r3, [r4, r2]
 8014440:	e7af      	b.n	80143a2 <_malloc_r+0x22>
 8014442:	6862      	ldr	r2, [r4, #4]
 8014444:	42a3      	cmp	r3, r4
 8014446:	bf0c      	ite	eq
 8014448:	f8c8 2000 	streq.w	r2, [r8]
 801444c:	605a      	strne	r2, [r3, #4]
 801444e:	e7eb      	b.n	8014428 <_malloc_r+0xa8>
 8014450:	4623      	mov	r3, r4
 8014452:	6864      	ldr	r4, [r4, #4]
 8014454:	e7ae      	b.n	80143b4 <_malloc_r+0x34>
 8014456:	463c      	mov	r4, r7
 8014458:	687f      	ldr	r7, [r7, #4]
 801445a:	e7b6      	b.n	80143ca <_malloc_r+0x4a>
 801445c:	461a      	mov	r2, r3
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	42a3      	cmp	r3, r4
 8014462:	d1fb      	bne.n	801445c <_malloc_r+0xdc>
 8014464:	2300      	movs	r3, #0
 8014466:	6053      	str	r3, [r2, #4]
 8014468:	e7de      	b.n	8014428 <_malloc_r+0xa8>
 801446a:	230c      	movs	r3, #12
 801446c:	6033      	str	r3, [r6, #0]
 801446e:	4630      	mov	r0, r6
 8014470:	f000 f80c 	bl	801448c <__malloc_unlock>
 8014474:	e794      	b.n	80143a0 <_malloc_r+0x20>
 8014476:	6005      	str	r5, [r0, #0]
 8014478:	e7d6      	b.n	8014428 <_malloc_r+0xa8>
 801447a:	bf00      	nop
 801447c:	2000f780 	.word	0x2000f780

08014480 <__malloc_lock>:
 8014480:	4801      	ldr	r0, [pc, #4]	@ (8014488 <__malloc_lock+0x8>)
 8014482:	f000 bbb8 	b.w	8014bf6 <__retarget_lock_acquire_recursive>
 8014486:	bf00      	nop
 8014488:	2000f8c4 	.word	0x2000f8c4

0801448c <__malloc_unlock>:
 801448c:	4801      	ldr	r0, [pc, #4]	@ (8014494 <__malloc_unlock+0x8>)
 801448e:	f000 bbb3 	b.w	8014bf8 <__retarget_lock_release_recursive>
 8014492:	bf00      	nop
 8014494:	2000f8c4 	.word	0x2000f8c4

08014498 <rand>:
 8014498:	4b16      	ldr	r3, [pc, #88]	@ (80144f4 <rand+0x5c>)
 801449a:	b510      	push	{r4, lr}
 801449c:	681c      	ldr	r4, [r3, #0]
 801449e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144a0:	b9b3      	cbnz	r3, 80144d0 <rand+0x38>
 80144a2:	2018      	movs	r0, #24
 80144a4:	f7ff ff42 	bl	801432c <malloc>
 80144a8:	4602      	mov	r2, r0
 80144aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80144ac:	b920      	cbnz	r0, 80144b8 <rand+0x20>
 80144ae:	4b12      	ldr	r3, [pc, #72]	@ (80144f8 <rand+0x60>)
 80144b0:	4812      	ldr	r0, [pc, #72]	@ (80144fc <rand+0x64>)
 80144b2:	2152      	movs	r1, #82	@ 0x52
 80144b4:	f000 fbb0 	bl	8014c18 <__assert_func>
 80144b8:	4911      	ldr	r1, [pc, #68]	@ (8014500 <rand+0x68>)
 80144ba:	4b12      	ldr	r3, [pc, #72]	@ (8014504 <rand+0x6c>)
 80144bc:	e9c0 1300 	strd	r1, r3, [r0]
 80144c0:	4b11      	ldr	r3, [pc, #68]	@ (8014508 <rand+0x70>)
 80144c2:	6083      	str	r3, [r0, #8]
 80144c4:	230b      	movs	r3, #11
 80144c6:	8183      	strh	r3, [r0, #12]
 80144c8:	2100      	movs	r1, #0
 80144ca:	2001      	movs	r0, #1
 80144cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80144d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80144d2:	480e      	ldr	r0, [pc, #56]	@ (801450c <rand+0x74>)
 80144d4:	690b      	ldr	r3, [r1, #16]
 80144d6:	694c      	ldr	r4, [r1, #20]
 80144d8:	4a0d      	ldr	r2, [pc, #52]	@ (8014510 <rand+0x78>)
 80144da:	4358      	muls	r0, r3
 80144dc:	fb02 0004 	mla	r0, r2, r4, r0
 80144e0:	fba3 3202 	umull	r3, r2, r3, r2
 80144e4:	3301      	adds	r3, #1
 80144e6:	eb40 0002 	adc.w	r0, r0, r2
 80144ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80144ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80144f2:	bd10      	pop	{r4, pc}
 80144f4:	20000074 	.word	0x20000074
 80144f8:	08018162 	.word	0x08018162
 80144fc:	08018179 	.word	0x08018179
 8014500:	abcd330e 	.word	0xabcd330e
 8014504:	e66d1234 	.word	0xe66d1234
 8014508:	0005deec 	.word	0x0005deec
 801450c:	5851f42d 	.word	0x5851f42d
 8014510:	4c957f2d 	.word	0x4c957f2d

08014514 <std>:
 8014514:	2300      	movs	r3, #0
 8014516:	b510      	push	{r4, lr}
 8014518:	4604      	mov	r4, r0
 801451a:	e9c0 3300 	strd	r3, r3, [r0]
 801451e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014522:	6083      	str	r3, [r0, #8]
 8014524:	8181      	strh	r1, [r0, #12]
 8014526:	6643      	str	r3, [r0, #100]	@ 0x64
 8014528:	81c2      	strh	r2, [r0, #14]
 801452a:	6183      	str	r3, [r0, #24]
 801452c:	4619      	mov	r1, r3
 801452e:	2208      	movs	r2, #8
 8014530:	305c      	adds	r0, #92	@ 0x5c
 8014532:	f000 fab7 	bl	8014aa4 <memset>
 8014536:	4b0d      	ldr	r3, [pc, #52]	@ (801456c <std+0x58>)
 8014538:	6263      	str	r3, [r4, #36]	@ 0x24
 801453a:	4b0d      	ldr	r3, [pc, #52]	@ (8014570 <std+0x5c>)
 801453c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801453e:	4b0d      	ldr	r3, [pc, #52]	@ (8014574 <std+0x60>)
 8014540:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014542:	4b0d      	ldr	r3, [pc, #52]	@ (8014578 <std+0x64>)
 8014544:	6323      	str	r3, [r4, #48]	@ 0x30
 8014546:	4b0d      	ldr	r3, [pc, #52]	@ (801457c <std+0x68>)
 8014548:	6224      	str	r4, [r4, #32]
 801454a:	429c      	cmp	r4, r3
 801454c:	d006      	beq.n	801455c <std+0x48>
 801454e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014552:	4294      	cmp	r4, r2
 8014554:	d002      	beq.n	801455c <std+0x48>
 8014556:	33d0      	adds	r3, #208	@ 0xd0
 8014558:	429c      	cmp	r4, r3
 801455a:	d105      	bne.n	8014568 <std+0x54>
 801455c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014564:	f000 bb46 	b.w	8014bf4 <__retarget_lock_init_recursive>
 8014568:	bd10      	pop	{r4, pc}
 801456a:	bf00      	nop
 801456c:	08014829 	.word	0x08014829
 8014570:	0801484b 	.word	0x0801484b
 8014574:	08014883 	.word	0x08014883
 8014578:	080148a7 	.word	0x080148a7
 801457c:	2000f784 	.word	0x2000f784

08014580 <stdio_exit_handler>:
 8014580:	4a02      	ldr	r2, [pc, #8]	@ (801458c <stdio_exit_handler+0xc>)
 8014582:	4903      	ldr	r1, [pc, #12]	@ (8014590 <stdio_exit_handler+0x10>)
 8014584:	4803      	ldr	r0, [pc, #12]	@ (8014594 <stdio_exit_handler+0x14>)
 8014586:	f000 b869 	b.w	801465c <_fwalk_sglue>
 801458a:	bf00      	nop
 801458c:	20000068 	.word	0x20000068
 8014590:	0801563d 	.word	0x0801563d
 8014594:	20000078 	.word	0x20000078

08014598 <cleanup_stdio>:
 8014598:	6841      	ldr	r1, [r0, #4]
 801459a:	4b0c      	ldr	r3, [pc, #48]	@ (80145cc <cleanup_stdio+0x34>)
 801459c:	4299      	cmp	r1, r3
 801459e:	b510      	push	{r4, lr}
 80145a0:	4604      	mov	r4, r0
 80145a2:	d001      	beq.n	80145a8 <cleanup_stdio+0x10>
 80145a4:	f001 f84a 	bl	801563c <_fflush_r>
 80145a8:	68a1      	ldr	r1, [r4, #8]
 80145aa:	4b09      	ldr	r3, [pc, #36]	@ (80145d0 <cleanup_stdio+0x38>)
 80145ac:	4299      	cmp	r1, r3
 80145ae:	d002      	beq.n	80145b6 <cleanup_stdio+0x1e>
 80145b0:	4620      	mov	r0, r4
 80145b2:	f001 f843 	bl	801563c <_fflush_r>
 80145b6:	68e1      	ldr	r1, [r4, #12]
 80145b8:	4b06      	ldr	r3, [pc, #24]	@ (80145d4 <cleanup_stdio+0x3c>)
 80145ba:	4299      	cmp	r1, r3
 80145bc:	d004      	beq.n	80145c8 <cleanup_stdio+0x30>
 80145be:	4620      	mov	r0, r4
 80145c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145c4:	f001 b83a 	b.w	801563c <_fflush_r>
 80145c8:	bd10      	pop	{r4, pc}
 80145ca:	bf00      	nop
 80145cc:	2000f784 	.word	0x2000f784
 80145d0:	2000f7ec 	.word	0x2000f7ec
 80145d4:	2000f854 	.word	0x2000f854

080145d8 <global_stdio_init.part.0>:
 80145d8:	b510      	push	{r4, lr}
 80145da:	4b0b      	ldr	r3, [pc, #44]	@ (8014608 <global_stdio_init.part.0+0x30>)
 80145dc:	4c0b      	ldr	r4, [pc, #44]	@ (801460c <global_stdio_init.part.0+0x34>)
 80145de:	4a0c      	ldr	r2, [pc, #48]	@ (8014610 <global_stdio_init.part.0+0x38>)
 80145e0:	601a      	str	r2, [r3, #0]
 80145e2:	4620      	mov	r0, r4
 80145e4:	2200      	movs	r2, #0
 80145e6:	2104      	movs	r1, #4
 80145e8:	f7ff ff94 	bl	8014514 <std>
 80145ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80145f0:	2201      	movs	r2, #1
 80145f2:	2109      	movs	r1, #9
 80145f4:	f7ff ff8e 	bl	8014514 <std>
 80145f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80145fc:	2202      	movs	r2, #2
 80145fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014602:	2112      	movs	r1, #18
 8014604:	f7ff bf86 	b.w	8014514 <std>
 8014608:	2000f8bc 	.word	0x2000f8bc
 801460c:	2000f784 	.word	0x2000f784
 8014610:	08014581 	.word	0x08014581

08014614 <__sfp_lock_acquire>:
 8014614:	4801      	ldr	r0, [pc, #4]	@ (801461c <__sfp_lock_acquire+0x8>)
 8014616:	f000 baee 	b.w	8014bf6 <__retarget_lock_acquire_recursive>
 801461a:	bf00      	nop
 801461c:	2000f8c5 	.word	0x2000f8c5

08014620 <__sfp_lock_release>:
 8014620:	4801      	ldr	r0, [pc, #4]	@ (8014628 <__sfp_lock_release+0x8>)
 8014622:	f000 bae9 	b.w	8014bf8 <__retarget_lock_release_recursive>
 8014626:	bf00      	nop
 8014628:	2000f8c5 	.word	0x2000f8c5

0801462c <__sinit>:
 801462c:	b510      	push	{r4, lr}
 801462e:	4604      	mov	r4, r0
 8014630:	f7ff fff0 	bl	8014614 <__sfp_lock_acquire>
 8014634:	6a23      	ldr	r3, [r4, #32]
 8014636:	b11b      	cbz	r3, 8014640 <__sinit+0x14>
 8014638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801463c:	f7ff bff0 	b.w	8014620 <__sfp_lock_release>
 8014640:	4b04      	ldr	r3, [pc, #16]	@ (8014654 <__sinit+0x28>)
 8014642:	6223      	str	r3, [r4, #32]
 8014644:	4b04      	ldr	r3, [pc, #16]	@ (8014658 <__sinit+0x2c>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1f5      	bne.n	8014638 <__sinit+0xc>
 801464c:	f7ff ffc4 	bl	80145d8 <global_stdio_init.part.0>
 8014650:	e7f2      	b.n	8014638 <__sinit+0xc>
 8014652:	bf00      	nop
 8014654:	08014599 	.word	0x08014599
 8014658:	2000f8bc 	.word	0x2000f8bc

0801465c <_fwalk_sglue>:
 801465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014660:	4607      	mov	r7, r0
 8014662:	4688      	mov	r8, r1
 8014664:	4614      	mov	r4, r2
 8014666:	2600      	movs	r6, #0
 8014668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801466c:	f1b9 0901 	subs.w	r9, r9, #1
 8014670:	d505      	bpl.n	801467e <_fwalk_sglue+0x22>
 8014672:	6824      	ldr	r4, [r4, #0]
 8014674:	2c00      	cmp	r4, #0
 8014676:	d1f7      	bne.n	8014668 <_fwalk_sglue+0xc>
 8014678:	4630      	mov	r0, r6
 801467a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801467e:	89ab      	ldrh	r3, [r5, #12]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d907      	bls.n	8014694 <_fwalk_sglue+0x38>
 8014684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014688:	3301      	adds	r3, #1
 801468a:	d003      	beq.n	8014694 <_fwalk_sglue+0x38>
 801468c:	4629      	mov	r1, r5
 801468e:	4638      	mov	r0, r7
 8014690:	47c0      	blx	r8
 8014692:	4306      	orrs	r6, r0
 8014694:	3568      	adds	r5, #104	@ 0x68
 8014696:	e7e9      	b.n	801466c <_fwalk_sglue+0x10>

08014698 <iprintf>:
 8014698:	b40f      	push	{r0, r1, r2, r3}
 801469a:	b507      	push	{r0, r1, r2, lr}
 801469c:	4906      	ldr	r1, [pc, #24]	@ (80146b8 <iprintf+0x20>)
 801469e:	ab04      	add	r3, sp, #16
 80146a0:	6808      	ldr	r0, [r1, #0]
 80146a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80146a6:	6881      	ldr	r1, [r0, #8]
 80146a8:	9301      	str	r3, [sp, #4]
 80146aa:	f000 fc9f 	bl	8014fec <_vfiprintf_r>
 80146ae:	b003      	add	sp, #12
 80146b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80146b4:	b004      	add	sp, #16
 80146b6:	4770      	bx	lr
 80146b8:	20000074 	.word	0x20000074

080146bc <_puts_r>:
 80146bc:	6a03      	ldr	r3, [r0, #32]
 80146be:	b570      	push	{r4, r5, r6, lr}
 80146c0:	6884      	ldr	r4, [r0, #8]
 80146c2:	4605      	mov	r5, r0
 80146c4:	460e      	mov	r6, r1
 80146c6:	b90b      	cbnz	r3, 80146cc <_puts_r+0x10>
 80146c8:	f7ff ffb0 	bl	801462c <__sinit>
 80146cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146ce:	07db      	lsls	r3, r3, #31
 80146d0:	d405      	bmi.n	80146de <_puts_r+0x22>
 80146d2:	89a3      	ldrh	r3, [r4, #12]
 80146d4:	0598      	lsls	r0, r3, #22
 80146d6:	d402      	bmi.n	80146de <_puts_r+0x22>
 80146d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146da:	f000 fa8c 	bl	8014bf6 <__retarget_lock_acquire_recursive>
 80146de:	89a3      	ldrh	r3, [r4, #12]
 80146e0:	0719      	lsls	r1, r3, #28
 80146e2:	d502      	bpl.n	80146ea <_puts_r+0x2e>
 80146e4:	6923      	ldr	r3, [r4, #16]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d135      	bne.n	8014756 <_puts_r+0x9a>
 80146ea:	4621      	mov	r1, r4
 80146ec:	4628      	mov	r0, r5
 80146ee:	f000 f959 	bl	80149a4 <__swsetup_r>
 80146f2:	b380      	cbz	r0, 8014756 <_puts_r+0x9a>
 80146f4:	f04f 35ff 	mov.w	r5, #4294967295
 80146f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146fa:	07da      	lsls	r2, r3, #31
 80146fc:	d405      	bmi.n	801470a <_puts_r+0x4e>
 80146fe:	89a3      	ldrh	r3, [r4, #12]
 8014700:	059b      	lsls	r3, r3, #22
 8014702:	d402      	bmi.n	801470a <_puts_r+0x4e>
 8014704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014706:	f000 fa77 	bl	8014bf8 <__retarget_lock_release_recursive>
 801470a:	4628      	mov	r0, r5
 801470c:	bd70      	pop	{r4, r5, r6, pc}
 801470e:	2b00      	cmp	r3, #0
 8014710:	da04      	bge.n	801471c <_puts_r+0x60>
 8014712:	69a2      	ldr	r2, [r4, #24]
 8014714:	429a      	cmp	r2, r3
 8014716:	dc17      	bgt.n	8014748 <_puts_r+0x8c>
 8014718:	290a      	cmp	r1, #10
 801471a:	d015      	beq.n	8014748 <_puts_r+0x8c>
 801471c:	6823      	ldr	r3, [r4, #0]
 801471e:	1c5a      	adds	r2, r3, #1
 8014720:	6022      	str	r2, [r4, #0]
 8014722:	7019      	strb	r1, [r3, #0]
 8014724:	68a3      	ldr	r3, [r4, #8]
 8014726:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801472a:	3b01      	subs	r3, #1
 801472c:	60a3      	str	r3, [r4, #8]
 801472e:	2900      	cmp	r1, #0
 8014730:	d1ed      	bne.n	801470e <_puts_r+0x52>
 8014732:	2b00      	cmp	r3, #0
 8014734:	da11      	bge.n	801475a <_puts_r+0x9e>
 8014736:	4622      	mov	r2, r4
 8014738:	210a      	movs	r1, #10
 801473a:	4628      	mov	r0, r5
 801473c:	f000 f8f4 	bl	8014928 <__swbuf_r>
 8014740:	3001      	adds	r0, #1
 8014742:	d0d7      	beq.n	80146f4 <_puts_r+0x38>
 8014744:	250a      	movs	r5, #10
 8014746:	e7d7      	b.n	80146f8 <_puts_r+0x3c>
 8014748:	4622      	mov	r2, r4
 801474a:	4628      	mov	r0, r5
 801474c:	f000 f8ec 	bl	8014928 <__swbuf_r>
 8014750:	3001      	adds	r0, #1
 8014752:	d1e7      	bne.n	8014724 <_puts_r+0x68>
 8014754:	e7ce      	b.n	80146f4 <_puts_r+0x38>
 8014756:	3e01      	subs	r6, #1
 8014758:	e7e4      	b.n	8014724 <_puts_r+0x68>
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	1c5a      	adds	r2, r3, #1
 801475e:	6022      	str	r2, [r4, #0]
 8014760:	220a      	movs	r2, #10
 8014762:	701a      	strb	r2, [r3, #0]
 8014764:	e7ee      	b.n	8014744 <_puts_r+0x88>
	...

08014768 <puts>:
 8014768:	4b02      	ldr	r3, [pc, #8]	@ (8014774 <puts+0xc>)
 801476a:	4601      	mov	r1, r0
 801476c:	6818      	ldr	r0, [r3, #0]
 801476e:	f7ff bfa5 	b.w	80146bc <_puts_r>
 8014772:	bf00      	nop
 8014774:	20000074 	.word	0x20000074

08014778 <sniprintf>:
 8014778:	b40c      	push	{r2, r3}
 801477a:	b530      	push	{r4, r5, lr}
 801477c:	4b18      	ldr	r3, [pc, #96]	@ (80147e0 <sniprintf+0x68>)
 801477e:	1e0c      	subs	r4, r1, #0
 8014780:	681d      	ldr	r5, [r3, #0]
 8014782:	b09d      	sub	sp, #116	@ 0x74
 8014784:	da08      	bge.n	8014798 <sniprintf+0x20>
 8014786:	238b      	movs	r3, #139	@ 0x8b
 8014788:	602b      	str	r3, [r5, #0]
 801478a:	f04f 30ff 	mov.w	r0, #4294967295
 801478e:	b01d      	add	sp, #116	@ 0x74
 8014790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014794:	b002      	add	sp, #8
 8014796:	4770      	bx	lr
 8014798:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801479c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80147a0:	f04f 0300 	mov.w	r3, #0
 80147a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80147a6:	bf14      	ite	ne
 80147a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80147ac:	4623      	moveq	r3, r4
 80147ae:	9304      	str	r3, [sp, #16]
 80147b0:	9307      	str	r3, [sp, #28]
 80147b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80147b6:	9002      	str	r0, [sp, #8]
 80147b8:	9006      	str	r0, [sp, #24]
 80147ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80147be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80147c0:	ab21      	add	r3, sp, #132	@ 0x84
 80147c2:	a902      	add	r1, sp, #8
 80147c4:	4628      	mov	r0, r5
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	f000 faea 	bl	8014da0 <_svfiprintf_r>
 80147cc:	1c43      	adds	r3, r0, #1
 80147ce:	bfbc      	itt	lt
 80147d0:	238b      	movlt	r3, #139	@ 0x8b
 80147d2:	602b      	strlt	r3, [r5, #0]
 80147d4:	2c00      	cmp	r4, #0
 80147d6:	d0da      	beq.n	801478e <sniprintf+0x16>
 80147d8:	9b02      	ldr	r3, [sp, #8]
 80147da:	2200      	movs	r2, #0
 80147dc:	701a      	strb	r2, [r3, #0]
 80147de:	e7d6      	b.n	801478e <sniprintf+0x16>
 80147e0:	20000074 	.word	0x20000074

080147e4 <siprintf>:
 80147e4:	b40e      	push	{r1, r2, r3}
 80147e6:	b510      	push	{r4, lr}
 80147e8:	b09d      	sub	sp, #116	@ 0x74
 80147ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80147ec:	9002      	str	r0, [sp, #8]
 80147ee:	9006      	str	r0, [sp, #24]
 80147f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80147f4:	480a      	ldr	r0, [pc, #40]	@ (8014820 <siprintf+0x3c>)
 80147f6:	9107      	str	r1, [sp, #28]
 80147f8:	9104      	str	r1, [sp, #16]
 80147fa:	490a      	ldr	r1, [pc, #40]	@ (8014824 <siprintf+0x40>)
 80147fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014800:	9105      	str	r1, [sp, #20]
 8014802:	2400      	movs	r4, #0
 8014804:	a902      	add	r1, sp, #8
 8014806:	6800      	ldr	r0, [r0, #0]
 8014808:	9301      	str	r3, [sp, #4]
 801480a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801480c:	f000 fac8 	bl	8014da0 <_svfiprintf_r>
 8014810:	9b02      	ldr	r3, [sp, #8]
 8014812:	701c      	strb	r4, [r3, #0]
 8014814:	b01d      	add	sp, #116	@ 0x74
 8014816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801481a:	b003      	add	sp, #12
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	20000074 	.word	0x20000074
 8014824:	ffff0208 	.word	0xffff0208

08014828 <__sread>:
 8014828:	b510      	push	{r4, lr}
 801482a:	460c      	mov	r4, r1
 801482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014830:	f000 f982 	bl	8014b38 <_read_r>
 8014834:	2800      	cmp	r0, #0
 8014836:	bfab      	itete	ge
 8014838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801483a:	89a3      	ldrhlt	r3, [r4, #12]
 801483c:	181b      	addge	r3, r3, r0
 801483e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014842:	bfac      	ite	ge
 8014844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014846:	81a3      	strhlt	r3, [r4, #12]
 8014848:	bd10      	pop	{r4, pc}

0801484a <__swrite>:
 801484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801484e:	461f      	mov	r7, r3
 8014850:	898b      	ldrh	r3, [r1, #12]
 8014852:	05db      	lsls	r3, r3, #23
 8014854:	4605      	mov	r5, r0
 8014856:	460c      	mov	r4, r1
 8014858:	4616      	mov	r6, r2
 801485a:	d505      	bpl.n	8014868 <__swrite+0x1e>
 801485c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014860:	2302      	movs	r3, #2
 8014862:	2200      	movs	r2, #0
 8014864:	f000 f956 	bl	8014b14 <_lseek_r>
 8014868:	89a3      	ldrh	r3, [r4, #12]
 801486a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801486e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014872:	81a3      	strh	r3, [r4, #12]
 8014874:	4632      	mov	r2, r6
 8014876:	463b      	mov	r3, r7
 8014878:	4628      	mov	r0, r5
 801487a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801487e:	f000 b97d 	b.w	8014b7c <_write_r>

08014882 <__sseek>:
 8014882:	b510      	push	{r4, lr}
 8014884:	460c      	mov	r4, r1
 8014886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801488a:	f000 f943 	bl	8014b14 <_lseek_r>
 801488e:	1c43      	adds	r3, r0, #1
 8014890:	89a3      	ldrh	r3, [r4, #12]
 8014892:	bf15      	itete	ne
 8014894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801489a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801489e:	81a3      	strheq	r3, [r4, #12]
 80148a0:	bf18      	it	ne
 80148a2:	81a3      	strhne	r3, [r4, #12]
 80148a4:	bd10      	pop	{r4, pc}

080148a6 <__sclose>:
 80148a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148aa:	f000 b923 	b.w	8014af4 <_close_r>

080148ae <_vsniprintf_r>:
 80148ae:	b530      	push	{r4, r5, lr}
 80148b0:	4614      	mov	r4, r2
 80148b2:	2c00      	cmp	r4, #0
 80148b4:	b09b      	sub	sp, #108	@ 0x6c
 80148b6:	4605      	mov	r5, r0
 80148b8:	461a      	mov	r2, r3
 80148ba:	da05      	bge.n	80148c8 <_vsniprintf_r+0x1a>
 80148bc:	238b      	movs	r3, #139	@ 0x8b
 80148be:	6003      	str	r3, [r0, #0]
 80148c0:	f04f 30ff 	mov.w	r0, #4294967295
 80148c4:	b01b      	add	sp, #108	@ 0x6c
 80148c6:	bd30      	pop	{r4, r5, pc}
 80148c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80148cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80148d0:	f04f 0300 	mov.w	r3, #0
 80148d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80148d6:	bf14      	ite	ne
 80148d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80148dc:	4623      	moveq	r3, r4
 80148de:	9302      	str	r3, [sp, #8]
 80148e0:	9305      	str	r3, [sp, #20]
 80148e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80148e6:	9100      	str	r1, [sp, #0]
 80148e8:	9104      	str	r1, [sp, #16]
 80148ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80148ee:	4669      	mov	r1, sp
 80148f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80148f2:	f000 fa55 	bl	8014da0 <_svfiprintf_r>
 80148f6:	1c43      	adds	r3, r0, #1
 80148f8:	bfbc      	itt	lt
 80148fa:	238b      	movlt	r3, #139	@ 0x8b
 80148fc:	602b      	strlt	r3, [r5, #0]
 80148fe:	2c00      	cmp	r4, #0
 8014900:	d0e0      	beq.n	80148c4 <_vsniprintf_r+0x16>
 8014902:	9b00      	ldr	r3, [sp, #0]
 8014904:	2200      	movs	r2, #0
 8014906:	701a      	strb	r2, [r3, #0]
 8014908:	e7dc      	b.n	80148c4 <_vsniprintf_r+0x16>
	...

0801490c <vsniprintf>:
 801490c:	b507      	push	{r0, r1, r2, lr}
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	4613      	mov	r3, r2
 8014912:	460a      	mov	r2, r1
 8014914:	4601      	mov	r1, r0
 8014916:	4803      	ldr	r0, [pc, #12]	@ (8014924 <vsniprintf+0x18>)
 8014918:	6800      	ldr	r0, [r0, #0]
 801491a:	f7ff ffc8 	bl	80148ae <_vsniprintf_r>
 801491e:	b003      	add	sp, #12
 8014920:	f85d fb04 	ldr.w	pc, [sp], #4
 8014924:	20000074 	.word	0x20000074

08014928 <__swbuf_r>:
 8014928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492a:	460e      	mov	r6, r1
 801492c:	4614      	mov	r4, r2
 801492e:	4605      	mov	r5, r0
 8014930:	b118      	cbz	r0, 801493a <__swbuf_r+0x12>
 8014932:	6a03      	ldr	r3, [r0, #32]
 8014934:	b90b      	cbnz	r3, 801493a <__swbuf_r+0x12>
 8014936:	f7ff fe79 	bl	801462c <__sinit>
 801493a:	69a3      	ldr	r3, [r4, #24]
 801493c:	60a3      	str	r3, [r4, #8]
 801493e:	89a3      	ldrh	r3, [r4, #12]
 8014940:	071a      	lsls	r2, r3, #28
 8014942:	d501      	bpl.n	8014948 <__swbuf_r+0x20>
 8014944:	6923      	ldr	r3, [r4, #16]
 8014946:	b943      	cbnz	r3, 801495a <__swbuf_r+0x32>
 8014948:	4621      	mov	r1, r4
 801494a:	4628      	mov	r0, r5
 801494c:	f000 f82a 	bl	80149a4 <__swsetup_r>
 8014950:	b118      	cbz	r0, 801495a <__swbuf_r+0x32>
 8014952:	f04f 37ff 	mov.w	r7, #4294967295
 8014956:	4638      	mov	r0, r7
 8014958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801495a:	6823      	ldr	r3, [r4, #0]
 801495c:	6922      	ldr	r2, [r4, #16]
 801495e:	1a98      	subs	r0, r3, r2
 8014960:	6963      	ldr	r3, [r4, #20]
 8014962:	b2f6      	uxtb	r6, r6
 8014964:	4283      	cmp	r3, r0
 8014966:	4637      	mov	r7, r6
 8014968:	dc05      	bgt.n	8014976 <__swbuf_r+0x4e>
 801496a:	4621      	mov	r1, r4
 801496c:	4628      	mov	r0, r5
 801496e:	f000 fe65 	bl	801563c <_fflush_r>
 8014972:	2800      	cmp	r0, #0
 8014974:	d1ed      	bne.n	8014952 <__swbuf_r+0x2a>
 8014976:	68a3      	ldr	r3, [r4, #8]
 8014978:	3b01      	subs	r3, #1
 801497a:	60a3      	str	r3, [r4, #8]
 801497c:	6823      	ldr	r3, [r4, #0]
 801497e:	1c5a      	adds	r2, r3, #1
 8014980:	6022      	str	r2, [r4, #0]
 8014982:	701e      	strb	r6, [r3, #0]
 8014984:	6962      	ldr	r2, [r4, #20]
 8014986:	1c43      	adds	r3, r0, #1
 8014988:	429a      	cmp	r2, r3
 801498a:	d004      	beq.n	8014996 <__swbuf_r+0x6e>
 801498c:	89a3      	ldrh	r3, [r4, #12]
 801498e:	07db      	lsls	r3, r3, #31
 8014990:	d5e1      	bpl.n	8014956 <__swbuf_r+0x2e>
 8014992:	2e0a      	cmp	r6, #10
 8014994:	d1df      	bne.n	8014956 <__swbuf_r+0x2e>
 8014996:	4621      	mov	r1, r4
 8014998:	4628      	mov	r0, r5
 801499a:	f000 fe4f 	bl	801563c <_fflush_r>
 801499e:	2800      	cmp	r0, #0
 80149a0:	d0d9      	beq.n	8014956 <__swbuf_r+0x2e>
 80149a2:	e7d6      	b.n	8014952 <__swbuf_r+0x2a>

080149a4 <__swsetup_r>:
 80149a4:	b538      	push	{r3, r4, r5, lr}
 80149a6:	4b29      	ldr	r3, [pc, #164]	@ (8014a4c <__swsetup_r+0xa8>)
 80149a8:	4605      	mov	r5, r0
 80149aa:	6818      	ldr	r0, [r3, #0]
 80149ac:	460c      	mov	r4, r1
 80149ae:	b118      	cbz	r0, 80149b8 <__swsetup_r+0x14>
 80149b0:	6a03      	ldr	r3, [r0, #32]
 80149b2:	b90b      	cbnz	r3, 80149b8 <__swsetup_r+0x14>
 80149b4:	f7ff fe3a 	bl	801462c <__sinit>
 80149b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149bc:	0719      	lsls	r1, r3, #28
 80149be:	d422      	bmi.n	8014a06 <__swsetup_r+0x62>
 80149c0:	06da      	lsls	r2, r3, #27
 80149c2:	d407      	bmi.n	80149d4 <__swsetup_r+0x30>
 80149c4:	2209      	movs	r2, #9
 80149c6:	602a      	str	r2, [r5, #0]
 80149c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149cc:	81a3      	strh	r3, [r4, #12]
 80149ce:	f04f 30ff 	mov.w	r0, #4294967295
 80149d2:	e033      	b.n	8014a3c <__swsetup_r+0x98>
 80149d4:	0758      	lsls	r0, r3, #29
 80149d6:	d512      	bpl.n	80149fe <__swsetup_r+0x5a>
 80149d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149da:	b141      	cbz	r1, 80149ee <__swsetup_r+0x4a>
 80149dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149e0:	4299      	cmp	r1, r3
 80149e2:	d002      	beq.n	80149ea <__swsetup_r+0x46>
 80149e4:	4628      	mov	r0, r5
 80149e6:	f000 f935 	bl	8014c54 <_free_r>
 80149ea:	2300      	movs	r3, #0
 80149ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80149ee:	89a3      	ldrh	r3, [r4, #12]
 80149f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80149f4:	81a3      	strh	r3, [r4, #12]
 80149f6:	2300      	movs	r3, #0
 80149f8:	6063      	str	r3, [r4, #4]
 80149fa:	6923      	ldr	r3, [r4, #16]
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	89a3      	ldrh	r3, [r4, #12]
 8014a00:	f043 0308 	orr.w	r3, r3, #8
 8014a04:	81a3      	strh	r3, [r4, #12]
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	b94b      	cbnz	r3, 8014a1e <__swsetup_r+0x7a>
 8014a0a:	89a3      	ldrh	r3, [r4, #12]
 8014a0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014a14:	d003      	beq.n	8014a1e <__swsetup_r+0x7a>
 8014a16:	4621      	mov	r1, r4
 8014a18:	4628      	mov	r0, r5
 8014a1a:	f000 fe6f 	bl	80156fc <__smakebuf_r>
 8014a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a22:	f013 0201 	ands.w	r2, r3, #1
 8014a26:	d00a      	beq.n	8014a3e <__swsetup_r+0x9a>
 8014a28:	2200      	movs	r2, #0
 8014a2a:	60a2      	str	r2, [r4, #8]
 8014a2c:	6962      	ldr	r2, [r4, #20]
 8014a2e:	4252      	negs	r2, r2
 8014a30:	61a2      	str	r2, [r4, #24]
 8014a32:	6922      	ldr	r2, [r4, #16]
 8014a34:	b942      	cbnz	r2, 8014a48 <__swsetup_r+0xa4>
 8014a36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014a3a:	d1c5      	bne.n	80149c8 <__swsetup_r+0x24>
 8014a3c:	bd38      	pop	{r3, r4, r5, pc}
 8014a3e:	0799      	lsls	r1, r3, #30
 8014a40:	bf58      	it	pl
 8014a42:	6962      	ldrpl	r2, [r4, #20]
 8014a44:	60a2      	str	r2, [r4, #8]
 8014a46:	e7f4      	b.n	8014a32 <__swsetup_r+0x8e>
 8014a48:	2000      	movs	r0, #0
 8014a4a:	e7f7      	b.n	8014a3c <__swsetup_r+0x98>
 8014a4c:	20000074 	.word	0x20000074

08014a50 <memcmp>:
 8014a50:	b510      	push	{r4, lr}
 8014a52:	3901      	subs	r1, #1
 8014a54:	4402      	add	r2, r0
 8014a56:	4290      	cmp	r0, r2
 8014a58:	d101      	bne.n	8014a5e <memcmp+0xe>
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	e005      	b.n	8014a6a <memcmp+0x1a>
 8014a5e:	7803      	ldrb	r3, [r0, #0]
 8014a60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a64:	42a3      	cmp	r3, r4
 8014a66:	d001      	beq.n	8014a6c <memcmp+0x1c>
 8014a68:	1b18      	subs	r0, r3, r4
 8014a6a:	bd10      	pop	{r4, pc}
 8014a6c:	3001      	adds	r0, #1
 8014a6e:	e7f2      	b.n	8014a56 <memcmp+0x6>

08014a70 <memmove>:
 8014a70:	4288      	cmp	r0, r1
 8014a72:	b510      	push	{r4, lr}
 8014a74:	eb01 0402 	add.w	r4, r1, r2
 8014a78:	d902      	bls.n	8014a80 <memmove+0x10>
 8014a7a:	4284      	cmp	r4, r0
 8014a7c:	4623      	mov	r3, r4
 8014a7e:	d807      	bhi.n	8014a90 <memmove+0x20>
 8014a80:	1e43      	subs	r3, r0, #1
 8014a82:	42a1      	cmp	r1, r4
 8014a84:	d008      	beq.n	8014a98 <memmove+0x28>
 8014a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a8e:	e7f8      	b.n	8014a82 <memmove+0x12>
 8014a90:	4402      	add	r2, r0
 8014a92:	4601      	mov	r1, r0
 8014a94:	428a      	cmp	r2, r1
 8014a96:	d100      	bne.n	8014a9a <memmove+0x2a>
 8014a98:	bd10      	pop	{r4, pc}
 8014a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014aa2:	e7f7      	b.n	8014a94 <memmove+0x24>

08014aa4 <memset>:
 8014aa4:	4402      	add	r2, r0
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	d100      	bne.n	8014aae <memset+0xa>
 8014aac:	4770      	bx	lr
 8014aae:	f803 1b01 	strb.w	r1, [r3], #1
 8014ab2:	e7f9      	b.n	8014aa8 <memset+0x4>

08014ab4 <strchr>:
 8014ab4:	b2c9      	uxtb	r1, r1
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014abe:	b112      	cbz	r2, 8014ac6 <strchr+0x12>
 8014ac0:	428a      	cmp	r2, r1
 8014ac2:	d1f9      	bne.n	8014ab8 <strchr+0x4>
 8014ac4:	4770      	bx	lr
 8014ac6:	2900      	cmp	r1, #0
 8014ac8:	bf18      	it	ne
 8014aca:	2000      	movne	r0, #0
 8014acc:	4770      	bx	lr

08014ace <strncmp>:
 8014ace:	b510      	push	{r4, lr}
 8014ad0:	b16a      	cbz	r2, 8014aee <strncmp+0x20>
 8014ad2:	3901      	subs	r1, #1
 8014ad4:	1884      	adds	r4, r0, r2
 8014ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ada:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d103      	bne.n	8014aea <strncmp+0x1c>
 8014ae2:	42a0      	cmp	r0, r4
 8014ae4:	d001      	beq.n	8014aea <strncmp+0x1c>
 8014ae6:	2a00      	cmp	r2, #0
 8014ae8:	d1f5      	bne.n	8014ad6 <strncmp+0x8>
 8014aea:	1ad0      	subs	r0, r2, r3
 8014aec:	bd10      	pop	{r4, pc}
 8014aee:	4610      	mov	r0, r2
 8014af0:	e7fc      	b.n	8014aec <strncmp+0x1e>
	...

08014af4 <_close_r>:
 8014af4:	b538      	push	{r3, r4, r5, lr}
 8014af6:	4d06      	ldr	r5, [pc, #24]	@ (8014b10 <_close_r+0x1c>)
 8014af8:	2300      	movs	r3, #0
 8014afa:	4604      	mov	r4, r0
 8014afc:	4608      	mov	r0, r1
 8014afe:	602b      	str	r3, [r5, #0]
 8014b00:	f7ec fed2 	bl	80018a8 <_close>
 8014b04:	1c43      	adds	r3, r0, #1
 8014b06:	d102      	bne.n	8014b0e <_close_r+0x1a>
 8014b08:	682b      	ldr	r3, [r5, #0]
 8014b0a:	b103      	cbz	r3, 8014b0e <_close_r+0x1a>
 8014b0c:	6023      	str	r3, [r4, #0]
 8014b0e:	bd38      	pop	{r3, r4, r5, pc}
 8014b10:	2000f8c0 	.word	0x2000f8c0

08014b14 <_lseek_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	4d07      	ldr	r5, [pc, #28]	@ (8014b34 <_lseek_r+0x20>)
 8014b18:	4604      	mov	r4, r0
 8014b1a:	4608      	mov	r0, r1
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	2200      	movs	r2, #0
 8014b20:	602a      	str	r2, [r5, #0]
 8014b22:	461a      	mov	r2, r3
 8014b24:	f7ec feca 	bl	80018bc <_lseek>
 8014b28:	1c43      	adds	r3, r0, #1
 8014b2a:	d102      	bne.n	8014b32 <_lseek_r+0x1e>
 8014b2c:	682b      	ldr	r3, [r5, #0]
 8014b2e:	b103      	cbz	r3, 8014b32 <_lseek_r+0x1e>
 8014b30:	6023      	str	r3, [r4, #0]
 8014b32:	bd38      	pop	{r3, r4, r5, pc}
 8014b34:	2000f8c0 	.word	0x2000f8c0

08014b38 <_read_r>:
 8014b38:	b538      	push	{r3, r4, r5, lr}
 8014b3a:	4d07      	ldr	r5, [pc, #28]	@ (8014b58 <_read_r+0x20>)
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	4608      	mov	r0, r1
 8014b40:	4611      	mov	r1, r2
 8014b42:	2200      	movs	r2, #0
 8014b44:	602a      	str	r2, [r5, #0]
 8014b46:	461a      	mov	r2, r3
 8014b48:	f7ec fea0 	bl	800188c <_read>
 8014b4c:	1c43      	adds	r3, r0, #1
 8014b4e:	d102      	bne.n	8014b56 <_read_r+0x1e>
 8014b50:	682b      	ldr	r3, [r5, #0]
 8014b52:	b103      	cbz	r3, 8014b56 <_read_r+0x1e>
 8014b54:	6023      	str	r3, [r4, #0]
 8014b56:	bd38      	pop	{r3, r4, r5, pc}
 8014b58:	2000f8c0 	.word	0x2000f8c0

08014b5c <_sbrk_r>:
 8014b5c:	b538      	push	{r3, r4, r5, lr}
 8014b5e:	4d06      	ldr	r5, [pc, #24]	@ (8014b78 <_sbrk_r+0x1c>)
 8014b60:	2300      	movs	r3, #0
 8014b62:	4604      	mov	r4, r0
 8014b64:	4608      	mov	r0, r1
 8014b66:	602b      	str	r3, [r5, #0]
 8014b68:	f7ec feaa 	bl	80018c0 <_sbrk>
 8014b6c:	1c43      	adds	r3, r0, #1
 8014b6e:	d102      	bne.n	8014b76 <_sbrk_r+0x1a>
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	b103      	cbz	r3, 8014b76 <_sbrk_r+0x1a>
 8014b74:	6023      	str	r3, [r4, #0]
 8014b76:	bd38      	pop	{r3, r4, r5, pc}
 8014b78:	2000f8c0 	.word	0x2000f8c0

08014b7c <_write_r>:
 8014b7c:	b538      	push	{r3, r4, r5, lr}
 8014b7e:	4d07      	ldr	r5, [pc, #28]	@ (8014b9c <_write_r+0x20>)
 8014b80:	4604      	mov	r4, r0
 8014b82:	4608      	mov	r0, r1
 8014b84:	4611      	mov	r1, r2
 8014b86:	2200      	movs	r2, #0
 8014b88:	602a      	str	r2, [r5, #0]
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	f7f4 ff7a 	bl	8009a84 <_write>
 8014b90:	1c43      	adds	r3, r0, #1
 8014b92:	d102      	bne.n	8014b9a <_write_r+0x1e>
 8014b94:	682b      	ldr	r3, [r5, #0]
 8014b96:	b103      	cbz	r3, 8014b9a <_write_r+0x1e>
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	bd38      	pop	{r3, r4, r5, pc}
 8014b9c:	2000f8c0 	.word	0x2000f8c0

08014ba0 <__errno>:
 8014ba0:	4b01      	ldr	r3, [pc, #4]	@ (8014ba8 <__errno+0x8>)
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	20000074 	.word	0x20000074

08014bac <__libc_init_array>:
 8014bac:	b570      	push	{r4, r5, r6, lr}
 8014bae:	4d0d      	ldr	r5, [pc, #52]	@ (8014be4 <__libc_init_array+0x38>)
 8014bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8014be8 <__libc_init_array+0x3c>)
 8014bb2:	1b64      	subs	r4, r4, r5
 8014bb4:	10a4      	asrs	r4, r4, #2
 8014bb6:	2600      	movs	r6, #0
 8014bb8:	42a6      	cmp	r6, r4
 8014bba:	d109      	bne.n	8014bd0 <__libc_init_array+0x24>
 8014bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8014bec <__libc_init_array+0x40>)
 8014bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8014bf0 <__libc_init_array+0x44>)
 8014bc0:	f000 fe7c 	bl	80158bc <_init>
 8014bc4:	1b64      	subs	r4, r4, r5
 8014bc6:	10a4      	asrs	r4, r4, #2
 8014bc8:	2600      	movs	r6, #0
 8014bca:	42a6      	cmp	r6, r4
 8014bcc:	d105      	bne.n	8014bda <__libc_init_array+0x2e>
 8014bce:	bd70      	pop	{r4, r5, r6, pc}
 8014bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bd4:	4798      	blx	r3
 8014bd6:	3601      	adds	r6, #1
 8014bd8:	e7ee      	b.n	8014bb8 <__libc_init_array+0xc>
 8014bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bde:	4798      	blx	r3
 8014be0:	3601      	adds	r6, #1
 8014be2:	e7f2      	b.n	8014bca <__libc_init_array+0x1e>
 8014be4:	0808f020 	.word	0x0808f020
 8014be8:	0808f020 	.word	0x0808f020
 8014bec:	0808f020 	.word	0x0808f020
 8014bf0:	0808f024 	.word	0x0808f024

08014bf4 <__retarget_lock_init_recursive>:
 8014bf4:	4770      	bx	lr

08014bf6 <__retarget_lock_acquire_recursive>:
 8014bf6:	4770      	bx	lr

08014bf8 <__retarget_lock_release_recursive>:
 8014bf8:	4770      	bx	lr

08014bfa <memcpy>:
 8014bfa:	440a      	add	r2, r1
 8014bfc:	4291      	cmp	r1, r2
 8014bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c02:	d100      	bne.n	8014c06 <memcpy+0xc>
 8014c04:	4770      	bx	lr
 8014c06:	b510      	push	{r4, lr}
 8014c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c10:	4291      	cmp	r1, r2
 8014c12:	d1f9      	bne.n	8014c08 <memcpy+0xe>
 8014c14:	bd10      	pop	{r4, pc}
	...

08014c18 <__assert_func>:
 8014c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c1a:	4614      	mov	r4, r2
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	4b09      	ldr	r3, [pc, #36]	@ (8014c44 <__assert_func+0x2c>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	4605      	mov	r5, r0
 8014c24:	68d8      	ldr	r0, [r3, #12]
 8014c26:	b14c      	cbz	r4, 8014c3c <__assert_func+0x24>
 8014c28:	4b07      	ldr	r3, [pc, #28]	@ (8014c48 <__assert_func+0x30>)
 8014c2a:	9100      	str	r1, [sp, #0]
 8014c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c30:	4906      	ldr	r1, [pc, #24]	@ (8014c4c <__assert_func+0x34>)
 8014c32:	462b      	mov	r3, r5
 8014c34:	f000 fd2a 	bl	801568c <fiprintf>
 8014c38:	f000 fdbe 	bl	80157b8 <abort>
 8014c3c:	4b04      	ldr	r3, [pc, #16]	@ (8014c50 <__assert_func+0x38>)
 8014c3e:	461c      	mov	r4, r3
 8014c40:	e7f3      	b.n	8014c2a <__assert_func+0x12>
 8014c42:	bf00      	nop
 8014c44:	20000074 	.word	0x20000074
 8014c48:	080181d1 	.word	0x080181d1
 8014c4c:	080181de 	.word	0x080181de
 8014c50:	08015f41 	.word	0x08015f41

08014c54 <_free_r>:
 8014c54:	b538      	push	{r3, r4, r5, lr}
 8014c56:	4605      	mov	r5, r0
 8014c58:	2900      	cmp	r1, #0
 8014c5a:	d041      	beq.n	8014ce0 <_free_r+0x8c>
 8014c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c60:	1f0c      	subs	r4, r1, #4
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	bfb8      	it	lt
 8014c66:	18e4      	addlt	r4, r4, r3
 8014c68:	f7ff fc0a 	bl	8014480 <__malloc_lock>
 8014c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8014ce4 <_free_r+0x90>)
 8014c6e:	6813      	ldr	r3, [r2, #0]
 8014c70:	b933      	cbnz	r3, 8014c80 <_free_r+0x2c>
 8014c72:	6063      	str	r3, [r4, #4]
 8014c74:	6014      	str	r4, [r2, #0]
 8014c76:	4628      	mov	r0, r5
 8014c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c7c:	f7ff bc06 	b.w	801448c <__malloc_unlock>
 8014c80:	42a3      	cmp	r3, r4
 8014c82:	d908      	bls.n	8014c96 <_free_r+0x42>
 8014c84:	6820      	ldr	r0, [r4, #0]
 8014c86:	1821      	adds	r1, r4, r0
 8014c88:	428b      	cmp	r3, r1
 8014c8a:	bf01      	itttt	eq
 8014c8c:	6819      	ldreq	r1, [r3, #0]
 8014c8e:	685b      	ldreq	r3, [r3, #4]
 8014c90:	1809      	addeq	r1, r1, r0
 8014c92:	6021      	streq	r1, [r4, #0]
 8014c94:	e7ed      	b.n	8014c72 <_free_r+0x1e>
 8014c96:	461a      	mov	r2, r3
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	b10b      	cbz	r3, 8014ca0 <_free_r+0x4c>
 8014c9c:	42a3      	cmp	r3, r4
 8014c9e:	d9fa      	bls.n	8014c96 <_free_r+0x42>
 8014ca0:	6811      	ldr	r1, [r2, #0]
 8014ca2:	1850      	adds	r0, r2, r1
 8014ca4:	42a0      	cmp	r0, r4
 8014ca6:	d10b      	bne.n	8014cc0 <_free_r+0x6c>
 8014ca8:	6820      	ldr	r0, [r4, #0]
 8014caa:	4401      	add	r1, r0
 8014cac:	1850      	adds	r0, r2, r1
 8014cae:	4283      	cmp	r3, r0
 8014cb0:	6011      	str	r1, [r2, #0]
 8014cb2:	d1e0      	bne.n	8014c76 <_free_r+0x22>
 8014cb4:	6818      	ldr	r0, [r3, #0]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	6053      	str	r3, [r2, #4]
 8014cba:	4408      	add	r0, r1
 8014cbc:	6010      	str	r0, [r2, #0]
 8014cbe:	e7da      	b.n	8014c76 <_free_r+0x22>
 8014cc0:	d902      	bls.n	8014cc8 <_free_r+0x74>
 8014cc2:	230c      	movs	r3, #12
 8014cc4:	602b      	str	r3, [r5, #0]
 8014cc6:	e7d6      	b.n	8014c76 <_free_r+0x22>
 8014cc8:	6820      	ldr	r0, [r4, #0]
 8014cca:	1821      	adds	r1, r4, r0
 8014ccc:	428b      	cmp	r3, r1
 8014cce:	bf04      	itt	eq
 8014cd0:	6819      	ldreq	r1, [r3, #0]
 8014cd2:	685b      	ldreq	r3, [r3, #4]
 8014cd4:	6063      	str	r3, [r4, #4]
 8014cd6:	bf04      	itt	eq
 8014cd8:	1809      	addeq	r1, r1, r0
 8014cda:	6021      	streq	r1, [r4, #0]
 8014cdc:	6054      	str	r4, [r2, #4]
 8014cde:	e7ca      	b.n	8014c76 <_free_r+0x22>
 8014ce0:	bd38      	pop	{r3, r4, r5, pc}
 8014ce2:	bf00      	nop
 8014ce4:	2000f780 	.word	0x2000f780

08014ce8 <__ssputs_r>:
 8014ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cec:	688e      	ldr	r6, [r1, #8]
 8014cee:	461f      	mov	r7, r3
 8014cf0:	42be      	cmp	r6, r7
 8014cf2:	680b      	ldr	r3, [r1, #0]
 8014cf4:	4682      	mov	sl, r0
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	4690      	mov	r8, r2
 8014cfa:	d82d      	bhi.n	8014d58 <__ssputs_r+0x70>
 8014cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014d04:	d026      	beq.n	8014d54 <__ssputs_r+0x6c>
 8014d06:	6965      	ldr	r5, [r4, #20]
 8014d08:	6909      	ldr	r1, [r1, #16]
 8014d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d0e:	eba3 0901 	sub.w	r9, r3, r1
 8014d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d16:	1c7b      	adds	r3, r7, #1
 8014d18:	444b      	add	r3, r9
 8014d1a:	106d      	asrs	r5, r5, #1
 8014d1c:	429d      	cmp	r5, r3
 8014d1e:	bf38      	it	cc
 8014d20:	461d      	movcc	r5, r3
 8014d22:	0553      	lsls	r3, r2, #21
 8014d24:	d527      	bpl.n	8014d76 <__ssputs_r+0x8e>
 8014d26:	4629      	mov	r1, r5
 8014d28:	f7ff fb2a 	bl	8014380 <_malloc_r>
 8014d2c:	4606      	mov	r6, r0
 8014d2e:	b360      	cbz	r0, 8014d8a <__ssputs_r+0xa2>
 8014d30:	6921      	ldr	r1, [r4, #16]
 8014d32:	464a      	mov	r2, r9
 8014d34:	f7ff ff61 	bl	8014bfa <memcpy>
 8014d38:	89a3      	ldrh	r3, [r4, #12]
 8014d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d42:	81a3      	strh	r3, [r4, #12]
 8014d44:	6126      	str	r6, [r4, #16]
 8014d46:	6165      	str	r5, [r4, #20]
 8014d48:	444e      	add	r6, r9
 8014d4a:	eba5 0509 	sub.w	r5, r5, r9
 8014d4e:	6026      	str	r6, [r4, #0]
 8014d50:	60a5      	str	r5, [r4, #8]
 8014d52:	463e      	mov	r6, r7
 8014d54:	42be      	cmp	r6, r7
 8014d56:	d900      	bls.n	8014d5a <__ssputs_r+0x72>
 8014d58:	463e      	mov	r6, r7
 8014d5a:	6820      	ldr	r0, [r4, #0]
 8014d5c:	4632      	mov	r2, r6
 8014d5e:	4641      	mov	r1, r8
 8014d60:	f7ff fe86 	bl	8014a70 <memmove>
 8014d64:	68a3      	ldr	r3, [r4, #8]
 8014d66:	1b9b      	subs	r3, r3, r6
 8014d68:	60a3      	str	r3, [r4, #8]
 8014d6a:	6823      	ldr	r3, [r4, #0]
 8014d6c:	4433      	add	r3, r6
 8014d6e:	6023      	str	r3, [r4, #0]
 8014d70:	2000      	movs	r0, #0
 8014d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d76:	462a      	mov	r2, r5
 8014d78:	f000 fd25 	bl	80157c6 <_realloc_r>
 8014d7c:	4606      	mov	r6, r0
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	d1e0      	bne.n	8014d44 <__ssputs_r+0x5c>
 8014d82:	6921      	ldr	r1, [r4, #16]
 8014d84:	4650      	mov	r0, sl
 8014d86:	f7ff ff65 	bl	8014c54 <_free_r>
 8014d8a:	230c      	movs	r3, #12
 8014d8c:	f8ca 3000 	str.w	r3, [sl]
 8014d90:	89a3      	ldrh	r3, [r4, #12]
 8014d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d96:	81a3      	strh	r3, [r4, #12]
 8014d98:	f04f 30ff 	mov.w	r0, #4294967295
 8014d9c:	e7e9      	b.n	8014d72 <__ssputs_r+0x8a>
	...

08014da0 <_svfiprintf_r>:
 8014da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da4:	4698      	mov	r8, r3
 8014da6:	898b      	ldrh	r3, [r1, #12]
 8014da8:	061b      	lsls	r3, r3, #24
 8014daa:	b09d      	sub	sp, #116	@ 0x74
 8014dac:	4607      	mov	r7, r0
 8014dae:	460d      	mov	r5, r1
 8014db0:	4614      	mov	r4, r2
 8014db2:	d510      	bpl.n	8014dd6 <_svfiprintf_r+0x36>
 8014db4:	690b      	ldr	r3, [r1, #16]
 8014db6:	b973      	cbnz	r3, 8014dd6 <_svfiprintf_r+0x36>
 8014db8:	2140      	movs	r1, #64	@ 0x40
 8014dba:	f7ff fae1 	bl	8014380 <_malloc_r>
 8014dbe:	6028      	str	r0, [r5, #0]
 8014dc0:	6128      	str	r0, [r5, #16]
 8014dc2:	b930      	cbnz	r0, 8014dd2 <_svfiprintf_r+0x32>
 8014dc4:	230c      	movs	r3, #12
 8014dc6:	603b      	str	r3, [r7, #0]
 8014dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dcc:	b01d      	add	sp, #116	@ 0x74
 8014dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd2:	2340      	movs	r3, #64	@ 0x40
 8014dd4:	616b      	str	r3, [r5, #20]
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dda:	2320      	movs	r3, #32
 8014ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8014de4:	2330      	movs	r3, #48	@ 0x30
 8014de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014f84 <_svfiprintf_r+0x1e4>
 8014dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014dee:	f04f 0901 	mov.w	r9, #1
 8014df2:	4623      	mov	r3, r4
 8014df4:	469a      	mov	sl, r3
 8014df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dfa:	b10a      	cbz	r2, 8014e00 <_svfiprintf_r+0x60>
 8014dfc:	2a25      	cmp	r2, #37	@ 0x25
 8014dfe:	d1f9      	bne.n	8014df4 <_svfiprintf_r+0x54>
 8014e00:	ebba 0b04 	subs.w	fp, sl, r4
 8014e04:	d00b      	beq.n	8014e1e <_svfiprintf_r+0x7e>
 8014e06:	465b      	mov	r3, fp
 8014e08:	4622      	mov	r2, r4
 8014e0a:	4629      	mov	r1, r5
 8014e0c:	4638      	mov	r0, r7
 8014e0e:	f7ff ff6b 	bl	8014ce8 <__ssputs_r>
 8014e12:	3001      	adds	r0, #1
 8014e14:	f000 80a7 	beq.w	8014f66 <_svfiprintf_r+0x1c6>
 8014e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e1a:	445a      	add	r2, fp
 8014e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f000 809f 	beq.w	8014f66 <_svfiprintf_r+0x1c6>
 8014e28:	2300      	movs	r3, #0
 8014e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e32:	f10a 0a01 	add.w	sl, sl, #1
 8014e36:	9304      	str	r3, [sp, #16]
 8014e38:	9307      	str	r3, [sp, #28]
 8014e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e40:	4654      	mov	r4, sl
 8014e42:	2205      	movs	r2, #5
 8014e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e48:	484e      	ldr	r0, [pc, #312]	@ (8014f84 <_svfiprintf_r+0x1e4>)
 8014e4a:	f7eb fa11 	bl	8000270 <memchr>
 8014e4e:	9a04      	ldr	r2, [sp, #16]
 8014e50:	b9d8      	cbnz	r0, 8014e8a <_svfiprintf_r+0xea>
 8014e52:	06d0      	lsls	r0, r2, #27
 8014e54:	bf44      	itt	mi
 8014e56:	2320      	movmi	r3, #32
 8014e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e5c:	0711      	lsls	r1, r2, #28
 8014e5e:	bf44      	itt	mi
 8014e60:	232b      	movmi	r3, #43	@ 0x2b
 8014e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e66:	f89a 3000 	ldrb.w	r3, [sl]
 8014e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e6c:	d015      	beq.n	8014e9a <_svfiprintf_r+0xfa>
 8014e6e:	9a07      	ldr	r2, [sp, #28]
 8014e70:	4654      	mov	r4, sl
 8014e72:	2000      	movs	r0, #0
 8014e74:	f04f 0c0a 	mov.w	ip, #10
 8014e78:	4621      	mov	r1, r4
 8014e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e7e:	3b30      	subs	r3, #48	@ 0x30
 8014e80:	2b09      	cmp	r3, #9
 8014e82:	d94b      	bls.n	8014f1c <_svfiprintf_r+0x17c>
 8014e84:	b1b0      	cbz	r0, 8014eb4 <_svfiprintf_r+0x114>
 8014e86:	9207      	str	r2, [sp, #28]
 8014e88:	e014      	b.n	8014eb4 <_svfiprintf_r+0x114>
 8014e8a:	eba0 0308 	sub.w	r3, r0, r8
 8014e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8014e92:	4313      	orrs	r3, r2
 8014e94:	9304      	str	r3, [sp, #16]
 8014e96:	46a2      	mov	sl, r4
 8014e98:	e7d2      	b.n	8014e40 <_svfiprintf_r+0xa0>
 8014e9a:	9b03      	ldr	r3, [sp, #12]
 8014e9c:	1d19      	adds	r1, r3, #4
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	9103      	str	r1, [sp, #12]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	bfbb      	ittet	lt
 8014ea6:	425b      	neglt	r3, r3
 8014ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8014eac:	9307      	strge	r3, [sp, #28]
 8014eae:	9307      	strlt	r3, [sp, #28]
 8014eb0:	bfb8      	it	lt
 8014eb2:	9204      	strlt	r2, [sp, #16]
 8014eb4:	7823      	ldrb	r3, [r4, #0]
 8014eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8014eb8:	d10a      	bne.n	8014ed0 <_svfiprintf_r+0x130>
 8014eba:	7863      	ldrb	r3, [r4, #1]
 8014ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ebe:	d132      	bne.n	8014f26 <_svfiprintf_r+0x186>
 8014ec0:	9b03      	ldr	r3, [sp, #12]
 8014ec2:	1d1a      	adds	r2, r3, #4
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	9203      	str	r2, [sp, #12]
 8014ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ecc:	3402      	adds	r4, #2
 8014ece:	9305      	str	r3, [sp, #20]
 8014ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014f94 <_svfiprintf_r+0x1f4>
 8014ed4:	7821      	ldrb	r1, [r4, #0]
 8014ed6:	2203      	movs	r2, #3
 8014ed8:	4650      	mov	r0, sl
 8014eda:	f7eb f9c9 	bl	8000270 <memchr>
 8014ede:	b138      	cbz	r0, 8014ef0 <_svfiprintf_r+0x150>
 8014ee0:	9b04      	ldr	r3, [sp, #16]
 8014ee2:	eba0 000a 	sub.w	r0, r0, sl
 8014ee6:	2240      	movs	r2, #64	@ 0x40
 8014ee8:	4082      	lsls	r2, r0
 8014eea:	4313      	orrs	r3, r2
 8014eec:	3401      	adds	r4, #1
 8014eee:	9304      	str	r3, [sp, #16]
 8014ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ef4:	4824      	ldr	r0, [pc, #144]	@ (8014f88 <_svfiprintf_r+0x1e8>)
 8014ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014efa:	2206      	movs	r2, #6
 8014efc:	f7eb f9b8 	bl	8000270 <memchr>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	d036      	beq.n	8014f72 <_svfiprintf_r+0x1d2>
 8014f04:	4b21      	ldr	r3, [pc, #132]	@ (8014f8c <_svfiprintf_r+0x1ec>)
 8014f06:	bb1b      	cbnz	r3, 8014f50 <_svfiprintf_r+0x1b0>
 8014f08:	9b03      	ldr	r3, [sp, #12]
 8014f0a:	3307      	adds	r3, #7
 8014f0c:	f023 0307 	bic.w	r3, r3, #7
 8014f10:	3308      	adds	r3, #8
 8014f12:	9303      	str	r3, [sp, #12]
 8014f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f16:	4433      	add	r3, r6
 8014f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f1a:	e76a      	b.n	8014df2 <_svfiprintf_r+0x52>
 8014f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f20:	460c      	mov	r4, r1
 8014f22:	2001      	movs	r0, #1
 8014f24:	e7a8      	b.n	8014e78 <_svfiprintf_r+0xd8>
 8014f26:	2300      	movs	r3, #0
 8014f28:	3401      	adds	r4, #1
 8014f2a:	9305      	str	r3, [sp, #20]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	f04f 0c0a 	mov.w	ip, #10
 8014f32:	4620      	mov	r0, r4
 8014f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f38:	3a30      	subs	r2, #48	@ 0x30
 8014f3a:	2a09      	cmp	r2, #9
 8014f3c:	d903      	bls.n	8014f46 <_svfiprintf_r+0x1a6>
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d0c6      	beq.n	8014ed0 <_svfiprintf_r+0x130>
 8014f42:	9105      	str	r1, [sp, #20]
 8014f44:	e7c4      	b.n	8014ed0 <_svfiprintf_r+0x130>
 8014f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e7f0      	b.n	8014f32 <_svfiprintf_r+0x192>
 8014f50:	ab03      	add	r3, sp, #12
 8014f52:	9300      	str	r3, [sp, #0]
 8014f54:	462a      	mov	r2, r5
 8014f56:	4b0e      	ldr	r3, [pc, #56]	@ (8014f90 <_svfiprintf_r+0x1f0>)
 8014f58:	a904      	add	r1, sp, #16
 8014f5a:	4638      	mov	r0, r7
 8014f5c:	f3af 8000 	nop.w
 8014f60:	1c42      	adds	r2, r0, #1
 8014f62:	4606      	mov	r6, r0
 8014f64:	d1d6      	bne.n	8014f14 <_svfiprintf_r+0x174>
 8014f66:	89ab      	ldrh	r3, [r5, #12]
 8014f68:	065b      	lsls	r3, r3, #25
 8014f6a:	f53f af2d 	bmi.w	8014dc8 <_svfiprintf_r+0x28>
 8014f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f70:	e72c      	b.n	8014dcc <_svfiprintf_r+0x2c>
 8014f72:	ab03      	add	r3, sp, #12
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	462a      	mov	r2, r5
 8014f78:	4b05      	ldr	r3, [pc, #20]	@ (8014f90 <_svfiprintf_r+0x1f0>)
 8014f7a:	a904      	add	r1, sp, #16
 8014f7c:	4638      	mov	r0, r7
 8014f7e:	f000 f9bb 	bl	80152f8 <_printf_i>
 8014f82:	e7ed      	b.n	8014f60 <_svfiprintf_r+0x1c0>
 8014f84:	0801820d 	.word	0x0801820d
 8014f88:	08018217 	.word	0x08018217
 8014f8c:	00000000 	.word	0x00000000
 8014f90:	08014ce9 	.word	0x08014ce9
 8014f94:	08018213 	.word	0x08018213

08014f98 <__sfputc_r>:
 8014f98:	6893      	ldr	r3, [r2, #8]
 8014f9a:	3b01      	subs	r3, #1
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	b410      	push	{r4}
 8014fa0:	6093      	str	r3, [r2, #8]
 8014fa2:	da08      	bge.n	8014fb6 <__sfputc_r+0x1e>
 8014fa4:	6994      	ldr	r4, [r2, #24]
 8014fa6:	42a3      	cmp	r3, r4
 8014fa8:	db01      	blt.n	8014fae <__sfputc_r+0x16>
 8014faa:	290a      	cmp	r1, #10
 8014fac:	d103      	bne.n	8014fb6 <__sfputc_r+0x1e>
 8014fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fb2:	f7ff bcb9 	b.w	8014928 <__swbuf_r>
 8014fb6:	6813      	ldr	r3, [r2, #0]
 8014fb8:	1c58      	adds	r0, r3, #1
 8014fba:	6010      	str	r0, [r2, #0]
 8014fbc:	7019      	strb	r1, [r3, #0]
 8014fbe:	4608      	mov	r0, r1
 8014fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fc4:	4770      	bx	lr

08014fc6 <__sfputs_r>:
 8014fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fc8:	4606      	mov	r6, r0
 8014fca:	460f      	mov	r7, r1
 8014fcc:	4614      	mov	r4, r2
 8014fce:	18d5      	adds	r5, r2, r3
 8014fd0:	42ac      	cmp	r4, r5
 8014fd2:	d101      	bne.n	8014fd8 <__sfputs_r+0x12>
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	e007      	b.n	8014fe8 <__sfputs_r+0x22>
 8014fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fdc:	463a      	mov	r2, r7
 8014fde:	4630      	mov	r0, r6
 8014fe0:	f7ff ffda 	bl	8014f98 <__sfputc_r>
 8014fe4:	1c43      	adds	r3, r0, #1
 8014fe6:	d1f3      	bne.n	8014fd0 <__sfputs_r+0xa>
 8014fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014fec <_vfiprintf_r>:
 8014fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff0:	460d      	mov	r5, r1
 8014ff2:	b09d      	sub	sp, #116	@ 0x74
 8014ff4:	4614      	mov	r4, r2
 8014ff6:	4698      	mov	r8, r3
 8014ff8:	4606      	mov	r6, r0
 8014ffa:	b118      	cbz	r0, 8015004 <_vfiprintf_r+0x18>
 8014ffc:	6a03      	ldr	r3, [r0, #32]
 8014ffe:	b90b      	cbnz	r3, 8015004 <_vfiprintf_r+0x18>
 8015000:	f7ff fb14 	bl	801462c <__sinit>
 8015004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015006:	07d9      	lsls	r1, r3, #31
 8015008:	d405      	bmi.n	8015016 <_vfiprintf_r+0x2a>
 801500a:	89ab      	ldrh	r3, [r5, #12]
 801500c:	059a      	lsls	r2, r3, #22
 801500e:	d402      	bmi.n	8015016 <_vfiprintf_r+0x2a>
 8015010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015012:	f7ff fdf0 	bl	8014bf6 <__retarget_lock_acquire_recursive>
 8015016:	89ab      	ldrh	r3, [r5, #12]
 8015018:	071b      	lsls	r3, r3, #28
 801501a:	d501      	bpl.n	8015020 <_vfiprintf_r+0x34>
 801501c:	692b      	ldr	r3, [r5, #16]
 801501e:	b99b      	cbnz	r3, 8015048 <_vfiprintf_r+0x5c>
 8015020:	4629      	mov	r1, r5
 8015022:	4630      	mov	r0, r6
 8015024:	f7ff fcbe 	bl	80149a4 <__swsetup_r>
 8015028:	b170      	cbz	r0, 8015048 <_vfiprintf_r+0x5c>
 801502a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801502c:	07dc      	lsls	r4, r3, #31
 801502e:	d504      	bpl.n	801503a <_vfiprintf_r+0x4e>
 8015030:	f04f 30ff 	mov.w	r0, #4294967295
 8015034:	b01d      	add	sp, #116	@ 0x74
 8015036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503a:	89ab      	ldrh	r3, [r5, #12]
 801503c:	0598      	lsls	r0, r3, #22
 801503e:	d4f7      	bmi.n	8015030 <_vfiprintf_r+0x44>
 8015040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015042:	f7ff fdd9 	bl	8014bf8 <__retarget_lock_release_recursive>
 8015046:	e7f3      	b.n	8015030 <_vfiprintf_r+0x44>
 8015048:	2300      	movs	r3, #0
 801504a:	9309      	str	r3, [sp, #36]	@ 0x24
 801504c:	2320      	movs	r3, #32
 801504e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015052:	f8cd 800c 	str.w	r8, [sp, #12]
 8015056:	2330      	movs	r3, #48	@ 0x30
 8015058:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015208 <_vfiprintf_r+0x21c>
 801505c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015060:	f04f 0901 	mov.w	r9, #1
 8015064:	4623      	mov	r3, r4
 8015066:	469a      	mov	sl, r3
 8015068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801506c:	b10a      	cbz	r2, 8015072 <_vfiprintf_r+0x86>
 801506e:	2a25      	cmp	r2, #37	@ 0x25
 8015070:	d1f9      	bne.n	8015066 <_vfiprintf_r+0x7a>
 8015072:	ebba 0b04 	subs.w	fp, sl, r4
 8015076:	d00b      	beq.n	8015090 <_vfiprintf_r+0xa4>
 8015078:	465b      	mov	r3, fp
 801507a:	4622      	mov	r2, r4
 801507c:	4629      	mov	r1, r5
 801507e:	4630      	mov	r0, r6
 8015080:	f7ff ffa1 	bl	8014fc6 <__sfputs_r>
 8015084:	3001      	adds	r0, #1
 8015086:	f000 80a7 	beq.w	80151d8 <_vfiprintf_r+0x1ec>
 801508a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801508c:	445a      	add	r2, fp
 801508e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015090:	f89a 3000 	ldrb.w	r3, [sl]
 8015094:	2b00      	cmp	r3, #0
 8015096:	f000 809f 	beq.w	80151d8 <_vfiprintf_r+0x1ec>
 801509a:	2300      	movs	r3, #0
 801509c:	f04f 32ff 	mov.w	r2, #4294967295
 80150a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150a4:	f10a 0a01 	add.w	sl, sl, #1
 80150a8:	9304      	str	r3, [sp, #16]
 80150aa:	9307      	str	r3, [sp, #28]
 80150ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80150b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80150b2:	4654      	mov	r4, sl
 80150b4:	2205      	movs	r2, #5
 80150b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ba:	4853      	ldr	r0, [pc, #332]	@ (8015208 <_vfiprintf_r+0x21c>)
 80150bc:	f7eb f8d8 	bl	8000270 <memchr>
 80150c0:	9a04      	ldr	r2, [sp, #16]
 80150c2:	b9d8      	cbnz	r0, 80150fc <_vfiprintf_r+0x110>
 80150c4:	06d1      	lsls	r1, r2, #27
 80150c6:	bf44      	itt	mi
 80150c8:	2320      	movmi	r3, #32
 80150ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150ce:	0713      	lsls	r3, r2, #28
 80150d0:	bf44      	itt	mi
 80150d2:	232b      	movmi	r3, #43	@ 0x2b
 80150d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150d8:	f89a 3000 	ldrb.w	r3, [sl]
 80150dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80150de:	d015      	beq.n	801510c <_vfiprintf_r+0x120>
 80150e0:	9a07      	ldr	r2, [sp, #28]
 80150e2:	4654      	mov	r4, sl
 80150e4:	2000      	movs	r0, #0
 80150e6:	f04f 0c0a 	mov.w	ip, #10
 80150ea:	4621      	mov	r1, r4
 80150ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150f0:	3b30      	subs	r3, #48	@ 0x30
 80150f2:	2b09      	cmp	r3, #9
 80150f4:	d94b      	bls.n	801518e <_vfiprintf_r+0x1a2>
 80150f6:	b1b0      	cbz	r0, 8015126 <_vfiprintf_r+0x13a>
 80150f8:	9207      	str	r2, [sp, #28]
 80150fa:	e014      	b.n	8015126 <_vfiprintf_r+0x13a>
 80150fc:	eba0 0308 	sub.w	r3, r0, r8
 8015100:	fa09 f303 	lsl.w	r3, r9, r3
 8015104:	4313      	orrs	r3, r2
 8015106:	9304      	str	r3, [sp, #16]
 8015108:	46a2      	mov	sl, r4
 801510a:	e7d2      	b.n	80150b2 <_vfiprintf_r+0xc6>
 801510c:	9b03      	ldr	r3, [sp, #12]
 801510e:	1d19      	adds	r1, r3, #4
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	9103      	str	r1, [sp, #12]
 8015114:	2b00      	cmp	r3, #0
 8015116:	bfbb      	ittet	lt
 8015118:	425b      	neglt	r3, r3
 801511a:	f042 0202 	orrlt.w	r2, r2, #2
 801511e:	9307      	strge	r3, [sp, #28]
 8015120:	9307      	strlt	r3, [sp, #28]
 8015122:	bfb8      	it	lt
 8015124:	9204      	strlt	r2, [sp, #16]
 8015126:	7823      	ldrb	r3, [r4, #0]
 8015128:	2b2e      	cmp	r3, #46	@ 0x2e
 801512a:	d10a      	bne.n	8015142 <_vfiprintf_r+0x156>
 801512c:	7863      	ldrb	r3, [r4, #1]
 801512e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015130:	d132      	bne.n	8015198 <_vfiprintf_r+0x1ac>
 8015132:	9b03      	ldr	r3, [sp, #12]
 8015134:	1d1a      	adds	r2, r3, #4
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	9203      	str	r2, [sp, #12]
 801513a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801513e:	3402      	adds	r4, #2
 8015140:	9305      	str	r3, [sp, #20]
 8015142:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015218 <_vfiprintf_r+0x22c>
 8015146:	7821      	ldrb	r1, [r4, #0]
 8015148:	2203      	movs	r2, #3
 801514a:	4650      	mov	r0, sl
 801514c:	f7eb f890 	bl	8000270 <memchr>
 8015150:	b138      	cbz	r0, 8015162 <_vfiprintf_r+0x176>
 8015152:	9b04      	ldr	r3, [sp, #16]
 8015154:	eba0 000a 	sub.w	r0, r0, sl
 8015158:	2240      	movs	r2, #64	@ 0x40
 801515a:	4082      	lsls	r2, r0
 801515c:	4313      	orrs	r3, r2
 801515e:	3401      	adds	r4, #1
 8015160:	9304      	str	r3, [sp, #16]
 8015162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015166:	4829      	ldr	r0, [pc, #164]	@ (801520c <_vfiprintf_r+0x220>)
 8015168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801516c:	2206      	movs	r2, #6
 801516e:	f7eb f87f 	bl	8000270 <memchr>
 8015172:	2800      	cmp	r0, #0
 8015174:	d03f      	beq.n	80151f6 <_vfiprintf_r+0x20a>
 8015176:	4b26      	ldr	r3, [pc, #152]	@ (8015210 <_vfiprintf_r+0x224>)
 8015178:	bb1b      	cbnz	r3, 80151c2 <_vfiprintf_r+0x1d6>
 801517a:	9b03      	ldr	r3, [sp, #12]
 801517c:	3307      	adds	r3, #7
 801517e:	f023 0307 	bic.w	r3, r3, #7
 8015182:	3308      	adds	r3, #8
 8015184:	9303      	str	r3, [sp, #12]
 8015186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015188:	443b      	add	r3, r7
 801518a:	9309      	str	r3, [sp, #36]	@ 0x24
 801518c:	e76a      	b.n	8015064 <_vfiprintf_r+0x78>
 801518e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015192:	460c      	mov	r4, r1
 8015194:	2001      	movs	r0, #1
 8015196:	e7a8      	b.n	80150ea <_vfiprintf_r+0xfe>
 8015198:	2300      	movs	r3, #0
 801519a:	3401      	adds	r4, #1
 801519c:	9305      	str	r3, [sp, #20]
 801519e:	4619      	mov	r1, r3
 80151a0:	f04f 0c0a 	mov.w	ip, #10
 80151a4:	4620      	mov	r0, r4
 80151a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151aa:	3a30      	subs	r2, #48	@ 0x30
 80151ac:	2a09      	cmp	r2, #9
 80151ae:	d903      	bls.n	80151b8 <_vfiprintf_r+0x1cc>
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d0c6      	beq.n	8015142 <_vfiprintf_r+0x156>
 80151b4:	9105      	str	r1, [sp, #20]
 80151b6:	e7c4      	b.n	8015142 <_vfiprintf_r+0x156>
 80151b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80151bc:	4604      	mov	r4, r0
 80151be:	2301      	movs	r3, #1
 80151c0:	e7f0      	b.n	80151a4 <_vfiprintf_r+0x1b8>
 80151c2:	ab03      	add	r3, sp, #12
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	462a      	mov	r2, r5
 80151c8:	4b12      	ldr	r3, [pc, #72]	@ (8015214 <_vfiprintf_r+0x228>)
 80151ca:	a904      	add	r1, sp, #16
 80151cc:	4630      	mov	r0, r6
 80151ce:	f3af 8000 	nop.w
 80151d2:	4607      	mov	r7, r0
 80151d4:	1c78      	adds	r0, r7, #1
 80151d6:	d1d6      	bne.n	8015186 <_vfiprintf_r+0x19a>
 80151d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151da:	07d9      	lsls	r1, r3, #31
 80151dc:	d405      	bmi.n	80151ea <_vfiprintf_r+0x1fe>
 80151de:	89ab      	ldrh	r3, [r5, #12]
 80151e0:	059a      	lsls	r2, r3, #22
 80151e2:	d402      	bmi.n	80151ea <_vfiprintf_r+0x1fe>
 80151e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151e6:	f7ff fd07 	bl	8014bf8 <__retarget_lock_release_recursive>
 80151ea:	89ab      	ldrh	r3, [r5, #12]
 80151ec:	065b      	lsls	r3, r3, #25
 80151ee:	f53f af1f 	bmi.w	8015030 <_vfiprintf_r+0x44>
 80151f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151f4:	e71e      	b.n	8015034 <_vfiprintf_r+0x48>
 80151f6:	ab03      	add	r3, sp, #12
 80151f8:	9300      	str	r3, [sp, #0]
 80151fa:	462a      	mov	r2, r5
 80151fc:	4b05      	ldr	r3, [pc, #20]	@ (8015214 <_vfiprintf_r+0x228>)
 80151fe:	a904      	add	r1, sp, #16
 8015200:	4630      	mov	r0, r6
 8015202:	f000 f879 	bl	80152f8 <_printf_i>
 8015206:	e7e4      	b.n	80151d2 <_vfiprintf_r+0x1e6>
 8015208:	0801820d 	.word	0x0801820d
 801520c:	08018217 	.word	0x08018217
 8015210:	00000000 	.word	0x00000000
 8015214:	08014fc7 	.word	0x08014fc7
 8015218:	08018213 	.word	0x08018213

0801521c <_printf_common>:
 801521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015220:	4616      	mov	r6, r2
 8015222:	4698      	mov	r8, r3
 8015224:	688a      	ldr	r2, [r1, #8]
 8015226:	690b      	ldr	r3, [r1, #16]
 8015228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801522c:	4293      	cmp	r3, r2
 801522e:	bfb8      	it	lt
 8015230:	4613      	movlt	r3, r2
 8015232:	6033      	str	r3, [r6, #0]
 8015234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015238:	4607      	mov	r7, r0
 801523a:	460c      	mov	r4, r1
 801523c:	b10a      	cbz	r2, 8015242 <_printf_common+0x26>
 801523e:	3301      	adds	r3, #1
 8015240:	6033      	str	r3, [r6, #0]
 8015242:	6823      	ldr	r3, [r4, #0]
 8015244:	0699      	lsls	r1, r3, #26
 8015246:	bf42      	ittt	mi
 8015248:	6833      	ldrmi	r3, [r6, #0]
 801524a:	3302      	addmi	r3, #2
 801524c:	6033      	strmi	r3, [r6, #0]
 801524e:	6825      	ldr	r5, [r4, #0]
 8015250:	f015 0506 	ands.w	r5, r5, #6
 8015254:	d106      	bne.n	8015264 <_printf_common+0x48>
 8015256:	f104 0a19 	add.w	sl, r4, #25
 801525a:	68e3      	ldr	r3, [r4, #12]
 801525c:	6832      	ldr	r2, [r6, #0]
 801525e:	1a9b      	subs	r3, r3, r2
 8015260:	42ab      	cmp	r3, r5
 8015262:	dc26      	bgt.n	80152b2 <_printf_common+0x96>
 8015264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015268:	6822      	ldr	r2, [r4, #0]
 801526a:	3b00      	subs	r3, #0
 801526c:	bf18      	it	ne
 801526e:	2301      	movne	r3, #1
 8015270:	0692      	lsls	r2, r2, #26
 8015272:	d42b      	bmi.n	80152cc <_printf_common+0xb0>
 8015274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015278:	4641      	mov	r1, r8
 801527a:	4638      	mov	r0, r7
 801527c:	47c8      	blx	r9
 801527e:	3001      	adds	r0, #1
 8015280:	d01e      	beq.n	80152c0 <_printf_common+0xa4>
 8015282:	6823      	ldr	r3, [r4, #0]
 8015284:	6922      	ldr	r2, [r4, #16]
 8015286:	f003 0306 	and.w	r3, r3, #6
 801528a:	2b04      	cmp	r3, #4
 801528c:	bf02      	ittt	eq
 801528e:	68e5      	ldreq	r5, [r4, #12]
 8015290:	6833      	ldreq	r3, [r6, #0]
 8015292:	1aed      	subeq	r5, r5, r3
 8015294:	68a3      	ldr	r3, [r4, #8]
 8015296:	bf0c      	ite	eq
 8015298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801529c:	2500      	movne	r5, #0
 801529e:	4293      	cmp	r3, r2
 80152a0:	bfc4      	itt	gt
 80152a2:	1a9b      	subgt	r3, r3, r2
 80152a4:	18ed      	addgt	r5, r5, r3
 80152a6:	2600      	movs	r6, #0
 80152a8:	341a      	adds	r4, #26
 80152aa:	42b5      	cmp	r5, r6
 80152ac:	d11a      	bne.n	80152e4 <_printf_common+0xc8>
 80152ae:	2000      	movs	r0, #0
 80152b0:	e008      	b.n	80152c4 <_printf_common+0xa8>
 80152b2:	2301      	movs	r3, #1
 80152b4:	4652      	mov	r2, sl
 80152b6:	4641      	mov	r1, r8
 80152b8:	4638      	mov	r0, r7
 80152ba:	47c8      	blx	r9
 80152bc:	3001      	adds	r0, #1
 80152be:	d103      	bne.n	80152c8 <_printf_common+0xac>
 80152c0:	f04f 30ff 	mov.w	r0, #4294967295
 80152c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152c8:	3501      	adds	r5, #1
 80152ca:	e7c6      	b.n	801525a <_printf_common+0x3e>
 80152cc:	18e1      	adds	r1, r4, r3
 80152ce:	1c5a      	adds	r2, r3, #1
 80152d0:	2030      	movs	r0, #48	@ 0x30
 80152d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80152d6:	4422      	add	r2, r4
 80152d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80152dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80152e0:	3302      	adds	r3, #2
 80152e2:	e7c7      	b.n	8015274 <_printf_common+0x58>
 80152e4:	2301      	movs	r3, #1
 80152e6:	4622      	mov	r2, r4
 80152e8:	4641      	mov	r1, r8
 80152ea:	4638      	mov	r0, r7
 80152ec:	47c8      	blx	r9
 80152ee:	3001      	adds	r0, #1
 80152f0:	d0e6      	beq.n	80152c0 <_printf_common+0xa4>
 80152f2:	3601      	adds	r6, #1
 80152f4:	e7d9      	b.n	80152aa <_printf_common+0x8e>
	...

080152f8 <_printf_i>:
 80152f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152fc:	7e0f      	ldrb	r7, [r1, #24]
 80152fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015300:	2f78      	cmp	r7, #120	@ 0x78
 8015302:	4691      	mov	r9, r2
 8015304:	4680      	mov	r8, r0
 8015306:	460c      	mov	r4, r1
 8015308:	469a      	mov	sl, r3
 801530a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801530e:	d807      	bhi.n	8015320 <_printf_i+0x28>
 8015310:	2f62      	cmp	r7, #98	@ 0x62
 8015312:	d80a      	bhi.n	801532a <_printf_i+0x32>
 8015314:	2f00      	cmp	r7, #0
 8015316:	f000 80d1 	beq.w	80154bc <_printf_i+0x1c4>
 801531a:	2f58      	cmp	r7, #88	@ 0x58
 801531c:	f000 80b8 	beq.w	8015490 <_printf_i+0x198>
 8015320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015328:	e03a      	b.n	80153a0 <_printf_i+0xa8>
 801532a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801532e:	2b15      	cmp	r3, #21
 8015330:	d8f6      	bhi.n	8015320 <_printf_i+0x28>
 8015332:	a101      	add	r1, pc, #4	@ (adr r1, 8015338 <_printf_i+0x40>)
 8015334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015338:	08015391 	.word	0x08015391
 801533c:	080153a5 	.word	0x080153a5
 8015340:	08015321 	.word	0x08015321
 8015344:	08015321 	.word	0x08015321
 8015348:	08015321 	.word	0x08015321
 801534c:	08015321 	.word	0x08015321
 8015350:	080153a5 	.word	0x080153a5
 8015354:	08015321 	.word	0x08015321
 8015358:	08015321 	.word	0x08015321
 801535c:	08015321 	.word	0x08015321
 8015360:	08015321 	.word	0x08015321
 8015364:	080154a3 	.word	0x080154a3
 8015368:	080153cf 	.word	0x080153cf
 801536c:	0801545d 	.word	0x0801545d
 8015370:	08015321 	.word	0x08015321
 8015374:	08015321 	.word	0x08015321
 8015378:	080154c5 	.word	0x080154c5
 801537c:	08015321 	.word	0x08015321
 8015380:	080153cf 	.word	0x080153cf
 8015384:	08015321 	.word	0x08015321
 8015388:	08015321 	.word	0x08015321
 801538c:	08015465 	.word	0x08015465
 8015390:	6833      	ldr	r3, [r6, #0]
 8015392:	1d1a      	adds	r2, r3, #4
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	6032      	str	r2, [r6, #0]
 8015398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801539c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80153a0:	2301      	movs	r3, #1
 80153a2:	e09c      	b.n	80154de <_printf_i+0x1e6>
 80153a4:	6833      	ldr	r3, [r6, #0]
 80153a6:	6820      	ldr	r0, [r4, #0]
 80153a8:	1d19      	adds	r1, r3, #4
 80153aa:	6031      	str	r1, [r6, #0]
 80153ac:	0606      	lsls	r6, r0, #24
 80153ae:	d501      	bpl.n	80153b4 <_printf_i+0xbc>
 80153b0:	681d      	ldr	r5, [r3, #0]
 80153b2:	e003      	b.n	80153bc <_printf_i+0xc4>
 80153b4:	0645      	lsls	r5, r0, #25
 80153b6:	d5fb      	bpl.n	80153b0 <_printf_i+0xb8>
 80153b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80153bc:	2d00      	cmp	r5, #0
 80153be:	da03      	bge.n	80153c8 <_printf_i+0xd0>
 80153c0:	232d      	movs	r3, #45	@ 0x2d
 80153c2:	426d      	negs	r5, r5
 80153c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80153c8:	4858      	ldr	r0, [pc, #352]	@ (801552c <_printf_i+0x234>)
 80153ca:	230a      	movs	r3, #10
 80153cc:	e011      	b.n	80153f2 <_printf_i+0xfa>
 80153ce:	6821      	ldr	r1, [r4, #0]
 80153d0:	6833      	ldr	r3, [r6, #0]
 80153d2:	0608      	lsls	r0, r1, #24
 80153d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80153d8:	d402      	bmi.n	80153e0 <_printf_i+0xe8>
 80153da:	0649      	lsls	r1, r1, #25
 80153dc:	bf48      	it	mi
 80153de:	b2ad      	uxthmi	r5, r5
 80153e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80153e2:	4852      	ldr	r0, [pc, #328]	@ (801552c <_printf_i+0x234>)
 80153e4:	6033      	str	r3, [r6, #0]
 80153e6:	bf14      	ite	ne
 80153e8:	230a      	movne	r3, #10
 80153ea:	2308      	moveq	r3, #8
 80153ec:	2100      	movs	r1, #0
 80153ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80153f2:	6866      	ldr	r6, [r4, #4]
 80153f4:	60a6      	str	r6, [r4, #8]
 80153f6:	2e00      	cmp	r6, #0
 80153f8:	db05      	blt.n	8015406 <_printf_i+0x10e>
 80153fa:	6821      	ldr	r1, [r4, #0]
 80153fc:	432e      	orrs	r6, r5
 80153fe:	f021 0104 	bic.w	r1, r1, #4
 8015402:	6021      	str	r1, [r4, #0]
 8015404:	d04b      	beq.n	801549e <_printf_i+0x1a6>
 8015406:	4616      	mov	r6, r2
 8015408:	fbb5 f1f3 	udiv	r1, r5, r3
 801540c:	fb03 5711 	mls	r7, r3, r1, r5
 8015410:	5dc7      	ldrb	r7, [r0, r7]
 8015412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015416:	462f      	mov	r7, r5
 8015418:	42bb      	cmp	r3, r7
 801541a:	460d      	mov	r5, r1
 801541c:	d9f4      	bls.n	8015408 <_printf_i+0x110>
 801541e:	2b08      	cmp	r3, #8
 8015420:	d10b      	bne.n	801543a <_printf_i+0x142>
 8015422:	6823      	ldr	r3, [r4, #0]
 8015424:	07df      	lsls	r7, r3, #31
 8015426:	d508      	bpl.n	801543a <_printf_i+0x142>
 8015428:	6923      	ldr	r3, [r4, #16]
 801542a:	6861      	ldr	r1, [r4, #4]
 801542c:	4299      	cmp	r1, r3
 801542e:	bfde      	ittt	le
 8015430:	2330      	movle	r3, #48	@ 0x30
 8015432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015436:	f106 36ff 	addle.w	r6, r6, #4294967295
 801543a:	1b92      	subs	r2, r2, r6
 801543c:	6122      	str	r2, [r4, #16]
 801543e:	f8cd a000 	str.w	sl, [sp]
 8015442:	464b      	mov	r3, r9
 8015444:	aa03      	add	r2, sp, #12
 8015446:	4621      	mov	r1, r4
 8015448:	4640      	mov	r0, r8
 801544a:	f7ff fee7 	bl	801521c <_printf_common>
 801544e:	3001      	adds	r0, #1
 8015450:	d14a      	bne.n	80154e8 <_printf_i+0x1f0>
 8015452:	f04f 30ff 	mov.w	r0, #4294967295
 8015456:	b004      	add	sp, #16
 8015458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801545c:	6823      	ldr	r3, [r4, #0]
 801545e:	f043 0320 	orr.w	r3, r3, #32
 8015462:	6023      	str	r3, [r4, #0]
 8015464:	4832      	ldr	r0, [pc, #200]	@ (8015530 <_printf_i+0x238>)
 8015466:	2778      	movs	r7, #120	@ 0x78
 8015468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801546c:	6823      	ldr	r3, [r4, #0]
 801546e:	6831      	ldr	r1, [r6, #0]
 8015470:	061f      	lsls	r7, r3, #24
 8015472:	f851 5b04 	ldr.w	r5, [r1], #4
 8015476:	d402      	bmi.n	801547e <_printf_i+0x186>
 8015478:	065f      	lsls	r7, r3, #25
 801547a:	bf48      	it	mi
 801547c:	b2ad      	uxthmi	r5, r5
 801547e:	6031      	str	r1, [r6, #0]
 8015480:	07d9      	lsls	r1, r3, #31
 8015482:	bf44      	itt	mi
 8015484:	f043 0320 	orrmi.w	r3, r3, #32
 8015488:	6023      	strmi	r3, [r4, #0]
 801548a:	b11d      	cbz	r5, 8015494 <_printf_i+0x19c>
 801548c:	2310      	movs	r3, #16
 801548e:	e7ad      	b.n	80153ec <_printf_i+0xf4>
 8015490:	4826      	ldr	r0, [pc, #152]	@ (801552c <_printf_i+0x234>)
 8015492:	e7e9      	b.n	8015468 <_printf_i+0x170>
 8015494:	6823      	ldr	r3, [r4, #0]
 8015496:	f023 0320 	bic.w	r3, r3, #32
 801549a:	6023      	str	r3, [r4, #0]
 801549c:	e7f6      	b.n	801548c <_printf_i+0x194>
 801549e:	4616      	mov	r6, r2
 80154a0:	e7bd      	b.n	801541e <_printf_i+0x126>
 80154a2:	6833      	ldr	r3, [r6, #0]
 80154a4:	6825      	ldr	r5, [r4, #0]
 80154a6:	6961      	ldr	r1, [r4, #20]
 80154a8:	1d18      	adds	r0, r3, #4
 80154aa:	6030      	str	r0, [r6, #0]
 80154ac:	062e      	lsls	r6, r5, #24
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	d501      	bpl.n	80154b6 <_printf_i+0x1be>
 80154b2:	6019      	str	r1, [r3, #0]
 80154b4:	e002      	b.n	80154bc <_printf_i+0x1c4>
 80154b6:	0668      	lsls	r0, r5, #25
 80154b8:	d5fb      	bpl.n	80154b2 <_printf_i+0x1ba>
 80154ba:	8019      	strh	r1, [r3, #0]
 80154bc:	2300      	movs	r3, #0
 80154be:	6123      	str	r3, [r4, #16]
 80154c0:	4616      	mov	r6, r2
 80154c2:	e7bc      	b.n	801543e <_printf_i+0x146>
 80154c4:	6833      	ldr	r3, [r6, #0]
 80154c6:	1d1a      	adds	r2, r3, #4
 80154c8:	6032      	str	r2, [r6, #0]
 80154ca:	681e      	ldr	r6, [r3, #0]
 80154cc:	6862      	ldr	r2, [r4, #4]
 80154ce:	2100      	movs	r1, #0
 80154d0:	4630      	mov	r0, r6
 80154d2:	f7ea fecd 	bl	8000270 <memchr>
 80154d6:	b108      	cbz	r0, 80154dc <_printf_i+0x1e4>
 80154d8:	1b80      	subs	r0, r0, r6
 80154da:	6060      	str	r0, [r4, #4]
 80154dc:	6863      	ldr	r3, [r4, #4]
 80154de:	6123      	str	r3, [r4, #16]
 80154e0:	2300      	movs	r3, #0
 80154e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80154e6:	e7aa      	b.n	801543e <_printf_i+0x146>
 80154e8:	6923      	ldr	r3, [r4, #16]
 80154ea:	4632      	mov	r2, r6
 80154ec:	4649      	mov	r1, r9
 80154ee:	4640      	mov	r0, r8
 80154f0:	47d0      	blx	sl
 80154f2:	3001      	adds	r0, #1
 80154f4:	d0ad      	beq.n	8015452 <_printf_i+0x15a>
 80154f6:	6823      	ldr	r3, [r4, #0]
 80154f8:	079b      	lsls	r3, r3, #30
 80154fa:	d413      	bmi.n	8015524 <_printf_i+0x22c>
 80154fc:	68e0      	ldr	r0, [r4, #12]
 80154fe:	9b03      	ldr	r3, [sp, #12]
 8015500:	4298      	cmp	r0, r3
 8015502:	bfb8      	it	lt
 8015504:	4618      	movlt	r0, r3
 8015506:	e7a6      	b.n	8015456 <_printf_i+0x15e>
 8015508:	2301      	movs	r3, #1
 801550a:	4632      	mov	r2, r6
 801550c:	4649      	mov	r1, r9
 801550e:	4640      	mov	r0, r8
 8015510:	47d0      	blx	sl
 8015512:	3001      	adds	r0, #1
 8015514:	d09d      	beq.n	8015452 <_printf_i+0x15a>
 8015516:	3501      	adds	r5, #1
 8015518:	68e3      	ldr	r3, [r4, #12]
 801551a:	9903      	ldr	r1, [sp, #12]
 801551c:	1a5b      	subs	r3, r3, r1
 801551e:	42ab      	cmp	r3, r5
 8015520:	dcf2      	bgt.n	8015508 <_printf_i+0x210>
 8015522:	e7eb      	b.n	80154fc <_printf_i+0x204>
 8015524:	2500      	movs	r5, #0
 8015526:	f104 0619 	add.w	r6, r4, #25
 801552a:	e7f5      	b.n	8015518 <_printf_i+0x220>
 801552c:	0801821e 	.word	0x0801821e
 8015530:	0801822f 	.word	0x0801822f

08015534 <__sflush_r>:
 8015534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553c:	0716      	lsls	r6, r2, #28
 801553e:	4605      	mov	r5, r0
 8015540:	460c      	mov	r4, r1
 8015542:	d454      	bmi.n	80155ee <__sflush_r+0xba>
 8015544:	684b      	ldr	r3, [r1, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	dc02      	bgt.n	8015550 <__sflush_r+0x1c>
 801554a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801554c:	2b00      	cmp	r3, #0
 801554e:	dd48      	ble.n	80155e2 <__sflush_r+0xae>
 8015550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015552:	2e00      	cmp	r6, #0
 8015554:	d045      	beq.n	80155e2 <__sflush_r+0xae>
 8015556:	2300      	movs	r3, #0
 8015558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801555c:	682f      	ldr	r7, [r5, #0]
 801555e:	6a21      	ldr	r1, [r4, #32]
 8015560:	602b      	str	r3, [r5, #0]
 8015562:	d030      	beq.n	80155c6 <__sflush_r+0x92>
 8015564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015566:	89a3      	ldrh	r3, [r4, #12]
 8015568:	0759      	lsls	r1, r3, #29
 801556a:	d505      	bpl.n	8015578 <__sflush_r+0x44>
 801556c:	6863      	ldr	r3, [r4, #4]
 801556e:	1ad2      	subs	r2, r2, r3
 8015570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015572:	b10b      	cbz	r3, 8015578 <__sflush_r+0x44>
 8015574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015576:	1ad2      	subs	r2, r2, r3
 8015578:	2300      	movs	r3, #0
 801557a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801557c:	6a21      	ldr	r1, [r4, #32]
 801557e:	4628      	mov	r0, r5
 8015580:	47b0      	blx	r6
 8015582:	1c43      	adds	r3, r0, #1
 8015584:	89a3      	ldrh	r3, [r4, #12]
 8015586:	d106      	bne.n	8015596 <__sflush_r+0x62>
 8015588:	6829      	ldr	r1, [r5, #0]
 801558a:	291d      	cmp	r1, #29
 801558c:	d82b      	bhi.n	80155e6 <__sflush_r+0xb2>
 801558e:	4a2a      	ldr	r2, [pc, #168]	@ (8015638 <__sflush_r+0x104>)
 8015590:	40ca      	lsrs	r2, r1
 8015592:	07d6      	lsls	r6, r2, #31
 8015594:	d527      	bpl.n	80155e6 <__sflush_r+0xb2>
 8015596:	2200      	movs	r2, #0
 8015598:	6062      	str	r2, [r4, #4]
 801559a:	04d9      	lsls	r1, r3, #19
 801559c:	6922      	ldr	r2, [r4, #16]
 801559e:	6022      	str	r2, [r4, #0]
 80155a0:	d504      	bpl.n	80155ac <__sflush_r+0x78>
 80155a2:	1c42      	adds	r2, r0, #1
 80155a4:	d101      	bne.n	80155aa <__sflush_r+0x76>
 80155a6:	682b      	ldr	r3, [r5, #0]
 80155a8:	b903      	cbnz	r3, 80155ac <__sflush_r+0x78>
 80155aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80155ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155ae:	602f      	str	r7, [r5, #0]
 80155b0:	b1b9      	cbz	r1, 80155e2 <__sflush_r+0xae>
 80155b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80155b6:	4299      	cmp	r1, r3
 80155b8:	d002      	beq.n	80155c0 <__sflush_r+0x8c>
 80155ba:	4628      	mov	r0, r5
 80155bc:	f7ff fb4a 	bl	8014c54 <_free_r>
 80155c0:	2300      	movs	r3, #0
 80155c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80155c4:	e00d      	b.n	80155e2 <__sflush_r+0xae>
 80155c6:	2301      	movs	r3, #1
 80155c8:	4628      	mov	r0, r5
 80155ca:	47b0      	blx	r6
 80155cc:	4602      	mov	r2, r0
 80155ce:	1c50      	adds	r0, r2, #1
 80155d0:	d1c9      	bne.n	8015566 <__sflush_r+0x32>
 80155d2:	682b      	ldr	r3, [r5, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d0c6      	beq.n	8015566 <__sflush_r+0x32>
 80155d8:	2b1d      	cmp	r3, #29
 80155da:	d001      	beq.n	80155e0 <__sflush_r+0xac>
 80155dc:	2b16      	cmp	r3, #22
 80155de:	d11e      	bne.n	801561e <__sflush_r+0xea>
 80155e0:	602f      	str	r7, [r5, #0]
 80155e2:	2000      	movs	r0, #0
 80155e4:	e022      	b.n	801562c <__sflush_r+0xf8>
 80155e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155ea:	b21b      	sxth	r3, r3
 80155ec:	e01b      	b.n	8015626 <__sflush_r+0xf2>
 80155ee:	690f      	ldr	r7, [r1, #16]
 80155f0:	2f00      	cmp	r7, #0
 80155f2:	d0f6      	beq.n	80155e2 <__sflush_r+0xae>
 80155f4:	0793      	lsls	r3, r2, #30
 80155f6:	680e      	ldr	r6, [r1, #0]
 80155f8:	bf08      	it	eq
 80155fa:	694b      	ldreq	r3, [r1, #20]
 80155fc:	600f      	str	r7, [r1, #0]
 80155fe:	bf18      	it	ne
 8015600:	2300      	movne	r3, #0
 8015602:	eba6 0807 	sub.w	r8, r6, r7
 8015606:	608b      	str	r3, [r1, #8]
 8015608:	f1b8 0f00 	cmp.w	r8, #0
 801560c:	dde9      	ble.n	80155e2 <__sflush_r+0xae>
 801560e:	6a21      	ldr	r1, [r4, #32]
 8015610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015612:	4643      	mov	r3, r8
 8015614:	463a      	mov	r2, r7
 8015616:	4628      	mov	r0, r5
 8015618:	47b0      	blx	r6
 801561a:	2800      	cmp	r0, #0
 801561c:	dc08      	bgt.n	8015630 <__sflush_r+0xfc>
 801561e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015626:	81a3      	strh	r3, [r4, #12]
 8015628:	f04f 30ff 	mov.w	r0, #4294967295
 801562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015630:	4407      	add	r7, r0
 8015632:	eba8 0800 	sub.w	r8, r8, r0
 8015636:	e7e7      	b.n	8015608 <__sflush_r+0xd4>
 8015638:	20400001 	.word	0x20400001

0801563c <_fflush_r>:
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	690b      	ldr	r3, [r1, #16]
 8015640:	4605      	mov	r5, r0
 8015642:	460c      	mov	r4, r1
 8015644:	b913      	cbnz	r3, 801564c <_fflush_r+0x10>
 8015646:	2500      	movs	r5, #0
 8015648:	4628      	mov	r0, r5
 801564a:	bd38      	pop	{r3, r4, r5, pc}
 801564c:	b118      	cbz	r0, 8015656 <_fflush_r+0x1a>
 801564e:	6a03      	ldr	r3, [r0, #32]
 8015650:	b90b      	cbnz	r3, 8015656 <_fflush_r+0x1a>
 8015652:	f7fe ffeb 	bl	801462c <__sinit>
 8015656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d0f3      	beq.n	8015646 <_fflush_r+0xa>
 801565e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015660:	07d0      	lsls	r0, r2, #31
 8015662:	d404      	bmi.n	801566e <_fflush_r+0x32>
 8015664:	0599      	lsls	r1, r3, #22
 8015666:	d402      	bmi.n	801566e <_fflush_r+0x32>
 8015668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801566a:	f7ff fac4 	bl	8014bf6 <__retarget_lock_acquire_recursive>
 801566e:	4628      	mov	r0, r5
 8015670:	4621      	mov	r1, r4
 8015672:	f7ff ff5f 	bl	8015534 <__sflush_r>
 8015676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015678:	07da      	lsls	r2, r3, #31
 801567a:	4605      	mov	r5, r0
 801567c:	d4e4      	bmi.n	8015648 <_fflush_r+0xc>
 801567e:	89a3      	ldrh	r3, [r4, #12]
 8015680:	059b      	lsls	r3, r3, #22
 8015682:	d4e1      	bmi.n	8015648 <_fflush_r+0xc>
 8015684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015686:	f7ff fab7 	bl	8014bf8 <__retarget_lock_release_recursive>
 801568a:	e7dd      	b.n	8015648 <_fflush_r+0xc>

0801568c <fiprintf>:
 801568c:	b40e      	push	{r1, r2, r3}
 801568e:	b503      	push	{r0, r1, lr}
 8015690:	4601      	mov	r1, r0
 8015692:	ab03      	add	r3, sp, #12
 8015694:	4805      	ldr	r0, [pc, #20]	@ (80156ac <fiprintf+0x20>)
 8015696:	f853 2b04 	ldr.w	r2, [r3], #4
 801569a:	6800      	ldr	r0, [r0, #0]
 801569c:	9301      	str	r3, [sp, #4]
 801569e:	f7ff fca5 	bl	8014fec <_vfiprintf_r>
 80156a2:	b002      	add	sp, #8
 80156a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80156a8:	b003      	add	sp, #12
 80156aa:	4770      	bx	lr
 80156ac:	20000074 	.word	0x20000074

080156b0 <__swhatbuf_r>:
 80156b0:	b570      	push	{r4, r5, r6, lr}
 80156b2:	460c      	mov	r4, r1
 80156b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156b8:	2900      	cmp	r1, #0
 80156ba:	b096      	sub	sp, #88	@ 0x58
 80156bc:	4615      	mov	r5, r2
 80156be:	461e      	mov	r6, r3
 80156c0:	da0d      	bge.n	80156de <__swhatbuf_r+0x2e>
 80156c2:	89a3      	ldrh	r3, [r4, #12]
 80156c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80156c8:	f04f 0100 	mov.w	r1, #0
 80156cc:	bf14      	ite	ne
 80156ce:	2340      	movne	r3, #64	@ 0x40
 80156d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80156d4:	2000      	movs	r0, #0
 80156d6:	6031      	str	r1, [r6, #0]
 80156d8:	602b      	str	r3, [r5, #0]
 80156da:	b016      	add	sp, #88	@ 0x58
 80156dc:	bd70      	pop	{r4, r5, r6, pc}
 80156de:	466a      	mov	r2, sp
 80156e0:	f000 f848 	bl	8015774 <_fstat_r>
 80156e4:	2800      	cmp	r0, #0
 80156e6:	dbec      	blt.n	80156c2 <__swhatbuf_r+0x12>
 80156e8:	9901      	ldr	r1, [sp, #4]
 80156ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80156ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80156f2:	4259      	negs	r1, r3
 80156f4:	4159      	adcs	r1, r3
 80156f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80156fa:	e7eb      	b.n	80156d4 <__swhatbuf_r+0x24>

080156fc <__smakebuf_r>:
 80156fc:	898b      	ldrh	r3, [r1, #12]
 80156fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015700:	079d      	lsls	r5, r3, #30
 8015702:	4606      	mov	r6, r0
 8015704:	460c      	mov	r4, r1
 8015706:	d507      	bpl.n	8015718 <__smakebuf_r+0x1c>
 8015708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801570c:	6023      	str	r3, [r4, #0]
 801570e:	6123      	str	r3, [r4, #16]
 8015710:	2301      	movs	r3, #1
 8015712:	6163      	str	r3, [r4, #20]
 8015714:	b003      	add	sp, #12
 8015716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015718:	ab01      	add	r3, sp, #4
 801571a:	466a      	mov	r2, sp
 801571c:	f7ff ffc8 	bl	80156b0 <__swhatbuf_r>
 8015720:	9f00      	ldr	r7, [sp, #0]
 8015722:	4605      	mov	r5, r0
 8015724:	4639      	mov	r1, r7
 8015726:	4630      	mov	r0, r6
 8015728:	f7fe fe2a 	bl	8014380 <_malloc_r>
 801572c:	b948      	cbnz	r0, 8015742 <__smakebuf_r+0x46>
 801572e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015732:	059a      	lsls	r2, r3, #22
 8015734:	d4ee      	bmi.n	8015714 <__smakebuf_r+0x18>
 8015736:	f023 0303 	bic.w	r3, r3, #3
 801573a:	f043 0302 	orr.w	r3, r3, #2
 801573e:	81a3      	strh	r3, [r4, #12]
 8015740:	e7e2      	b.n	8015708 <__smakebuf_r+0xc>
 8015742:	89a3      	ldrh	r3, [r4, #12]
 8015744:	6020      	str	r0, [r4, #0]
 8015746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801574a:	81a3      	strh	r3, [r4, #12]
 801574c:	9b01      	ldr	r3, [sp, #4]
 801574e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015752:	b15b      	cbz	r3, 801576c <__smakebuf_r+0x70>
 8015754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015758:	4630      	mov	r0, r6
 801575a:	f000 f81d 	bl	8015798 <_isatty_r>
 801575e:	b128      	cbz	r0, 801576c <__smakebuf_r+0x70>
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	f023 0303 	bic.w	r3, r3, #3
 8015766:	f043 0301 	orr.w	r3, r3, #1
 801576a:	81a3      	strh	r3, [r4, #12]
 801576c:	89a3      	ldrh	r3, [r4, #12]
 801576e:	431d      	orrs	r5, r3
 8015770:	81a5      	strh	r5, [r4, #12]
 8015772:	e7cf      	b.n	8015714 <__smakebuf_r+0x18>

08015774 <_fstat_r>:
 8015774:	b538      	push	{r3, r4, r5, lr}
 8015776:	4d07      	ldr	r5, [pc, #28]	@ (8015794 <_fstat_r+0x20>)
 8015778:	2300      	movs	r3, #0
 801577a:	4604      	mov	r4, r0
 801577c:	4608      	mov	r0, r1
 801577e:	4611      	mov	r1, r2
 8015780:	602b      	str	r3, [r5, #0]
 8015782:	f7ec f894 	bl	80018ae <_fstat>
 8015786:	1c43      	adds	r3, r0, #1
 8015788:	d102      	bne.n	8015790 <_fstat_r+0x1c>
 801578a:	682b      	ldr	r3, [r5, #0]
 801578c:	b103      	cbz	r3, 8015790 <_fstat_r+0x1c>
 801578e:	6023      	str	r3, [r4, #0]
 8015790:	bd38      	pop	{r3, r4, r5, pc}
 8015792:	bf00      	nop
 8015794:	2000f8c0 	.word	0x2000f8c0

08015798 <_isatty_r>:
 8015798:	b538      	push	{r3, r4, r5, lr}
 801579a:	4d06      	ldr	r5, [pc, #24]	@ (80157b4 <_isatty_r+0x1c>)
 801579c:	2300      	movs	r3, #0
 801579e:	4604      	mov	r4, r0
 80157a0:	4608      	mov	r0, r1
 80157a2:	602b      	str	r3, [r5, #0]
 80157a4:	f7ec f888 	bl	80018b8 <_isatty>
 80157a8:	1c43      	adds	r3, r0, #1
 80157aa:	d102      	bne.n	80157b2 <_isatty_r+0x1a>
 80157ac:	682b      	ldr	r3, [r5, #0]
 80157ae:	b103      	cbz	r3, 80157b2 <_isatty_r+0x1a>
 80157b0:	6023      	str	r3, [r4, #0]
 80157b2:	bd38      	pop	{r3, r4, r5, pc}
 80157b4:	2000f8c0 	.word	0x2000f8c0

080157b8 <abort>:
 80157b8:	b508      	push	{r3, lr}
 80157ba:	2006      	movs	r0, #6
 80157bc:	f000 f85a 	bl	8015874 <raise>
 80157c0:	2001      	movs	r0, #1
 80157c2:	f7ec f85d 	bl	8001880 <_exit>

080157c6 <_realloc_r>:
 80157c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157ca:	4607      	mov	r7, r0
 80157cc:	4614      	mov	r4, r2
 80157ce:	460d      	mov	r5, r1
 80157d0:	b921      	cbnz	r1, 80157dc <_realloc_r+0x16>
 80157d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157d6:	4611      	mov	r1, r2
 80157d8:	f7fe bdd2 	b.w	8014380 <_malloc_r>
 80157dc:	b92a      	cbnz	r2, 80157ea <_realloc_r+0x24>
 80157de:	f7ff fa39 	bl	8014c54 <_free_r>
 80157e2:	4625      	mov	r5, r4
 80157e4:	4628      	mov	r0, r5
 80157e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ea:	f000 f85f 	bl	80158ac <_malloc_usable_size_r>
 80157ee:	4284      	cmp	r4, r0
 80157f0:	4606      	mov	r6, r0
 80157f2:	d802      	bhi.n	80157fa <_realloc_r+0x34>
 80157f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80157f8:	d8f4      	bhi.n	80157e4 <_realloc_r+0x1e>
 80157fa:	4621      	mov	r1, r4
 80157fc:	4638      	mov	r0, r7
 80157fe:	f7fe fdbf 	bl	8014380 <_malloc_r>
 8015802:	4680      	mov	r8, r0
 8015804:	b908      	cbnz	r0, 801580a <_realloc_r+0x44>
 8015806:	4645      	mov	r5, r8
 8015808:	e7ec      	b.n	80157e4 <_realloc_r+0x1e>
 801580a:	42b4      	cmp	r4, r6
 801580c:	4622      	mov	r2, r4
 801580e:	4629      	mov	r1, r5
 8015810:	bf28      	it	cs
 8015812:	4632      	movcs	r2, r6
 8015814:	f7ff f9f1 	bl	8014bfa <memcpy>
 8015818:	4629      	mov	r1, r5
 801581a:	4638      	mov	r0, r7
 801581c:	f7ff fa1a 	bl	8014c54 <_free_r>
 8015820:	e7f1      	b.n	8015806 <_realloc_r+0x40>

08015822 <_raise_r>:
 8015822:	291f      	cmp	r1, #31
 8015824:	b538      	push	{r3, r4, r5, lr}
 8015826:	4605      	mov	r5, r0
 8015828:	460c      	mov	r4, r1
 801582a:	d904      	bls.n	8015836 <_raise_r+0x14>
 801582c:	2316      	movs	r3, #22
 801582e:	6003      	str	r3, [r0, #0]
 8015830:	f04f 30ff 	mov.w	r0, #4294967295
 8015834:	bd38      	pop	{r3, r4, r5, pc}
 8015836:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015838:	b112      	cbz	r2, 8015840 <_raise_r+0x1e>
 801583a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801583e:	b94b      	cbnz	r3, 8015854 <_raise_r+0x32>
 8015840:	4628      	mov	r0, r5
 8015842:	f000 f831 	bl	80158a8 <_getpid_r>
 8015846:	4622      	mov	r2, r4
 8015848:	4601      	mov	r1, r0
 801584a:	4628      	mov	r0, r5
 801584c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015850:	f000 b818 	b.w	8015884 <_kill_r>
 8015854:	2b01      	cmp	r3, #1
 8015856:	d00a      	beq.n	801586e <_raise_r+0x4c>
 8015858:	1c59      	adds	r1, r3, #1
 801585a:	d103      	bne.n	8015864 <_raise_r+0x42>
 801585c:	2316      	movs	r3, #22
 801585e:	6003      	str	r3, [r0, #0]
 8015860:	2001      	movs	r0, #1
 8015862:	e7e7      	b.n	8015834 <_raise_r+0x12>
 8015864:	2100      	movs	r1, #0
 8015866:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801586a:	4620      	mov	r0, r4
 801586c:	4798      	blx	r3
 801586e:	2000      	movs	r0, #0
 8015870:	e7e0      	b.n	8015834 <_raise_r+0x12>
	...

08015874 <raise>:
 8015874:	4b02      	ldr	r3, [pc, #8]	@ (8015880 <raise+0xc>)
 8015876:	4601      	mov	r1, r0
 8015878:	6818      	ldr	r0, [r3, #0]
 801587a:	f7ff bfd2 	b.w	8015822 <_raise_r>
 801587e:	bf00      	nop
 8015880:	20000074 	.word	0x20000074

08015884 <_kill_r>:
 8015884:	b538      	push	{r3, r4, r5, lr}
 8015886:	4d07      	ldr	r5, [pc, #28]	@ (80158a4 <_kill_r+0x20>)
 8015888:	2300      	movs	r3, #0
 801588a:	4604      	mov	r4, r0
 801588c:	4608      	mov	r0, r1
 801588e:	4611      	mov	r1, r2
 8015890:	602b      	str	r3, [r5, #0]
 8015892:	f7eb ffed 	bl	8001870 <_kill>
 8015896:	1c43      	adds	r3, r0, #1
 8015898:	d102      	bne.n	80158a0 <_kill_r+0x1c>
 801589a:	682b      	ldr	r3, [r5, #0]
 801589c:	b103      	cbz	r3, 80158a0 <_kill_r+0x1c>
 801589e:	6023      	str	r3, [r4, #0]
 80158a0:	bd38      	pop	{r3, r4, r5, pc}
 80158a2:	bf00      	nop
 80158a4:	2000f8c0 	.word	0x2000f8c0

080158a8 <_getpid_r>:
 80158a8:	f7eb bfe0 	b.w	800186c <_getpid>

080158ac <_malloc_usable_size_r>:
 80158ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158b0:	1f18      	subs	r0, r3, #4
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	bfbc      	itt	lt
 80158b6:	580b      	ldrlt	r3, [r1, r0]
 80158b8:	18c0      	addlt	r0, r0, r3
 80158ba:	4770      	bx	lr

080158bc <_init>:
 80158bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158be:	bf00      	nop
 80158c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158c2:	bc08      	pop	{r3}
 80158c4:	469e      	mov	lr, r3
 80158c6:	4770      	bx	lr

080158c8 <_fini>:
 80158c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ca:	bf00      	nop
 80158cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158ce:	bc08      	pop	{r3}
 80158d0:	469e      	mov	lr, r3
 80158d2:	4770      	bx	lr
