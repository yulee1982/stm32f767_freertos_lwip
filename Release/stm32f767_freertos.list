
stm32f767_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016760  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000790a8  08016960  08016960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808fa08  0808fa08  00093228  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0808fa08  0808fa08  00090a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808fa10  0808fa10  00093228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808fa10  0808fa10  00090a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0808fa14  0808fa14  00090a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000020e8  20000000  0808fa18  00091000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDescripSection 000000a0  200020e8  08091b00  000930e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDescripSection 000000a0  20002188  08091ba0  00093188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f670  20002228  08091c40  00093228  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20011898  08091c40  00093898  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00093228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006b4de  00000000  00000000  00093256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010057  00000000  00000000  000fe734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0002c230  00000000  00000000  0010e78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003048  00000000  00000000  0013a9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00004787  00000000  00000000  0013da03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000444bc  00000000  00000000  0014218a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00062263  00000000  00000000  00186646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00156129  00000000  00000000  001e88a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0033e9d2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009678  00000000  00000000  0033ea18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002228 	.word	0x20002228
 800021c:	00000000 	.word	0x00000000
 8000220:	08016948 	.word	0x08016948

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000222c 	.word	0x2000222c
 800023c:	08016948 	.word	0x08016948

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <prvLedBreathTask>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800061c:	4c0b      	ldr	r4, [pc, #44]	@ (800064c <prvLedBreathTask+0x30>)
 800061e:	2601      	movs	r6, #1
static uint32_t getkeyval(void);
static void keyscan(void);
static void keyproc(void);

void prvLedBreathTask( void * pvParameters )
{
 8000620:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000622:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  for(;;)
  {
    //LL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
    //vTaskDelay(400);
    LL_GPIO_SetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(80);
 8000626:	2050      	movs	r0, #80	@ 0x50
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000628:	61a6      	str	r6, [r4, #24]
 800062a:	f008 fd25 	bl	8009078 <vTaskDelay>
    LL_GPIO_ResetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(80);
 800062e:	2050      	movs	r0, #80	@ 0x50
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000630:	61a5      	str	r5, [r4, #24]
 8000632:	f008 fd21 	bl	8009078 <vTaskDelay>
    LL_GPIO_SetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(80);
 8000636:	2050      	movs	r0, #80	@ 0x50
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000638:	61a6      	str	r6, [r4, #24]
 800063a:	f008 fd1d 	bl	8009078 <vTaskDelay>
    LL_GPIO_ResetOutputPin(LED1_GPIO_PORT, LED1_PIN);
    vTaskDelay(760);
 800063e:	f44f 703e 	mov.w	r0, #760	@ 0x2f8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000642:	61a5      	str	r5, [r4, #24]
 8000644:	f008 fd18 	bl	8009078 <vTaskDelay>
  for(;;)
 8000648:	e7eb      	b.n	8000622 <prvLedBreathTask+0x6>
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400

08000650 <prvButtonTask>:
  }
}
void prvButtonTask( void * pvParameters )
{
 8000650:	e92d 4887 	stmdb	sp!, {r0, r1, r2, r7, fp, lr}
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000654:	4a8d      	ldr	r2, [pc, #564]	@ (800088c <prvButtonTask+0x23c>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800065a:	f8df 8254 	ldr.w	r8, [pc, #596]	@ 80008b0 <prvButtonTask+0x260>
 800065e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000666:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800066e:	9b01      	ldr	r3, [sp, #4]
 8000670:	f8d8 0000 	ldr.w	r0, [r8]
 8000674:	fa91 f3a1 	rbit	r3, r1
 8000678:	fab3 f383 	clz	r3, r3
 800067c:	f04f 0903 	mov.w	r9, #3
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	fa09 f303 	lsl.w	r3, r9, r3
 8000686:	ea20 0303 	bic.w	r3, r0, r3
 800068a:	fa91 f0a1 	rbit	r0, r1
 800068e:	f8c8 3000 	str.w	r3, [r8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000692:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8000696:	fa91 f3a1 	rbit	r3, r1
 800069a:	fab3 f383 	clz	r3, r3
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	fa09 f303 	lsl.w	r3, r9, r3
 80006a4:	ea20 0303 	bic.w	r3, r0, r3
 80006a8:	fa91 f1a1 	rbit	r1, r1
 80006ac:	f8c8 300c 	str.w	r3, [r8, #12]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006b0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80006b2:	4877      	ldr	r0, [pc, #476]	@ (8000890 <prvButtonTask+0x240>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006ba:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80006bc:	22f0      	movs	r2, #240	@ 0xf0
 80006be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80006c4:	9b00      	ldr	r3, [sp, #0]
 80006c6:	6943      	ldr	r3, [r0, #20]
 80006c8:	fa92 f2a2 	rbit	r2, r2
 80006cc:	2102      	movs	r1, #2
 80006ce:	fab2 f282 	clz	r2, r2
 80006d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
{
  keyval = 0;
  prevkeyval = 0;
  keystatus = 0;
  keyscancnt = 0;
  keyflag.keypressed = 0;
 80006d6:	4c6f      	ldr	r4, [pc, #444]	@ (8000894 <prvButtonTask+0x244>)
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
  keyval = 0;
 80006dc:	4e6e      	ldr	r6, [pc, #440]	@ (8000898 <prvButtonTask+0x248>)
  keystatus = 0;
 80006de:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 80008b4 <prvButtonTask+0x264>
            keyflag.keypressed = 1;
            keyval = (KEY_STATUS_DOWN << 8) | tempkeyval;
          }else if(keyscancnt == KEY_TIME_PRESS_START){
            keystatus = KEY_STATUS_PRESS;
            keyflag.keypressed = 1;
            keyval = (KEY_STATUS_PRESS_START << 8) | tempkeyval;
 80006e2:	f240 2101 	movw	r1, #513	@ 0x201
 80006e6:	4313      	orrs	r3, r2
  keyscancnt = 0;
 80006e8:	4d6c      	ldr	r5, [pc, #432]	@ (800089c <prvButtonTask+0x24c>)
  keydoublecnt = 0;
 80006ea:	4f6d      	ldr	r7, [pc, #436]	@ (80008a0 <prvButtonTask+0x250>)
 80006ec:	6143      	str	r3, [r0, #20]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 80006ee:	4b6d      	ldr	r3, [pc, #436]	@ (80008a4 <prvButtonTask+0x254>)
 80006f0:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 80008b8 <prvButtonTask+0x268>
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80006fa:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000702:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	2250      	movs	r2, #80	@ 0x50
 8000706:	4b68      	ldr	r3, [pc, #416]	@ (80008a8 <prvButtonTask+0x258>)
 8000708:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000710:	605a      	str	r2, [r3, #4]
  keyval = 0;
 8000712:	2300      	movs	r3, #0
  prevkeyval = 0;
 8000714:	4a65      	ldr	r2, [pc, #404]	@ (80008ac <prvButtonTask+0x25c>)
  keyval = 0;
 8000716:	6033      	str	r3, [r6, #0]
  prevkeyval = 0;
 8000718:	6013      	str	r3, [r2, #0]
  keystatus = 0;
 800071a:	f8ca 3000 	str.w	r3, [sl]
  keyscancnt = 0;
 800071e:	602b      	str	r3, [r5, #0]
  keyflag.keypressed = 0;
 8000720:	7023      	strb	r3, [r4, #0]
  keyflag.reserved = 0;
 8000722:	70a3      	strb	r3, [r4, #2]
  keyflag.bholdon = 0;
 8000724:	7063      	strb	r3, [r4, #1]
  keydoublecnt = 0;
 8000726:	603b      	str	r3, [r7, #0]
  if(keyflag.keypressed == 0){
 8000728:	7823      	ldrb	r3, [r4, #0]
 800072a:	bb8b      	cbnz	r3, 8000790 <prvButtonTask+0x140>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800072c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  if(LL_GPIO_IsInputPinSet(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN) == 1)
 8000730:	f413 5300 	ands.w	r3, r3, #8192	@ 0x2000
 8000734:	d110      	bne.n	8000758 <prvButtonTask+0x108>
        default:
          //;keyscancnt = 0;
           break;
      }
    }else{
      keyflag.bholdon = 0;
 8000736:	7063      	strb	r3, [r4, #1]
      if(keyscancnt > KEY_TIME_PRESS_START){
 8000738:	6828      	ldr	r0, [r5, #0]
 800073a:	2814      	cmp	r0, #20
 800073c:	f200 8081 	bhi.w	8000842 <prvButtonTask+0x1f2>
        keyflag.keypressed = 1;
        keyval = (KEY_STATUS_LONG_UP << 8) | (keyval & 0x0003);
      }else if(keyscancnt > KEY_TIME_DOWN) {
 8000740:	6828      	ldr	r0, [r5, #0]
 8000742:	2802      	cmp	r0, #2
 8000744:	f240 8085 	bls.w	8000852 <prvButtonTask+0x202>
        keyflag.keypressed = 1;
 8000748:	2001      	movs	r0, #1
 800074a:	7020      	strb	r0, [r4, #0]
        keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x0003);
 800074c:	6830      	ldr	r0, [r6, #0]
 800074e:	f000 0003 	and.w	r0, r0, #3
 8000752:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8000756:	e07b      	b.n	8000850 <prvButtonTask+0x200>
      if (tempkeyval != prevkeyval){
 8000758:	6813      	ldr	r3, [r2, #0]
 800075a:	2b01      	cmp	r3, #1
        if(keyscancnt > KEY_TIME_PRESS_START){
 800075c:	682b      	ldr	r3, [r5, #0]
      if (tempkeyval != prevkeyval){
 800075e:	d04a      	beq.n	80007f6 <prvButtonTask+0x1a6>
        if(keyscancnt > KEY_TIME_PRESS_START){
 8000760:	2b14      	cmp	r3, #20
 8000762:	f04f 0301 	mov.w	r3, #1
 8000766:	d93c      	bls.n	80007e2 <prvButtonTask+0x192>
          keyflag.keypressed = 1;
 8000768:	7023      	strb	r3, [r4, #0]
          keyval = (KEY_STATUS_LONG_UP << 8) | (keyval & 0x00000003);
 800076a:	6833      	ldr	r3, [r6, #0]
 800076c:	f003 0303 	and.w	r3, r3, #3
 8000770:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
          keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x00000003);
 8000774:	6033      	str	r3, [r6, #0]
        keyscancnt = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	602b      	str	r3, [r5, #0]
        keystatus = KEY_STATUS_DOWN;
 800077a:	2301      	movs	r3, #1
 800077c:	f8ca 3000 	str.w	r3, [sl]
      switch(keystatus){
 8000780:	f8da 3000 	ldr.w	r3, [sl]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d03e      	beq.n	8000806 <prvButtonTask+0x1b6>
 8000788:	2b03      	cmp	r3, #3
 800078a:	d04c      	beq.n	8000826 <prvButtonTask+0x1d6>
    tempkeyval |= (1<<0);
 800078c:	2301      	movs	r3, #1
        keydoublecnt--;

      keyscancnt = 0;
      keystatus = KEY_STATUS_NONE;
    }
    prevkeyval = tempkeyval;
 800078e:	6013      	str	r3, [r2, #0]

static void keyproc(void)
{
  //uint32_t tempkeyval;

  if(keyflag.keypressed == 0)
 8000790:	7823      	ldrb	r3, [r4, #0]
 8000792:	b1fb      	cbz	r3, 80007d4 <prvButtonTask+0x184>
    return;
  else
    keyflag.keypressed = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	7023      	strb	r3, [r4, #0]

  if(keyflag.bholdon)
 8000798:	7863      	ldrb	r3, [r4, #1]
 800079a:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 800079e:	b9cb      	cbnz	r3, 80007d4 <prvButtonTask+0x184>
    return;

  switch (keyval)
 80007a0:	6833      	ldr	r3, [r6, #0]
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d06d      	beq.n	8000882 <prvButtonTask+0x232>
 80007a6:	f240 4c01 	movw	ip, #1025	@ 0x401
 80007aa:	4563      	cmp	r3, ip
 80007ac:	d066      	beq.n	800087c <prvButtonTask+0x22c>
 80007ae:	f240 1c01 	movw	ip, #257	@ 0x101
 80007b2:	4563      	cmp	r3, ip
 80007b4:	d10e      	bne.n	80007d4 <prvButtonTask+0x184>
  {
    case KEY_VAL_KEY1_DOWN:
      if(keydoublecnt > 0)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d056      	beq.n	800086a <prvButtonTask+0x21a>
      {
        keydoublecnt = 0; //双击
 80007bc:	6038      	str	r0, [r7, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007be:	f8db 3014 	ldr.w	r3, [fp, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007c2:	0418      	lsls	r0, r3, #16
 80007c4:	43db      	mvns	r3, r3
 80007c6:	f000 4080 	and.w	r0, r0, #1073741824	@ 0x40000000
 80007ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ce:	4303      	orrs	r3, r0
 80007d0:	f8cb 3018 	str.w	r3, [fp, #24]
    vTaskDelay(20);
 80007d4:	2014      	movs	r0, #20
 80007d6:	f008 fc4f 	bl	8009078 <vTaskDelay>
  for(;;)
 80007da:	4a34      	ldr	r2, [pc, #208]	@ (80008ac <prvButtonTask+0x25c>)
 80007dc:	f240 2101 	movw	r1, #513	@ 0x201
 80007e0:	e7a2      	b.n	8000728 <prvButtonTask+0xd8>
        }else if(keyscancnt > KEY_TIME_DOWN){
 80007e2:	6828      	ldr	r0, [r5, #0]
 80007e4:	2802      	cmp	r0, #2
 80007e6:	d9c6      	bls.n	8000776 <prvButtonTask+0x126>
          keyflag.keypressed = 1;
 80007e8:	7023      	strb	r3, [r4, #0]
          keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x00000003);
 80007ea:	6833      	ldr	r3, [r6, #0]
 80007ec:	f003 0303 	and.w	r3, r3, #3
 80007f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007f4:	e7be      	b.n	8000774 <prvButtonTask+0x124>
        if(++keyscancnt == 0){
 80007f6:	3301      	adds	r3, #1
 80007f8:	602b      	str	r3, [r5, #0]
 80007fa:	b913      	cbnz	r3, 8000802 <prvButtonTask+0x1b2>
          keyscancnt = KEY_TIME_PRESS_START + KEY_TIME_PRESS_STEP;
 80007fc:	231a      	movs	r3, #26
 80007fe:	602b      	str	r3, [r5, #0]
 8000800:	e7be      	b.n	8000780 <prvButtonTask+0x130>
        }else if(keyscancnt == KEY_TIME_DOWN){
 8000802:	682b      	ldr	r3, [r5, #0]
 8000804:	e7bc      	b.n	8000780 <prvButtonTask+0x130>
          if(keyscancnt == KEY_TIME_DOWN){
 8000806:	6828      	ldr	r0, [r5, #0]
 8000808:	2802      	cmp	r0, #2
 800080a:	d104      	bne.n	8000816 <prvButtonTask+0x1c6>
            keyflag.keypressed = 1;
 800080c:	7023      	strb	r3, [r4, #0]
            keyval = (KEY_STATUS_DOWN << 8) | tempkeyval;
 800080e:	f240 1301 	movw	r3, #257	@ 0x101
            keyval = (KEY_STATUS_PRESS << 8) | tempkeyval;
 8000812:	6033      	str	r3, [r6, #0]
 8000814:	e7ba      	b.n	800078c <prvButtonTask+0x13c>
          }else if(keyscancnt == KEY_TIME_PRESS_START){
 8000816:	6828      	ldr	r0, [r5, #0]
 8000818:	2814      	cmp	r0, #20
 800081a:	d1b7      	bne.n	800078c <prvButtonTask+0x13c>
            keystatus = KEY_STATUS_PRESS;
 800081c:	f8ca 9000 	str.w	r9, [sl]
            keyflag.keypressed = 1;
 8000820:	7023      	strb	r3, [r4, #0]
            keyval = (KEY_STATUS_PRESS_START << 8) | tempkeyval;
 8000822:	6031      	str	r1, [r6, #0]
 8000824:	e7b2      	b.n	800078c <prvButtonTask+0x13c>
          if(((keyscancnt - KEY_TIME_PRESS_START) % KEY_TIME_PRESS_STEP) == 0){
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	2006      	movs	r0, #6
 800082a:	3b14      	subs	r3, #20
 800082c:	fbb3 fcf0 	udiv	ip, r3, r0
 8000830:	fb00 331c 	mls	r3, r0, ip, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1a9      	bne.n	800078c <prvButtonTask+0x13c>
            keyflag.keypressed = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	7023      	strb	r3, [r4, #0]
            keyval = (KEY_STATUS_PRESS << 8) | tempkeyval;
 800083c:	f240 3301 	movw	r3, #769	@ 0x301
 8000840:	e7e7      	b.n	8000812 <prvButtonTask+0x1c2>
        keyflag.keypressed = 1;
 8000842:	2001      	movs	r0, #1
 8000844:	7020      	strb	r0, [r4, #0]
        keyval = (KEY_STATUS_LONG_UP << 8) | (keyval & 0x0003);
 8000846:	6830      	ldr	r0, [r6, #0]
 8000848:	f000 0003 	and.w	r0, r0, #3
 800084c:	f440 60a0 	orr.w	r0, r0, #1280	@ 0x500
        keyval = (KEY_STATUS_SHORT_UP << 8) | (keyval & 0x0003);
 8000850:	6030      	str	r0, [r6, #0]
      if(keydoublecnt > 0)
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	b110      	cbz	r0, 800085c <prvButtonTask+0x20c>
        keydoublecnt--;
 8000856:	6838      	ldr	r0, [r7, #0]
 8000858:	3801      	subs	r0, #1
 800085a:	6038      	str	r0, [r7, #0]
      keyscancnt = 0;
 800085c:	2000      	movs	r0, #0
 800085e:	6028      	str	r0, [r5, #0]
      keystatus = KEY_STATUS_NONE;
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f8ca 0000 	str.w	r0, [sl]
 8000868:	e791      	b.n	800078e <prvButtonTask+0x13e>
  uint32_t odr = READ_REG(GPIOx->ODR);
 800086a:	f8db 3014 	ldr.w	r3, [fp, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800086e:	0418      	lsls	r0, r3, #16
 8000870:	43db      	mvns	r3, r3
 8000872:	f400 0000 	and.w	r0, r0, #8388608	@ 0x800000
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	e7a8      	b.n	80007ce <prvButtonTask+0x17e>
      //----------------------------------------
      LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
      break;

    case KEY_VAL_KEY1_SHORT_UP:
      keydoublecnt = KEY_TIME_DOUBLEDOWN;
 800087c:	2306      	movs	r3, #6
 800087e:	603b      	str	r3, [r7, #0]
      break;
 8000880:	e7a8      	b.n	80007d4 <prvButtonTask+0x184>

    case KEY_VAL_KEY1_PRESS_START:
      keyflag.bholdon |= 1<<0;
 8000882:	7863      	ldrb	r3, [r4, #1]
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	7063      	strb	r3, [r4, #1]
	  break;
 800088a:	e7a3      	b.n	80007d4 <prvButtonTask+0x184>
 800088c:	40023800 	.word	0x40023800
 8000890:	40013800 	.word	0x40013800
 8000894:	20002258 	.word	0x20002258
 8000898:	20002254 	.word	0x20002254
 800089c:	20002248 	.word	0x20002248
 80008a0:	20002244 	.word	0x20002244
 80008a4:	40013c00 	.word	0x40013c00
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	20002250 	.word	0x20002250
 80008b0:	40020800 	.word	0x40020800
 80008b4:	2000224c 	.word	0x2000224c
 80008b8:	40020400 	.word	0x40020400

080008bc <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80008bc:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80008be:	b170      	cbz	r0, 80008de <LAN8742_RegisterBusIO+0x22>
 80008c0:	68cc      	ldr	r4, [r1, #12]
 80008c2:	b164      	cbz	r4, 80008de <LAN8742_RegisterBusIO+0x22>
 80008c4:	688a      	ldr	r2, [r1, #8]
 80008c6:	b152      	cbz	r2, 80008de <LAN8742_RegisterBusIO+0x22>
 80008c8:	690b      	ldr	r3, [r1, #16]
 80008ca:	b143      	cbz	r3, 80008de <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 80008cc:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80008ce:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80008d0:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80008d2:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 80008d4:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80008d6:	e9c0 2404 	strd	r2, r4, [r0, #16]

  return LAN8742_STATUS_OK;
 80008da:	2000      	movs	r0, #0
}
 80008dc:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 80008de:	f04f 30ff 	mov.w	r0, #4294967295
 80008e2:	e7fb      	b.n	80008dc <LAN8742_RegisterBusIO+0x20>

080008e4 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80008e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 80008e6:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 80008e8:	6845      	ldr	r5, [r0, #4]
 {
 80008ea:	4604      	mov	r4, r0
   uint32_t regvalue = 0, addr = 0;
 80008ec:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80008ee:	b9a5      	cbnz	r5, 800091a <LAN8742_Init+0x36>
   {
     if(pObj->IO.Init != 0)
 80008f0:	6883      	ldr	r3, [r0, #8]
 80008f2:	b103      	cbz	r3, 80008f6 <LAN8742_Init+0x12>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80008f4:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80008f6:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80008f8:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80008fa:	6023      	str	r3, [r4, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80008fc:	6963      	ldr	r3, [r4, #20]
 80008fe:	aa01      	add	r2, sp, #4
 8000900:	2112      	movs	r1, #18
 8000902:	4628      	mov	r0, r5
 8000904:	4798      	blx	r3
 8000906:	2800      	cmp	r0, #0
 8000908:	db09      	blt.n	800091e <LAN8742_Init+0x3a>
         /* Can't read from this device address
            continue with next address */
         continue;
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800090a:	9b01      	ldr	r3, [sp, #4]
 800090c:	f003 031f 	and.w	r3, r3, #31
 8000910:	42ab      	cmp	r3, r5
 8000912:	d106      	bne.n	8000922 <LAN8742_Init+0x3e>
       {
         pObj->DevAddr = addr;
 8000914:	6025      	str	r5, [r4, #0]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       pObj->Is_Initialized = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	6063      	str	r3, [r4, #4]
   int32_t status = LAN8742_STATUS_OK;
 800091a:	2600      	movs	r6, #0
 800091c:	e009      	b.n	8000932 <LAN8742_Init+0x4e>
         status = LAN8742_STATUS_READ_ERROR;
 800091e:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000922:	3501      	adds	r5, #1
 8000924:	2d20      	cmp	r5, #32
 8000926:	d1e9      	bne.n	80008fc <LAN8742_Init+0x18>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	2b1f      	cmp	r3, #31
 800092c:	d804      	bhi.n	8000938 <LAN8742_Init+0x54>
     if(status == LAN8742_STATUS_OK)
 800092e:	2e00      	cmp	r6, #0
 8000930:	d0f1      	beq.n	8000916 <LAN8742_Init+0x32>
     }
   }

   return status;
 }
 8000932:	4630      	mov	r0, r6
 8000934:	b002      	add	sp, #8
 8000936:	bd70      	pop	{r4, r5, r6, pc}
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000938:	f06f 0602 	mvn.w	r6, #2
   return status;
 800093c:	e7f9      	b.n	8000932 <LAN8742_Init+0x4e>

0800093e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800093e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 8000940:	2500      	movs	r5, #0

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000942:	6943      	ldr	r3, [r0, #20]
{
 8000944:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000946:	aa01      	add	r2, sp, #4
 8000948:	2101      	movs	r1, #1
 800094a:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 800094c:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800094e:	4798      	blx	r3
 8000950:	42a8      	cmp	r0, r5
 8000952:	da03      	bge.n	800095c <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000954:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 8000958:	b003      	add	sp, #12
 800095a:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800095c:	6963      	ldr	r3, [r4, #20]
 800095e:	aa01      	add	r2, sp, #4
 8000960:	2101      	movs	r1, #1
 8000962:	6820      	ldr	r0, [r4, #0]
 8000964:	4798      	blx	r3
 8000966:	2800      	cmp	r0, #0
 8000968:	dbf4      	blt.n	8000954 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800096a:	9b01      	ldr	r3, [sp, #4]
 800096c:	075b      	lsls	r3, r3, #29
 800096e:	d52c      	bpl.n	80009ca <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000970:	6963      	ldr	r3, [r4, #20]
 8000972:	aa01      	add	r2, sp, #4
 8000974:	4629      	mov	r1, r5
 8000976:	6820      	ldr	r0, [r4, #0]
 8000978:	4798      	blx	r3
 800097a:	2800      	cmp	r0, #0
 800097c:	dbea      	blt.n	8000954 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	04dd      	lsls	r5, r3, #19
 8000982:	d40e      	bmi.n	80009a2 <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000984:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 8000988:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 800098c:	d101      	bne.n	8000992 <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800098e:	2002      	movs	r0, #2
 8000990:	e7e2      	b.n	8000958 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000992:	0498      	lsls	r0, r3, #18
 8000994:	d501      	bpl.n	800099a <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000996:	2003      	movs	r0, #3
 8000998:	e7de      	b.n	8000958 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800099a:	05d9      	lsls	r1, r3, #23
 800099c:	d413      	bmi.n	80009c6 <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800099e:	2005      	movs	r0, #5
 80009a0:	e7da      	b.n	8000958 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80009a2:	6963      	ldr	r3, [r4, #20]
 80009a4:	aa01      	add	r2, sp, #4
 80009a6:	211f      	movs	r1, #31
 80009a8:	6820      	ldr	r0, [r4, #0]
 80009aa:	4798      	blx	r3
 80009ac:	2800      	cmp	r0, #0
 80009ae:	dbd1      	blt.n	8000954 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80009b0:	9b01      	ldr	r3, [sp, #4]
 80009b2:	04da      	lsls	r2, r3, #19
 80009b4:	d50b      	bpl.n	80009ce <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80009b6:	f003 031c 	and.w	r3, r3, #28
 80009ba:	2b18      	cmp	r3, #24
 80009bc:	d0e7      	beq.n	800098e <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80009be:	2b08      	cmp	r3, #8
 80009c0:	d0e9      	beq.n	8000996 <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80009c2:	2b14      	cmp	r3, #20
 80009c4:	d1eb      	bne.n	800099e <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80009c6:	2004      	movs	r0, #4
 80009c8:	e7c6      	b.n	8000958 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;
 80009ca:	2001      	movs	r0, #1
 80009cc:	e7c4      	b.n	8000958 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80009ce:	2006      	movs	r0, #6
 80009d0:	e7c2      	b.n	8000958 <LAN8742_GetLinkState+0x1a>

080009d2 <USART_RxFinish>:
  callback(value);
}
__weak void USART_RxFinish(int value)
{
  UNUSED(value);
}
 80009d2:	4770      	bx	lr

080009d4 <Usart_Transmit>:
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (TxState == USART_STATE_READY)
 80009d8:	4e2a      	ldr	r6, [pc, #168]	@ (8000a84 <Usart_Transmit+0xb0>)
 80009da:	6834      	ldr	r4, [r6, #0]
 80009dc:	2c20      	cmp	r4, #32
 80009de:	d14c      	bne.n	8000a7a <Usart_Transmit+0xa6>
    if((pData == NULL) || (Size == 0U))
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d04c      	beq.n	8000a7e <Usart_Transmit+0xaa>
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d04a      	beq.n	8000a7e <Usart_Transmit+0xaa>
    TxState = USART_STATE_BUSY_TX;
 80009e8:	2421      	movs	r4, #33	@ 0x21
 80009ea:	6034      	str	r4, [r6, #0]
    if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE))) //UART_WORDLENGTH_9B and Parity control enable (奇偶校验使能)
 80009ec:	6804      	ldr	r4, [r0, #0]
 80009ee:	f414 5480 	ands.w	r4, r4, #4096	@ 0x1000
 80009f2:	d006      	beq.n	8000a02 <Usart_Transmit+0x2e>
 80009f4:	6805      	ldr	r5, [r0, #0]
 80009f6:	f415 6580 	ands.w	r5, r5, #1024	@ 0x400
      pdata16bits = (const uint16_t *) pData;
 80009fa:	bf0a      	itet	eq
 80009fc:	460c      	moveq	r4, r1
      pdata16bits = NULL;
 80009fe:	2400      	movne	r4, #0
      pdata8bits  = NULL;
 8000a00:	4629      	moveq	r1, r5
      pdata16bits = NULL;
 8000a02:	2500      	movs	r5, #0
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000a04:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
      if(ubSend == (ubNbDataToTransmit - 1)) //if (ubSend == (sizeof(aTxBuffer_init) - 1))
 8000a08:	f102 3eff 	add.w	lr, r2, #4294967295
      tmpTimeout = Timeout; //mS
 8000a0c:	461f      	mov	r7, r3
      while(!(pUSARTx->ISR & USART_ISR_TXE))  //while(!LL_USART_IsActiveFlag_TXE(USART2))
 8000a0e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000a12:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8000a16:	d016      	beq.n	8000a46 <Usart_Transmit+0x72>
      if(ubSend == (ubNbDataToTransmit - 1)) //if (ubSend == (sizeof(aTxBuffer_init) - 1))
 8000a18:	45ae      	cmp	lr, r5
 8000a1a:	d101      	bne.n	8000a20 <Usart_Transmit+0x4c>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000a1c:	2740      	movs	r7, #64	@ 0x40
 8000a1e:	6207      	str	r7, [r0, #32]
      if(pdata8bits == NULL)
 8000a20:	bb01      	cbnz	r1, 8000a64 <Usart_Transmit+0x90>
        pUSARTx->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000a22:	f834 7b02 	ldrh.w	r7, [r4], #2
 8000a26:	f3c7 0708 	ubfx	r7, r7, #0, #9
    while(ubSend < ubNbDataToTransmit) // while (ubSend < sizeof(aTxBuffer_init))
 8000a2a:	3501      	adds	r5, #1
        pUSARTx->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000a2c:	6287      	str	r7, [r0, #40]	@ 0x28
    while(ubSend < ubNbDataToTransmit) // while (ubSend < sizeof(aTxBuffer_init))
 8000a2e:	b2af      	uxth	r7, r5
 8000a30:	42ba      	cmp	r2, r7
 8000a32:	d8eb      	bhi.n	8000a0c <Usart_Transmit+0x38>
 8000a34:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    while(!(pUSARTx->ISR & USART_ISR_TC))  //while(!LL_USART_IsActiveFlag_TC(USART2))
 8000a38:	69c2      	ldr	r2, [r0, #28]
 8000a3a:	0652      	lsls	r2, r2, #25
 8000a3c:	d515      	bpl.n	8000a6a <Usart_Transmit+0x96>
    TxState = USART_STATE_READY;
 8000a3e:	2320      	movs	r3, #32
    return USART_OK;
 8000a40:	2000      	movs	r0, #0
    TxState = USART_STATE_READY;
 8000a42:	6033      	str	r3, [r6, #0]
    return USART_OK;
 8000a44:	e00a      	b.n	8000a5c <Usart_Transmit+0x88>
 8000a46:	f8dc 8010 	ldr.w	r8, [ip, #16]
        if(LL_SYSTICK_IsActiveCounterFlag()) /* USE_TIMEOUT */
 8000a4a:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 8000a4e:	d0de      	beq.n	8000a0e <Usart_Transmit+0x3a>
          if(tmpTimeout-- == 0)
 8000a50:	f107 38ff 	add.w	r8, r7, #4294967295
 8000a54:	b927      	cbnz	r7, 8000a60 <Usart_Transmit+0x8c>
            TxState = USART_STATE_READY;
 8000a56:	2320      	movs	r3, #32
            return USART_TIMEOUT;
 8000a58:	2003      	movs	r0, #3
            TxState = USART_STATE_READY;
 8000a5a:	6033      	str	r3, [r6, #0]
}
 8000a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(tmpTimeout-- == 0)
 8000a60:	4647      	mov	r7, r8
 8000a62:	e7d4      	b.n	8000a0e <Usart_Transmit+0x3a>
        pUSARTx->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000a64:	f811 7b01 	ldrb.w	r7, [r1], #1
 8000a68:	e7df      	b.n	8000a2a <Usart_Transmit+0x56>
 8000a6a:	690a      	ldr	r2, [r1, #16]
      if(LL_SYSTICK_IsActiveCounterFlag())
 8000a6c:	03d4      	lsls	r4, r2, #15
 8000a6e:	d5e3      	bpl.n	8000a38 <Usart_Transmit+0x64>
        if(tmpTimeout-- == 0)
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0ef      	beq.n	8000a56 <Usart_Transmit+0x82>
 8000a76:	4613      	mov	r3, r2
 8000a78:	e7de      	b.n	8000a38 <Usart_Transmit+0x64>
    return USART_BUSY;
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	e7ee      	b.n	8000a5c <Usart_Transmit+0x88>
      return USART_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e7ec      	b.n	8000a5c <Usart_Transmit+0x88>
 8000a82:	bf00      	nop
 8000a84:	20002270 	.word	0x20002270

08000a88 <_write>:
{
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	4614      	mov	r4, r2
  Usart_Transmit(USART2, (const uint8_t *)ptr, (uint16_t)len, 0xFFFF);
 8000a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a90:	b292      	uxth	r2, r2
 8000a92:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <_write+0x14>)
 8000a94:	f7ff ff9e 	bl	80009d4 <Usart_Transmit>
}
 8000a98:	4620      	mov	r0, r4
 8000a9a:	bd10      	pop	{r4, pc}
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_USART2_UART_Init>:
{
 8000aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000aa4:	4984      	ldr	r1, [pc, #528]	@ (8000cb8 <MX_USART2_UART_Init+0x218>)
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ab0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ab8:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000aba:	4b80      	ldr	r3, [pc, #512]	@ (8000cbc <MX_USART2_UART_Init+0x21c>)
 8000abc:	681e      	ldr	r6, [r3, #0]
 8000abe:	fa92 f5a2 	rbit	r5, r2
 8000ac2:	fab5 f585 	clz	r5, r5
 8000ac6:	fa92 f4a2 	rbit	r4, r2
 8000aca:	2003      	movs	r0, #3
 8000acc:	006d      	lsls	r5, r5, #1
 8000ace:	fab4 f484 	clz	r4, r4
 8000ad2:	fa00 f505 	lsl.w	r5, r0, r5
 8000ad6:	0064      	lsls	r4, r4, #1
 8000ad8:	ea26 0505 	bic.w	r5, r6, r5
 8000adc:	2602      	movs	r6, #2
 8000ade:	fa06 f404 	lsl.w	r4, r6, r4
 8000ae2:	432c      	orrs	r4, r5
 8000ae4:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000ae6:	6a1f      	ldr	r7, [r3, #32]
 8000ae8:	fa92 f5a2 	rbit	r5, r2
 8000aec:	fab5 f585 	clz	r5, r5
 8000af0:	fa92 f4a2 	rbit	r4, r2
 8000af4:	f04f 0c0f 	mov.w	ip, #15
 8000af8:	40b5      	lsls	r5, r6
 8000afa:	fab4 f484 	clz	r4, r4
 8000afe:	fa0c f505 	lsl.w	r5, ip, r5
 8000b02:	40b4      	lsls	r4, r6
 8000b04:	ea27 0505 	bic.w	r5, r7, r5
 8000b08:	2707      	movs	r7, #7
 8000b0a:	fa07 f404 	lsl.w	r4, r7, r4
 8000b0e:	432c      	orrs	r4, r5
 8000b10:	621c      	str	r4, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000b12:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000b16:	fa92 f5a2 	rbit	r5, r2
 8000b1a:	fab5 f585 	clz	r5, r5
 8000b1e:	fa92 f4a2 	rbit	r4, r2
 8000b22:	fab4 f484 	clz	r4, r4
 8000b26:	006d      	lsls	r5, r5, #1
 8000b28:	0064      	lsls	r4, r4, #1
 8000b2a:	fa00 f505 	lsl.w	r5, r0, r5
 8000b2e:	fa06 f404 	lsl.w	r4, r6, r4
 8000b32:	ea2e 0505 	bic.w	r5, lr, r5
 8000b36:	432c      	orrs	r4, r5
 8000b38:	609c      	str	r4, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b3a:	685c      	ldr	r4, [r3, #4]
 8000b3c:	f024 0420 	bic.w	r4, r4, #32
 8000b40:	605c      	str	r4, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b42:	68dd      	ldr	r5, [r3, #12]
 8000b44:	fa92 f4a2 	rbit	r4, r2
 8000b48:	fab4 f484 	clz	r4, r4
 8000b4c:	fa92 f2a2 	rbit	r2, r2
 8000b50:	0064      	lsls	r4, r4, #1
 8000b52:	fab2 f282 	clz	r2, r2
 8000b56:	fa00 f404 	lsl.w	r4, r0, r4
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	ea25 0404 	bic.w	r4, r5, r4
 8000b60:	2501      	movs	r5, #1
 8000b62:	fa05 f202 	lsl.w	r2, r5, r2
 8000b66:	4322      	orrs	r2, r4
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	2240      	movs	r2, #64	@ 0x40
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b6c:	f8d3 8000 	ldr.w	r8, [r3]
 8000b70:	fa92 fea2 	rbit	lr, r2
 8000b74:	fabe fe8e 	clz	lr, lr
 8000b78:	fa92 f4a2 	rbit	r4, r2
 8000b7c:	fa0e fe05 	lsl.w	lr, lr, r5
 8000b80:	fab4 f484 	clz	r4, r4
 8000b84:	fa00 fe0e 	lsl.w	lr, r0, lr
 8000b88:	40ac      	lsls	r4, r5
 8000b8a:	ea28 080e 	bic.w	r8, r8, lr
 8000b8e:	fa06 f404 	lsl.w	r4, r6, r4
 8000b92:	ea48 0404 	orr.w	r4, r8, r4
 8000b96:	601c      	str	r4, [r3, #0]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000b98:	6a1c      	ldr	r4, [r3, #32]
 8000b9a:	fa92 f8a2 	rbit	r8, r2
 8000b9e:	fab8 f888 	clz	r8, r8
 8000ba2:	fa92 fea2 	rbit	lr, r2
 8000ba6:	fa08 f806 	lsl.w	r8, r8, r6
 8000baa:	fabe fe8e 	clz	lr, lr
 8000bae:	fa0c fc08 	lsl.w	ip, ip, r8
 8000bb2:	ea24 0c0c 	bic.w	ip, r4, ip
 8000bb6:	fa0e f406 	lsl.w	r4, lr, r6
 8000bba:	40a7      	lsls	r7, r4
 8000bbc:	ea4c 0707 	orr.w	r7, ip, r7
 8000bc0:	621f      	str	r7, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000bc2:	689f      	ldr	r7, [r3, #8]
 8000bc4:	fa92 f4a2 	rbit	r4, r2
 8000bc8:	fab4 f484 	clz	r4, r4
 8000bcc:	fa92 fca2 	rbit	ip, r2
 8000bd0:	40ac      	lsls	r4, r5
 8000bd2:	fabc fc8c 	clz	ip, ip
 8000bd6:	fa00 f404 	lsl.w	r4, r0, r4
 8000bda:	ea27 0404 	bic.w	r4, r7, r4
 8000bde:	fa0c f705 	lsl.w	r7, ip, r5
 8000be2:	40be      	lsls	r6, r7
 8000be4:	4334      	orrs	r4, r6
 8000be6:	609c      	str	r4, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000be8:	685c      	ldr	r4, [r3, #4]
 8000bea:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 8000bee:	605c      	str	r4, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000bf0:	68dc      	ldr	r4, [r3, #12]
 8000bf2:	fa92 f6a2 	rbit	r6, r2
 8000bf6:	fab6 f686 	clz	r6, r6
 8000bfa:	fa92 f2a2 	rbit	r2, r2
 8000bfe:	40ae      	lsls	r6, r5
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	40b0      	lsls	r0, r6
 8000c06:	40aa      	lsls	r2, r5
 8000c08:	ea24 0000 	bic.w	r0, r4, r0
 8000c0c:	4095      	lsls	r5, r2
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c0e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000c12:	4305      	orrs	r5, r0
 8000c14:	60dd      	str	r5, [r3, #12]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c24:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c26:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c28:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8000c2c:	f023 030c 	bic.w	r3, r3, #12
 8000c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8000c34:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8000c38:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000c3c:	f043 030c 	orr.w	r3, r3, #12
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c40:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8000c44:	e840 3100 	strex	r1, r3, [r0]
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d1f3      	bne.n	8000c34 <MX_USART2_UART_Init+0x194>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000c4c:	4c1c      	ldr	r4, [pc, #112]	@ (8000cc0 <MX_USART2_UART_Init+0x220>)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c4e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  Usart_Transmit(USART2, (const uint8_t *)("STM32F7xx USART initial ...\r\n"), 29, 0x1ff);
 8000c52:	491c      	ldr	r1, [pc, #112]	@ (8000cc4 <MX_USART2_UART_Init+0x224>)
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	4620      	mov	r0, r4
 8000c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8000c60:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000c62:	6863      	ldr	r3, [r4, #4]
 8000c64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c68:	6063      	str	r3, [r4, #4]
  LL_USART_SetBaudRate(USART2, SystemCoreClock/4, LL_USART_OVERSAMPLING_16, 115200);
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_USART2_UART_Init+0x228>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	089b      	lsrs	r3, r3, #2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c70:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c78:	60e3      	str	r3, [r4, #12]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	2280      	movs	r2, #128	@ 0x80
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6023      	str	r3, [r4, #0]
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_USART2_UART_Init+0x22c>)
 8000c86:	f883 2326 	strb.w	r2, [r3, #806]	@ 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	2240      	movs	r2, #64	@ 0x40
 8000c8c:	605a      	str	r2, [r3, #4]
  TxState = USART_STATE_READY;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <MX_USART2_UART_Init+0x230>)
 8000c92:	6013      	str	r3, [r2, #0]
  RxState = USART_STATE_READY;
 8000c94:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <MX_USART2_UART_Init+0x234>)
 8000c96:	6013      	str	r3, [r2, #0]
  Usart_Transmit(USART2, (const uint8_t *)("STM32F7xx USART initial ...\r\n"), 29, 0x1ff);
 8000c98:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000c9c:	221d      	movs	r2, #29
 8000c9e:	f7ff fe99 	bl	80009d4 <Usart_Transmit>
  Usart_Transmit(USART2, (const uint8_t *)aTxBuffer, sizeof(aTxBuffer), 0x1ff);
 8000ca2:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000ca6:	2288      	movs	r2, #136	@ 0x88
 8000ca8:	490b      	ldr	r1, [pc, #44]	@ (8000cd8 <MX_USART2_UART_Init+0x238>)
 8000caa:	4620      	mov	r0, r4
}
 8000cac:	b002      	add	sp, #8
 8000cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Usart_Transmit(USART2, (const uint8_t *)aTxBuffer, sizeof(aTxBuffer), 0x1ff);
 8000cb2:	f7ff be8f 	b.w	80009d4 <Usart_Transmit>
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	0801698e 	.word	0x0801698e
 8000cc8:	20000014 	.word	0x20000014
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	20002270 	.word	0x20002270
 8000cd4:	2000226c 	.word	0x2000226c
 8000cd8:	08018f68 	.word	0x08018f68

08000cdc <USART_RxFinishCallback>:
  callback(value);
 8000cdc:	4708      	bx	r1
	...

08000ce0 <USART_IRQHandler>:
  return rx_it_flag;
}

void USART_IRQHandler(USART_TypeDef *pUSARTx)
{
  uint32_t isrflags   = pUSARTx->ISR;
 8000ce0:	69c2      	ldr	r2, [r0, #28]

  uint32_t errorflags = 0;
  uint32_t errorcode = 0;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000ce2:	f640 030f 	movw	r3, #2063	@ 0x80f
  uint32_t cr1its     = pUSARTx->CR1;
 8000ce6:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000ce8:	4013      	ands	r3, r2
{
 8000cea:	b470      	push	{r4, r5, r6}

  /* UART in mode Receiver ---------------------------------------------------*/
  if(((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000cec:	0696      	lsls	r6, r2, #26
  uint32_t cr3its     = pUSARTx->CR3;
 8000cee:	6885      	ldr	r5, [r0, #8]
  if(((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000cf0:	d549      	bpl.n	8000d86 <USART_IRQHandler+0xa6>
 8000cf2:	068c      	lsls	r4, r1, #26
 8000cf4:	d547      	bpl.n	8000d86 <USART_IRQHandler+0xa6>
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE)))
 8000cf6:	6803      	ldr	r3, [r0, #0]
    pdata16bits = (uint16_t *) pRxData;
 8000cf8:	4a5b      	ldr	r2, [pc, #364]	@ (8000e68 <USART_IRQHandler+0x188>)
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE)))
 8000cfa:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8000cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8000e6c <USART_IRQHandler+0x18c>)
    pdata16bits = (uint16_t *) pRxData;
 8000d00:	6814      	ldr	r4, [r2, #0]
    *(pdata16bits + usart_rx_buff_tail) = (uint16_t)(pUSARTx->RDR & RxMask);
 8000d02:	4a5b      	ldr	r2, [pc, #364]	@ (8000e70 <USART_IRQHandler+0x190>)
 8000d04:	8812      	ldrh	r2, [r2, #0]
  if((pUSARTx->CR1 & USART_CR1_M0)&&(!(pUSARTx->CR1 & USART_CR1_PCE)))
 8000d06:	d034      	beq.n	8000d72 <USART_IRQHandler+0x92>
 8000d08:	6801      	ldr	r1, [r0, #0]
 8000d0a:	0549      	lsls	r1, r1, #21
 8000d0c:	d431      	bmi.n	8000d72 <USART_IRQHandler+0x92>
    *(pdata16bits + usart_rx_buff_tail) = (uint16_t)(pUSARTx->RDR & RxMask);
 8000d0e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	402a      	ands	r2, r5
 8000d14:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
    usart_rx_buff_tail += 2U;
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	3202      	adds	r2, #2
 8000d1c:	601a      	str	r2, [r3, #0]
    ubReceive = usart_rx_buff_tail/2;
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if(ubReceive == RxSize)
 8000d24:	4a53      	ldr	r2, [pc, #332]	@ (8000e74 <USART_IRQHandler+0x194>)
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8098 	bne.w	8000e5e <USART_IRQHandler+0x17e>
    pUSARTx->CR1 &= ~(USART_CR1_RXNEIE | USART_CR1_PEIE);
 8000d2e:	6803      	ldr	r3, [r0, #0]
    RxState = USART_STATE_READY;
 8000d30:	2220      	movs	r2, #32
    pUSARTx->CR1 &= ~(USART_CR1_RXNEIE | USART_CR1_PEIE);
 8000d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8000d36:	6003      	str	r3, [r0, #0]
    pUSARTx->CR3 &= ~USART_CR3_EIE;
 8000d38:	6883      	ldr	r3, [r0, #8]
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	6083      	str	r3, [r0, #8]
    RxState = USART_STATE_READY;
 8000d40:	4b4d      	ldr	r3, [pc, #308]	@ (8000e78 <USART_IRQHandler+0x198>)
 8000d42:	601a      	str	r2, [r3, #0]
    if((pUSARTx->CR2 & USART_CR2_RTOEN) != 0U)
 8000d44:	6843      	ldr	r3, [r0, #4]
 8000d46:	021a      	lsls	r2, r3, #8
 8000d48:	d503      	bpl.n	8000d52 <USART_IRQHandler+0x72>
      pUSARTx->CR1 &= ~USART_CR1_RTOIE;
 8000d4a:	6803      	ldr	r3, [r0, #0]
 8000d4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000d50:	6003      	str	r3, [r0, #0]
    pUSARTx->CR1 &= ~USART_CR1_IDLEIE;
 8000d52:	6803      	ldr	r3, [r0, #0]
 8000d54:	f023 0310 	bic.w	r3, r3, #16
 8000d58:	6003      	str	r3, [r0, #0]
    if(pUSARTx->ISR & USART_ISR_IDLE)
 8000d5a:	69c3      	ldr	r3, [r0, #28]
 8000d5c:	06db      	lsls	r3, r3, #27
 8000d5e:	d501      	bpl.n	8000d64 <USART_IRQHandler+0x84>
      pUSARTx->ICR = USART_ICR_IDLECF;
 8000d60:	2310      	movs	r3, #16
 8000d62:	6203      	str	r3, [r0, #32]
    rx_it_flag = 1;
 8000d64:	2001      	movs	r0, #1
 8000d66:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <USART_IRQHandler+0x19c>)
    USART_RxFinishCallback(1, USART_RxFinish);
 8000d68:	4945      	ldr	r1, [pc, #276]	@ (8000e80 <USART_IRQHandler+0x1a0>)
    rx_it_flag = 1;
 8000d6a:	7018      	strb	r0, [r3, #0]

    /*Call legacy weak Tx complete callback*/
    //HAL_UART_TxCpltCallback(huart);
  }

}
 8000d6c:	bc70      	pop	{r4, r5, r6}
    USART_RxFinishCallback(1, USART_RxFinish);
 8000d6e:	f7ff bfb5 	b.w	8000cdc <USART_RxFinishCallback>
    *(pdata8bits + usart_rx_buff_tail) = (uint8_t)(pUSARTx->RDR & (uint8_t)RxMask);
 8000d72:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8000d74:	681d      	ldr	r5, [r3, #0]
 8000d76:	400a      	ands	r2, r1
 8000d78:	5562      	strb	r2, [r4, r5]
    usart_rx_buff_tail++;
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	3201      	adds	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
    ubReceive = usart_rx_buff_tail;
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	e7ce      	b.n	8000d24 <USART_IRQHandler+0x44>
  if((errorflags != 0U) && (((cr3its & USART_CR3_EIE) != 0U)||((cr1its & (USART_CR1_RXNEIE|USART_CR1_PEIE|USART_CR1_RTOIE)) != 0U)))
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d04e      	beq.n	8000e28 <USART_IRQHandler+0x148>
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e84 <USART_IRQHandler+0x1a4>)
 8000d8c:	f005 0401 	and.w	r4, r5, #1
 8000d90:	400b      	ands	r3, r1
 8000d92:	4323      	orrs	r3, r4
 8000d94:	d048      	beq.n	8000e28 <USART_IRQHandler+0x148>
    if(((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8000d96:	f012 0301 	ands.w	r3, r2, #1
 8000d9a:	d004      	beq.n	8000da6 <USART_IRQHandler+0xc6>
 8000d9c:	f411 7680 	ands.w	r6, r1, #256	@ 0x100
 8000da0:	d03e      	beq.n	8000e20 <USART_IRQHandler+0x140>
      pUSARTx->ICR = USART_ICR_PECF;
 8000da2:	2601      	movs	r6, #1
 8000da4:	6206      	str	r6, [r0, #32]
    if(((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000da6:	0796      	lsls	r6, r2, #30
 8000da8:	d503      	bpl.n	8000db2 <USART_IRQHandler+0xd2>
 8000daa:	b114      	cbz	r4, 8000db2 <USART_IRQHandler+0xd2>
      pUSARTx->ICR = USART_ICR_FECF;
 8000dac:	2602      	movs	r6, #2
      errorcode |= USART_ICR_FECF;
 8000dae:	4333      	orrs	r3, r6
      pUSARTx->ICR = USART_ICR_FECF;
 8000db0:	6206      	str	r6, [r0, #32]
    if(((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000db2:	0756      	lsls	r6, r2, #29
 8000db4:	d503      	bpl.n	8000dbe <USART_IRQHandler+0xde>
 8000db6:	b114      	cbz	r4, 8000dbe <USART_IRQHandler+0xde>
      pUSARTx->ICR = USART_ICR_NCF;
 8000db8:	2604      	movs	r6, #4
      errorcode |= USART_ICR_NCF;
 8000dba:	4333      	orrs	r3, r6
      pUSARTx->ICR = USART_ICR_NCF;
 8000dbc:	6206      	str	r6, [r0, #32]
    if(((isrflags & USART_ISR_ORE) != 0U) && (((cr1its & USART_CR1_RXNEIE) != 0U)||((cr3its & USART_CR3_EIE) != 0U)))
 8000dbe:	0716      	lsls	r6, r2, #28
 8000dc0:	d506      	bpl.n	8000dd0 <USART_IRQHandler+0xf0>
 8000dc2:	f001 0620 	and.w	r6, r1, #32
 8000dc6:	4326      	orrs	r6, r4
 8000dc8:	d002      	beq.n	8000dd0 <USART_IRQHandler+0xf0>
      pUSARTx->ICR = USART_ICR_ORECF;
 8000dca:	2408      	movs	r4, #8
      errorcode |= USART_ICR_ORECF;
 8000dcc:	4323      	orrs	r3, r4
      pUSARTx->ICR = USART_ICR_ORECF;
 8000dce:	6204      	str	r4, [r0, #32]
    if(((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8000dd0:	0516      	lsls	r6, r2, #20
 8000dd2:	d527      	bpl.n	8000e24 <USART_IRQHandler+0x144>
 8000dd4:	014c      	lsls	r4, r1, #5
 8000dd6:	d525      	bpl.n	8000e24 <USART_IRQHandler+0x144>
      pUSARTx->ICR = USART_ICR_RTOCF;
 8000dd8:	f44f 6400 	mov.w	r4, #2048	@ 0x800
      errorcode |= USART_ICR_RTOCF;
 8000ddc:	4323      	orrs	r3, r4
      pUSARTx->ICR = USART_ICR_RTOCF;
 8000dde:	6204      	str	r4, [r0, #32]
      ErrorCode = errorcode;
 8000de0:	4e29      	ldr	r6, [pc, #164]	@ (8000e88 <USART_IRQHandler+0x1a8>)
      if((pUSARTx->CR3 & USART_CR3_DMAR) || ((errorcode & (USART_ISR_RTOF | USART_ICR_ORECF)) != 0U))
 8000de2:	6884      	ldr	r4, [r0, #8]
      ErrorCode = errorcode;
 8000de4:	6033      	str	r3, [r6, #0]
      if((pUSARTx->CR3 & USART_CR3_DMAR) || ((errorcode & (USART_ISR_RTOF | USART_ICR_ORECF)) != 0U))
 8000de6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8000dea:	f004 0440 	and.w	r4, r4, #64	@ 0x40
 8000dee:	f023 0307 	bic.w	r3, r3, #7
 8000df2:	051b      	lsls	r3, r3, #20
 8000df4:	0d1b      	lsrs	r3, r3, #20
 8000df6:	431c      	orrs	r4, r3
 8000df8:	d033      	beq.n	8000e62 <USART_IRQHandler+0x182>
    	pUSARTx->CR1 &= ~(USART_CR1_IDLEIE | USART_CR1_RXNEIE | USART_CR1_PEIE);
 8000dfa:	6803      	ldr	r3, [r0, #0]
    	RxState = USART_STATE_READY;
 8000dfc:	2420      	movs	r4, #32
    	pUSARTx->CR1 &= ~(USART_CR1_IDLEIE | USART_CR1_RXNEIE | USART_CR1_PEIE);
 8000dfe:	f423 7398 	bic.w	r3, r3, #304	@ 0x130
 8000e02:	6003      	str	r3, [r0, #0]
    	pUSARTx->CR3 &= ~USART_CR3_EIE;
 8000e04:	6883      	ldr	r3, [r0, #8]
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6083      	str	r3, [r0, #8]
    	RxState = USART_STATE_READY;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <USART_IRQHandler+0x198>)
 8000e0e:	601c      	str	r4, [r3, #0]
        if(pUSARTx->CR3 & USART_CR3_DMAR)
 8000e10:	6883      	ldr	r3, [r0, #8]
 8000e12:	065b      	lsls	r3, r3, #25
 8000e14:	d508      	bpl.n	8000e28 <USART_IRQHandler+0x148>
          pUSARTx->CR3 &= ~USART_CR3_DMAR;
 8000e16:	6883      	ldr	r3, [r0, #8]
 8000e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e1c:	6083      	str	r3, [r0, #8]
 8000e1e:	e003      	b.n	8000e28 <USART_IRQHandler+0x148>
  uint32_t errorcode = 0;
 8000e20:	4633      	mov	r3, r6
 8000e22:	e7c0      	b.n	8000da6 <USART_IRQHandler+0xc6>
    if(errorcode != 0)
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1db      	bne.n	8000de0 <USART_IRQHandler+0x100>
  if(((isrflags & USART_ISR_IDLE) != 0U) && ((cr1its & USART_ISR_IDLE) != 0U))
 8000e28:	06d6      	lsls	r6, r2, #27
 8000e2a:	d504      	bpl.n	8000e36 <USART_IRQHandler+0x156>
 8000e2c:	06cc      	lsls	r4, r1, #27
 8000e2e:	d502      	bpl.n	8000e36 <USART_IRQHandler+0x156>
    pUSARTx->ICR = USART_ICR_IDLECF; //LL_USART_ClearFlag_IDLE(pUSARTx);
 8000e30:	2310      	movs	r3, #16
 8000e32:	6203      	str	r3, [r0, #32]
    if(pUSARTx->CR3 & USART_CR3_DMAR)
 8000e34:	6883      	ldr	r3, [r0, #8]
  if(((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8000e36:	02d3      	lsls	r3, r2, #11
 8000e38:	d504      	bpl.n	8000e44 <USART_IRQHandler+0x164>
 8000e3a:	026e      	lsls	r6, r5, #9
 8000e3c:	d502      	bpl.n	8000e44 <USART_IRQHandler+0x164>
    pUSARTx->ICR = USART_ICR_WUCF;
 8000e3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e42:	6203      	str	r3, [r0, #32]
  if(((isrflags & USART_ISR_TXE) != 0U) && ((cr1its & USART_CR1_TXEIE) != 0U))
 8000e44:	0615      	lsls	r5, r2, #24
 8000e46:	d501      	bpl.n	8000e4c <USART_IRQHandler+0x16c>
 8000e48:	060c      	lsls	r4, r1, #24
 8000e4a:	d408      	bmi.n	8000e5e <USART_IRQHandler+0x17e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8000e4c:	0652      	lsls	r2, r2, #25
 8000e4e:	d506      	bpl.n	8000e5e <USART_IRQHandler+0x17e>
 8000e50:	064b      	lsls	r3, r1, #25
 8000e52:	d504      	bpl.n	8000e5e <USART_IRQHandler+0x17e>
    pUSARTx->CR1 = USART_CR1_TCIE;
 8000e54:	2340      	movs	r3, #64	@ 0x40
    TxState = USART_STATE_READY;
 8000e56:	2220      	movs	r2, #32
    pUSARTx->CR1 = USART_CR1_TCIE;
 8000e58:	6003      	str	r3, [r0, #0]
    TxState = USART_STATE_READY;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <USART_IRQHandler+0x1ac>)
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bc70      	pop	{r4, r5, r6}
 8000e60:	4770      	bx	lr
        ErrorCode = 0;
 8000e62:	6034      	str	r4, [r6, #0]
 8000e64:	e7e0      	b.n	8000e28 <USART_IRQHandler+0x148>
 8000e66:	bf00      	nop
 8000e68:	20002264 	.word	0x20002264
 8000e6c:	2000225c 	.word	0x2000225c
 8000e70:	20002260 	.word	0x20002260
 8000e74:	20002262 	.word	0x20002262
 8000e78:	2000226c 	.word	0x2000226c
 8000e7c:	2000225b 	.word	0x2000225b
 8000e80:	080009d3 	.word	0x080009d3
 8000e84:	04000120 	.word	0x04000120
 8000e88:	20002268 	.word	0x20002268
 8000e8c:	20002270 	.word	0x20002270

08000e90 <ethernet_link_status_updated>:
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif /* LWIP_DHCP */
  }
}
 8000e90:	4770      	bx	lr

08000e92 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8000e92:	2000      	movs	r0, #0
 8000e94:	4770      	bx	lr
	...

08000e98 <low_level_output>:
{
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	b08d      	sub	sp, #52	@ 0x34
 8000e9c:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000e9e:	2230      	movs	r2, #48	@ 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4668      	mov	r0, sp
 8000ea4:	f014 ffe4 	bl	8015e70 <memset>
  for(q = p; q != NULL; q = q->next)
 8000ea8:	466a      	mov	r2, sp
 8000eaa:	4623      	mov	r3, r4
  uint32_t i = 0U;
 8000eac:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 8000eae:	b9d3      	cbnz	r3, 8000ee6 <low_level_output+0x4e>
  TxConfig.Length = p->tot_len;
 8000eb0:	4d16      	ldr	r5, [pc, #88]	@ (8000f0c <low_level_output+0x74>)
  pbuf_ref(p);
 8000eb2:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8000eb4:	8923      	ldrh	r3, [r4, #8]
  TxConfig.pData = p;
 8000eb6:	636c      	str	r4, [r5, #52]	@ 0x34
  while (xSemaphoreTake(TxPktSemaphore, portMAX_DELAY) != pdTRUE)
 8000eb8:	4c15      	ldr	r4, [pc, #84]	@ (8000f10 <low_level_output+0x78>)
  TxConfig.Length = p->tot_len;
 8000eba:	606b      	str	r3, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000ebc:	f8c5 d008 	str.w	sp, [r5, #8]
  pbuf_ref(p);
 8000ec0:	f00b fcd2 	bl	800c868 <pbuf_ref>
  HAL_ETH_Transmit_IT(&EthHandle, &TxConfig);
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4813      	ldr	r0, [pc, #76]	@ (8000f14 <low_level_output+0x7c>)
 8000ec8:	f001 fb95 	bl	80025f6 <HAL_ETH_Transmit_IT>
  while (xSemaphoreTake(TxPktSemaphore, portMAX_DELAY) != pdTRUE)
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	6820      	ldr	r0, [r4, #0]
 8000ed2:	f007 fbda 	bl	800868a <xQueueSemaphoreTake>
 8000ed6:	2801      	cmp	r0, #1
 8000ed8:	d1f8      	bne.n	8000ecc <low_level_output+0x34>
  HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <low_level_output+0x7c>)
 8000edc:	f001 fc2d 	bl	800273a <HAL_ETH_ReleaseTxPacket>
  return errval;
 8000ee0:	2000      	movs	r0, #0
}
 8000ee2:	b00d      	add	sp, #52	@ 0x34
 8000ee4:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 8000ee6:	2904      	cmp	r1, #4
 8000ee8:	d00c      	beq.n	8000f04 <low_level_output+0x6c>
    Txbuffer[i].buffer = q->payload;
 8000eea:	6858      	ldr	r0, [r3, #4]
 8000eec:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 8000eee:	8958      	ldrh	r0, [r3, #10]
 8000ef0:	6050      	str	r0, [r2, #4]
    if(i>0)
 8000ef2:	b109      	cbz	r1, 8000ef8 <low_level_output+0x60>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000ef4:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b903      	cbnz	r3, 8000efe <low_level_output+0x66>
      Txbuffer[i].next = NULL;
 8000efc:	6093      	str	r3, [r2, #8]
    i++;
 8000efe:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 8000f00:	320c      	adds	r2, #12
 8000f02:	e7d4      	b.n	8000eae <low_level_output+0x16>
      return ERR_IF;
 8000f04:	f06f 000b 	mvn.w	r0, #11
 8000f08:	e7eb      	b.n	8000ee2 <low_level_output+0x4a>
 8000f0a:	bf00      	nop
 8000f0c:	20002294 	.word	0x20002294
 8000f10:	2000237c 	.word	0x2000237c
 8000f14:	200022cc 	.word	0x200022cc

08000f18 <RMII_Thread>:
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000f18:	4d10      	ldr	r5, [pc, #64]	@ (8000f5c <RMII_Thread+0x44>)
      vTaskDelete(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000f1a:	4c11      	ldr	r4, [pc, #68]	@ (8000f60 <RMII_Thread+0x48>)
{
 8000f1c:	b508      	push	{r3, lr}
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8000f24:	b11a      	cbz	r2, 8000f2e <RMII_Thread+0x16>
      vTaskDelete(NULL);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f007 fe98 	bl	8008c5c <vTaskDelete>
 8000f2c:	e7f7      	b.n	8000f1e <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 8000f2e:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 8000f32:	2a0a      	cmp	r2, #10
 8000f34:	d90e      	bls.n	8000f54 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000f36:	6862      	ldr	r2, [r4, #4]
 8000f38:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000f3c:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8000f3e:	6862      	ldr	r2, [r4, #4]
 8000f40:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f44:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 8000f46:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000f52:	e7e4      	b.n	8000f1e <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      vTaskDelay(200);
 8000f54:	20c8      	movs	r0, #200	@ 0xc8
 8000f56:	f008 f88f 	bl	8009078 <vTaskDelay>
 8000f5a:	e7e0      	b.n	8000f1e <RMII_Thread+0x6>
 8000f5c:	200022cc 	.word	0x200022cc
 8000f60:	40013800 	.word	0x40013800

08000f64 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <ETH_PHY_IO_Init+0xc>)
{
 8000f66:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000f68:	f001 fd44 	bl	80029f4 <HAL_ETH_SetMDIOClockRange>
}
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	bd08      	pop	{r3, pc}
 8000f70:	200022cc 	.word	0x200022cc

08000f74 <ETH_PHY_IO_ReadReg>:
{
 8000f74:	b508      	push	{r3, lr}
 8000f76:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000f78:	460a      	mov	r2, r1
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <ETH_PHY_IO_ReadReg+0x18>)
 8000f7e:	f001 fc7b 	bl	8002878 <HAL_ETH_ReadPHYRegister>
 8000f82:	3800      	subs	r0, #0
 8000f84:	bf18      	it	ne
 8000f86:	2001      	movne	r0, #1
}
 8000f88:	4240      	negs	r0, r0
 8000f8a:	bd08      	pop	{r3, pc}
 8000f8c:	200022cc 	.word	0x200022cc

08000f90 <ETH_PHY_IO_WriteReg>:
{
 8000f90:	b508      	push	{r3, lr}
 8000f92:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000f94:	460a      	mov	r2, r1
 8000f96:	4601      	mov	r1, r0
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <ETH_PHY_IO_WriteReg+0x18>)
 8000f9a:	f001 fc94 	bl	80028c6 <HAL_ETH_WritePHYRegister>
 8000f9e:	3800      	subs	r0, #0
 8000fa0:	bf18      	it	ne
 8000fa2:	2001      	movne	r0, #1
}
 8000fa4:	4240      	negs	r0, r0
 8000fa6:	bd08      	pop	{r3, pc}
 8000fa8:	200022cc 	.word	0x200022cc

08000fac <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 8000fac:	f000 bf10 	b.w	8001dd0 <HAL_GetTick>

08000fb0 <pbuf_free_custom>:
{
 8000fb0:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000fb2:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <pbuf_free_custom+0x28>)
{
 8000fb4:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000fb6:	f00b f8fd 	bl	800c1b4 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <pbuf_free_custom+0x2c>)
 8000fbc:	7813      	ldrb	r3, [r2, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d109      	bne.n	8000fd6 <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 8000fc2:	2300      	movs	r3, #0
    xSemaphoreGive(RxPktSemaphore);
 8000fc4:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <pbuf_free_custom+0x30>)
    RxAllocStatus = RX_ALLOC_OK;
 8000fc6:	7013      	strb	r3, [r2, #0]
    xSemaphoreGive(RxPktSemaphore);
 8000fc8:	4619      	mov	r1, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	6800      	ldr	r0, [r0, #0]
}
 8000fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xSemaphoreGive(RxPktSemaphore);
 8000fd2:	f007 b8e9 	b.w	80081a8 <xQueueGenericSend>
}
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	0801916c 	.word	0x0801916c
 8000fdc:	20002384 	.word	0x20002384
 8000fe0:	20002380 	.word	0x20002380

08000fe4 <ethernetif_input>:
{
 8000fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000fe8:	4604      	mov	r4, r0
    if(xSemaphoreTake( RxPktSemaphore, TIME_WAITING_FOR_INPUT ) == pdTRUE)
 8000fea:	4e11      	ldr	r6, [pc, #68]	@ (8001030 <ethernetif_input+0x4c>)
  if(RxAllocStatus == RX_ALLOC_OK)
 8000fec:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8001034 <ethernetif_input+0x50>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000ff0:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 8001038 <ethernetif_input+0x54>
    if(xSemaphoreTake( RxPktSemaphore, TIME_WAITING_FOR_INPUT ) == pdTRUE)
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	6830      	ldr	r0, [r6, #0]
 8000ffa:	f007 fb46 	bl	800868a <xQueueSemaphoreTake>
 8000ffe:	2801      	cmp	r0, #1
 8001000:	d1f8      	bne.n	8000ff4 <ethernetif_input+0x10>
  struct pbuf *p = NULL;
 8001002:	2700      	movs	r7, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8001004:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8001008:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800100a:	b91b      	cbnz	r3, 8001014 <ethernetif_input+0x30>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800100c:	a901      	add	r1, sp, #4
 800100e:	4648      	mov	r0, r9
 8001010:	f001 fb1f 	bl	8002652 <HAL_ETH_ReadData>
  return p;
 8001014:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 8001016:	2d00      	cmp	r5, #0
 8001018:	d0ec      	beq.n	8000ff4 <ethernetif_input+0x10>
          if (netif->input( p, netif) != ERR_OK )
 800101a:	6923      	ldr	r3, [r4, #16]
 800101c:	4621      	mov	r1, r4
 800101e:	4628      	mov	r0, r5
 8001020:	4798      	blx	r3
 8001022:	2800      	cmp	r0, #0
 8001024:	d0ee      	beq.n	8001004 <ethernetif_input+0x20>
            pbuf_free(p);
 8001026:	4628      	mov	r0, r5
 8001028:	f00b fad2 	bl	800c5d0 <pbuf_free>
 800102c:	e7ea      	b.n	8001004 <ethernetif_input+0x20>
 800102e:	bf00      	nop
 8001030:	20002380 	.word	0x20002380
 8001034:	20002384 	.word	0x20002384
 8001038:	200022cc 	.word	0x200022cc

0800103c <ethernetif_init>:
{
 800103c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800103e:	4604      	mov	r4, r0
{
 8001040:	b09e      	sub	sp, #120	@ 0x78
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001042:	b930      	cbnz	r0, 8001052 <ethernetif_init+0x16>
 8001044:	4b59      	ldr	r3, [pc, #356]	@ (80011ac <ethernetif_init+0x170>)
 8001046:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800104a:	4959      	ldr	r1, [pc, #356]	@ (80011b0 <ethernetif_init+0x174>)
 800104c:	4859      	ldr	r0, [pc, #356]	@ (80011b4 <ethernetif_init+0x178>)
 800104e:	f014 fd9d 	bl	8015b8c <iprintf>
  netif->name[0] = IFNAME0;
 8001052:	f247 4373 	movw	r3, #29811	@ 0x7473
  ETH_MACConfigTypeDef MACConf = {0};
 8001056:	2264      	movs	r2, #100	@ 0x64
 8001058:	2100      	movs	r1, #0
 800105a:	a805      	add	r0, sp, #20
  netif->name[0] = IFNAME0;
 800105c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 800105e:	2500      	movs	r5, #0
  netif->output = etharp_output;
 8001060:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <ethernetif_init+0x17c>)
 8001062:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8001064:	4b55      	ldr	r3, [pc, #340]	@ (80011bc <ethernetif_init+0x180>)
 8001066:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8001068:	f014 ff02 	bl	8015e70 <memset>
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 800106c:	2302      	movs	r3, #2
  EthHandle.Instance = ETH;
 800106e:	4854      	ldr	r0, [pc, #336]	@ (80011c0 <ethernetif_init+0x184>)
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 8001070:	9303      	str	r3, [sp, #12]
  EthHandle.Instance = ETH;
 8001072:	4b54      	ldr	r3, [pc, #336]	@ (80011c4 <ethernetif_init+0x188>)
  uint8_t macaddress[6]= {MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5};
 8001074:	f8ad 5010 	strh.w	r5, [sp, #16]
  EthHandle.Instance = ETH;
 8001078:	6003      	str	r3, [r0, #0]
  EthHandle.Init.MACAddr = macaddress;
 800107a:	ab03      	add	r3, sp, #12
 800107c:	6043      	str	r3, [r0, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800107e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001082:	6083      	str	r3, [r0, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8001084:	4b50      	ldr	r3, [pc, #320]	@ (80011c8 <ethernetif_init+0x18c>)
 8001086:	6103      	str	r3, [r0, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8001088:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <ethernetif_init+0x190>)
 800108a:	60c3      	str	r3, [r0, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUF_SIZE;
 800108c:	f44f 63bf 	mov.w	r3, #1528	@ 0x5f8
 8001090:	6143      	str	r3, [r0, #20]
  HAL_ETH_Init(&EthHandle);
 8001092:	f001 f92f 	bl	80022f4 <HAL_ETH_Init>
  netif->mtu = ETH_MAX_PAYLOAD;
 8001096:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <ethernetif_init+0x194>)
  LWIP_MEMPOOL_INIT(RX_POOL);
 8001098:	484e      	ldr	r0, [pc, #312]	@ (80011d4 <ethernetif_init+0x198>)
  netif->hwaddr[2] =  MAC_ADDR2;
 800109a:	e9c4 3509 	strd	r3, r5, [r4, #36]	@ 0x24
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800109e:	2306      	movs	r3, #6
 80010a0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80010a4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80010a8:	f043 030a 	orr.w	r3, r3, #10
 80010ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  LWIP_MEMPOOL_INIT(RX_POOL);
 80010b0:	f00b f83c 	bl	800c12c <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010b4:	4b48      	ldr	r3, [pc, #288]	@ (80011d8 <ethernetif_init+0x19c>)
 80010b6:	4629      	mov	r1, r5
 80010b8:	2234      	movs	r2, #52	@ 0x34
 80010ba:	4618      	mov	r0, r3
 80010bc:	f014 fed8 	bl	8015e70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010c0:	2221      	movs	r2, #33	@ 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 80010c2:	4629      	mov	r1, r5
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010c4:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010c8:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80010cc:	6102      	str	r2, [r0, #16]
  RxPktSemaphore = xSemaphoreCreateBinary();
 80010ce:	2203      	movs	r2, #3
 80010d0:	2001      	movs	r0, #1
 80010d2:	f007 f83d 	bl	8008150 <xQueueGenericCreate>
 80010d6:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <ethernetif_init+0x1a0>)
  TxPktSemaphore = xSemaphoreCreateBinary();
 80010d8:	4629      	mov	r1, r5
 80010da:	2203      	movs	r2, #3
  RxPktSemaphore = xSemaphoreCreateBinary();
 80010dc:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = xSemaphoreCreateBinary();
 80010de:	2001      	movs	r0, #1
 80010e0:	f007 f836 	bl	8008150 <xQueueGenericCreate>
 80010e4:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <ethernetif_init+0x1a4>)
  xTaskCreate(ethernetif_input,		/* Function that implements the task. */
 80010e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ea:	493e      	ldr	r1, [pc, #248]	@ (80011e4 <ethernetif_init+0x1a8>)
  TxPktSemaphore = xSemaphoreCreateBinary();
 80010ec:	6018      	str	r0, [r3, #0]
  xTaskCreate(ethernetif_input,		/* Function that implements the task. */
 80010ee:	2303      	movs	r3, #3
 80010f0:	9501      	str	r5, [sp, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4623      	mov	r3, r4
 80010f6:	483c      	ldr	r0, [pc, #240]	@ (80011e8 <ethernetif_init+0x1ac>)
 80010f8:	f007 fcc6 	bl	8008a88 <xTaskCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80010fc:	493b      	ldr	r1, [pc, #236]	@ (80011ec <ethernetif_init+0x1b0>)
 80010fe:	483c      	ldr	r0, [pc, #240]	@ (80011f0 <ethernetif_init+0x1b4>)
 8001100:	f7ff fbdc 	bl	80008bc <LAN8742_RegisterBusIO>
  PHYInit_result = LAN8742_Init(&LAN8742);
 8001104:	483a      	ldr	r0, [pc, #232]	@ (80011f0 <ethernetif_init+0x1b4>)
 8001106:	f7ff fbed 	bl	80008e4 <LAN8742_Init>
  if(PHYInit_result != LAN8742_STATUS_OK)
 800110a:	4605      	mov	r5, r0
 800110c:	b190      	cbz	r0, 8001134 <ethernetif_init+0xf8>
    netif_set_link_down(netif);
 800110e:	4620      	mov	r0, r4
    printf(PHYLinkStateStr[(uint8_t)(PHYInit_result + 5)]);
 8001110:	3505      	adds	r5, #5
    netif_set_link_down(netif);
 8001112:	f00b f98f 	bl	800c434 <netif_set_link_down>
    netif_set_down(netif);
 8001116:	4620      	mov	r0, r4
 8001118:	f00b f969 	bl	800c3ee <netif_set_down>
    printf("STM32F7xx LAN8742 init status != OK ! ");
 800111c:	4835      	ldr	r0, [pc, #212]	@ (80011f4 <ethernetif_init+0x1b8>)
    printf(PHYLinkStateStr[(uint8_t)(PHYInit_result + 5)]);
 800111e:	b2ed      	uxtb	r5, r5
    printf("STM32F7xx LAN8742 init status != OK ! ");
 8001120:	f014 fd34 	bl	8015b8c <iprintf>
    printf(PHYLinkStateStr[(uint8_t)(PHYInit_result + 5)]);
 8001124:	4834      	ldr	r0, [pc, #208]	@ (80011f8 <ethernetif_init+0x1bc>)
 8001126:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800112a:	f014 fd2f 	bl	8015b8c <iprintf>
}
 800112e:	2000      	movs	r0, #0
 8001130:	b01e      	add	sp, #120	@ 0x78
 8001132:	bd70      	pop	{r4, r5, r6, pc}
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001134:	482e      	ldr	r0, [pc, #184]	@ (80011f0 <ethernetif_init+0x1b4>)
 8001136:	f7ff fc02 	bl	800093e <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800113a:	2801      	cmp	r0, #1
 800113c:	dc14      	bgt.n	8001168 <ethernetif_init+0x12c>
    netif_set_link_down(netif);
 800113e:	4620      	mov	r0, r4
 8001140:	f00b f978 	bl	800c434 <netif_set_link_down>
    netif_set_down(netif);
 8001144:	4620      	mov	r0, r4
 8001146:	f00b f952 	bl	800c3ee <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 800114a:	f000 fe59 	bl	8001e00 <HAL_GetREVID>
 800114e:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8001152:	d1ec      	bne.n	800112e <ethernetif_init+0xf2>
    xTaskCreate(RMII_Thread, 		/* Function that implements the task. */
 8001154:	2203      	movs	r2, #3
 8001156:	2300      	movs	r3, #0
 8001158:	4928      	ldr	r1, [pc, #160]	@ (80011fc <ethernetif_init+0x1c0>)
 800115a:	4829      	ldr	r0, [pc, #164]	@ (8001200 <ethernetif_init+0x1c4>)
 800115c:	e9cd 2300 	strd	r2, r3, [sp]
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	f007 fc91 	bl	8008a88 <xTaskCreate>
 8001166:	e7e2      	b.n	800112e <ethernetif_init+0xf2>
    switch (PHYLinkState)
 8001168:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 800116a:	a905      	add	r1, sp, #20
 800116c:	2802      	cmp	r0, #2
 800116e:	bf93      	iteet	ls
 8001170:	4b24      	ldrls	r3, [pc, #144]	@ (8001204 <ethernetif_init+0x1c8>)
    switch (PHYLinkState)
 8001172:	f44f 4580 	movhi.w	r5, #16384	@ 0x4000
 8001176:	f44f 6600 	movhi.w	r6, #2048	@ 0x800
 800117a:	f833 6010 	ldrhls.w	r6, [r3, r0, lsl #1]
 800117e:	bf9c      	itt	ls
 8001180:	4b21      	ldrls	r3, [pc, #132]	@ (8001208 <ethernetif_init+0x1cc>)
 8001182:	f833 5010 	ldrhls.w	r5, [r3, r0, lsl #1]
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8001186:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <ethernetif_init+0x184>)
 8001188:	f001 fbc1 	bl	800290e <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800118c:	a905      	add	r1, sp, #20
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <ethernetif_init+0x184>)
    MACConf.Speed = speed;
 8001190:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8001194:	f001 fc21 	bl	80029da <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8001198:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <ethernetif_init+0x184>)
 800119a:	f001 f9a7 	bl	80024ec <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800119e:	4620      	mov	r0, r4
 80011a0:	f00b f918 	bl	800c3d4 <netif_set_up>
    netif_set_link_up(netif);
 80011a4:	4620      	mov	r0, r4
 80011a6:	f00b f930 	bl	800c40a <netif_set_link_up>
 80011aa:	e7ce      	b.n	800114a <ethernetif_init+0x10e>
 80011ac:	080169ac 	.word	0x080169ac
 80011b0:	080169c5 	.word	0x080169c5
 80011b4:	080169d3 	.word	0x080169d3
 80011b8:	08010b65 	.word	0x08010b65
 80011bc:	08000e99 	.word	0x08000e99
 80011c0:	200022cc 	.word	0x200022cc
 80011c4:	40028000 	.word	0x40028000
 80011c8:	20002188 	.word	0x20002188
 80011cc:	200020e8 	.word	0x200020e8
 80011d0:	000205dc 	.word	0x000205dc
 80011d4:	0801916c 	.word	0x0801916c
 80011d8:	20002298 	.word	0x20002298
 80011dc:	20002380 	.word	0x20002380
 80011e0:	2000237c 	.word	0x2000237c
 80011e4:	080169fb 	.word	0x080169fb
 80011e8:	08000fe5 	.word	0x08000fe5
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20002274 	.word	0x20002274
 80011f4:	08016a01 	.word	0x08016a01
 80011f8:	0801900c 	.word	0x0801900c
 80011fc:	08016a28 	.word	0x08016a28
 8001200:	08000f19 	.word	0x08000f19
 8001204:	08019006 	.word	0x08019006
 8001208:	08019000 	.word	0x08019000

0800120c <HAL_ETH_MspInit>:
{
 800120c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4c36      	ldr	r4, [pc, #216]	@ (80012e8 <HAL_ETH_MspInit+0xdc>)
{
 8001210:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001212:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001214:	4835      	ldr	r0, [pc, #212]	@ (80012ec <HAL_ETH_MspInit+0xe0>)
 8001216:	a907      	add	r1, sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001218:	9509      	str	r5, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6323      	str	r3, [r4, #48]	@ 0x30
 8001222:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	6323      	str	r3, [r4, #48]	@ 0x30
 8001234:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6323      	str	r3, [r4, #48]	@ 0x30
 8001246:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001250:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001256:	6323      	str	r3, [r4, #48]	@ 0x30
 8001258:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800125a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800126a:	230b      	movs	r3, #11
 800126c:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800126e:	2386      	movs	r3, #134	@ 0x86
 8001270:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001272:	f001 fbed 	bl	8002a50 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8001276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800127a:	a907      	add	r1, sp, #28
 800127c:	481c      	ldr	r0, [pc, #112]	@ (80012f0 <HAL_ETH_MspInit+0xe4>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 800127e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001280:	f001 fbe6 	bl	8002a50 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8001284:	2332      	movs	r3, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001286:	a907      	add	r1, sp, #28
 8001288:	481a      	ldr	r0, [pc, #104]	@ (80012f4 <HAL_ETH_MspInit+0xe8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800128a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800128c:	f001 fbe0 	bl	8002a50 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13;
 8001290:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001294:	a907      	add	r1, sp, #28
 8001296:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <HAL_ETH_MspInit+0xec>)
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13;
 8001298:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800129a:	f001 fbd9 	bl	8002a50 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800129e:	462a      	mov	r2, r5
 80012a0:	2107      	movs	r1, #7
 80012a2:	203d      	movs	r0, #61	@ 0x3d
 80012a4:	f000 fdc4 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80012a8:	203d      	movs	r0, #61	@ 0x3d
 80012aa:	f000 fdf3 	bl	8001e94 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 80012ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80012b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012bc:	9304      	str	r3, [sp, #16]
 80012be:	9b04      	ldr	r3, [sp, #16]
 80012c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80012c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ce:	9305      	str	r3, [sp, #20]
 80012d0:	9b05      	ldr	r3, [sp, #20]
 80012d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80012da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012e0:	9306      	str	r3, [sp, #24]
 80012e2:	9b06      	ldr	r3, [sp, #24]
}
 80012e4:	b00d      	add	sp, #52	@ 0x34
 80012e6:	bd30      	pop	{r4, r5, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40021800 	.word	0x40021800

080012fc <HAL_ETH_RxCpltCallback>:
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012fc:	2300      	movs	r3, #0
{
 80012fe:	b507      	push	{r0, r1, r2, lr}
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001300:	9301      	str	r3, [sp, #4]
  xSemaphoreGiveFromISR(RxPktSemaphore, &xHigherPriorityTaskWoken);
 8001302:	a901      	add	r1, sp, #4
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_ETH_RxCpltCallback+0x30>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f007 f8b1 	bl	800846e <xQueueGiveFromISR>
  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800130c:	9b01      	ldr	r3, [sp, #4]
 800130e:	b14b      	cbz	r3, 8001324 <HAL_ETH_RxCpltCallback+0x28>
 8001310:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001318:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	f3bf 8f6f 	isb	sy
}
 8001324:	b003      	add	sp, #12
 8001326:	f85d fb04 	ldr.w	pc, [sp], #4
 800132a:	bf00      	nop
 800132c:	20002380 	.word	0x20002380

08001330 <HAL_ETH_TxCpltCallback>:
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001330:	2300      	movs	r3, #0
{
 8001332:	b507      	push	{r0, r1, r2, lr}
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001334:	9301      	str	r3, [sp, #4]
  xSemaphoreGiveFromISR(TxPktSemaphore, &xHigherPriorityTaskWoken);
 8001336:	a901      	add	r1, sp, #4
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_ETH_TxCpltCallback+0x30>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	f007 f897 	bl	800846e <xQueueGiveFromISR>
  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001340:	9b01      	ldr	r3, [sp, #4]
 8001342:	b14b      	cbz	r3, 8001358 <HAL_ETH_TxCpltCallback+0x28>
 8001344:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800134c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	b003      	add	sp, #12
 800135a:	f85d fb04 	ldr.w	pc, [sp], #4
 800135e:	bf00      	nop
 8001360:	2000237c 	.word	0x2000237c

08001364 <HAL_ETH_ErrorCallback>:
{
 8001364:	b507      	push	{r0, r1, r2, lr}
  if ((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8001366:	f001 fb6f 	bl	8002a48 <HAL_ETH_GetDMAError>
 800136a:	0603      	lsls	r3, r0, #24
 800136c:	d512      	bpl.n	8001394 <HAL_ETH_ErrorCallback+0x30>
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800136e:	2300      	movs	r3, #0
    xSemaphoreGiveFromISR(RxPktSemaphore, &xHigherPriorityTaskWoken); // 释放一个信号量，带中断保护
 8001370:	a901      	add	r1, sp, #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001372:	9301      	str	r3, [sp, #4]
    xSemaphoreGiveFromISR(RxPktSemaphore, &xHigherPriorityTaskWoken); // 释放一个信号量，带中断保护
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_ETH_ErrorCallback+0x38>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f007 f879 	bl	800846e <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);  // 使能PendSV中断
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	b14b      	cbz	r3, 8001394 <HAL_ETH_ErrorCallback+0x30>
 8001380:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001388:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800138c:	f3bf 8f4f 	dsb	sy
 8001390:	f3bf 8f6f 	isb	sy
}
 8001394:	b003      	add	sp, #12
 8001396:	f85d fb04 	ldr.w	pc, [sp], #4
 800139a:	bf00      	nop
 800139c:	20002380 	.word	0x20002380

080013a0 <ethernet_link_thread>:
{
 80013a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t PHYLinkStatetemp = 0;
 80013a4:	f04f 0900 	mov.w	r9, #0
{
 80013a8:	b09b      	sub	sp, #108	@ 0x6c
      printf("STM32F7xx PHYLink State : ");
 80013aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 8001490 <ethernet_link_thread+0xf0>
{
 80013ae:	4605      	mov	r5, r0
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80013b0:	46c8      	mov	r8, r9
 80013b2:	464f      	mov	r7, r9
 80013b4:	464e      	mov	r6, r9
      printf(PHYLinkStateStr[(uint16_t)(PHYLinkState + 5)]);
 80013b6:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8001494 <ethernet_link_thread+0xf4>
  ETH_MACConfigTypeDef MACConf = {0};
 80013ba:	2264      	movs	r2, #100	@ 0x64
 80013bc:	2100      	movs	r1, #0
 80013be:	a801      	add	r0, sp, #4
 80013c0:	f014 fd56 	bl	8015e70 <memset>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80013c4:	4829      	ldr	r0, [pc, #164]	@ (800146c <ethernet_link_thread+0xcc>)
 80013c6:	f7ff faba 	bl	800093e <LAN8742_GetLinkState>
    if(PHYLinkState != PHYLinkStatetemp)
 80013ca:	4581      	cmp	r9, r0
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80013cc:	4604      	mov	r4, r0
    if(PHYLinkState != PHYLinkStatetemp)
 80013ce:	d008      	beq.n	80013e2 <ethernet_link_thread+0x42>
      printf("STM32F7xx PHYLink State : ");
 80013d0:	4650      	mov	r0, sl
 80013d2:	f014 fbdb 	bl	8015b8c <iprintf>
      printf(PHYLinkStateStr[(uint16_t)(PHYLinkState + 5)]);
 80013d6:	1d60      	adds	r0, r4, #5
 80013d8:	b280      	uxth	r0, r0
 80013da:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
 80013de:	f014 fbd5 	bl	8015b8c <iprintf>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80013e2:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 80013e6:	075a      	lsls	r2, r3, #29
 80013e8:	d518      	bpl.n	800141c <ethernet_link_thread+0x7c>
 80013ea:	2c01      	cmp	r4, #1
 80013ec:	dc14      	bgt.n	8001418 <ethernet_link_thread+0x78>
      HAL_ETH_Stop_IT(&EthHandle);
 80013ee:	4820      	ldr	r0, [pc, #128]	@ (8001470 <ethernet_link_thread+0xd0>)
 80013f0:	f001 f8bc 	bl	800256c <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 80013f4:	2200      	movs	r2, #0
 80013f6:	491f      	ldr	r1, [pc, #124]	@ (8001474 <ethernet_link_thread+0xd4>)
 80013f8:	4628      	mov	r0, r5
 80013fa:	f009 fed1 	bl	800b1a0 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 80013fe:	2200      	movs	r2, #0
 8001400:	491d      	ldr	r1, [pc, #116]	@ (8001478 <ethernet_link_thread+0xd8>)
 8001402:	4628      	mov	r0, r5
 8001404:	f009 fecc 	bl	800b1a0 <netifapi_netif_common>
      printf("ETH and netif down!!!\r\n");
 8001408:	481c      	ldr	r0, [pc, #112]	@ (800147c <ethernet_link_thread+0xdc>)
 800140a:	f014 fc27 	bl	8015c5c <puts>
    vTaskDelay(100);
 800140e:	2064      	movs	r0, #100	@ 0x64
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001410:	46a1      	mov	r9, r4
    vTaskDelay(100);
 8001412:	f007 fe31 	bl	8009078 <vTaskDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001416:	e7d5      	b.n	80013c4 <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001418:	075b      	lsls	r3, r3, #29
 800141a:	d4f8      	bmi.n	800140e <ethernet_link_thread+0x6e>
 800141c:	2c01      	cmp	r4, #1
 800141e:	ddf6      	ble.n	800140e <ethernet_link_thread+0x6e>
      switch (PHYLinkState)
 8001420:	1ea3      	subs	r3, r4, #2
 8001422:	2b03      	cmp	r3, #3
 8001424:	d81e      	bhi.n	8001464 <ethernet_link_thread+0xc4>
 8001426:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <ethernet_link_thread+0xe0>)
 8001428:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 800142c:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <ethernet_link_thread+0xe4>)
 800142e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8001432:	a901      	add	r1, sp, #4
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <ethernet_link_thread+0xd0>)
 8001436:	f001 fa6a 	bl	800290e <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800143a:	a901      	add	r1, sp, #4
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <ethernet_link_thread+0xd0>)
        netifapi_netif_set_link_up(netif);
 800143e:	2601      	movs	r6, #1
        MACConf.Speed = speed;
 8001440:	e9cd 7806 	strd	r7, r8, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8001444:	f001 fac9 	bl	80029da <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <ethernet_link_thread+0xd0>)
 800144a:	f001 f84f 	bl	80024ec <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 800144e:	2200      	movs	r2, #0
 8001450:	490d      	ldr	r1, [pc, #52]	@ (8001488 <ethernet_link_thread+0xe8>)
 8001452:	4628      	mov	r0, r5
 8001454:	f009 fea4 	bl	800b1a0 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8001458:	2200      	movs	r2, #0
 800145a:	490c      	ldr	r1, [pc, #48]	@ (800148c <ethernet_link_thread+0xec>)
 800145c:	4628      	mov	r0, r5
 800145e:	f009 fe9f 	bl	800b1a0 <netifapi_netif_common>
 8001462:	e7d4      	b.n	800140e <ethernet_link_thread+0x6e>
      if(linkchanged)
 8001464:	2e00      	cmp	r6, #0
 8001466:	d0d2      	beq.n	800140e <ethernet_link_thread+0x6e>
 8001468:	e7e3      	b.n	8001432 <ethernet_link_thread+0x92>
 800146a:	bf00      	nop
 800146c:	20002274 	.word	0x20002274
 8001470:	200022cc 	.word	0x200022cc
 8001474:	0800c3ef 	.word	0x0800c3ef
 8001478:	0800c435 	.word	0x0800c435
 800147c:	08016a51 	.word	0x08016a51
 8001480:	08018ff8 	.word	0x08018ff8
 8001484:	08018ff0 	.word	0x08018ff0
 8001488:	0800c3d5 	.word	0x0800c3d5
 800148c:	0800c40b 	.word	0x0800c40b
 8001490:	08016a36 	.word	0x08016a36
 8001494:	0801900c 	.word	0x0801900c

08001498 <HAL_ETH_RxAllocateCallback>:
{
 8001498:	b513      	push	{r0, r1, r4, lr}
 800149a:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_ETH_RxAllocateCallback+0x38>)
 800149e:	f00a fe67 	bl	800c170 <memp_malloc_pool>
  if (p)
 80014a2:	4603      	mov	r3, r0
 80014a4:	b178      	cbz	r0, 80014c6 <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80014a6:	f100 0214 	add.w	r2, r0, #20
    p->custom_free_function = pbuf_free_custom;
 80014aa:	490a      	ldr	r1, [pc, #40]	@ (80014d4 <HAL_ETH_RxAllocateCallback+0x3c>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80014ac:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80014ae:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80014b0:	f44f 61bf 	mov.w	r1, #1528	@ 0x5f8
 80014b4:	e9cd 2100 	strd	r2, r1, [sp]
 80014b8:	2100      	movs	r1, #0
 80014ba:	2241      	movs	r2, #65	@ 0x41
 80014bc:	4608      	mov	r0, r1
 80014be:	f00b f83f 	bl	800c540 <pbuf_alloced_custom>
}
 80014c2:	b002      	add	sp, #8
 80014c4:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <HAL_ETH_RxAllocateCallback+0x40>)
 80014c8:	2101      	movs	r1, #1
    *buff = NULL;
 80014ca:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 80014cc:	7011      	strb	r1, [r2, #0]
}
 80014ce:	e7f8      	b.n	80014c2 <HAL_ETH_RxAllocateCallback+0x2a>
 80014d0:	0801916c 	.word	0x0801916c
 80014d4:	08000fb1 	.word	0x08000fb1
 80014d8:	20002384 	.word	0x20002384

080014dc <HAL_ETH_RxLinkCallback>:
{
 80014dc:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 80014de:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80014e0:	f1a2 0414 	sub.w	r4, r2, #20
  p->len = Length;
 80014e4:	f822 3c0a 	strh.w	r3, [r2, #-10]
  p->next = NULL;
 80014e8:	f842 5c14 	str.w	r5, [r2, #-20]
  p->tot_len = 0;
 80014ec:	f822 5c0c 	strh.w	r5, [r2, #-12]
  if (!*ppStart)
 80014f0:	6802      	ldr	r2, [r0, #0]
 80014f2:	b922      	cbnz	r2, 80014fe <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 80014f4:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 80014f6:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 80014f8:	6802      	ldr	r2, [r0, #0]
 80014fa:	b91a      	cbnz	r2, 8001504 <HAL_ETH_RxLinkCallback+0x28>
}
 80014fc:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 80014fe:	680a      	ldr	r2, [r1, #0]
 8001500:	6014      	str	r4, [r2, #0]
 8001502:	e7f8      	b.n	80014f6 <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8001504:	8911      	ldrh	r1, [r2, #8]
 8001506:	4419      	add	r1, r3
 8001508:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	e7f5      	b.n	80014fa <HAL_ETH_RxLinkCallback+0x1e>

0800150e <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 800150e:	f00b b85f 	b.w	800c5d0 <pbuf_free>
	...

08001514 <http_server_netconn_thread>:
  /* Bind to port 80 (HTTP) with default IP address */
#if LWIP_IPV6
  conn = netconn_new(NETCONN_TCP_IPV6);
  netconn_bind(conn, IP6_ADDR_ANY, 80);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_TCP);
 8001514:	2200      	movs	r2, #0
 8001516:	2010      	movs	r0, #16
{
 8001518:	b570      	push	{r4, r5, r6, lr}
  conn = netconn_new(NETCONN_TCP);
 800151a:	4611      	mov	r1, r2
{
 800151c:	b086      	sub	sp, #24
  conn = netconn_new(NETCONN_TCP);
 800151e:	f008 fc77 	bl	8009e10 <netconn_new_with_proto_and_callback>
 8001522:	4605      	mov	r5, r0
  netconn_bind(conn, IP_ADDR_ANY, 80);
 8001524:	2250      	movs	r2, #80	@ 0x50
 8001526:	4925      	ldr	r1, [pc, #148]	@ (80015bc <http_server_netconn_thread+0xa8>)
 8001528:	f008 fce0 	bl	8009eec <netconn_bind>
#endif /* LWIP_IPV6 */
  LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 800152c:	2d00      	cmp	r5, #0
 800152e:	d042      	beq.n	80015b6 <http_server_netconn_thread+0xa2>

  /* Put the connection into LISTEN state */
  netconn_listen(conn);
 8001530:	21ff      	movs	r1, #255	@ 0xff
 8001532:	4628      	mov	r0, r5
 8001534:	f008 fcf4 	bl	8009f20 <netconn_listen_with_backlog>
  } while(err == ERR_OK);
  */
  while(1) 
  {
	/* accept any icoming connection */
	err = netconn_accept(conn, &newconn);
 8001538:	a903      	add	r1, sp, #12
 800153a:	4628      	mov	r0, r5
 800153c:	f008 fd7c 	bl	800a038 <netconn_accept>
	if(err == ERR_OK)
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f9      	bne.n	8001538 <http_server_netconn_thread+0x24>
	{
	  /* serve connection */
	  http_server_netconn_serve(newconn);
 8001544:	9e03      	ldr	r6, [sp, #12]
  err = netconn_recv(conn, &inbuf);
 8001546:	a904      	add	r1, sp, #16
 8001548:	4630      	mov	r0, r6
 800154a:	f008 fe67 	bl	800a21c <netconn_recv>
  if (err == ERR_OK) {
 800154e:	4604      	mov	r4, r0
 8001550:	bb38      	cbnz	r0, 80015a2 <http_server_netconn_thread+0x8e>
    netbuf_data(inbuf, (void**)&buf, &buflen);
 8001552:	f10d 020a 	add.w	r2, sp, #10
 8001556:	a905      	add	r1, sp, #20
 8001558:	9804      	ldr	r0, [sp, #16]
 800155a:	f009 fe02 	bl	800b162 <netbuf_data>
    if (buflen>=5 &&
 800155e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d91d      	bls.n	80015a2 <http_server_netconn_thread+0x8e>
        buf[0]=='G' &&
 8001566:	9b05      	ldr	r3, [sp, #20]
    if (buflen>=5 &&
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	2a47      	cmp	r2, #71	@ 0x47
 800156c:	d119      	bne.n	80015a2 <http_server_netconn_thread+0x8e>
        buf[0]=='G' &&
 800156e:	785a      	ldrb	r2, [r3, #1]
 8001570:	2a45      	cmp	r2, #69	@ 0x45
 8001572:	d116      	bne.n	80015a2 <http_server_netconn_thread+0x8e>
        buf[1]=='E' &&
 8001574:	789a      	ldrb	r2, [r3, #2]
 8001576:	2a54      	cmp	r2, #84	@ 0x54
 8001578:	d113      	bne.n	80015a2 <http_server_netconn_thread+0x8e>
        buf[2]=='T' &&
 800157a:	78da      	ldrb	r2, [r3, #3]
 800157c:	2a20      	cmp	r2, #32
 800157e:	d110      	bne.n	80015a2 <http_server_netconn_thread+0x8e>
        buf[3]==' ' &&
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	2b2f      	cmp	r3, #47	@ 0x2f
 8001584:	d10d      	bne.n	80015a2 <http_server_netconn_thread+0x8e>
      netconn_write(conn, http_html_hdr, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
 8001586:	4623      	mov	r3, r4
 8001588:	222c      	movs	r2, #44	@ 0x2c
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <http_server_netconn_thread+0xac>)
 800158c:	4630      	mov	r0, r6
 800158e:	9400      	str	r4, [sp, #0]
 8001590:	f008 fd34 	bl	8009ffc <netconn_write_partly>
      netconn_write(conn, http_index_html, sizeof(http_index_html)-1, NETCONN_NOCOPY);
 8001594:	4623      	mov	r3, r4
 8001596:	22a3      	movs	r2, #163	@ 0xa3
 8001598:	490a      	ldr	r1, [pc, #40]	@ (80015c4 <http_server_netconn_thread+0xb0>)
 800159a:	4630      	mov	r0, r6
 800159c:	9400      	str	r4, [sp, #0]
 800159e:	f008 fd2d 	bl	8009ffc <netconn_write_partly>
  netconn_close(conn);
 80015a2:	4630      	mov	r0, r6
 80015a4:	f008 fd36 	bl	800a014 <netconn_close>
  netbuf_delete(inbuf);
 80015a8:	9804      	ldr	r0, [sp, #16]
 80015aa:	f009 fdc9 	bl	800b140 <netbuf_delete>
	  /* delete connection */
	  netconn_delete(newconn);
 80015ae:	9803      	ldr	r0, [sp, #12]
 80015b0:	f008 fc8e 	bl	8009ed0 <netconn_delete>
 80015b4:	e7c0      	b.n	8001538 <http_server_netconn_thread+0x24>
  LWIP_DEBUGF(HTTPD_DEBUG,
    ("http_server_netconn_thread: netconn_accept received error %d, shutting down\n",
    err));
  netconn_close(conn);
  netconn_delete(conn);
}
 80015b6:	b006      	add	sp, #24
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
 80015ba:	bf00      	nop
 80015bc:	0808f8f8 	.word	0x0808f8f8
 80015c0:	0801921c 	.word	0x0801921c
 80015c4:	08019178 	.word	0x08019178

080015c8 <http_server_netconn_init>:

/** Initialize the HTTP server (start its thread) */
void http_server_netconn_init(void)
{
  sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);
 80015c8:	2301      	movs	r3, #1
{
 80015ca:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);
 80015cc:	2200      	movs	r2, #0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4904      	ldr	r1, [pc, #16]	@ (80015e4 <http_server_netconn_init+0x1c>)
 80015d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d6:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <http_server_netconn_init+0x20>)
 80015d8:	f010 fcc6 	bl	8011f68 <sys_thread_new>
}
 80015dc:	b003      	add	sp, #12
 80015de:	f85d fb04 	ldr.w	pc, [sp], #4
 80015e2:	bf00      	nop
 80015e4:	08001515 	.word	0x08001515
 80015e8:	08016a68 	.word	0x08016a68

080015ec <lwiperf_report>:
#include "lwiperf_example.h"

static void lwiperf_report(void *arg, enum lwiperf_report_type report_type,
  const ip_addr_t* local_addr, u16_t local_port, const ip_addr_t* remote_addr, u16_t remote_port,
  u32_t bytes_transferred, u32_t ms_duration, u32_t bandwidth_kbitpsec)
{
 80015ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f0:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80015f4:	460c      	mov	r4, r1
 80015f6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(local_addr);
  LWIP_UNUSED_ARG(local_port);

  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 80015fa:	9806      	ldr	r0, [sp, #24]
{
 80015fc:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 8001600:	f00f fe36 	bl	8011270 <ip4addr_ntoa>
 8001604:	462b      	mov	r3, r5
 8001606:	4602      	mov	r2, r0
 8001608:	4621      	mov	r1, r4
 800160a:	9606      	str	r6, [sp, #24]
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <lwiperf_report+0x30>)
 800160e:	e9cd 7807 	strd	r7, r8, [sp, #28]
    (int)report_type, ipaddr_ntoa(remote_addr), (int)remote_port, bytes_transferred, ms_duration, bandwidth_kbitpsec));
}
 8001612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_PLATFORM_DIAG(("IPERF report: type=%d, remote: %s:%d, total bytes: %"U32_F", duration in ms: %"U32_F", kbits/s: %"U32_F"\n",
 8001616:	f014 bab9 	b.w	8015b8c <iprintf>
 800161a:	bf00      	nop
 800161c:	08016a7c 	.word	0x08016a7c

08001620 <lwiperf_example_init>:

void lwiperf_example_init(void)
{
  lwiperf_start_tcp_server_default(lwiperf_report, NULL);
 8001620:	2100      	movs	r1, #0
 8001622:	4801      	ldr	r0, [pc, #4]	@ (8001628 <lwiperf_example_init+0x8>)
 8001624:	f00a ba72 	b.w	800bb0c <lwiperf_start_tcp_server_default>
 8001628:	080015ed 	.word	0x080015ed

0800162c <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 800162e:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001632:	4302      	orrs	r2, r0
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001638:	4003      	ands	r3, r0
 800163a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800163c:	9b01      	ldr	r3, [sp, #4]
}
 800163e:	b002      	add	sp, #8
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <lwipinitTask>:
#endif
}
void lwipinitTask( void *pvParameters )
{
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001648:	2100      	movs	r1, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800164a:	2400      	movs	r4, #0
{
 800164c:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 800164e:	4608      	mov	r0, r1
{
 8001650:	b089      	sub	sp, #36	@ 0x24
  tcpip_init(NULL, NULL);
 8001652:	f009 fe77 	bl	800b344 <tcpip_init>
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8001656:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <lwipinitTask+0x6c>)
 8001658:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800165c:	a905      	add	r1, sp, #20
 800165e:	4816      	ldr	r0, [pc, #88]	@ (80016b8 <lwipinitTask+0x70>)
 8001660:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8001662:	e9cd 2305 	strd	r2, r3, [sp, #20]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8001666:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800166a:	aa06      	add	r2, sp, #24
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800166c:	33c1      	adds	r3, #193	@ 0xc1
 800166e:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <lwipinitTask+0x74>)
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <lwipinitTask+0x78>)
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	ab07      	add	r3, sp, #28
 800167a:	f00a fe27 	bl	800c2cc <netif_add>
  netif_set_default(&gnetif);
 800167e:	480e      	ldr	r0, [pc, #56]	@ (80016b8 <lwipinitTask+0x70>)
 8001680:	f00a fea2 	bl	800c3c8 <netif_set_default>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001684:	490f      	ldr	r1, [pc, #60]	@ (80016c4 <lwipinitTask+0x7c>)
 8001686:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <lwipinitTask+0x70>)
 8001688:	f00a fee1 	bl	800c44e <netif_set_link_callback>
  ethernet_link_status_updated(&gnetif);
 800168c:	480a      	ldr	r0, [pc, #40]	@ (80016b8 <lwipinitTask+0x70>)
 800168e:	f7ff fbff 	bl	8000e90 <ethernet_link_status_updated>
  xTaskCreate(ethernet_link_thread, "EthLink", configMINIMAL_STACK_SIZE * 2, &gnetif, 0, NULL);
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <lwipinitTask+0x70>)
 8001694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001698:	490b      	ldr	r1, [pc, #44]	@ (80016c8 <lwipinitTask+0x80>)
 800169a:	480c      	ldr	r0, [pc, #48]	@ (80016cc <lwipinitTask+0x84>)
 800169c:	e9cd 4400 	strd	r4, r4, [sp]
 80016a0:	f007 f9f2 	bl	8008a88 <xTaskCreate>
  /* Initialize the LwIP stack  and io init*/
  netif_config();
  /* Initialize webserver demo */
  http_server_netconn_init();
 80016a4:	f7ff ff90 	bl	80015c8 <http_server_netconn_init>
  /* Initialize tpcserver demo 性能测试 */
  lwiperf_example_init();
 80016a8:	f7ff ffba 	bl	8001620 <lwiperf_example_init>
  for (;;)
  {
    /* Delete the Init Thread */
    vTaskDelete(NULL);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f007 fad5 	bl	8008c5c <vTaskDelete>
  for (;;)
 80016b2:	e7fb      	b.n	80016ac <lwipinitTask+0x64>
 80016b4:	0a00a8c0 	.word	0x0a00a8c0
 80016b8:	20006058 	.word	0x20006058
 80016bc:	0800b2e5 	.word	0x0800b2e5
 80016c0:	0800103d 	.word	0x0800103d
 80016c4:	08000e91 	.word	0x08000e91
 80016c8:	08016ad7 	.word	0x08016ad7
 80016cc:	080013a1 	.word	0x080013a1

080016d0 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016d0:	4a35      	ldr	r2, [pc, #212]	@ (80017a8 <SystemClock_Config+0xd8>)
 80016d2:	6813      	ldr	r3, [r2, #0]
 80016d4:	f023 030f 	bic.w	r3, r3, #15
 80016d8:	f043 0307 	orr.w	r3, r3, #7
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016e0:	6813      	ldr	r3, [r2, #0]
 80016e2:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_7)
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d1fa      	bne.n	80016e0 <SystemClock_Config+0x10>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016ea:	4b30      	ldr	r3, [pc, #192]	@ (80017ac <SystemClock_Config+0xdc>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80016f2:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80016fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80016fc:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001706:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800170a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001714:	681a      	ldr	r2, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 8001716:	0790      	lsls	r0, r2, #30
 8001718:	d5fc      	bpl.n	8001714 <SystemClock_Config+0x44>
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	4a24      	ldr	r2, [pc, #144]	@ (80017b0 <SystemClock_Config+0xe0>)
 800171e:	400a      	ands	r2, r1
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8001720:	4924      	ldr	r1, [pc, #144]	@ (80017b4 <SystemClock_Config+0xe4>)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8001722:	f442 5258 	orr.w	r2, r2, #13824	@ 0x3600
 8001726:	f042 0208 	orr.w	r2, r2, #8
 800172a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4011      	ands	r1, r2
 8001730:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <SystemClock_Config+0xe8>)
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800173c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <SystemClock_Config+0xec>)
 8001740:	681a      	ldr	r2, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8001742:	0191      	lsls	r1, r2, #6
 8001744:	d5fc      	bpl.n	8001740 <SystemClock_Config+0x70>
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 8001746:	4919      	ldr	r1, [pc, #100]	@ (80017ac <SystemClock_Config+0xdc>)
 8001748:	684a      	ldr	r2, [r1, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800174a:	0452      	lsls	r2, r2, #17
 800174c:	d5fc      	bpl.n	8001748 <SystemClock_Config+0x78>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800174e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001750:	4c1a      	ldr	r4, [pc, #104]	@ (80017bc <SystemClock_Config+0xec>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001752:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001756:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800175e:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8001762:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800176a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800176e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	f022 0203 	bic.w	r2, r2, #3
 8001776:	f042 0202 	orr.w	r2, r2, #2
 800177a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800177c:	68a3      	ldr	r3, [r4, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001782:	2b08      	cmp	r3, #8
 8001784:	d1fa      	bne.n	800177c <SystemClock_Config+0xac>
  LL_SetSystemCoreClock(216000000);
 8001786:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <SystemClock_Config+0xf0>)
 8001788:	f001 febe 	bl	8003508 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800178c:	200f      	movs	r0, #15
 800178e:	f000 f9fd 	bl	8001b8c <HAL_InitTick>
 8001792:	b108      	cbz	r0, 8001798 <SystemClock_Config+0xc8>
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001796:	e7fe      	b.n	8001796 <SystemClock_Config+0xc6>
  MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE, Prescaler);
 8001798:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800179c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
}
 80017a4:	bd10      	pop	{r4, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40007000 	.word	0x40007000
 80017b0:	ffbc8000 	.word	0xffbc8000
 80017b4:	f0bf8000 	.word	0xf0bf8000
 80017b8:	09003608 	.word	0x09003608
 80017bc:	40023800 	.word	0x40023800
 80017c0:	0cdfe600 	.word	0x0cdfe600

080017c4 <MX_LED_Init>:
{
 80017c4:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017c6:	4d0c      	ldr	r5, [pc, #48]	@ (80017f8 <MX_LED_Init+0x34>)
  LED1_GPIO_CLK_ENABLE();
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7ff ff2f 	bl	800162c <LL_AHB1_GRP1_EnableClock>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	2201      	movs	r2, #1
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	fa92 f0a2 	rbit	r0, r2
 80017d6:	fab0 f080 	clz	r0, r0
 80017da:	fa92 f1a2 	rbit	r1, r2
 80017de:	2403      	movs	r4, #3
 80017e0:	4090      	lsls	r0, r2
 80017e2:	fab1 f181 	clz	r1, r1
 80017e6:	fa04 f000 	lsl.w	r0, r4, r0
 80017ea:	4091      	lsls	r1, r2
 80017ec:	ea23 0300 	bic.w	r3, r3, r0
 80017f0:	408a      	lsls	r2, r1
 80017f2:	4313      	orrs	r3, r2
 80017f4:	602b      	str	r3, [r5, #0]
}
 80017f6:	bd38      	pop	{r3, r4, r5, pc}
 80017f8:	40020400 	.word	0x40020400

080017fc <main>:
{
 80017fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001800:	b091      	sub	sp, #68	@ 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001802:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8001804:	f000 fb54 	bl	8001eb0 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001808:	2301      	movs	r3, #1
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800180a:	f240 1501 	movw	r5, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800180e:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001810:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001814:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001818:	950c      	str	r5, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800181a:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800181e:	f000 fb65 	bl	8001eec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001822:	4ab7      	ldr	r2, [pc, #732]	@ (8001b00 <main+0x304>)
 8001824:	4bb7      	ldr	r3, [pc, #732]	@ (8001b04 <main+0x308>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001826:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001828:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800182c:	940c      	str	r4, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800182e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001832:	f000 fb5b 	bl	8001eec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001836:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB; //MPU_REGION_SIZE_1KB
 800183a:	49b3      	ldr	r1, [pc, #716]	@ (8001b08 <main+0x30c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800183c:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800183e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB; //MPU_REGION_SIZE_1KB
 8001842:	4bb2      	ldr	r3, [pc, #712]	@ (8001b0c <main+0x310>)
 8001844:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001848:	f04f 2301 	mov.w	r3, #16777472	@ 0x1000100
 800184c:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800184e:	f000 fb4d 	bl	8001eec <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001852:	2004      	movs	r0, #4
 8001854:	f000 fb3a 	bl	8001ecc <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800185c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001860:	4aab      	ldr	r2, [pc, #684]	@ (8001b10 <main+0x314>)
 8001862:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800186a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800186e:	6953      	ldr	r3, [r2, #20]
 8001870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001874:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001876:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800187a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800187e:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001882:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001886:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800188a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800188e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001892:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001896:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001898:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800189c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800189e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80018a2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018a4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80018a8:	d2f9      	bcs.n	800189e <main+0xa2>
    } while(sets-- != 0U);
 80018aa:	3b20      	subs	r3, #32
 80018ac:	f113 0f20 	cmn.w	r3, #32
 80018b0:	d1f2      	bne.n	8001898 <main+0x9c>
 80018b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018b6:	6953      	ldr	r3, [r2, #20]
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018c2:	f3bf 8f6f 	isb	sy
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80018c6:	2400      	movs	r4, #0
  HAL_Init();
 80018c8:	f000 fa6b 	bl	8001da2 <HAL_Init>
  SystemClock_Config();
 80018cc:	f7ff ff00 	bl	80016d0 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	2218      	movs	r2, #24
 80018d2:	4621      	mov	r1, r4
 80018d4:	a809      	add	r0, sp, #36	@ 0x24
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80018d6:	f88d 4013 	strb.w	r4, [sp, #19]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f014 fac9 	bl	8015e70 <memset>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80018de:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018e0:	4d8c      	ldr	r5, [pc, #560]	@ (8001b14 <main+0x318>)
 80018e2:	f7ff fea3 	bl	800162c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80018e6:	2080      	movs	r0, #128	@ 0x80
 80018e8:	f7ff fea0 	bl	800162c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fe9d 	bl	800162c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018f2:	2002      	movs	r0, #2
 80018f4:	f7ff fe9a 	bl	800162c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80018f8:	2008      	movs	r0, #8
 80018fa:	f7ff fe97 	bl	800162c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80018fe:	2040      	movs	r0, #64	@ 0x40
 8001900:	f7ff fe94 	bl	800162c <LL_AHB1_GRP1_EnableClock>
 8001904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001908:	f8df 9234 	ldr.w	r9, [pc, #564]	@ 8001b40 <main+0x344>
 800190c:	61ab      	str	r3, [r5, #24]
 800190e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001912:	4981      	ldr	r1, [pc, #516]	@ (8001b18 <main+0x31c>)
 8001914:	61ab      	str	r3, [r5, #24]
 8001916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800191a:	f8c9 3018 	str.w	r3, [r9, #24]
 800191e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001922:	61ab      	str	r3, [r5, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	23f0      	movs	r3, #240	@ 0xf0
 8001926:	694a      	ldr	r2, [r1, #20]
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f04f 0802 	mov.w	r8, #2
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  EXTI_InitStruct.LineCommand = ENABLE;
 8001938:	2601      	movs	r6, #1
 800193a:	fa08 f303 	lsl.w	r3, r8, r3
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800193e:	f44f 5a00 	mov.w	sl, #8192	@ 0x2000
  LL_EXTI_Init(&EXTI_InitStruct);
 8001942:	a803      	add	r0, sp, #12
 8001944:	4313      	orrs	r3, r2
 8001946:	614b      	str	r3, [r1, #20]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001948:	f8cd a00c 	str.w	sl, [sp, #12]
  EXTI_InitStruct.LineCommand = ENABLE;
 800194c:	f8ad 6010 	strh.w	r6, [sp, #16]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001950:	f88d 6012 	strb.w	r6, [sp, #18]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001954:	f001 fb04 	bl	8002f60 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001958:	4a70      	ldr	r2, [pc, #448]	@ (8001b1c <main+0x320>)
 800195a:	68d1      	ldr	r1, [r2, #12]
 800195c:	fa9a f3aa 	rbit	r3, sl
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	2703      	movs	r7, #3
 8001966:	40b3      	lsls	r3, r6
 8001968:	fa07 f303 	lsl.w	r3, r7, r3
 800196c:	ea21 0303 	bic.w	r3, r1, r3
 8001970:	fa9a f1aa 	rbit	r1, sl
 8001974:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001976:	6811      	ldr	r1, [r2, #0]
 8001978:	fa9a f3aa 	rbit	r3, sl
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	40b3      	lsls	r3, r6
 8001982:	fa07 f303 	lsl.w	r3, r7, r3
 8001986:	ea21 0303 	bic.w	r3, r1, r3
 800198a:	fa9a faaa 	rbit	sl, sl
 800198e:	6013      	str	r3, [r2, #0]
  LL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001990:	a909      	add	r1, sp, #36	@ 0x24
 8001992:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001994:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001996:	f04f 0b40 	mov.w	fp, #64	@ 0x40
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800199a:	f04f 0a80 	mov.w	sl, #128	@ 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800199e:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f001 fb2f 	bl	8003008 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 80019aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80019ae:	a909      	add	r1, sp, #36	@ 0x24
 80019b0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019b2:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019b4:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019b8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f001 fb24 	bl	8003008 <LL_GPIO_Init>
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019c0:	a909      	add	r1, sp, #36	@ 0x24
 80019c2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019c4:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019c6:	e9cd b609 	strd	fp, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ca:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f001 fb1b 	bl	8003008 <LL_GPIO_Init>
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019d2:	a909      	add	r1, sp, #36	@ 0x24
 80019d4:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d6:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80019d8:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80019dc:	e9cd a409 	strd	sl, r4, [sp, #36]	@ 0x24
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f001 fb12 	bl	8003008 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80019e4:	2320      	movs	r3, #32
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e6:	a909      	add	r1, sp, #36	@ 0x24
 80019e8:	484d      	ldr	r0, [pc, #308]	@ (8001b20 <main+0x324>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019ea:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80019ec:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019f0:	e9cd 3809 	strd	r3, r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019f4:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f8:	f001 fb06 	bl	8003008 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	a909      	add	r1, sp, #36	@ 0x24
 80019fe:	4848      	ldr	r0, [pc, #288]	@ (8001b20 <main+0x324>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a00:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a04:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a08:	e9cd 490d 	strd	r4, r9, [sp, #52]	@ 0x34
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0c:	f001 fafc 	bl	8003008 <LL_GPIO_Init>
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a10:	a909      	add	r1, sp, #36	@ 0x24
 8001a12:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a14:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a16:	e9cd a609 	strd	sl, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a1a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f001 faf3 	bl	8003008 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a22:	f8c5 a018 	str.w	sl, [r5, #24]
  MX_LED_Init();
 8001a26:	f7ff fecd 	bl	80017c4 <MX_LED_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a2a:	221c      	movs	r2, #28
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	a809      	add	r0, sp, #36	@ 0x24
 8001a30:	f014 fa1e 	bl	8015e70 <memset>
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001a34:	4b3b      	ldr	r3, [pc, #236]	@ (8001b24 <main+0x328>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001a36:	2008      	movs	r0, #8
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8001a38:	a903      	add	r1, sp, #12
 8001a3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  LL_USART_Init(USART3, &USART_InitStruct);
 8001a3e:	f5a5 35de 	sub.w	r5, r5, #113664	@ 0x1bc00
 8001a42:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8001a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a58:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001a5a:	9b02      	ldr	r3, [sp, #8]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001a5c:	f7ff fde6 	bl	800162c <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Pin = STLK_RX_Pin;
 8001a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8001a64:	482e      	ldr	r0, [pc, #184]	@ (8001b20 <main+0x324>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a66:	e9cd 3803 	strd	r3, r8, [sp, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a6a:	e9cd 7405 	strd	r7, r4, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a6e:	e9cd 4907 	strd	r4, r9, [sp, #28]
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f001 fac9 	bl	8003008 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_TX_Pin;
 8001a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
  LL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	a903      	add	r1, sp, #12
 8001a7c:	4828      	ldr	r0, [pc, #160]	@ (8001b20 <main+0x324>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a7e:	e9cd 3803 	strd	r3, r8, [sp, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a82:	e9cd 7405 	strd	r7, r4, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a86:	e9cd 4907 	strd	r4, r9, [sp, #28]
  LL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f001 fabd 	bl	8003008 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 8001a8e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  LL_USART_Init(USART3, &USART_InitStruct);
 8001a92:	a909      	add	r1, sp, #36	@ 0x24
 8001a94:	4628      	mov	r0, r5
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a96:	940f      	str	r4, [sp, #60]	@ 0x3c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a98:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a9c:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a9e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001aa2:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001aa6:	f001 fcb1 	bl	800340c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aaa:	686b      	ldr	r3, [r5, #4]
 8001aac:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001ab0:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ab2:	68ab      	ldr	r3, [r5, #8]
 8001ab4:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001ab8:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	4333      	orrs	r3, r6
 8001abe:	602b      	str	r3, [r5, #0]
  sd_card_fatfs_test();
 8001ac0:	f002 fd0a 	bl	80044d8 <sd_card_fatfs_test>
  usb_main();
 8001ac4:	f010 fbee 	bl	80122a4 <usb_main>
  xTaskCreate(prvButtonTask, 			/* Function that implements the task. */
 8001ac8:	4623      	mov	r3, r4
 8001aca:	4652      	mov	r2, sl
 8001acc:	4916      	ldr	r1, [pc, #88]	@ (8001b28 <main+0x32c>)
 8001ace:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <main+0x330>)
 8001ad0:	e9cd 4400 	strd	r4, r4, [sp]
 8001ad4:	f006 ffd8 	bl	8008a88 <xTaskCreate>
  xTaskCreate(prvLedBreathTask, 		/* Function that implements the task. */
 8001ad8:	4623      	mov	r3, r4
 8001ada:	4652      	mov	r2, sl
 8001adc:	4914      	ldr	r1, [pc, #80]	@ (8001b30 <main+0x334>)
 8001ade:	4815      	ldr	r0, [pc, #84]	@ (8001b34 <main+0x338>)
 8001ae0:	e9cd 4400 	strd	r4, r4, [sp]
 8001ae4:	f006 ffd0 	bl	8008a88 <xTaskCreate>
  xTaskCreate(lwipinitTask, 			/* Function that implements the task. */
 8001ae8:	4623      	mov	r3, r4
 8001aea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001aee:	4912      	ldr	r1, [pc, #72]	@ (8001b38 <main+0x33c>)
 8001af0:	4812      	ldr	r0, [pc, #72]	@ (8001b3c <main+0x340>)
 8001af2:	e9cd 4400 	strd	r4, r4, [sp]
 8001af6:	f006 ffc7 	bl	8008a88 <xTaskCreate>
  vTaskStartScheduler();
 8001afa:	f007 f90f 	bl	8008d1c <vTaskStartScheduler>
  while (1)
 8001afe:	e7fe      	b.n	8001afe <main+0x302>
 8001b00:	20078000 	.word	0x20078000
 8001b04:	0301000d 	.word	0x0301000d
 8001b08:	2007c000 	.word	0x2007c000
 8001b0c:	0300000d 	.word	0x0300000d
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08016adf 	.word	0x08016adf
 8001b2c:	08000651 	.word	0x08000651
 8001b30:	08016aea 	.word	0x08016aea
 8001b34:	0800061d 	.word	0x0800061d
 8001b38:	08016af8 	.word	0x08016af8
 8001b3c:	08001649 	.word	0x08001649
 8001b40:	40021800 	.word	0x40021800

08001b44 <UserButton_Callback>:
void UserButton_Callback(void)
 8001b44:	4770      	bx	lr

08001b46 <USART_TransferError_Callback>:
}
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM7)
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d101      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001b50:	f000 b932 	b.w	8001db8 <HAL_IncTick>
}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40001400 	.word	0x40001400

08001b5c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <HAL_MspInit+0x2c>)
{
 8001b5e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b6a:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b78:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b84:	b002      	add	sp, #8
 8001b86:	4770      	bx	lr
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_InitTick>:
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_InitTick+0x88>)
 8001b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b90:	f042 0220 	orr.w	r2, r2, #32
{
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8001b9c:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b9e:	a901      	add	r1, sp, #4
 8001ba0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001baa:	f001 f84b 	bl	8002c44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bae:	9b06      	ldr	r3, [sp, #24]
 8001bb0:	bb4b      	cbnz	r3, 8001c06 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bb2:	f001 f837 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001bb6:	4e18      	ldr	r6, [pc, #96]	@ (8001c18 <HAL_InitTick+0x8c>)
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <HAL_InitTick+0x90>)
 8001bba:	6033      	str	r3, [r6, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001bbc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001bc0:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <HAL_InitTick+0x94>)
 8001bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc8:	3b01      	subs	r3, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 8001bca:	4630      	mov	r0, r6
  htim7.Init.Prescaler = uwPrescalerValue;
 8001bcc:	6073      	str	r3, [r6, #4]
  htim7.Init.ClockDivision = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6133      	str	r3, [r6, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	60b3      	str	r3, [r6, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim7);
 8001bd6:	f001 f98f 	bl	8002ef8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001bda:	4604      	mov	r4, r0
 8001bdc:	b980      	cbnz	r0, 8001c00 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001bde:	4630      	mov	r0, r6
 8001be0:	f001 f850 	bl	8002c84 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001be4:	4604      	mov	r4, r0
 8001be6:	b958      	cbnz	r0, 8001c00 <HAL_InitTick+0x74>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001be8:	2037      	movs	r0, #55	@ 0x37
 8001bea:	f000 f953 	bl	8001e94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	2d0f      	cmp	r5, #15
 8001bf0:	d80d      	bhi.n	8001c0e <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	2037      	movs	r0, #55	@ 0x37
 8001bf8:	f000 f91a 	bl	8001e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_InitTick+0x98>)
 8001bfe:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001c00:	4620      	mov	r0, r4
 8001c02:	b008      	add	sp, #32
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c06:	f001 f80d 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8001c0a:	0040      	lsls	r0, r0, #1
 8001c0c:	e7d3      	b.n	8001bb6 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8001c0e:	2401      	movs	r4, #1
 8001c10:	e7f6      	b.n	8001c00 <HAL_InitTick+0x74>
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	2000608c 	.word	0x2000608c
 8001c1c:	40001400 	.word	0x40001400
 8001c20:	000f4240 	.word	0x000f4240
 8001c24:	2000001c 	.word	0x2000001c

08001c28 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler>

08001c2a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler>

08001c2c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler>
	...

08001c30 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  //uint32_t ulReturn;

  //ulReturn = taskENTER_CRITICAL_FROM_ISR();
  USART_IRQHandler(USART2);
 8001c30:	4801      	ldr	r0, [pc, #4]	@ (8001c38 <USART2_IRQHandler+0x8>)
 8001c32:	f7ff b855 	b.w	8000ce0 <USART_IRQHandler>
 8001c36:	bf00      	nop
 8001c38:	40004400 	.word	0x40004400

08001c3c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <BusFault_Handler>

08001c3e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <UsageFault_Handler>

08001c40 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	4770      	bx	lr
	...

08001c44 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c44:	4801      	ldr	r0, [pc, #4]	@ (8001c4c <TIM7_IRQHandler+0x8>)
 8001c46:	f001 b85f 	b.w	8002d08 <HAL_TIM_IRQHandler>
 8001c4a:	bf00      	nop
 8001c4c:	2000608c 	.word	0x2000608c

08001c50 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <EXTI15_10_IRQHandler+0x14>)
 8001c52:	695a      	ldr	r2, [r3, #20]

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001c54:	0492      	lsls	r2, r2, #18
 8001c56:	d504      	bpl.n	8001c62 <EXTI15_10_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c5c:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);

    /* Handle user button press in dedicated function */
    UserButton_Callback();
 8001c5e:	f7ff bf71 	b.w	8001b44 <UserButton_Callback>
  }
}
 8001c62:	4770      	bx	lr
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <DMA1_Stream6_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <DMA1_Stream6_IRQHandler+0x28>)
 8001c6a:	685a      	ldr	r2, [r3, #4]
  * @retval None
  */
void DMA1_Stream6_IRQHandler(void)
{

  if(LL_DMA_IsActiveFlag_TC6(DMA1))
 8001c6c:	0290      	lsls	r0, r2, #10
 8001c6e:	d506      	bpl.n	8001c7e <DMA1_Stream6_IRQHandler+0x16>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001c70:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c74:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 8001c76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c7a:	60da      	str	r2, [r3, #12]
  else if(LL_DMA_IsActiveFlag_HT6(DMA1))
  {
    /* Call Error function */
    LL_DMA_ClearFlag_HT6(DMA1);
  }
}
 8001c7c:	e007      	b.n	8001c8e <DMA1_Stream6_IRQHandler+0x26>
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
 8001c7e:	685a      	ldr	r2, [r3, #4]
  else if(LL_DMA_IsActiveFlag_TE6(DMA1))
 8001c80:	0311      	lsls	r1, r2, #12
 8001c82:	d501      	bpl.n	8001c88 <DMA1_Stream6_IRQHandler+0x20>
    USART_TransferError_Callback();
 8001c84:	f7ff bf5f 	b.w	8001b46 <USART_TransferError_Callback>
  return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF6)==(DMA_HISR_HTIF6));
 8001c88:	685a      	ldr	r2, [r3, #4]
  else if(LL_DMA_IsActiveFlag_HT6(DMA1))
 8001c8a:	02d2      	lsls	r2, r2, #11
 8001c8c:	d4f3      	bmi.n	8001c76 <DMA1_Stream6_IRQHandler+0xe>
}
 8001c8e:	4770      	bx	lr
 8001c90:	40026000 	.word	0x40026000

08001c94 <DMA1_Stream5_IRQHandler>:
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <DMA1_Stream5_IRQHandler+0x1c>)
 8001c96:	685a      	ldr	r2, [r3, #4]
  * @retval None
  */
void DMA1_Stream5_IRQHandler(void)
{

  if(LL_DMA_IsActiveFlag_TC5(DMA1))
 8001c98:	0512      	lsls	r2, r2, #20
 8001c9a:	d503      	bpl.n	8001ca4 <DMA1_Stream5_IRQHandler+0x10>
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8001c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ca0:	60da      	str	r2, [r3, #12]
}
 8001ca2:	4770      	bx	lr
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
 8001ca4:	685b      	ldr	r3, [r3, #4]
  {
    LL_DMA_ClearFlag_TC5(DMA1);
    /* Call function Reception complete Callback */
    //DMA1_ReceiveComplete_Callback();
  }
  else if(LL_DMA_IsActiveFlag_TE5(DMA1))
 8001ca6:	059b      	lsls	r3, r3, #22
 8001ca8:	d501      	bpl.n	8001cae <DMA1_Stream5_IRQHandler+0x1a>
  {
    /* Call Error function */
    USART_TransferError_Callback();
 8001caa:	f7ff bf4c 	b.w	8001b46 <USART_TransferError_Callback>
  }
}
 8001cae:	4770      	bx	lr
 8001cb0:	40026000 	.word	0x40026000

08001cb4 <ETH_IRQHandler>:

extern ETH_HandleTypeDef EthHandle;
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8001cb4:	4801      	ldr	r0, [pc, #4]	@ (8001cbc <ETH_IRQHandler+0x8>)
 8001cb6:	f000 bd71 	b.w	800279c <HAL_ETH_IRQHandler>
 8001cba:	bf00      	nop
 8001cbc:	200022cc 	.word	0x200022cc

08001cc0 <DMA2_Stream4_IRQHandler>:
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
//}

void DMA2_Stream4_IRQHandler(void)
 8001cc0:	4770      	bx	lr

08001cc2 <DMA2_Stream6_IRQHandler>:
//}

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
 8001cc2:	4770      	bx	lr

08001cc4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	4770      	bx	lr

08001cc8 <_kill>:

int _kill(int pid, int sig)
{
 8001cc8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cca:	f014 f93d 	bl	8015f48 <__errno>
 8001cce:	2316      	movs	r3, #22
 8001cd0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd6:	bd08      	pop	{r3, pc}

08001cd8 <_exit>:

void _exit (int status)
{
 8001cd8:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001cda:	f014 f935 	bl	8015f48 <__errno>
 8001cde:	2316      	movs	r3, #22
 8001ce0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001ce2:	e7fe      	b.n	8001ce2 <_exit+0xa>

08001ce4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	4770      	bx	lr

08001cea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001cee:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001cf0:	604b      	str	r3, [r1, #4]
}
 8001cf2:	4770      	bx	lr

08001cf4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	4770      	bx	lr

08001cfc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <_sbrk+0x30>)
{
 8001cfe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001d00:	6811      	ldr	r1, [r2, #0]
{
 8001d02:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001d04:	b909      	cbnz	r1, 8001d0a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001d06:	490a      	ldr	r1, [pc, #40]	@ (8001d30 <_sbrk+0x34>)
 8001d08:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0a:	6810      	ldr	r0, [r2, #0]
 8001d0c:	4909      	ldr	r1, [pc, #36]	@ (8001d34 <_sbrk+0x38>)
 8001d0e:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <_sbrk+0x3c>)
 8001d10:	4403      	add	r3, r0
 8001d12:	1b09      	subs	r1, r1, r4
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d906      	bls.n	8001d26 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d18:	f014 f916 	bl	8015f48 <__errno>
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d24:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d26:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d28:	e7fc      	b.n	8001d24 <_sbrk+0x28>
 8001d2a:	bf00      	nop
 8001d2c:	200060d8 	.word	0x200060d8
 8001d30:	20011898 	.word	0x20011898
 8001d34:	20080000 	.word	0x20080000
 8001d38:	00000400 	.word	0x00000400

08001d3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4a03      	ldr	r2, [pc, #12]	@ (8001d4c <SystemInit+0x10>)
 8001d3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <Reset_Handler>:
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d88 <LoopFillZerobss+0xe>
 8001d54:	f7ff fff2 	bl	8001d3c <SystemInit>
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <LoopFillZerobss+0x12>)
 8001d5a:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <LoopFillZerobss+0x16>)
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <LoopFillZerobss+0x1a>)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:
 8001d62:	58d4      	ldr	r4, [r2, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:
 8001d68:	18c4      	adds	r4, r0, r3
 8001d6a:	428c      	cmp	r4, r1
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <LoopFillZerobss+0x1e>)
 8001d70:	4c0a      	ldr	r4, [pc, #40]	@ (8001d9c <LoopFillZerobss+0x22>)
 8001d72:	2300      	movs	r3, #0
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:
 8001d7a:	42a2      	cmp	r2, r4
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>
 8001d7e:	f014 f8e9 	bl	8015f54 <__libc_init_array>
 8001d82:	f7ff fd3b 	bl	80017fc <main>
 8001d86:	4770      	bx	lr
 8001d88:	20080000 	.word	0x20080000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	200020e8 	.word	0x200020e8
 8001d94:	0808fa18 	.word	0x0808fa18
 8001d98:	20002228 	.word	0x20002228
 8001d9c:	20011898 	.word	0x20011898

08001da0 <ADC_IRQHandler>:
 8001da0:	e7fe      	b.n	8001da0 <ADC_IRQHandler>

08001da2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da2:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f831 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f7ff feee 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fed4 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001db4:	2000      	movs	r0, #0
 8001db6:	bd08      	pop	{r3, pc}

08001db8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_IncTick+0x10>)
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <HAL_IncTick+0x14>)
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	440b      	add	r3, r1
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200060dc 	.word	0x200060dc
 8001dcc:	20000018 	.word	0x20000018

08001dd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dd0:	4b01      	ldr	r3, [pc, #4]	@ (8001dd8 <HAL_GetTick+0x8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200060dc 	.word	0x200060dc

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fff6 	bl	8001dd0 <HAL_GetTick>
 8001de4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001de8:	bf1e      	ittt	ne
 8001dea:	4b04      	ldrne	r3, [pc, #16]	@ (8001dfc <HAL_Delay+0x20>)
 8001dec:	781b      	ldrbne	r3, [r3, #0]
 8001dee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	1b43      	subs	r3, r0, r5
 8001df6:	42a3      	cmp	r3, r4
 8001df8:	d3fa      	bcc.n	8001df0 <HAL_Delay+0x14>
  {
  }
}
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	20000018 	.word	0x20000018

08001e00 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8001e00:	4b01      	ldr	r3, [pc, #4]	@ (8001e08 <HAL_GetREVID+0x8>)
 8001e02:	6818      	ldr	r0, [r3, #0]
}
 8001e04:	0c00      	lsrs	r0, r0, #16
 8001e06:	4770      	bx	lr
 8001e08:	e0042000 	.word	0xe0042000

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e1a:	0412      	lsls	r2, r2, #16
 8001e1c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001e28:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b530      	push	{r4, r5, lr}
 8001e34:	68dc      	ldr	r4, [r3, #12]
 8001e36:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	bf28      	it	cs
 8001e44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4c:	bf8c      	ite	hi
 8001e4e:	3c03      	subhi	r4, #3
 8001e50:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e52:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001e56:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	fa03 f304 	lsl.w	r3, r3, r4
 8001e68:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e70:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001e72:	db06      	blt.n	8001e82 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001e78:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001e7c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e80:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	f000 000f 	and.w	r0, r0, #15
 8001e86:	4a02      	ldr	r2, [pc, #8]	@ (8001e90 <HAL_NVIC_SetPriority+0x60>)
 8001e88:	5413      	strb	r3, [r2, r0]
 8001e8a:	e7f9      	b.n	8001e80 <HAL_NVIC_SetPriority+0x50>
 8001e8c:	e000ed00 	.word	0xe000ed00
 8001e90:	e000ed14 	.word	0xe000ed14

08001e94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	db07      	blt.n	8001ea8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e98:	0941      	lsrs	r1, r0, #5
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f000 001f 	and.w	r0, r0, #31
 8001ea0:	4a02      	ldr	r2, [pc, #8]	@ (8001eac <HAL_NVIC_EnableIRQ+0x18>)
 8001ea2:	4083      	lsls	r3, r0
 8001ea4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001eb0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_MPU_Disable+0x18>)
 8001eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eb8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_MPU_Enable+0x1c>)
 8001ece:	f040 0001 	orr.w	r0, r0, #1
 8001ed2:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001eec:	7843      	ldrb	r3, [r0, #1]
 8001eee:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <HAL_MPU_ConfigRegion+0x54>)
 8001ef0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ef4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f00:	6843      	ldr	r3, [r0, #4]
 8001f02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f06:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f08:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f0c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f10:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f12:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f14:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f16:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f1a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f1c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f20:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f22:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f26:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f2c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f32:	7a01      	ldrb	r1, [r0, #8]
 8001f34:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f38:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8001f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f48:	6a85      	ldr	r5, [r0, #40]	@ 0x28
{
 8001f4a:	4691      	mov	r9, r2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001f4c:	688c      	ldr	r4, [r1, #8]
 8001f4e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001f52:	69b3      	ldr	r3, [r6, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001f54:	681f      	ldr	r7, [r3, #0]
 8001f56:	2f00      	cmp	r7, #0
 8001f58:	da02      	bge.n	8001f60 <ETH_Prepare_Tx_Descriptors+0x1c>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 8001f5a:	2002      	movs	r0, #2
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8001f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001f60:	6af7      	ldr	r7, [r6, #44]	@ 0x2c
 8001f62:	2f00      	cmp	r7, #0
 8001f64:	d1f9      	bne.n	8001f5a <ETH_Prepare_Tx_Descriptors+0x16>
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001f66:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f68:	6862      	ldr	r2, [r4, #4]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001f6a:	609f      	str	r7, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f6c:	685f      	ldr	r7, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001f6e:	f8d1 c000 	ldr.w	ip, [r1]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f72:	f36f 070c 	bfc	r7, #0, #13
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001f76:	f01c 0f01 	tst.w	ip, #1
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f7a:	ea47 0702 	orr.w	r7, r7, r2
 8001f7e:	605f      	str	r7, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001f80:	d005      	beq.n	8001f8e <ETH_Prepare_Tx_Descriptors+0x4a>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001f82:	681f      	ldr	r7, [r3, #0]
 8001f84:	694a      	ldr	r2, [r1, #20]
 8001f86:	f427 0740 	bic.w	r7, r7, #12582912	@ 0xc00000
 8001f8a:	4317      	orrs	r7, r2
 8001f8c:	601f      	str	r7, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001f8e:	f01c 0f20 	tst.w	ip, #32
 8001f92:	d005      	beq.n	8001fa0 <ETH_Prepare_Tx_Descriptors+0x5c>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001f94:	681f      	ldr	r7, [r3, #0]
 8001f96:	6909      	ldr	r1, [r1, #16]
 8001f98:	f027 6740 	bic.w	r7, r7, #201326592	@ 0xc000000
 8001f9c:	4339      	orrs	r1, r7
 8001f9e:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001fa0:	f01c 0f04 	tst.w	ip, #4
 8001fa4:	d003      	beq.n	8001fae <ETH_Prepare_Tx_Descriptors+0x6a>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001fac:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001fae:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 8001fb0:	2700      	movs	r7, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001fb2:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 80020a4 <ETH_Prepare_Tx_Descriptors+0x160>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001fb6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001fba:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001fbc:	4629      	mov	r1, r5
  while (txbuffer->next != NULL)
 8001fbe:	68a4      	ldr	r4, [r4, #8]
 8001fc0:	f107 0e01 	add.w	lr, r7, #1
 8001fc4:	bb1c      	cbnz	r4, 800200e <ETH_Prepare_Tx_Descriptors+0xca>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001fc6:	681a      	ldr	r2, [r3, #0]
  if (ItMode != ((uint32_t)RESET))
 8001fc8:	f1b9 0f00 	cmp.w	r9, #0
 8001fcc:	d066      	beq.n	800209c <ETH_Prepare_Tx_Descriptors+0x158>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001fce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001fd2:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001fda:	601a      	str	r2, [r3, #0]
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001fdc:	69b2      	ldr	r2, [r6, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001fde:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fe8:	6013      	str	r3, [r2, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001fea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001fee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8001ff2:	6281      	str	r1, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f383 8810 	msr	PRIMASK, r3
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001ffe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002000:	3301      	adds	r3, #1
 8002002:	443b      	add	r3, r7
 8002004:	6403      	str	r3, [r0, #64]	@ 0x40
 8002006:	f382 8810 	msr	PRIMASK, r2
  return HAL_ETH_ERROR_NONE;
 800200a:	2000      	movs	r0, #0
 800200c:	e7a6      	b.n	8001f5c <ETH_Prepare_Tx_Descriptors+0x18>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800200e:	681f      	ldr	r7, [r3, #0]
 8002010:	f027 5700 	bic.w	r7, r7, #536870912	@ 0x20000000
 8002014:	601f      	str	r7, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002016:	681f      	ldr	r7, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002018:	f1b9 0f00 	cmp.w	r9, #0
 800201c:	d023      	beq.n	8002066 <ETH_Prepare_Tx_Descriptors+0x122>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800201e:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002022:	f101 0c01 	add.w	ip, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002026:	601f      	str	r7, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002028:	f1bc 0f03 	cmp.w	ip, #3
 800202c:	bf88      	it	hi
 800202e:	f1a1 0c03 	subhi.w	ip, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002032:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8002036:	698b      	ldr	r3, [r1, #24]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002038:	681f      	ldr	r7, [r3, #0]
 800203a:	2f00      	cmp	r7, #0
 800203c:	da16      	bge.n	800206c <ETH_Prepare_Tx_Descriptors+0x128>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800203e:	69b1      	ldr	r1, [r6, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002040:	2200      	movs	r2, #0
 8002042:	4572      	cmp	r2, lr
 8002044:	d089      	beq.n	8001f5a <ETH_Prepare_Tx_Descriptors+0x16>
  __ASM volatile ("dmb 0xF":::"memory");
 8002046:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800204a:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 800204c:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800204e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002052:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002054:	1c6b      	adds	r3, r5, #1
 8002056:	2b03      	cmp	r3, #3
 8002058:	bf88      	it	hi
 800205a:	1eeb      	subhi	r3, r5, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800205c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8002060:	461d      	mov	r5, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002062:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002064:	e7ed      	b.n	8002042 <ETH_Prepare_Tx_Descriptors+0xfe>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002066:	f027 4780 	bic.w	r7, r7, #1073741824	@ 0x40000000
 800206a:	e7da      	b.n	8002022 <ETH_Prepare_Tx_Descriptors+0xde>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800206c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800206e:	2900      	cmp	r1, #0
 8002070:	d1e5      	bne.n	800203e <ETH_Prepare_Tx_Descriptors+0xfa>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002072:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002074:	6867      	ldr	r7, [r4, #4]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002076:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 800207a:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800207c:	6821      	ldr	r1, [r4, #0]
 800207e:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	ea01 0108 	and.w	r1, r1, r8
 8002086:	4339      	orrs	r1, r7
 8002088:	6059      	str	r1, [r3, #4]
 800208a:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800208e:	6819      	ldr	r1, [r3, #0]
    bd_count += 1U;
 8002090:	4677      	mov	r7, lr
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002092:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8002096:	6019      	str	r1, [r3, #0]
 8002098:	4661      	mov	r1, ip
 800209a:	e790      	b.n	8001fbe <ETH_Prepare_Tx_Descriptors+0x7a>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800209c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80020a0:	e797      	b.n	8001fd2 <ETH_Prepare_Tx_Descriptors+0x8e>
 80020a2:	bf00      	nop
 80020a4:	ffffe000 	.word	0xffffe000

080020a8 <ETH_SetMACConfig>:
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460d      	mov	r5, r1
  tmpreg1 = (heth->Instance)->MACCR;
 80020ac:	6802      	ldr	r2, [r0, #0]
{
 80020ae:	4604      	mov	r4, r0
 80020b0:	68ab      	ldr	r3, [r5, #8]
 80020b2:	6968      	ldr	r0, [r5, #20]
  tmpreg1 = (heth->Instance)->MACCR;
 80020b4:	6811      	ldr	r1, [r2, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80020b6:	4303      	orrs	r3, r0
 80020b8:	69a8      	ldr	r0, [r5, #24]
 80020ba:	4303      	orrs	r3, r0
 80020bc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80020be:	4303      	orrs	r3, r0
 80020c0:	7ba8      	ldrb	r0, [r5, #14]
 80020c2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020c6:	7fe8      	ldrb	r0, [r5, #31]
 80020c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020cc:	7f28      	ldrb	r0, [r5, #28]
 80020ce:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020d2:	7928      	ldrb	r0, [r5, #4]
 80020d4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020d8:	7be8      	ldrb	r0, [r5, #15]
 80020da:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020de:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 80020e2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020e6:	482a      	ldr	r0, [pc, #168]	@ (8002190 <ETH_SetMACConfig+0xe8>)
 80020e8:	4008      	ands	r0, r1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ea:	7c29      	ldrb	r1, [r5, #16]
 80020ec:	fab1 f181 	clz	r1, r1
 80020f0:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f2:	2001      	movs	r0, #1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020f4:	0949      	lsrs	r1, r1, #5
 80020f6:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020fa:	7c69      	ldrb	r1, [r5, #17]
 80020fc:	fab1 f181 	clz	r1, r1
 8002100:	0949      	lsrs	r1, r1, #5
 8002102:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002106:	7fa9      	ldrb	r1, [r5, #30]
 8002108:	fab1 f181 	clz	r1, r1
 800210c:	0949      	lsrs	r1, r1, #5
 800210e:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002112:	f895 1020 	ldrb.w	r1, [r5, #32]
 8002116:	fab1 f181 	clz	r1, r1
 800211a:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800211c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002120:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002122:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	f7ff fe5a 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002128:	6821      	ldr	r1, [r4, #0]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800212a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
  (heth->Instance)->MACCR = tmpreg1;
 800212c:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 800212e:	698a      	ldr	r2, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002130:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002132:	f022 02be 	bic.w	r2, r2, #190	@ 0xbe
 8002136:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800213a:	0412      	lsls	r2, r2, #16
 800213c:	0c12      	lsrs	r2, r2, #16
 800213e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002140:	f895 204c 	ldrb.w	r2, [r5, #76]	@ 0x4c
 8002144:	fab2 f282 	clz	r2, r2
 8002148:	0952      	lsrs	r2, r2, #5
 800214a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800214e:	f895 2055 	ldrb.w	r2, [r5, #85]	@ 0x55
 8002152:	1e50      	subs	r0, r2, #1
 8002154:	4242      	negs	r2, r0
 8002156:	4142      	adcs	r2, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002158:	2001      	movs	r0, #1
 800215a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800215e:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8002162:	1e56      	subs	r6, r2, #1
 8002164:	4272      	negs	r2, r6
 8002166:	4172      	adcs	r2, r6
 8002168:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800216c:	f895 2054 	ldrb.w	r2, [r5, #84]	@ 0x54
 8002170:	f102 3cff 	add.w	ip, r2, #4294967295
 8002174:	f1dc 0200 	rsbs	r2, ip, #0
 8002178:	eb42 020c 	adc.w	r2, r2, ip
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002180:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8002182:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002184:	f7ff fe2a 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	619d      	str	r5, [r3, #24]
}
 800218c:	bd70      	pop	{r4, r5, r6, pc}
 800218e:	bf00      	nop
 8002190:	fd20810f 	.word	0xfd20810f

08002194 <ETH_SetDMAConfig>:
{
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	694b      	ldr	r3, [r1, #20]
 8002198:	460d      	mov	r5, r1
 800219a:	6a09      	ldr	r1, [r1, #32]
 800219c:	4604      	mov	r4, r0
  tmpreg1 = (heth->Instance)->DMAOMR;
 800219e:	6802      	ldr	r2, [r0, #0]
 80021a0:	430b      	orrs	r3, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021a2:	7b69      	ldrb	r1, [r5, #13]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021a8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021ac:	7ba9      	ldrb	r1, [r5, #14]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ae:	6990      	ldr	r0, [r2, #24]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021b0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021b4:	7f29      	ldrb	r1, [r5, #28]
 80021b6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ba:	7fa9      	ldrb	r1, [r5, #30]
 80021bc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021c0:	f895 1024 	ldrb.w	r1, [r5, #36]	@ 0x24
 80021c4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021c8:	491a      	ldr	r1, [pc, #104]	@ (8002234 <ETH_SetDMAConfig+0xa0>)
 80021ca:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021d0:	7b29      	ldrb	r1, [r5, #12]
 80021d2:	fab1 f181 	clz	r1, r1
 80021d6:	0949      	lsrs	r1, r1, #5
 80021d8:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021dc:	7f69      	ldrb	r1, [r5, #29]
 80021de:	fab1 f181 	clz	r1, r1
 80021e2:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021e4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021e8:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ea:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ec:	f7ff fdf6 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021f0:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f2:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021f4:	69a9      	ldr	r1, [r5, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 80021f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021fa:	68ab      	ldr	r3, [r5, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 80021fc:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021fe:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002200:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002204:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8002208:	6929      	ldr	r1, [r5, #16]
 800220a:	430b      	orrs	r3, r1
 800220c:	6829      	ldr	r1, [r5, #0]
 800220e:	430b      	orrs	r3, r1
 8002210:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002212:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002216:	7929      	ldrb	r1, [r5, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002218:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800221c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002220:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 8002222:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	f7ff fdda 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800222e:	601d      	str	r5, [r3, #0]
}
 8002230:	bd70      	pop	{r4, r5, r6, pc}
 8002232:	bf00      	nop
 8002234:	f8de3f23 	.word	0xf8de3f23

08002238 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 8002238:	2300      	movs	r3, #0
{
 800223a:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 800223c:	9301      	str	r3, [sp, #4]
{
 800223e:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002240:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002242:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800224e:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002254:	f7ff fdc2 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	9a01      	ldr	r2, [sp, #4]
 800225c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	b002      	add	sp, #8
 8002264:	bd10      	pop	{r4, pc}
	...

08002268 <ETH_UpdateDescriptor>:
{
 8002268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t *buff = NULL;
 800226c:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 800226e:	6e86      	ldr	r6, [r0, #104]	@ 0x68
{
 8002270:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002272:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
  uint8_t *buff = NULL;
 8002274:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002276:	f106 0312 	add.w	r3, r6, #18
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800227a:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80022f0 <ETH_UpdateDescriptor+0x88>
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800227e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002282:	b137      	cbz	r7, 8002292 <ETH_UpdateDescriptor+0x2a>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002284:	6a2b      	ldr	r3, [r5, #32]
 8002286:	b9db      	cbnz	r3, 80022c0 <ETH_UpdateDescriptor+0x58>
      HAL_ETH_RxAllocateCallback(&buff);
 8002288:	a801      	add	r0, sp, #4
 800228a:	f7ff f905 	bl	8001498 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	b9a3      	cbnz	r3, 80022bc <ETH_UpdateDescriptor+0x54>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002292:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002294:	42bb      	cmp	r3, r7
 8002296:	d00e      	beq.n	80022b6 <ETH_UpdateDescriptor+0x4e>
 8002298:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800229c:	1c71      	adds	r1, r6, #1
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	6922      	ldr	r2, [r4, #16]
 80022a2:	2028      	movs	r0, #40	@ 0x28
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80022a4:	f001 0103 	and.w	r1, r1, #3
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80022a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ac:	fb00 2201 	mla	r2, r0, r1, r2
 80022b0:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022b2:	e9c4 671a 	strd	r6, r7, [r4, #104]	@ 0x68
}
 80022b6:	b002      	add	sp, #8
 80022b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80022bc:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80022be:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 80022c0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80022c2:	6963      	ldr	r3, [r4, #20]
      if (heth->RxDescList.ItMode == 0U)
 80022c4:	b98a      	cbnz	r2, 80022ea <ETH_UpdateDescriptor+0x82>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80022c6:	ea43 0308 	orr.w	r3, r3, r8
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80022ca:	606b      	str	r3, [r5, #4]
      desccount--;
 80022cc:	3f01      	subs	r7, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022d4:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022d6:	1c73      	adds	r3, r6, #1
 80022d8:	2b03      	cmp	r3, #3
 80022da:	bf88      	it	hi
 80022dc:	1ef3      	subhi	r3, r6, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022de:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 80022e2:	461e      	mov	r6, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022e4:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 80022e8:	e7cb      	b.n	8002282 <ETH_UpdateDescriptor+0x1a>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ee:	e7ec      	b.n	80022ca <ETH_UpdateDescriptor+0x62>
 80022f0:	80004000 	.word	0x80004000

080022f4 <HAL_ETH_Init>:
{
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80022f6:	4604      	mov	r4, r0
{
 80022f8:	b0a7      	sub	sp, #156	@ 0x9c
  if (heth == NULL)
 80022fa:	2800      	cmp	r0, #0
 80022fc:	f000 80e8 	beq.w	80024d0 <HAL_ETH_Init+0x1dc>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002300:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002304:	b923      	cbnz	r3, 8002310 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002306:	2323      	movs	r3, #35	@ 0x23
 8002308:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 800230c:	f7fe ff7e 	bl	800120c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002310:	4b73      	ldr	r3, [pc, #460]	@ (80024e0 <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002312:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002326:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <HAL_ETH_Init+0x1f0>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800232e:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8002336:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002346:	f7ff fd43 	bl	8001dd0 <HAL_GetTick>
 800234a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002352:	681d      	ldr	r5, [r3, #0]
 8002354:	f015 0501 	ands.w	r5, r5, #1
 8002358:	f040 80ad 	bne.w	80024b6 <HAL_ETH_Init+0x1c2>
  macDefaultConf.ChecksumOffload = ENABLE;
 800235c:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800235e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8002362:	f240 1701 	movw	r7, #257	@ 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 800236a:	a90d      	add	r1, sp, #52	@ 0x34
 800236c:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 800236e:	f88d 6038 	strb.w	r6, [sp, #56]	@ 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 8002372:	f8ad 6052 	strh.w	r6, [sp, #82]	@ 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002376:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800237a:	950f      	str	r5, [sp, #60]	@ 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 800237c:	f88d 5050 	strb.w	r5, [sp, #80]	@ 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8002380:	f88d 5054 	strb.w	r5, [sp, #84]	@ 0x54
  macDefaultConf.Watchdog = ENABLE;
 8002384:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002388:	9516      	str	r5, [sp, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800238a:	f88d 505c 	strb.w	r5, [sp, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800238e:	951f      	str	r5, [sp, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002390:	f88d 5080 	strb.w	r5, [sp, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002394:	9521      	str	r5, [sp, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002396:	f8ad 5088 	strh.w	r5, [sp, #136]	@ 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800239a:	f88d 508a 	strb.w	r5, [sp, #138]	@ 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800239e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023a2:	f7ff fe81 	bl	80020a8 <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023aa:	4620      	mov	r0, r4
 80023ac:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023ae:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023b4:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023b8:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023bc:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023c0:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023c4:	950a      	str	r5, [sp, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023c6:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023ca:	950c      	str	r5, [sp, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023cc:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023ce:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023d6:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023dc:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023e0:	f7ff fed8 	bl	8002194 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023e4:	68e6      	ldr	r6, [r4, #12]
 80023e6:	f104 0c14 	add.w	ip, r4, #20
    dmatxdesc = heth->Init.TxDesc + i;
 80023ea:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80023ec:	4628      	mov	r0, r5
    dmatxdesc = heth->Init.TxDesc + i;
 80023ee:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80023f0:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023f2:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80023f4:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023f6:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80023f8:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80023fa:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023fc:	f84c 3f04 	str.w	r3, [ip, #4]!
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002400:	681f      	ldr	r7, [r3, #0]
 8002402:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 8002406:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800240a:	d064      	beq.n	80024d6 <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800240c:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800240e:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002410:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002412:	f447 0740 	orr.w	r7, r7, #12582912	@ 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002416:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002418:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800241a:	460b      	mov	r3, r1
 800241c:	d1e8      	bne.n	80023f0 <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800241e:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 8002420:	2100      	movs	r1, #0
 8002422:	f104 0c44 	add.w	ip, r4, #68	@ 0x44
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002426:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800242a:	f502 5780 	add.w	r7, r2, #4096	@ 0x1000
  heth->TxDescList.CurTxDesc = 0;
 800242e:	62a1      	str	r1, [r4, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002430:	613e      	str	r6, [r7, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002432:	6926      	ldr	r6, [r4, #16]
    dmarxdesc =  heth->Init.RxDesc + i;
 8002434:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002436:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002438:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800243a:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800243c:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800243e:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002440:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002444:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002448:	6960      	ldr	r0, [r4, #20]
 800244a:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 800244e:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002450:	6858      	ldr	r0, [r3, #4]
 8002452:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002456:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002458:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800245c:	f84c 3f04 	str.w	r3, [ip, #4]!
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002460:	d03b      	beq.n	80024da <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002462:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002464:	3501      	adds	r5, #1
 8002466:	4603      	mov	r3, r0
 8002468:	2d04      	cmp	r5, #4
 800246a:	d1e4      	bne.n	8002436 <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800246c:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800246e:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002472:	65a0      	str	r0, [r4, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002474:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002478:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800247c:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800247e:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002480:	641d      	str	r5, [r3, #64]	@ 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002482:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002484:	6459      	str	r1, [r3, #68]	@ 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002486:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002488:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 800248c:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800248e:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
 8002492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002496:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800249a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800249e:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
 80024a2:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
 80024a6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  heth->gState = HAL_ETH_STATE_READY;
 80024aa:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024ac:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024b0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 80024b4:	e00d      	b.n	80024d2 <HAL_ETH_Init+0x1de>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024b6:	f7ff fc8b 	bl	8001dd0 <HAL_GetTick>
 80024ba:	1b80      	subs	r0, r0, r6
 80024bc:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80024c0:	f67f af44 	bls.w	800234c <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024c4:	2304      	movs	r3, #4
 80024c6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80024ca:	23e0      	movs	r3, #224	@ 0xe0
 80024cc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
}
 80024d2:	b027      	add	sp, #156	@ 0x9c
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024d6:	60de      	str	r6, [r3, #12]
 80024d8:	e799      	b.n	800240e <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024da:	60de      	str	r6, [r3, #12]
 80024dc:	e7c2      	b.n	8002464 <HAL_ETH_Init+0x170>
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40028000 	.word	0x40028000

080024ec <HAL_ETH_Start_IT>:
{
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80024ee:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80024f2:	4604      	mov	r4, r0
 80024f4:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d136      	bne.n	8002568 <HAL_ETH_Start_IT+0x7c>
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80024fa:	2304      	movs	r3, #4
    heth->gState = HAL_ETH_STATE_BUSY;
 80024fc:	2623      	movs	r6, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 80024fe:	6585      	str	r5, [r0, #88]	@ 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002500:	66c3      	str	r3, [r0, #108]	@ 0x6c
    heth->gState = HAL_ETH_STATE_BUSY;
 8002502:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
    ETH_UpdateDescriptor(heth);
 8002506:	f7ff feaf 	bl	8002268 <ETH_UpdateDescriptor>
    tmpreg1 = (heth->Instance)->MACCR;
 800250a:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800250c:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 800250e:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002510:	f7ff fc64 	bl	8001ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002514:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8002516:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8002518:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800251a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	f042 0202 	orr.w	r2, r2, #2
 800252c:	619a      	str	r2, [r3, #24]
    ETH_FlushTransmitFIFO(heth);
 800252e:	f7ff fe83 	bl	8002238 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002532:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002534:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	f042 0208 	orr.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800253e:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002540:	f7ff fc4c 	bl	8001ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002544:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8002546:	2000      	movs	r0, #0
    (heth->Instance)->MACCR = tmpreg1;
 8002548:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f042 0204 	orr.w	r2, r2, #4
 8002550:	601a      	str	r2, [r3, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	f442 32d0 	orr.w	r2, r2, #106496	@ 0x1a000
 800255c:	f042 02c1 	orr.w	r2, r2, #193	@ 0xc1
 8002560:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8002562:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
}
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002568:	4628      	mov	r0, r5
 800256a:	e7fc      	b.n	8002566 <HAL_ETH_Start_IT+0x7a>

0800256c <HAL_ETH_Stop_IT>:
{
 800256c:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800256e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8002572:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002574:	2b23      	cmp	r3, #35	@ 0x23
 8002576:	d13c      	bne.n	80025f2 <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002578:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 800257a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800257e:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002580:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	f422 32d0 	bic.w	r2, r2, #106496	@ 0x1a000
 800258a:	f022 02c1 	bic.w	r2, r2, #193	@ 0xc1
 800258e:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002596:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	f022 0202 	bic.w	r2, r2, #2
 800259e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80025a0:	680b      	ldr	r3, [r1, #0]
 80025a2:	f023 0304 	bic.w	r3, r3, #4
 80025a6:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80025a8:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025aa:	f7ff fc17 	bl	8001ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025ae:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 80025b0:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 80025b2:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80025b4:	f7ff fe40 	bl	8002238 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025b8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ba:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f022 0208 	bic.w	r2, r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80025c4:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c6:	f7ff fc09 	bl	8001ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025ca:	4623      	mov	r3, r4
 80025cc:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80025d0:	f853 2b44 	ldr.w	r2, [r3], #68
 80025d4:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80025d6:	f853 1f04 	ldr.w	r1, [r3, #4]!
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80025da:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025dc:	4283      	cmp	r3, r0
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80025de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025e2:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025e4:	d1f7      	bne.n	80025d6 <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 80025e6:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 80025e8:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 80025ea:	65a0      	str	r0, [r4, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80025ec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
}
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	e7fc      	b.n	80025f0 <HAL_ETH_Stop_IT+0x84>

080025f6 <HAL_ETH_Transmit_IT>:
{
 80025f6:	b510      	push	{r4, lr}
 80025f8:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80025fa:	b939      	cbnz	r1, 800260c <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025fc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002600:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002604:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
}
 800260a:	bd10      	pop	{r4, pc}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800260c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002610:	2a23      	cmp	r2, #35	@ 0x23
 8002612:	d1f9      	bne.n	8002608 <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002614:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002616:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002618:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800261a:	f7ff fc93 	bl	8001f44 <ETH_Prepare_Tx_Descriptors>
 800261e:	b120      	cbz	r0, 800262a <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002620:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	e7ec      	b.n	8002604 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 800262a:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800262e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002630:	1c53      	adds	r3, r2, #1
 8002632:	2b03      	cmp	r3, #3
 8002634:	bf88      	it	hi
 8002636:	1ed3      	subhi	r3, r2, #3
 8002638:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	0752      	lsls	r2, r2, #29
 8002644:	d503      	bpl.n	800264e <HAL_ETH_Transmit_IT+0x58>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002646:	2204      	movs	r2, #4
 8002648:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 800264a:	2200      	movs	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 800264e:	2000      	movs	r0, #0
 8002650:	e7db      	b.n	800260a <HAL_ETH_Transmit_IT+0x14>

08002652 <HAL_ETH_ReadData>:
{
 8002652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002656:	4604      	mov	r4, r0
 8002658:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 800265a:	4689      	mov	r9, r1
 800265c:	b949      	cbnz	r1, 8002672 <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800265e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 800266a:	2001      	movs	r0, #1
}
 800266c:	b005      	add	sp, #20
 800266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002672:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002676:	2b23      	cmp	r3, #35	@ 0x23
 8002678:	d1f7      	bne.n	800266a <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 800267a:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
  uint8_t rxdataready = 0U;
 800267e:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002680:	f100 0180 	add.w	r1, r0, #128	@ 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002684:	f108 0312 	add.w	r3, r8, #18
  uint32_t desccnt = 0U;
 8002688:	463e      	mov	r6, r7
      dmarxdesc->BackupAddr0 = 0;
 800268a:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800268c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002690:	307c      	adds	r0, #124	@ 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002692:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8002696:	f1c3 0a04 	rsb	sl, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800269a:	682b      	ldr	r3, [r5, #0]
         && (rxdataready == 0U))
 800269c:	2b00      	cmp	r3, #0
 800269e:	db02      	blt.n	80026a6 <HAL_ETH_ReadData+0x54>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026a0:	4556      	cmp	r6, sl
 80026a2:	d000      	beq.n	80026a6 <HAL_ETH_ReadData+0x54>
         && (rxdataready == 0U))
 80026a4:	b187      	cbz	r7, 80026c8 <HAL_ETH_ReadData+0x76>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80026a6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80026a8:	441e      	add	r6, r3
 80026aa:	66e6      	str	r6, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026ac:	b116      	cbz	r6, 80026b4 <HAL_ETH_ReadData+0x62>
    ETH_UpdateDescriptor(heth);
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7ff fdda 	bl	8002268 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 80026b4:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 80026b8:	2f00      	cmp	r7, #0
 80026ba:	d0d6      	beq.n	800266a <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 80026bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 80026be:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 80026c0:	f8c9 3000 	str.w	r3, [r9]
    heth->RxDescList.pRxStart = NULL;
 80026c4:	67e0      	str	r0, [r4, #124]	@ 0x7c
    return HAL_OK;
 80026c6:	e7d1      	b.n	800266c <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	05db      	lsls	r3, r3, #23
 80026cc:	d503      	bpl.n	80026d6 <HAL_ETH_ReadData+0x84>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80026ce:	69eb      	ldr	r3, [r5, #28]
 80026d0:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80026d2:	69ab      	ldr	r3, [r5, #24]
 80026d4:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	059a      	lsls	r2, r3, #22
 80026da:	d401      	bmi.n	80026e0 <HAL_ETH_ReadData+0x8e>
 80026dc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80026de:	b1fb      	cbz	r3, 8002720 <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	059b      	lsls	r3, r3, #22
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80026e4:	682b      	ldr	r3, [r5, #0]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80026e6:	682a      	ldr	r2, [r5, #0]
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80026e8:	f3c3 430d 	ubfx	r3, r3, #16, #14
        heth->RxDescList.RxDataLength = 0;
 80026ec:	bf48      	it	mi
 80026ee:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80026f2:	05d2      	lsls	r2, r2, #23
 80026f4:	d502      	bpl.n	80026fc <HAL_ETH_ReadData+0xaa>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80026f6:	682a      	ldr	r2, [r5, #0]
        rxdataready = 1;
 80026f8:	2701      	movs	r7, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80026fa:	6722      	str	r2, [r4, #112]	@ 0x70
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80026fc:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026fe:	9001      	str	r0, [sp, #4]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002700:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002702:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8002706:	f7fe fee9 	bl	80014dc <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 800270a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800270c:	9b03      	ldr	r3, [sp, #12]
      heth->RxDescList.RxDescCnt++;
 800270e:	3201      	adds	r2, #1
 8002710:	6622      	str	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8002714:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
      heth->RxDescList.RxDataLength += bufflength;
 8002718:	441a      	add	r2, r3
 800271a:	6662      	str	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 800271c:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002720:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8002724:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002726:	2b03      	cmp	r3, #3
 8002728:	bf88      	it	hi
 800272a:	f1a8 0303 	subhi.w	r3, r8, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800272e:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8002732:	4698      	mov	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002734:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8002738:	e7af      	b.n	800269a <HAL_ETH_ReadData+0x48>

0800273a <HAL_ETH_ReleaseTxPacket>:
{
 800273a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800273e:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8002740:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002742:	f04f 0928 	mov.w	r9, #40	@ 0x28
 8002746:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800274a:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800274e:	b106      	cbz	r6, 8002752 <HAL_ETH_ReleaseTxPacket+0x18>
 8002750:	b917      	cbnz	r7, 8002758 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8002752:	2000      	movs	r0, #0
 8002754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8002758:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 800275c:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800275e:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002762:	b928      	cbnz	r0, 8002770 <HAL_ETH_ReleaseTxPacket+0x36>
      INCR_TX_DESC_INDEX(idx, 1U);
 8002764:	1c63      	adds	r3, r4, #1
 8002766:	2b03      	cmp	r3, #3
 8002768:	d900      	bls.n	800276c <HAL_ETH_ReleaseTxPacket+0x32>
 800276a:	1ee3      	subs	r3, r4, #3
        pktTxStatus = 0U;
 800276c:	461c      	mov	r4, r3
 800276e:	e7ee      	b.n	800274e <HAL_ETH_ReleaseTxPacket+0x14>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002770:	fb09 f304 	mul.w	r3, r9, r4
 8002774:	68ea      	ldr	r2, [r5, #12]
 8002776:	58d3      	ldr	r3, [r2, r3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0a      	blt.n	8002792 <HAL_ETH_ReleaseTxPacket+0x58>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800277c:	f7fe fec7 	bl	800150e <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8002780:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002782:	f8c8 a02c 	str.w	sl, [r8, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8002786:	2b03      	cmp	r3, #3
 8002788:	bf88      	it	hi
 800278a:	1ee3      	subhi	r3, r4, #3
        dmatxdesclist->releaseIndex = idx;
 800278c:	e9c5 6310 	strd	r6, r3, [r5, #64]	@ 0x40
 8002790:	e7ec      	b.n	800276c <HAL_ETH_ReleaseTxPacket+0x32>
 8002792:	4623      	mov	r3, r4
        pktTxStatus = 0U;
 8002794:	2700      	movs	r7, #0
 8002796:	e7e9      	b.n	800276c <HAL_ETH_ReleaseTxPacket+0x32>

08002798 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8002798:	4770      	bx	lr

0800279a <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 800279a:	4770      	bx	lr

0800279c <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800279c:	6803      	ldr	r3, [r0, #0]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800279e:	4a34      	ldr	r2, [pc, #208]	@ (8002870 <HAL_ETH_IRQHandler+0xd4>)
{
 80027a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80027a4:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80027a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
{
 80027aa:	4604      	mov	r4, r0
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80027ac:	695d      	ldr	r5, [r3, #20]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80027ae:	f8d3 801c 	ldr.w	r8, [r3, #28]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80027b2:	6956      	ldr	r6, [r2, #20]
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80027b4:	066a      	lsls	r2, r5, #25
 80027b6:	d506      	bpl.n	80027c6 <HAL_ETH_IRQHandler+0x2a>
 80027b8:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80027bc:	d003      	beq.n	80027c6 <HAL_ETH_IRQHandler+0x2a>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80027be:	4a2d      	ldr	r2, [pc, #180]	@ (8002874 <HAL_ETH_IRQHandler+0xd8>)
 80027c0:	615a      	str	r2, [r3, #20]
    HAL_ETH_RxCpltCallback(heth);
 80027c2:	f7fe fd9b 	bl	80012fc <HAL_ETH_RxCpltCallback>
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80027c6:	07e8      	lsls	r0, r5, #31
 80027c8:	d50b      	bpl.n	80027e2 <HAL_ETH_IRQHandler+0x46>
 80027ca:	f018 0f01 	tst.w	r8, #1
 80027ce:	d008      	beq.n	80027e2 <HAL_ETH_IRQHandler+0x46>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
    HAL_ETH_TxCpltCallback(heth);
 80027d6:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80027d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027dc:	615a      	str	r2, [r3, #20]
    HAL_ETH_TxCpltCallback(heth);
 80027de:	f7fe fda7 	bl	8001330 <HAL_ETH_TxCpltCallback>
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80027e2:	0429      	lsls	r1, r5, #16
 80027e4:	d523      	bpl.n	800282e <HAL_ETH_IRQHandler+0x92>
 80027e6:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 80027ea:	d020      	beq.n	800282e <HAL_ETH_IRQHandler+0x92>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80027ec:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80027f0:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002802:	695a      	ldr	r2, [r3, #20]
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002804:	d02c      	beq.n	8002860 <HAL_ETH_IRQHandler+0xc4>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002806:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800280a:	f422 0201 	bic.w	r2, r2, #8454144	@ 0x810000
 800280e:	f422 425f 	bic.w	r2, r2, #57088	@ 0xdf00
 8002812:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002816:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
 8002820:	61da      	str	r2, [r3, #28]
      heth->gState = HAL_ETH_STATE_ERROR;
 8002822:	23e0      	movs	r3, #224	@ 0xe0
 8002824:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8002828:	4620      	mov	r0, r4
 800282a:	f7fe fd9b 	bl	8001364 <HAL_ETH_ErrorCallback>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800282e:	073a      	lsls	r2, r7, #28
 8002830:	d50b      	bpl.n	800284a <HAL_ETH_IRQHandler+0xae>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002832:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8002834:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800283c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8002840:	f7ff ffaa 	bl	8002798 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002844:	2300      	movs	r3, #0
 8002846:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800284a:	0333      	lsls	r3, r6, #12
 800284c:	d506      	bpl.n	800285c <HAL_ETH_IRQHandler+0xc0>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800284e:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_ETH_IRQHandler+0xd4>)
 8002850:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8002854:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002856:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8002858:	f7ff ff9f 	bl	800279a <HAL_ETH_WakeUpCallback>
}
 800285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002860:	f248 6180 	movw	r1, #34432	@ 0x8680
 8002864:	400a      	ands	r2, r1
 8002866:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800286a:	6159      	str	r1, [r3, #20]
 800286c:	e7dc      	b.n	8002828 <HAL_ETH_IRQHandler+0x8c>
 800286e:	bf00      	nop
 8002870:	40013c00 	.word	0x40013c00
 8002874:	00010040 	.word	0x00010040

08002878 <HAL_ETH_ReadPHYRegister>:
{
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 800287c:	6800      	ldr	r0, [r0, #0]
{
 800287e:	461e      	mov	r6, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002880:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002882:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002884:	02cc      	lsls	r4, r1, #11
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002886:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800288a:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800288e:	b2a4      	uxth	r4, r4
 8002890:	431a      	orrs	r2, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002892:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002894:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8002898:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 800289a:	f7ff fa99 	bl	8001dd0 <HAL_GetTick>
 800289e:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028a0:	f014 0001 	ands.w	r0, r4, #1
 80028a4:	d104      	bne.n	80028b0 <HAL_ETH_ReadPHYRegister+0x38>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80028a6:	682b      	ldr	r3, [r5, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	6033      	str	r3, [r6, #0]
}
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80028b0:	f7ff fa8e 	bl	8001dd0 <HAL_GetTick>
 80028b4:	1bc0      	subs	r0, r0, r7
 80028b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80028ba:	d202      	bcs.n	80028c2 <HAL_ETH_ReadPHYRegister+0x4a>
    tmpreg1 = heth->Instance->MACMIIAR;
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	691c      	ldr	r4, [r3, #16]
 80028c0:	e7ee      	b.n	80028a0 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	e7f3      	b.n	80028ae <HAL_ETH_ReadPHYRegister+0x36>

080028c6 <HAL_ETH_WritePHYRegister>:
{
 80028c6:	b570      	push	{r4, r5, r6, lr}
 80028c8:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 80028ca:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80028cc:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 80028ce:	6904      	ldr	r4, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80028d6:	f004 041c 	and.w	r4, r4, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80028da:	6143      	str	r3, [r0, #20]
 80028dc:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80028de:	02cc      	lsls	r4, r1, #11
 80028e0:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80028e2:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80028e4:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 80028e8:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80028ea:	f7ff fa71 	bl	8001dd0 <HAL_GetTick>
 80028ee:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028f0:	f014 0001 	ands.w	r0, r4, #1
 80028f4:	d100      	bne.n	80028f8 <HAL_ETH_WritePHYRegister+0x32>
}
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80028f8:	f7ff fa6a 	bl	8001dd0 <HAL_GetTick>
 80028fc:	1b80      	subs	r0, r0, r6
 80028fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8002902:	d202      	bcs.n	800290a <HAL_ETH_WritePHYRegister+0x44>
    tmpreg1 = heth->Instance->MACMIIAR;
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	691c      	ldr	r4, [r3, #16]
 8002908:	e7f2      	b.n	80028f0 <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 800290a:	2001      	movs	r0, #1
 800290c:	e7f3      	b.n	80028f6 <HAL_ETH_WritePHYRegister+0x30>

0800290e <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 800290e:	2900      	cmp	r1, #0
 8002910:	d061      	beq.n	80029d6 <HAL_ETH_GetMACConfig+0xc8>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002912:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8002914:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800291c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8002926:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f482 7200 	eor.w	r2, r2, #512	@ 0x200
 800292e:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8002932:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002936:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002938:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800293c:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8002944:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002948:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002950:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002958:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002960:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f482 0280 	eor.w	r2, r2, #4194304	@ 0x400000
 8002968:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800296c:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f482 0200 	eor.w	r2, r2, #8388608	@ 0x800000
 8002974:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8002978:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002980:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002988:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002990:	710a      	strb	r2, [r1, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8002998:	738a      	strb	r2, [r1, #14]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80029a0:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80029aa:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80029ae:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80029b8:	650a      	str	r2, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	0c12      	lsrs	r2, r2, #16
 80029be:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80029c6:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029ca:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 80029cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029d0:	f881 3055 	strb.w	r3, [r1, #85]	@ 0x55
  return HAL_OK;
 80029d4:	4770      	bx	lr
    return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
}
 80029d8:	4770      	bx	lr

080029da <HAL_ETH_SetMACConfig>:
{
 80029da:	b508      	push	{r3, lr}
  if (macconf == NULL)
 80029dc:	b139      	cbz	r1, 80029ee <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 80029de:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d103      	bne.n	80029ee <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 80029e6:	f7ff fb5f 	bl	80020a8 <ETH_SetMACConfig>
    return HAL_OK;
 80029ea:	2000      	movs	r0, #0
}
 80029ec:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
 80029f0:	e7fc      	b.n	80029ec <HAL_ETH_SetMACConfig+0x12>
	...

080029f4 <HAL_ETH_SetMDIOClockRange>:
{
 80029f4:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 80029f6:	6803      	ldr	r3, [r0, #0]
{
 80029f8:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 80029fa:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80029fc:	f000 f90c 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_ETH_SetMDIOClockRange+0x44>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002a02:	f024 041c 	bic.w	r4, r4, #28
  if (hclk < 35000000U)
 8002a06:	4298      	cmp	r0, r3
 8002a08:	d804      	bhi.n	8002a14 <HAL_ETH_SetMDIOClockRange+0x20>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002a0a:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	611c      	str	r4, [r3, #16]
}
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_ETH_SetMDIOClockRange+0x48>)
 8002a16:	4298      	cmp	r0, r3
 8002a18:	d202      	bcs.n	8002a20 <HAL_ETH_SetMDIOClockRange+0x2c>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002a1a:	f044 040c 	orr.w	r4, r4, #12
 8002a1e:	e7f6      	b.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 100000000U)
 8002a20:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <HAL_ETH_SetMDIOClockRange+0x4c>)
 8002a22:	4298      	cmp	r0, r3
 8002a24:	d9f3      	bls.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 150000000U)
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <HAL_ETH_SetMDIOClockRange+0x50>)
 8002a28:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002a2a:	bf94      	ite	ls
 8002a2c:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002a30:	f044 0410 	orrhi.w	r4, r4, #16
 8002a34:	e7eb      	b.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x1a>
 8002a36:	bf00      	nop
 8002a38:	02160ebf 	.word	0x02160ebf
 8002a3c:	03938700 	.word	0x03938700
 8002a40:	05f5e0ff 	.word	0x05f5e0ff
 8002a44:	08f0d17f 	.word	0x08f0d17f

08002a48 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002a48:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a54:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8002c14 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c0c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002a5c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002a60:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 8002a66:	43ac      	bics	r4, r5
 8002a68:	f040 80b7 	bne.w	8002bda <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a6c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a6e:	2703      	movs	r7, #3
 8002a70:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a78:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a7e:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a82:	2f01      	cmp	r7, #1
 8002a84:	d834      	bhi.n	8002af0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 8002a86:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a88:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a8c:	68cf      	ldr	r7, [r1, #12]
 8002a8e:	fa07 f70e 	lsl.w	r7, r7, lr
 8002a92:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8002a96:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a98:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a9a:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002aa2:	409f      	lsls	r7, r3
 8002aa4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002aa8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002aaa:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aac:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aae:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ab2:	688f      	ldr	r7, [r1, #8]
 8002ab4:	fa07 f70e 	lsl.w	r7, r7, lr
 8002ab8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8002abc:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	d119      	bne.n	8002af4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8002ac0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ac4:	f003 0a07 	and.w	sl, r3, #7
 8002ac8:	f04f 0b0f 	mov.w	fp, #15
 8002acc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002ad0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002ad4:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ad8:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002adc:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ae0:	690f      	ldr	r7, [r1, #16]
 8002ae2:	fa07 f70a 	lsl.w	r7, r7, sl
 8002ae6:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8002aea:	f8c8 7020 	str.w	r7, [r8, #32]
 8002aee:	e001      	b.n	8002af4 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af0:	2c03      	cmp	r4, #3
 8002af2:	d1da      	bne.n	8002aaa <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002af4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002af6:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002afa:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002afe:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b02:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8002b06:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b08:	d067      	beq.n	8002bda <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8002b0e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b12:	f003 0c03 	and.w	ip, r3, #3
 8002b16:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002b1e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b22:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8002b2a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8002b2e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b32:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8002b3a:	9401      	str	r4, [sp, #4]
 8002b3c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002b3e:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b40:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b44:	4c32      	ldr	r4, [pc, #200]	@ (8002c10 <HAL_GPIO_Init+0x1c0>)
 8002b46:	42a0      	cmp	r0, r4
 8002b48:	d04e      	beq.n	8002be8 <HAL_GPIO_Init+0x198>
 8002b4a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b4e:	42a0      	cmp	r0, r4
 8002b50:	d04c      	beq.n	8002bec <HAL_GPIO_Init+0x19c>
 8002b52:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b56:	42a0      	cmp	r0, r4
 8002b58:	d04a      	beq.n	8002bf0 <HAL_GPIO_Init+0x1a0>
 8002b5a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b5e:	42a0      	cmp	r0, r4
 8002b60:	d048      	beq.n	8002bf4 <HAL_GPIO_Init+0x1a4>
 8002b62:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b66:	42a0      	cmp	r0, r4
 8002b68:	d046      	beq.n	8002bf8 <HAL_GPIO_Init+0x1a8>
 8002b6a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b6e:	42a0      	cmp	r0, r4
 8002b70:	d044      	beq.n	8002bfc <HAL_GPIO_Init+0x1ac>
 8002b72:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b76:	42a0      	cmp	r0, r4
 8002b78:	d042      	beq.n	8002c00 <HAL_GPIO_Init+0x1b0>
 8002b7a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b7e:	42a0      	cmp	r0, r4
 8002b80:	d040      	beq.n	8002c04 <HAL_GPIO_Init+0x1b4>
 8002b82:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b86:	42a0      	cmp	r0, r4
 8002b88:	d03e      	beq.n	8002c08 <HAL_GPIO_Init+0x1b8>
 8002b8a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b8e:	42a0      	cmp	r0, r4
 8002b90:	bf14      	ite	ne
 8002b92:	240a      	movne	r4, #10
 8002b94:	2409      	moveq	r4, #9
 8002b96:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b9a:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b9e:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ba2:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8002ba8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	bf0c      	ite	eq
 8002bac:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002bae:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb0:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8002bb4:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8002bb6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	bf0c      	ite	eq
 8002bba:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002bbc:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bbe:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8002bc2:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8002bc4:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	bf0c      	ite	eq
 8002bc8:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002bca:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bcc:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002bce:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002bd0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	bf54      	ite	pl
 8002bd4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8002bd6:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8002bd8:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bda:	3301      	adds	r3, #1
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	f47f af3d 	bne.w	8002a5c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002be2:	b003      	add	sp, #12
 8002be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002be8:	2400      	movs	r4, #0
 8002bea:	e7d4      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002bec:	2401      	movs	r4, #1
 8002bee:	e7d2      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002bf0:	2402      	movs	r4, #2
 8002bf2:	e7d0      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002bf4:	2403      	movs	r4, #3
 8002bf6:	e7ce      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002bf8:	2404      	movs	r4, #4
 8002bfa:	e7cc      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002bfc:	2405      	movs	r4, #5
 8002bfe:	e7ca      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002c00:	2406      	movs	r4, #6
 8002c02:	e7c8      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002c04:	2407      	movs	r4, #7
 8002c06:	e7c6      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002c08:	2408      	movs	r4, #8
 8002c0a:	e7c4      	b.n	8002b96 <HAL_GPIO_Init+0x146>
 8002c0c:	40013c00 	.word	0x40013c00
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c18:	4b01      	ldr	r3, [pc, #4]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000014 	.word	0x20000014

08002c24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c26:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	4a03      	ldr	r2, [pc, #12]	@ (8002c40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c32:	6810      	ldr	r0, [r2, #0]
}
 8002c34:	40d8      	lsrs	r0, r3
 8002c36:	4770      	bx	lr
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08019249 	.word	0x08019249
 8002c40:	20000014 	.word	0x20000014

08002c44 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c44:	230f      	movs	r3, #15
 8002c46:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_GetClockConfig+0x34>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	f002 0203 	and.w	r2, r2, #3
 8002c50:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002c58:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002c60:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002c6a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <HAL_RCC_GetClockConfig+0x38>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	600b      	str	r3, [r1, #0]
}
 8002c76:	4770      	bx	lr
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c84:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d133      	bne.n	8002cf4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9c:	4a16      	ldr	r2, [pc, #88]	@ (8002cf8 <HAL_TIM_Base_Start_IT+0x74>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca6:	d017      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002ca8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002cb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002cb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002cc0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002cc8:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x54>
 8002cd0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <HAL_TIM_Base_Start_IT+0x78>)
 8002cdc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	2a06      	cmp	r2, #6
 8002ce0:	d006      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ce2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002ce6:	d003      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	4770      	bx	lr
    return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
}
 8002cf6:	4770      	bx	lr
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	00010007 	.word	0x00010007

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002d08:	6803      	ldr	r3, [r0, #0]
{
 8002d0a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002d0c:	68dd      	ldr	r5, [r3, #12]
{
 8002d0e:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8002d10:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d12:	07b2      	lsls	r2, r6, #30
 8002d14:	d50d      	bpl.n	8002d32 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d16:	07a9      	lsls	r1, r5, #30
 8002d18:	d50b      	bpl.n	8002d32 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d1a:	f06f 0202 	mvn.w	r2, #2
 8002d1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d20:	2201      	movs	r2, #1
 8002d22:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	079a      	lsls	r2, r3, #30
 8002d28:	d075      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	f7ff ffea 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d32:	0773      	lsls	r3, r6, #29
 8002d34:	d510      	bpl.n	8002d58 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d36:	0768      	lsls	r0, r5, #29
 8002d38:	d50e      	bpl.n	8002d58 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002d40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d44:	2202      	movs	r2, #2
 8002d46:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002d4e:	d068      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	f7ff ffd7 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d54:	2300      	movs	r3, #0
 8002d56:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d58:	0731      	lsls	r1, r6, #28
 8002d5a:	d50f      	bpl.n	8002d7c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d5c:	072a      	lsls	r2, r5, #28
 8002d5e:	d50d      	bpl.n	8002d7c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	079b      	lsls	r3, r3, #30
 8002d72:	d05c      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	f7ff ffc5 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d7c:	06f1      	lsls	r1, r6, #27
 8002d7e:	d510      	bpl.n	8002da2 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d80:	06ea      	lsls	r2, r5, #27
 8002d82:	d50e      	bpl.n	8002da2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	2208      	movs	r2, #8
 8002d90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002d98:	d04f      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	f7ff ffb2 	bl	8002d02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002da2:	07f3      	lsls	r3, r6, #31
 8002da4:	d508      	bpl.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002da6:	07e8      	lsls	r0, r5, #31
 8002da8:	d506      	bpl.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002db0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002db2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002db4:	f7fe fec8 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002db8:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8002dbc:	d008      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dbe:	0629      	lsls	r1, r5, #24
 8002dc0:	d506      	bpl.n	8002dd0 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8002dc8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002dca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dcc:	f000 f8c5 	bl	8002f5a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002dd0:	05f2      	lsls	r2, r6, #23
 8002dd2:	d508      	bpl.n	8002de6 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dd4:	062b      	lsls	r3, r5, #24
 8002dd6:	d506      	bpl.n	8002de6 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002dde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002de0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002de2:	f000 f8bb 	bl	8002f5c <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002de6:	0670      	lsls	r0, r6, #25
 8002de8:	d508      	bpl.n	8002dfc <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dea:	0669      	lsls	r1, r5, #25
 8002dec:	d506      	bpl.n	8002dfc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8002df4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002df6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002df8:	f7ff ff85 	bl	8002d06 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dfc:	06b2      	lsls	r2, r6, #26
 8002dfe:	d522      	bpl.n	8002e46 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e00:	06ab      	lsls	r3, r5, #26
 8002e02:	d520      	bpl.n	8002e46 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002e0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e0c:	611a      	str	r2, [r3, #16]
}
 8002e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002e12:	f000 b8a1 	b.w	8002f58 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	f7ff ff73 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff ff72 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e20:	e785      	b.n	8002d2e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	f7ff ff6d 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7ff ff6c 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e2c:	e792      	b.n	8002d54 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	f7ff ff67 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7ff ff66 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e38:	e79e      	b.n	8002d78 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	f7ff ff61 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff ff60 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e44:	e7ab      	b.n	8002d9e <HAL_TIM_IRQHandler+0x96>
}
 8002e46:	bd70      	pop	{r4, r5, r6, pc}

08002e48 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e48:	4a29      	ldr	r2, [pc, #164]	@ (8002ef0 <TIM_Base_SetConfig+0xa8>)
  tmpcr1 = TIMx->CR1;
 8002e4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	4290      	cmp	r0, r2
 8002e4e:	d012      	beq.n	8002e76 <TIM_Base_SetConfig+0x2e>
 8002e50:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002e54:	d00f      	beq.n	8002e76 <TIM_Base_SetConfig+0x2e>
 8002e56:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002e5a:	4290      	cmp	r0, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_Base_SetConfig+0x2e>
 8002e5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e62:	4290      	cmp	r0, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_Base_SetConfig+0x2e>
 8002e66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e6a:	4290      	cmp	r0, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0x2e>
 8002e6e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002e72:	4290      	cmp	r0, r2
 8002e74:	d108      	bne.n	8002e88 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e7a:	684a      	ldr	r2, [r1, #4]
 8002e7c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	68ca      	ldr	r2, [r1, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	e016      	b.n	8002eb6 <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e88:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef4 <TIM_Base_SetConfig+0xac>)
 8002e8a:	4290      	cmp	r0, r2
 8002e8c:	d0f7      	beq.n	8002e7e <TIM_Base_SetConfig+0x36>
 8002e8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e92:	4290      	cmp	r0, r2
 8002e94:	d0f3      	beq.n	8002e7e <TIM_Base_SetConfig+0x36>
 8002e96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e9a:	4290      	cmp	r0, r2
 8002e9c:	d0ef      	beq.n	8002e7e <TIM_Base_SetConfig+0x36>
 8002e9e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002ea2:	4290      	cmp	r0, r2
 8002ea4:	d0eb      	beq.n	8002e7e <TIM_Base_SetConfig+0x36>
 8002ea6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d0e7      	beq.n	8002e7e <TIM_Base_SetConfig+0x36>
 8002eae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002eb2:	4290      	cmp	r0, r2
 8002eb4:	d0e3      	beq.n	8002e7e <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb6:	694a      	ldr	r2, [r1, #20]
 8002eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ebc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ebe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec0:	688b      	ldr	r3, [r1, #8]
 8002ec2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	680b      	ldr	r3, [r1, #0]
 8002ec6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <TIM_Base_SetConfig+0xa8>)
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d003      	beq.n	8002ed6 <TIM_Base_SetConfig+0x8e>
 8002ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	d101      	bne.n	8002eda <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed6:	690b      	ldr	r3, [r1, #16]
 8002ed8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eda:	2301      	movs	r3, #1
 8002edc:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ede:	6903      	ldr	r3, [r0, #16]
 8002ee0:	07db      	lsls	r3, r3, #31
 8002ee2:	d503      	bpl.n	8002eec <TIM_Base_SetConfig+0xa4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ee4:	6903      	ldr	r3, [r0, #16]
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6103      	str	r3, [r0, #16]
  }
}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40014000 	.word	0x40014000

08002ef8 <HAL_TIM_Base_Init>:
{
 8002ef8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002efa:	4604      	mov	r4, r0
 8002efc:	b350      	cbz	r0, 8002f54 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002efe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002f02:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002f06:	b91b      	cbnz	r3, 8002f10 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f08:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f0c:	f7ff feb8 	bl	8002c80 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1a:	f7ff ff95 	bl	8002e48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
  return HAL_OK;
 8002f20:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f22:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002f2a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002f2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002f32:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002f36:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002f42:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002f46:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002f4a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002f4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8002f52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7fc      	b.n	8002f52 <HAL_TIM_Base_Init+0x5a>

08002f58 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002f5c:	4770      	bx	lr
	...

08002f60 <LL_EXTI_Init>:
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002f60:	7901      	ldrb	r1, [r0, #4]
{
 8002f62:	4602      	mov	r2, r0
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002f64:	6803      	ldr	r3, [r0, #0]
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002f66:	2900      	cmp	r1, #0
 8002f68:	d03f      	beq.n	8002fea <LL_EXTI_Init+0x8a>
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002f6a:	b90b      	cbnz	r3, 8002f70 <LL_EXTI_Init+0x10>
  ErrorStatus status = SUCCESS;
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	4770      	bx	lr
    {
      switch (EXTI_InitStruct->Mode)
 8002f70:	7941      	ldrb	r1, [r0, #5]
 8002f72:	2901      	cmp	r1, #1
 8002f74:	d01d      	beq.n	8002fb2 <LL_EXTI_Init+0x52>
 8002f76:	2902      	cmp	r1, #2
 8002f78:	d024      	beq.n	8002fc4 <LL_EXTI_Init+0x64>
 8002f7a:	bb39      	cbnz	r1, 8002fcc <LL_EXTI_Init+0x6c>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f7c:	4921      	ldr	r1, [pc, #132]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002f7e:	6848      	ldr	r0, [r1, #4]
 8002f80:	ea20 0003 	bic.w	r0, r0, r3
 8002f84:	6048      	str	r0, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002f86:	6808      	ldr	r0, [r1, #0]
 8002f88:	4318      	orrs	r0, r3
 8002f8a:	6008      	str	r0, [r1, #0]
  ErrorStatus status = SUCCESS;
 8002f8c:	2000      	movs	r0, #0
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002f8e:	7992      	ldrb	r2, [r2, #6]
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	d035      	beq.n	8003000 <LL_EXTI_Init+0xa0>
      {
        switch (EXTI_InitStruct->Trigger)
 8002f94:	2a02      	cmp	r2, #2
 8002f96:	d01b      	beq.n	8002fd0 <LL_EXTI_Init+0x70>
 8002f98:	2a03      	cmp	r2, #3
 8002f9a:	d022      	beq.n	8002fe2 <LL_EXTI_Init+0x82>
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d12e      	bne.n	8002ffe <LL_EXTI_Init+0x9e>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002fa0:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002fa2:	68d1      	ldr	r1, [r2, #12]
 8002fa4:	ea21 0103 	bic.w	r1, r1, r3
 8002fa8:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002faa:	6891      	ldr	r1, [r2, #8]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]
}
 8002fb0:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002fb2:	4914      	ldr	r1, [pc, #80]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002fb4:	6808      	ldr	r0, [r1, #0]
 8002fb6:	ea20 0003 	bic.w	r0, r0, r3
 8002fba:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002fbc:	6848      	ldr	r0, [r1, #4]
 8002fbe:	4318      	orrs	r0, r3
 8002fc0:	6048      	str	r0, [r1, #4]
}
 8002fc2:	e7e3      	b.n	8002f8c <LL_EXTI_Init+0x2c>
  SET_BIT(EXTI->IMR, ExtiLine);
 8002fc4:	490f      	ldr	r1, [pc, #60]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002fc6:	6808      	ldr	r0, [r1, #0]
 8002fc8:	4318      	orrs	r0, r3
 8002fca:	e7f6      	b.n	8002fba <LL_EXTI_Init+0x5a>
      switch (EXTI_InitStruct->Mode)
 8002fcc:	2001      	movs	r0, #1
 8002fce:	e7de      	b.n	8002f8e <LL_EXTI_Init+0x2e>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002fd2:	6891      	ldr	r1, [r2, #8]
 8002fd4:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002fd8:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002fda:	68d1      	ldr	r1, [r2, #12]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002fe2:	4a08      	ldr	r2, [pc, #32]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002fe4:	6891      	ldr	r1, [r2, #8]
 8002fe6:	4319      	orrs	r1, r3
 8002fe8:	e7f6      	b.n	8002fd8 <LL_EXTI_Init+0x78>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002fea:	4a06      	ldr	r2, [pc, #24]	@ (8003004 <LL_EXTI_Init+0xa4>)
 8002fec:	6811      	ldr	r1, [r2, #0]
 8002fee:	ea21 0103 	bic.w	r1, r1, r3
 8002ff2:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002ff4:	6851      	ldr	r1, [r2, #4]
 8002ff6:	ea21 0303 	bic.w	r3, r1, r3
 8002ffa:	6053      	str	r3, [r2, #4]
}
 8002ffc:	e7b6      	b.n	8002f6c <LL_EXTI_Init+0xc>
        switch (EXTI_InitStruct->Trigger)
 8002ffe:	2001      	movs	r0, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40013c00 	.word	0x40013c00

08003008 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800300e:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	fa95 f4a5 	rbit	r4, r5

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003014:	f04f 0c01 	mov.w	ip, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003018:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800301c:	2603      	movs	r6, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800301e:	ea6f 0e05 	mvn.w	lr, r5
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003022:	fa35 f004 	lsrs.w	r0, r5, r4
 8003026:	d101      	bne.n	800302c <LL_GPIO_Init+0x24>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8003028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800302c:	fa0c f304 	lsl.w	r3, ip, r4
    if (currentpin)
 8003030:	402b      	ands	r3, r5
 8003032:	d06f      	beq.n	8003114 <LL_GPIO_Init+0x10c>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003034:	6848      	ldr	r0, [r1, #4]
 8003036:	1e47      	subs	r7, r0, #1
 8003038:	2f01      	cmp	r7, #1
 800303a:	d81e      	bhi.n	800307a <LL_GPIO_Init+0x72>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800303c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8003040:	fa93 f7a3 	rbit	r7, r3
 8003044:	fab7 f787 	clz	r7, r7
 8003048:	fa93 f9a3 	rbit	r9, r3
 800304c:	007f      	lsls	r7, r7, #1
 800304e:	fab9 f989 	clz	r9, r9
 8003052:	fa06 f707 	lsl.w	r7, r6, r7
 8003056:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800305a:	ea28 0807 	bic.w	r8, r8, r7
 800305e:	688f      	ldr	r7, [r1, #8]
 8003060:	fa07 f709 	lsl.w	r7, r7, r9
 8003064:	ea48 0707 	orr.w	r7, r8, r7
 8003068:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800306a:	6857      	ldr	r7, [r2, #4]
 800306c:	ea0e 0807 	and.w	r8, lr, r7
 8003070:	68cf      	ldr	r7, [r1, #12]
 8003072:	436f      	muls	r7, r5
 8003074:	ea48 0707 	orr.w	r7, r8, r7
 8003078:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800307a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800307e:	fa93 f7a3 	rbit	r7, r3
 8003082:	fab7 f787 	clz	r7, r7
 8003086:	fa93 f9a3 	rbit	r9, r3
 800308a:	007f      	lsls	r7, r7, #1
 800308c:	fab9 f989 	clz	r9, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003090:	2802      	cmp	r0, #2
 8003092:	fa06 f707 	lsl.w	r7, r6, r7
 8003096:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800309a:	ea28 0807 	bic.w	r8, r8, r7
 800309e:	690f      	ldr	r7, [r1, #16]
 80030a0:	fa07 f709 	lsl.w	r7, r7, r9
 80030a4:	ea48 0707 	orr.w	r7, r8, r7
 80030a8:	60d7      	str	r7, [r2, #12]
 80030aa:	d11f      	bne.n	80030ec <LL_GPIO_Init+0xe4>
 80030ac:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030b0:	fab7 f787 	clz	r7, r7
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030b4:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030b8:	2f07      	cmp	r7, #7
 80030ba:	dc2d      	bgt.n	8003118 <LL_GPIO_Init+0x110>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80030bc:	6a17      	ldr	r7, [r2, #32]
 80030be:	fa93 faa3 	rbit	sl, r3
 80030c2:	faba fa8a 	clz	sl, sl
 80030c6:	fa93 f8a3 	rbit	r8, r3
 80030ca:	f04f 0b0f 	mov.w	fp, #15
 80030ce:	fab8 f888 	clz	r8, r8
 80030d2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80030d6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80030da:	fa0b fa0a 	lsl.w	sl, fp, sl
 80030de:	fa09 f808 	lsl.w	r8, r9, r8
 80030e2:	ea27 070a 	bic.w	r7, r7, sl
 80030e6:	ea47 0708 	orr.w	r7, r7, r8
 80030ea:	6217      	str	r7, [r2, #32]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80030ec:	f8d2 8000 	ldr.w	r8, [r2]
 80030f0:	fa93 f7a3 	rbit	r7, r3
 80030f4:	fab7 f787 	clz	r7, r7
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	007f      	lsls	r7, r7, #1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa06 f707 	lsl.w	r7, r6, r7
 8003108:	4098      	lsls	r0, r3
 800310a:	ea28 0807 	bic.w	r8, r8, r7
 800310e:	ea48 0000 	orr.w	r0, r8, r0
 8003112:	6010      	str	r0, [r2, #0]
    pinpos++;
 8003114:	3401      	adds	r4, #1
 8003116:	e784      	b.n	8003022 <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003118:	6a57      	ldr	r7, [r2, #36]	@ 0x24
 800311a:	ea4f 2813 	mov.w	r8, r3, lsr #8
 800311e:	fa98 faa8 	rbit	sl, r8
 8003122:	faba fa8a 	clz	sl, sl
 8003126:	fa98 f8a8 	rbit	r8, r8
 800312a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800312e:	fab8 f888 	clz	r8, r8
 8003132:	f04f 0a0f 	mov.w	sl, #15
 8003136:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800313a:	fa0a fa0b 	lsl.w	sl, sl, fp
 800313e:	fa09 f908 	lsl.w	r9, r9, r8
 8003142:	ea27 070a 	bic.w	r7, r7, sl
 8003146:	ea47 0709 	orr.w	r7, r7, r9
 800314a:	6257      	str	r7, [r2, #36]	@ 0x24
}
 800314c:	e7ce      	b.n	80030ec <LL_GPIO_Init+0xe4>
	...

08003150 <LL_RCC_HSI_IsReady>:
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003150:	4b02      	ldr	r3, [pc, #8]	@ (800315c <LL_RCC_HSI_IsReady+0xc>)
 8003152:	6818      	ldr	r0, [r3, #0]
}
 8003154:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <LL_RCC_LSE_IsReady>:
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003160:	4b02      	ldr	r3, [pc, #8]	@ (800316c <LL_RCC_LSE_IsReady+0xc>)
 8003162:	6f18      	ldr	r0, [r3, #112]	@ 0x70
}
 8003164:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003170:	4b03      	ldr	r3, [pc, #12]	@ (8003180 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003172:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <RCC_GetHCLKClockFreq+0x14>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800317a:	5cd3      	ldrb	r3, [r2, r3]
}
 800317c:	40d8      	lsrs	r0, r3
 800317e:	4770      	bx	lr
 8003180:	40023800 	.word	0x40023800
 8003184:	08019251 	.word	0x08019251

08003188 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800318a:	4a04      	ldr	r2, [pc, #16]	@ (800319c <RCC_GetPCLK1ClockFreq+0x14>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003192:	5cd3      	ldrb	r3, [r2, r3]
}
 8003194:	40d8      	lsrs	r0, r3
 8003196:	4770      	bx	lr
 8003198:	40023800 	.word	0x40023800
 800319c:	08019249 	.word	0x08019249

080031a0 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80031a2:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <RCC_GetPCLK2ClockFreq+0x14>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
}
 80031ac:	40d8      	lsrs	r0, r3
 80031ae:	4770      	bx	lr
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08019249 	.word	0x08019249

080031b8 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <RCC_PLL_GetFreqDomain_SYS+0x34>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80031ba:	480d      	ldr	r0, [pc, #52]	@ (80031f0 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 80031bc:	685a      	ldr	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80031c4:	4a0b      	ldr	r2, [pc, #44]	@ (80031f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80031c6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80031ca:	bf08      	it	eq
 80031cc:	4610      	moveq	r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031ce:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80031d0:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031d2:	f3c2 1288 	ubfx	r2, r2, #6, #9

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80031da:	fbb0 f0f1 	udiv	r0, r0, r1
 80031de:	3301      	adds	r3, #1
 80031e0:	4350      	muls	r0, r2
 80031e2:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 80031e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	007a1200 	.word	0x007a1200
 80031f4:	00f42400 	.word	0x00f42400

080031f8 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <RCC_GetSystemClockFreq+0x1c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8003200:	2b04      	cmp	r3, #4
 8003202:	d003      	beq.n	800320c <RCC_GetSystemClockFreq+0x14>
 8003204:	2b08      	cmp	r3, #8
 8003206:	d103      	bne.n	8003210 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003208:	f7ff bfd6 	b.w	80031b8 <RCC_PLL_GetFreqDomain_SYS>
  switch (LL_RCC_GetSysClkSource())
 800320c:	4802      	ldr	r0, [pc, #8]	@ (8003218 <RCC_GetSystemClockFreq+0x20>)
 800320e:	4770      	bx	lr
      frequency = HSI_VALUE;
 8003210:	4802      	ldr	r0, [pc, #8]	@ (800321c <RCC_GetSystemClockFreq+0x24>)
}
 8003212:	4770      	bx	lr
 8003214:	40023800 	.word	0x40023800
 8003218:	007a1200 	.word	0x007a1200
 800321c:	00f42400 	.word	0x00f42400

08003220 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003220:	2803      	cmp	r0, #3
{
 8003222:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003224:	d128      	bne.n	8003278 <LL_RCC_GetUSARTClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8003226:	4b34      	ldr	r3, [pc, #208]	@ (80032f8 <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003228:	4a34      	ldr	r2, [pc, #208]	@ (80032fc <LL_RCC_GetUSARTClockFreq+0xdc>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <LL_RCC_GetUSARTClockFreq+0x2e>
 800323a:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800323e:	d00c      	beq.n	800325a <LL_RCC_GetUSARTClockFreq+0x3a>
 8003240:	3a01      	subs	r2, #1
 8003242:	4293      	cmp	r3, r2
 8003244:	d110      	bne.n	8003268 <LL_RCC_GetUSARTClockFreq+0x48>
}
 8003246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 800324a:	f7ff bfd5 	b.w	80031f8 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 800324e:	f7ff ff7f 	bl	8003150 <LL_RCC_HSI_IsReady>
 8003252:	2800      	cmp	r0, #0
 8003254:	d14e      	bne.n	80032f4 <LL_RCC_GetUSARTClockFreq+0xd4>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003256:	2000      	movs	r0, #0
}
 8003258:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 800325a:	f7ff ff81 	bl	8003160 <LL_RCC_LSE_IsReady>
 800325e:	3800      	subs	r0, #0
 8003260:	bf18      	it	ne
 8003262:	2001      	movne	r0, #1
 8003264:	03c0      	lsls	r0, r0, #15
 8003266:	e7f7      	b.n	8003258 <LL_RCC_GetUSARTClockFreq+0x38>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003268:	f7ff ffc6 	bl	80031f8 <RCC_GetSystemClockFreq>
 800326c:	f7ff ff80 	bl	8003170 <RCC_GetHCLKClockFreq>
}
 8003270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003274:	f7ff bf94 	b.w	80031a0 <RCC_GetPCLK2ClockFreq>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003278:	280c      	cmp	r0, #12
 800327a:	d117      	bne.n	80032ac <LL_RCC_GetUSARTClockFreq+0x8c>
 800327c:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800327e:	4a20      	ldr	r2, [pc, #128]	@ (8003300 <LL_RCC_GetUSARTClockFreq+0xe0>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800328c:	4293      	cmp	r3, r2
 800328e:	d0de      	beq.n	800324e <LL_RCC_GetUSARTClockFreq+0x2e>
 8003290:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8003294:	d0e1      	beq.n	800325a <LL_RCC_GetUSARTClockFreq+0x3a>
 8003296:	3a04      	subs	r2, #4
 8003298:	4293      	cmp	r3, r2
 800329a:	d0d4      	beq.n	8003246 <LL_RCC_GetUSARTClockFreq+0x26>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800329c:	f7ff ffac 	bl	80031f8 <RCC_GetSystemClockFreq>
 80032a0:	f7ff ff66 	bl	8003170 <RCC_GetHCLKClockFreq>
}
 80032a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80032a8:	f7ff bf6e 	b.w	8003188 <RCC_GetPCLK1ClockFreq>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 80032ac:	f5b0 6f40 	cmp.w	r0, #3072	@ 0xc00
 80032b0:	d10f      	bne.n	80032d2 <LL_RCC_GetUSARTClockFreq+0xb2>
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80032b4:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <LL_RCC_GetUSARTClockFreq+0xe4>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032be:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d0c3      	beq.n	800324e <LL_RCC_GetUSARTClockFreq+0x2e>
 80032c6:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 80032ca:	d0c6      	beq.n	800325a <LL_RCC_GetUSARTClockFreq+0x3a>
 80032cc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80032d0:	e7b7      	b.n	8003242 <LL_RCC_GetUSARTClockFreq+0x22>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80032d2:	2830      	cmp	r0, #48	@ 0x30
 80032d4:	d1bf      	bne.n	8003256 <LL_RCC_GetUSARTClockFreq+0x36>
 80032d6:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <LL_RCC_GetUSARTClockFreq+0xd8>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80032d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <LL_RCC_GetUSARTClockFreq+0xe8>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032e2:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d0b1      	beq.n	800324e <LL_RCC_GetUSARTClockFreq+0x2e>
 80032ea:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80032ee:	d0b4      	beq.n	800325a <LL_RCC_GetUSARTClockFreq+0x3a>
 80032f0:	3a10      	subs	r2, #16
 80032f2:	e7d1      	b.n	8003298 <LL_RCC_GetUSARTClockFreq+0x78>
          usart_frequency = HSI_VALUE;
 80032f4:	4805      	ldr	r0, [pc, #20]	@ (800330c <LL_RCC_GetUSARTClockFreq+0xec>)
  return usart_frequency;
 80032f6:	e7af      	b.n	8003258 <LL_RCC_GetUSARTClockFreq+0x38>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	00030002 	.word	0x00030002
 8003300:	000c0008 	.word	0x000c0008
 8003304:	0c000800 	.word	0x0c000800
 8003308:	00300020 	.word	0x00300020
 800330c:	00f42400 	.word	0x00f42400

08003310 <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003310:	28c0      	cmp	r0, #192	@ 0xc0
{
 8003312:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003314:	d128      	bne.n	8003368 <LL_RCC_GetUARTClockFreq+0x58>
 8003316:	4b32      	ldr	r3, [pc, #200]	@ (80033e0 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003318:	4a32      	ldr	r2, [pc, #200]	@ (80033e4 <LL_RCC_GetUARTClockFreq+0xd4>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003322:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <LL_RCC_GetUARTClockFreq+0x2e>
 800332a:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800332e:	d00c      	beq.n	800334a <LL_RCC_GetUARTClockFreq+0x3a>
 8003330:	3a40      	subs	r2, #64	@ 0x40
 8003332:	4293      	cmp	r3, r2
 8003334:	d110      	bne.n	8003358 <LL_RCC_GetUARTClockFreq+0x48>
}
 8003336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetSystemClockFreq();
 800333a:	f7ff bf5d 	b.w	80031f8 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 800333e:	f7ff ff07 	bl	8003150 <LL_RCC_HSI_IsReady>
 8003342:	2800      	cmp	r0, #0
 8003344:	d149      	bne.n	80033da <LL_RCC_GetUARTClockFreq+0xca>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003346:	2000      	movs	r0, #0
}
 8003348:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 800334a:	f7ff ff09 	bl	8003160 <LL_RCC_LSE_IsReady>
 800334e:	3800      	subs	r0, #0
 8003350:	bf18      	it	ne
 8003352:	2001      	movne	r0, #1
 8003354:	03c0      	lsls	r0, r0, #15
 8003356:	e7f7      	b.n	8003348 <LL_RCC_GetUARTClockFreq+0x38>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003358:	f7ff ff4e 	bl	80031f8 <RCC_GetSystemClockFreq>
 800335c:	f7ff ff08 	bl	8003170 <RCC_GetHCLKClockFreq>
}
 8003360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003364:	f7ff bf10 	b.w	8003188 <RCC_GetPCLK1ClockFreq>
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003368:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
 800336c:	d10f      	bne.n	800338e <LL_RCC_GetUARTClockFreq+0x7e>
 800336e:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003370:	4a1d      	ldr	r2, [pc, #116]	@ (80033e8 <LL_RCC_GetUARTClockFreq+0xd8>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800337e:	4293      	cmp	r3, r2
 8003380:	d0dd      	beq.n	800333e <LL_RCC_GetUARTClockFreq+0x2e>
 8003382:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8003386:	d0e0      	beq.n	800334a <LL_RCC_GetUARTClockFreq+0x3a>
 8003388:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800338c:	e7d1      	b.n	8003332 <LL_RCC_GetUARTClockFreq+0x22>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800338e:	f5b0 5f40 	cmp.w	r0, #12288	@ 0x3000
 8003392:	d10f      	bne.n	80033b4 <LL_RCC_GetUARTClockFreq+0xa4>
 8003394:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003396:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <LL_RCC_GetUARTClockFreq+0xdc>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033a0:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d0ca      	beq.n	800333e <LL_RCC_GetUARTClockFreq+0x2e>
 80033a8:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 80033ac:	d0cd      	beq.n	800334a <LL_RCC_GetUARTClockFreq+0x3a>
 80033ae:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 80033b2:	e7be      	b.n	8003332 <LL_RCC_GetUARTClockFreq+0x22>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 80033b4:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 80033b8:	d1c5      	bne.n	8003346 <LL_RCC_GetUARTClockFreq+0x36>
 80033ba:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <LL_RCC_GetUARTClockFreq+0xd0>)
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80033bc:	4a0c      	ldr	r2, [pc, #48]	@ (80033f0 <LL_RCC_GetUARTClockFreq+0xe0>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033c6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d0b7      	beq.n	800333e <LL_RCC_GetUARTClockFreq+0x2e>
 80033ce:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80033d2:	d0ba      	beq.n	800334a <LL_RCC_GetUARTClockFreq+0x3a>
 80033d4:	f5a2 4280 	sub.w	r2, r2, #16384	@ 0x4000
 80033d8:	e7ab      	b.n	8003332 <LL_RCC_GetUARTClockFreq+0x22>
          uart_frequency = HSI_VALUE;
 80033da:	4806      	ldr	r0, [pc, #24]	@ (80033f4 <LL_RCC_GetUARTClockFreq+0xe4>)
  return uart_frequency;
 80033dc:	e7b4      	b.n	8003348 <LL_RCC_GetUARTClockFreq+0x38>
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00c00080 	.word	0x00c00080
 80033e8:	03000200 	.word	0x03000200
 80033ec:	30002000 	.word	0x30002000
 80033f0:	c0008000 	.word	0xc0008000
 80033f4:	00f42400 	.word	0x00f42400

080033f8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80033f8:	6800      	ldr	r0, [r0, #0]
}
 80033fa:	f000 0003 	and.w	r0, r0, #3
 80033fe:	4770      	bx	lr

08003400 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 8003400:	6900      	ldr	r0, [r0, #16]
}
 8003402:	b2c0      	uxtb	r0, r0
 8003404:	4770      	bx	lr

08003406 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003406:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8003408:	5840      	ldr	r0, [r0, r1]
}  
 800340a:	4770      	bx	lr

0800340c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800340c:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800340e:	6803      	ldr	r3, [r0, #0]
 8003410:	4604      	mov	r4, r0
 8003412:	460d      	mov	r5, r1
 8003414:	07db      	lsls	r3, r3, #31
 8003416:	d501      	bpl.n	800341c <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 8003418:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800341a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 800341c:	68ea      	ldr	r2, [r5, #12]
 800341e:	686b      	ldr	r3, [r5, #4]
 8003420:	6801      	ldr	r1, [r0, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	692a      	ldr	r2, [r5, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	69aa      	ldr	r2, [r5, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <LL_USART_Init+0xd8>)
 800342e:	400a      	ands	r2, r1
 8003430:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003432:	68aa      	ldr	r2, [r5, #8]
 8003434:	6003      	str	r3, [r0, #0]
 8003436:	6843      	ldr	r3, [r0, #4]
 8003438:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800343c:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800343e:	696a      	ldr	r2, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003440:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003442:	6883      	ldr	r3, [r0, #8]
 8003444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003448:	4313      	orrs	r3, r2
 800344a:	6083      	str	r3, [r0, #8]
    if (USARTx == USART1)
 800344c:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <LL_USART_Init+0xdc>)
 800344e:	4298      	cmp	r0, r3
 8003450:	d119      	bne.n	8003486 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003452:	2003      	movs	r0, #3
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003454:	f7ff fee4 	bl	8003220 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003458:	2800      	cmp	r0, #0
 800345a:	d0dd      	beq.n	8003418 <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 800345c:	682a      	ldr	r2, [r5, #0]
 800345e:	2a00      	cmp	r2, #0
 8003460:	d0da      	beq.n	8003418 <LL_USART_Init+0xc>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003462:	69a9      	ldr	r1, [r5, #24]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003464:	0853      	lsrs	r3, r2, #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003466:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800346a:	d135      	bne.n	80034d8 <LL_USART_Init+0xcc>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800346c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003470:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 8003474:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003478:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800347e:	4313      	orrs	r3, r2
      status = SUCCESS;
 8003480:	2000      	movs	r0, #0
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003482:	60e3      	str	r3, [r4, #12]
 8003484:	e7c9      	b.n	800341a <LL_USART_Init+0xe>
    else if (USARTx == USART2)
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <LL_USART_Init+0xe0>)
 8003488:	4298      	cmp	r0, r3
 800348a:	d101      	bne.n	8003490 <LL_USART_Init+0x84>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800348c:	200c      	movs	r0, #12
 800348e:	e7e1      	b.n	8003454 <LL_USART_Init+0x48>
    else if (USARTx == USART3)
 8003490:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <LL_USART_Init+0xe4>)
 8003492:	4298      	cmp	r0, r3
 8003494:	d101      	bne.n	800349a <LL_USART_Init+0x8e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003496:	2030      	movs	r0, #48	@ 0x30
 8003498:	e7dc      	b.n	8003454 <LL_USART_Init+0x48>
    else if (USARTx == UART4)
 800349a:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <LL_USART_Init+0xe8>)
 800349c:	4298      	cmp	r0, r3
 800349e:	d103      	bne.n	80034a8 <LL_USART_Init+0x9c>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80034a0:	20c0      	movs	r0, #192	@ 0xc0
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 80034a2:	f7ff ff35 	bl	8003310 <LL_RCC_GetUARTClockFreq>
 80034a6:	e7d7      	b.n	8003458 <LL_USART_Init+0x4c>
    else if (USARTx == UART5)
 80034a8:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <LL_USART_Init+0xec>)
 80034aa:	4298      	cmp	r0, r3
 80034ac:	d102      	bne.n	80034b4 <LL_USART_Init+0xa8>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80034ae:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80034b2:	e7f6      	b.n	80034a2 <LL_USART_Init+0x96>
    else if (USARTx == USART6)
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <LL_USART_Init+0xf0>)
 80034b6:	4298      	cmp	r0, r3
 80034b8:	d102      	bne.n	80034c0 <LL_USART_Init+0xb4>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 80034ba:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80034be:	e7c9      	b.n	8003454 <LL_USART_Init+0x48>
    else if (USARTx == UART7)
 80034c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <LL_USART_Init+0xf4>)
 80034c2:	4298      	cmp	r0, r3
 80034c4:	d102      	bne.n	80034cc <LL_USART_Init+0xc0>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 80034c6:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 80034ca:	e7ea      	b.n	80034a2 <LL_USART_Init+0x96>
    else if (USARTx == UART8)
 80034cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <LL_USART_Init+0xf8>)
 80034ce:	4298      	cmp	r0, r3
 80034d0:	d1a2      	bne.n	8003418 <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 80034d2:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 80034d6:	e7e4      	b.n	80034a2 <LL_USART_Init+0x96>
 80034d8:	4403      	add	r3, r0
 80034da:	fbb3 f3f2 	udiv	r3, r3, r2
 80034de:	b29b      	uxth	r3, r3
 80034e0:	e7ce      	b.n	8003480 <LL_USART_Init+0x74>
 80034e2:	bf00      	nop
 80034e4:	efff69f3 	.word	0xefff69f3
 80034e8:	40011000 	.word	0x40011000
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40004800 	.word	0x40004800
 80034f4:	40004c00 	.word	0x40004c00
 80034f8:	40005000 	.word	0x40005000
 80034fc:	40011400 	.word	0x40011400
 8003500:	40007800 	.word	0x40007800
 8003504:	40007c00 	.word	0x40007c00

08003508 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003508:	4b01      	ldr	r3, [pc, #4]	@ (8003510 <LL_SetSystemCoreClock+0x8>)
 800350a:	6018      	str	r0, [r3, #0]
}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000014 	.word	0x20000014

08003514 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <LL_AHB1_GRP1_EnableClock+0x18>)
{
 8003516:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800351a:	4302      	orrs	r2, r0
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4003      	ands	r3, r0
 8003522:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003524:	9b01      	ldr	r3, [sp, #4]
}
 8003526:	b002      	add	sp, #8
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <CmdResp2Error>:
static SD_Error CmdResp2Error(void)
{
  SD_Error errorstatus = SDMMC_OK;
  uint32_t status;

  status = SDMMC1->STA;
 8003530:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <CmdResp2Error+0x2c>)

  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND)))
  {
    status = SDMMC1->STA;
 8003532:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND)))
 8003534:	f010 0f45 	tst.w	r0, #69	@ 0x45
 8003538:	d0fb      	beq.n	8003532 <CmdResp2Error+0x2>
  }

  if (status & SDMMC_STA_CTIMEOUT)
 800353a:	f010 0f04 	tst.w	r0, #4
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <CmdResp2Error+0x2c>)
 8003540:	d003      	beq.n	800354a <CmdResp2Error+0x1a>
  {
    errorstatus = SDMMC_CMD_RSP_TIMEOUT;
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003542:	2204      	movs	r2, #4
    return(errorstatus);
 8003544:	2003      	movs	r0, #3
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38
    return(errorstatus);
 8003548:	4770      	bx	lr
  }
  else if (status & SDMMC_STA_CCRCFAIL)
 800354a:	f010 0001 	ands.w	r0, r0, #1
 800354e:	d002      	beq.n	8003556 <CmdResp2Error+0x26>
  {
    errorstatus = SDMMC_CMD_CRC_FAIL;
    SDMMC1->ICR = SDMMC_ICR_CCRCFAILC;
 8003550:	2001      	movs	r0, #1
 8003552:	6398      	str	r0, [r3, #56]	@ 0x38
    return(errorstatus);
 8003554:	4770      	bx	lr
  }

  /*!< Clear all the static flags */
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 8003556:	4a02      	ldr	r2, [pc, #8]	@ (8003560 <CmdResp2Error+0x30>)
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38

  return(errorstatus);
}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	004005ff 	.word	0x004005ff

08003564 <CmdResp1Error>:
{
 8003564:	b508      	push	{r3, lr}
  status = SDMMC1->STA;
 8003566:	4a37      	ldr	r2, [pc, #220]	@ (8003644 <CmdResp1Error+0xe0>)
{
 8003568:	4603      	mov	r3, r0
    status = SDMMC1->STA;
 800356a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT)))
 800356c:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8003570:	d0fb      	beq.n	800356a <CmdResp1Error+0x6>
  if (status & SDMMC_STA_CTIMEOUT)
 8003572:	f011 0f04 	tst.w	r1, #4
 8003576:	4833      	ldr	r0, [pc, #204]	@ (8003644 <CmdResp1Error+0xe0>)
 8003578:	d003      	beq.n	8003582 <CmdResp1Error+0x1e>
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 800357a:	2304      	movs	r3, #4
 800357c:	6383      	str	r3, [r0, #56]	@ 0x38
    return(errorstatus);
 800357e:	2003      	movs	r0, #3
}
 8003580:	bd08      	pop	{r3, pc}
  else if (status & SDMMC_STA_CCRCFAIL)
 8003582:	f011 0101 	ands.w	r1, r1, #1
 8003586:	d003      	beq.n	8003590 <CmdResp1Error+0x2c>
    SDMMC1->ICR = SDMMC_ICR_CCRCFAILC;
 8003588:	2301      	movs	r3, #1
 800358a:	6383      	str	r3, [r0, #56]	@ 0x38
    return(errorstatus);
 800358c:	4618      	mov	r0, r3
 800358e:	e7f7      	b.n	8003580 <CmdResp1Error+0x1c>
  if ((SDMMC1->RESPCMD) != cmd)
 8003590:	6902      	ldr	r2, [r0, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <CmdResp1Error+0x36>
    return(errorstatus);
 8003596:	2010      	movs	r0, #16
 8003598:	e7f2      	b.n	8003580 <CmdResp1Error+0x1c>
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 800359a:	4b2b      	ldr	r3, [pc, #172]	@ (8003648 <CmdResp1Error+0xe4>)
 800359c:	6383      	str	r3, [r0, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);  //stm32f7xx_ll_sdmmc.h 446 SDMMC_RESP1 = 0x00000000U
 800359e:	f7ff ff32 	bl	8003406 <SDMMC_GetResponse>
 80035a2:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80035a4:	4829      	ldr	r0, [pc, #164]	@ (800364c <CmdResp1Error+0xe8>)
 80035a6:	4018      	ands	r0, r3
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d0e9      	beq.n	8003580 <CmdResp1Error+0x1c>
  if (response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db27      	blt.n	8003600 <CmdResp1Error+0x9c>
  if (response_r1 & SDMMC_OCR_ADDR_MISALIGNED)
 80035b0:	005a      	lsls	r2, r3, #1
 80035b2:	d427      	bmi.n	8003604 <CmdResp1Error+0xa0>
  if (response_r1 & SDMMC_OCR_BLOCK_LEN_ERR)
 80035b4:	0099      	lsls	r1, r3, #2
 80035b6:	d427      	bmi.n	8003608 <CmdResp1Error+0xa4>
  if (response_r1 & SDMMC_OCR_ERASE_SEQ_ERR)
 80035b8:	00da      	lsls	r2, r3, #3
 80035ba:	d427      	bmi.n	800360c <CmdResp1Error+0xa8>
  if (response_r1 & SDMMC_OCR_BAD_ERASE_PARAM)
 80035bc:	0119      	lsls	r1, r3, #4
 80035be:	d427      	bmi.n	8003610 <CmdResp1Error+0xac>
  if (response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION)
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	d427      	bmi.n	8003614 <CmdResp1Error+0xb0>
  if (response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80035c4:	01d9      	lsls	r1, r3, #7
 80035c6:	d427      	bmi.n	8003618 <CmdResp1Error+0xb4>
  if (response_r1 & SDMMC_OCR_COM_CRC_FAILED)
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	d427      	bmi.n	800361c <CmdResp1Error+0xb8>
  if (response_r1 & SDMMC_OCR_ILLEGAL_CMD)
 80035cc:	0259      	lsls	r1, r3, #9
 80035ce:	d4e2      	bmi.n	8003596 <CmdResp1Error+0x32>
  if (response_r1 & SDMMC_OCR_CARD_ECC_FAILED)
 80035d0:	029a      	lsls	r2, r3, #10
 80035d2:	d425      	bmi.n	8003620 <CmdResp1Error+0xbc>
  if (response_r1 & SDMMC_OCR_CC_ERROR)
 80035d4:	02d9      	lsls	r1, r3, #11
 80035d6:	d425      	bmi.n	8003624 <CmdResp1Error+0xc0>
  if (response_r1 & SDMMC_OCR_GENERAL_UNKNOWN_ERROR)
 80035d8:	031a      	lsls	r2, r3, #12
 80035da:	d425      	bmi.n	8003628 <CmdResp1Error+0xc4>
  if (response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN)
 80035dc:	0359      	lsls	r1, r3, #13
 80035de:	d425      	bmi.n	800362c <CmdResp1Error+0xc8>
  if (response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) //SD_OCR_STREAM_WRITE_OVERRUN
 80035e0:	039a      	lsls	r2, r3, #14
 80035e2:	d425      	bmi.n	8003630 <CmdResp1Error+0xcc>
  if (response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE)//SD_OCR_CID_CSD_OVERWRIETE
 80035e4:	03d9      	lsls	r1, r3, #15
 80035e6:	d425      	bmi.n	8003634 <CmdResp1Error+0xd0>
  if (response_r1 & SDMMC_OCR_WP_ERASE_SKIP)
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	d425      	bmi.n	8003638 <CmdResp1Error+0xd4>
  if (response_r1 & SDMMC_OCR_CARD_ECC_DISABLED)
 80035ec:	0459      	lsls	r1, r3, #17
 80035ee:	d425      	bmi.n	800363c <CmdResp1Error+0xd8>
  if (response_r1 & SDMMC_OCR_ERASE_RESET)
 80035f0:	049a      	lsls	r2, r3, #18
 80035f2:	d425      	bmi.n	8003640 <CmdResp1Error+0xdc>
    return(errorstatus);
 80035f4:	f013 0f08 	tst.w	r3, #8
 80035f8:	bf14      	ite	ne
 80035fa:	201a      	movne	r0, #26
 80035fc:	2000      	moveq	r0, #0
 80035fe:	e7bf      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_ADDR_OUT_OF_RANGE);
 8003600:	201c      	movs	r0, #28
 8003602:	e7bd      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_ADDR_MISALIGNED);
 8003604:	2009      	movs	r0, #9
 8003606:	e7bb      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_BLOCK_LEN_ERR);
 8003608:	200a      	movs	r0, #10
 800360a:	e7b9      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_ERASE_SEQ_ERR);
 800360c:	200b      	movs	r0, #11
 800360e:	e7b7      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_BAD_ERASE_PARAM);
 8003610:	200c      	movs	r0, #12
 8003612:	e7b5      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_WRITE_PROT_VIOLATION);
 8003614:	200d      	movs	r0, #13
 8003616:	e7b3      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_LOCK_UNLOCK_FAILED);
 8003618:	200e      	movs	r0, #14
 800361a:	e7b1      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_COM_CRC_FAILED);
 800361c:	200f      	movs	r0, #15
 800361e:	e7af      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_CARD_ECC_FAILED);
 8003620:	2011      	movs	r0, #17
 8003622:	e7ad      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_CC_ERROR);
 8003624:	2012      	movs	r0, #18
 8003626:	e7ab      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_GENERAL_UNKNOWN_ERROR);
 8003628:	2013      	movs	r0, #19
 800362a:	e7a9      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_STREAM_READ_UNDERRUN);
 800362c:	2014      	movs	r0, #20
 800362e:	e7a7      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_STREAM_WRITE_OVERRUN);
 8003630:	2015      	movs	r0, #21
 8003632:	e7a5      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_CID_CSD_OVERWRITE);
 8003634:	2016      	movs	r0, #22
 8003636:	e7a3      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_WP_ERASE_SKIP);
 8003638:	2017      	movs	r0, #23
 800363a:	e7a1      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_CARD_ECC_DISABLED);
 800363c:	2018      	movs	r0, #24
 800363e:	e79f      	b.n	8003580 <CmdResp1Error+0x1c>
    return(SDMMC_ERASE_RESET);
 8003640:	2019      	movs	r0, #25
 8003642:	e79d      	b.n	8003580 <CmdResp1Error+0x1c>
 8003644:	40012c00 	.word	0x40012c00
 8003648:	004005ff 	.word	0x004005ff
 800364c:	fdffe008 	.word	0xfdffe008

08003650 <FindSCR.constprop.0>:
  */
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
  uint32_t tmpreg, index = 0;
  SD_Error errorstatus = SDMMC_OK;
  uint32_t tempscr[2] = {0, 0};
 8003650:	2300      	movs	r3, #0
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
 8003652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003654:	4c2a      	ldr	r4, [pc, #168]	@ (8003700 <FindSCR.constprop.0+0xb0>)
 8003656:	2708      	movs	r7, #8
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
 8003658:	4605      	mov	r5, r0

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDMMC1_Command(SDMMC_CMD_SET_BLOCKLEN, SDMMC_RESPONSE_SHORT, (uint32_t)8);
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 800365a:	2010      	movs	r0, #16
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
 800365c:	460e      	mov	r6, r1
  uint32_t tempscr[2] = {0, 0};
 800365e:	e9cd 3300 	strd	r3, r3, [sp]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003662:	f44f 638a 	mov.w	r3, #1104	@ 0x450
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003666:	60a7      	str	r7, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003668:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 800366a:	f7ff ff7b 	bl	8003564 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 800366e:	bb30      	cbnz	r0, 80036be <FindSCR.constprop.0+0x6e>
  {
    return(errorstatus);
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t)(((uint32_t) rca) << 16)));
 8003670:	042d      	lsls	r5, r5, #16
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003672:	f240 4377 	movw	r3, #1143	@ 0x477
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003676:	2037      	movs	r0, #55	@ 0x37
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003678:	60a5      	str	r5, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800367a:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 800367c:	f7ff ff72 	bl	8003564 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 8003680:	b9e8      	cbnz	r0, 80036be <FindSCR.constprop.0+0x6e>
  //SDIO_DataInitStructure.TransferDir = SDIO_TransferDir_ToSDIO;
  //SDIO_DataInitStructure.TransferMode = SDIO_TransferMode_Block;SDIO_TRANSFER_MODE_BLOCK=0
  //SDIO_DataInitStructure.DPSM = SDIO_DPSM_Enable;SDIO_DPSM_ENABLE=SDIO_DCTRL_DTEN=1
  //SDMMC_ConfigData(SDMMC1, &SDIO_DataInitStructure);
  /* Set the SDMMC Data TimeOut value */
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	6263      	str	r3, [r4, #36]	@ 0x24
  /* Set the SDMMC DataLength value */
  SDMMC1->DLEN = 8;
 8003688:	62a7      	str	r7, [r4, #40]	@ 0x28
  /* Get the SDIO DCTRL value */
  tmpreg = SDMMC1->DCTRL;
 800368a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= ((uint32_t)0xFFFFFF08);
 800368c:	f023 03f7 	bic.w	r3, r3, #247	@ 0xf7
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (SDMMC_DATABLOCK_SIZE_8B) & SDMMC_DCTRL_DBLOCKSIZE;  //data block length when the block data transfer mode is selected
  tmpreg |= (0x0UL<<2) & SDMMC_DCTRL_DTMODE; //0: Block data transfer 1: Stream or SDIO multibyte data transfer
  tmpreg |= (0x1UL<<1) & SDMMC_DCTRL_DTDIR;  //Data transfer direction selection. from sdcard to mcu
  tmpreg |= (0x1UL<<0) & SDMMC_DCTRL_DTEN;   //Data transfer enabled bit
 8003690:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
  /* Write to SDMMC DCTRL */
  SDMMC1->DCTRL = tmpreg;
 8003694:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003696:	f240 4373 	movw	r3, #1139	@ 0x473
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800369a:	60a0      	str	r0, [r4, #8]

  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDMMC1_Command(SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_RESPONSE_SHORT, 0x0);
  errorstatus = CmdResp1Error(SDMMC_CMD_SD_APP_SEND_SCR);
 800369c:	2033      	movs	r0, #51	@ 0x33
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800369e:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SD_APP_SEND_SCR);
 80036a0:	f7ff ff60 	bl	8003564 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 80036a4:	b958      	cbnz	r0, 80036be <FindSCR.constprop.0+0x6e>
  {
    return(errorstatus);
  }

  tmpreg = SDMMC1->STA;
 80036a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  uint32_t tmpreg, index = 0;
 80036a8:	4602      	mov	r2, r0
  while (!(tmpreg & (SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_DBCKEND))) //| SDMMC_STA_STBITERR
 80036aa:	f240 412a 	movw	r1, #1066	@ 0x42a
 80036ae:	420b      	tst	r3, r1
  {
    tmpreg = SDMMC1->STA;
 80036b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  while (!(tmpreg & (SDMMC_STA_RXOVERR | SDMMC_STA_DCRCFAIL | SDMMC_STA_DTIMEOUT | SDMMC_STA_DBCKEND))) //| SDMMC_STA_STBITERR
 80036b2:	d006      	beq.n	80036c2 <FindSCR.constprop.0+0x72>
      index++;
    }
  }

  tmpreg = SDMMC1->STA;
  if ((tmpreg & SDMMC_STA_DTIMEOUT) != RESET)
 80036b4:	0719      	lsls	r1, r3, #28
 80036b6:	d50f      	bpl.n	80036d8 <FindSCR.constprop.0+0x88>
  {
    SDMMC1->ICR = SDMMC_ICR_DTIMEOUTC;
 80036b8:	2308      	movs	r3, #8
    errorstatus = SDMMC_DATA_TIMEOUT;
    return(errorstatus);
 80036ba:	2004      	movs	r0, #4
    SDMMC1->ICR = SDMMC_ICR_DTIMEOUTC;
 80036bc:	63a3      	str	r3, [r4, #56]	@ 0x38
  *(pscr + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24) | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);

  *(pscr) = ((tempscr[1] & SDMMC_0TO7BITS) << 24) | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);

  return(errorstatus);
}
 80036be:	b003      	add	sp, #12
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpreg & SDMMC_STA_RXDAVL) != RESET)
 80036c2:	029d      	lsls	r5, r3, #10
 80036c4:	d5f3      	bpl.n	80036ae <FindSCR.constprop.0+0x5e>
      *(tempscr + index) = SDMMC1->FIFO;
 80036c6:	ad02      	add	r5, sp, #8
 80036c8:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80036cc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
      index++;
 80036d0:	3201      	adds	r2, #1
      *(tempscr + index) = SDMMC1->FIFO;
 80036d2:	f845 7c08 	str.w	r7, [r5, #-8]
      index++;
 80036d6:	e7ea      	b.n	80036ae <FindSCR.constprop.0+0x5e>
  else if ((tmpreg & SDMMC_STA_DCRCFAIL) != RESET)
 80036d8:	079a      	lsls	r2, r3, #30
 80036da:	d502      	bpl.n	80036e2 <FindSCR.constprop.0+0x92>
    SDMMC1->ICR = SDMMC_ICR_DCRCFAILC;
 80036dc:	2002      	movs	r0, #2
 80036de:	63a0      	str	r0, [r4, #56]	@ 0x38
    return(errorstatus);
 80036e0:	e7ed      	b.n	80036be <FindSCR.constprop.0+0x6e>
  else if ((tmpreg & SDMMC_STA_RXOVERR) != RESET)
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	d503      	bpl.n	80036ee <FindSCR.constprop.0+0x9e>
    SDMMC1->ICR = SDMMC_ICR_RXOVERRC;
 80036e6:	2320      	movs	r3, #32
    return(errorstatus);
 80036e8:	2006      	movs	r0, #6
    SDMMC1->ICR = SDMMC_ICR_RXOVERRC;
 80036ea:	63a3      	str	r3, [r4, #56]	@ 0x38
    return(errorstatus);
 80036ec:	e7e7      	b.n	80036be <FindSCR.constprop.0+0x6e>
  SDMMC1->ICR = SDMMC_STATIC_FLAGS;
 80036ee:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <FindSCR.constprop.0+0xb4>)
 80036f0:	63a3      	str	r3, [r4, #56]	@ 0x38
  *(pscr + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24) | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80036f2:	9b00      	ldr	r3, [sp, #0]
 80036f4:	ba1b      	rev	r3, r3
 80036f6:	6073      	str	r3, [r6, #4]
  *(pscr) = ((tempscr[1] & SDMMC_0TO7BITS) << 24) | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80036f8:	9b01      	ldr	r3, [sp, #4]
 80036fa:	ba1b      	rev	r3, r3
 80036fc:	6033      	str	r3, [r6, #0]
  return(errorstatus);
 80036fe:	e7de      	b.n	80036be <FindSCR.constprop.0+0x6e>
 8003700:	40012c00 	.word	0x40012c00
 8003704:	004005ff 	.word	0x004005ff

08003708 <SDEnWideBus>:
{
 8003708:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if((SDMMC_GetResponse(SDMMC1, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800370a:	4c1f      	ldr	r4, [pc, #124]	@ (8003788 <SDEnWideBus+0x80>)
  uint32_t scr[2] = {0, 0};
 800370c:	2100      	movs	r1, #0
{
 800370e:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(SDMMC1, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003710:	4620      	mov	r0, r4
  uint32_t scr[2] = {0, 0};
 8003712:	e9cd 1100 	strd	r1, r1, [sp]
  if((SDMMC_GetResponse(SDMMC1, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003716:	f7ff fe76 	bl	8003406 <SDMMC_GetResponse>
 800371a:	0181      	lsls	r1, r0, #6
 800371c:	d42f      	bmi.n	800377e <SDEnWideBus+0x76>
  errorstatus = FindSCR(RCA, scr);
 800371e:	4d1b      	ldr	r5, [pc, #108]	@ (800378c <SDEnWideBus+0x84>)
 8003720:	4669      	mov	r1, sp
 8003722:	8828      	ldrh	r0, [r5, #0]
 8003724:	f7ff ff94 	bl	8003650 <FindSCR.constprop.0>
  if (errorstatus != SDMMC_OK)
 8003728:	bb38      	cbnz	r0, 800377a <SDEnWideBus+0x72>
  if (NewState == ENABLE)
 800372a:	2e01      	cmp	r6, #1
    if ((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800372c:	9b01      	ldr	r3, [sp, #4]
  if (NewState == ENABLE)
 800372e:	d116      	bne.n	800375e <SDEnWideBus+0x56>
    if ((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003730:	035a      	lsls	r2, r3, #13
 8003732:	d526      	bpl.n	8003782 <SDEnWideBus+0x7a>
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 8003734:	682b      	ldr	r3, [r5, #0]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003736:	2037      	movs	r0, #55	@ 0x37
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 8003738:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800373a:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800373c:	f240 4377 	movw	r3, #1143	@ 0x477
 8003740:	60e3      	str	r3, [r4, #12]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003742:	f7ff ff0f 	bl	8003564 <CmdResp1Error>
      if (errorstatus != SDMMC_OK)
 8003746:	b9c0      	cbnz	r0, 800377a <SDEnWideBus+0x72>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003748:	2302      	movs	r3, #2
 800374a:	60a3      	str	r3, [r4, #8]
      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 800374c:	2006      	movs	r0, #6
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800374e:	f240 4346 	movw	r3, #1094	@ 0x446
 8003752:	60e3      	str	r3, [r4, #12]
}
 8003754:	b002      	add	sp, #8
 8003756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 800375a:	f7ff bf03 	b.w	8003564 <CmdResp1Error>
    if ((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800375e:	03db      	lsls	r3, r3, #15
 8003760:	d50f      	bpl.n	8003782 <SDEnWideBus+0x7a>
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 8003762:	682b      	ldr	r3, [r5, #0]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003764:	2037      	movs	r0, #55	@ 0x37
      SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA << 16));
 8003766:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003768:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800376a:	f240 4377 	movw	r3, #1143	@ 0x477
 800376e:	60e3      	str	r3, [r4, #12]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 8003770:	f7ff fef8 	bl	8003564 <CmdResp1Error>
 8003774:	4603      	mov	r3, r0
      if (errorstatus != SDMMC_OK)
 8003776:	2800      	cmp	r0, #0
 8003778:	d0e7      	beq.n	800374a <SDEnWideBus+0x42>
}
 800377a:	b002      	add	sp, #8
 800377c:	bd70      	pop	{r4, r5, r6, pc}
    return errorstatus;
 800377e:	200e      	movs	r0, #14
 8003780:	e7fb      	b.n	800377a <SDEnWideBus+0x72>
      return(errorstatus);
 8003782:	2025      	movs	r0, #37	@ 0x25
 8003784:	e7f9      	b.n	800377a <SDEnWideBus+0x72>
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	20006148 	.word	0x20006148

08003790 <TM_FATFS_CheckCardDetectPin>:
  tempreg = GPIOG->IDR;
 8003790:	4b03      	ldr	r3, [pc, #12]	@ (80037a0 <TM_FATFS_CheckCardDetectPin+0x10>)
 8003792:	6918      	ldr	r0, [r3, #16]
  if ((tempreg & 0x0004) != 0)
 8003794:	f080 0004 	eor.w	r0, r0, #4
}
 8003798:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40021800 	.word	0x40021800

080037a4 <TM_FATFS_SD_SDIO_disk_ioctl>:
  switch(cmd)
 80037a4:	2802      	cmp	r0, #2
 80037a6:	d003      	beq.n	80037b0 <TM_FATFS_SD_SDIO_disk_ioctl+0xc>
 80037a8:	2803      	cmp	r0, #3
 80037aa:	d005      	beq.n	80037b8 <TM_FATFS_SD_SDIO_disk_ioctl+0x14>
}
 80037ac:	2000      	movs	r0, #0
 80037ae:	4770      	bx	lr
      *(WORD *) buff = 512;
 80037b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037b4:	800b      	strh	r3, [r1, #0]
      break;
 80037b6:	e7f9      	b.n	80037ac <TM_FATFS_SD_SDIO_disk_ioctl+0x8>
      *(DWORD *) buff = 32;
 80037b8:	2320      	movs	r3, #32
 80037ba:	600b      	str	r3, [r1, #0]
      break;
 80037bc:	e7f6      	b.n	80037ac <TM_FATFS_SD_SDIO_disk_ioctl+0x8>
	...

080037c0 <get_fattime>:
}
 80037c0:	4800      	ldr	r0, [pc, #0]	@ (80037c4 <get_fattime+0x4>)
 80037c2:	4770      	bx	lr
 80037c4:	5b018a80 	.word	0x5b018a80

080037c8 <SD_Detect>:
  __IO uint8_t status = SD_PRESENT;
 80037c8:	2301      	movs	r3, #1
{
 80037ca:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80037cc:	f88d 3007 	strb.w	r3, [sp, #7]
  if (!TM_FATFS_CheckCardDetectPin())
 80037d0:	f7ff ffde 	bl	8003790 <TM_FATFS_CheckCardDetectPin>
 80037d4:	b908      	cbnz	r0, 80037da <SD_Detect+0x12>
    status = SD_NOT_PRESENT;
 80037d6:	f88d 0007 	strb.w	r0, [sp, #7]
  return status;
 80037da:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80037de:	b003      	add	sp, #12
 80037e0:	f85d fb04 	ldr.w	pc, [sp], #4

080037e4 <TM_FATFS_SD_SDIO_disk_status>:
{
 80037e4:	b508      	push	{r3, lr}
  if (SD_Detect() != SD_PRESENT) {
 80037e6:	f7ff ffef 	bl	80037c8 <SD_Detect>
 80037ea:	2801      	cmp	r0, #1
 80037ec:	d107      	bne.n	80037fe <TM_FATFS_SD_SDIO_disk_status+0x1a>
    TM_FATFS_SD_SDIO_Stat &= ~STA_PROTECT;
 80037ee:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <TM_FATFS_SD_SDIO_disk_status+0x20>)
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 80037f6:	701a      	strb	r2, [r3, #0]
  return TM_FATFS_SD_SDIO_Stat;
 80037f8:	7818      	ldrb	r0, [r3, #0]
 80037fa:	b2c0      	uxtb	r0, r0
}
 80037fc:	bd08      	pop	{r3, pc}
    return STA_NOINIT;
 80037fe:	2001      	movs	r0, #1
 8003800:	e7fc      	b.n	80037fc <TM_FATFS_SD_SDIO_disk_status+0x18>
 8003802:	bf00      	nop
 8003804:	20000020 	.word	0x20000020

08003808 <SD_LowLevel_DeInit>:
  tempreg = SDMMC1->CLKCR;
 8003808:	4b18      	ldr	r3, [pc, #96]	@ (800386c <SD_LowLevel_DeInit+0x64>)
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800380a:	4819      	ldr	r0, [pc, #100]	@ (8003870 <SD_LowLevel_DeInit+0x68>)
  tempreg = SDMMC1->CLKCR;
 800380c:	685a      	ldr	r2, [r3, #4]
{
 800380e:	b530      	push	{r4, r5, lr}
  tempreg &= ~SDMMC_CLKCR_CLKEN; //(uint32_t)1<<8;  //Clock is disable
 8003810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
  SDMMC1->POWER = 0;
 8003814:	2400      	movs	r4, #0
{
 8003816:	b087      	sub	sp, #28
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2503      	movs	r5, #3
  SDMMC1->CLKCR = tempreg;
 800381a:	605a      	str	r2, [r3, #4]
  SDMMC1->POWER = 0;
 800381c:	601c      	str	r4, [r3, #0]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 800381e:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003822:	4669      	mov	r1, sp
 8003824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800382c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800382e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800383a:	645a      	str	r2, [r3, #68]	@ 0x44
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800383c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;    // 推挽输出模式
 8003840:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003844:	e9cd 3400 	strd	r3, r4, [sp]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003848:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800384c:	f7ff fbdc 	bl	8003008 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003850:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003852:	4669      	mov	r1, sp
 8003854:	4807      	ldr	r0, [pc, #28]	@ (8003874 <SD_LowLevel_DeInit+0x6c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003856:	e9cd 3400 	strd	r3, r4, [sp]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800385a:	e9cd 5402 	strd	r5, r4, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800385e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003862:	f7ff fbd1 	bl	8003008 <LL_GPIO_Init>
}
 8003866:	b007      	add	sp, #28
 8003868:	bd30      	pop	{r4, r5, pc}
 800386a:	bf00      	nop
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40020800 	.word	0x40020800
 8003874:	40020c00 	.word	0x40020c00

08003878 <SD_LowLevel_Init>:
{
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800387a:	2004      	movs	r0, #4
{
 800387c:	b089      	sub	sp, #36	@ 0x24
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800387e:	f7ff fe49 	bl	8003514 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003882:	2008      	movs	r0, #8
 8003884:	f7ff fe46 	bl	8003514 <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;  // 备用功能模式
 800388a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800388e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003892:	250c      	movs	r5, #12
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003894:	eb0d 0100 	add.w	r1, sp, r0
 8003898:	4818      	ldr	r0, [pc, #96]	@ (80038fc <SD_LowLevel_Init+0x84>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;    // 无上下拉
 800389a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800389c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;  // 备用功能模式
 800389e:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80038a2:	e9cd 6404 	strd	r6, r4, [sp, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a6:	f7ff fbaf 	bl	8003008 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80038aa:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ac:	a902      	add	r1, sp, #8
 80038ae:	4814      	ldr	r0, [pc, #80]	@ (8003900 <SD_LowLevel_Init+0x88>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;  // 备用功能模式
 80038b0:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	e9cd 6404 	strd	r6, r4, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038bc:	f7ff fba4 	bl	8003008 <LL_GPIO_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 80038c0:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <SD_LowLevel_Init+0x8c>)
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	4911      	ldr	r1, [pc, #68]	@ (8003908 <SD_LowLevel_Init+0x90>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80038c4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80038c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038d8:	9b01      	ldr	r3, [sp, #4]
 80038da:	2350      	movs	r3, #80	@ 0x50
 80038dc:	f881 3331 	strb.w	r3, [r1, #817]	@ 0x331
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038e4:	604b      	str	r3, [r1, #4]
 80038e6:	f7ff fe15 	bl	8003514 <LL_AHB1_GRP1_EnableClock>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	2360      	movs	r3, #96	@ 0x60
 80038ec:	f881 333b 	strb.w	r3, [r1, #827]	@ 0x33b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038f4:	604b      	str	r3, [r1, #4]
}
 80038f6:	b009      	add	sp, #36	@ 0x24
 80038f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40020800 	.word	0x40020800
 8003900:	40020c00 	.word	0x40020c00
 8003904:	40023800 	.word	0x40023800
 8003908:	e000e100 	.word	0xe000e100

0800390c <SD_PowerON>:
{
 800390c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SDMMC1->CLKCR = tempreg;
 8003910:	2376      	movs	r3, #118	@ 0x76
 8003912:	4c57      	ldr	r4, [pc, #348]	@ (8003a70 <SD_PowerON+0x164>)
  __IO SD_Error errorstatus = SDMMC_OK;
 8003914:	2500      	movs	r5, #0
  HAL_Delay(1);
 8003916:	2001      	movs	r0, #1
  __IO SD_Error errorstatus = SDMMC_OK;
 8003918:	f88d 5007 	strb.w	r5, [sp, #7]
  SDMMC1->CLKCR = tempreg;
 800391c:	6063      	str	r3, [r4, #4]
  SDMMC1->POWER = 0x3UL;
 800391e:	2303      	movs	r3, #3
 8003920:	6023      	str	r3, [r4, #0]
  HAL_Delay(1);
 8003922:	f7fe fa5b 	bl	8001ddc <HAL_Delay>
  SDMMC1->CLKCR |= (0x1UL<<8) & SDMMC_CLKCR_CLKEN_Msk;  //SDMMC_CK en
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392c:	6063      	str	r3, [r4, #4]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800392e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003932:	60a5      	str	r5, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003934:	60e3      	str	r3, [r4, #12]
  status = SDMMC1->STA;
 8003936:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  while ((timeout > 0) && ((status & SDMMC_STA_CMDSENT) == RESET))
 8003938:	061e      	lsls	r6, r3, #24
 800393a:	d406      	bmi.n	800394a <SD_PowerON+0x3e>
  timeout = ((uint32_t)0x00010000); //SDIO_CMD0TIMEOUT; /*!< 10000 */
 800393c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  while ((timeout > 0) && ((status & SDMMC_STA_CMDSENT) == RESET))
 8003940:	3b01      	subs	r3, #1
    status = SDMMC1->STA;
 8003942:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  while ((timeout > 0) && ((status & SDMMC_STA_CMDSENT) == RESET))
 8003944:	d012      	beq.n	800396c <SD_PowerON+0x60>
 8003946:	0615      	lsls	r5, r2, #24
 8003948:	d5fa      	bpl.n	8003940 <SD_PowerON+0x34>
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 800394a:	4b49      	ldr	r3, [pc, #292]	@ (8003a70 <SD_PowerON+0x164>)
 800394c:	4a49      	ldr	r2, [pc, #292]	@ (8003a74 <SD_PowerON+0x168>)
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
  return(errorstatus);
 8003950:	2300      	movs	r3, #0
  errorstatus = CmdError();
 8003952:	f88d 3007 	strb.w	r3, [sp, #7]
  if (errorstatus != SDMMC_OK)
 8003956:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800395a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800395e:	b13b      	cbz	r3, 8003970 <SD_PowerON+0x64>
  return(errorstatus);
 8003960:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003964:	b2c0      	uxtb	r0, r0
}
 8003966:	b002      	add	sp, #8
 8003968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return(errorstatus);
 800396c:	2303      	movs	r3, #3
 800396e:	e7f0      	b.n	8003952 <SD_PowerON+0x46>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003970:	4b3f      	ldr	r3, [pc, #252]	@ (8003a70 <SD_PowerON+0x164>)
 8003972:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003976:	6099      	str	r1, [r3, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003978:	f44f 6189 	mov.w	r1, #1096	@ 0x448
 800397c:	60d9      	str	r1, [r3, #12]
  uint32_t timeout = ((uint32_t)0x00010000); //SDIO_CMD0TIMEOUT;
 800397e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  status = SDMMC1->STA;
 8003982:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT)) && (timeout > 0))
 8003984:	f010 0f45 	tst.w	r0, #69	@ 0x45
 8003988:	d15a      	bne.n	8003a40 <SD_PowerON+0x134>
 800398a:	2900      	cmp	r1, #0
 800398c:	d155      	bne.n	8003a3a <SD_PowerON+0x12e>
  status = SDMMC1->STA;
 800398e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003990:	2204      	movs	r2, #4
 8003992:	639a      	str	r2, [r3, #56]	@ 0x38
  errorstatus = CmdResp7Error();
 8003994:	f88d 2007 	strb.w	r2, [sp, #7]
  if (errorstatus == SDMMC_OK)
 8003998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d159      	bne.n	8003a54 <SD_PowerON+0x148>
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0;
 80039a0:	4b35      	ldr	r3, [pc, #212]	@ (8003a78 <SD_PowerON+0x16c>)
 80039a2:	2201      	movs	r2, #1
    SDType = SDMMC_HIGH_CAPACITY;
 80039a4:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0;
 80039a8:	601a      	str	r2, [r3, #0]
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80039aa:	4c31      	ldr	r4, [pc, #196]	@ (8003a70 <SD_PowerON+0x164>)
 80039ac:	2300      	movs	r3, #0
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80039ae:	2037      	movs	r0, #55	@ 0x37
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80039b0:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80039b2:	f240 4377 	movw	r3, #1143	@ 0x477
 80039b6:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80039b8:	f7ff fdd4 	bl	8003564 <CmdResp1Error>
 80039bc:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus == SDMMC_OK)
 80039c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039c4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1c9      	bne.n	8003960 <SD_PowerON+0x54>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80039cc:	462f      	mov	r7, r5
      SDMMC1_Command(SDMMC_CMD_SD_APP_OP_COND, SDMMC_RESPONSE_SHORT, (SDMMC_VOLTAGE_WINDOW_SD | SDType));
 80039ce:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8003a7c <SD_PowerON+0x170>
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80039d2:	f240 4377 	movw	r3, #1143	@ 0x477
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80039d6:	60a7      	str	r7, [r4, #8]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80039d8:	2037      	movs	r0, #55	@ 0x37
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80039da:	60e3      	str	r3, [r4, #12]
      errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80039dc:	f7ff fdc2 	bl	8003564 <CmdResp1Error>
 80039e0:	f88d 0007 	strb.w	r0, [sp, #7]
      if (errorstatus != SDMMC_OK)
 80039e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1b7      	bne.n	8003960 <SD_PowerON+0x54>
      SDMMC1_Command(SDMMC_CMD_SD_APP_OP_COND, SDMMC_RESPONSE_SHORT, (SDMMC_VOLTAGE_WINDOW_SD | SDType));
 80039f0:	ea46 0308 	orr.w	r3, r6, r8
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80039f4:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80039f6:	f240 4369 	movw	r3, #1129	@ 0x469
 80039fa:	60e3      	str	r3, [r4, #12]
    status = SDMMC1->STA;
 80039fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT)))
 80039fe:	f013 0f45 	tst.w	r3, #69	@ 0x45
 8003a02:	d0fb      	beq.n	80039fc <SD_PowerON+0xf0>
  if (status & SDMMC_STA_CTIMEOUT)
 8003a04:	0759      	lsls	r1, r3, #29
 8003a06:	d527      	bpl.n	8003a58 <SD_PowerON+0x14c>
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003a08:	2304      	movs	r3, #4
    return(errorstatus);
 8003a0a:	2203      	movs	r2, #3
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003a0c:	63a3      	str	r3, [r4, #56]	@ 0x38
      errorstatus = CmdResp3Error();
 8003a0e:	f88d 2007 	strb.w	r2, [sp, #7]
      if (errorstatus != SDMMC_OK)
 8003a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a16:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1a0      	bne.n	8003960 <SD_PowerON+0x54>
      response = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003a1e:	4620      	mov	r0, r4
      count++;
 8003a20:	3501      	adds	r5, #1
      response = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003a22:	f7ff fcf0 	bl	8003406 <SDMMC_GetResponse>
    while ((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8003a26:	2800      	cmp	r0, #0
 8003a28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a2c:	db17      	blt.n	8003a5e <SD_PowerON+0x152>
 8003a2e:	429d      	cmp	r5, r3
 8003a30:	d1cf      	bne.n	80039d2 <SD_PowerON+0xc6>
      errorstatus = SDMMC_INVALID_VOLTRANGE;
 8003a32:	231b      	movs	r3, #27
 8003a34:	f88d 3007 	strb.w	r3, [sp, #7]
      return(errorstatus);
 8003a38:	e792      	b.n	8003960 <SD_PowerON+0x54>
    status = SDMMC1->STA;
 8003a3a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    timeout--;
 8003a3c:	3901      	subs	r1, #1
 8003a3e:	e7a1      	b.n	8003984 <SD_PowerON+0x78>
  status = SDMMC1->STA;
 8003a40:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  if ((timeout == 0) || (status & SDMMC_STA_CTIMEOUT))
 8003a42:	2900      	cmp	r1, #0
 8003a44:	d0a4      	beq.n	8003990 <SD_PowerON+0x84>
 8003a46:	0744      	lsls	r4, r0, #29
 8003a48:	d4a2      	bmi.n	8003990 <SD_PowerON+0x84>
  if (status & SDMMC_STA_CMDREND)
 8003a4a:	0640      	lsls	r0, r0, #25
 8003a4c:	d5a2      	bpl.n	8003994 <SD_PowerON+0x88>
    SDMMC1->ICR = SDMMC_ICR_CMDRENDC;
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	6399      	str	r1, [r3, #56]	@ 0x38
    return(errorstatus);
 8003a52:	e79f      	b.n	8003994 <SD_PowerON+0x88>
  uint32_t SDType = SDMMC_STD_CAPACITY;
 8003a54:	2600      	movs	r6, #0
 8003a56:	e7a8      	b.n	80039aa <SD_PowerON+0x9e>
  SDMMC1->ICR = SDIO_STATIC_FLAGS;
 8003a58:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <SD_PowerON+0x168>)
 8003a5a:	63a3      	str	r3, [r4, #56]	@ 0x38
  return(errorstatus);
 8003a5c:	e7d7      	b.n	8003a0e <SD_PowerON+0x102>
    if (count >= SDMMC_MAX_VOLT_TRIAL)
 8003a5e:	429d      	cmp	r5, r3
 8003a60:	d0e7      	beq.n	8003a32 <SD_PowerON+0x126>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) //if (response &= SD_HIGH_CAPACITY)
 8003a62:	0043      	lsls	r3, r0, #1
      CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8003a64:	bf42      	ittt	mi
 8003a66:	4b04      	ldrmi	r3, [pc, #16]	@ (8003a78 <SD_PowerON+0x16c>)
 8003a68:	2202      	movmi	r2, #2
 8003a6a:	601a      	strmi	r2, [r3, #0]
 8003a6c:	e778      	b.n	8003960 <SD_PowerON+0x54>
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	004005ff 	.word	0x004005ff
 8003a78:	2000616c 	.word	0x2000616c
 8003a7c:	80100000 	.word	0x80100000

08003a80 <SD_InitializeCards>:
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
  if (SDMMC_GetPowerState(SDMMC1) == 0) //SDIO_PowerState_OFF
 8003a82:	4e47      	ldr	r6, [pc, #284]	@ (8003ba0 <SD_InitializeCards+0x120>)
 8003a84:	4630      	mov	r0, r6
 8003a86:	f7ff fcb7 	bl	80033f8 <SDMMC_GetPowerState>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	f000 8081 	beq.w	8003b92 <SD_InitializeCards+0x112>
  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8003a90:	4d44      	ldr	r5, [pc, #272]	@ (8003ba4 <SD_InitializeCards+0x124>)
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d01e      	beq.n	8003ad6 <SD_InitializeCards+0x56>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60b3      	str	r3, [r6, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003a9c:	f240 43c2 	movw	r3, #1218	@ 0x4c2
 8003aa0:	60f3      	str	r3, [r6, #12]
    errorstatus = CmdResp2Error();
 8003aa2:	f7ff fd45 	bl	8003530 <CmdResp2Error>
    if (SDMMC_OK != errorstatus)
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d150      	bne.n	8003b4e <SD_InitializeCards+0xce>
    CID_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003aac:	4c3e      	ldr	r4, [pc, #248]	@ (8003ba8 <SD_InitializeCards+0x128>)
 8003aae:	4601      	mov	r1, r0
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f7ff fca8 	bl	8003406 <SDMMC_GetResponse>
    CID_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003ab6:	2104      	movs	r1, #4
    CID_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003ab8:	6020      	str	r0, [r4, #0]
    CID_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003aba:	4630      	mov	r0, r6
 8003abc:	f7ff fca3 	bl	8003406 <SDMMC_GetResponse>
    CID_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003ac0:	2108      	movs	r1, #8
    CID_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003ac2:	6060      	str	r0, [r4, #4]
    CID_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f7ff fc9e 	bl	8003406 <SDMMC_GetResponse>
    CID_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 8003aca:	210c      	movs	r1, #12
    CID_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003acc:	60a0      	str	r0, [r4, #8]
    CID_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f7ff fc99 	bl	8003406 <SDMMC_GetResponse>
 8003ad4:	60e0      	str	r0, [r4, #12]
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType)
 8003ad6:	682b      	ldr	r3, [r5, #0]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d927      	bls.n	8003b2c <SD_InitializeCards+0xac>
      || (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d025      	beq.n	8003b2c <SD_InitializeCards+0xac>
  uint16_t rca = 0x01;
 8003ae0:	2001      	movs	r0, #1
  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d058      	beq.n	8003b9a <SD_InitializeCards+0x11a>
    RCA = rca;
 8003ae8:	4b30      	ldr	r3, [pc, #192]	@ (8003bac <SD_InitializeCards+0x12c>)
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003aea:	4d2d      	ldr	r5, [pc, #180]	@ (8003ba0 <SD_InitializeCards+0x120>)
    RCA = rca;
 8003aec:	6018      	str	r0, [r3, #0]
    SDMMC1_Command(SDMMC_CMD_SEND_CSD, SDMMC_RESPONSE_LONG, (uint32_t)(rca << 16));
 8003aee:	0400      	lsls	r0, r0, #16
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003af0:	f240 43c9 	movw	r3, #1225	@ 0x4c9
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003af4:	60a8      	str	r0, [r5, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003af6:	60eb      	str	r3, [r5, #12]
    errorstatus = CmdResp2Error();
 8003af8:	f7ff fd1a 	bl	8003530 <CmdResp2Error>
    if (SDMMC_OK != errorstatus)
 8003afc:	4604      	mov	r4, r0
 8003afe:	bb30      	cbnz	r0, 8003b4e <SD_InitializeCards+0xce>
    CSD_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003b00:	4e2b      	ldr	r6, [pc, #172]	@ (8003bb0 <SD_InitializeCards+0x130>)
 8003b02:	4601      	mov	r1, r0
 8003b04:	4628      	mov	r0, r5
 8003b06:	f7ff fc7e 	bl	8003406 <SDMMC_GetResponse>
    CSD_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003b0a:	2104      	movs	r1, #4
    CSD_Tab[0] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003b0c:	6030      	str	r0, [r6, #0]
    CSD_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f7ff fc79 	bl	8003406 <SDMMC_GetResponse>
    CSD_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003b14:	2108      	movs	r1, #8
    CSD_Tab[1] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP2);
 8003b16:	6070      	str	r0, [r6, #4]
    CSD_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f7ff fc74 	bl	8003406 <SDMMC_GetResponse>
    CSD_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 8003b1e:	210c      	movs	r1, #12
    CSD_Tab[2] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP3);
 8003b20:	60b0      	str	r0, [r6, #8]
    CSD_Tab[3] = SDMMC_GetResponse(SDMMC1, SDMMC_RESP4);
 8003b22:	4628      	mov	r0, r5
 8003b24:	f7ff fc6f 	bl	8003406 <SDMMC_GetResponse>
 8003b28:	60f0      	str	r0, [r6, #12]
 8003b2a:	e010      	b.n	8003b4e <SD_InitializeCards+0xce>
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <SD_InitializeCards+0x120>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003b32:	f240 4243 	movw	r2, #1091	@ 0x443
 8003b36:	60da      	str	r2, [r3, #12]
    status = SDMMC1->STA;
 8003b38:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  while (!(status & (SDMMC_STA_CCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_CMDREND)))
 8003b3a:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8003b3e:	d0fb      	beq.n	8003b38 <SD_InitializeCards+0xb8>
  if (status & SDMMC_STA_CTIMEOUT)
 8003b40:	f014 0f04 	tst.w	r4, #4
 8003b44:	4e16      	ldr	r6, [pc, #88]	@ (8003ba0 <SD_InitializeCards+0x120>)
 8003b46:	d004      	beq.n	8003b52 <SD_InitializeCards+0xd2>
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003b48:	2304      	movs	r3, #4
      return(errorstatus);
 8003b4a:	2403      	movs	r4, #3
    SDMMC1->ICR = SDMMC_ICR_CTIMEOUTC;
 8003b4c:	63b3      	str	r3, [r6, #56]	@ 0x38
}
 8003b4e:	4620      	mov	r0, r4
 8003b50:	bd70      	pop	{r4, r5, r6, pc}
  else if (status & SDMMC_STA_CCRCFAIL)
 8003b52:	f014 0401 	ands.w	r4, r4, #1
 8003b56:	d002      	beq.n	8003b5e <SD_InitializeCards+0xde>
    SDMMC1->ICR = SDMMC_ICR_CCRCFAILC;
 8003b58:	2401      	movs	r4, #1
 8003b5a:	63b4      	str	r4, [r6, #56]	@ 0x38
    if (SDMMC_OK != errorstatus)
 8003b5c:	e7f7      	b.n	8003b4e <SD_InitializeCards+0xce>
  if (SDMMC_GetCommandResponse(SDMMC1) != cmd)
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff fc4e 	bl	8003400 <SDMMC_GetCommandResponse>
 8003b64:	2803      	cmp	r0, #3
 8003b66:	d001      	beq.n	8003b6c <SD_InitializeCards+0xec>
      return(errorstatus);
 8003b68:	2410      	movs	r4, #16
 8003b6a:	e7f0      	b.n	8003b4e <SD_InitializeCards+0xce>
  SDMMC1->ICR = SDMMC_STATIC_FLAGS;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <SD_InitializeCards+0x134>)
  response_r1 = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4630      	mov	r0, r6
  SDMMC1->ICR = SDMMC_STATIC_FLAGS;
 8003b72:	63b3      	str	r3, [r6, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003b74:	f7ff fc47 	bl	8003406 <SDMMC_GetResponse>
  if (SDMMC_ALLZERO == (response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)))
 8003b78:	f410 4f60 	tst.w	r0, #57344	@ 0xe000
 8003b7c:	d101      	bne.n	8003b82 <SD_InitializeCards+0x102>
    *prca = (uint16_t) (response_r1 >> 16);
 8003b7e:	0c00      	lsrs	r0, r0, #16
    if (SDMMC_OK != errorstatus)
 8003b80:	e7af      	b.n	8003ae2 <SD_InitializeCards+0x62>
  if (response_r1 & SDMMC_R6_GENERAL_UNKNOWN_ERROR)
 8003b82:	0481      	lsls	r1, r0, #18
 8003b84:	d407      	bmi.n	8003b96 <SD_InitializeCards+0x116>
  if (response_r1 & SDMMC_R6_ILLEGAL_CMD)
 8003b86:	0442      	lsls	r2, r0, #17
 8003b88:	d4ee      	bmi.n	8003b68 <SD_InitializeCards+0xe8>
  if (response_r1 & SDMMC_R6_COM_CRC_FAILED)
 8003b8a:	0403      	lsls	r3, r0, #16
 8003b8c:	d5a8      	bpl.n	8003ae0 <SD_InitializeCards+0x60>
      return(errorstatus);
 8003b8e:	240f      	movs	r4, #15
 8003b90:	e7dd      	b.n	8003b4e <SD_InitializeCards+0xce>
    return(errorstatus);
 8003b92:	2425      	movs	r4, #37	@ 0x25
 8003b94:	e7db      	b.n	8003b4e <SD_InitializeCards+0xce>
      return(errorstatus);
 8003b96:	2413      	movs	r4, #19
 8003b98:	e7d9      	b.n	8003b4e <SD_InitializeCards+0xce>
  return(errorstatus);
 8003b9a:	2400      	movs	r4, #0
 8003b9c:	e7d7      	b.n	8003b4e <SD_InitializeCards+0xce>
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	2000616c 	.word	0x2000616c
 8003ba8:	2000614c 	.word	0x2000614c
 8003bac:	20006148 	.word	0x20006148
 8003bb0:	2000615c 	.word	0x2000615c
 8003bb4:	004005ff 	.word	0x004005ff

08003bb8 <SD_GetCardInfo>:
  cardinfo->CardType = (uint8_t)CardType;
 8003bb8:	4a9d      	ldr	r2, [pc, #628]	@ (8003e30 <SD_GetCardInfo+0x278>)
{
 8003bba:	4603      	mov	r3, r0
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  cardinfo->CardType = (uint8_t)CardType;
 8003bbe:	6816      	ldr	r6, [r2, #0]
  cardinfo->RCA = (uint16_t)RCA;
 8003bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e34 <SD_GetCardInfo+0x27c>)
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8003bc2:	4c9d      	ldr	r4, [pc, #628]	@ (8003e38 <SD_GetCardInfo+0x280>)
  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8003bc4:	2e01      	cmp	r6, #1
  cardinfo->RCA = (uint16_t)RCA;
 8003bc6:	6812      	ldr	r2, [r2, #0]
  cardinfo->CardType = (uint8_t)CardType;
 8003bc8:	f880 6056 	strb.w	r6, [r0, #86]	@ 0x56
  cardinfo->RCA = (uint16_t)RCA;
 8003bcc:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8003bd0:	6822      	ldr	r2, [r4, #0]
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 8003bd2:	ea4f 7192 	mov.w	r1, r2, lsr #30
 8003bd6:	7001      	strb	r1, [r0, #0]
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 8003bd8:	f3c2 6183 	ubfx	r1, r2, #26, #4
 8003bdc:	7041      	strb	r1, [r0, #1]
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8003bde:	f3c2 6101 	ubfx	r1, r2, #24, #2
 8003be2:	7081      	strb	r1, [r0, #2]
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 8003be4:	f3c2 4107 	ubfx	r1, r2, #16, #8
  cardinfo->SD_csd.TAAC = tmp;
 8003be8:	70c1      	strb	r1, [r0, #3]
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 8003bea:	f3c2 2107 	ubfx	r1, r2, #8, #8
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 8003bee:	b2d2      	uxtb	r2, r2
  cardinfo->SD_csd.NSAC = tmp;
 8003bf0:	7101      	strb	r1, [r0, #4]
  cardinfo->SD_csd.MaxBusClkFrec = tmp;
 8003bf2:	7142      	strb	r2, [r0, #5]
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 8003bf4:	6862      	ldr	r2, [r4, #4]
 8003bf6:	ea4f 6112 	mov.w	r1, r2, lsr #24
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 8003bfa:	ea4f 2512 	mov.w	r5, r2, lsr #8
  cardinfo->SD_csd.CardComdClasses = tmp << 4;
 8003bfe:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8003c02:	80c1      	strh	r1, [r0, #6]
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8003c04:	88c1      	ldrh	r1, [r0, #6]
 8003c06:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8003c0a:	b289      	uxth	r1, r1
 8003c0c:	ea41 0100 	orr.w	r1, r1, r0
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 8003c10:	f3c2 30c0 	ubfx	r0, r2, #15, #1
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8003c14:	80d9      	strh	r1, [r3, #6]
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 8003c16:	f3c2 4103 	ubfx	r1, r2, #16, #4
 8003c1a:	7219      	strb	r1, [r3, #8]
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 8003c1c:	f3c2 2107 	ubfx	r1, r2, #8, #8
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 8003c20:	7258      	strb	r0, [r3, #9]
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 8003c22:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8003c26:	7298      	strb	r0, [r3, #10]
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 8003c28:	f3c2 3040 	ubfx	r0, r2, #13, #1
 8003c2c:	72d8      	strb	r0, [r3, #11]
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 8003c2e:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8003c32:	7318      	strb	r0, [r3, #12]
  cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 8003c34:	f04f 0000 	mov.w	r0, #0
 8003c38:	7358      	strb	r0, [r3, #13]
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8003c3a:	68a0      	ldr	r0, [r4, #8]
  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8003c3c:	f200 80db 	bhi.w	8003df6 <SD_GetCardInfo+0x23e>
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8003c40:	02a9      	lsls	r1, r5, #10
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003c42:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8003c46:	0092      	lsls	r2, r2, #2
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8003c48:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8003c4c:	f402 727f 	and.w	r2, r2, #1020	@ 0x3fc
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8003c50:	6119      	str	r1, [r3, #16]
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8003c52:	6919      	ldr	r1, [r3, #16]
 8003c54:	430a      	orrs	r2, r1
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8003c56:	f3c0 2107 	ubfx	r1, r0, #8, #8
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8003c5a:	611a      	str	r2, [r3, #16]
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8003c62:	611a      	str	r2, [r3, #16]
    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003c64:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 8003c68:	751a      	strb	r2, [r3, #20]
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8003c6a:	f3c0 6202 	ubfx	r2, r0, #24, #3
 8003c6e:	755a      	strb	r2, [r3, #21]
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8003c70:	f3c0 5242 	ubfx	r2, r0, #21, #3
 8003c74:	759a      	strb	r2, [r3, #22]
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8003c76:	f3c0 4282 	ubfx	r2, r0, #18, #3
 8003c7a:	75da      	strb	r2, [r3, #23]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 8003c7c:	0bc2      	lsrs	r2, r0, #15
 8003c7e:	f002 0206 	and.w	r2, r2, #6
 8003c82:	761a      	strb	r2, [r3, #24]
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003c84:	7e1a      	ldrb	r2, [r3, #24]
 8003c86:	432a      	orrs	r2, r5
 8003c88:	761a      	strb	r2, [r3, #24]
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8003c8a:	2201      	movs	r2, #1
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8003c8c:	691f      	ldr	r7, [r3, #16]
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003c8e:	7e1d      	ldrb	r5, [r3, #24]
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8003c90:	7a1e      	ldrb	r6, [r3, #8]
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003c92:	3502      	adds	r5, #2
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8003c94:	fa02 f606 	lsl.w	r6, r2, r6
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003c98:	40aa      	lsls	r2, r5
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8003c9a:	651e      	str	r6, [r3, #80]	@ 0x50
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8003c9c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8003ca0:	fba2 2506 	umull	r2, r5, r2, r6
 8003ca4:	fb06 550c 	mla	r5, r6, ip, r5
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8003ca8:	1c7e      	adds	r6, r7, #1
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8003caa:	fb07 5505 	mla	r5, r7, r5, r5
 8003cae:	fba2 2606 	umull	r2, r6, r2, r6
 8003cb2:	4435      	add	r5, r6
 8003cb4:	e9c3 2512 	strd	r2, r5, [r3, #72]	@ 0x48
  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8003cb8:	f3c1 1280 	ubfx	r2, r1, #6, #1
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8003cbc:	0049      	lsls	r1, r1, #1
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8003cbe:	4d5f      	ldr	r5, [pc, #380]	@ (8003e3c <SD_GetCardInfo+0x284>)
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8003cc0:	f001 017e 	and.w	r1, r1, #126	@ 0x7e
  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8003cc4:	765a      	strb	r2, [r3, #25]
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8003cc6:	7699      	strb	r1, [r3, #26]
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 8003cc8:	f3c0 11c0 	ubfx	r1, r0, #7, #1
 8003ccc:	7e9a      	ldrb	r2, [r3, #26]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	769a      	strb	r2, [r3, #26]
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8003cd2:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
 8003cd6:	76da      	strb	r2, [r3, #27]
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 8003cd8:	68e2      	ldr	r2, [r4, #12]
  cardinfo->SD_csd.Reserved4 = 1;
 8003cda:	2401      	movs	r4, #1
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003cdc:	0fd1      	lsrs	r1, r2, #31
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 8003cde:	f3c2 5081 	ubfx	r0, r2, #22, #2
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003ce2:	7719      	strb	r1, [r3, #28]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 8003ce4:	f3c2 7141 	ubfx	r1, r2, #29, #2
 8003ce8:	7759      	strb	r1, [r3, #29]
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8003cea:	f3c2 6182 	ubfx	r1, r2, #26, #3
 8003cee:	7799      	strb	r1, [r3, #30]
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8003cf0:	0d91      	lsrs	r1, r2, #22
 8003cf2:	f001 010c 	and.w	r1, r1, #12
 8003cf6:	77d9      	strb	r1, [r3, #31]
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 8003cf8:	7fd9      	ldrb	r1, [r3, #31]
 8003cfa:	4301      	orrs	r1, r0
  cardinfo->SD_csd.Reserved3 = 0;
 8003cfc:	2000      	movs	r0, #0
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 8003cfe:	77d9      	strb	r1, [r3, #31]
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8003d00:	f3c2 5140 	ubfx	r1, r2, #21, #1
 8003d04:	f883 1020 	strb.w	r1, [r3, #32]
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8003d08:	f3c2 4100 	ubfx	r1, r2, #16, #1
  cardinfo->SD_csd.Reserved3 = 0;
 8003d0c:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8003d10:	f883 1022 	strb.w	r1, [r3, #34]	@ 0x22
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8003d14:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 8003d18:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 8003d1c:	f3c2 3180 	ubfx	r1, r2, #14, #1
 8003d20:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 8003d24:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8003d28:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 8003d2c:	f3c2 3100 	ubfx	r1, r2, #12, #1
 8003d30:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 8003d34:	f3c2 2181 	ubfx	r1, r2, #10, #2
 8003d38:	f883 1027 	strb.w	r1, [r3, #39]	@ 0x27
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 8003d3c:	f3c2 2101 	ubfx	r1, r2, #8, #2
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8003d40:	f3c2 0246 	ubfx	r2, r2, #1, #7
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 8003d44:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8003d48:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8003d4c:	682a      	ldr	r2, [r5, #0]
  cardinfo->SD_csd.Reserved4 = 1;
 8003d4e:	f883 402a 	strb.w	r4, [r3, #42]	@ 0x2a
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8003d52:	0e11      	lsrs	r1, r2, #24
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8003d54:	f3c2 2607 	ubfx	r6, r2, #8, #8
  cardinfo->SD_cid.ManufacturerID = tmp;
 8003d58:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 8003d5c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003d60:	0612      	lsls	r2, r2, #24
 8003d62:	0209      	lsls	r1, r1, #8
 8003d64:	85d9      	strh	r1, [r3, #46]	@ 0x2e
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8003d66:	8dd9      	ldrh	r1, [r3, #46]	@ 0x2e
 8003d68:	b289      	uxth	r1, r1
 8003d6a:	4331      	orrs	r1, r6
 8003d6c:	85d9      	strh	r1, [r3, #46]	@ 0x2e
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 8003d70:	686a      	ldr	r2, [r5, #4]
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 8003d72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 8003d74:	0e16      	lsrs	r6, r2, #24
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 8003d76:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8003d7a:	6319      	str	r1, [r3, #48]	@ 0x30
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 8003d7c:	0a11      	lsrs	r1, r2, #8
 8003d7e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003d80:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8003d84:	4331      	orrs	r1, r6
 8003d86:	6319      	str	r1, [r3, #48]	@ 0x30
  cardinfo->SD_cid.ProdName1 |= tmp;
 8003d88:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003d8c:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 8003d8e:	b2d2      	uxtb	r2, r2
  cardinfo->SD_cid.ProdName1 |= tmp;
 8003d90:	4331      	orrs	r1, r6
 8003d92:	6319      	str	r1, [r3, #48]	@ 0x30
  cardinfo->SD_cid.ProdName2 = tmp;
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 8003d98:	68aa      	ldr	r2, [r5, #8]
 8003d9a:	0e11      	lsrs	r1, r2, #24
  cardinfo->SD_cid.ProdRev = tmp;
 8003d9c:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 8003da0:	0c11      	lsrs	r1, r2, #16
 8003da2:	0609      	lsls	r1, r1, #24
  cardinfo->SD_cid.ProdSN = tmp << 24;
 8003da4:	6399      	str	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8003da6:	0211      	lsls	r1, r2, #8
 8003da8:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8003daa:	0212      	lsls	r2, r2, #8
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8003dac:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8003db0:	b292      	uxth	r2, r2
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8003db2:	4331      	orrs	r1, r6
 8003db4:	6399      	str	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8003db6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003db8:	430a      	orrs	r2, r1
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 8003dbc:	68ea      	ldr	r2, [r5, #12]
  cardinfo->SD_cid.ProdSN |= tmp;
 8003dbe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8003dc0:	f3c2 5503 	ubfx	r5, r2, #20, #4
  cardinfo->SD_cid.ProdSN |= tmp;
 8003dc4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003dc8:	6399      	str	r1, [r3, #56]	@ 0x38
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8003dca:	f893 103c 	ldrb.w	r1, [r3, #60]	@ 0x3c
 8003dce:	4329      	orrs	r1, r5
  cardinfo->SD_cid.ManufactDate |= tmp;
 8003dd0:	f3c2 2507 	ubfx	r5, r2, #8, #8
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8003dd4:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8003dd8:	0a11      	lsrs	r1, r2, #8
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 8003dda:	f3c2 0246 	ubfx	r2, r2, #1, #7
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8003dde:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8003de2:	87d9      	strh	r1, [r3, #62]	@ 0x3e
  cardinfo->SD_cid.ManufactDate |= tmp;
 8003de4:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8003de6:	b289      	uxth	r1, r1
 8003de8:	4329      	orrs	r1, r5
 8003dea:	87d9      	strh	r1, [r3, #62]	@ 0x3e
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  cardinfo->SD_cid.Reserved2 = 1;
 8003df0:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
}
 8003df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8003df6:	2e02      	cmp	r6, #2
 8003df8:	f47f af5e 	bne.w	8003cb8 <SD_GetCardInfo+0x100>
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8003dfc:	0411      	lsls	r1, r2, #16
 8003dfe:	f401 117c 	and.w	r1, r1, #4128768	@ 0x3f0000
 8003e02:	6119      	str	r1, [r3, #16]
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8003e04:	0e01      	lsrs	r1, r0, #24
    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e0c:	611a      	str	r2, [r3, #16]
    cardinfo->SD_csd.DeviceSize |= (tmp);
 8003e0e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8003e12:	6919      	ldr	r1, [r3, #16]
 8003e14:	430a      	orrs	r2, r1
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8003e16:	f3c0 2107 	ubfx	r1, r0, #8, #8
    cardinfo->SD_csd.DeviceSize |= (tmp);
 8003e1a:	611a      	str	r2, [r3, #16]
    cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * (uint64_t)(512 * 1024);
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	3201      	adds	r2, #1
 8003e20:	0b55      	lsrs	r5, r2, #13
 8003e22:	04d2      	lsls	r2, r2, #19
 8003e24:	e9c3 2512 	strd	r2, r5, [r3, #72]	@ 0x48
    cardinfo->CardBlockSize = 512;
 8003e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e2e:	e743      	b.n	8003cb8 <SD_GetCardInfo+0x100>
 8003e30:	2000616c 	.word	0x2000616c
 8003e34:	20006148 	.word	0x20006148
 8003e38:	2000615c 	.word	0x2000615c
 8003e3c:	2000614c 	.word	0x2000614c

08003e40 <SD_SelectDeselect>:
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003e40:	4b03      	ldr	r3, [pc, #12]	@ (8003e50 <SD_SelectDeselect+0x10>)
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003e42:	f240 4247 	movw	r2, #1095	@ 0x447
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003e46:	6098      	str	r0, [r3, #8]
  errorstatus = CmdResp1Error(SDMMC_CMD_SEL_DESEL_CARD);
 8003e48:	2007      	movs	r0, #7
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003e4a:	60da      	str	r2, [r3, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SEL_DESEL_CARD);
 8003e4c:	f7ff bb8a 	b.w	8003564 <CmdResp1Error>
 8003e50:	40012c00 	.word	0x40012c00

08003e54 <SD_EnableWideBusOperation>:
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8003e54:	4a0e      	ldr	r2, [pc, #56]	@ (8003e90 <SD_EnableWideBusOperation+0x3c>)
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	2a03      	cmp	r2, #3
{
 8003e5a:	b508      	push	{r3, lr}
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8003e5c:	d016      	beq.n	8003e8c <SD_EnableWideBusOperation+0x38>
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8003e5e:	2a02      	cmp	r2, #2
 8003e60:	d812      	bhi.n	8003e88 <SD_EnableWideBusOperation+0x34>
    if (SDMMC_BUS_WIDE_8B == WideMode) //SDMMC_BUS_WIDE_8B  SDIO_BusWide_8b
 8003e62:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003e66:	d011      	beq.n	8003e8c <SD_EnableWideBusOperation+0x38>
    else if (SDMMC_BUS_WIDE_4B == WideMode)
 8003e68:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8003e6c:	d108      	bne.n	8003e80 <SD_EnableWideBusOperation+0x2c>
      errorstatus = SDEnWideBus(ENABLE);
 8003e6e:	2001      	movs	r0, #1
      errorstatus = SDEnWideBus(DISABLE);//SD_WideBus_Disable(hsd);
 8003e70:	f7ff fc4a 	bl	8003708 <SDEnWideBus>
    if (errorstatus == SDMMC_OK)
 8003e74:	b918      	cbnz	r0, 8003e7e <SD_EnableWideBusOperation+0x2a>
      SDMMC1->CLKCR = tempreg;
 8003e76:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <SD_EnableWideBusOperation+0x40>)
 8003e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e7c:	605a      	str	r2, [r3, #4]
}
 8003e7e:	bd08      	pop	{r3, pc}
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d0f5      	beq.n	8003e70 <SD_EnableWideBusOperation+0x1c>
      errorstatus = SDMMC_INVALID_PARAMETER;
 8003e84:	2026      	movs	r0, #38	@ 0x26
 8003e86:	e7fa      	b.n	8003e7e <SD_EnableWideBusOperation+0x2a>
  SD_Error errorstatus = SDMMC_OK;
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e7f8      	b.n	8003e7e <SD_EnableWideBusOperation+0x2a>
    return(errorstatus);
 8003e8c:	2027      	movs	r0, #39	@ 0x27
 8003e8e:	e7f6      	b.n	8003e7e <SD_EnableWideBusOperation+0x2a>
 8003e90:	2000616c 	.word	0x2000616c
 8003e94:	40012c00 	.word	0x40012c00

08003e98 <SD_Init>:
  __IO SD_Error errorstatus = SDMMC_OK;
 8003e98:	2300      	movs	r3, #0
{
 8003e9a:	b513      	push	{r0, r1, r4, lr}
  __IO SD_Error errorstatus = SDMMC_OK;
 8003e9c:	f88d 3007 	strb.w	r3, [sp, #7]
  SD_LowLevel_DeInit();
 8003ea0:	f7ff fcb2 	bl	8003808 <SD_LowLevel_DeInit>
  SD_LowLevel_Init();
 8003ea4:	f7ff fce8 	bl	8003878 <SD_LowLevel_Init>
  errorstatus = SD_PowerON();
 8003ea8:	f7ff fd30 	bl	800390c <SD_PowerON>
 8003eac:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus != SDMMC_OK)
 8003eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003eb4:	b123      	cbz	r3, 8003ec0 <SD_Init+0x28>
  return(errorstatus);
 8003eb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003eba:	b2c0      	uxtb	r0, r0
}
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd10      	pop	{r4, pc}
  errorstatus = SD_InitializeCards();
 8003ec0:	f7ff fdde 	bl	8003a80 <SD_InitializeCards>
 8003ec4:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus != SDMMC_OK)
 8003ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f2      	bne.n	8003eb6 <SD_Init+0x1e>
  errorstatus = SD_GetCardInfo(&SDCardInfo);
 8003ed0:	4c19      	ldr	r4, [pc, #100]	@ (8003f38 <SD_Init+0xa0>)
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff fe70 	bl	8003bb8 <SD_GetCardInfo>
 8003ed8:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus == SDMMC_OK)
 8003edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ee0:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003ee4:	bb1b      	cbnz	r3, 8003f2e <SD_Init+0x96>
    errorstatus = SD_SelectDeselect((uint32_t) (((uint32_t)SDCardInfo.RCA) << 16));
 8003ee6:	f8b4 0054 	ldrh.w	r0, [r4, #84]	@ 0x54
 8003eea:	0400      	lsls	r0, r0, #16
 8003eec:	f7ff ffa8 	bl	8003e40 <SD_SelectDeselect>
 8003ef0:	f88d 0007 	strb.w	r0, [sp, #7]
  if (errorstatus == SDMMC_OK)
 8003ef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ef8:	b9b3      	cbnz	r3, 8003f28 <SD_Init+0x90>
    errorstatus = SD_EnableWideBusOperation(SDMMC_BUS_WIDE_4B); //4 bit data width
 8003efa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003efe:	f7ff ffa9 	bl	8003e54 <SD_EnableWideBusOperation>
 8003f02:	f88d 0007 	strb.w	r0, [sp, #7]
    if((errorstatus == SDMMC_OK) ||(CardType == SDIO_MULTIMEDIA_CARD))
 8003f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f0a:	b11b      	cbz	r3, 8003f14 <SD_Init+0x7c>
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <SD_Init+0xa4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d109      	bne.n	8003f28 <SD_Init+0x90>
      if((SDCardInfo.CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (SDCardInfo.CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8003f14:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
      SDMMC1->CLKCR = tempreg;
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <SD_Init+0xa8>)
        tempreg |= SDMMC_TRANSFER_CLK_DIV + 2;	//V1.1/V2.0卡，设置最高48/4=12Mhz
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	f640 1302 	movw	r3, #2306	@ 0x902
 8003f20:	bf88      	it	hi
 8003f22:	f44f 6310 	movhi.w	r3, #2304	@ 0x900
      SDMMC1->CLKCR = tempreg;
 8003f26:	6053      	str	r3, [r2, #4]
  if (errorstatus == SDMMC_OK)
 8003f28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f2c:	e7c3      	b.n	8003eb6 <SD_Init+0x1e>
    printf("SD_SelectDeselect failed\r\n");
 8003f2e:	4805      	ldr	r0, [pc, #20]	@ (8003f44 <SD_Init+0xac>)
 8003f30:	f011 fe94 	bl	8015c5c <puts>
 8003f34:	e7de      	b.n	8003ef4 <SD_Init+0x5c>
 8003f36:	bf00      	nop
 8003f38:	200060e0 	.word	0x200060e0
 8003f3c:	2000616c 	.word	0x2000616c
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	08016b05 	.word	0x08016b05

08003f48 <TM_FATFS_SD_SDIO_disk_initialize>:
{
 8003f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4a:	2100      	movs	r1, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8003f4c:	2040      	movs	r0, #64	@ 0x40
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4e:	e9cd 1102 	strd	r1, r1, [sp, #8]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8003f52:	f7ff fadf 	bl	8003514 <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003f56:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f58:	480f      	ldr	r0, [pc, #60]	@ (8003f98 <TM_FATFS_SD_SDIO_disk_initialize+0x50>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003f5a:	e9cd 3100 	strd	r3, r1, [sp]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003f5e:	2301      	movs	r3, #1
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f60:	e9cd 3104 	strd	r3, r1, [sp, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f64:	4669      	mov	r1, sp
 8003f66:	f7ff f84f 	bl	8003008 <LL_GPIO_Init>
  SD_LowLevel_DeInit();
 8003f6a:	f7ff fc4d 	bl	8003808 <SD_LowLevel_DeInit>
  SD_LowLevel_Init();
 8003f6e:	f7ff fc83 	bl	8003878 <SD_LowLevel_Init>
  if (SD_Init() == SDMMC_OK) {
 8003f72:	f7ff ff91 	bl	8003e98 <SD_Init>
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <TM_FATFS_SD_SDIO_disk_initialize+0x54>)
    TM_FATFS_SD_SDIO_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003f78:	781a      	ldrb	r2, [r3, #0]
  if (SD_Init() == SDMMC_OK) {
 8003f7a:	b950      	cbnz	r0, 8003f92 <TM_FATFS_SD_SDIO_disk_initialize+0x4a>
    TM_FATFS_SD_SDIO_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003f7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
    TM_FATFS_SD_SDIO_Stat |= STA_NOINIT;
 8003f80:	701a      	strb	r2, [r3, #0]
    TM_FATFS_SD_SDIO_Stat &= ~STA_PROTECT;
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 8003f88:	701a      	strb	r2, [r3, #0]
  return TM_FATFS_SD_SDIO_Stat;
 8003f8a:	7818      	ldrb	r0, [r3, #0]
}
 8003f8c:	b007      	add	sp, #28
 8003f8e:	f85d fb04 	ldr.w	pc, [sp], #4
    TM_FATFS_SD_SDIO_Stat |= STA_NOINIT;
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	e7f3      	b.n	8003f80 <TM_FATFS_SD_SDIO_disk_initialize+0x38>
 8003f98:	40021800 	.word	0x40021800
 8003f9c:	20000020 	.word	0x20000020

08003fa0 <SD_SendStatus>:
 * @param  pcardstatus: pointer to the buffer that will contain the SD card
 *         status (Card Status register).
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_SendStatus (uint32_t *pcardstatus)
{
 8003fa0:	b570      	push	{r4, r5, r6, lr}
  SD_Error errorstatus = SDMMC_OK;

  if (pcardstatus == 0) {
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	b198      	cbz	r0, 8003fce <SD_SendStatus+0x2e>
    errorstatus = SDMMC_INVALID_PARAMETER;
    return (errorstatus);
  }

  /*!< Send ACMD13 SD_APP_SEND_SCR with argument as RCA<<16 */
  SDMMC1_Command(SDMMC_CMD_SEND_STATUS, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA<<16));
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <SD_SendStatus+0x34>)
  errorstatus = CmdResp1Error(SDMMC_CMD_SEND_STATUS);
 8003fa8:	200d      	movs	r0, #13
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003faa:	4e0b      	ldr	r6, [pc, #44]	@ (8003fd8 <SD_SendStatus+0x38>)
  SDMMC1_Command(SDMMC_CMD_SEND_STATUS, SDMMC_RESPONSE_SHORT, ((uint32_t) RCA<<16));
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8003fb0:	60b3      	str	r3, [r6, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8003fb2:	f240 434d 	movw	r3, #1101	@ 0x44d
 8003fb6:	60f3      	str	r3, [r6, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SEND_STATUS);
 8003fb8:	f7ff fad4 	bl	8003564 <CmdResp1Error>
  if (errorstatus != SDMMC_OK)
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	b920      	cbnz	r0, 8003fca <SD_SendStatus+0x2a>
  {
    return(errorstatus);
  }

  *pcardstatus = SDMMC_GetResponse(SDMMC1, SDMMC_RESP1);
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff fa1f 	bl	8003406 <SDMMC_GetResponse>
 8003fc8:	6028      	str	r0, [r5, #0]

  return (errorstatus);
}
 8003fca:	4620      	mov	r0, r4
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
    return (errorstatus);
 8003fce:	2426      	movs	r4, #38	@ 0x26
 8003fd0:	e7fb      	b.n	8003fca <SD_SendStatus+0x2a>
 8003fd2:	bf00      	nop
 8003fd4:	20006148 	.word	0x20006148
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <SD_GetState>:
  uint32_t resp1 = 0;
 8003fdc:	2300      	movs	r3, #0
{
 8003fde:	b507      	push	{r0, r1, r2, lr}
  uint32_t resp1 = 0;
 8003fe0:	9301      	str	r3, [sp, #4]
  if(SD_Detect() == SD_PRESENT ) {
 8003fe2:	f7ff fbf1 	bl	80037c8 <SD_Detect>
 8003fe6:	2801      	cmp	r0, #1
 8003fe8:	d003      	beq.n	8003ff2 <SD_GetState+0x16>
      return SDMMC_CARD_ERROR;
 8003fea:	20ff      	movs	r0, #255	@ 0xff
}
 8003fec:	b003      	add	sp, #12
 8003fee:	f85d fb04 	ldr.w	pc, [sp], #4
    if(SD_SendStatus(&resp1) != SDMMC_OK)
 8003ff2:	a801      	add	r0, sp, #4
 8003ff4:	f7ff ffd4 	bl	8003fa0 <SD_SendStatus>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1f6      	bne.n	8003fea <SD_GetState+0xe>
      return (SDCardState) ((resp1 >> 9) & 0x0F);
 8003ffc:	9801      	ldr	r0, [sp, #4]
 8003ffe:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8004002:	e7f3      	b.n	8003fec <SD_GetState+0x10>

08004004 <SD_GetStatus>:
{
 8004004:	b508      	push	{r3, lr}
  cardstate = SD_GetState();
 8004006:	f7ff ffe9 	bl	8003fdc <SD_GetState>
  if (cardstate == SDMMC_CARD_TRANSFER)
 800400a:	2804      	cmp	r0, #4
 800400c:	d004      	beq.n	8004018 <SD_GetStatus+0x14>
    return (SDMMC_TRANSFER_ERROR);
 800400e:	28ff      	cmp	r0, #255	@ 0xff
 8004010:	bf14      	ite	ne
 8004012:	2001      	movne	r0, #1
 8004014:	2002      	moveq	r0, #2
}
 8004016:	bd08      	pop	{r3, pc}
    return (SDMMC_TRANSFER_OK);
 8004018:	2000      	movs	r0, #0
 800401a:	e7fc      	b.n	8004016 <SD_GetStatus+0x12>

0800401c <SD_StopTransfer>:
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 800401c:	4b04      	ldr	r3, [pc, #16]	@ (8004030 <SD_StopTransfer+0x14>)
 800401e:	2200      	movs	r2, #0
{
  SD_Error errorstatus = SDMMC_OK;

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDMMC1_Command(SDMMC_CMD_STOP_TRANSMISSION, SDMMC_RESPONSE_SHORT, 0x0);
  errorstatus = CmdResp1Error(SDMMC_CMD_STOP_TRANSMISSION);
 8004020:	200c      	movs	r0, #12
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8004022:	609a      	str	r2, [r3, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8004024:	f240 424c 	movw	r2, #1100	@ 0x44c
 8004028:	60da      	str	r2, [r3, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_STOP_TRANSMISSION);
 800402a:	f7ff ba9b 	b.w	8003564 <CmdResp1Error>
 800402e:	bf00      	nop
 8004030:	40012c00 	.word	0x40012c00

08004034 <SD_WaitReadOperation>:
{
 8004034:	b537      	push	{r0, r1, r2, r4, r5, lr}
  timeout = SDMMC_DATATIMEOUT;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <SD_WaitReadOperation+0x80>)
 800403c:	491e      	ldr	r1, [pc, #120]	@ (80040b8 <SD_WaitReadOperation+0x84>)
 800403e:	481f      	ldr	r0, [pc, #124]	@ (80040bc <SD_WaitReadOperation+0x88>)
  timeout = SDMMC_DATATIMEOUT;
 8004040:	9301      	str	r3, [sp, #4]
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	b1eb      	cbz	r3, 8004082 <SD_WaitReadOperation+0x4e>
  DMAEndOfTransfer = 0x00;
 8004046:	2300      	movs	r3, #0
 8004048:	6013      	str	r3, [r2, #0]
  timeout = SDMMC_DATATIMEOUT;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
  tempreg = SDMMC1->STA;
 800404e:	4a1c      	ldr	r2, [pc, #112]	@ (80040c0 <SD_WaitReadOperation+0x8c>)
  timeout = SDMMC_DATATIMEOUT;
 8004050:	9301      	str	r3, [sp, #4]
  tempreg = SDMMC1->STA;
 8004052:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  while((tempreg & SDMMC_STA_RXACT) && (timeout > 0))
 8004054:	048b      	lsls	r3, r1, #18
 8004056:	d421      	bmi.n	800409c <SD_WaitReadOperation+0x68>
  if(StopCondition == 1)
 8004058:	4c1a      	ldr	r4, [pc, #104]	@ (80040c4 <SD_WaitReadOperation+0x90>)
 800405a:	2500      	movs	r5, #0
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d024      	beq.n	80040ac <SD_WaitReadOperation+0x78>
  SD_Error errorstatus = SDMMC_OK;
 8004062:	4628      	mov	r0, r5
  if((timeout == 0) && (errorstatus == SDMMC_OK))
 8004064:	9b01      	ldr	r3, [sp, #4]
 8004066:	b913      	cbnz	r3, 800406e <SD_WaitReadOperation+0x3a>
    errorstatus = SDMMC_DATA_TIMEOUT;
 8004068:	2800      	cmp	r0, #0
 800406a:	bf08      	it	eq
 800406c:	2004      	moveq	r0, #4
  SDMMC1->ICR = (SDMMC_STATIC_FLAGS);
 800406e:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <SD_WaitReadOperation+0x8c>)
 8004070:	4a15      	ldr	r2, [pc, #84]	@ (80040c8 <SD_WaitReadOperation+0x94>)
 8004072:	639a      	str	r2, [r3, #56]	@ 0x38
  if(TransferError != SDMMC_OK)
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <SD_WaitReadOperation+0x88>)
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	b10a      	cbz	r2, 800407e <SD_WaitReadOperation+0x4a>
    return (TransferError);
 800407a:	7818      	ldrb	r0, [r3, #0]
 800407c:	b2c0      	uxtb	r0, r0
}
 800407e:	b003      	add	sp, #12
 8004080:	bd30      	pop	{r4, r5, pc}
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 8004082:	680b      	ldr	r3, [r1, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1de      	bne.n	8004046 <SD_WaitReadOperation+0x12>
 8004088:	7803      	ldrb	r3, [r0, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1db      	bne.n	8004046 <SD_WaitReadOperation+0x12>
 800408e:	9b01      	ldr	r3, [sp, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0d8      	beq.n	8004046 <SD_WaitReadOperation+0x12>
    timeout--;
 8004094:	9b01      	ldr	r3, [sp, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	e7d2      	b.n	8004042 <SD_WaitReadOperation+0xe>
  while((tempreg & SDMMC_STA_RXACT) && (timeout > 0))
 800409c:	9b01      	ldr	r3, [sp, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0da      	beq.n	8004058 <SD_WaitReadOperation+0x24>
    tempreg = SDMMC1->STA;
 80040a2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
    timeout--;
 80040a4:	9b01      	ldr	r3, [sp, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	e7d3      	b.n	8004054 <SD_WaitReadOperation+0x20>
    errorstatus = SD_StopTransfer();
 80040ac:	f7ff ffb6 	bl	800401c <SD_StopTransfer>
    StopCondition = 0;
 80040b0:	6025      	str	r5, [r4, #0]
 80040b2:	e7d7      	b.n	8004064 <SD_WaitReadOperation+0x30>
 80040b4:	20006138 	.word	0x20006138
 80040b8:	2000613c 	.word	0x2000613c
 80040bc:	20006140 	.word	0x20006140
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	20006144 	.word	0x20006144
 80040c8:	004005ff 	.word	0x004005ff

080040cc <SD_WaitWriteOperation>:
{
 80040cc:	b538      	push	{r3, r4, r5, lr}
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 80040ce:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <SD_WaitWriteOperation+0x68>)
  timeout = SDMMC_DATATIMEOUT;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
  while((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SDMMC_OK) && (timeout > 0))
 80040d4:	4918      	ldr	r1, [pc, #96]	@ (8004138 <SD_WaitWriteOperation+0x6c>)
 80040d6:	4819      	ldr	r0, [pc, #100]	@ (800413c <SD_WaitWriteOperation+0x70>)
 80040d8:	6814      	ldr	r4, [r2, #0]
 80040da:	b924      	cbnz	r4, 80040e6 <SD_WaitWriteOperation+0x1a>
 80040dc:	680c      	ldr	r4, [r1, #0]
 80040de:	b914      	cbnz	r4, 80040e6 <SD_WaitWriteOperation+0x1a>
 80040e0:	7804      	ldrb	r4, [r0, #0]
 80040e2:	b904      	cbnz	r4, 80040e6 <SD_WaitWriteOperation+0x1a>
 80040e4:	b9e3      	cbnz	r3, 8004120 <SD_WaitWriteOperation+0x54>
  DMAEndOfTransfer = 0x00;
 80040e6:	2300      	movs	r3, #0
  timeout = SDMMC_DATATIMEOUT;
 80040e8:	f04f 34ff 	mov.w	r4, #4294967295
  DMAEndOfTransfer = 0x00;
 80040ec:	6013      	str	r3, [r2, #0]
  tmpreg = SDMMC1->STA;
 80040ee:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <SD_WaitWriteOperation+0x74>)
 80040f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  while (((tmpreg & SDMMC_STA_TXACT)) && (timeout > 0))
 80040f2:	04d2      	lsls	r2, r2, #19
 80040f4:	d500      	bpl.n	80040f8 <SD_WaitWriteOperation+0x2c>
 80040f6:	b9ac      	cbnz	r4, 8004124 <SD_WaitWriteOperation+0x58>
  if(StopCondition == 1){
 80040f8:	4d12      	ldr	r5, [pc, #72]	@ (8004144 <SD_WaitWriteOperation+0x78>)
 80040fa:	682b      	ldr	r3, [r5, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d114      	bne.n	800412a <SD_WaitWriteOperation+0x5e>
    errorstatus = SD_StopTransfer();
 8004100:	f7ff ff8c 	bl	800401c <SD_StopTransfer>
    StopCondition = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	602b      	str	r3, [r5, #0]
  if((timeout == 0) && (errorstatus == SDMMC_OK)) {
 8004108:	b90c      	cbnz	r4, 800410e <SD_WaitWriteOperation+0x42>
 800410a:	b900      	cbnz	r0, 800410e <SD_WaitWriteOperation+0x42>
    errorstatus = SDMMC_DATA_TIMEOUT;
 800410c:	2004      	movs	r0, #4
  SDMMC1->ICR = (SDMMC_STATIC_FLAGS);
 800410e:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <SD_WaitWriteOperation+0x74>)
 8004110:	4a0d      	ldr	r2, [pc, #52]	@ (8004148 <SD_WaitWriteOperation+0x7c>)
 8004112:	639a      	str	r2, [r3, #56]	@ 0x38
  if(TransferError != SDMMC_OK)
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <SD_WaitWriteOperation+0x70>)
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	b10a      	cbz	r2, 800411e <SD_WaitWriteOperation+0x52>
    return (TransferError);
 800411a:	7818      	ldrb	r0, [r3, #0]
 800411c:	b2c0      	uxtb	r0, r0
}
 800411e:	bd38      	pop	{r3, r4, r5, pc}
    timeout--;
 8004120:	3b01      	subs	r3, #1
 8004122:	e7d9      	b.n	80040d8 <SD_WaitWriteOperation+0xc>
    timeout--;
 8004124:	3c01      	subs	r4, #1
    tmpreg = SDMMC1->STA;
 8004126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004128:	e7e3      	b.n	80040f2 <SD_WaitWriteOperation+0x26>
  if((timeout == 0) && (errorstatus == SDMMC_OK)) {
 800412a:	2c00      	cmp	r4, #0
 800412c:	d0ee      	beq.n	800410c <SD_WaitWriteOperation+0x40>
  SD_Error errorstatus = SDMMC_OK;
 800412e:	2000      	movs	r0, #0
 8004130:	e7ed      	b.n	800410e <SD_WaitWriteOperation+0x42>
 8004132:	bf00      	nop
 8004134:	20006138 	.word	0x20006138
 8004138:	2000613c 	.word	0x2000613c
 800413c:	20006140 	.word	0x20006140
 8004140:	40012c00 	.word	0x40012c00
 8004144:	20006144 	.word	0x20006144
 8004148:	004005ff 	.word	0x004005ff

0800414c <SD_LowLevel_DMA_TxConfig>:
#ifdef SD_SDIO_DMA_STREAM3
  uint32_t tempreg;

  /////PART I::::Adjust the DMA
  //Reset the control register (0x00 is the default value. this also disables the dma. When EN=0, it stops any ongoing DMA transfer)
  DMA2_Stream3->CR &= (~DMA_SxCR_EN);
 800414c:	4b0d      	ldr	r3, [pc, #52]	@ (8004184 <SD_LowLevel_DMA_TxConfig+0x38>)
 800414e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2_Stream3->CR = 0;
 8004156:	2200      	movs	r2, #0
 8004158:	659a      	str	r2, [r3, #88]	@ 0x58

  //Clear all the flags
  DMA2->LIFCR = DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTEIF3 | DMA_LIFCR_CDMEIF3 | DMA_LIFCR_CFEIF3;
 800415a:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 800415e:	609a      	str	r2, [r3, #8]

  //Set the DMA Addresses
  DMA2_Stream3->PAR = (uint32_t)SDIO_FIFO_ADDRESS; //((uint32_t) 0x40012C80) SDIO FIFO Address (=SDIO Base+0x80)
 8004160:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <SD_LowLevel_DMA_TxConfig+0x3c>)
 8004162:	661a      	str	r2, [r3, #96]	@ 0x60
  tempreg |= (0x00<<8) & DMA_SxCR_CIRC;   //Disable Circular mode
  tempreg |= (0x01<<6) & DMA_SxCR_DIR;  //Direction 0:P2M, 1:M2P
  tempreg |= (0x01<<5) & DMA_SxCR_PFCTRL; //Peripheral controls the flow control. (The DMA tranfer ends when the data issues end of transfer signal regardless of ndtr value)
  //Bit [4..1] is for interupt mask. I don't use interrupts here
  //Bit 0 is EN. I will set it after I set the FIFO CR. (FIFO CR cannot be modified when EN=1)
  DMA2_Stream3->CR = tempreg;
 8004164:	4a09      	ldr	r2, [pc, #36]	@ (800418c <SD_LowLevel_DMA_TxConfig+0x40>)
  DMA2_Stream3->M0AR = (uint32_t)BufferSRC;    //Memory address
 8004166:	6658      	str	r0, [r3, #100]	@ 0x64
  DMA2_Stream3->NDTR = BufferSize;
 8004168:	65d9      	str	r1, [r3, #92]	@ 0x5c
  DMA2_Stream3->CR = tempreg;
 800416a:	659a      	str	r2, [r3, #88]	@ 0x58
  //Set the FIFO CR
  tempreg = 0x21; //Reset value
  tempreg |= (0<<7); //FEIE is disabled
  tempreg |= (1<<2); //Fifo is enabled (Direct mode is disabled);
  tempreg |= 3;   //Full fifo (Fifo threshold selection)
  DMA2_Stream3->FCR = tempreg;
 800416c:	2227      	movs	r2, #39	@ 0x27
 800416e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Enable DMA transfer complete/error interrupts  */
  DMA2_Stream3->CR |= (DMA_SxCR_TCIE | DMA_SxCR_TEIE);
 8004170:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004172:	f042 0214 	orr.w	r2, r2, #20
 8004176:	659a      	str	r2, [r3, #88]	@ 0x58
  //LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_3);
  //LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_3);

  //Enable the DMA (When it is enabled, it starts to respond dma requests)
  DMA2_Stream3->CR |= DMA_SxCR_EN;
 8004178:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	659a      	str	r2, [r3, #88]	@ 0x58
  //END of PART I
#endif
}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40026400 	.word	0x40026400
 8004188:	40012c80 	.word	0x40012c80
 800418c:	08a05460 	.word	0x08a05460

08004190 <SD_WriteMultiBlocks>:
{
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004194:	4617      	mov	r7, r2
 8004196:	4698      	mov	r8, r3
  TransferError = SDMMC_OK;
 8004198:	4a29      	ldr	r2, [pc, #164]	@ (8004240 <SD_WriteMultiBlocks+0xb0>)
 800419a:	2300      	movs	r3, #0
  SDMMC1->DCTRL = 0x0;
 800419c:	4c29      	ldr	r4, [pc, #164]	@ (8004244 <SD_WriteMultiBlocks+0xb4>)
  StopCondition = 1;
 800419e:	2101      	movs	r1, #1
  TransferError = SDMMC_OK;
 80041a0:	7013      	strb	r3, [r2, #0]
  TransferEnd = 0;
 80041a2:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <SD_WriteMultiBlocks+0xb8>)
{
 80041a4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  TransferEnd = 0;
 80041a8:	6013      	str	r3, [r2, #0]
  StopCondition = 1;
 80041aa:	4a28      	ldr	r2, [pc, #160]	@ (800424c <SD_WriteMultiBlocks+0xbc>)
{
 80041ac:	9e07      	ldr	r6, [sp, #28]
  StopCondition = 1;
 80041ae:	6011      	str	r1, [r2, #0]
  SDMMC1->DCTRL = 0x0;
 80041b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_TXUNDERR);  // | SDMMC_IT_STBITERR
 80041b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_TxConfig ((uint32_t *) writebuff, (NumberOfBlocks * BlockSize));
 80041b4:	fb06 f105 	mul.w	r1, r6, r5
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_TXUNDERR);  // | SDMMC_IT_STBITERR
 80041b8:	f443 738d 	orr.w	r3, r3, #282	@ 0x11a
 80041bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_TxConfig ((uint32_t *) writebuff, (NumberOfBlocks * BlockSize));
 80041be:	f7ff ffc5 	bl	800414c <SD_LowLevel_DMA_TxConfig>
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 80041c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 80041c4:	2010      	movs	r0, #16
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 80041c6:	f043 0308 	orr.w	r3, r3, #8
 80041ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if(CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80041cc:	4b20      	ldr	r3, [pc, #128]	@ (8004250 <SD_WriteMultiBlocks+0xc0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b02      	cmp	r3, #2
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80041d2:	f44f 638a 	mov.w	r3, #1104	@ 0x450
    BlockSize = 512;
 80041d6:	bf04      	itt	eq
 80041d8:	f44f 7500 	moveq.w	r5, #512	@ 0x200
    WriteAddr /= 512;
 80041dc:	0a7f      	lsreq	r7, r7, #9
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80041de:	60a5      	str	r5, [r4, #8]
    WriteAddr /= 512;
 80041e0:	bf08      	it	eq
 80041e2:	ea47 57c8 	orreq.w	r7, r7, r8, lsl #23
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80041e6:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 80041e8:	f7ff f9bc 	bl	8003564 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 80041ec:	bb28      	cbnz	r0, 800423a <SD_WriteMultiBlocks+0xaa>
  SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) (RCA << 16)));
 80041ee:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <SD_WriteMultiBlocks+0xc4>)
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80041f0:	2037      	movs	r0, #55	@ 0x37
  SDMMC1_Command(SDMMC_CMD_APP_CMD, SDMMC_RESPONSE_SHORT, ((uint32_t) (RCA << 16)));
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	041b      	lsls	r3, r3, #16
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80041f6:	60a3      	str	r3, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80041f8:	f240 4377 	movw	r3, #1143	@ 0x477
 80041fc:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_APP_CMD);
 80041fe:	f7ff f9b1 	bl	8003564 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8004202:	b9d0      	cbnz	r0, 800423a <SD_WriteMultiBlocks+0xaa>
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8004204:	f240 4357 	movw	r3, #1111	@ 0x457
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8004208:	60a6      	str	r6, [r4, #8]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCK_COUNT);
 800420a:	2017      	movs	r0, #23
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800420c:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCK_COUNT);
 800420e:	f7ff f9a9 	bl	8003564 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8004212:	b990      	cbnz	r0, 800423a <SD_WriteMultiBlocks+0xaa>
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8004214:	f240 4359 	movw	r3, #1113	@ 0x459
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8004218:	60a7      	str	r7, [r4, #8]
  errorstatus = CmdResp1Error(SDMMC_CMD_WRITE_MULT_BLOCK);
 800421a:	2019      	movs	r0, #25
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800421c:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_WRITE_MULT_BLOCK);
 800421e:	f7ff f9a1 	bl	8003564 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8004222:	b950      	cbnz	r0, 800423a <SD_WriteMultiBlocks+0xaa>
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8004228:	4375      	muls	r5, r6
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 800422a:	6263      	str	r3, [r4, #36]	@ 0x24
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 800422c:	62a5      	str	r5, [r4, #40]	@ 0x28
  tmpreg = SDMMC1->DCTRL;
 800422e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  tmpreg &= ((uint32_t)0xFFFFFF08);
 8004230:	f023 03f7 	bic.w	r3, r3, #247	@ 0xf7
  tmpreg |= (0x1UL<<0) & SDMMC_DCTRL_DTEN;   //Data transfer enabled bit
 8004234:	f043 0391 	orr.w	r3, r3, #145	@ 0x91
  SDMMC1->DCTRL = tmpreg;
 8004238:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423e:	bf00      	nop
 8004240:	20006140 	.word	0x20006140
 8004244:	40012c00 	.word	0x40012c00
 8004248:	2000613c 	.word	0x2000613c
 800424c:	20006144 	.word	0x20006144
 8004250:	2000616c 	.word	0x2000616c
 8004254:	20006148 	.word	0x20006148

08004258 <TM_FATFS_SD_SDIO_disk_write>:
{
 8004258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004260:	4605      	mov	r5, r0
  if(SD_Detect() != SD_PRESENT)
 8004262:	f7ff fab1 	bl	80037c8 <SD_Detect>
 8004266:	2801      	cmp	r0, #1
{
 8004268:	460e      	mov	r6, r1
  if(SD_Detect() != SD_PRESENT)
 800426a:	4604      	mov	r4, r0
 800426c:	d136      	bne.n	80042dc <TM_FATFS_SD_SDIO_disk_write+0x84>
  if((DWORD)buff & 3)
 800426e:	f015 0303 	ands.w	r3, r5, #3
 8004272:	d01c      	beq.n	80042ae <TM_FATFS_SD_SDIO_disk_write+0x56>
 8004274:	188f      	adds	r7, r1, r2
    while(count--)
 8004276:	42be      	cmp	r6, r7
 8004278:	d105      	bne.n	8004286 <TM_FATFS_SD_SDIO_disk_write+0x2e>
 800427a:	2400      	movs	r4, #0
}
 800427c:	4620      	mov	r0, r4
 800427e:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      memcpy(scratch, buff, BLOCK_SIZE);
 8004286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800428a:	4629      	mov	r1, r5
 800428c:	a802      	add	r0, sp, #8
      res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 800428e:	f106 0801 	add.w	r8, r6, #1
      memcpy(scratch, buff, BLOCK_SIZE);
 8004292:	f011 fe86 	bl	8015fa2 <memcpy>
      res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 8004296:	2201      	movs	r2, #1
 8004298:	4631      	mov	r1, r6
 800429a:	a802      	add	r0, sp, #8
 800429c:	f7ff ffdc 	bl	8004258 <TM_FATFS_SD_SDIO_disk_write>
      if(res != RES_OK){
 80042a0:	4604      	mov	r4, r0
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d1ea      	bne.n	800427c <TM_FATFS_SD_SDIO_disk_write+0x24>
      buff += BLOCK_SIZE;
 80042a6:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 80042aa:	4646      	mov	r6, r8
 80042ac:	e7e3      	b.n	8004276 <TM_FATFS_SD_SDIO_disk_write+0x1e>
  Status = SD_WriteMultiBlocks((uint8_t *)buff, sector << 9, BLOCK_SIZE, count); // 4GB Compliant
 80042ae:	9201      	str	r2, [sp, #4]
 80042b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b4:	4628      	mov	r0, r5
 80042b6:	9200      	str	r2, [sp, #0]
 80042b8:	024a      	lsls	r2, r1, #9
 80042ba:	f7ff ff69 	bl	8004190 <SD_WriteMultiBlocks>
  if(Status == SDMMC_OK)
 80042be:	2800      	cmp	r0, #0
 80042c0:	d1dc      	bne.n	800427c <TM_FATFS_SD_SDIO_disk_write+0x24>
    Status = SD_WaitWriteOperation(); // Check if the Transfer is finished
 80042c2:	f7ff ff03 	bl	80040cc <SD_WaitWriteOperation>
 80042c6:	4605      	mov	r5, r0
    while((State = SD_GetStatus()) == SDMMC_TRANSFER_BUSY); // BUSY, OK (DONE), ERROR (FAIL)
 80042c8:	f7ff fe9c 	bl	8004004 <SD_GetStatus>
 80042cc:	2801      	cmp	r0, #1
 80042ce:	d0fb      	beq.n	80042c8 <TM_FATFS_SD_SDIO_disk_write+0x70>
    if((State == SDMMC_TRANSFER_ERROR) || (Status != SDMMC_OK))
 80042d0:	2802      	cmp	r0, #2
 80042d2:	d0d3      	beq.n	800427c <TM_FATFS_SD_SDIO_disk_write+0x24>
 80042d4:	1e2c      	subs	r4, r5, #0
 80042d6:	bf18      	it	ne
 80042d8:	2401      	movne	r4, #1
 80042da:	e7cf      	b.n	800427c <TM_FATFS_SD_SDIO_disk_write+0x24>
    return RES_NOTRDY;
 80042dc:	2403      	movs	r4, #3
 80042de:	e7cd      	b.n	800427c <TM_FATFS_SD_SDIO_disk_write+0x24>

080042e0 <SD_LowLevel_DMA_RxConfig>:
#ifdef SD_SDIO_DMA_STREAM3
  uint32_t tempreg;

  /////PART I::::Adjust the DMA
  //Reset the control register (0x00 is the default value. this also disables the dma. When EN=0, it stops any ongoing DMA transfer)
  DMA2_Stream3->CR &= (~DMA_SxCR_EN);
 80042e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <SD_LowLevel_DMA_RxConfig+0x38>)
 80042e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2_Stream3->CR = 0;
 80042ea:	2200      	movs	r2, #0
 80042ec:	659a      	str	r2, [r3, #88]	@ 0x58

  //Clear all the flags
  DMA2->LIFCR = DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTEIF3 | DMA_LIFCR_CDMEIF3 | DMA_LIFCR_CFEIF3;
 80042ee:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 80042f2:	609a      	str	r2, [r3, #8]

  //Set the DMA Addresses
  DMA2_Stream3->PAR = (uint32_t)SDIO_FIFO_ADDRESS; //((uint32_t) 0x40012C80) SDIO FIFO Address (=SDIO Base+0x80)
 80042f4:	4a09      	ldr	r2, [pc, #36]	@ (800431c <SD_LowLevel_DMA_RxConfig+0x3c>)
 80042f6:	661a      	str	r2, [r3, #96]	@ 0x60
  tempreg |= (0x00<<8) & DMA_SxCR_CIRC;   //Disable Circular mode
  tempreg |= (0x00<<6) & DMA_SxCR_DIR;  //Direction 0:P2M, 1:M2P
  tempreg |= (0x01<<5) & DMA_SxCR_PFCTRL; //Peripheral controls the flow control. (The DMA tranfer ends when the data issues end of transfer signal regardless of ndtr value)
  //Bit [4..1] is for interupt mask. I don't use interrupts here
  //Bit 0 is EN. I will set it after I set the FIFO CR. (FIFO CR cannot be modified when EN=1)
  DMA2_Stream3->CR = tempreg;
 80042f8:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <SD_LowLevel_DMA_RxConfig+0x40>)
  DMA2_Stream3->M0AR = (uint32_t)BufferDST;    //Memory address
 80042fa:	6658      	str	r0, [r3, #100]	@ 0x64
  DMA2_Stream3->NDTR = BufferSize;   //0 ?? Peripheral controls, therefore we don't need to indicate a size
 80042fc:	65d9      	str	r1, [r3, #92]	@ 0x5c
  DMA2_Stream3->CR = tempreg;
 80042fe:	659a      	str	r2, [r3, #88]	@ 0x58
  //Set the FIFO CR
  tempreg = 0x21; //Reset value
  tempreg |= (0<<7); //FEIE is disabled
  tempreg |= (1<<2); //Fifo is enabled (Direct mode is disabled);
  tempreg |= 3;   //Full fifo (Fifo threshold selection)
  DMA2_Stream3->FCR = tempreg;
 8004300:	2227      	movs	r2, #39	@ 0x27
 8004302:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Enable DMA transfer complete/error interrupts  */
  DMA2_Stream3->CR |= (DMA_SxCR_TCIE | DMA_SxCR_TEIE);
 8004304:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004306:	f042 0214 	orr.w	r2, r2, #20
 800430a:	659a      	str	r2, [r3, #88]	@ 0x58
  //LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_3);
  //LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_3);

  //Enable the DMA (When it is enabled, it starts to respond dma requests)
  DMA2_Stream3->CR |= DMA_SxCR_EN;
 800430c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	659a      	str	r2, [r3, #88]	@ 0x58
  //END of PART I
#endif
}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40026400 	.word	0x40026400
 800431c:	40012c80 	.word	0x40012c80
 8004320:	08a05420 	.word	0x08a05420

08004324 <SD_ReadMultiBlocks>:
{
 8004324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004328:	4615      	mov	r5, r2
 800432a:	461f      	mov	r7, r3
  TransferError = SDMMC_OK;
 800432c:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <SD_ReadMultiBlocks+0x90>)
 800432e:	2300      	movs	r3, #0
  SDMMC1->DCTRL = 0x0;
 8004330:	4c21      	ldr	r4, [pc, #132]	@ (80043b8 <SD_ReadMultiBlocks+0x94>)
  StopCondition = 1;
 8004332:	2101      	movs	r1, #1
  TransferError = SDMMC_OK;
 8004334:	7013      	strb	r3, [r2, #0]
  TransferEnd = 0;
 8004336:	4a21      	ldr	r2, [pc, #132]	@ (80043bc <SD_ReadMultiBlocks+0x98>)
{
 8004338:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  TransferEnd = 0;
 800433c:	6013      	str	r3, [r2, #0]
  StopCondition = 1;
 800433e:	4a20      	ldr	r2, [pc, #128]	@ (80043c0 <SD_ReadMultiBlocks+0x9c>)
{
 8004340:	f8dd 801c 	ldr.w	r8, [sp, #28]
  StopCondition = 1;
 8004344:	6011      	str	r1, [r2, #0]
  SDMMC1->DCTRL = 0x0;
 8004346:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_RXOVERR);// | SDMMC_IT_STBITERR
 8004348:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_RxConfig ((uint32_t *) readbuff, (NumberOfBlocks * BlockSize));
 800434a:	fb08 f106 	mul.w	r1, r8, r6
  SDMMC1->MASK |= (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND | SDMMC_IT_RXOVERR);// | SDMMC_IT_STBITERR
 800434e:	f443 7395 	orr.w	r3, r3, #298	@ 0x12a
 8004352:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SD_LowLevel_DMA_RxConfig ((uint32_t *) readbuff, (NumberOfBlocks * BlockSize));
 8004354:	f7ff ffc4 	bl	80042e0 <SD_LowLevel_DMA_RxConfig>
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 8004358:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 800435a:	2010      	movs	r0, #16
  SDMMC1->DCTRL |= SDMMC_DCTRL_DMAEN; //SDIO_DMACmd (ENABLE);
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if(CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8004362:	4b18      	ldr	r3, [pc, #96]	@ (80043c4 <SD_ReadMultiBlocks+0xa0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b02      	cmp	r3, #2
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 8004368:	f44f 638a 	mov.w	r3, #1104	@ 0x450
    BlockSize = 512;
 800436c:	bf04      	itt	eq
 800436e:	f44f 7600 	moveq.w	r6, #512	@ 0x200
    ReadAddr /= 512;
 8004372:	0a6d      	lsreq	r5, r5, #9
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 8004374:	60a6      	str	r6, [r4, #8]
    ReadAddr /= 512;
 8004376:	bf08      	it	eq
 8004378:	ea45 55c7 	orreq.w	r5, r5, r7, lsl #23
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800437c:	60e3      	str	r3, [r4, #12]
  errorstatus = CmdResp1Error(SDMMC_CMD_SET_BLOCKLEN);
 800437e:	f7ff f8f1 	bl	8003564 <CmdResp1Error>
  if(errorstatus != SDMMC_OK){
 8004382:	b9a0      	cbnz	r0, 80043ae <SD_ReadMultiBlocks+0x8a>
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8004388:	fb08 f606 	mul.w	r6, r8, r6
  errorstatus = CmdResp1Error (SDMMC_CMD_READ_MULT_BLOCK);
 800438c:	2012      	movs	r0, #18
  SDMMC1->DTIMER = SDMMC_DATATIMEOUT;
 800438e:	6263      	str	r3, [r4, #36]	@ 0x24
  SDMMC1->DLEN = NumberOfBlocks * BlockSize;
 8004390:	62a6      	str	r6, [r4, #40]	@ 0x28
  tmpreg = SDMMC1->DCTRL;
 8004392:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  tmpreg &= ((uint32_t)0xFFFFFF08);
 8004394:	f023 03f7 	bic.w	r3, r3, #247	@ 0xf7
  tmpreg |= (0x1UL<<0) & SDMMC_DCTRL_DTEN;   //Data transfer enabled bit
 8004398:	f043 0393 	orr.w	r3, r3, #147	@ 0x93
  SDMMC1->DCTRL = tmpreg;
 800439c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 800439e:	f240 4352 	movw	r3, #1106	@ 0x452
  SDMMC1->ARG = arg;  //First adjust the argument (because I will immediately enable CPSM next)
 80043a2:	60a5      	str	r5, [r4, #8]
  SDMMC1->CMD = (uint32_t)(cmd & SDMMC_CMD_CMDINDEX) | (SDMMC_WAIT_NO & SDMMC_CMD_WAITRESP) | (resp & SDMMC_CMD_WAITRESP) | (0x0400);  //The last argument is to enable CSPM SDMMC_CPSM_ENABLE
 80043a4:	60e3      	str	r3, [r4, #12]
}
 80043a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  errorstatus = CmdResp1Error (SDMMC_CMD_READ_MULT_BLOCK);
 80043aa:	f7ff b8db 	b.w	8003564 <CmdResp1Error>
}
 80043ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b2:	bf00      	nop
 80043b4:	20006140 	.word	0x20006140
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	2000613c 	.word	0x2000613c
 80043c0:	20006144 	.word	0x20006144
 80043c4:	2000616c 	.word	0x2000616c

080043c8 <TM_FATFS_SD_SDIO_disk_read>:
  if((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)){
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <TM_FATFS_SD_SDIO_disk_read+0x78>)
{
 80043ca:	b570      	push	{r4, r5, r6, lr}
  if((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)){
 80043cc:	781b      	ldrb	r3, [r3, #0]
{
 80043ce:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80043d2:	4604      	mov	r4, r0
  if((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)){
 80043d4:	07db      	lsls	r3, r3, #31
 80043d6:	d431      	bmi.n	800443c <TM_FATFS_SD_SDIO_disk_read+0x74>
  if((DWORD)buff & 3) {
 80043d8:	f010 0303 	ands.w	r3, r0, #3
 80043dc:	d017      	beq.n	800440e <TM_FATFS_SD_SDIO_disk_read+0x46>
 80043de:	188d      	adds	r5, r1, r2
    while(count--)
 80043e0:	42a9      	cmp	r1, r5
 80043e2:	d103      	bne.n	80043ec <TM_FATFS_SD_SDIO_disk_read+0x24>
 80043e4:	2000      	movs	r0, #0
}
 80043e6:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
      res = TM_FATFS_SD_SDIO_disk_read((void *)scratch, sector++, 1);
 80043ec:	2201      	movs	r2, #1
 80043ee:	a802      	add	r0, sp, #8
 80043f0:	1c4e      	adds	r6, r1, #1
 80043f2:	f7ff ffe9 	bl	80043c8 <TM_FATFS_SD_SDIO_disk_read>
      if(res != RES_OK)
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d1f5      	bne.n	80043e6 <TM_FATFS_SD_SDIO_disk_read+0x1e>
      memcpy(buff, scratch, BLOCK_SIZE);
 80043fa:	a902      	add	r1, sp, #8
 80043fc:	4620      	mov	r0, r4
 80043fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
      buff += BLOCK_SIZE;
 8004402:	f504 7400 	add.w	r4, r4, #512	@ 0x200
      memcpy(buff, scratch, BLOCK_SIZE);
 8004406:	f011 fdcc 	bl	8015fa2 <memcpy>
      res = TM_FATFS_SD_SDIO_disk_read((void *)scratch, sector++, 1);
 800440a:	4631      	mov	r1, r6
 800440c:	e7e8      	b.n	80043e0 <TM_FATFS_SD_SDIO_disk_read+0x18>
  Status = SD_ReadMultiBlocks(buff, sector << 9, BLOCK_SIZE, count);
 800440e:	9201      	str	r2, [sp, #4]
 8004410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004414:	9200      	str	r2, [sp, #0]
 8004416:	024a      	lsls	r2, r1, #9
 8004418:	f7ff ff84 	bl	8004324 <SD_ReadMultiBlocks>
  if(Status == SDMMC_OK)
 800441c:	b108      	cbz	r0, 8004422 <TM_FATFS_SD_SDIO_disk_read+0x5a>
      return RES_ERROR;
 800441e:	2001      	movs	r0, #1
 8004420:	e7e1      	b.n	80043e6 <TM_FATFS_SD_SDIO_disk_read+0x1e>
    Status = SD_WaitReadOperation();
 8004422:	f7ff fe07 	bl	8004034 <SD_WaitReadOperation>
 8004426:	4604      	mov	r4, r0
    while((State = SD_GetStatus()) == SDMMC_TRANSFER_BUSY);
 8004428:	f7ff fdec 	bl	8004004 <SD_GetStatus>
 800442c:	2801      	cmp	r0, #1
 800442e:	d0fb      	beq.n	8004428 <TM_FATFS_SD_SDIO_disk_read+0x60>
    if((State == SDMMC_TRANSFER_ERROR) || (Status != SDMMC_OK)) {
 8004430:	2802      	cmp	r0, #2
 8004432:	d0f4      	beq.n	800441e <TM_FATFS_SD_SDIO_disk_read+0x56>
 8004434:	1e20      	subs	r0, r4, #0
 8004436:	bf18      	it	ne
 8004438:	2001      	movne	r0, #1
 800443a:	e7d4      	b.n	80043e6 <TM_FATFS_SD_SDIO_disk_read+0x1e>
    return RES_NOTRDY;
 800443c:	2003      	movs	r0, #3
 800443e:	e7d2      	b.n	80043e6 <TM_FATFS_SD_SDIO_disk_read+0x1e>
 8004440:	20000020 	.word	0x20000020

08004444 <SD_ProcessIRQSrc>:
  */
SD_Error SD_ProcessIRQSrc(void)
{
  uint32_t tempreg;

  tempreg = SDMMC1->STA;
 8004444:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <SD_ProcessIRQSrc+0x60>)
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <SD_ProcessIRQSrc+0x64>)
 8004448:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if(tempreg & SDMMC_STA_DATAEND)
 800444a:	f411 7f80 	tst.w	r1, #256	@ 0x100
 800444e:	d010      	beq.n	8004472 <SD_ProcessIRQSrc+0x2e>
  {
    TransferError = SDMMC_OK;
 8004450:	2100      	movs	r1, #0
 8004452:	7019      	strb	r1, [r3, #0]
    SDMMC1->ICR = SDMMC_ICR_DATAENDC;
 8004454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004458:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferEnd = 1;
 800445a:	2101      	movs	r1, #1
 800445c:	4a13      	ldr	r2, [pc, #76]	@ (80044ac <SD_ProcessIRQSrc+0x68>)
 800445e:	6011      	str	r1, [r2, #0]
  //else if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
  //{
  //  SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
  //  TransferError = SD_START_BIT_ERR;
  //}
  SDMMC1->MASK &= ~(SDMMC_MASK_DCRCFAILIE | SDMMC_MASK_DTIMEOUTIE | SDMMC_MASK_DATAENDIE |
 8004460:	4910      	ldr	r1, [pc, #64]	@ (80044a4 <SD_ProcessIRQSrc+0x60>)
 8004462:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8004464:	f422 4241 	bic.w	r2, r2, #49408	@ 0xc100
 8004468:	f022 023a 	bic.w	r2, r2, #58	@ 0x3a
 800446c:	63ca      	str	r2, [r1, #60]	@ 0x3c
		            SDMMC_MASK_TXFIFOHEIE | SDMMC_MASK_RXFIFOHFIE | SDMMC_MASK_TXUNDERRIE | SDMMC_MASK_RXOVERRIE);

  return(TransferError);
 800446e:	7818      	ldrb	r0, [r3, #0]
}
 8004470:	4770      	bx	lr
  else if(tempreg & SDMMC_STA_DCRCFAIL)
 8004472:	0788      	lsls	r0, r1, #30
 8004474:	d503      	bpl.n	800447e <SD_ProcessIRQSrc+0x3a>
    SDMMC1->ICR = SDMMC_ICR_DCRCFAILC;
 8004476:	2102      	movs	r1, #2
 8004478:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_DATA_CRC_FAIL;
 800447a:	7019      	strb	r1, [r3, #0]
 800447c:	e7f0      	b.n	8004460 <SD_ProcessIRQSrc+0x1c>
  else if(tempreg & SDMMC_STA_DTIMEOUT)
 800447e:	0708      	lsls	r0, r1, #28
 8004480:	d504      	bpl.n	800448c <SD_ProcessIRQSrc+0x48>
    SDMMC1->ICR = SDMMC_ICR_DTIMEOUTC;
 8004482:	2108      	movs	r1, #8
 8004484:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_DATA_TIMEOUT;
 8004486:	2204      	movs	r2, #4
    TransferError = SDMMC_TX_UNDERRUN;
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e7e9      	b.n	8004460 <SD_ProcessIRQSrc+0x1c>
  else if(tempreg & SDMMC_STA_RXOVERR)
 800448c:	0688      	lsls	r0, r1, #26
 800448e:	d503      	bpl.n	8004498 <SD_ProcessIRQSrc+0x54>
    SDMMC1->ICR = SDMMC_ICR_RXOVERRC;
 8004490:	2120      	movs	r1, #32
 8004492:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_RX_OVERRUN;
 8004494:	2206      	movs	r2, #6
 8004496:	e7f7      	b.n	8004488 <SD_ProcessIRQSrc+0x44>
  else if(tempreg & SDMMC_STA_TXUNDERR)
 8004498:	06c9      	lsls	r1, r1, #27
 800449a:	d5e1      	bpl.n	8004460 <SD_ProcessIRQSrc+0x1c>
    SDMMC1->ICR = SDMMC_ICR_TXUNDERRC;
 800449c:	2110      	movs	r1, #16
 800449e:	6391      	str	r1, [r2, #56]	@ 0x38
    TransferError = SDMMC_TX_UNDERRUN;
 80044a0:	2205      	movs	r2, #5
 80044a2:	e7f1      	b.n	8004488 <SD_ProcessIRQSrc+0x44>
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	20006140 	.word	0x20006140
 80044ac:	2000613c 	.word	0x2000613c

080044b0 <SDMMC1_IRQHandler>:
  SD_ProcessIRQSrc();
 80044b0:	f7ff bfc8 	b.w	8004444 <SD_ProcessIRQSrc>

080044b4 <SD_ProcessDMAIRQ>:
  * @retval None.
  */
void SD_ProcessDMAIRQ(void)
{
#ifdef SD_SDIO_DMA_STREAM3
  if(DMA2->LISR & SD_SDIO_DMA_FLAG_TCIF)
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <SD_ProcessDMAIRQ+0x18>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	0112      	lsls	r2, r2, #4
 80044ba:	d505      	bpl.n	80044c8 <SD_ProcessDMAIRQ+0x14>
#else
  if(DMA2->HISR & SD_SDIO_DMA_FLAG_TCIF)
#endif
  { //数据流发生传输完成事件
    DMAEndOfTransfer = 0x01;
 80044bc:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <SD_ProcessDMAIRQ+0x1c>)
 80044be:	2101      	movs	r1, #1
 80044c0:	6011      	str	r1, [r2, #0]
    DMA2->LIFCR = SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF;
 80044c2:	f04f 6204 	mov.w	r2, #138412032	@ 0x8400000
 80044c6:	609a      	str	r2, [r3, #8]
    //DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF);
  }
}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40026400 	.word	0x40026400
 80044d0:	20006138 	.word	0x20006138

080044d4 <DMA2_Stream3_IRQHandler>:
  SD_ProcessDMAIRQ();
 80044d4:	f7ff bfee 	b.w	80044b4 <SD_ProcessDMAIRQ>

080044d8 <sd_card_fatfs_test>:
static BYTE WriteBuffer[] =              /* 写缓冲区*/
        "Welcome to STM32 FatFs, This is a test file!";


void sd_card_fatfs_test(void)
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80044de:	f240 122f 	movw	r2, #303	@ 0x12f
 80044e2:	4958      	ldr	r1, [pc, #352]	@ (8004644 <sd_card_fatfs_test+0x16c>)
{
 80044e4:	b084      	sub	sp, #16
  res_sd = f_mount(&fs, "1:", 1);
 80044e6:	4c58      	ldr	r4, [pc, #352]	@ (8004648 <sd_card_fatfs_test+0x170>)
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80044e8:	4858      	ldr	r0, [pc, #352]	@ (800464c <sd_card_fatfs_test+0x174>)
 80044ea:	f011 fb4f 	bl	8015b8c <iprintf>
  res_sd = f_mount(&fs, "1:", 1);
 80044ee:	2201      	movs	r2, #1
 80044f0:	4957      	ldr	r1, [pc, #348]	@ (8004650 <sd_card_fatfs_test+0x178>)
 80044f2:	4858      	ldr	r0, [pc, #352]	@ (8004654 <sd_card_fatfs_test+0x17c>)
 80044f4:	f001 ff90 	bl	8006418 <f_mount>
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80044f8:	4952      	ldr	r1, [pc, #328]	@ (8004644 <sd_card_fatfs_test+0x16c>)
  res_sd = f_mount(&fs, "1:", 1);
 80044fa:	7020      	strb	r0, [r4, #0]
  printf("%s\t%d\r\n", __FUNCTION__ , __LINE__);
 80044fc:	f240 1231 	movw	r2, #305	@ 0x131
 8004500:	4852      	ldr	r0, [pc, #328]	@ (800464c <sd_card_fatfs_test+0x174>)
 8004502:	f011 fb43 	bl	8015b8c <iprintf>
  /*----------------------- 格式化测试 -----------------------*/
  /* 如果没有文件系统就格式化创建创建文件系统 */
  if(res_sd == FR_NO_FILESYSTEM)
 8004506:	7821      	ldrb	r1, [r4, #0]
 8004508:	290d      	cmp	r1, #13
 800450a:	f040 8081 	bne.w	8004610 <sd_card_fatfs_test+0x138>
  {
    printf(">> SD Card don't have FatFs Type File System!\r\nCreate SD Card FAT32 File System...\r\nPlease Wait some time!\r\n");
 800450e:	4852      	ldr	r0, [pc, #328]	@ (8004658 <sd_card_fatfs_test+0x180>)
    /* 格式化 */
    //res_sd=f_mkfs("0:", 0, NULL, 0);
    MKFS_PARM opt = {0};
 8004510:	2601      	movs	r6, #1
    printf(">> SD Card don't have FatFs Type File System!\r\nCreate SD Card FAT32 File System...\r\nPlease Wait some time!\r\n");
 8004512:	f011 fba3 	bl	8015c5c <puts>
    MKFS_PARM opt = {0};
 8004516:	f240 2302 	movw	r3, #514	@ 0x202
    opt.fmt = FM_FAT32; // 选择FAT32格式
    opt.n_fat = 2; // 设定FAT副本数量，通常为2
    opt.align = 1; // 数据区域对齐，默认为1，表示按扇区对齐
    // opt.n_root     不需要设置，因为我们使用的是FAT32，它没有固定大小的根目录
    opt.au_size = 512; // 每簇大小，以字节为单位，这里是假设每簇为1个扇区，即512字节
 800451a:	2200      	movs	r2, #0

    //res_sd = f_mkfs("0:", &opt, NULL, 0);
    #define FORMAT_WORK_BUF_SZ 4096         // 根据需要调整
    BYTE formatWorkBuf[FORMAT_WORK_BUF_SZ];
    res_sd = f_mkfs("1:", &opt, formatWorkBuf, FORMAT_WORK_BUF_SZ);
 800451c:	4669      	mov	r1, sp
 800451e:	484c      	ldr	r0, [pc, #304]	@ (8004650 <sd_card_fatfs_test+0x178>)
    MKFS_PARM opt = {0};
 8004520:	e9cd 3600 	strd	r3, r6, [sp]
    opt.au_size = 512; // 每簇大小，以字节为单位，这里是假设每簇为1个扇区，即512字节
 8004524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004528:	e9cd 2302 	strd	r2, r3, [sp, #8]
    res_sd = f_mkfs("1:", &opt, formatWorkBuf, FORMAT_WORK_BUF_SZ);
 800452c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004530:	aa04      	add	r2, sp, #16
 8004532:	f002 fb6f 	bl	8006c14 <f_mkfs>
 8004536:	4605      	mov	r5, r0
 8004538:	7020      	strb	r0, [r4, #0]
    //res_sd = f_mkfs("0:", &opt, NULL, 4096); //根据实际需求调整
    if(res_sd == FR_OK)
 800453a:	2800      	cmp	r0, #0
 800453c:	d160      	bne.n	8004600 <sd_card_fatfs_test+0x128>
    {
      printf(">> SD Card Create File System success! \r\n");
 800453e:	4847      	ldr	r0, [pc, #284]	@ (800465c <sd_card_fatfs_test+0x184>)
 8004540:	f011 fb8c 	bl	8015c5c <puts>
      /* 格式化后，先取消挂载 */
      res_sd = f_mount(NULL,"1:",0);
 8004544:	462a      	mov	r2, r5
 8004546:	4942      	ldr	r1, [pc, #264]	@ (8004650 <sd_card_fatfs_test+0x178>)
 8004548:	4628      	mov	r0, r5
 800454a:	f001 ff65 	bl	8006418 <f_mount>
      /* 重新挂载 */
      res_sd = f_mount(&fs,"1:",1);
 800454e:	4632      	mov	r2, r6
      res_sd = f_mount(NULL,"1:",0);
 8004550:	7020      	strb	r0, [r4, #0]
      res_sd = f_mount(&fs,"1:",1);
 8004552:	493f      	ldr	r1, [pc, #252]	@ (8004650 <sd_card_fatfs_test+0x178>)
 8004554:	483f      	ldr	r0, [pc, #252]	@ (8004654 <sd_card_fatfs_test+0x17c>)
 8004556:	f001 ff5f 	bl	8006418 <f_mount>
 800455a:	7020      	strb	r0, [r4, #0]
  else{
    printf(">> Mount file system success! \r\n");
  }

  /*----------------------- 文件系统测试：写测试 -----------------------*/
  printf("\r\n---------------FatFs Write Test---------------\r\n");
 800455c:	4840      	ldr	r0, [pc, #256]	@ (8004660 <sd_card_fatfs_test+0x188>)
 800455e:	f011 fb7d 	bl	8015c5c <puts>
  /* 打开文件，如果文件不存在则创建它 */
  res_sd = f_open(&fnew, "1:FatFs_test.txt",FA_CREATE_ALWAYS | FA_WRITE );
 8004562:	220a      	movs	r2, #10
 8004564:	493f      	ldr	r1, [pc, #252]	@ (8004664 <sd_card_fatfs_test+0x18c>)
 8004566:	4840      	ldr	r0, [pc, #256]	@ (8004668 <sd_card_fatfs_test+0x190>)
 8004568:	f001 ff7e 	bl	8006468 <f_open>
 800456c:	7020      	strb	r0, [r4, #0]
  if(res_sd == FR_OK)
 800456e:	2800      	cmp	r0, #0
 8004570:	d15d      	bne.n	800462e <sd_card_fatfs_test+0x156>
  {
    printf(">> Open Or Create file success, write data...\r\n");
    /* 将指定存储区内容写入到文件内 */
    res_sd = f_write(&fnew,WriteBuffer,sizeof(WriteBuffer),&fnum);
 8004572:	4d3e      	ldr	r5, [pc, #248]	@ (800466c <sd_card_fatfs_test+0x194>)
    printf(">> Open Or Create file success, write data...\r\n");
 8004574:	483e      	ldr	r0, [pc, #248]	@ (8004670 <sd_card_fatfs_test+0x198>)
 8004576:	f011 fb71 	bl	8015c5c <puts>
    res_sd = f_write(&fnew,WriteBuffer,sizeof(WriteBuffer),&fnum);
 800457a:	493e      	ldr	r1, [pc, #248]	@ (8004674 <sd_card_fatfs_test+0x19c>)
 800457c:	462b      	mov	r3, r5
 800457e:	222d      	movs	r2, #45	@ 0x2d
 8004580:	4839      	ldr	r0, [pc, #228]	@ (8004668 <sd_card_fatfs_test+0x190>)
 8004582:	f002 f98a 	bl	800689a <f_write>
 8004586:	4601      	mov	r1, r0
 8004588:	7020      	strb	r0, [r4, #0]
    if(res_sd==FR_OK)
 800458a:	2800      	cmp	r0, #0
 800458c:	d14d      	bne.n	800462a <sd_card_fatfs_test+0x152>
    {
      printf(">> Write data Success：%d\r\n",fnum);
 800458e:	6829      	ldr	r1, [r5, #0]
 8004590:	4839      	ldr	r0, [pc, #228]	@ (8004678 <sd_card_fatfs_test+0x1a0>)
 8004592:	f011 fafb 	bl	8015b8c <iprintf>
      printf(">> Write data:\r\n%s\r\n",WriteBuffer);
 8004596:	4937      	ldr	r1, [pc, #220]	@ (8004674 <sd_card_fatfs_test+0x19c>)
 8004598:	4838      	ldr	r0, [pc, #224]	@ (800467c <sd_card_fatfs_test+0x1a4>)
    }else{
      printf("Write data failed! (%d)\r\n",res_sd);
 800459a:	f011 faf7 	bl	8015b8c <iprintf>
    }
    /* 不再读写，关闭文件 */
    f_close(&fnew);
 800459e:	4832      	ldr	r0, [pc, #200]	@ (8004668 <sd_card_fatfs_test+0x190>)
 80045a0:	f002 fb2a 	bl	8006bf8 <f_close>
  }else{
    printf("Open Or Create file failed!\r\n");
  }
  /*----------------------- 文件系统测试：读测试 -----------------------*/
  printf("--------------- Read file test ---------------\r\n");
 80045a4:	4836      	ldr	r0, [pc, #216]	@ (8004680 <sd_card_fatfs_test+0x1a8>)
 80045a6:	f011 fb59 	bl	8015c5c <puts>
  res_sd = f_open(&fnew, "1:FatFs_test.txt", FA_OPEN_EXISTING | FA_READ);
 80045aa:	2201      	movs	r2, #1
 80045ac:	492d      	ldr	r1, [pc, #180]	@ (8004664 <sd_card_fatfs_test+0x18c>)
 80045ae:	482e      	ldr	r0, [pc, #184]	@ (8004668 <sd_card_fatfs_test+0x190>)
 80045b0:	f001 ff5a 	bl	8006468 <f_open>
 80045b4:	7020      	strb	r0, [r4, #0]
  if(res_sd == FR_OK)
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d13f      	bne.n	800463a <sd_card_fatfs_test+0x162>
  {
    printf(">> Open success...\r\n");
    res_sd = f_read(&fnew, ReadBuffer, sizeof(ReadBuffer), &fnum);
 80045ba:	4d2c      	ldr	r5, [pc, #176]	@ (800466c <sd_card_fatfs_test+0x194>)
    printf(">> Open success...\r\n");
 80045bc:	4831      	ldr	r0, [pc, #196]	@ (8004684 <sd_card_fatfs_test+0x1ac>)
 80045be:	f011 fb4d 	bl	8015c5c <puts>
    res_sd = f_read(&fnew, ReadBuffer, sizeof(ReadBuffer), &fnum);
 80045c2:	4931      	ldr	r1, [pc, #196]	@ (8004688 <sd_card_fatfs_test+0x1b0>)
 80045c4:	462b      	mov	r3, r5
 80045c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045ca:	4827      	ldr	r0, [pc, #156]	@ (8004668 <sd_card_fatfs_test+0x190>)
 80045cc:	f002 f88d 	bl	80066ea <f_read>
 80045d0:	4601      	mov	r1, r0
 80045d2:	7020      	strb	r0, [r4, #0]
    if(res_sd == FR_OK)
 80045d4:	bb78      	cbnz	r0, 8004636 <sd_card_fatfs_test+0x15e>
    {
      printf(">>Read file data success%d\r\n",fnum);
 80045d6:	6829      	ldr	r1, [r5, #0]
 80045d8:	482c      	ldr	r0, [pc, #176]	@ (800468c <sd_card_fatfs_test+0x1b4>)
 80045da:	f011 fad7 	bl	8015b8c <iprintf>
      printf(">>Read data:\r\n%s \r\n", ReadBuffer);
 80045de:	492a      	ldr	r1, [pc, #168]	@ (8004688 <sd_card_fatfs_test+0x1b0>)
 80045e0:	482b      	ldr	r0, [pc, #172]	@ (8004690 <sd_card_fatfs_test+0x1b8>)
    }else{
      printf("Read file failed! (%d)\r\n",res_sd);
 80045e2:	f011 fad3 	bl	8015b8c <iprintf>
  }else{
    printf("Open file failed!\r\n");
  }

  /* 不再读写，关闭文件 */
  f_close(&fnew);
 80045e6:	4820      	ldr	r0, [pc, #128]	@ (8004668 <sd_card_fatfs_test+0x190>)
 80045e8:	f002 fb06 	bl	8006bf8 <f_close>

  /* 不再使用文件系统，取消挂载文件系统 */
  f_mount(NULL,"1:",1);
 80045ec:	2201      	movs	r2, #1
 80045ee:	4918      	ldr	r1, [pc, #96]	@ (8004650 <sd_card_fatfs_test+0x178>)
 80045f0:	2000      	movs	r0, #0

  //while(1)
  //{

  //}
}
 80045f2:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 80045f6:	b004      	add	sp, #16
 80045f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  f_mount(NULL,"1:",1);
 80045fc:	f001 bf0c 	b.w	8006418 <f_mount>
      printf(">> Create file system failed! %d \r\n", res_sd);
 8004600:	4601      	mov	r1, r0
 8004602:	4824      	ldr	r0, [pc, #144]	@ (8004694 <sd_card_fatfs_test+0x1bc>)
 8004604:	f011 fac2 	bl	8015b8c <iprintf>
}
 8004608:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 800460c:	b004      	add	sp, #16
 800460e:	bd70      	pop	{r4, r5, r6, pc}
  else if(res_sd != FR_OK) {
 8004610:	b139      	cbz	r1, 8004622 <sd_card_fatfs_test+0x14a>
    printf(">> SD Card Mount File System failed! %d \r\n",res_sd);
 8004612:	4821      	ldr	r0, [pc, #132]	@ (8004698 <sd_card_fatfs_test+0x1c0>)
}
 8004614:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 8004618:	b004      	add	sp, #16
 800461a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf(">> SD Card Mount File System failed! %d \r\n",res_sd);
 800461e:	f011 bab5 	b.w	8015b8c <iprintf>
    printf(">> Mount file system success! \r\n");
 8004622:	481e      	ldr	r0, [pc, #120]	@ (800469c <sd_card_fatfs_test+0x1c4>)
 8004624:	f011 fb1a 	bl	8015c5c <puts>
 8004628:	e798      	b.n	800455c <sd_card_fatfs_test+0x84>
      printf("Write data failed! (%d)\r\n",res_sd);
 800462a:	481d      	ldr	r0, [pc, #116]	@ (80046a0 <sd_card_fatfs_test+0x1c8>)
 800462c:	e7b5      	b.n	800459a <sd_card_fatfs_test+0xc2>
    printf("Open Or Create file failed!\r\n");
 800462e:	481d      	ldr	r0, [pc, #116]	@ (80046a4 <sd_card_fatfs_test+0x1cc>)
 8004630:	f011 fb14 	bl	8015c5c <puts>
 8004634:	e7b6      	b.n	80045a4 <sd_card_fatfs_test+0xcc>
      printf("Read file failed! (%d)\r\n",res_sd);
 8004636:	481c      	ldr	r0, [pc, #112]	@ (80046a8 <sd_card_fatfs_test+0x1d0>)
 8004638:	e7d3      	b.n	80045e2 <sd_card_fatfs_test+0x10a>
    printf("Open file failed!\r\n");
 800463a:	481c      	ldr	r0, [pc, #112]	@ (80046ac <sd_card_fatfs_test+0x1d4>)
 800463c:	f011 fb0e 	bl	8015c5c <puts>
 8004640:	e7d1      	b.n	80045e6 <sd_card_fatfs_test+0x10e>
 8004642:	bf00      	nop
 8004644:	08019261 	.word	0x08019261
 8004648:	20006274 	.word	0x20006274
 800464c:	08016b22 	.word	0x08016b22
 8004650:	08016b1f 	.word	0x08016b1f
 8004654:	200064d8 	.word	0x200064d8
 8004658:	08016b2a 	.word	0x08016b2a
 800465c:	08016b96 	.word	0x08016b96
 8004660:	08016c2e 	.word	0x08016c2e
 8004664:	08016c60 	.word	0x08016c60
 8004668:	20006278 	.word	0x20006278
 800466c:	20006270 	.word	0x20006270
 8004670:	08016c71 	.word	0x08016c71
 8004674:	20000021 	.word	0x20000021
 8004678:	08016ca0 	.word	0x08016ca0
 800467c:	08016cbd 	.word	0x08016cbd
 8004680:	08016d09 	.word	0x08016d09
 8004684:	08016d39 	.word	0x08016d39
 8004688:	20006170 	.word	0x20006170
 800468c:	08016d4d 	.word	0x08016d4d
 8004690:	08016d6a 	.word	0x08016d6a
 8004694:	08016bbf 	.word	0x08016bbf
 8004698:	08016be3 	.word	0x08016be3
 800469c:	08016c0e 	.word	0x08016c0e
 80046a0:	08016cd2 	.word	0x08016cd2
 80046a4:	08016cec 	.word	0x08016cec
 80046a8:	08016d7e 	.word	0x08016d7e
 80046ac:	08016d97 	.word	0x08016d97

080046b0 <disk_status>:
)
{
	DSTATUS stat;
	int result;

	switch (pdrv) {
 80046b0:	2801      	cmp	r0, #1
 80046b2:	d101      	bne.n	80046b8 <disk_status+0x8>
		stat = STA_NOINIT;
		return stat;

	case DEV_MMC :
		//result = MMC_disk_status();
		result = TM_FATFS_SD_SDIO_disk_status();
 80046b4:	f7ff b896 	b.w	80037e4 <TM_FATFS_SD_SDIO_disk_status>
		// translate the reslut code here
		stat = STA_NOINIT;
		return stat;
	}
	return STA_NOINIT;
}
 80046b8:	2001      	movs	r0, #1
 80046ba:	4770      	bx	lr

080046bc <disk_initialize>:
)
{
	DSTATUS stat;
	int result;

	switch (pdrv) {
 80046bc:	2801      	cmp	r0, #1
 80046be:	d101      	bne.n	80046c4 <disk_initialize+0x8>
		stat = STA_NOINIT;
		return stat;

	case DEV_MMC :
		//result = MMC_disk_initialize();
		result = TM_FATFS_SD_SDIO_disk_initialize();
 80046c0:	f7ff bc42 	b.w	8003f48 <TM_FATFS_SD_SDIO_disk_initialize>
		// translate the reslut code here
		stat = STA_NOINIT;
		return stat;
	}
	return STA_NOINIT;
}
 80046c4:	2001      	movs	r0, #1
 80046c6:	4770      	bx	lr

080046c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80046c8:	4603      	mov	r3, r0
 80046ca:	4608      	mov	r0, r1
 80046cc:	4611      	mov	r1, r2
 80046ce:	9a00      	ldr	r2, [sp, #0]
	DRESULT res;
	int result;

	switch (pdrv) {
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <disk_read+0x10>
		return res;

	case DEV_MMC :
		// translate the arguments here
		//result = MMC_disk_read(buff, sector, count);
		result = TM_FATFS_SD_SDIO_disk_read(buff, sector, count);
 80046d4:	f7ff be78 	b.w	80043c8 <TM_FATFS_SD_SDIO_disk_read>
		res = RES_PARERR;
		return res;
	}

	return RES_PARERR;
}
 80046d8:	2004      	movs	r0, #4
 80046da:	4770      	bx	lr

080046dc <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 80046dc:	4603      	mov	r3, r0
 80046de:	4608      	mov	r0, r1
 80046e0:	4611      	mov	r1, r2
 80046e2:	9a00      	ldr	r2, [sp, #0]
	DRESULT res;
	int result;

	switch (pdrv) {
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <disk_write+0x10>
		return res;

	case DEV_MMC :
		// translate the arguments here
		//result = MMC_disk_write(buff, sector, count);
		result = TM_FATFS_SD_SDIO_disk_write(buff, sector, count);
 80046e8:	f7ff bdb6 	b.w	8004258 <TM_FATFS_SD_SDIO_disk_write>
		res = RES_PARERR;
		return res;
	}

	return RES_PARERR;
}
 80046ec:	2004      	movs	r0, #4
 80046ee:	4770      	bx	lr

080046f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80046f0:	4603      	mov	r3, r0
 80046f2:	4608      	mov	r0, r1
 80046f4:	4611      	mov	r1, r2
	DRESULT res;
	int result;

	switch (pdrv) {
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <disk_ioctl+0xe>
		res = RES_PARERR;
		return res;

	case DEV_MMC :
		// Process of the command for the MMC/SD card
		result = TM_FATFS_SD_SDIO_disk_ioctl(cmd, buff);
 80046fa:	f7ff b853 	b.w	80037a4 <TM_FATFS_SD_SDIO_disk_ioctl>
		res = RES_PARERR;
		return res;
	}

	return RES_PARERR;
}
 80046fe:	2004      	movs	r0, #4
 8004700:	4770      	bx	lr

08004702 <ld_32>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	4770      	bx	lr

08004706 <ld_64>:

#if FF_FS_EXFAT
static QWORD ld_64 (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8004706:	4603      	mov	r3, r0
	rv = rv << 8 | ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	4770      	bx	lr

0800470e <st_32>:
	*ptr++ = (BYTE)val;
}

static void st_32 (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800470e:	0a0b      	lsrs	r3, r1, #8
 8004710:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004712:	7043      	strb	r3, [r0, #1]
 8004714:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004716:	0e09      	lsrs	r1, r1, #24
 8004718:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800471a:	70c1      	strb	r1, [r0, #3]
}
 800471c:	4770      	bx	lr

0800471e <st_64>:

#if FF_FS_EXFAT
static void st_64 (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800471e:	0a11      	lsrs	r1, r2, #8
 8004720:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
 8004722:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004724:	7041      	strb	r1, [r0, #1]
 8004726:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004728:	0e12      	lsrs	r2, r2, #24
 800472a:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800472c:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800472e:	0a1a      	lsrs	r2, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8004730:	7142      	strb	r2, [r0, #5]
 8004732:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004734:	0e1b      	lsrs	r3, r3, #24
 8004736:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 8004738:	71c3      	strb	r3, [r0, #7]
}
 800473a:	4770      	bx	lr

0800473c <dbc_1st>:

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
#if FF_CODE_PAGE == 0		/* Variable code page */
	if (DbcTbl && c >= DbcTbl[0]) {
 800473c:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <dbc_1st+0x2c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	b183      	cbz	r3, 8004764 <dbc_1st+0x28>
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	4282      	cmp	r2, r0
 8004746:	d80d      	bhi.n	8004764 <dbc_1st+0x28>
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 8004748:	785a      	ldrb	r2, [r3, #1]
 800474a:	4282      	cmp	r2, r0
 800474c:	d208      	bcs.n	8004760 <dbc_1st+0x24>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 800474e:	789a      	ldrb	r2, [r3, #2]
 8004750:	4282      	cmp	r2, r0
 8004752:	d807      	bhi.n	8004764 <dbc_1st+0x28>
 8004754:	78db      	ldrb	r3, [r3, #3]
 8004756:	4283      	cmp	r3, r0
 8004758:	bf34      	ite	cc
 800475a:	2000      	movcc	r0, #0
 800475c:	2001      	movcs	r0, #1
 800475e:	4770      	bx	lr
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 8004760:	2001      	movs	r0, #1
 8004762:	4770      	bx	lr
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004764:	2000      	movs	r0, #0
}
 8004766:	4770      	bx	lr
 8004768:	20006738 	.word	0x20006738

0800476c <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800476c:	6983      	ldr	r3, [r0, #24]
	clst -= 2;		/* Cluster number is origin from 2 */
 800476e:	1e8a      	subs	r2, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004770:	3b02      	subs	r3, #2
 8004772:	4293      	cmp	r3, r2
{
 8004774:	b510      	push	{r4, lr}
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004776:	bf85      	ittet	hi
 8004778:	e9d0 3110 	ldrdhi	r3, r1, [r0, #64]	@ 0x40
 800477c:	8944      	ldrhhi	r4, [r0, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800477e:	2000      	movls	r0, #0
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004780:	fbe2 3104 	umlalhi	r3, r1, r2, r4
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004784:	bf94      	ite	ls
 8004786:	4601      	movls	r1, r0
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004788:	4618      	movhi	r0, r3
}
 800478a:	bd10      	pop	{r4, pc}

0800478c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800478c:	4603      	mov	r3, r0
 800478e:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004792:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004794:	01c2      	lsls	r2, r0, #7
 8004796:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 800479a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800479e:	fa50 f282 	uxtab	r2, r0, r2
	} while (--n);
 80047a2:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80047a4:	b2d0      	uxtb	r0, r2
	} while (--n);
 80047a6:	d1f5      	bne.n	8004794 <sum_sfn+0x8>
	return sum;
}
 80047a8:	4770      	bx	lr

080047aa <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80047aa:	b510      	push	{r4, lr}
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 80047ac:	7842      	ldrb	r2, [r0, #1]
{
 80047ae:	4604      	mov	r4, r0
	for (i = sum = 0; i < szblk; i++) {
 80047b0:	2000      	movs	r0, #0
	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 80047b2:	3201      	adds	r2, #1
	for (i = sum = 0; i < szblk; i++) {
 80047b4:	4603      	mov	r3, r0
	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 80047b6:	0152      	lsls	r2, r2, #5
	for (i = sum = 0; i < szblk; i++) {
 80047b8:	2b02      	cmp	r3, #2
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80047ba:	ea4f 31c0 	mov.w	r1, r0, lsl #15
	for (i = sum = 0; i < szblk; i++) {
 80047be:	bf08      	it	eq
 80047c0:	2304      	moveq	r3, #4
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80047c2:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 80047c6:	5ce0      	ldrb	r0, [r4, r3]
	for (i = sum = 0; i < szblk; i++) {
 80047c8:	3301      	adds	r3, #1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80047ca:	fa10 f181 	uxtah	r1, r0, r1
	for (i = sum = 0; i < szblk; i++) {
 80047ce:	429a      	cmp	r2, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80047d0:	b288      	uxth	r0, r1
	for (i = sum = 0; i < szblk; i++) {
 80047d2:	d8f1      	bhi.n	80047b8 <xdir_sum+0xe>
		}
	}
	return sum;
}
 80047d4:	bd10      	pop	{r4, pc}

080047d6 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 80047d6:	6802      	ldr	r2, [r0, #0]
{
 80047d8:	4601      	mov	r1, r0
 80047da:	b510      	push	{r4, lr}
	if (!tp) return -1;		/* Invalid path name? */
 80047dc:	b1aa      	cbz	r2, 800480a <get_ldnumber+0x34>
	tt = tp = *path;
 80047de:	4614      	mov	r4, r2
	do {					/* Find a colon in the path */
		chr = *tt++;
 80047e0:	f814 3b01 	ldrb.w	r3, [r4], #1
	} while (!IsTerminator(chr) && chr != ':');
 80047e4:	2b1f      	cmp	r3, #31
 80047e6:	d90e      	bls.n	8004806 <get_ldnumber+0x30>
 80047e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80047ea:	d1f9      	bne.n	80047e0 <get_ldnumber+0xa>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 80047ec:	7813      	ldrb	r3, [r2, #0]
 80047ee:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80047f2:	b2c3      	uxtb	r3, r0
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d808      	bhi.n	800480a <get_ldnumber+0x34>
 80047f8:	3202      	adds	r2, #2
 80047fa:	4294      	cmp	r4, r2
 80047fc:	d105      	bne.n	800480a <get_ldnumber+0x34>
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 80047fe:	2802      	cmp	r0, #2
 8004800:	dc03      	bgt.n	800480a <get_ldnumber+0x34>
		*path = tt;		/* Snip the drive prefix off */
 8004802:	600c      	str	r4, [r1, #0]
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 8004804:	bd10      	pop	{r4, pc}
	return 0;				/* Default drive is 0 */
 8004806:	2000      	movs	r0, #0
 8004808:	e7fc      	b.n	8004804 <get_ldnumber+0x2e>
	if (!tp) return -1;		/* Invalid path name? */
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	e7f9      	b.n	8004804 <get_ldnumber+0x2e>

08004810 <crc32>:

static DWORD crc32 (	/* Returns next CRC value */
	DWORD crc,			/* Current CRC value */
	BYTE d				/* A byte to be processed */
)
{
 8004810:	b530      	push	{r4, r5, lr}
 8004812:	2208      	movs	r2, #8
	BYTE b;


	for (b = 1; b; b <<= 1) {
 8004814:	2301      	movs	r3, #1
		crc ^= (d & b) ? 1 : 0;
		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
 8004816:	4d09      	ldr	r5, [pc, #36]	@ (800483c <crc32+0x2c>)
		crc ^= (d & b) ? 1 : 0;
 8004818:	ea01 0403 	and.w	r4, r1, r3
	for (b = 1; b; b <<= 1) {
 800481c:	005b      	lsls	r3, r3, #1
		crc ^= (d & b) ? 1 : 0;
 800481e:	2c00      	cmp	r4, #0
 8004820:	bf18      	it	ne
 8004822:	f080 0001 	eorne.w	r0, r0, #1
	for (b = 1; b; b <<= 1) {
 8004826:	3a01      	subs	r2, #1
 8004828:	b2db      	uxtb	r3, r3
		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
 800482a:	f340 0400 	sbfx	r4, r0, #0, #1
 800482e:	ea04 0405 	and.w	r4, r4, r5
 8004832:	ea84 0050 	eor.w	r0, r4, r0, lsr #1
	for (b = 1; b; b <<= 1) {
 8004836:	d1ef      	bne.n	8004818 <crc32+0x8>
	}
	return crc;
}
 8004838:	bd30      	pop	{r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	edb88320 	.word	0xedb88320

08004840 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004844:	4604      	mov	r4, r0
 8004846:	b918      	cbnz	r0, 8004850 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8004848:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800484a:	2300      	movs	r3, #0
 800484c:	602b      	str	r3, [r5, #0]
	return res;
}
 800484e:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004850:	6803      	ldr	r3, [r0, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f8      	beq.n	8004848 <validate+0x8>
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	2a00      	cmp	r2, #0
 800485a:	d0f5      	beq.n	8004848 <validate+0x8>
 800485c:	8881      	ldrh	r1, [r0, #4]
 800485e:	88da      	ldrh	r2, [r3, #6]
 8004860:	4291      	cmp	r1, r2
 8004862:	d1f1      	bne.n	8004848 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8004864:	7858      	ldrb	r0, [r3, #1]
 8004866:	f7ff ff23 	bl	80046b0 <disk_status>
 800486a:	f010 0001 	ands.w	r0, r0, #1
 800486e:	d1eb      	bne.n	8004848 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	e7eb      	b.n	800484c <validate+0xc>

08004874 <sync_window>:
{
 8004874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8004876:	7903      	ldrb	r3, [r0, #4]
{
 8004878:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800487a:	b313      	cbz	r3, 80048c2 <sync_window+0x4e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800487c:	f100 0760 	add.w	r7, r0, #96	@ 0x60
 8004880:	2501      	movs	r5, #1
 8004882:	4639      	mov	r1, r7
 8004884:	9500      	str	r5, [sp, #0]
 8004886:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 800488a:	7840      	ldrb	r0, [r0, #1]
 800488c:	f7ff ff26 	bl	80046dc <disk_write>
 8004890:	b9d0      	cbnz	r0, 80048c8 <sync_window+0x54>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004892:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004894:	69e1      	ldr	r1, [r4, #28]
 8004896:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800489a:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	@ 0x30
 800489e:	1b96      	subs	r6, r2, r6
 80048a0:	eb63 0000 	sbc.w	r0, r3, r0
 80048a4:	428e      	cmp	r6, r1
 80048a6:	f170 0000 	sbcs.w	r0, r0, #0
 80048aa:	d20a      	bcs.n	80048c2 <sync_window+0x4e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80048ac:	78e0      	ldrb	r0, [r4, #3]
 80048ae:	2802      	cmp	r0, #2
 80048b0:	d107      	bne.n	80048c2 <sync_window+0x4e>
 80048b2:	1852      	adds	r2, r2, r1
 80048b4:	9500      	str	r5, [sp, #0]
 80048b6:	4639      	mov	r1, r7
 80048b8:	7860      	ldrb	r0, [r4, #1]
 80048ba:	f143 0300 	adc.w	r3, r3, #0
 80048be:	f7ff ff0d 	bl	80046dc <disk_write>
	FRESULT res = FR_OK;
 80048c2:	2000      	movs	r0, #0
}
 80048c4:	b003      	add	sp, #12
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 80048c8:	4628      	mov	r0, r5
 80048ca:	e7fb      	b.n	80048c4 <sync_window+0x50>

080048cc <xname_sum>:
{
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
	WORD sum = 0;
 80048d0:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 80048d2:	f835 0b02 	ldrh.w	r0, [r5], #2
 80048d6:	b908      	cbnz	r0, 80048dc <xname_sum+0x10>
}
 80048d8:	4620      	mov	r0, r4
 80048da:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 80048dc:	f003 fad6 	bl	8007e8c <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80048e0:	03e3      	lsls	r3, r4, #15
 80048e2:	b2c2      	uxtb	r2, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80048e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80048e8:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
 80048ec:	fa12 f383 	uxtah	r3, r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80048f0:	f3c3 044e 	ubfx	r4, r3, #1, #15
 80048f4:	ea44 34c3 	orr.w	r4, r4, r3, lsl #15
 80048f8:	fa10 f484 	uxtah	r4, r0, r4
 80048fc:	b2a4      	uxth	r4, r4
 80048fe:	e7e8      	b.n	80048d2 <xname_sum+0x6>

08004900 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004900:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004904:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8004906:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004908:	7803      	ldrb	r3, [r0, #0]
 800490a:	2b03      	cmp	r3, #3
		st_16(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800490c:	bf01      	itttt	eq
 800490e:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004910:	750a      	strbeq	r2, [r1, #20]
 8004912:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004914:	754a      	strbeq	r2, [r1, #21]
}
 8004916:	4770      	bx	lr

08004918 <move_window>:
{
 8004918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800491a:	4615      	mov	r5, r2
 800491c:	461e      	mov	r6, r3
 800491e:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8004920:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8004924:	42b3      	cmp	r3, r6
 8004926:	bf08      	it	eq
 8004928:	42aa      	cmpeq	r2, r5
 800492a:	d014      	beq.n	8004956 <move_window+0x3e>
		res = sync_window(fs);		/* Flush the window */
 800492c:	f7ff ffa2 	bl	8004874 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004930:	b978      	cbnz	r0, 8004952 <move_window+0x3a>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8004932:	2701      	movs	r7, #1
 8004934:	462a      	mov	r2, r5
 8004936:	4633      	mov	r3, r6
 8004938:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 800493c:	9700      	str	r7, [sp, #0]
 800493e:	7860      	ldrb	r0, [r4, #1]
 8004940:	f7ff fec2 	bl	80046c8 <disk_read>
 8004944:	b118      	cbz	r0, 800494e <move_window+0x36>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8004946:	f04f 35ff 	mov.w	r5, #4294967295
				res = FR_DISK_ERR;
 800494a:	4638      	mov	r0, r7
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800494c:	462e      	mov	r6, r5
			fs->winsect = sect;
 800494e:	e9c4 5608 	strd	r5, r6, [r4, #32]
}
 8004952:	b003      	add	sp, #12
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 8004956:	2000      	movs	r0, #0
 8004958:	e7fb      	b.n	8004952 <move_window+0x3a>
	...

0800495c <check_fs>:
{
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800495e:	2100      	movs	r1, #0
 8004960:	f04f 36ff 	mov.w	r6, #4294967295
 8004964:	f04f 37ff 	mov.w	r7, #4294967295
{
 8004968:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800496a:	7101      	strb	r1, [r0, #4]
 800496c:	e9c0 6708 	strd	r6, r7, [r0, #32]
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8004970:	f7ff ffd2 	bl	8004918 <move_window>
 8004974:	2800      	cmp	r0, #0
 8004976:	d14b      	bne.n	8004a10 <check_fs+0xb4>
	sign = ld_16(fs->win + BS_55AA);
 8004978:	f8b4 525e 	ldrh.w	r5, [r4, #606]	@ 0x25e
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800497c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004980:	429d      	cmp	r5, r3
 8004982:	d107      	bne.n	8004994 <check_fs+0x38>
 8004984:	220b      	movs	r2, #11
 8004986:	4925      	ldr	r1, [pc, #148]	@ (8004a1c <check_fs+0xc0>)
 8004988:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800498c:	f011 fa46 	bl	8015e1c <memcmp>
 8004990:	2800      	cmp	r0, #0
 8004992:	d03f      	beq.n	8004a14 <check_fs+0xb8>
	b = fs->win[BS_JmpBoot];
 8004994:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8004998:	2beb      	cmp	r3, #235	@ 0xeb
 800499a:	d003      	beq.n	80049a4 <check_fs+0x48>
 800499c:	3318      	adds	r3, #24
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d82e      	bhi.n	8004a02 <check_fs+0xa6>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80049a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80049a8:	429d      	cmp	r5, r3
 80049aa:	d106      	bne.n	80049ba <check_fs+0x5e>
 80049ac:	2208      	movs	r2, #8
 80049ae:	491c      	ldr	r1, [pc, #112]	@ (8004a20 <check_fs+0xc4>)
 80049b0:	f104 00b2 	add.w	r0, r4, #178	@ 0xb2
 80049b4:	f011 fa32 	bl	8015e1c <memcmp>
 80049b8:	b348      	cbz	r0, 8004a0e <check_fs+0xb2>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80049ba:	f8b4 306b 	ldrh.w	r3, [r4, #107]	@ 0x6b
 80049be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049c2:	d11e      	bne.n	8004a02 <check_fs+0xa6>
		b = fs->win[BPB_SecPerClus];
 80049c4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80049c8:	b1db      	cbz	r3, 8004a02 <check_fs+0xa6>
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	421a      	tst	r2, r3
 80049ce:	d118      	bne.n	8004a02 <check_fs+0xa6>
			&& ld_16(fs->win + BPB_RsvdSecCnt) != 0		/* Properness of number of reserved sectors (MNBZ) */
 80049d0:	f8b4 306e 	ldrh.w	r3, [r4, #110]	@ 0x6e
 80049d4:	b1ab      	cbz	r3, 8004a02 <check_fs+0xa6>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 80049d6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80049da:	3b01      	subs	r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d810      	bhi.n	8004a02 <check_fs+0xa6>
			&& ld_16(fs->win + BPB_RootEntCnt) != 0		/* Properness of root dir size (MNBZ) */
 80049e0:	f8b4 3071 	ldrh.w	r3, [r4, #113]	@ 0x71
 80049e4:	b16b      	cbz	r3, 8004a02 <check_fs+0xa6>
			&& (ld_16(fs->win + BPB_TotSec16) >= 128 || ld_32(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 80049e6:	f8b4 3073 	ldrh.w	r3, [r4, #115]	@ 0x73
 80049ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80049ec:	d806      	bhi.n	80049fc <check_fs+0xa0>
 80049ee:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80049f2:	f7ff fe86 	bl	8004702 <ld_32>
 80049f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80049fa:	d302      	bcc.n	8004a02 <check_fs+0xa6>
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 80049fc:	f8b4 3076 	ldrh.w	r3, [r4, #118]	@ 0x76
 8004a00:	b953      	cbnz	r3, 8004a18 <check_fs+0xbc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 8004a02:	f64a 2055 	movw	r0, #43605	@ 0xaa55
 8004a06:	4285      	cmp	r5, r0
 8004a08:	bf14      	ite	ne
 8004a0a:	2003      	movne	r0, #3
 8004a0c:	2002      	moveq	r0, #2
}
 8004a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8004a10:	2004      	movs	r0, #4
 8004a12:	e7fc      	b.n	8004a0e <check_fs+0xb2>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8004a14:	2001      	movs	r0, #1
 8004a16:	e7fa      	b.n	8004a0e <check_fs+0xb2>
			return 0;	/* It is an FAT32 VBR */
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e7f8      	b.n	8004a0e <check_fs+0xb2>
 8004a1c:	08016daa 	.word	0x08016daa
 8004a20:	08016ddd 	.word	0x08016ddd

08004a24 <change_bitmap>:
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8004a24:	3902      	subs	r1, #2
{
 8004a26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	4617      	mov	r7, r2
 8004a2c:	4699      	mov	r9, r3
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004a2e:	0b0d      	lsrs	r5, r1, #12
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004a30:	f001 0407 	and.w	r4, r1, #7
 8004a34:	f04f 0b01 	mov.w	fp, #1
{
 8004a38:	4606      	mov	r6, r0
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8004a3a:	f3c1 0ac8 	ubfx	sl, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004a3e:	fa0b f404 	lsl.w	r4, fp, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004a42:	e9d0 3212 	ldrd	r3, r2, [r0, #72]	@ 0x48
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004a46:	b2e4      	uxtb	r4, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004a48:	18ed      	adds	r5, r5, r3
 8004a4a:	f142 0800 	adc.w	r8, r2, #0
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004a4e:	462a      	mov	r2, r5
 8004a50:	3501      	adds	r5, #1
 8004a52:	4643      	mov	r3, r8
 8004a54:	4630      	mov	r0, r6
 8004a56:	f148 0800 	adc.w	r8, r8, #0
 8004a5a:	f7ff ff5d 	bl	8004918 <move_window>
 8004a5e:	b118      	cbz	r0, 8004a68 <change_bitmap+0x44>
 8004a60:	2001      	movs	r0, #1
}
 8004a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} while (++i < SS(fs));		/* Next byte */
 8004a66:	469a      	mov	sl, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004a68:	eb06 020a 	add.w	r2, r6, sl
 8004a6c:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8004a70:	4223      	tst	r3, r4
 8004a72:	bf14      	ite	ne
 8004a74:	2101      	movne	r1, #1
 8004a76:	2100      	moveq	r1, #0
 8004a78:	4549      	cmp	r1, r9
 8004a7a:	d013      	beq.n	8004aa4 <change_bitmap+0x80>
				fs->win[i] ^= bm;	/* Flip the bit */
 8004a7c:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8004a7e:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8004a80:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
				fs->wflag = 1;
 8004a84:	f886 b004 	strb.w	fp, [r6, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8004a88:	d0eb      	beq.n	8004a62 <change_bitmap+0x3e>
			} while (bm <<= 1);		/* Next bit */
 8004a8a:	0064      	lsls	r4, r4, #1
 8004a8c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8004a90:	d1ea      	bne.n	8004a68 <change_bitmap+0x44>
		} while (++i < SS(fs));		/* Next byte */
 8004a92:	f10a 0301 	add.w	r3, sl, #1
			bm = 1;
 8004a96:	2401      	movs	r4, #1
		i = 0;
 8004a98:	f04f 0a00 	mov.w	sl, #0
		} while (++i < SS(fs));		/* Next byte */
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa0:	d3e1      	bcc.n	8004a66 <change_bitmap+0x42>
 8004aa2:	e7d4      	b.n	8004a4e <change_bitmap+0x2a>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	e7dc      	b.n	8004a62 <change_bitmap+0x3e>

08004aa8 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004aa8:	2901      	cmp	r1, #1
{
 8004aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aac:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004aae:	f240 809e 	bls.w	8004bee <get_fat+0x146>
	FATFS *fs = obj->fs;
 8004ab2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004ab4:	69ab      	ldr	r3, [r5, #24]
 8004ab6:	428b      	cmp	r3, r1
 8004ab8:	f240 8099 	bls.w	8004bee <get_fat+0x146>
		switch (fs->fs_type) {
 8004abc:	782b      	ldrb	r3, [r5, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	f200 8094 	bhi.w	8004bee <get_fat+0x146>
 8004ac6:	e8df f003 	tbb	[pc, r3]
 8004aca:	2f02      	.short	0x2f02
 8004acc:	5741      	.short	0x5741
			bc = (UINT)clst; bc += bc / 2;
 8004ace:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004ad8:	0a72      	lsrs	r2, r6, #9
 8004ada:	1852      	adds	r2, r2, r1
 8004adc:	f143 0300 	adc.w	r3, r3, #0
 8004ae0:	f7ff ff1a 	bl	8004918 <move_window>
 8004ae4:	b110      	cbz	r0, 8004aec <get_fat+0x44>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004ae6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004aec:	1c77      	adds	r7, r6, #1
 8004aee:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004af2:	4628      	mov	r0, r5
 8004af4:	0a7a      	lsrs	r2, r7, #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004af6:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004af8:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004afc:	f896 6060 	ldrb.w	r6, [r6, #96]	@ 0x60
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b00:	1852      	adds	r2, r2, r1
 8004b02:	f143 0300 	adc.w	r3, r3, #0
 8004b06:	f7ff ff07 	bl	8004918 <move_window>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d1eb      	bne.n	8004ae6 <get_fat+0x3e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8004b0e:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004b12:	442f      	add	r7, r5
 8004b14:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8004b18:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8004b1c:	07e3      	lsls	r3, r4, #31
 8004b1e:	bf4c      	ite	mi
 8004b20:	0900      	lsrmi	r0, r0, #4
 8004b22:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004b26:	e7e0      	b.n	8004aea <get_fat+0x42>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b28:	0a0a      	lsrs	r2, r1, #8
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004b30:	1852      	adds	r2, r2, r1
 8004b32:	f143 0300 	adc.w	r3, r3, #0
 8004b36:	f7ff feef 	bl	8004918 <move_window>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1d3      	bne.n	8004ae6 <get_fat+0x3e>
			val = ld_16(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004b3e:	0064      	lsls	r4, r4, #1
 8004b40:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8004b44:	442c      	add	r4, r5
 8004b46:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
			break;
 8004b4a:	e7ce      	b.n	8004aea <get_fat+0x42>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b4c:	09ca      	lsrs	r2, r1, #7
 8004b4e:	4628      	mov	r0, r5
 8004b50:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004b54:	1852      	adds	r2, r2, r1
 8004b56:	f143 0300 	adc.w	r3, r3, #0
 8004b5a:	f7ff fedd 	bl	8004918 <move_window>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d1c1      	bne.n	8004ae6 <get_fat+0x3e>
			val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004b62:	00a4      	lsls	r4, r4, #2
 8004b64:	f105 0060 	add.w	r0, r5, #96	@ 0x60
 8004b68:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8004b6c:	4420      	add	r0, r4
 8004b6e:	f7ff fdc8 	bl	8004702 <ld_32>
 8004b72:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8004b76:	e7b8      	b.n	8004aea <get_fat+0x42>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8004b78:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 8004b7c:	79c7      	ldrb	r7, [r0, #7]
 8004b7e:	ea53 0201 	orrs.w	r2, r3, r1
 8004b82:	d001      	beq.n	8004b88 <get_fat+0xe0>
 8004b84:	6882      	ldr	r2, [r0, #8]
 8004b86:	b902      	cbnz	r2, 8004b8a <get_fat+0xe2>
 8004b88:	bb8f      	cbnz	r7, 8004bee <get_fat+0x146>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004b8a:	6886      	ldr	r6, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004b8c:	2f02      	cmp	r7, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8004b8e:	896a      	ldrh	r2, [r5, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004b90:	eba4 0606 	sub.w	r6, r4, r6
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004b94:	d10f      	bne.n	8004bb6 <get_fat+0x10e>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8004b96:	1e58      	subs	r0, r3, #1
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	f141 31ff 	adc.w	r1, r1, #4294967295
 8004ba0:	0a40      	lsrs	r0, r0, #9
 8004ba2:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 8004ba6:	0a49      	lsrs	r1, r1, #9
 8004ba8:	f7fb fba2 	bl	80002f0 <__aeabi_uldivmod>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004bac:	4286      	cmp	r6, r0
 8004bae:	d81e      	bhi.n	8004bee <get_fat+0x146>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8004bb0:	d01f      	beq.n	8004bf2 <get_fat+0x14a>
 8004bb2:	1c60      	adds	r0, r4, #1
 8004bb4:	e799      	b.n	8004aea <get_fat+0x42>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004bb6:	2f03      	cmp	r7, #3
 8004bb8:	d102      	bne.n	8004bc0 <get_fat+0x118>
 8004bba:	6983      	ldr	r3, [r0, #24]
 8004bbc:	42b3      	cmp	r3, r6
 8004bbe:	d8f8      	bhi.n	8004bb2 <get_fat+0x10a>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004bc0:	69c3      	ldr	r3, [r0, #28]
 8004bc2:	b9b3      	cbnz	r3, 8004bf2 <get_fat+0x14a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bc4:	09e2      	lsrs	r2, r4, #7
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004bcc:	1852      	adds	r2, r2, r1
 8004bce:	f143 0300 	adc.w	r3, r3, #0
 8004bd2:	f7ff fea1 	bl	8004918 <move_window>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d185      	bne.n	8004ae6 <get_fat+0x3e>
						val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004bda:	00a0      	lsls	r0, r4, #2
 8004bdc:	3560      	adds	r5, #96	@ 0x60
 8004bde:	f400 70fe 	and.w	r0, r0, #508	@ 0x1fc
 8004be2:	4428      	add	r0, r5
 8004be4:	f7ff fd8d 	bl	8004702 <ld_32>
 8004be8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004bec:	e77d      	b.n	8004aea <get_fat+0x42>
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e77b      	b.n	8004aea <get_fat+0x42>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8004bf2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
	return val;
 8004bf6:	e778      	b.n	8004aea <get_fat+0x42>

08004bf8 <dir_sdi>:
{
 8004bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8004bfc:	6805      	ldr	r5, [r0, #0]
{
 8004bfe:	4604      	mov	r4, r0
 8004c00:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c02:	782b      	ldrb	r3, [r5, #0]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	bf14      	ite	ne
 8004c08:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 8004c0c:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d802      	bhi.n	8004c1a <dir_sdi+0x22>
		return FR_INT_ERR;
 8004c14:	2002      	movs	r0, #2
}
 8004c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c1a:	06ca      	lsls	r2, r1, #27
 8004c1c:	d1fa      	bne.n	8004c14 <dir_sdi+0x1c>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004c1e:	6887      	ldr	r7, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 8004c20:	6301      	str	r1, [r0, #48]	@ 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004c22:	bb5f      	cbnz	r7, 8004c7c <dir_sdi+0x84>
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d819      	bhi.n	8004c5c <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8004c28:	892b      	ldrh	r3, [r5, #8]
 8004c2a:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8004c2e:	d9f1      	bls.n	8004c14 <dir_sdi+0x1c>
		dp->sect = fs->dirbase;
 8004c30:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
	if (dp->sect == 0) return FR_INT_ERR;
 8004c34:	ea50 0301 	orrs.w	r3, r0, r1
	dp->clust = clst;					/* Current cluster# */
 8004c38:	6367      	str	r7, [r4, #52]	@ 0x34
		dp->sect = fs->dirbase;
 8004c3a:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
	if (dp->sect == 0) return FR_INT_ERR;
 8004c3e:	d0e9      	beq.n	8004c14 <dir_sdi+0x1c>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c40:	0a73      	lsrs	r3, r6, #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c42:	3560      	adds	r5, #96	@ 0x60
 8004c44:	f3c6 0608 	ubfx	r6, r6, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c48:	181b      	adds	r3, r3, r0
	return FR_OK;
 8004c4a:	f04f 0000 	mov.w	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c4e:	4435      	add	r5, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c50:	f141 0100 	adc.w	r1, r1, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c54:	6425      	str	r5, [r4, #64]	@ 0x40
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c56:	e9c4 310e 	strd	r3, r1, [r4, #56]	@ 0x38
	return FR_OK;
 8004c5a:	e7dc      	b.n	8004c16 <dir_sdi+0x1e>
		clst = (DWORD)fs->dirbase;
 8004c5c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004c5e:	71c7      	strb	r7, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0e1      	beq.n	8004c28 <dir_sdi+0x30>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004c64:	f8b5 800a 	ldrh.w	r8, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c68:	461f      	mov	r7, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004c6a:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c6e:	4546      	cmp	r6, r8
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004c70:	4639      	mov	r1, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c72:	d205      	bcs.n	8004c80 <dir_sdi+0x88>
		dp->sect = clst2sect(fs, clst);
 8004c74:	4628      	mov	r0, r5
 8004c76:	f7ff fd79 	bl	800476c <clst2sect>
 8004c7a:	e7db      	b.n	8004c34 <dir_sdi+0x3c>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	e7f1      	b.n	8004c64 <dir_sdi+0x6c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff ff11 	bl	8004aa8 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c86:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004c88:	4607      	mov	r7, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c8a:	d007      	beq.n	8004c9c <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004c8c:	2801      	cmp	r0, #1
 8004c8e:	d9c1      	bls.n	8004c14 <dir_sdi+0x1c>
 8004c90:	69ab      	ldr	r3, [r5, #24]
 8004c92:	4283      	cmp	r3, r0
 8004c94:	d9be      	bls.n	8004c14 <dir_sdi+0x1c>
			ofs -= csz;
 8004c96:	eba6 0608 	sub.w	r6, r6, r8
 8004c9a:	e7e8      	b.n	8004c6e <dir_sdi+0x76>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	e7ba      	b.n	8004c16 <dir_sdi+0x1e>

08004ca0 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004ca0:	2901      	cmp	r1, #1
{
 8004ca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4616      	mov	r6, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004cac:	d908      	bls.n	8004cc0 <put_fat+0x20>
 8004cae:	6983      	ldr	r3, [r0, #24]
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d905      	bls.n	8004cc0 <put_fat+0x20>
		switch (fs->fs_type) {
 8004cb4:	7803      	ldrb	r3, [r0, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d067      	beq.n	8004d8a <put_fat+0xea>
 8004cba:	d803      	bhi.n	8004cc4 <put_fat+0x24>
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d023      	beq.n	8004d08 <put_fat+0x68>
	FRESULT res = FR_INT_ERR;
 8004cc0:	2002      	movs	r0, #2
 8004cc2:	e077      	b.n	8004db4 <put_fat+0x114>
		switch (fs->fs_type) {
 8004cc4:	3b03      	subs	r3, #3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d8fa      	bhi.n	8004cc0 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004cca:	09ca      	lsrs	r2, r1, #7
 8004ccc:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	@ 0x30
 8004cd0:	1852      	adds	r2, r2, r1
 8004cd2:	f143 0300 	adc.w	r3, r3, #0
 8004cd6:	f7ff fe1f 	bl	8004918 <move_window>
			if (res != FR_OK) break;
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d16a      	bne.n	8004db4 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004cde:	462b      	mov	r3, r5
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ce0:	00a4      	lsls	r4, r4, #2
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004ce2:	f813 2b60 	ldrb.w	r2, [r3], #96
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ce6:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004cea:	2a04      	cmp	r2, #4
 8004cec:	d007      	beq.n	8004cfe <put_fat+0x5e>
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004cee:	1918      	adds	r0, r3, r4
 8004cf0:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
 8004cf4:	f7ff fd05 	bl	8004702 <ld_32>
 8004cf8:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8004cfc:	4306      	orrs	r6, r0
			st_32(fs->win + clst * 4 % SS(fs), val);
 8004cfe:	4631      	mov	r1, r6
 8004d00:	1918      	adds	r0, r3, r4
 8004d02:	f7ff fd04 	bl	800470e <st_32>
 8004d06:	e034      	b.n	8004d72 <put_fat+0xd2>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8004d08:	eb01 0951 	add.w	r9, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d0c:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	@ 0x30
 8004d10:	ea4f 2259 	mov.w	r2, r9, lsr #9
 8004d14:	1852      	adds	r2, r2, r1
 8004d16:	f143 0300 	adc.w	r3, r3, #0
 8004d1a:	f7ff fdfd 	bl	8004918 <move_window>
			if (res != FR_OK) break;
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d148      	bne.n	8004db4 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004d22:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8004d26:	f105 0860 	add.w	r8, r5, #96	@ 0x60
 8004d2a:	f109 0701 	add.w	r7, r9, #1
 8004d2e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004d32:	b2f3      	uxtb	r3, r6
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d34:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004d36:	bf1e      	ittt	ne
 8004d38:	f818 2009 	ldrbne.w	r2, [r8, r9]
 8004d3c:	f002 020f 	andne.w	r2, r2, #15
 8004d40:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d44:	ea4f 2257 	mov.w	r2, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004d48:	bf18      	it	ne
 8004d4a:	b2db      	uxtbne	r3, r3
 8004d4c:	f808 3009 	strb.w	r3, [r8, r9]
			fs->wflag = 1;
 8004d50:	2301      	movs	r3, #1
 8004d52:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d54:	e9d5 130c 	ldrd	r1, r3, [r5, #48]	@ 0x30
 8004d58:	1852      	adds	r2, r2, r1
 8004d5a:	f143 0300 	adc.w	r3, r3, #0
 8004d5e:	f7ff fddb 	bl	8004918 <move_window>
			if (res != FR_OK) break;
 8004d62:	bb38      	cbnz	r0, 8004db4 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
 8004d64:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004d68:	b13c      	cbz	r4, 8004d7a <put_fat+0xda>
 8004d6a:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8004d6e:	f808 6007 	strb.w	r6, [r8, r7]
			fs->wflag = 1;
 8004d72:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d74:	2000      	movs	r0, #0
			fs->wflag = 1;
 8004d76:	712b      	strb	r3, [r5, #4]
			break;
 8004d78:	e01c      	b.n	8004db4 <put_fat+0x114>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004d7a:	f818 3007 	ldrb.w	r3, [r8, r7]
 8004d7e:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8004d82:	f023 030f 	bic.w	r3, r3, #15
 8004d86:	431e      	orrs	r6, r3
 8004d88:	e7f1      	b.n	8004d6e <put_fat+0xce>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d8a:	0a0a      	lsrs	r2, r1, #8
 8004d8c:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	@ 0x30
 8004d90:	1852      	adds	r2, r2, r1
 8004d92:	f143 0300 	adc.w	r3, r3, #0
 8004d96:	f7ff fdbf 	bl	8004918 <move_window>
			if (res != FR_OK) break;
 8004d9a:	b958      	cbnz	r0, 8004db4 <put_fat+0x114>
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004d9c:	0064      	lsls	r4, r4, #1
 8004d9e:	f105 0360 	add.w	r3, r5, #96	@ 0x60
 8004da2:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8004da6:	551e      	strb	r6, [r3, r4]
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004da8:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004daa:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 8004dae:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8004db0:	7056      	strb	r6, [r2, #1]
			fs->wflag = 1;
 8004db2:	712b      	strb	r3, [r5, #4]
}
 8004db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004db8 <fill_last_frag>:
{
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8004dc0:	69e3      	ldr	r3, [r4, #28]
 8004dc2:	b90b      	cbnz	r3, 8004dc8 <fill_last_frag+0x10>
	return FR_OK;
 8004dc4:	4618      	mov	r0, r3
}
 8004dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	eba6 0503 	sub.w	r5, r6, r3
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	bf14      	ite	ne
 8004dd2:	1caa      	addne	r2, r5, #2
 8004dd4:	463a      	moveq	r2, r7
 8004dd6:	1c69      	adds	r1, r5, #1
 8004dd8:	f7ff ff62 	bl	8004ca0 <put_fat>
		if (res != FR_OK) return res;
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d1f2      	bne.n	8004dc6 <fill_last_frag+0xe>
		obj->n_frag--;
 8004de0:	69e3      	ldr	r3, [r4, #28]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	61e3      	str	r3, [r4, #28]
 8004de6:	e7eb      	b.n	8004dc0 <fill_last_frag+0x8>

08004de8 <fill_first_frag>:
{
 8004de8:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8004dea:	79c3      	ldrb	r3, [r0, #7]
{
 8004dec:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d001      	beq.n	8004df6 <fill_first_frag+0xe>
	return FR_OK;
 8004df2:	2000      	movs	r0, #0
}
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004df6:	6881      	ldr	r1, [r0, #8]
 8004df8:	6983      	ldr	r3, [r0, #24]
 8004dfa:	18cd      	adds	r5, r1, r3
 8004dfc:	42a9      	cmp	r1, r5
 8004dfe:	d102      	bne.n	8004e06 <fill_first_frag+0x1e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8004e00:	2300      	movs	r3, #0
 8004e02:	71e3      	strb	r3, [r4, #7]
 8004e04:	e7f5      	b.n	8004df2 <fill_first_frag+0xa>
			res = put_fat(obj->fs, cl, cl + 1);
 8004e06:	1c4e      	adds	r6, r1, #1
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	f7ff ff48 	bl	8004ca0 <put_fat>
			if (res != FR_OK) return res;
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1ef      	bne.n	8004df4 <fill_first_frag+0xc>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004e14:	4631      	mov	r1, r6
 8004e16:	e7f1      	b.n	8004dfc <fill_first_frag+0x14>

08004e18 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e18:	2901      	cmp	r1, #1
{
 8004e1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e1e:	4606      	mov	r6, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	4617      	mov	r7, r2
	FATFS *fs = obj->fs;
 8004e24:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e26:	d802      	bhi.n	8004e2e <remove_chain+0x16>
 8004e28:	2002      	movs	r0, #2
}
 8004e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e2e:	69ab      	ldr	r3, [r5, #24]
 8004e30:	428b      	cmp	r3, r1
 8004e32:	d9f9      	bls.n	8004e28 <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e34:	b97a      	cbnz	r2, 8004e56 <remove_chain+0x3e>
{
 8004e36:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	46a0      	mov	r8, r4
 8004e3e:	f7ff fe33 	bl	8004aa8 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8004e42:	4604      	mov	r4, r0
 8004e44:	b9b0      	cbnz	r0, 8004e74 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
 8004e46:	782b      	ldrb	r3, [r5, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d102      	bne.n	8004e52 <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8004e4c:	2f00      	cmp	r7, #0
 8004e4e:	d144      	bne.n	8004eda <remove_chain+0xc2>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8004e50:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
 8004e52:	2000      	movs	r0, #0
 8004e54:	e7e9      	b.n	8004e2a <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e56:	782b      	ldrb	r3, [r5, #0]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d102      	bne.n	8004e62 <remove_chain+0x4a>
 8004e5c:	79c3      	ldrb	r3, [r0, #7]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d0e9      	beq.n	8004e36 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295
 8004e66:	4639      	mov	r1, r7
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f7ff ff19 	bl	8004ca0 <put_fat>
		if (res != FR_OK) return res;
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d0e1      	beq.n	8004e36 <remove_chain+0x1e>
 8004e72:	e7da      	b.n	8004e2a <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e74:	2801      	cmp	r0, #1
 8004e76:	d0d7      	beq.n	8004e28 <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e78:	1c42      	adds	r2, r0, #1
 8004e7a:	d101      	bne.n	8004e80 <remove_chain+0x68>
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	e7d4      	b.n	8004e2a <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004e80:	782b      	ldrb	r3, [r5, #0]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d110      	bne.n	8004ea8 <remove_chain+0x90>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8004e86:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004e8a:	3a02      	subs	r2, #2
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d313      	bcc.n	8004eb8 <remove_chain+0xa0>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8004e90:	f108 0201 	add.w	r2, r8, #1
 8004e94:	42a2      	cmp	r2, r4
 8004e96:	d003      	beq.n	8004ea0 <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
 8004e98:	782b      	ldrb	r3, [r5, #0]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d013      	beq.n	8004ec6 <remove_chain+0xae>
			scl = ecl = nxt;
 8004e9e:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8004ea0:	69ab      	ldr	r3, [r5, #24]
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	d8c8      	bhi.n	8004e38 <remove_chain+0x20>
 8004ea6:	e7ce      	b.n	8004e46 <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4641      	mov	r1, r8
 8004eac:	4628      	mov	r0, r5
 8004eae:	f7ff fef7 	bl	8004ca0 <put_fat>
			if (res != FR_OK) return res;
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d0e7      	beq.n	8004e86 <remove_chain+0x6e>
 8004eb6:	e7b8      	b.n	8004e2a <remove_chain+0x12>
			fs->free_clst++;
 8004eb8:	3301      	adds	r3, #1
 8004eba:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8004ebc:	796b      	ldrb	r3, [r5, #5]
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	716b      	strb	r3, [r5, #5]
 8004ec4:	e7e4      	b.n	8004e90 <remove_chain+0x78>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	eba2 0209 	sub.w	r2, r2, r9
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f7ff fda8 	bl	8004a24 <change_bitmap>
				if (res != FR_OK) return res;
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d0e2      	beq.n	8004e9e <remove_chain+0x86>
 8004ed8:	e7a7      	b.n	8004e2a <remove_chain+0x12>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8004eda:	79f3      	ldrb	r3, [r6, #7]
 8004edc:	b98b      	cbnz	r3, 8004f02 <remove_chain+0xea>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8004ede:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
 8004ee0:	42bc      	cmp	r4, r7
 8004ee2:	d102      	bne.n	8004eea <remove_chain+0xd2>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	71f3      	strb	r3, [r6, #7]
 8004ee8:	e7b3      	b.n	8004e52 <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
 8004eea:	4621      	mov	r1, r4
 8004eec:	4630      	mov	r0, r6
 8004eee:	f7ff fddb 	bl	8004aa8 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 8004ef2:	2801      	cmp	r0, #1
 8004ef4:	d998      	bls.n	8004e28 <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d0c0      	beq.n	8004e7c <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8004efa:	3401      	adds	r4, #1
 8004efc:	4284      	cmp	r4, r0
 8004efe:	d0ef      	beq.n	8004ee0 <remove_chain+0xc8>
 8004f00:	e7a7      	b.n	8004e52 <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d1a5      	bne.n	8004e52 <remove_chain+0x3a>
 8004f06:	68b3      	ldr	r3, [r6, #8]
 8004f08:	42bb      	cmp	r3, r7
 8004f0a:	d8a2      	bhi.n	8004e52 <remove_chain+0x3a>
 8004f0c:	69b2      	ldr	r2, [r6, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	42bb      	cmp	r3, r7
 8004f12:	d2e7      	bcs.n	8004ee4 <remove_chain+0xcc>
 8004f14:	e79d      	b.n	8004e52 <remove_chain+0x3a>

08004f16 <dir_clear>:
{
 8004f16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f1a:	4607      	mov	r7, r0
 8004f1c:	460d      	mov	r5, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f1e:	f7ff fca9 	bl	8004874 <sync_window>
 8004f22:	4604      	mov	r4, r0
 8004f24:	bb50      	cbnz	r0, 8004f7c <dir_clear+0x66>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004f26:	f107 0860 	add.w	r8, r7, #96	@ 0x60
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4638      	mov	r0, r7
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004f2e:	f04f 0901 	mov.w	r9, #1
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004f32:	f7ff fc1b 	bl	800476c <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	460e      	mov	r6, r1
	fs->winsect = sect;				/* Set window to top of the cluster */
 8004f3e:	e9c7 0108 	strd	r0, r1, [r7, #32]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004f42:	4621      	mov	r1, r4
 8004f44:	4640      	mov	r0, r8
 8004f46:	f010 ff93 	bl	8015e70 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	d306      	bcc.n	8004f5e <dir_clear+0x48>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004f50:	8978      	ldrh	r0, [r7, #10]
 8004f52:	1b00      	subs	r0, r0, r4
 8004f54:	bf18      	it	ne
 8004f56:	2001      	movne	r0, #1
}
 8004f58:	b003      	add	sp, #12
 8004f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004f5e:	462a      	mov	r2, r5
 8004f60:	4633      	mov	r3, r6
 8004f62:	f8cd 9000 	str.w	r9, [sp]
 8004f66:	4641      	mov	r1, r8
 8004f68:	7878      	ldrb	r0, [r7, #1]
 8004f6a:	f7ff fbb7 	bl	80046dc <disk_write>
 8004f6e:	3501      	adds	r5, #1
 8004f70:	f146 0600 	adc.w	r6, r6, #0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1eb      	bne.n	8004f50 <dir_clear+0x3a>
 8004f78:	3401      	adds	r4, #1
 8004f7a:	e7e6      	b.n	8004f4a <dir_clear+0x34>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e7eb      	b.n	8004f58 <dir_clear+0x42>

08004f80 <sync_fs>:
{
 8004f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f82:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004f84:	f7ff fc76 	bl	8004874 <sync_window>
 8004f88:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d14a      	bne.n	8005024 <sync_fs+0xa4>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 8004f8e:	7967      	ldrb	r7, [r4, #5]
 8004f90:	2f01      	cmp	r7, #1
 8004f92:	d13f      	bne.n	8005014 <sync_fs+0x94>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8004f94:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 8004f96:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d145      	bne.n	8005028 <sync_fs+0xa8>
				memset(fs->win, 0, sizeof fs->win);
 8004f9c:	f104 0660 	add.w	r6, r4, #96	@ 0x60
 8004fa0:	4601      	mov	r1, r0
 8004fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f010 ff62 	bl	8015e70 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8004fac:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8004fae:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004fb0:	2172      	movs	r1, #114	@ 0x72
 8004fb2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004fb6:	f504 7012 	add.w	r0, r4, #584	@ 0x248
	*ptr++ = (BYTE)val; val >>= 8;
 8004fba:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004fbe:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8004fc0:	f884 2063 	strb.w	r2, [r4, #99]	@ 0x63
	*ptr++ = (BYTE)val; val >>= 8;
 8004fc4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
	*ptr++ = (BYTE)val;
 8004fc8:	f884 3247 	strb.w	r3, [r4, #583]	@ 0x247
	*ptr++ = (BYTE)val; val >>= 8;
 8004fcc:	f884 1244 	strb.w	r1, [r4, #580]	@ 0x244
	*ptr++ = (BYTE)val; val >>= 8;
 8004fd0:	f884 1245 	strb.w	r1, [r4, #581]	@ 0x245
	*ptr++ = (BYTE)val; val >>= 8;
 8004fd4:	f884 2246 	strb.w	r2, [r4, #582]	@ 0x246
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004fd8:	6961      	ldr	r1, [r4, #20]
 8004fda:	f7ff fb98 	bl	800470e <st_32>
				st_32(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8004fde:	6921      	ldr	r1, [r4, #16]
 8004fe0:	f504 7013 	add.w	r0, r4, #588	@ 0x24c
 8004fe4:	f7ff fb93 	bl	800470e <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8004fe8:	2355      	movs	r3, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 8004fea:	f884 525c 	strb.w	r5, [r4, #604]	@ 0x25c
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8004fee:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8004ff0:	f884 325e 	strb.w	r3, [r4, #606]	@ 0x25e
	*ptr++ = (BYTE)val;
 8004ff4:	23aa      	movs	r3, #170	@ 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 8004ff6:	f884 525d 	strb.w	r5, [r4, #605]	@ 0x25d
	*ptr++ = (BYTE)val;
 8004ffa:	f884 325f 	strb.w	r3, [r4, #607]	@ 0x25f
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8004ffe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8005002:	3201      	adds	r2, #1
 8005004:	f143 0300 	adc.w	r3, r3, #0
 8005008:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800500c:	9700      	str	r7, [sp, #0]
 800500e:	7860      	ldrb	r0, [r4, #1]
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8005010:	f7ff fb64 	bl	80046dc <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005014:	2200      	movs	r2, #0
 8005016:	7860      	ldrb	r0, [r4, #1]
 8005018:	4611      	mov	r1, r2
 800501a:	f7ff fb69 	bl	80046f0 <disk_ioctl>
 800501e:	3800      	subs	r0, #0
 8005020:	bf18      	it	ne
 8005022:	2001      	movne	r0, #1
}
 8005024:	b003      	add	sp, #12
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8005028:	2b04      	cmp	r3, #4
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 800502a:	7860      	ldrb	r0, [r4, #1]
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 800502c:	d1f2      	bne.n	8005014 <sync_fs+0x94>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 800502e:	f104 0560 	add.w	r5, r4, #96	@ 0x60
 8005032:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8005036:	4629      	mov	r1, r5
 8005038:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800503c:	9700      	str	r7, [sp, #0]
 800503e:	f7ff fb43 	bl	80046c8 <disk_read>
 8005042:	4603      	mov	r3, r0
 8005044:	2800      	cmp	r0, #0
 8005046:	d1e5      	bne.n	8005014 <sync_fs+0x94>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 8005048:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800504c:	3a02      	subs	r2, #2
 800504e:	4291      	cmp	r1, r2
 8005050:	d813      	bhi.n	800507a <sync_fs+0xfa>
 8005052:	1a51      	subs	r1, r2, r1
 8005054:	2064      	movs	r0, #100	@ 0x64
 8005056:	fba1 0100 	umull	r0, r1, r1, r0
 800505a:	f7fb f949 	bl	80002f0 <__aeabi_uldivmod>
 800505e:	b2c3      	uxtb	r3, r0
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8005060:	f894 20d0 	ldrb.w	r2, [r4, #208]	@ 0xd0
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8005064:	7860      	ldrb	r0, [r4, #1]
					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8005066:	429a      	cmp	r2, r3
 8005068:	d0d4      	beq.n	8005014 <sync_fs+0x94>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 800506a:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800506e:	2301      	movs	r3, #1
 8005070:	4629      	mov	r1, r5
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8005078:	e7ca      	b.n	8005010 <sync_fs+0x90>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 800507a:	23ff      	movs	r3, #255	@ 0xff
 800507c:	e7f0      	b.n	8005060 <sync_fs+0xe0>
	...

08005080 <mount_volume>:
	*rfs = 0;
 8005080:	2300      	movs	r3, #0
{
 8005082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	b085      	sub	sp, #20
	*rfs = 0;
 8005088:	600b      	str	r3, [r1, #0]
{
 800508a:	460e      	mov	r6, r1
 800508c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800508e:	f7ff fba2 	bl	80047d6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005092:	2800      	cmp	r0, #0
 8005094:	f2c0 8262 	blt.w	800555c <mount_volume+0x4dc>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005098:	4bbd      	ldr	r3, [pc, #756]	@ (8005390 <mount_volume+0x310>)
 800509a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800509e:	2c00      	cmp	r4, #0
 80050a0:	f000 825e 	beq.w	8005560 <mount_volume+0x4e0>
	*rfs = fs;							/* Return pointer to the filesystem object */
 80050a4:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80050a6:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80050aa:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 80050ac:	7860      	ldrb	r0, [r4, #1]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80050ae:	b16b      	cbz	r3, 80050cc <mount_volume+0x4c>
		stat = disk_status(fs->pdrv);
 80050b0:	f7ff fafe 	bl	80046b0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80050b4:	07c3      	lsls	r3, r0, #31
 80050b6:	d409      	bmi.n	80050cc <mount_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	f000 8180 	beq.w	80053be <mount_volume+0x33e>
 80050be:	0747      	lsls	r7, r0, #29
 80050c0:	f140 817d 	bpl.w	80053be <mount_volume+0x33e>
				return FR_WRITE_PROTECTED;
 80050c4:	200a      	movs	r0, #10
}
 80050c6:	b005      	add	sp, #20
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80050cc:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80050ce:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80050d0:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80050d2:	f7ff faf3 	bl	80046bc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80050d6:	07c6      	lsls	r6, r0, #31
 80050d8:	f100 8244 	bmi.w	8005564 <mount_volume+0x4e4>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80050dc:	b10d      	cbz	r5, 80050e2 <mount_volume+0x62>
 80050de:	0741      	lsls	r1, r0, #29
 80050e0:	d4f0      	bmi.n	80050c4 <mount_volume+0x44>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80050e2:	2200      	movs	r2, #0
 80050e4:	2300      	movs	r3, #0
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7ff fc38 	bl	800495c <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80050ec:	2802      	cmp	r0, #2
 80050ee:	f040 8118 	bne.w	8005322 <mount_volume+0x2a2>
	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
 80050f2:	f894 3222 	ldrb.w	r3, [r4, #546]	@ 0x222
 80050f6:	2bee      	cmp	r3, #238	@ 0xee
 80050f8:	f040 80f0 	bne.w	80052dc <mount_volume+0x25c>
		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
 80050fc:	2201      	movs	r2, #1
 80050fe:	2300      	movs	r3, #0
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fc09 	bl	8004918 <move_window>
 8005106:	2800      	cmp	r0, #0
 8005108:	f040 8107 	bne.w	800531a <mount_volume+0x29a>
		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
 800510c:	f104 0760 	add.w	r7, r4, #96	@ 0x60
	if (memcmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1", 12)) return 0;	/* Check signature and version (1.0) */
 8005110:	220c      	movs	r2, #12
 8005112:	49a0      	ldr	r1, [pc, #640]	@ (8005394 <mount_volume+0x314>)
 8005114:	4638      	mov	r0, r7
 8005116:	f010 fe81 	bl	8015e1c <memcmp>
 800511a:	4605      	mov	r5, r0
 800511c:	bbc8      	cbnz	r0, 8005192 <mount_volume+0x112>
	hlen = ld_32(gpth + GPTH_Size);							/* Check header size */
 800511e:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8005122:	f7ff faee 	bl	8004702 <ld_32>
	if (hlen < 92 || hlen > FF_MIN_SS) return 0;
 8005126:	f1a0 035c 	sub.w	r3, r0, #92	@ 0x5c
	hlen = ld_32(gpth + GPTH_Size);							/* Check header size */
 800512a:	4606      	mov	r6, r0
	if (hlen < 92 || hlen > FF_MIN_SS) return 0;
 800512c:	f5b3 7fd2 	cmp.w	r3, #420	@ 0x1a4
 8005130:	d82f      	bhi.n	8005192 <mount_volume+0x112>
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 8005136:	f1a5 0210 	sub.w	r2, r5, #16
 800513a:	4618      	mov	r0, r3
 800513c:	2a03      	cmp	r2, #3
 800513e:	bf88      	it	hi
 8005140:	5d79      	ldrbhi	r1, [r7, r5]
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8005142:	f105 0501 	add.w	r5, r5, #1
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 8005146:	bf98      	it	ls
 8005148:	2100      	movls	r1, #0
 800514a:	f7ff fb61 	bl	8004810 <crc32>
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 800514e:	42ae      	cmp	r6, r5
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 8005150:	4603      	mov	r3, r0
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 8005152:	d1f0      	bne.n	8005136 <mount_volume+0xb6>
	if (~bcc != ld_32(gpth + GPTH_Bcc)) return 0;
 8005154:	43db      	mvns	r3, r3
 8005156:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 800515a:	f7ff fad2 	bl	8004702 <ld_32>
 800515e:	4283      	cmp	r3, r0
 8005160:	d117      	bne.n	8005192 <mount_volume+0x112>
	if (ld_32(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes) */
 8005162:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8005166:	f7ff facc 	bl	8004702 <ld_32>
 800516a:	2880      	cmp	r0, #128	@ 0x80
 800516c:	d111      	bne.n	8005192 <mount_volume+0x112>
	if (ld_32(gpth + GPTH_PtNum) > 128) return 0;			/* Table size (must be 128 entries or less) */
 800516e:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 8005172:	f7ff fac6 	bl	8004702 <ld_32>
 8005176:	2880      	cmp	r0, #128	@ 0x80
 8005178:	4606      	mov	r6, r0
 800517a:	d80a      	bhi.n	8005192 <mount_volume+0x112>
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 800517c:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 8005180:	2500      	movs	r5, #0
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 8005182:	f7ff fac0 	bl	8004706 <ld_64>
			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
 8005186:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800539c <mount_volume+0x31c>
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 800518a:	4680      	mov	r8, r0
 800518c:	4689      	mov	r9, r1
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 800518e:	42b5      	cmp	r5, r6
 8005190:	d101      	bne.n	8005196 <mount_volume+0x116>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005192:	200d      	movs	r0, #13
 8005194:	e797      	b.n	80050c6 <mount_volume+0x46>
			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
 8005196:	f3c5 0296 	ubfx	r2, r5, #2, #23
 800519a:	4620      	mov	r0, r4
 800519c:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
 80051a0:	eb12 0208 	adds.w	r2, r2, r8
 80051a4:	f149 0300 	adc.w	r3, r9, #0
 80051a8:	f7ff fbb6 	bl	8004918 <move_window>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f040 80b4 	bne.w	800531a <mount_volume+0x29a>
			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
 80051b2:	f40b 7bc0 	and.w	fp, fp, #384	@ 0x180
			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
 80051b6:	2210      	movs	r2, #16
 80051b8:	4651      	mov	r1, sl
 80051ba:	eb07 000b 	add.w	r0, r7, fp
 80051be:	f010 fe2d 	bl	8015e1c <memcmp>
 80051c2:	b108      	cbz	r0, 80051c8 <mount_volume+0x148>
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 80051c4:	3501      	adds	r5, #1
 80051c6:	e7e2      	b.n	800518e <mount_volume+0x10e>
				fmt = check_fs(fs, ld_64(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
 80051c8:	f10b 0020 	add.w	r0, fp, #32
 80051cc:	4438      	add	r0, r7
 80051ce:	f7ff fa9a 	bl	8004706 <ld_64>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff fbc0 	bl	800495c <check_fs>
				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
 80051dc:	2801      	cmp	r0, #1
 80051de:	d8f1      	bhi.n	80051c4 <mount_volume+0x144>
	if (fmt == 1) {
 80051e0:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80051e2:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
	if (fmt == 1) {
 80051e6:	f040 80ec 	bne.w	80053c2 <mount_volume+0x342>
 80051ea:	f104 016a 	add.w	r1, r4, #106	@ 0x6a
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80051ee:	230b      	movs	r3, #11
 80051f0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80051f4:	2e00      	cmp	r6, #0
 80051f6:	d1cc      	bne.n	8005192 <mount_volume+0x112>
 80051f8:	3301      	adds	r3, #1
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d1f8      	bne.n	80051f0 <mount_volume+0x170>
		if (ld_16(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 80051fe:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	@ 0xc8
 8005202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005206:	d1c4      	bne.n	8005192 <mount_volume+0x112>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8005208:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 800520c:	2b09      	cmp	r3, #9
 800520e:	d1c0      	bne.n	8005192 <mount_volume+0x112>
		maxlba = ld_64(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8005210:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
 8005214:	f7ff fa77 	bl	8004706 <ld_64>
 8005218:	4607      	mov	r7, r0
		fs->fsize = ld_32(fs->win + BPB_FatSzEx);		/* Number of sectors per FAT */
 800521a:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 800521e:	f7ff fa70 	bl	8004702 <ld_32>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8005222:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
		fs->fsize = ld_32(fs->win + BPB_FatSzEx);		/* Number of sectors per FAT */
 8005226:	61e0      	str	r0, [r4, #28]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8005228:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800522a:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800522c:	d1b1      	bne.n	8005192 <mount_volume+0x112>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800522e:	f894 00cd 	ldrb.w	r0, [r4, #205]	@ 0xcd
 8005232:	4083      	lsls	r3, r0
 8005234:	b298      	uxth	r0, r3
 8005236:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8005238:	2800      	cmp	r0, #0
 800523a:	d0aa      	beq.n	8005192 <mount_volume+0x112>
		nclst = ld_32(fs->win + BPB_NumClusEx);			/* Number of clusters */
 800523c:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8005240:	f7ff fa5f 	bl	8004702 <ld_32>
 8005244:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005246:	4854      	ldr	r0, [pc, #336]	@ (8005398 <mount_volume+0x318>)
 8005248:	4582      	cmp	sl, r0
 800524a:	d8a2      	bhi.n	8005192 <mount_volume+0x112>
		fs->n_fatent = nclst + 2;
 800524c:	f10a 0002 	add.w	r0, sl, #2
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8005250:	b29b      	uxth	r3, r3
		fs->n_fatent = nclst + 2;
 8005252:	61a0      	str	r0, [r4, #24]
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 8005254:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8005258:	fb0a f303 	mul.w	r3, sl, r3
		fs->volbase = bsect;
 800525c:	e9c4 250a 	strd	r2, r5, [r4, #40]	@ 0x28
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 8005260:	f7ff fa4f 	bl	8004702 <ld_32>
 8005264:	eb10 0902 	adds.w	r9, r0, r2
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 8005268:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 800526c:	f145 0800 	adc.w	r8, r5, #0
 8005270:	e9c4 9810 	strd	r9, r8, [r4, #64]	@ 0x40
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 8005274:	f7ff fa45 	bl	8004702 <ld_32>
 8005278:	1880      	adds	r0, r0, r2
 800527a:	f145 0c00 	adc.w	ip, r5, #0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800527e:	eb13 0309 	adds.w	r3, r3, r9
 8005282:	f148 0800 	adc.w	r8, r8, #0
		maxlba = ld_64(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8005286:	18bf      	adds	r7, r7, r2
 8005288:	eb41 0105 	adc.w	r1, r1, r5
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800528c:	429f      	cmp	r7, r3
 800528e:	eb71 0108 	sbcs.w	r1, r1, r8
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 8005292:	e9c4 0c0c 	strd	r0, ip, [r4, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8005296:	f4ff af7c 	bcc.w	8005192 <mount_volume+0x112>
		so = i = 0;
 800529a:	4635      	mov	r5, r6
		fs->dirbase = ld_32(fs->win + BPB_RootClusEx);
 800529c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 80052a0:	f7ff fa2f 	bl	8004702 <ld_32>
 80052a4:	e9c4 060e 	strd	r0, r6, [r4, #56]	@ 0x38
			if (i == 0) {
 80052a8:	b97d      	cbnz	r5, 80052ca <mount_volume+0x24a>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 80052aa:	8963      	ldrh	r3, [r4, #10]
 80052ac:	42b3      	cmp	r3, r6
 80052ae:	f67f af70 	bls.w	8005192 <mount_volume+0x112>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 80052b2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff fa59 	bl	800476c <clst2sect>
 80052ba:	1832      	adds	r2, r6, r0
 80052bc:	4620      	mov	r0, r4
 80052be:	f141 0300 	adc.w	r3, r1, #0
 80052c2:	f7ff fb29 	bl	8004918 <move_window>
 80052c6:	bb40      	cbnz	r0, 800531a <mount_volume+0x29a>
				so++;
 80052c8:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;		/* Is it a bitmap entry? */
 80052ca:	1963      	adds	r3, r4, r5
 80052cc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80052d0:	2b81      	cmp	r3, #129	@ 0x81
 80052d2:	d02c      	beq.n	800532e <mount_volume+0x2ae>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 80052d4:	3520      	adds	r5, #32
 80052d6:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
 80052da:	e7e5      	b.n	80052a8 <mount_volume+0x228>
 80052dc:	466e      	mov	r6, sp
 80052de:	f204 2326 	addw	r3, r4, #550	@ 0x226
 80052e2:	f204 2166 	addw	r1, r4, #614	@ 0x266
	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
 80052e6:	4632      	mov	r2, r6
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80052e8:	4618      	mov	r0, r3
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80052ea:	3310      	adds	r3, #16
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80052ec:	f7ff fa09 	bl	8004702 <ld_32>
 80052f0:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80052f4:	428b      	cmp	r3, r1
 80052f6:	d1f7      	bne.n	80052e8 <mount_volume+0x268>
 80052f8:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80052fa:	f856 2b04 	ldr.w	r2, [r6], #4
 80052fe:	b172      	cbz	r2, 800531e <mount_volume+0x29e>
 8005300:	2300      	movs	r3, #0
 8005302:	4620      	mov	r0, r4
 8005304:	f7ff fb2a 	bl	800495c <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8005308:	2801      	cmp	r0, #1
 800530a:	f67f af69 	bls.w	80051e0 <mount_volume+0x160>
 800530e:	3501      	adds	r5, #1
 8005310:	2d04      	cmp	r5, #4
 8005312:	d1f2      	bne.n	80052fa <mount_volume+0x27a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8005314:	2804      	cmp	r0, #4
 8005316:	f47f af3c 	bne.w	8005192 <mount_volume+0x112>
 800531a:	2001      	movs	r0, #1
 800531c:	e6d3      	b.n	80050c6 <mount_volume+0x46>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800531e:	2003      	movs	r0, #3
 8005320:	e7f5      	b.n	800530e <mount_volume+0x28e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8005322:	2804      	cmp	r0, #4
 8005324:	d0f9      	beq.n	800531a <mount_volume+0x29a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005326:	2801      	cmp	r0, #1
 8005328:	f67f af5a 	bls.w	80051e0 <mount_volume+0x160>
 800532c:	e731      	b.n	8005192 <mount_volume+0x112>
		bcl = ld_32(fs->win + i + 20);				/* Bitmap cluster */
 800532e:	f105 0014 	add.w	r0, r5, #20
 8005332:	f104 0660 	add.w	r6, r4, #96	@ 0x60
 8005336:	4430      	add	r0, r6
 8005338:	f7ff f9e3 	bl	8004702 <ld_32>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800533c:	2801      	cmp	r0, #1
		bcl = ld_32(fs->win + i + 20);				/* Bitmap cluster */
 800533e:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8005340:	f67f af27 	bls.w	8005192 <mount_volume+0x112>
 8005344:	69a3      	ldr	r3, [r4, #24]
 8005346:	4283      	cmp	r3, r0
 8005348:	f67f af23 	bls.w	8005192 <mount_volume+0x112>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800534c:	1e82      	subs	r2, r0, #2
 800534e:	8963      	ldrh	r3, [r4, #10]
 8005350:	4353      	muls	r3, r2
 8005352:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	@ 0x40
 8005356:	185b      	adds	r3, r3, r1
 8005358:	f142 0200 	adc.w	r2, r2, #0
 800535c:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8005360:	e9d4 130c 	ldrd	r1, r3, [r4, #48]	@ 0x30
 8005364:	09ea      	lsrs	r2, r5, #7
 8005366:	4620      	mov	r0, r4
 8005368:	1852      	adds	r2, r2, r1
 800536a:	f143 0300 	adc.w	r3, r3, #0
 800536e:	f7ff fad3 	bl	8004918 <move_window>
 8005372:	4603      	mov	r3, r0
 8005374:	2800      	cmp	r0, #0
 8005376:	d1d0      	bne.n	800531a <mount_volume+0x29a>
			cv = ld_32(fs->win + bcl % (SS(fs) / 4) * 4);
 8005378:	f005 007f 	and.w	r0, r5, #127	@ 0x7f
 800537c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005380:	f7ff f9bf 	bl	8004702 <ld_32>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8005384:	1c42      	adds	r2, r0, #1
 8005386:	d00b      	beq.n	80053a0 <mount_volume+0x320>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8005388:	3501      	adds	r5, #1
 800538a:	42a8      	cmp	r0, r5
 800538c:	d0e8      	beq.n	8005360 <mount_volume+0x2e0>
 800538e:	e700      	b.n	8005192 <mount_volume+0x112>
 8005390:	20006ba4 	.word	0x20006ba4
 8005394:	08016960 	.word	0x08016960
 8005398:	7ffffffd 	.word	0x7ffffffd
 800539c:	080192ad 	.word	0x080192ad
		fmt = FS_EXFAT;			/* FAT sub-type */
 80053a0:	2604      	movs	r6, #4
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 80053a2:	7163      	strb	r3, [r4, #5]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 80053a4:	e9c4 0004 	strd	r0, r0, [r4, #16]
	fs->id = ++Fsid;		/* Volume mount ID */
 80053a8:	4a6f      	ldr	r2, [pc, #444]	@ (8005568 <mount_volume+0x4e8>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80053aa:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80053ac:	8813      	ldrh	r3, [r2, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
 80053b4:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80053b6:	4b6d      	ldr	r3, [pc, #436]	@ (800556c <mount_volume+0x4ec>)
 80053b8:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80053ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005570 <mount_volume+0x4f0>)
 80053bc:	6523      	str	r3, [r4, #80]	@ 0x50
			return FR_OK;				/* The filesystem object is already valid */
 80053be:	2000      	movs	r0, #0
 80053c0:	e681      	b.n	80050c6 <mount_volume+0x46>
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80053c2:	f8b4 306b 	ldrh.w	r3, [r4, #107]	@ 0x6b
 80053c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ca:	f47f aee2 	bne.w	8005192 <mount_volume+0x112>
		fasize = ld_16(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80053ce:	f8b4 7076 	ldrh.w	r7, [r4, #118]	@ 0x76
		if (fasize == 0) fasize = ld_32(fs->win + BPB_FATSz32);
 80053d2:	b927      	cbnz	r7, 80053de <mount_volume+0x35e>
 80053d4:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 80053d8:	f7ff f993 	bl	8004702 <ld_32>
 80053dc:	4607      	mov	r7, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053de:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
		fs->fsize = fasize;
 80053e2:	61e7      	str	r7, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053e4:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053e6:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053e8:	2901      	cmp	r1, #1
 80053ea:	f63f aed2 	bhi.w	8005192 <mount_volume+0x112>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80053ee:	f894 606d 	ldrb.w	r6, [r4, #109]	@ 0x6d
 80053f2:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	f43f aecc 	beq.w	8005192 <mount_volume+0x112>
 80053fa:	1e71      	subs	r1, r6, #1
 80053fc:	4231      	tst	r1, r6
 80053fe:	f47f aec8 	bne.w	8005192 <mount_volume+0x112>
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005402:	f8b4 8071 	ldrh.w	r8, [r4, #113]	@ 0x71
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005406:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800540a:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800540e:	f47f aec0 	bne.w	8005192 <mount_volume+0x112>
		tsect = ld_16(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8005412:	f8b4 0073 	ldrh.w	r0, [r4, #115]	@ 0x73
		if (tsect == 0) tsect = ld_32(fs->win + BPB_TotSec32);
 8005416:	b918      	cbnz	r0, 8005420 <mount_volume+0x3a0>
 8005418:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800541c:	f7ff f971 	bl	8004702 <ld_32>
		nrsv = ld_16(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005420:	f8b4 906e 	ldrh.w	r9, [r4, #110]	@ 0x6e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005424:	f1b9 0f00 	cmp.w	r9, #0
 8005428:	f43f aeb3 	beq.w	8005192 <mount_volume+0x112>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800542c:	fb07 fc03 	mul.w	ip, r7, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005430:	eb09 1e18 	add.w	lr, r9, r8, lsr #4
 8005434:	44e6      	add	lr, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005436:	4570      	cmp	r0, lr
 8005438:	f4ff aeab 	bcc.w	8005192 <mount_volume+0x112>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800543c:	eba0 010e 	sub.w	r1, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005440:	42b1      	cmp	r1, r6
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005442:	fbb1 f3f6 	udiv	r3, r1, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005446:	f4ff aea4 	bcc.w	8005192 <mount_volume+0x112>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800544a:	494a      	ldr	r1, [pc, #296]	@ (8005574 <mount_volume+0x4f4>)
 800544c:	428b      	cmp	r3, r1
 800544e:	f63f aea0 	bhi.w	8005192 <mount_volume+0x112>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005452:	f64f 71f5 	movw	r1, #65525	@ 0xfff5
 8005456:	428b      	cmp	r3, r1
 8005458:	d86b      	bhi.n	8005532 <mount_volume+0x4b2>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800545a:	f640 76f5 	movw	r6, #4085	@ 0xff5
 800545e:	42b3      	cmp	r3, r6
 8005460:	bf8c      	ite	hi
 8005462:	2602      	movhi	r6, #2
 8005464:	2601      	movls	r6, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005466:	eb19 0002 	adds.w	r0, r9, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800546a:	f103 0302 	add.w	r3, r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800546e:	f145 0100 	adc.w	r1, r5, #0
		fs->database = bsect + sysect;					/* Data start sector */
 8005472:	eb1e 0e02 	adds.w	lr, lr, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005476:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8005478:	f145 0900 	adc.w	r9, r5, #0
		if (fmt == FS_FAT32) {
 800547c:	2e03      	cmp	r6, #3
		fs->volbase = bsect;							/* Volume start sector */
 800547e:	e9c4 250a 	strd	r2, r5, [r4, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005482:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 8005486:	e9c4 e910 	strd	lr, r9, [r4, #64]	@ 0x40
		if (fmt == FS_FAT32) {
 800548a:	d154      	bne.n	8005536 <mount_volume+0x4b6>
			if (ld_16(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800548c:	f8b4 108a 	ldrh.w	r1, [r4, #138]	@ 0x8a
 8005490:	ea58 0101 	orrs.w	r1, r8, r1
 8005494:	f47f ae7d 	bne.w	8005192 <mount_volume+0x112>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005498:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800549a:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 800549e:	f7ff f930 	bl	8004702 <ld_32>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80054a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80054a6:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80054aa:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80054ae:	f4ff ae70 	bcc.w	8005192 <mount_volume+0x112>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32
 80054b6:	2e03      	cmp	r6, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 80054b8:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 80054bc:	f04f 0380 	mov.w	r3, #128	@ 0x80
 80054c0:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 80054c2:	f47f af71 	bne.w	80053a8 <mount_volume+0x328>
			&& ld_16(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 80054c6:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	f47f af6c 	bne.w	80053a8 <mount_volume+0x328>
			&& move_window(fs, bsect + 1) == FR_OK)
 80054d0:	3201      	adds	r2, #1
 80054d2:	4620      	mov	r0, r4
 80054d4:	f145 0300 	adc.w	r3, r5, #0
 80054d8:	f7ff fa1e 	bl	8004918 <move_window>
 80054dc:	2800      	cmp	r0, #0
 80054de:	f47f af63 	bne.w	80053a8 <mount_volume+0x328>
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 80054e2:	4b25      	ldr	r3, [pc, #148]	@ (8005578 <mount_volume+0x4f8>)
			fs->fsi_flag = 0;
 80054e4:	7160      	strb	r0, [r4, #5]
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 80054e6:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80054ea:	f7ff f90a 	bl	8004702 <ld_32>
 80054ee:	4298      	cmp	r0, r3
 80054f0:	f47f af5a 	bne.w	80053a8 <mount_volume+0x328>
				&& ld_32(fs->win + FSI_StrucSig) == 0x61417272
 80054f4:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 80054f8:	f504 7011 	add.w	r0, r4, #580	@ 0x244
 80054fc:	f7ff f901 	bl	8004702 <ld_32>
 8005500:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005504:	3320      	adds	r3, #32
 8005506:	4298      	cmp	r0, r3
 8005508:	f47f af4e 	bne.w	80053a8 <mount_volume+0x328>
				&& ld_32(fs->win + FSI_TrailSig) == 0xAA550000)
 800550c:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <mount_volume+0x4fc>)
 800550e:	f504 7017 	add.w	r0, r4, #604	@ 0x25c
 8005512:	f7ff f8f6 	bl	8004702 <ld_32>
 8005516:	4298      	cmp	r0, r3
 8005518:	f47f af46 	bne.w	80053a8 <mount_volume+0x328>
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 800551c:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 8005520:	f7ff f8ef 	bl	8004702 <ld_32>
 8005524:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 8005526:	f504 7013 	add.w	r0, r4, #588	@ 0x24c
 800552a:	f7ff f8ea 	bl	8004702 <ld_32>
 800552e:	6120      	str	r0, [r4, #16]
 8005530:	e73a      	b.n	80053a8 <mount_volume+0x328>
 8005532:	2603      	movs	r6, #3
 8005534:	e797      	b.n	8005466 <mount_volume+0x3e6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005536:	f1b8 0f00 	cmp.w	r8, #0
 800553a:	f43f ae2a 	beq.w	8005192 <mount_volume+0x112>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800553e:	eb1c 0000 	adds.w	r0, ip, r0
 8005542:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005546:	f141 0100 	adc.w	r1, r1, #0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800554a:	2e02      	cmp	r6, #2
 800554c:	bf1b      	ittet	ne
 800554e:	449c      	addne	ip, r3
 8005550:	f003 0301 	andne.w	r3, r3, #1
 8005554:	4663      	moveq	r3, ip
 8005556:	eb03 035c 	addne.w	r3, r3, ip, lsr #1
 800555a:	e7a2      	b.n	80054a2 <mount_volume+0x422>
	if (vol < 0) return FR_INVALID_DRIVE;
 800555c:	200b      	movs	r0, #11
 800555e:	e5b2      	b.n	80050c6 <mount_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005560:	200c      	movs	r0, #12
 8005562:	e5b0      	b.n	80050c6 <mount_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005564:	2003      	movs	r0, #3
 8005566:	e5ae      	b.n	80050c6 <mount_volume+0x46>
 8005568:	20006ba2 	.word	0x20006ba2
 800556c:	20006742 	.word	0x20006742
 8005570:	20006942 	.word	0x20006942
 8005574:	0ffffff5 	.word	0x0ffffff5
 8005578:	41615252 	.word	0x41615252
 800557c:	aa550000 	.word	0xaa550000

08005580 <make_rand.constprop.0>:
	if (seed == 0) seed = 1;
 8005580:	2801      	cmp	r0, #1
static DWORD make_rand (	/* Returns a seed value for next */
 8005582:	b510      	push	{r4, lr}
 8005584:	bf38      	it	cc
 8005586:	2001      	movcc	r0, #1
 8005588:	f101 0410 	add.w	r4, r1, #16
 800558c:	2308      	movs	r3, #8
		for (r = 0; r < 8; r++) seed = seed & 1 ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits the 32-bit LFSR */
 800558e:	f340 0200 	sbfx	r2, r0, #0, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	f002 4223 	and.w	r2, r2, #2734686208	@ 0xa3000000
 8005598:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
 800559c:	d1f7      	bne.n	800558e <make_rand.constprop.0+0xe>
		*buff++ = (BYTE)seed;
 800559e:	f801 0b01 	strb.w	r0, [r1], #1
	} while (--n);
 80055a2:	42a1      	cmp	r1, r4
 80055a4:	d1f2      	bne.n	800558c <make_rand.constprop.0+0xc>
}
 80055a6:	bd10      	pop	{r4, pc}

080055a8 <create_chain>:
{
 80055a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 80055ae:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80055b0:	4688      	mov	r8, r1
 80055b2:	b949      	cbnz	r1, 80055c8 <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80055b4:	692f      	ldr	r7, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80055b6:	b1c7      	cbz	r7, 80055ea <create_chain+0x42>
 80055b8:	69ab      	ldr	r3, [r5, #24]
 80055ba:	42bb      	cmp	r3, r7
 80055bc:	bf98      	it	ls
 80055be:	2701      	movls	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80055c0:	696b      	ldr	r3, [r5, #20]
 80055c2:	b9a3      	cbnz	r3, 80055ee <create_chain+0x46>
 80055c4:	2400      	movs	r4, #0
 80055c6:	e005      	b.n	80055d4 <create_chain+0x2c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80055c8:	f7ff fa6e 	bl	8004aa8 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 80055cc:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80055ce:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 80055d0:	d803      	bhi.n	80055da <create_chain+0x32>
 80055d2:	2401      	movs	r4, #1
}
 80055d4:	4620      	mov	r0, r4
 80055d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80055da:	1c42      	adds	r2, r0, #1
 80055dc:	f000 80dc 	beq.w	8005798 <create_chain+0x1f0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055e0:	69ab      	ldr	r3, [r5, #24]
 80055e2:	4283      	cmp	r3, r0
 80055e4:	d8f6      	bhi.n	80055d4 <create_chain+0x2c>
		scl = clst;							/* Cluster to start to find */
 80055e6:	4647      	mov	r7, r8
 80055e8:	e7ea      	b.n	80055c0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80055ea:	2701      	movs	r7, #1
 80055ec:	e7e8      	b.n	80055c0 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80055ee:	782a      	ldrb	r2, [r5, #0]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80055f0:	69ab      	ldr	r3, [r5, #24]
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80055f2:	2a04      	cmp	r2, #4
 80055f4:	f040 808a 	bne.w	800570c <create_chain+0x164>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80055f8:	f1a7 0a02 	sub.w	sl, r7, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 80055fc:	3b02      	subs	r3, #2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80055fe:	f04f 0b01 	mov.w	fp, #1
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005602:	459a      	cmp	sl, r3
 8005604:	bf28      	it	cs
 8005606:	f04f 0a00 	movcs.w	sl, #0
	scl = val = clst; ctr = 0;
 800560a:	46d1      	mov	r9, sl
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800560c:	ea4f 3219 	mov.w	r2, r9, lsr #12
 8005610:	4628      	mov	r0, r5
 8005612:	e9d5 1312 	ldrd	r1, r3, [r5, #72]	@ 0x48
 8005616:	1852      	adds	r2, r2, r1
 8005618:	f143 0300 	adc.w	r3, r3, #0
 800561c:	f7ff f97c 	bl	8004918 <move_window>
 8005620:	2800      	cmp	r0, #0
 8005622:	d13b      	bne.n	800569c <create_chain+0xf4>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005624:	f009 0307 	and.w	r3, r9, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005628:	69a8      	ldr	r0, [r5, #24]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800562a:	f3c9 01c8 	ubfx	r1, r9, #3, #9
 800562e:	fa0b f303 	lsl.w	r3, fp, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005632:	3802      	subs	r0, #2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005634:	b2db      	uxtb	r3, r3
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005636:	186a      	adds	r2, r5, r1
			bm = 1;
 8005638:	464c      	mov	r4, r9
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800563a:	f109 0901 	add.w	r9, r9, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800563e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005642:	4581      	cmp	r9, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005644:	ea02 0203 	and.w	r2, r2, r3
 8005648:	bf33      	iteet	cc
 800564a:	005b      	lslcc	r3, r3, #1
					val = 0; bm = 0; i = SS(fs);
 800564c:	2300      	movcs	r3, #0
 800564e:	f44f 7100 	movcs.w	r1, #512	@ 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005652:	b2db      	uxtbcc	r3, r3
					val = 0; bm = 0; i = SS(fs);
 8005654:	bf28      	it	cs
 8005656:	4699      	movcs	r9, r3
				if (bv == 0) {	/* Is it a free cluster? */
 8005658:	b9b2      	cbnz	r2, 8005688 <create_chain+0xe0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800565a:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800565c:	1e63      	subs	r3, r4, #1
 800565e:	3303      	adds	r3, #3
 8005660:	d8b8      	bhi.n	80055d4 <create_chain+0x2c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005662:	2301      	movs	r3, #1
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	461a      	mov	r2, r3
 800566a:	f7ff f9db 	bl	8004a24 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 800566e:	2802      	cmp	r0, #2
 8005670:	d0af      	beq.n	80055d2 <create_chain+0x2a>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005672:	2801      	cmp	r0, #1
 8005674:	f000 8090 	beq.w	8005798 <create_chain+0x1f0>
		if (clst == 0) {							/* Is it a new chain? */
 8005678:	f1b8 0f00 	cmp.w	r8, #0
 800567c:	d113      	bne.n	80056a6 <create_chain+0xfe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800567e:	2302      	movs	r3, #2
 8005680:	71f3      	strb	r3, [r6, #7]
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8005682:	2800      	cmp	r0, #0
 8005684:	d1a5      	bne.n	80055d2 <create_chain+0x2a>
 8005686:	e030      	b.n	80056ea <create_chain+0x142>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005688:	45ca      	cmp	sl, r9
 800568a:	d00a      	beq.n	80056a2 <create_chain+0xfa>
			} while (bm != 0);
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1d2      	bne.n	8005636 <create_chain+0x8e>
		} while (++i < SS(fs));
 8005690:	3101      	adds	r1, #1
 8005692:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005696:	d2b9      	bcs.n	800560c <create_chain+0x64>
			bm = 1;
 8005698:	2301      	movs	r3, #1
 800569a:	e7cc      	b.n	8005636 <create_chain+0x8e>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800569c:	f04f 34ff 	mov.w	r4, #4294967295
 80056a0:	e7dc      	b.n	800565c <create_chain+0xb4>
				if (val == clst) return 0;	/* All cluster scanned? */
 80056a2:	2400      	movs	r4, #0
 80056a4:	e7da      	b.n	800565c <create_chain+0xb4>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80056a6:	79f3      	ldrb	r3, [r6, #7]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d107      	bne.n	80056bc <create_chain+0x114>
 80056ac:	1c7b      	adds	r3, r7, #1
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d0e7      	beq.n	8005682 <create_chain+0xda>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80056b2:	68b3      	ldr	r3, [r6, #8]
 80056b4:	1afb      	subs	r3, r7, r3
 80056b6:	61b3      	str	r3, [r6, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80056b8:	2303      	movs	r3, #3
 80056ba:	71f3      	strb	r3, [r6, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80056bc:	f108 0201 	add.w	r2, r8, #1
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80056c0:	69f3      	ldr	r3, [r6, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80056c2:	42a2      	cmp	r2, r4
 80056c4:	d105      	bne.n	80056d2 <create_chain+0x12a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80056c6:	b113      	cbz	r3, 80056ce <create_chain+0x126>
 80056c8:	3301      	adds	r3, #1
 80056ca:	61f3      	str	r3, [r6, #28]
 80056cc:	e7d9      	b.n	8005682 <create_chain+0xda>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e7fb      	b.n	80056ca <create_chain+0x122>
				if (obj->n_frag == 0) obj->n_frag = 1;
 80056d2:	b90b      	cbnz	r3, 80056d8 <create_chain+0x130>
 80056d4:	2301      	movs	r3, #1
 80056d6:	61f3      	str	r3, [r6, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80056d8:	4622      	mov	r2, r4
 80056da:	4641      	mov	r1, r8
 80056dc:	4630      	mov	r0, r6
 80056de:	f7ff fb6b 	bl	8004db8 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d155      	bne.n	8005792 <create_chain+0x1ea>
 80056e6:	2301      	movs	r3, #1
 80056e8:	61f3      	str	r3, [r6, #28]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80056ea:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80056ec:	612c      	str	r4, [r5, #16]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f43f af70 	beq.w	80055d4 <create_chain+0x2c>
 80056f4:	69aa      	ldr	r2, [r5, #24]
 80056f6:	3a02      	subs	r2, #2
 80056f8:	4293      	cmp	r3, r2
 80056fa:	f63f af6b 	bhi.w	80055d4 <create_chain+0x2c>
			fs->free_clst--;
 80056fe:	3b01      	subs	r3, #1
 8005700:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8005702:	796b      	ldrb	r3, [r5, #5]
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	716b      	strb	r3, [r5, #5]
 800570a:	e763      	b.n	80055d4 <create_chain+0x2c>
		if (scl == clst) {						/* Stretching an existing chain? */
 800570c:	4547      	cmp	r7, r8
 800570e:	d115      	bne.n	800573c <create_chain+0x194>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005710:	1c7c      	adds	r4, r7, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005712:	4630      	mov	r0, r6
			if (ncl >= fs->n_fatent) ncl = 2;
 8005714:	42a3      	cmp	r3, r4
 8005716:	bf98      	it	ls
 8005718:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800571a:	4621      	mov	r1, r4
 800571c:	f7ff f9c4 	bl	8004aa8 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005720:	2801      	cmp	r0, #1
 8005722:	f43f af56 	beq.w	80055d2 <create_chain+0x2a>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d036      	beq.n	8005798 <create_chain+0x1f0>
			if (cs != 0) {						/* Not free? */
 800572a:	b1f8      	cbz	r0, 800576c <create_chain+0x1c4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800572c:	f8d5 9010 	ldr.w	r9, [r5, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005730:	f1b9 0f01 	cmp.w	r9, #1
 8005734:	d902      	bls.n	800573c <create_chain+0x194>
 8005736:	69ab      	ldr	r3, [r5, #24]
 8005738:	454b      	cmp	r3, r9
 800573a:	d800      	bhi.n	800573e <create_chain+0x196>
			if (ncl >= fs->n_fatent) ncl = 2;
 800573c:	46b9      	mov	r9, r7
			ncl = scl;	/* Start cluster */
 800573e:	464c      	mov	r4, r9
				ncl++;							/* Next cluster */
 8005740:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005742:	69ab      	ldr	r3, [r5, #24]
 8005744:	42a3      	cmp	r3, r4
 8005746:	d804      	bhi.n	8005752 <create_chain+0x1aa>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005748:	f1b9 0f01 	cmp.w	r9, #1
 800574c:	f43f af3a 	beq.w	80055c4 <create_chain+0x1c>
					ncl = 2;
 8005750:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005752:	4621      	mov	r1, r4
 8005754:	4630      	mov	r0, r6
 8005756:	f7ff f9a7 	bl	8004aa8 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 800575a:	b148      	cbz	r0, 8005770 <create_chain+0x1c8>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800575c:	2801      	cmp	r0, #1
 800575e:	f43f af38 	beq.w	80055d2 <create_chain+0x2a>
 8005762:	3001      	adds	r0, #1
 8005764:	d018      	beq.n	8005798 <create_chain+0x1f0>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005766:	454c      	cmp	r4, r9
 8005768:	d1ea      	bne.n	8005740 <create_chain+0x198>
 800576a:	e72b      	b.n	80055c4 <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800576c:	2c00      	cmp	r4, #0
 800576e:	d0e5      	beq.n	800573c <create_chain+0x194>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f7ff fa92 	bl	8004ca0 <put_fat>
		if (res == FR_OK && clst != 0) {
 800577c:	b948      	cbnz	r0, 8005792 <create_chain+0x1ea>
 800577e:	f1b8 0f00 	cmp.w	r8, #0
 8005782:	d0b2      	beq.n	80056ea <create_chain+0x142>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005784:	4622      	mov	r2, r4
 8005786:	4641      	mov	r1, r8
 8005788:	4628      	mov	r0, r5
 800578a:	f7ff fa89 	bl	8004ca0 <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 800578e:	2800      	cmp	r0, #0
 8005790:	d0ab      	beq.n	80056ea <create_chain+0x142>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005792:	2801      	cmp	r0, #1
 8005794:	f47f af1d 	bne.w	80055d2 <create_chain+0x2a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005798:	f04f 34ff 	mov.w	r4, #4294967295
 800579c:	e71a      	b.n	80055d4 <create_chain+0x2c>

0800579e <dir_next>:
{
 800579e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 80057a2:	6806      	ldr	r6, [r0, #0]
{
 80057a4:	4689      	mov	r9, r1
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80057a6:	6b07      	ldr	r7, [r0, #48]	@ 0x30
{
 80057a8:	4604      	mov	r4, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80057aa:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80057ac:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf14      	ite	ne
 80057b2:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 80057b6:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
 80057ba:	42bb      	cmp	r3, r7
 80057bc:	bf9e      	ittt	ls
 80057be:	2200      	movls	r2, #0
 80057c0:	2300      	movls	r3, #0
 80057c2:	e9c0 230e 	strdls	r2, r3, [r0, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80057c6:	e9d0 320e 	ldrd	r3, r2, [r0, #56]	@ 0x38
 80057ca:	ea53 0102 	orrs.w	r1, r3, r2
 80057ce:	d013      	beq.n	80057f8 <dir_next+0x5a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80057d0:	f3c7 0808 	ubfx	r8, r7, #0, #9
 80057d4:	f1b8 0f00 	cmp.w	r8, #0
 80057d8:	d142      	bne.n	8005860 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
 80057da:	3301      	adds	r3, #1
		if (dp->clust == 0) {	/* Static table */
 80057dc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 80057de:	f142 0200 	adc.w	r2, r2, #0
 80057e2:	e9c0 320e 	strd	r3, r2, [r0, #56]	@ 0x38
		if (dp->clust == 0) {	/* Static table */
 80057e6:	b951      	cbnz	r1, 80057fe <dir_next+0x60>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80057e8:	8933      	ldrh	r3, [r6, #8]
 80057ea:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80057ee:	d837      	bhi.n	8005860 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80057f8:	2004      	movs	r0, #4
}
 80057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80057fe:	8973      	ldrh	r3, [r6, #10]
 8005800:	3b01      	subs	r3, #1
 8005802:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8005806:	d12b      	bne.n	8005860 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005808:	f7ff f94e 	bl	8004aa8 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800580c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800580e:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005810:	d801      	bhi.n	8005816 <dir_next+0x78>
 8005812:	2002      	movs	r0, #2
 8005814:	e7f1      	b.n	80057fa <dir_next+0x5c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005816:	1c42      	adds	r2, r0, #1
 8005818:	d101      	bne.n	800581e <dir_next+0x80>
 800581a:	2001      	movs	r0, #1
 800581c:	e7ed      	b.n	80057fa <dir_next+0x5c>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800581e:	69b3      	ldr	r3, [r6, #24]
 8005820:	4283      	cmp	r3, r0
 8005822:	d816      	bhi.n	8005852 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8005824:	f1b9 0f00 	cmp.w	r9, #0
 8005828:	d0e2      	beq.n	80057f0 <dir_next+0x52>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800582a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff febb 	bl	80055a8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005832:	4605      	mov	r5, r0
 8005834:	b1d0      	cbz	r0, 800586c <dir_next+0xce>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005836:	2801      	cmp	r0, #1
 8005838:	d0eb      	beq.n	8005812 <dir_next+0x74>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	d0ed      	beq.n	800581a <dir_next+0x7c>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800583e:	4601      	mov	r1, r0
 8005840:	4630      	mov	r0, r6
 8005842:	f7ff fb68 	bl	8004f16 <dir_clear>
 8005846:	2800      	cmp	r0, #0
 8005848:	d1e7      	bne.n	800581a <dir_next+0x7c>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800584a:	79e3      	ldrb	r3, [r4, #7]
 800584c:	f043 0304 	orr.w	r3, r3, #4
 8005850:	71e3      	strb	r3, [r4, #7]
				dp->sect = clst2sect(fs, clst);
 8005852:	4629      	mov	r1, r5
 8005854:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 8005856:	6365      	str	r5, [r4, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 8005858:	f7fe ff88 	bl	800476c <clst2sect>
 800585c:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005860:	3660      	adds	r6, #96	@ 0x60
	return FR_OK;
 8005862:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8005864:	6327      	str	r7, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005866:	4446      	add	r6, r8
 8005868:	6426      	str	r6, [r4, #64]	@ 0x40
	return FR_OK;
 800586a:	e7c6      	b.n	80057fa <dir_next+0x5c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800586c:	2007      	movs	r0, #7
 800586e:	e7c4      	b.n	80057fa <dir_next+0x5c>

08005870 <dir_alloc>:
{
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
 8005874:	2100      	movs	r1, #0
{
 8005876:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005878:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800587a:	f7ff f9bd 	bl	8004bf8 <dir_sdi>
	if (res == FR_OK) {
 800587e:	b9a0      	cbnz	r0, 80058aa <dir_alloc+0x3a>
		n = 0;
 8005880:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
 8005882:	4638      	mov	r0, r7
 8005884:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005888:	f7ff f846 	bl	8004918 <move_window>
			if (res != FR_OK) break;
 800588c:	b968      	cbnz	r0, 80058aa <dir_alloc+0x3a>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800588e:	783a      	ldrb	r2, [r7, #0]
 8005890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005892:	2a04      	cmp	r2, #4
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	d10c      	bne.n	80058b2 <dir_alloc+0x42>
 8005898:	061b      	lsls	r3, r3, #24
 800589a:	d50e      	bpl.n	80058ba <dir_alloc+0x4a>
				n = 0;				/* Not a free entry, restart to search */
 800589c:	4605      	mov	r5, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800589e:	2101      	movs	r1, #1
 80058a0:	4620      	mov	r0, r4
 80058a2:	f7ff ff7c 	bl	800579e <dir_next>
		} while (res == FR_OK);
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d0eb      	beq.n	8005882 <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058aa:	2804      	cmp	r0, #4
 80058ac:	bf08      	it	eq
 80058ae:	2007      	moveq	r0, #7
 80058b0:	e006      	b.n	80058c0 <dir_alloc+0x50>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 80058b2:	2be5      	cmp	r3, #229	@ 0xe5
 80058b4:	d001      	beq.n	80058ba <dir_alloc+0x4a>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <dir_alloc+0x2c>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 80058ba:	3501      	adds	r5, #1
 80058bc:	42b5      	cmp	r5, r6
 80058be:	d1ee      	bne.n	800589e <dir_alloc+0x2e>
}
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080058c2 <load_xdir>:
{
 80058c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c4:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80058c6:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 80058c8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80058cc:	6d05      	ldr	r5, [r0, #80]	@ 0x50
	res = move_window(dp->obj.fs, dp->sect);
 80058ce:	f7ff f823 	bl	8004918 <move_window>
	if (res != FR_OK) return res;
 80058d2:	b920      	cbnz	r0, 80058de <load_xdir+0x1c>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 80058d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	2a85      	cmp	r2, #133	@ 0x85
 80058da:	d001      	beq.n	80058e0 <load_xdir+0x1e>
 80058dc:	2002      	movs	r0, #2
}
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 80058e0:	462a      	mov	r2, r5
 80058e2:	f103 0120 	add.w	r1, r3, #32
 80058e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80058ea:	428b      	cmp	r3, r1
 80058ec:	f842 0b04 	str.w	r0, [r2], #4
 80058f0:	d1f9      	bne.n	80058e6 <load_xdir+0x24>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 80058f2:	786e      	ldrb	r6, [r5, #1]
 80058f4:	3601      	adds	r6, #1
 80058f6:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 80058f8:	f1a6 0360 	sub.w	r3, r6, #96	@ 0x60
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005900:	d8ec      	bhi.n	80058dc <load_xdir+0x1a>
	res = dir_next(dp, 0);
 8005902:	2100      	movs	r1, #0
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff ff4a 	bl	800579e <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800590a:	2804      	cmp	r0, #4
 800590c:	d0e6      	beq.n	80058dc <load_xdir+0x1a>
	if (res != FR_OK) return res;
 800590e:	2800      	cmp	r0, #0
 8005910:	d1e5      	bne.n	80058de <load_xdir+0x1c>
	res = move_window(dp->obj.fs, dp->sect);
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005918:	f7fe fffe 	bl	8004918 <move_window>
	if (res != FR_OK) return res;
 800591c:	2800      	cmp	r0, #0
 800591e:	d1de      	bne.n	80058de <load_xdir+0x1c>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 8005920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005922:	781a      	ldrb	r2, [r3, #0]
 8005924:	2ac0      	cmp	r2, #192	@ 0xc0
 8005926:	d1d9      	bne.n	80058dc <load_xdir+0x1a>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8005928:	f105 0220 	add.w	r2, r5, #32
 800592c:	f103 0120 	add.w	r1, r3, #32
 8005930:	f853 0b04 	ldr.w	r0, [r3], #4
 8005934:	428b      	cmp	r3, r1
 8005936:	f842 0b04 	str.w	r0, [r2], #4
 800593a:	d1f9      	bne.n	8005930 <load_xdir+0x6e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 800593c:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 8005940:	220f      	movs	r2, #15
 8005942:	332c      	adds	r3, #44	@ 0x2c
 8005944:	fbb3 f3f2 	udiv	r3, r3, r2
 8005948:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 800594c:	d3c6      	bcc.n	80058dc <load_xdir+0x1a>
	i = 2 * SZDIRE;	/* Name offset to load */
 800594e:	2740      	movs	r7, #64	@ 0x40
		res = dir_next(dp, 0);
 8005950:	2100      	movs	r1, #0
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff ff23 	bl	800579e <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005958:	2804      	cmp	r0, #4
 800595a:	d0bf      	beq.n	80058dc <load_xdir+0x1a>
		if (res != FR_OK) return res;
 800595c:	2800      	cmp	r0, #0
 800595e:	d1be      	bne.n	80058de <load_xdir+0x1c>
		res = move_window(dp->obj.fs, dp->sect);
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005966:	f7fe ffd7 	bl	8004918 <move_window>
		if (res != FR_OK) return res;
 800596a:	2800      	cmp	r0, #0
 800596c:	d1b7      	bne.n	80058de <load_xdir+0x1c>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 800596e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	2ac1      	cmp	r2, #193	@ 0xc1
 8005974:	d1b2      	bne.n	80058dc <load_xdir+0x1a>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 8005976:	f5b7 7f18 	cmp.w	r7, #608	@ 0x260
 800597a:	d0b0      	beq.n	80058de <load_xdir+0x1c>
 800597c:	19ea      	adds	r2, r5, r7
 800597e:	f103 0120 	add.w	r1, r3, #32
 8005982:	f853 cb04 	ldr.w	ip, [r3], #4
 8005986:	428b      	cmp	r3, r1
 8005988:	f842 cb04 	str.w	ip, [r2], #4
 800598c:	d1f9      	bne.n	8005982 <load_xdir+0xc0>
	} while ((i += SZDIRE) < sz_ent);
 800598e:	3720      	adds	r7, #32
 8005990:	42be      	cmp	r6, r7
 8005992:	d8dd      	bhi.n	8005950 <load_xdir+0x8e>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8005994:	f5b7 7f18 	cmp.w	r7, #608	@ 0x260
 8005998:	d8a1      	bhi.n	80058de <load_xdir+0x1c>
		if (xdir_sum(dirb) != ld_16(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800599a:	4628      	mov	r0, r5
 800599c:	f7fe ff05 	bl	80047aa <xdir_sum>
 80059a0:	886b      	ldrh	r3, [r5, #2]
 80059a2:	1a18      	subs	r0, r3, r0
 80059a4:	bf18      	it	ne
 80059a6:	2001      	movne	r0, #1
 80059a8:	0040      	lsls	r0, r0, #1
 80059aa:	e798      	b.n	80058de <load_xdir+0x1c>

080059ac <store_xdir>:
{
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 80059ae:	6803      	ldr	r3, [r0, #0]
{
 80059b0:	4605      	mov	r5, r0
		dp->obj.fs->wflag = 1;
 80059b2:	2701      	movs	r7, #1
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 80059b4:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
	st_16(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7fe fef7 	bl	80047aa <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 80059bc:	70a0      	strb	r0, [r4, #2]
 80059be:	0a00      	lsrs	r0, r0, #8
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 80059c0:	7866      	ldrb	r6, [r4, #1]
	*ptr++ = (BYTE)val;
 80059c2:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 80059c4:	4628      	mov	r0, r5
 80059c6:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80059c8:	f7ff f916 	bl	8004bf8 <dir_sdi>
	while (res == FR_OK) {
 80059cc:	b120      	cbz	r0, 80059d8 <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80059ce:	2802      	cmp	r0, #2
 80059d0:	bf28      	it	cs
 80059d2:	2002      	movcs	r0, #2
}
 80059d4:	b2c0      	uxtb	r0, r0
 80059d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
 80059d8:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80059dc:	6828      	ldr	r0, [r5, #0]
 80059de:	f7fe ff9b 	bl	8004918 <move_window>
		if (res != FR_OK) break;
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d1f3      	bne.n	80059ce <store_xdir+0x22>
		memcpy(dp->dir, dirb, SZDIRE);
 80059e6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80059e8:	f104 0220 	add.w	r2, r4, #32
 80059ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80059f0:	4294      	cmp	r4, r2
 80059f2:	f843 1b04 	str.w	r1, [r3], #4
 80059f6:	d1f9      	bne.n	80059ec <store_xdir+0x40>
		dp->obj.fs->wflag = 1;
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	711f      	strb	r7, [r3, #4]
		if (--nent == 0) break;	/* All done? */
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	d0e6      	beq.n	80059ce <store_xdir+0x22>
		res = dir_next(dp, 0);	/* Next entry */
 8005a00:	2100      	movs	r1, #0
 8005a02:	4628      	mov	r0, r5
 8005a04:	3e01      	subs	r6, #1
 8005a06:	f7ff feca 	bl	800579e <dir_next>
 8005a0a:	e7df      	b.n	80059cc <store_xdir+0x20>

08005a0c <dir_read.constprop.0>:
static FRESULT dir_read (
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8005a10:	27ff      	movs	r7, #255	@ 0xff
static FRESULT dir_read (
 8005a12:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005a14:	6806      	ldr	r6, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8005a16:	2004      	movs	r0, #4
	BYTE ord = 0xFF, sum = 0xFF;
 8005a18:	463d      	mov	r5, r7
	while (dp->sect) {
 8005a1a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005a1e:	ea52 0103 	orrs.w	r1, r2, r3
 8005a22:	d102      	bne.n	8005a2a <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005a24:	b1d8      	cbz	r0, 8005a5e <dir_read.constprop.0+0x52>
 8005a26:	2004      	movs	r0, #4
 8005a28:	e062      	b.n	8005af0 <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f7fe ff74 	bl	8004918 <move_window>
		if (res != FR_OK) break;
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d15d      	bne.n	8005af0 <dir_read.constprop.0+0xe4>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8005a34:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005a36:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f4      	beq.n	8005a26 <dir_read.constprop.0+0x1a>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005a3c:	7832      	ldrb	r2, [r6, #0]
 8005a3e:	2a04      	cmp	r2, #4
 8005a40:	d110      	bne.n	8005a64 <dir_read.constprop.0+0x58>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8005a42:	2b85      	cmp	r3, #133	@ 0x85
 8005a44:	d14e      	bne.n	8005ae4 <dir_read.constprop.0+0xd8>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005a46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
					res = load_xdir(dp);	/* Load the entry block */
 8005a48:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005a4a:	6523      	str	r3, [r4, #80]	@ 0x50
					res = load_xdir(dp);	/* Load the entry block */
 8005a4c:	f7ff ff39 	bl	80058c2 <load_xdir>
					if (res == FR_OK) {
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d14d      	bne.n	8005af0 <dir_read.constprop.0+0xe4>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005a54:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a5c:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005a5e:	2000      	movs	r0, #0
}
 8005a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005a64:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005a66:	2be5      	cmp	r3, #229	@ 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005a68:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005a6c:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005a6e:	d046      	beq.n	8005afe <dir_read.constprop.0+0xf2>
 8005a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a72:	d044      	beq.n	8005afe <dir_read.constprop.0+0xf2>
 8005a74:	f022 0120 	bic.w	r1, r2, #32
 8005a78:	2908      	cmp	r1, #8
 8005a7a:	d040      	beq.n	8005afe <dir_read.constprop.0+0xf2>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8005a7c:	2a0f      	cmp	r2, #15
 8005a7e:	d143      	bne.n	8005b08 <dir_read.constprop.0+0xfc>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 8005a80:	0659      	lsls	r1, r3, #25
 8005a82:	d53a      	bpl.n	8005afa <dir_read.constprop.0+0xee>
						b &= (BYTE)~LLEF; ord = b;
 8005a84:	f003 05bf 	and.w	r5, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;
 8005a88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						sum = dp->dir[LDIR_Chksum];
 8005a8a:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8005a8c:	6523      	str	r3, [r4, #80]	@ 0x50
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005a8e:	7b43      	ldrb	r3, [r0, #13]
 8005a90:	42bb      	cmp	r3, r7
 8005a92:	d134      	bne.n	8005afe <dir_read.constprop.0+0xf2>
	if (ld_16(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8005a94:	8b42      	ldrh	r2, [r0, #26]
 8005a96:	bb92      	cbnz	r2, 8005afe <dir_read.constprop.0+0xf2>
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 8005a98:	7803      	ldrb	r3, [r0, #0]
 8005a9a:	210d      	movs	r1, #13
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005a9c:	f8d6 e00c 	ldr.w	lr, [r6, #12]
			if (chr != 0xFFFF) return 0;		/* Check filler */
 8005aa0:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa8:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8005b1c <dir_read.constprop.0+0x110>
 8005aac:	3b01      	subs	r3, #1
 8005aae:	434b      	muls	r3, r1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 8005ab0:	2101      	movs	r1, #1
		chr = ld_16(dir + LfnOfs[di]);			/* Pick a character from the entry */
 8005ab2:	f818 cb01 	ldrb.w	ip, [r8], #1
 8005ab6:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (pchr != 0) {
 8005aba:	b311      	cbz	r1, 8005b02 <dir_read.constprop.0+0xf6>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8005abc:	2bff      	cmp	r3, #255	@ 0xff
 8005abe:	d81e      	bhi.n	8005afe <dir_read.constprop.0+0xf2>
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 8005ac0:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
 8005ac4:	4661      	mov	r1, ip
 8005ac6:	3301      	adds	r3, #1
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 8005ac8:	3201      	adds	r2, #1
 8005aca:	2a0d      	cmp	r2, #13
 8005acc:	d1f1      	bne.n	8005ab2 <dir_read.constprop.0+0xa6>
	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8005ace:	7802      	ldrb	r2, [r0, #0]
 8005ad0:	0652      	lsls	r2, r2, #25
 8005ad2:	d505      	bpl.n	8005ae0 <dir_read.constprop.0+0xd4>
 8005ad4:	b121      	cbz	r1, 8005ae0 <dir_read.constprop.0+0xd4>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 8005ad6:	2bff      	cmp	r3, #255	@ 0xff
 8005ad8:	d811      	bhi.n	8005afe <dir_read.constprop.0+0xf2>
		lfnbuf[ni] = 0;
 8005ada:	2200      	movs	r2, #0
 8005adc:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ae0:	3d01      	subs	r5, #1
 8005ae2:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f7ff fe59 	bl	800579e <dir_next>
		if (res != FR_OK) break;
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d094      	beq.n	8005a1a <dir_read.constprop.0+0xe>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
	return res;
 8005af8:	e7b2      	b.n	8005a60 <dir_read.constprop.0+0x54>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	d0c7      	beq.n	8005a8e <dir_read.constprop.0+0x82>
				ord = 0xFF;
 8005afe:	25ff      	movs	r5, #255	@ 0xff
 8005b00:	e7f0      	b.n	8005ae4 <dir_read.constprop.0+0xd8>
			if (chr != 0xFFFF) return 0;		/* Check filler */
 8005b02:	45cc      	cmp	ip, r9
 8005b04:	d0e0      	beq.n	8005ac8 <dir_read.constprop.0+0xbc>
 8005b06:	e7fa      	b.n	8005afe <dir_read.constprop.0+0xf2>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005b08:	b91d      	cbnz	r5, 8005b12 <dir_read.constprop.0+0x106>
 8005b0a:	f7fe fe3f 	bl	800478c <sum_sfn>
 8005b0e:	42b8      	cmp	r0, r7
 8005b10:	d0a5      	beq.n	8005a5e <dir_read.constprop.0+0x52>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	6523      	str	r3, [r4, #80]	@ 0x50
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005b18:	e7a1      	b.n	8005a5e <dir_read.constprop.0+0x52>
 8005b1a:	bf00      	nop
 8005b1c:	080192a0 	.word	0x080192a0

08005b20 <dir_find>:
{
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b24:	2100      	movs	r1, #0
{
 8005b26:	b087      	sub	sp, #28
 8005b28:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005b2a:	f8d0 9000 	ldr.w	r9, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b2e:	f7ff f863 	bl	8004bf8 <dir_sdi>
	if (res != FR_OK) return res;
 8005b32:	4680      	mov	r8, r0
 8005b34:	bb98      	cbnz	r0, 8005b9e <dir_find+0x7e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005b36:	f899 3000 	ldrb.w	r3, [r9]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d136      	bne.n	8005bac <dir_find+0x8c>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005b3e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8005b42:	f7fe fec3 	bl	80048cc <xname_sum>
 8005b46:	4607      	mov	r7, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f7ff ff5f 	bl	8005a0c <dir_read.constprop.0>
 8005b4e:	4605      	mov	r5, r0
 8005b50:	b108      	cbz	r0, 8005b56 <dir_find+0x36>
		return res;
 8005b52:	4680      	mov	r8, r0
 8005b54:	e023      	b.n	8005b9e <dir_find+0x7e>
			if (ld_16(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005b56:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8005b5a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8005b5c:	42ba      	cmp	r2, r7
 8005b5e:	d1f3      	bne.n	8005b48 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005b60:	f893 b023 	ldrb.w	fp, [r3, #35]	@ 0x23
 8005b64:	2640      	movs	r6, #64	@ 0x40
 8005b66:	455d      	cmp	r5, fp
 8005b68:	d010      	beq.n	8005b8c <dir_find+0x6c>
				if ((di % SZDIRE) == 0) di += 2;
 8005b6a:	06f1      	lsls	r1, r6, #27
				if (ff_wtoupper(ld_16(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005b6c:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
				if ((di % SZDIRE) == 0) di += 2;
 8005b70:	bf08      	it	eq
 8005b72:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_16(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005b74:	5b98      	ldrh	r0, [r3, r6]
 8005b76:	f002 f989 	bl	8007e8c <ff_wtoupper>
 8005b7a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005b7e:	4682      	mov	sl, r0
 8005b80:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8005b84:	f002 f982 	bl	8007e8c <ff_wtoupper>
 8005b88:	4582      	cmp	sl, r0
 8005b8a:	d00c      	beq.n	8005ba6 <dir_find+0x86>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005b8c:	b2eb      	uxtb	r3, r5
 8005b8e:	459b      	cmp	fp, r3
 8005b90:	d1da      	bne.n	8005b48 <dir_find+0x28>
 8005b92:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005b96:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1d4      	bne.n	8005b48 <dir_find+0x28>
}
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	b007      	add	sp, #28
 8005ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005ba6:	3602      	adds	r6, #2
 8005ba8:	3501      	adds	r5, #1
 8005baa:	e7dc      	b.n	8005b66 <dir_find+0x46>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 8005bb4:	6523      	str	r3, [r4, #80]	@ 0x50
 8005bb6:	4655      	mov	r5, sl
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bbc:	9302      	str	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 8005bbe:	4648      	mov	r0, r9
 8005bc0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005bc4:	f7fe fea8 	bl	8004918 <move_window>
		if (res != FR_OK) break;
 8005bc8:	b9b8      	cbnz	r0, 8005bfa <dir_find+0xda>
		c = dp->dir[DIR_Name];
 8005bca:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8005bcc:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d078      	beq.n	8005cc4 <dir_find+0x1a4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005bd2:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005bd4:	2fe5      	cmp	r7, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005bd6:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 8005bda:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005bdc:	d003      	beq.n	8005be6 <dir_find+0xc6>
 8005bde:	0712      	lsls	r2, r2, #28
 8005be0:	d50d      	bpl.n	8005bfe <dir_find+0xde>
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d00d      	beq.n	8005c02 <dir_find+0xe2>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	6523      	str	r3, [r4, #80]	@ 0x50
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005bec:	25ff      	movs	r5, #255	@ 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff fdd4 	bl	800579e <dir_next>
	} while (res == FR_OK);
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d0e1      	beq.n	8005bbe <dir_find+0x9e>
		res = move_window(fs, dp->sect);
 8005bfa:	4680      	mov	r8, r0
 8005bfc:	e7cf      	b.n	8005b9e <dir_find+0x7e>
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 8005bfe:	2b0f      	cmp	r3, #15
 8005c00:	d14d      	bne.n	8005c9e <dir_find+0x17e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005c02:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 8005c06:	065b      	lsls	r3, r3, #25
 8005c08:	d4f1      	bmi.n	8005bee <dir_find+0xce>
					if (c & LLEF) {		/* Is it start of an entry set? */
 8005c0a:	0678      	lsls	r0, r7, #25
 8005c0c:	d53c      	bpl.n	8005c88 <dir_find+0x168>
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 8005c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						c &= (BYTE)~LLEF;
 8005c10:	f007 07bf 	and.w	r7, r7, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 8005c14:	6523      	str	r3, [r4, #80]	@ 0x50
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 8005c16:	f896 a00d 	ldrb.w	sl, [r6, #13]
	if (ld_16(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8005c1a:	8b73      	ldrh	r3, [r6, #26]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <dir_find+0xcc>
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 8005c20:	7835      	ldrb	r5, [r6, #0]
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8005c22:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c24:	f8d9 300c 	ldr.w	r3, [r9, #12]
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 8005c28:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8005c2c:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8005cd0 <dir_find+0x1b0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c30:	9301      	str	r3, [sp, #4]
	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 8005c32:	230d      	movs	r3, #13
 8005c34:	3d01      	subs	r5, #1
 8005c36:	435d      	muls	r5, r3
		chr = ld_16(dir + LfnOfs[di]);		/* Pick a character from the entry */
 8005c38:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8005c3c:	5af3      	ldrh	r3, [r6, r3]
		if (pchr != 0) {
 8005c3e:	b34a      	cbz	r2, 8005c94 <dir_find+0x174>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8005c40:	2dff      	cmp	r5, #255	@ 0xff
 8005c42:	d8d3      	bhi.n	8005bec <dir_find+0xcc>
 8005c44:	4618      	mov	r0, r3
 8005c46:	9305      	str	r3, [sp, #20]
 8005c48:	f002 f920 	bl	8007e8c <ff_wtoupper>
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	1c69      	adds	r1, r5, #1
 8005c50:	9004      	str	r0, [sp, #16]
 8005c52:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8005c56:	9103      	str	r1, [sp, #12]
 8005c58:	f002 f918 	bl	8007e8c <ff_wtoupper>
 8005c5c:	9a04      	ldr	r2, [sp, #16]
 8005c5e:	4282      	cmp	r2, r0
 8005c60:	d1c4      	bne.n	8005bec <dir_find+0xcc>
			pchr = chr;
 8005c62:	9b05      	ldr	r3, [sp, #20]
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8005c64:	9903      	ldr	r1, [sp, #12]
			pchr = chr;
 8005c66:	461a      	mov	r2, r3
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8005c68:	460d      	mov	r5, r1
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8005c6a:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <dir_find+0x1ac>)
 8005c6c:	459b      	cmp	fp, r3
 8005c6e:	d1e3      	bne.n	8005c38 <dir_find+0x118>
	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 8005c70:	7833      	ldrb	r3, [r6, #0]
 8005c72:	0659      	lsls	r1, r3, #25
 8005c74:	d505      	bpl.n	8005c82 <dir_find+0x162>
 8005c76:	b122      	cbz	r2, 8005c82 <dir_find+0x162>
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1b4      	bne.n	8005bec <dir_find+0xcc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c82:	3f01      	subs	r7, #1
 8005c84:	b2fd      	uxtb	r5, r7
 8005c86:	e7b2      	b.n	8005bee <dir_find+0xce>
 8005c88:	42bd      	cmp	r5, r7
 8005c8a:	d1af      	bne.n	8005bec <dir_find+0xcc>
 8005c8c:	7b73      	ldrb	r3, [r6, #13]
 8005c8e:	4553      	cmp	r3, sl
 8005c90:	d1ac      	bne.n	8005bec <dir_find+0xcc>
 8005c92:	e7c2      	b.n	8005c1a <dir_find+0xfa>
			if (chr != 0xFFFF) return 0;	/* Check filler */
 8005c94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	d0e6      	beq.n	8005c6a <dir_find+0x14a>
 8005c9c:	e7a6      	b.n	8005bec <dir_find+0xcc>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c9e:	b92d      	cbnz	r5, 8005cac <dir_find+0x18c>
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f7fe fd73 	bl	800478c <sum_sfn>
 8005ca6:	4550      	cmp	r0, sl
 8005ca8:	f43f af79 	beq.w	8005b9e <dir_find+0x7e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005cac:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 8005cb0:	07db      	lsls	r3, r3, #31
 8005cb2:	d498      	bmi.n	8005be6 <dir_find+0xc6>
 8005cb4:	220b      	movs	r2, #11
 8005cb6:	9902      	ldr	r1, [sp, #8]
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f010 f8af 	bl	8015e1c <memcmp>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d191      	bne.n	8005be6 <dir_find+0xc6>
 8005cc2:	e76c      	b.n	8005b9e <dir_find+0x7e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8005cc4:	f04f 0804 	mov.w	r8, #4
 8005cc8:	e769      	b.n	8005b9e <dir_find+0x7e>
 8005cca:	bf00      	nop
 8005ccc:	080192ad 	.word	0x080192ad
 8005cd0:	080192a0 	.word	0x080192a0

08005cd4 <dir_register>:
{
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005cd8:	f890 b04f 	ldrb.w	fp, [r0, #79]	@ 0x4f
{
 8005cdc:	b09b      	sub	sp, #108	@ 0x6c
 8005cde:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005ce0:	f01b 05a0 	ands.w	r5, fp, #160	@ 0xa0
 8005ce4:	f040 818f 	bne.w	8006006 <dir_register+0x332>
	FATFS *fs = dp->obj.fs;
 8005ce8:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8005cea:	68f1      	ldr	r1, [r6, #12]
 8005cec:	f831 2015 	ldrh.w	r2, [r1, r5, lsl #1]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d160      	bne.n	8005db6 <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005cf4:	7832      	ldrb	r2, [r6, #0]
 8005cf6:	2a04      	cmp	r2, #4
 8005cf8:	f040 809c 	bne.w	8005e34 <dir_register+0x160>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005cfc:	230f      	movs	r3, #15
 8005cfe:	350e      	adds	r5, #14
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 8005d00:	4620      	mov	r0, r4
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005d02:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 8005d06:	1ca9      	adds	r1, r5, #2
 8005d08:	f7ff fdb2 	bl	8005870 <dir_alloc>
		if (res != FR_OK) return res;
 8005d0c:	4681      	mov	r9, r0
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f040 808a 	bne.w	8005e28 <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 8005d14:	3501      	adds	r5, #1
 8005d16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d18:	eba3 1345 	sub.w	r3, r3, r5, lsl #5
 8005d1c:	6523      	str	r3, [r4, #80]	@ 0x50
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8005d1e:	79e3      	ldrb	r3, [r4, #7]
 8005d20:	075f      	lsls	r7, r3, #29
 8005d22:	d54a      	bpl.n	8005dba <dir_register+0xe6>
			dp->obj.stat &= ~4;
 8005d24:	f023 0304 	bic.w	r3, r3, #4
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8005d28:	4620      	mov	r0, r4
			dp->obj.stat &= ~4;
 8005d2a:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8005d2c:	f7ff f85c 	bl	8004de8 <fill_first_frag>
			if (res != FR_OK) return res;
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d13e      	bne.n	8005db2 <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff f83c 	bl	8004db8 <fill_last_frag>
			if (res != FR_OK) return res;
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d136      	bne.n	8005db2 <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8005d44:	68a3      	ldr	r3, [r4, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d037      	beq.n	8005dba <dir_register+0xe6>
	dp->obj.fs = obj->fs;
 8005d4a:	6823      	ldr	r3, [r4, #0]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005d4c:	a804      	add	r0, sp, #16
	dp->blk_ofs = obj->c_ofs;
 8005d4e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 8005d50:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 8005d52:	6a23      	ldr	r3, [r4, #32]
	dp->obj.n_frag = 0;
 8005d54:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
	dp->obj.sclust = obj->c_scl;
 8005d58:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 8005d5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	dp->blk_ofs = obj->c_ofs;
 8005d5c:	9118      	str	r1, [sp, #96]	@ 0x60
	dp->obj.stat = (BYTE)obj->c_size;
 8005d5e:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005d62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d66:	e9cd 3908 	strd	r3, r9, [sp, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005d6a:	f7fe ff45 	bl	8004bf8 <dir_sdi>
	if (res == FR_OK) {
 8005d6e:	bb00      	cbnz	r0, 8005db2 <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005d70:	a804      	add	r0, sp, #16
 8005d72:	f7ff fda6 	bl	80058c2 <load_xdir>
				if (res != FR_OK) return res;
 8005d76:	b9e0      	cbnz	r0, 8005db2 <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8005d78:	8970      	ldrh	r0, [r6, #10]
 8005d7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d7e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8005d82:	fbe0 2301 	umlal	r2, r3, r0, r1
				st_64(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8005d86:	6d30      	ldr	r0, [r6, #80]	@ 0x50
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8005d88:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_64(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8005d8c:	3038      	adds	r0, #56	@ 0x38
 8005d8e:	f7fe fcc6 	bl	800471e <st_64>
				st_64(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005d92:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8005d94:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8005d98:	3028      	adds	r0, #40	@ 0x28
 8005d9a:	f7fe fcc0 	bl	800471e <st_64>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 8005d9e:	79e3      	ldrb	r3, [r4, #7]
 8005da0:	6d32      	ldr	r2, [r6, #80]	@ 0x50
				res = store_xdir(&dj);				/* Store the object status */
 8005da2:	a804      	add	r0, sp, #16
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
				res = store_xdir(&dj);				/* Store the object status */
 8005dac:	f7ff fdfe 	bl	80059ac <store_xdir>
				if (res != FR_OK) return res;
 8005db0:	b118      	cbz	r0, 8005dba <dir_register+0xe6>
			if (res != FR_OK) return res;
 8005db2:	4681      	mov	r9, r0
 8005db4:	e038      	b.n	8005e28 <dir_register+0x154>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8005db6:	3501      	adds	r5, #1
 8005db8:	e798      	b.n	8005cec <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005dba:	6d34      	ldr	r4, [r6, #80]	@ 0x50
	memset(dirb, 0, 2 * SZDIRE);
 8005dbc:	223f      	movs	r2, #63	@ 0x3f
 8005dbe:	2100      	movs	r1, #0
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005dc0:	68f5      	ldr	r5, [r6, #12]
	memset(dirb, 0, 2 * SZDIRE);
 8005dc2:	1c67      	adds	r7, r4, #1
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f010 f853 	bl	8015e70 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8005dca:	2385      	movs	r3, #133	@ 0x85
	nlen = n_c1 = 0; chr = 1;
 8005dcc:	2001      	movs	r0, #1
	i = SZDIRE * 2;	/* Top of file name entries */
 8005dce:	2240      	movs	r2, #64	@ 0x40
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8005dd0:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8005dd2:	23c0      	movs	r3, #192	@ 0xc0
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8005dd4:	f04f 0ec1 	mov.w	lr, #193	@ 0xc1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8005dd8:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = n_c1 = 0; chr = 1;
 8005ddc:	2300      	movs	r3, #0
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8005dde:	4619      	mov	r1, r3
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8005de0:	4698      	mov	r8, r3
 8005de2:	1c56      	adds	r6, r2, #1
 8005de4:	f804 e002 	strb.w	lr, [r4, r2]
 8005de8:	3202      	adds	r2, #2
 8005dea:	f804 8006 	strb.w	r8, [r4, r6]
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8005dee:	b120      	cbz	r0, 8005dfa <dir_register+0x126>
 8005df0:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8005df4:	b108      	cbz	r0, 8005dfa <dir_register+0x126>
 8005df6:	3301      	adds	r3, #1
 8005df8:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8005dfa:	0a06      	lsrs	r6, r0, #8
 8005dfc:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
 8005dfe:	54be      	strb	r6, [r7, r2]
			i += 2;
 8005e00:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
 8005e02:	06d6      	lsls	r6, r2, #27
 8005e04:	d1f3      	bne.n	8005dee <dir_register+0x11a>
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 8005e06:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 8005e0a:	f101 0c01 	add.w	ip, r1, #1
 8005e0e:	b97e      	cbnz	r6, 8005e30 <dir_register+0x15c>
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 8005e10:	3102      	adds	r1, #2
	st_16(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8005e12:	4628      	mov	r0, r5
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8005e14:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 8005e18:	7061      	strb	r1, [r4, #1]
	st_16(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8005e1a:	f7fe fd57 	bl	80048cc <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 8005e1e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 8005e22:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 8005e24:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
}
 8005e28:	4648      	mov	r0, r9
 8005e2a:	b01b      	add	sp, #108	@ 0x6c
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e30:	4661      	mov	r1, ip
 8005e32:	e7d6      	b.n	8005de2 <dir_register+0x10e>
	memcpy(sn, dp->fn, 12);
 8005e34:	f104 0744 	add.w	r7, r4, #68	@ 0x44
 8005e38:	f10d 0810 	add.w	r8, sp, #16
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e3c:	f01b 0f01 	tst.w	fp, #1
	memcpy(sn, dp->fn, 12);
 8005e40:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005e44:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e48:	f000 80e5 	beq.w	8006016 <dir_register+0x342>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e4c:	2240      	movs	r2, #64	@ 0x40
		for (n = 1; n < 100; n++) {
 8005e4e:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e52:	f884 204f 	strb.w	r2, [r4, #79]	@ 0x4f
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8005e56:	46bc      	mov	ip, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, (WORD)n);	/* Generate a numbered name */
 8005e58:	68f3      	ldr	r3, [r6, #12]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005e5a:	f1ba 0f05 	cmp.w	sl, #5
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8005e5e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005e62:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005e66:	f82c 2b02 	strh.w	r2, [ip], #2
 8005e6a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005e6e:	f88c 2000 	strb.w	r2, [ip]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005e72:	d907      	bls.n	8005e84 <dir_register+0x1b0>
 8005e74:	1e98      	subs	r0, r3, #2
		crc_sreg = seq;
 8005e76:	4652      	mov	r2, sl
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8005e78:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d149      	bne.n	8005f14 <dir_register+0x240>
		seq = (WORD)crc_sreg;
 8005e80:	b292      	uxth	r2, r2
 8005e82:	e001      	b.n	8005e88 <dir_register+0x1b4>
 8005e84:	fa1f f28a 	uxth.w	r2, sl
 8005e88:	46c4      	mov	ip, r8
		crc_sreg = seq;
 8005e8a:	2007      	movs	r0, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8005e8c:	f002 090f 	and.w	r9, r2, #15
 8005e90:	4696      	mov	lr, r2
 8005e92:	0912      	lsrs	r2, r2, #4
 8005e94:	f109 0130 	add.w	r1, r9, #48	@ 0x30
		if (c > '9') c += 7;
 8005e98:	2939      	cmp	r1, #57	@ 0x39
 8005e9a:	bf88      	it	hi
 8005e9c:	f109 0137 	addhi.w	r1, r9, #55	@ 0x37
	} while (i && seq);
 8005ea0:	f1b0 0901 	subs.w	r9, r0, #1
		ns[i--] = c;
 8005ea4:	f80c 1d01 	strb.w	r1, [ip, #-1]!
	} while (i && seq);
 8005ea8:	d047      	beq.n	8005f3a <dir_register+0x266>
 8005eaa:	f1be 0f0f 	cmp.w	lr, #15
 8005eae:	d842      	bhi.n	8005f36 <dir_register+0x262>
	ns[i] = '~';
 8005eb0:	f109 0368 	add.w	r3, r9, #104	@ 0x68
 8005eb4:	217e      	movs	r1, #126	@ 0x7e
 8005eb6:	eb0d 0203 	add.w	r2, sp, r3
 8005eba:	f802 1c60 	strb.w	r1, [r2, #-96]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005ebe:	2100      	movs	r1, #0
			if (j == i - 1) break;
 8005ec0:	1e82      	subs	r2, r0, #2
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005ec2:	4549      	cmp	r1, r9
 8005ec4:	d202      	bcs.n	8005ecc <dir_register+0x1f8>
 8005ec6:	5c78      	ldrb	r0, [r7, r1]
 8005ec8:	2820      	cmp	r0, #32
 8005eca:	d138      	bne.n	8005f3e <dir_register+0x26a>
 8005ecc:	3143      	adds	r1, #67	@ 0x43
 8005ece:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 8005ed2:	4421      	add	r1, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005ed4:	f1b9 0f07 	cmp.w	r9, #7
 8005ed8:	bf97      	itett	ls
 8005eda:	f109 0368 	addls.w	r3, r9, #104	@ 0x68
 8005ede:	2220      	movhi	r2, #32
 8005ee0:	f109 0901 	addls.w	r9, r9, #1
 8005ee4:	eb0d 0203 	addls.w	r2, sp, r3
 8005ee8:	bf98      	it	ls
 8005eea:	f812 2c60 	ldrbls.w	r2, [r2, #-96]
 8005eee:	f801 2f01 	strb.w	r2, [r1, #1]!
	} while (j < 8);
 8005ef2:	4288      	cmp	r0, r1
 8005ef4:	d1ee      	bne.n	8005ed4 <dir_register+0x200>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff fe12 	bl	8005b20 <dir_find>
			if (res != FR_OK) break;
 8005efc:	4681      	mov	r9, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f040 8084 	bne.w	800600c <dir_register+0x338>
		for (n = 1; n < 100; n++) {
 8005f04:	f10a 0a01 	add.w	sl, sl, #1
 8005f08:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8005f0c:	d1a3      	bne.n	8005e56 <dir_register+0x182>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005f0e:	f04f 0907 	mov.w	r9, #7
 8005f12:	e789      	b.n	8005e28 <dir_register+0x154>
 8005f14:	f04f 0c10 	mov.w	ip, #16
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8005f18:	f001 0e01 	and.w	lr, r1, #1
				wc >>= 1;
 8005f1c:	0849      	lsrs	r1, r1, #1
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8005f1e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 8005f22:	03d3      	lsls	r3, r2, #15
 8005f24:	bf44      	itt	mi
 8005f26:	f482 3288 	eormi.w	r2, r2, #69632	@ 0x11000
 8005f2a:	f082 0221 	eormi.w	r2, r2, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 8005f2e:	f1bc 0c01 	subs.w	ip, ip, #1
 8005f32:	d1f1      	bne.n	8005f18 <dir_register+0x244>
 8005f34:	e7a0      	b.n	8005e78 <dir_register+0x1a4>
		ns[i--] = c;
 8005f36:	4648      	mov	r0, r9
 8005f38:	e7a8      	b.n	8005e8c <dir_register+0x1b8>
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e7b8      	b.n	8005eb0 <dir_register+0x1dc>
 8005f3e:	9201      	str	r2, [sp, #4]
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8005f40:	f7fe fbfc 	bl	800473c <dbc_1st>
 8005f44:	9a01      	ldr	r2, [sp, #4]
 8005f46:	b110      	cbz	r0, 8005f4e <dir_register+0x27a>
			if (j == i - 1) break;
 8005f48:	428a      	cmp	r2, r1
 8005f4a:	d0bf      	beq.n	8005ecc <dir_register+0x1f8>
			j++;
 8005f4c:	3101      	adds	r1, #1
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005f4e:	3101      	adds	r1, #1
 8005f50:	e7b7      	b.n	8005ec2 <dir_register+0x1ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8005f52:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f54:	4620      	mov	r0, r4
 8005f56:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8005f5a:	f7fe fe4d 	bl	8004bf8 <dir_sdi>
		if (res == FR_OK) {
 8005f5e:	4681      	mov	r9, r0
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f47f af61 	bne.w	8005e28 <dir_register+0x154>
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005f66:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f7fe fc0e 	bl	800478c <sum_sfn>
 8005f70:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8005f72:	4630      	mov	r0, r6
 8005f74:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8005f78:	f7fe fcce 	bl	8004918 <move_window>
 8005f7c:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	f47f af52 	bne.w	8005e28 <dir_register+0x154>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f86:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005f88:	9a01      	ldr	r2, [sp, #4]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8005f8a:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005f8e:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005f92:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 8005f94:	f04f 020f 	mov.w	r2, #15
 8005f98:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 800607c <dir_register+0x3a8>
 8005f9c:	72da      	strb	r2, [r3, #11]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8005f9e:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 8005fa0:	7318      	strb	r0, [r3, #12]
	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8005fa2:	fb0c f202 	mul.w	r2, ip, r2
	di = chr = 0;
 8005fa6:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8005fa8:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8005faa:	76d8      	strb	r0, [r3, #27]
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005fac:	4540      	cmp	r0, r8
		st_16(dir + LfnOfs[di], chr);	/* Set it */
 8005fae:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++di < 13);
 8005fb2:	f10c 0c01 	add.w	ip, ip, #1
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005fb6:	bf18      	it	ne
 8005fb8:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_16(dir + LfnOfs[di], chr);	/* Set it */
 8005fbc:	eb03 0b09 	add.w	fp, r3, r9
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8005fc0:	bf18      	it	ne
 8005fc2:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005fc4:	f803 0009 	strb.w	r0, [r3, r9]
 8005fc8:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	bf08      	it	eq
 8005fd0:	4640      	moveq	r0, r8
	} while (++di < 13);
 8005fd2:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8005fd6:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++di < 13);
 8005fda:	d1e7      	bne.n	8005fac <dir_register+0x2d8>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 8005fdc:	4540      	cmp	r0, r8
 8005fde:	d002      	beq.n	8005fe6 <dir_register+0x312>
 8005fe0:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8005fe4:	b90a      	cbnz	r2, 8005fea <dir_register+0x316>
 8005fe6:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 8005fea:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8005fec:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4620      	mov	r0, r4
				fs->wflag = 1;
 8005ff2:	7133      	strb	r3, [r6, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005ff4:	f7ff fbd3 	bl	800579e <dir_next>
			} while (res == FR_OK && --n_ent);
 8005ff8:	4681      	mov	r9, r0
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f47f af14 	bne.w	8005e28 <dir_register+0x154>
 8006000:	3d01      	subs	r5, #1
 8006002:	d1b6      	bne.n	8005f72 <dir_register+0x29e>
 8006004:	e01b      	b.n	800603e <dir_register+0x36a>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006006:	f04f 0906 	mov.w	r9, #6
 800600a:	e70d      	b.n	8005e28 <dir_register+0x154>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800600c:	2804      	cmp	r0, #4
 800600e:	f47f af0b 	bne.w	8005e28 <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006012:	f884 b04f 	strb.w	fp, [r4, #79]	@ 0x4f
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006016:	f01b 0f02 	tst.w	fp, #2
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800601a:	4620      	mov	r0, r4
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800601c:	bf1b      	ittet	ne
 800601e:	350c      	addne	r5, #12
 8006020:	230d      	movne	r3, #13
 8006022:	2501      	moveq	r5, #1
 8006024:	fbb5 f5f3 	udivne	r5, r5, r3
 8006028:	bf18      	it	ne
 800602a:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800602c:	4629      	mov	r1, r5
 800602e:	f7ff fc1f 	bl	8005870 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8006032:	4681      	mov	r9, r0
 8006034:	2800      	cmp	r0, #0
 8006036:	f47f aef7 	bne.w	8005e28 <dir_register+0x154>
 800603a:	3d01      	subs	r5, #1
 800603c:	d189      	bne.n	8005f52 <dir_register+0x27e>
		res = move_window(fs, dp->sect);
 800603e:	4630      	mov	r0, r6
 8006040:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8006044:	f7fe fc68 	bl	8004918 <move_window>
		if (res == FR_OK) {
 8006048:	4681      	mov	r9, r0
 800604a:	2800      	cmp	r0, #0
 800604c:	f47f aeec 	bne.w	8005e28 <dir_register+0x154>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006050:	4601      	mov	r1, r0
 8006052:	2220      	movs	r2, #32
 8006054:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006056:	f00f ff0b 	bl	8015e70 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800605a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800605c:	cf03      	ldmia	r7!, {r0, r1}
 800605e:	6018      	str	r0, [r3, #0]
 8006060:	6059      	str	r1, [r3, #4]
 8006062:	78ba      	ldrb	r2, [r7, #2]
 8006064:	8839      	ldrh	r1, [r7, #0]
 8006066:	729a      	strb	r2, [r3, #10]
 8006068:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800606a:	f894 304f 	ldrb.w	r3, [r4, #79]	@ 0x4f
 800606e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006070:	f003 0318 	and.w	r3, r3, #24
 8006074:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	7133      	strb	r3, [r6, #4]
 800607a:	e6d5      	b.n	8005e28 <dir_register+0x154>
 800607c:	080192a0 	.word	0x080192a0

08006080 <init_alloc_info.isra.0>:
static void init_alloc_info (
 8006080:	b510      	push	{r4, lr}
 8006082:	4604      	mov	r4, r0
 8006084:	460a      	mov	r2, r1
	obj->sclust = ld_32(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8006086:	3034      	adds	r0, #52	@ 0x34
 8006088:	f7fe fb3b 	bl	8004702 <ld_32>
 800608c:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_64(fs->dirbuf + XDIR_FileSize);	/* Size */
 800608e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006092:	f7fe fb38 	bl	8004706 <ld_64>
 8006096:	e9c2 0104 	strd	r0, r1, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;			/* Allocation status */
 800609a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	71d3      	strb	r3, [r2, #7]
	obj->n_frag = 0;									/* No last fragment info */
 80060a4:	2300      	movs	r3, #0
 80060a6:	61d3      	str	r3, [r2, #28]
}
 80060a8:	bd10      	pop	{r4, pc}

080060aa <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 80060aa:	2803      	cmp	r0, #3
	cl = ld_16(dir + DIR_FstClusLO);
 80060ac:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_16(dir + DIR_FstClusHI) << 16;
 80060ae:	bf04      	itt	eq
 80060b0:	8a8a      	ldrheq	r2, [r1, #20]
 80060b2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	4770      	bx	lr
	...

080060bc <follow_path>:
{
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 80060c0:	6803      	ldr	r3, [r0, #0]
{
 80060c2:	b085      	sub	sp, #20
 80060c4:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80060c6:	9302      	str	r3, [sp, #8]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80060c8:	460e      	mov	r6, r1
 80060ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80060d0:	d0fa      	beq.n	80060c8 <follow_path+0xc>
 80060d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80060d4:	d0f8      	beq.n	80060c8 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80060d6:	2100      	movs	r1, #0
 80060d8:	60a9      	str	r1, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80060da:	61e9      	str	r1, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80060dc:	7833      	ldrb	r3, [r6, #0]
 80060de:	2b1f      	cmp	r3, #31
 80060e0:	f200 80d9 	bhi.w	8006296 <follow_path+0x1da>
		dp->fn[NSFLAG] = NS_NONAME;
 80060e4:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 80060e6:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 80060e8:	f885 304f 	strb.w	r3, [r5, #79]	@ 0x4f
}
 80060ec:	b005      	add	sp, #20
 80060ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80060f2:	f7fe bd81 	b.w	8004bf8 <dir_sdi>
		sb = (BYTE)*p++;		/* Get 2nd byte */
 80060f6:	46b2      	mov	sl, r6
	if (DbcTbl && c >= DbcTbl[4]) {
 80060f8:	4b99      	ldr	r3, [pc, #612]	@ (8006360 <follow_path+0x2a4>)
		sb = (BYTE)*p++;		/* Get 2nd byte */
 80060fa:	7872      	ldrb	r2, [r6, #1]
	if (DbcTbl && c >= DbcTbl[4]) {
 80060fc:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	ba40      	rev16	r0, r0
 8006104:	b280      	uxth	r0, r0
 8006106:	b1a3      	cbz	r3, 8006132 <follow_path+0x76>
 8006108:	7919      	ldrb	r1, [r3, #4]
 800610a:	4291      	cmp	r1, r2
 800610c:	d811      	bhi.n	8006132 <follow_path+0x76>
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 800610e:	7959      	ldrb	r1, [r3, #5]
 8006110:	4291      	cmp	r1, r2
 8006112:	f080 80cf 	bcs.w	80062b4 <follow_path+0x1f8>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 8006116:	7999      	ldrb	r1, [r3, #6]
 8006118:	4291      	cmp	r1, r2
 800611a:	d803      	bhi.n	8006124 <follow_path+0x68>
 800611c:	79d9      	ldrb	r1, [r3, #7]
 800611e:	4291      	cmp	r1, r2
 8006120:	f080 80c8 	bcs.w	80062b4 <follow_path+0x1f8>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 8006124:	7a19      	ldrb	r1, [r3, #8]
 8006126:	4291      	cmp	r1, r2
 8006128:	d803      	bhi.n	8006132 <follow_path+0x76>
 800612a:	7a5b      	ldrb	r3, [r3, #9]
 800612c:	4293      	cmp	r3, r2
 800612e:	f080 80c1 	bcs.w	80062b4 <follow_path+0x1f8>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006132:	2006      	movs	r0, #6
 8006134:	e15e      	b.n	80063f4 <follow_path+0x338>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8006136:	282f      	cmp	r0, #47	@ 0x2f
 8006138:	f000 815f 	beq.w	80063fa <follow_path+0x33e>
 800613c:	285c      	cmp	r0, #92	@ 0x5c
 800613e:	f000 815c 	beq.w	80063fa <follow_path+0x33e>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006142:	287f      	cmp	r0, #127	@ 0x7f
 8006144:	d805      	bhi.n	8006152 <follow_path+0x96>
 8006146:	4601      	mov	r1, r0
 8006148:	4620      	mov	r0, r4
 800614a:	f00f fe99 	bl	8015e80 <strchr>
 800614e:	2800      	cmp	r0, #0
 8006150:	d1ef      	bne.n	8006132 <follow_path+0x76>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006152:	2fff      	cmp	r7, #255	@ 0xff
 8006154:	d0ed      	beq.n	8006132 <follow_path+0x76>
		lfn[di++] = wc;				/* Store the Unicode character */
 8006156:	f82b 6017 	strh.w	r6, [fp, r7, lsl #1]
	for (;;) {
 800615a:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
 800615c:	4656      	mov	r6, sl
 800615e:	e09f      	b.n	80062a0 <follow_path+0x1e4>
		wc = lfn[di - 1];
 8006160:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (wc != ' ' && wc != '.') break;
 8006164:	2a20      	cmp	r2, #32
 8006166:	d002      	beq.n	800616e <follow_path+0xb2>
 8006168:	2a2e      	cmp	r2, #46	@ 0x2e
 800616a:	f040 80b5 	bne.w	80062d8 <follow_path+0x21c>
		di--;
 800616e:	3f01      	subs	r7, #1
 8006170:	e0af      	b.n	80062d2 <follow_path+0x216>
		if (i >= ni || si == di) {		/* End of field? */
 8006172:	4599      	cmp	r9, r3
 8006174:	f080 8101 	bcs.w	800637a <follow_path+0x2be>
 8006178:	9a00      	ldr	r2, [sp, #0]
 800617a:	42ba      	cmp	r2, r7
 800617c:	d113      	bne.n	80061a6 <follow_path+0xea>
			if (ni == 11) {				/* Name extension overflow? */
 800617e:	2b0b      	cmp	r3, #11
 8006180:	d108      	bne.n	8006194 <follow_path+0xd8>
 8006182:	e0fd      	b.n	8006380 <follow_path+0x2c4>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8006184:	9a00      	ldr	r2, [sp, #0]
 8006186:	42ba      	cmp	r2, r7
 8006188:	d004      	beq.n	8006194 <follow_path+0xd8>
 800618a:	f044 0403 	orr.w	r4, r4, #3
 800618e:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 8006190:	f200 80fa 	bhi.w	8006388 <follow_path+0x2cc>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8006194:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006198:	230b      	movs	r3, #11
 800619a:	f04f 0908 	mov.w	r9, #8
 800619e:	9700      	str	r7, [sp, #0]
 80061a0:	fa5f f888 	uxtb.w	r8, r8
			continue;
 80061a4:	e0cc      	b.n	8006340 <follow_path+0x284>
		if (wc >= 0x80) {	/* Is this an extended character? */
 80061a6:	2e7f      	cmp	r6, #127	@ 0x7f
 80061a8:	d947      	bls.n	800623a <follow_path+0x17e>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80061aa:	f044 0202 	orr.w	r2, r4, #2
 80061ae:	9303      	str	r3, [sp, #12]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	9201      	str	r2, [sp, #4]
			if (ExCvt) {	/* In SBCS cfg */
 80061b4:	4a6b      	ldr	r2, [pc, #428]	@ (8006364 <follow_path+0x2a8>)
 80061b6:	6811      	ldr	r1, [r2, #0]
 80061b8:	b1e9      	cbz	r1, 80061f6 <follow_path+0x13a>
				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80061ba:	4b6b      	ldr	r3, [pc, #428]	@ (8006368 <follow_path+0x2ac>)
 80061bc:	4630      	mov	r0, r6
 80061be:	8819      	ldrh	r1, [r3, #0]
 80061c0:	f001 fda4 	bl	8007d0c <ff_uni2oem>
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 80061c4:	f010 0f80 	tst.w	r0, #128	@ 0x80
				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80061c8:	4606      	mov	r6, r0
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	d01c      	beq.n	8006208 <follow_path+0x14c>
 80061ce:	4a65      	ldr	r2, [pc, #404]	@ (8006364 <follow_path+0x2a8>)
 80061d0:	f000 067f 	and.w	r6, r0, #127	@ 0x7f
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	5d96      	ldrb	r6, [r2, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 80061d8:	b136      	cbz	r6, 80061e8 <follow_path+0x12c>
 80061da:	4631      	mov	r1, r6
 80061dc:	4863      	ldr	r0, [pc, #396]	@ (800636c <follow_path+0x2b0>)
 80061de:	9303      	str	r3, [sp, #12]
 80061e0:	f00f fe4e 	bl	8015e80 <strchr>
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	b350      	cbz	r0, 800623e <follow_path+0x182>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	265f      	movs	r6, #95	@ 0x5f
 80061ec:	f042 0203 	orr.w	r2, r2, #3
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	9201      	str	r2, [sp, #4]
 80061f4:	e019      	b.n	800622a <follow_path+0x16e>
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
 80061f6:	4630      	mov	r0, r6
 80061f8:	f001 fe48 	bl	8007e8c <ff_wtoupper>
 80061fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006368 <follow_path+0x2ac>)
 80061fe:	8819      	ldrh	r1, [r3, #0]
 8006200:	f001 fd84 	bl	8007d0c <ff_uni2oem>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	4606      	mov	r6, r0
		if (wc >= 0x100) {				/* Is this a DBC? */
 8006208:	2eff      	cmp	r6, #255	@ 0xff
 800620a:	d9e5      	bls.n	80061d8 <follow_path+0x11c>
			if (i >= ni - 1) {			/* Field overflow? */
 800620c:	1e5a      	subs	r2, r3, #1
 800620e:	4591      	cmp	r9, r2
 8006210:	d304      	bcc.n	800621c <follow_path+0x160>
				cf |= NS_LOSS | NS_LFN;
 8006212:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
 8006216:	4699      	mov	r9, r3
				cf |= NS_LOSS | NS_LFN;
 8006218:	b2e4      	uxtb	r4, r4
				i = ni; continue;		/* Next field */
 800621a:	e091      	b.n	8006340 <follow_path+0x284>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800621c:	eb05 0209 	add.w	r2, r5, r9
 8006220:	0a31      	lsrs	r1, r6, #8
 8006222:	f109 0901 	add.w	r9, r9, #1
 8006226:	f882 1044 	strb.w	r1, [r2, #68]	@ 0x44
		dp->fn[i++] = (BYTE)wc;
 800622a:	eb05 0209 	add.w	r2, r5, r9
 800622e:	9c01      	ldr	r4, [sp, #4]
 8006230:	f109 0901 	add.w	r9, r9, #1
 8006234:	f882 6044 	strb.w	r6, [r2, #68]	@ 0x44
 8006238:	e082      	b.n	8006340 <follow_path+0x284>
 800623a:	9401      	str	r4, [sp, #4]
 800623c:	e7cd      	b.n	80061da <follow_path+0x11e>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800623e:	f1a6 0241 	sub.w	r2, r6, #65	@ 0x41
 8006242:	b292      	uxth	r2, r2
 8006244:	2a19      	cmp	r2, #25
 8006246:	d802      	bhi.n	800624e <follow_path+0x192>
					b |= 2;
 8006248:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 800624c:	e7ed      	b.n	800622a <follow_path+0x16e>
 800624e:	f1a6 0261 	sub.w	r2, r6, #97	@ 0x61
 8006252:	b292      	uxth	r2, r2
 8006254:	2a19      	cmp	r2, #25
					b |= 1; wc -= 0x20;
 8006256:	bf9e      	ittt	ls
 8006258:	3e20      	subls	r6, #32
 800625a:	f048 0801 	orrls.w	r8, r8, #1
 800625e:	b2b6      	uxthls	r6, r6
 8006260:	e7e3      	b.n	800622a <follow_path+0x16e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006262:	075a      	lsls	r2, r3, #29
 8006264:	f100 80c6 	bmi.w	80063f4 <follow_path+0x338>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006268:	79ab      	ldrb	r3, [r5, #6]
 800626a:	06db      	lsls	r3, r3, #27
 800626c:	d575      	bpl.n	800635a <follow_path+0x29e>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800626e:	9b02      	ldr	r3, [sp, #8]
 8006270:	7818      	ldrb	r0, [r3, #0]
 8006272:	2804      	cmp	r0, #4
 8006274:	d166      	bne.n	8006344 <follow_path+0x288>
				dp->obj.c_scl = dp->obj.sclust;
 8006276:	68ab      	ldr	r3, [r5, #8]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8006278:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800627a:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
 800627c:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800627e:	692b      	ldr	r3, [r5, #16]
 8006280:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006284:	4313      	orrs	r3, r2
 8006286:	626b      	str	r3, [r5, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8006288:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800628a:	62ab      	str	r3, [r5, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006290:	f7ff fef6 	bl	8006080 <init_alloc_info.isra.0>
{
 8006294:	4656      	mov	r6, sl
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	2700      	movs	r7, #0
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800629a:	4c35      	ldr	r4, [pc, #212]	@ (8006370 <follow_path+0x2b4>)
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800629c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
 80062a0:	7831      	ldrb	r1, [r6, #0]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 80062a2:	4608      	mov	r0, r1
 80062a4:	f7fe fa4a 	bl	800473c <dbc_1st>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f47f af24 	bne.w	80060f6 <follow_path+0x3a>
	wc = (BYTE)*p++;			/* Get a byte */
 80062ae:	4608      	mov	r0, r1
 80062b0:	f106 0a01 	add.w	sl, r6, #1
	if (wc != 0) {
 80062b4:	b150      	cbz	r0, 80062cc <follow_path+0x210>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80062b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006368 <follow_path+0x2ac>)
 80062b8:	8819      	ldrh	r1, [r3, #0]
 80062ba:	f001 fd8d 	bl	8007dd8 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80062be:	4606      	mov	r6, r0
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f43f af36 	beq.w	8006132 <follow_path+0x76>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 80062c6:	281f      	cmp	r0, #31
 80062c8:	f63f af35 	bhi.w	8006136 <follow_path+0x7a>
		cf = NS_LAST;			/* Last segment */
 80062cc:	2404      	movs	r4, #4
	while (di) {					/* Snip off trailing spaces and dots if exist */
 80062ce:	eb0b 0347 	add.w	r3, fp, r7, lsl #1
 80062d2:	2f00      	cmp	r7, #0
 80062d4:	f47f af44 	bne.w	8006160 <follow_path+0xa4>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80062d8:	2300      	movs	r3, #0
 80062da:	eb0b 0147 	add.w	r1, fp, r7, lsl #1
 80062de:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	f43f af25 	beq.w	8006132 <follow_path+0x76>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80062e8:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
 80062ec:	461a      	mov	r2, r3
 80062ee:	3301      	adds	r3, #1
 80062f0:	2820      	cmp	r0, #32
 80062f2:	d0f9      	beq.n	80062e8 <follow_path+0x22c>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 80062f4:	b90a      	cbnz	r2, 80062fa <follow_path+0x23e>
 80062f6:	282e      	cmp	r0, #46	@ 0x2e
 80062f8:	d102      	bne.n	8006300 <follow_path+0x244>
 80062fa:	f044 0403 	orr.w	r4, r4, #3
 80062fe:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8006300:	460b      	mov	r3, r1
 8006302:	f833 1d02 	ldrh.w	r1, [r3, #-2]!
 8006306:	292e      	cmp	r1, #46	@ 0x2e
 8006308:	d001      	beq.n	800630e <follow_path+0x252>
 800630a:	3f01      	subs	r7, #1
 800630c:	d1f9      	bne.n	8006302 <follow_path+0x246>
	memset(dp->fn, ' ', 11);
 800630e:	f04f 3320 	mov.w	r3, #538976288	@ 0x20202020
	i = b = 0; ni = 8;
 8006312:	f04f 0900 	mov.w	r9, #0
	memset(dp->fn, ' ', 11);
 8006316:	64ab      	str	r3, [r5, #72]	@ 0x48
	i = b = 0; ni = 8;
 8006318:	46c8      	mov	r8, r9
	memset(dp->fn, ' ', 11);
 800631a:	646b      	str	r3, [r5, #68]	@ 0x44
 800631c:	f8c5 304b 	str.w	r3, [r5, #75]	@ 0x4b
	i = b = 0; ni = 8;
 8006320:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
 8006322:	1c51      	adds	r1, r2, #1
 8006324:	f83b 6012 	ldrh.w	r6, [fp, r2, lsl #1]
 8006328:	9100      	str	r1, [sp, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 800632a:	b36e      	cbz	r6, 8006388 <follow_path+0x2cc>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800632c:	2e20      	cmp	r6, #32
 800632e:	d004      	beq.n	800633a <follow_path+0x27e>
 8006330:	2e2e      	cmp	r6, #46	@ 0x2e
 8006332:	f47f af1e 	bne.w	8006172 <follow_path+0xb6>
 8006336:	42b9      	cmp	r1, r7
 8006338:	d01c      	beq.n	8006374 <follow_path+0x2b8>
			cf |= NS_LOSS | NS_LFN;
 800633a:	f044 0403 	orr.w	r4, r4, #3
 800633e:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 8006340:	9a00      	ldr	r2, [sp, #0]
 8006342:	e7ee      	b.n	8006322 <follow_path+0x266>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800634a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800634c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006350:	4419      	add	r1, r3
 8006352:	f7ff feaa 	bl	80060aa <ld_clust.isra.0>
 8006356:	60a8      	str	r0, [r5, #8]
 8006358:	e79c      	b.n	8006294 <follow_path+0x1d8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800635a:	2005      	movs	r0, #5
	return res;
 800635c:	e04a      	b.n	80063f4 <follow_path+0x338>
 800635e:	bf00      	nop
 8006360:	20006738 	.word	0x20006738
 8006364:	2000673c 	.word	0x2000673c
 8006368:	20006740 	.word	0x20006740
 800636c:	08016dbf 	.word	0x08016dbf
 8006370:	08016db6 	.word	0x08016db6
		if (i >= ni || si == di) {		/* End of field? */
 8006374:	4599      	cmp	r9, r3
 8006376:	f4ff af02 	bcc.w	800617e <follow_path+0xc2>
			if (ni == 11) {				/* Name extension overflow? */
 800637a:	2b0b      	cmp	r3, #11
 800637c:	f47f af02 	bne.w	8006184 <follow_path+0xc8>
				cf |= NS_LOSS | NS_LFN;
 8006380:	f044 0403 	orr.w	r4, r4, #3
				break;
 8006384:	230b      	movs	r3, #11
				cf |= NS_LOSS | NS_LFN;
 8006386:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006388:	f895 2044 	ldrb.w	r2, [r5, #68]	@ 0x44
 800638c:	2ae5      	cmp	r2, #229	@ 0xe5
 800638e:	bf04      	itt	eq
 8006390:	2205      	moveq	r2, #5
 8006392:	f885 2044 	strbeq.w	r2, [r5, #68]	@ 0x44
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8006396:	2b08      	cmp	r3, #8
 8006398:	bf04      	itt	eq
 800639a:	ea4f 0888 	moveq.w	r8, r8, lsl #2
 800639e:	fa5f f888 	uxtbeq.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80063a2:	f008 030c 	and.w	r3, r8, #12
 80063a6:	2b0c      	cmp	r3, #12
 80063a8:	d003      	beq.n	80063b2 <follow_path+0x2f6>
 80063aa:	f008 0303 	and.w	r3, r8, #3
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d102      	bne.n	80063b8 <follow_path+0x2fc>
 80063b2:	f044 0402 	orr.w	r4, r4, #2
 80063b6:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80063b8:	07a1      	lsls	r1, r4, #30
 80063ba:	d40b      	bmi.n	80063d4 <follow_path+0x318>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80063bc:	f348 0300 	sbfx	r3, r8, #0, #1
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80063c0:	f018 0f04 	tst.w	r8, #4
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	ea43 0304 	orr.w	r3, r3, r4
 80063cc:	b2dc      	uxtb	r4, r3
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80063ce:	bf18      	it	ne
 80063d0:	f044 0408 	orrne.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 80063d4:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80063d6:	f885 404f 	strb.w	r4, [r5, #79]	@ 0x4f
			res = dir_find(dp);				/* Find an object with the segment name */
 80063da:	f7ff fba1 	bl	8005b20 <dir_find>
			ns = dp->fn[NSFLAG];
 80063de:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
			if (res != FR_OK) {				/* Failed to find the object */
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f af3d 	beq.w	8006262 <follow_path+0x1a6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063e8:	2804      	cmp	r0, #4
 80063ea:	d103      	bne.n	80063f4 <follow_path+0x338>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063ec:	f013 0f04 	tst.w	r3, #4
 80063f0:	bf08      	it	eq
 80063f2:	2005      	moveq	r0, #5
}
 80063f4:	b005      	add	sp, #20
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wc < ' ') {				/* Stopped at end of the path? */
 80063fa:	4653      	mov	r3, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 80063fc:	781c      	ldrb	r4, [r3, #0]
 80063fe:	469a      	mov	sl, r3
 8006400:	3301      	adds	r3, #1
 8006402:	2c2f      	cmp	r4, #47	@ 0x2f
 8006404:	d0fa      	beq.n	80063fc <follow_path+0x340>
 8006406:	2c5c      	cmp	r4, #92	@ 0x5c
 8006408:	d0f8      	beq.n	80063fc <follow_path+0x340>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800640a:	2c1f      	cmp	r4, #31
 800640c:	bf8c      	ite	hi
 800640e:	2400      	movhi	r4, #0
 8006410:	2401      	movls	r4, #1
 8006412:	00a4      	lsls	r4, r4, #2
 8006414:	e75b      	b.n	80062ce <follow_path+0x212>
 8006416:	bf00      	nop

08006418 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8006418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800641a:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800641e:	a803      	add	r0, sp, #12
{
 8006420:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8006422:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8006424:	f7fe f9d7 	bl	80047d6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006428:	2800      	cmp	r0, #0
 800642a:	db18      	blt.n	800645e <f_mount+0x46>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800642c:	4a0d      	ldr	r2, [pc, #52]	@ (8006464 <f_mount+0x4c>)
 800642e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {					/* Unregister current filesystem object if registered */
 8006432:	b11b      	cbz	r3, 800643c <f_mount+0x24>
		FatFs[vol] = 0;
 8006434:	2100      	movs	r1, #0
 8006436:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800643a:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	b123      	cbz	r3, 800644a <f_mount+0x32>
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006440:	2100      	movs	r1, #0
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8006442:	7058      	strb	r0, [r3, #1]
		FatFs[vol] = fs;		/* Register new fs object */
 8006444:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006448:	7019      	strb	r1, [r3, #0]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800644a:	b12c      	cbz	r4, 8006458 <f_mount+0x40>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800644c:	2200      	movs	r2, #0
 800644e:	a901      	add	r1, sp, #4
 8006450:	4668      	mov	r0, sp
 8006452:	f7fe fe15 	bl	8005080 <mount_volume>
 8006456:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 8006458:	4620      	mov	r0, r4
 800645a:	b004      	add	sp, #16
 800645c:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800645e:	240b      	movs	r4, #11
 8006460:	e7fa      	b.n	8006458 <f_mount+0x40>
 8006462:	bf00      	nop
 8006464:	20006ba4 	.word	0x20006ba4

08006468 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	b09d      	sub	sp, #116	@ 0x74
 800646e:	4616      	mov	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8006470:	4604      	mov	r4, r0
{
 8006472:	9103      	str	r1, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8006474:	2800      	cmp	r0, #0
 8006476:	f000 8135 	beq.w	80066e4 <f_open+0x27c>

	/* Get logical drive number and mount the volume if needed */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800647a:	f002 093f 	and.w	r9, r2, #63	@ 0x3f
	res = mount_volume(&path, &fs, mode);
 800647e:	a905      	add	r1, sp, #20
 8006480:	a803      	add	r0, sp, #12
 8006482:	464a      	mov	r2, r9
 8006484:	f7fe fdfc 	bl	8005080 <mount_volume>

	if (res == FR_OK) {
 8006488:	4680      	mov	r8, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	f040 80f1 	bne.w	8006672 <f_open+0x20a>
		dj.obj.fs = fs;
 8006490:	9d05      	ldr	r5, [sp, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006492:	a806      	add	r0, sp, #24
 8006494:	9903      	ldr	r1, [sp, #12]
		dj.obj.fs = fs;
 8006496:	9506      	str	r5, [sp, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006498:	f7ff fe10 	bl	80060bc <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800649c:	b920      	cbnz	r0, 80064a8 <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800649e:	f99d 3067 	ldrsb.w	r3, [sp, #103]	@ 0x67
				res = FR_INVALID_NAME;
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfb8      	it	lt
 80064a6:	2006      	movlt	r0, #6
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80064a8:	f016 0f1c 	tst.w	r6, #28
 80064ac:	f000 8081 	beq.w	80065b2 <f_open+0x14a>
			if (res != FR_OK) {					/* No file, create new */
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d045      	beq.n	8006540 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80064b4:	2804      	cmp	r0, #4
 80064b6:	f040 80dc 	bne.w	8006672 <f_open+0x20a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80064ba:	a806      	add	r0, sp, #24
 80064bc:	f7ff fc0a 	bl	8005cd4 <dir_register>
					res = FR_EXIST;				/* Cannot create as new file */
				} else {
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f040 80d6 	bne.w	8006672 <f_open+0x20a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80064c6:	f049 0908 	orr.w	r9, r9, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80064ca:	f019 0f08 	tst.w	r9, #8
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 80064ce:	782b      	ldrb	r3, [r5, #0]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80064d0:	d07a      	beq.n	80065c8 <f_open+0x160>
				if (fs->fs_type == FS_EXFAT) {
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d13e      	bne.n	8006554 <f_open+0xec>
					/* Get current allocation info */
					fp->obj.fs = fs;
 80064d6:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
					init_alloc_info(fs, &fp->obj);
 80064d8:	4621      	mov	r1, r4
					fp->obj.fs = fs;
 80064da:	6025      	str	r5, [r4, #0]
					init_alloc_info(fs, &fp->obj);
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fdcf 	bl	8006080 <init_alloc_info.isra.0>
					/* Set exFAT directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 80064e2:	221e      	movs	r2, #30
 80064e4:	2100      	movs	r1, #0
 80064e6:	1cb0      	adds	r0, r6, #2
 80064e8:	f00f fcc2 	bl	8015e70 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 80064ec:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80064ee:	2100      	movs	r1, #0
 80064f0:	221a      	movs	r2, #26
 80064f2:	3026      	adds	r0, #38	@ 0x26
 80064f4:	f00f fcbc 	bl	8015e70 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 80064f8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80064fa:	2220      	movs	r2, #32
 80064fc:	711a      	strb	r2, [r3, #4]
					st_32(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());	/* Set created time */
 80064fe:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
 8006500:	f7fd f95e 	bl	80037c0 <get_fattime>
 8006504:	4601      	mov	r1, r0
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006506:	2201      	movs	r2, #1
					st_32(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());	/* Set created time */
 8006508:	3608      	adds	r6, #8
 800650a:	4630      	mov	r0, r6
 800650c:	f7fe f8ff 	bl	800470e <st_32>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006510:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
					res = store_xdir(&dj);
 8006512:	a806      	add	r0, sp, #24
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006514:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 8006518:	f7ff fa48 	bl	80059ac <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800651c:	2800      	cmp	r0, #0
 800651e:	f040 80a8 	bne.w	8006672 <f_open+0x20a>
 8006522:	68a1      	ldr	r1, [r4, #8]
 8006524:	b149      	cbz	r1, 800653a <f_open+0xd2>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006526:	4602      	mov	r2, r0
 8006528:	4620      	mov	r0, r4
 800652a:	f7fe fc75 	bl	8004e18 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	3b01      	subs	r3, #1
					if (cl != 0) {						/* Remove the cluster chain if exist */
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, sc);
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006532:	612b      	str	r3, [r5, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8006534:	2800      	cmp	r0, #0
 8006536:	f040 809c 	bne.w	8006672 <f_open+0x20a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800653a:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
 800653e:	e043      	b.n	80065c8 <f_open+0x160>
				if (mode & FA_CREATE_NEW) {
 8006540:	0776      	lsls	r6, r6, #29
 8006542:	f100 80c9 	bmi.w	80066d8 <f_open+0x270>
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
 8006546:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800654a:	f013 0f11 	tst.w	r3, #17
 800654e:	d0bc      	beq.n	80064ca <f_open+0x62>
						res = FR_DENIED;
 8006550:	2007      	movs	r0, #7
 8006552:	e08e      	b.n	8006672 <f_open+0x20a>
					st_32(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8006554:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8006556:	f7fd f933 	bl	80037c0 <get_fattime>
 800655a:	4601      	mov	r1, r0
 800655c:	360e      	adds	r6, #14
 800655e:	4630      	mov	r0, r6
 8006560:	f7fe f8d5 	bl	800470e <st_32>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006564:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006566:	7828      	ldrb	r0, [r5, #0]
 8006568:	f7ff fd9f 	bl	80060aa <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800656c:	2320      	movs	r3, #32
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800656e:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006570:	4682      	mov	sl, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006572:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006574:	4628      	mov	r0, r5
 8006576:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006578:	f7fe f9c2 	bl	8004900 <st_clust>
					st_32(dj.dir + DIR_FileSize, 0);
 800657c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
	*ptr++ = (BYTE)val; val >>= 8;
 800657e:	2200      	movs	r2, #0
 8006580:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8006582:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8006584:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8006586:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	712b      	strb	r3, [r5, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800658c:	f1ba 0f00 	cmp.w	sl, #0
 8006590:	d0d3      	beq.n	800653a <f_open+0xd2>
						res = remove_chain(&dj.obj, cl, 0);
 8006592:	4651      	mov	r1, sl
 8006594:	a806      	add	r0, sp, #24
						sc = fs->winsect;
 8006596:	e9d5 6708 	ldrd	r6, r7, [r5, #32]
						res = remove_chain(&dj.obj, cl, 0);
 800659a:	f7fe fc3d 	bl	8004e18 <remove_chain>
						if (res == FR_OK) {
 800659e:	2800      	cmp	r0, #0
 80065a0:	d167      	bne.n	8006672 <f_open+0x20a>
							res = move_window(fs, sc);
 80065a2:	463b      	mov	r3, r7
 80065a4:	4632      	mov	r2, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	f7fe f9b6 	bl	8004918 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80065ac:	f10a 33ff 	add.w	r3, sl, #4294967295
 80065b0:	e7bf      	b.n	8006532 <f_open+0xca>
			if (res == FR_OK) {					/* Is the object exsiting? */
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d15d      	bne.n	8006672 <f_open+0x20a>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80065b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80065ba:	06d8      	lsls	r0, r3, #27
 80065bc:	f100 808e 	bmi.w	80066dc <f_open+0x274>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80065c0:	07b1      	lsls	r1, r6, #30
 80065c2:	d501      	bpl.n	80065c8 <f_open+0x160>
 80065c4:	07da      	lsls	r2, r3, #31
 80065c6:	d4c3      	bmi.n	8006550 <f_open+0xe8>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
			fp->dir_ptr = dj.dir;
 80065c8:	9916      	ldr	r1, [sp, #88]	@ 0x58
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065ca:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 80065ce:	65a1      	str	r1, [r4, #88]	@ 0x58
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065d0:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
		}
#endif

		if (res == FR_OK) {
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80065d4:	7828      	ldrb	r0, [r5, #0]
 80065d6:	2804      	cmp	r0, #4
 80065d8:	d152      	bne.n	8006680 <f_open+0x218>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80065da:	9b08      	ldr	r3, [sp, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
 80065dc:	4621      	mov	r1, r4
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80065de:	f89d 201f 	ldrb.w	r2, [sp, #31]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80065e2:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80065e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80065e6:	6d28      	ldr	r0, [r5, #80]	@ 0x50
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80065e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80065ec:	4313      	orrs	r3, r2
 80065ee:	6263      	str	r3, [r4, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80065f0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80065f2:	62a3      	str	r3, [r4, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80065f4:	f7ff fd44 	bl	8006080 <init_alloc_info.isra.0>
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
			fp->obj.id = fs->id;
 80065f8:	88eb      	ldrh	r3, [r5, #6]
			fp->flag = mode;	/* Set file access mode */
			fp->err = 0;		/* Clear error flag */
			fp->sect = 0;		/* Invalidate current data sector */
 80065fa:	2200      	movs	r2, #0
			fp->err = 0;		/* Clear error flag */
 80065fc:	f04f 0a00 	mov.w	sl, #0
			fp->fptr = 0;		/* Set file pointer top of the file */
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006600:	f104 075c 	add.w	r7, r4, #92	@ 0x5c
			fp->obj.id = fs->id;
 8006604:	80a3      	strh	r3, [r4, #4]
			fp->sect = 0;		/* Invalidate current data sector */
 8006606:	2300      	movs	r3, #0
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006608:	4651      	mov	r1, sl
 800660a:	4638      	mov	r0, r7
			fp->obj.fs = fs;	/* Validate the file object */
 800660c:	6025      	str	r5, [r4, #0]
			fp->flag = mode;	/* Set file access mode */
 800660e:	f884 9030 	strb.w	r9, [r4, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 8006612:	f884 a031 	strb.w	sl, [r4, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 8006616:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			fp->fptr = 0;		/* Set file pointer top of the file */
 800661a:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800661e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006622:	f00f fc25 	bl	8015e70 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006626:	f019 0f20 	tst.w	r9, #32
 800662a:	d025      	beq.n	8006678 <f_open+0x210>
 800662c:	e9d4 6904 	ldrd	r6, r9, [r4, #16]
 8006630:	ea56 0309 	orrs.w	r3, r6, r9
 8006634:	d020      	beq.n	8006678 <f_open+0x210>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006636:	f8b5 b00a 	ldrh.w	fp, [r5, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800663a:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800663c:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006640:	45b3      	cmp	fp, r6
 8006642:	eb7a 0309 	sbcs.w	r3, sl, r9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006646:	e9c4 690e 	strd	r6, r9, [r4, #56]	@ 0x38
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800664a:	d224      	bcs.n	8006696 <f_open+0x22e>
					clst = get_fat(&fp->obj, clst);
 800664c:	4620      	mov	r0, r4
 800664e:	f7fe fa2b 	bl	8004aa8 <get_fat>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006652:	ebb6 060b 	subs.w	r6, r6, fp
					clst = get_fat(&fp->obj, clst);
 8006656:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006658:	f169 0900 	sbc.w	r9, r9, #0
					if (clst <= 1) res = FR_INT_ERR;
 800665c:	2801      	cmp	r0, #1
 800665e:	d937      	bls.n	80066d0 <f_open+0x268>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d037      	beq.n	80066d4 <f_open+0x26c>
 8006664:	45b3      	cmp	fp, r6
 8006666:	eb7a 0309 	sbcs.w	r3, sl, r9
 800666a:	d3ef      	bcc.n	800664c <f_open+0x1e4>
 800666c:	2000      	movs	r0, #0
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 800666e:	6421      	str	r1, [r4, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006670:	b190      	cbz	r0, 8006698 <f_open+0x230>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006672:	2300      	movs	r3, #0
 8006674:	4680      	mov	r8, r0
 8006676:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8006678:	4640      	mov	r0, r8
 800667a:	b01d      	add	sp, #116	@ 0x74
 800667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006680:	f7ff fd13 	bl	80060aa <ld_clust.isra.0>
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8006684:	2300      	movs	r3, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006686:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8006688:	f101 001c 	add.w	r0, r1, #28
 800668c:	f7fe f839 	bl	8004702 <ld_32>
 8006690:	6163      	str	r3, [r4, #20]
 8006692:	6120      	str	r0, [r4, #16]
 8006694:	e7b0      	b.n	80065f8 <f_open+0x190>
				fp->clust = clst;
 8006696:	6421      	str	r1, [r4, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006698:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0eb      	beq.n	8006678 <f_open+0x210>
					sc = clst2sect(fs, clst);
 80066a0:	4628      	mov	r0, r5
 80066a2:	f7fe f863 	bl	800476c <clst2sect>
					if (sc == 0) {
 80066a6:	ea50 0301 	orrs.w	r3, r0, r1
 80066aa:	d019      	beq.n	80066e0 <f_open+0x278>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80066ac:	0a76      	lsrs	r6, r6, #9
 80066ae:	ea46 56c9 	orr.w	r6, r6, r9, lsl #23
 80066b2:	1832      	adds	r2, r6, r0
 80066b4:	f141 0300 	adc.w	r3, r1, #0
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80066b8:	4639      	mov	r1, r7
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80066ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80066be:	7868      	ldrb	r0, [r5, #1]
 80066c0:	2501      	movs	r5, #1
 80066c2:	9500      	str	r5, [sp, #0]
 80066c4:	f7fe f800 	bl	80046c8 <disk_read>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d0d5      	beq.n	8006678 <f_open+0x210>
 80066cc:	4628      	mov	r0, r5
 80066ce:	e7d0      	b.n	8006672 <f_open+0x20a>
					if (clst <= 1) res = FR_INT_ERR;
 80066d0:	2002      	movs	r0, #2
 80066d2:	e7cc      	b.n	800666e <f_open+0x206>
 80066d4:	2001      	movs	r0, #1
 80066d6:	e7ca      	b.n	800666e <f_open+0x206>
					res = FR_EXIST;				/* Cannot create as new file */
 80066d8:	2008      	movs	r0, #8
 80066da:	e7ca      	b.n	8006672 <f_open+0x20a>
					res = FR_NO_FILE;
 80066dc:	2004      	movs	r0, #4
 80066de:	e7c8      	b.n	8006672 <f_open+0x20a>
						res = FR_INT_ERR;
 80066e0:	2002      	movs	r0, #2
 80066e2:	e7c6      	b.n	8006672 <f_open+0x20a>
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 80066e4:	f04f 0809 	mov.w	r8, #9
 80066e8:	e7c6      	b.n	8006678 <f_open+0x210>

080066ea <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 80066ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ee:	b089      	sub	sp, #36	@ 0x24
 80066f0:	4690      	mov	r8, r2
 80066f2:	468a      	mov	sl, r1
 80066f4:	4604      	mov	r4, r0
 80066f6:	9302      	str	r3, [sp, #8]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80066f8:	2300      	movs	r3, #0
 80066fa:	9a02      	ldr	r2, [sp, #8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80066fc:	a907      	add	r1, sp, #28
	*br = 0;	/* Clear read byte counter */
 80066fe:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006700:	f7fe f89e 	bl	8004840 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006704:	4606      	mov	r6, r0
 8006706:	bba0      	cbnz	r0, 8006772 <f_read+0x88>
 8006708:	f894 6031 	ldrb.w	r6, [r4, #49]	@ 0x31
 800670c:	bb8e      	cbnz	r6, 8006772 <f_read+0x88>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800670e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006712:	f013 0301 	ands.w	r3, r3, #1
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	f000 80bd 	beq.w	8006896 <f_read+0x1ac>
	remain = fp->obj.objsize - fp->fptr;
 800671c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8006720:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 8006724:	1a1b      	subs	r3, r3, r0
 8006726:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800672a:	4543      	cmp	r3, r8
 800672c:	f172 0200 	sbcs.w	r2, r2, #0
 8006730:	bf38      	it	cc
 8006732:	4698      	movcc	r8, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006734:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8006738:	9304      	str	r3, [sp, #16]
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800673a:	f1b8 0f00 	cmp.w	r8, #0
 800673e:	d018      	beq.n	8006772 <f_read+0x88>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006740:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 8006744:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 8095 	bne.w	8006878 <f_read+0x18e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800674e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006752:	0a42      	lsrs	r2, r0, #9
 8006754:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8006758:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800675c:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800675e:	4013      	ands	r3, r2
 8006760:	d11a      	bne.n	8006798 <f_read+0xae>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006762:	4301      	orrs	r1, r0
 8006764:	d109      	bne.n	800677a <f_read+0x90>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006766:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006768:	2801      	cmp	r0, #1
 800676a:	d80d      	bhi.n	8006788 <f_read+0x9e>
 800676c:	2602      	movs	r6, #2
 800676e:	f884 6031 	strb.w	r6, [r4, #49]	@ 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006772:	4630      	mov	r0, r6
 8006774:	b009      	add	sp, #36	@ 0x24
 8006776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800677a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800677c:	4620      	mov	r0, r4
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	f7fe f992 	bl	8004aa8 <get_fat>
 8006784:	9b05      	ldr	r3, [sp, #20]
 8006786:	e7ef      	b.n	8006768 <f_read+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006788:	1c42      	adds	r2, r0, #1
 800678a:	d104      	bne.n	8006796 <f_read+0xac>
 800678c:	2301      	movs	r3, #1
 800678e:	9e03      	ldr	r6, [sp, #12]
 8006790:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
 8006794:	e7ed      	b.n	8006772 <f_read+0x88>
				fp->clust = clst;				/* Update current cluster */
 8006796:	6420      	str	r0, [r4, #64]	@ 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006798:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800679a:	4658      	mov	r0, fp
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	f7fd ffe5 	bl	800476c <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80067a2:	ea50 0201 	orrs.w	r2, r0, r1
 80067a6:	d0e1      	beq.n	800676c <f_read+0x82>
			sect += csect;
 80067a8:	9b05      	ldr	r3, [sp, #20]
 80067aa:	181f      	adds	r7, r3, r0
 80067ac:	f141 0900 	adc.w	r9, r1, #0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80067b0:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 80067b4:	d338      	bcc.n	8006828 <f_read+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80067b6:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80067ba:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80067be:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067c2:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80067c6:	4291      	cmp	r1, r2
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067c8:	4651      	mov	r1, sl
					cc = fs->csize - csect;
 80067ca:	bf88      	it	hi
 80067cc:	1ad5      	subhi	r5, r2, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067ce:	463a      	mov	r2, r7
 80067d0:	464b      	mov	r3, r9
 80067d2:	9500      	str	r5, [sp, #0]
 80067d4:	f7fd ff78 	bl	80046c8 <disk_read>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d1d7      	bne.n	800678c <f_read+0xa2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80067dc:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	da10      	bge.n	8006806 <f_read+0x11c>
 80067e4:	e9d4 0312 	ldrd	r0, r3, [r4, #72]	@ 0x48
 80067e8:	1bc0      	subs	r0, r0, r7
 80067ea:	eb63 0309 	sbc.w	r3, r3, r9
 80067ee:	42a8      	cmp	r0, r5
 80067f0:	f173 0300 	sbcs.w	r3, r3, #0
 80067f4:	d207      	bcs.n	8006806 <f_read+0x11c>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80067f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067fa:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 80067fe:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 8006802:	f00f fbce 	bl	8015fa2 <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006806:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	eba8 0805 	sub.w	r8, r8, r5
 800680e:	9a02      	ldr	r2, [sp, #8]
 8006810:	44aa      	add	sl, r5
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	442b      	add	r3, r5
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	@ 0x38
 800681c:	195b      	adds	r3, r3, r5
 800681e:	f142 0200 	adc.w	r2, r2, #0
 8006822:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
 8006826:	e788      	b.n	800673a <f_read+0x50>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006828:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 800682c:	454b      	cmp	r3, r9
 800682e:	bf08      	it	eq
 8006830:	42ba      	cmpeq	r2, r7
 8006832:	d01f      	beq.n	8006874 <f_read+0x18a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006834:	f994 1030 	ldrsb.w	r1, [r4, #48]	@ 0x30
 8006838:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800683c:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006840:	2900      	cmp	r1, #0
 8006842:	da0c      	bge.n	800685e <f_read+0x174>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006844:	2101      	movs	r1, #1
 8006846:	9100      	str	r1, [sp, #0]
 8006848:	4629      	mov	r1, r5
 800684a:	f7fd ff47 	bl	80046dc <disk_write>
 800684e:	2800      	cmp	r0, #0
 8006850:	d19c      	bne.n	800678c <f_read+0xa2>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006852:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800685a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800685e:	2301      	movs	r3, #1
 8006860:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006864:	463a      	mov	r2, r7
 8006866:	4629      	mov	r1, r5
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	464b      	mov	r3, r9
 800686c:	f7fd ff2c 	bl	80046c8 <disk_read>
 8006870:	2800      	cmp	r0, #0
 8006872:	d18b      	bne.n	800678c <f_read+0xa2>
			fp->sect = sect;
 8006874:	e9c4 7912 	strd	r7, r9, [r4, #72]	@ 0x48
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006878:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800687a:	4650      	mov	r0, sl
 800687c:	9b04      	ldr	r3, [sp, #16]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800687e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006882:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006886:	4419      	add	r1, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006888:	4545      	cmp	r5, r8
 800688a:	bf28      	it	cs
 800688c:	4645      	movcs	r5, r8
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800688e:	462a      	mov	r2, r5
 8006890:	f00f fb87 	bl	8015fa2 <memcpy>
 8006894:	e7b8      	b.n	8006808 <f_read+0x11e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006896:	2607      	movs	r6, #7
 8006898:	e76b      	b.n	8006772 <f_read+0x88>

0800689a <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800689a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689e:	b089      	sub	sp, #36	@ 0x24
 80068a0:	4690      	mov	r8, r2
 80068a2:	468b      	mov	fp, r1
 80068a4:	4604      	mov	r4, r0
 80068a6:	9303      	str	r3, [sp, #12]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80068a8:	2300      	movs	r3, #0
 80068aa:	9a03      	ldr	r2, [sp, #12]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068ac:	a907      	add	r1, sp, #28
	*bw = 0;	/* Clear write byte counter */
 80068ae:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068b0:	f7fd ffc6 	bl	8004840 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068b4:	4606      	mov	r6, r0
 80068b6:	bbc8      	cbnz	r0, 800692c <f_write+0x92>
 80068b8:	f894 6031 	ldrb.w	r6, [r4, #49]	@ 0x31
 80068bc:	bbb6      	cbnz	r6, 800692c <f_write+0x92>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80068be:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80068c2:	079a      	lsls	r2, r3, #30
 80068c4:	f140 80e3 	bpl.w	8006a8e <f_write+0x1f4>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80068c8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80068cc:	f89a 3000 	ldrb.w	r3, [sl]
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d005      	beq.n	80068e0 <f_write+0x46>
 80068d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068d6:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80068da:	bf28      	it	cs
 80068dc:	ea6f 0803 	mvncs.w	r8, r3
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80068e0:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80068e4:	9304      	str	r3, [sp, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80068e6:	f1b8 0f00 	cmp.w	r8, #0
 80068ea:	d019      	beq.n	8006920 <f_write+0x86>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80068ec:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	@ 0x38
 80068f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	f040 80b5 	bne.w	8006a64 <f_write+0x1ca>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80068fa:	f8ba 900a 	ldrh.w	r9, [sl, #10]
 80068fe:	0a5a      	lsrs	r2, r3, #9
 8006900:	f109 39ff 	add.w	r9, r9, #4294967295
 8006904:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
 8006908:	ea19 0902 	ands.w	r9, r9, r2
 800690c:	d122      	bne.n	8006954 <f_write+0xba>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800690e:	430b      	orrs	r3, r1
 8006910:	d110      	bne.n	8006934 <f_write+0x9a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006912:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006914:	b981      	cbnz	r1, 8006938 <f_write+0x9e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006916:	4620      	mov	r0, r4
 8006918:	f7fe fe46 	bl	80055a8 <create_chain>
 800691c:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800691e:	b958      	cbnz	r0, 8006938 <f_write+0x9e>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006920:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006928:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
}
 800692c:	4630      	mov	r0, r6
 800692e:	b009      	add	sp, #36	@ 0x24
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006934:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006936:	e7ee      	b.n	8006916 <f_write+0x7c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006938:	2901      	cmp	r1, #1
 800693a:	d103      	bne.n	8006944 <f_write+0xaa>
 800693c:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800693e:	f884 6031 	strb.w	r6, [r4, #49]	@ 0x31
 8006942:	e7f3      	b.n	800692c <f_write+0x92>
 8006944:	1c4b      	adds	r3, r1, #1
 8006946:	d101      	bne.n	800694c <f_write+0xb2>
 8006948:	2601      	movs	r6, #1
 800694a:	e7f8      	b.n	800693e <f_write+0xa4>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800694c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800694e:	6421      	str	r1, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006950:	b903      	cbnz	r3, 8006954 <f_write+0xba>
 8006952:	60a1      	str	r1, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006954:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 8006958:	2b00      	cmp	r3, #0
 800695a:	da11      	bge.n	8006980 <f_write+0xe6>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800695c:	2301      	movs	r3, #1
 800695e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006962:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 800696c:	f7fd feb6 	bl	80046dc <disk_write>
 8006970:	2800      	cmp	r0, #0
 8006972:	d1e9      	bne.n	8006948 <f_write+0xae>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006974:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006980:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006982:	4650      	mov	r0, sl
 8006984:	f7fd fef2 	bl	800476c <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006988:	ea50 0301 	orrs.w	r3, r0, r1
 800698c:	d0d6      	beq.n	800693c <f_write+0xa2>
			sect += csect;
 800698e:	eb19 0700 	adds.w	r7, r9, r0
 8006992:	f141 0300 	adc.w	r3, r1, #0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006996:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 800699a:	d346      	bcc.n	8006a2a <f_write+0x190>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800699c:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80069a0:	eb09 2158 	add.w	r1, r9, r8, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80069a4:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069a8:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80069ac:	4291      	cmp	r1, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069ae:	4659      	mov	r1, fp
 80069b0:	9305      	str	r3, [sp, #20]
					cc = fs->csize - csect;
 80069b2:	bf88      	it	hi
 80069b4:	eba2 0509 	subhi.w	r5, r2, r9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069b8:	463a      	mov	r2, r7
 80069ba:	9500      	str	r5, [sp, #0]
 80069bc:	f7fd fe8e 	bl	80046dc <disk_write>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d1c1      	bne.n	8006948 <f_write+0xae>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	e9d4 1212 	ldrd	r1, r2, [r4, #72]	@ 0x48
 80069ca:	1bc9      	subs	r1, r1, r7
 80069cc:	eb62 0203 	sbc.w	r2, r2, r3
 80069d0:	42a9      	cmp	r1, r5
 80069d2:	f172 0200 	sbcs.w	r2, r2, #0
 80069d6:	d20d      	bcs.n	80069f4 <f_write+0x15a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80069d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069dc:	eb0b 2141 	add.w	r1, fp, r1, lsl #9
 80069e0:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80069e4:	f00f fadd 	bl	8015fa2 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069e8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80069ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069f0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80069f4:	026d      	lsls	r5, r5, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	eba8 0805 	sub.w	r8, r8, r5
 80069fc:	9a03      	ldr	r2, [sp, #12]
 80069fe:	44ab      	add	fp, r5
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	442b      	add	r3, r5
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8006a0a:	18ad      	adds	r5, r5, r2
 8006a0c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8006a10:	f143 0300 	adc.w	r3, r3, #0
 8006a14:	42a9      	cmp	r1, r5
 8006a16:	eb72 0003 	sbcs.w	r0, r2, r3
 8006a1a:	bf3c      	itt	cc
 8006a1c:	4629      	movcc	r1, r5
 8006a1e:	461a      	movcc	r2, r3
 8006a20:	e9c4 530e 	strd	r5, r3, [r4, #56]	@ 0x38
 8006a24:	e9c4 1204 	strd	r1, r2, [r4, #16]
 8006a28:	e75d      	b.n	80068e6 <f_write+0x4c>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a2a:	e9d4 1212 	ldrd	r1, r2, [r4, #72]	@ 0x48
				fp->fptr < fp->obj.objsize &&
 8006a2e:	e9d4 500e 	ldrd	r5, r0, [r4, #56]	@ 0x38
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a32:	429a      	cmp	r2, r3
 8006a34:	bf08      	it	eq
 8006a36:	42b9      	cmpeq	r1, r7
 8006a38:	d012      	beq.n	8006a60 <f_write+0x1c6>
 8006a3a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8006a3e:	428d      	cmp	r5, r1
 8006a40:	4190      	sbcs	r0, r2
 8006a42:	d20d      	bcs.n	8006a60 <f_write+0x1c6>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006a44:	2201      	movs	r2, #1
 8006a46:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006a4a:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8006a4e:	9305      	str	r3, [sp, #20]
 8006a50:	9200      	str	r2, [sp, #0]
 8006a52:	463a      	mov	r2, r7
 8006a54:	f7fd fe38 	bl	80046c8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006a58:	9b05      	ldr	r3, [sp, #20]
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f47f af74 	bne.w	8006948 <f_write+0xae>
			fp->sect = sect;
 8006a60:	e9c4 7312 	strd	r7, r3, [r4, #72]	@ 0x48
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006a64:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006a66:	4659      	mov	r1, fp
 8006a68:	9b04      	ldr	r3, [sp, #16]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006a6a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006a6e:	f5c0 7500 	rsb	r5, r0, #512	@ 0x200
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006a72:	4418      	add	r0, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006a74:	4545      	cmp	r5, r8
 8006a76:	bf28      	it	cs
 8006a78:	4645      	movcs	r5, r8
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006a7a:	462a      	mov	r2, r5
 8006a7c:	f00f fa91 	bl	8015fa2 <memcpy>
		fp->flag |= FA_DIRTY;
 8006a80:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006a84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a88:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006a8c:	e7b3      	b.n	80069f6 <f_write+0x15c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a8e:	2607      	movs	r6, #7
 8006a90:	e74c      	b.n	800692c <f_write+0x92>

08006a92 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8006a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a94:	b09b      	sub	sp, #108	@ 0x6c
 8006a96:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a98:	a903      	add	r1, sp, #12
 8006a9a:	f7fd fed1 	bl	8004840 <validate>
	if (res == FR_OK) {
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	f040 8083 	bne.w	8006bac <f_sync+0x11a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006aa6:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8006aaa:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 8006aae:	d07d      	beq.n	8006bac <f_sync+0x11a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ab0:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ab2:	9e03      	ldr	r6, [sp, #12]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ab4:	d510      	bpl.n	8006ad8 <f_sync+0x46>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ab6:	2401      	movs	r4, #1
 8006ab8:	7870      	ldrb	r0, [r6, #1]
 8006aba:	f105 015c 	add.w	r1, r5, #92	@ 0x5c
 8006abe:	9400      	str	r4, [sp, #0]
 8006ac0:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8006ac4:	f7fd fe0a 	bl	80046dc <disk_write>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d16f      	bne.n	8006bac <f_sync+0x11a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006acc:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8006ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad4:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006ad8:	7833      	ldrb	r3, [r6, #0]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d169      	bne.n	8006bb2 <f_sync+0x120>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7fe f982 	bl	8004de8 <fill_first_frag>
				if (res == FR_OK) {
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d160      	bne.n	8006bac <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295
 8006aee:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8006af0:	4628      	mov	r0, r5
 8006af2:	f7fe f961 	bl	8004db8 <fill_last_frag>
				}
				if (res == FR_OK) {
 8006af6:	4604      	mov	r4, r0
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d157      	bne.n	8006bac <f_sync+0x11a>
	dp->obj.fs = obj->fs;
 8006afc:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
 8006afe:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 8006b00:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 8006b02:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
 8006b04:	900b      	str	r0, [sp, #44]	@ 0x2c
	dp->obj.sclust = obj->c_scl;
 8006b06:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 8006b08:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	dp->blk_ofs = obj->c_ofs;
 8006b0a:	9118      	str	r1, [sp, #96]	@ 0x60
	dp->obj.stat = (BYTE)obj->c_size;
 8006b0c:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006b10:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b14:	e9cd 3008 	strd	r3, r0, [sp, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006b18:	a804      	add	r0, sp, #16
 8006b1a:	f7fe f86d 	bl	8004bf8 <dir_sdi>
	if (res == FR_OK) {
 8006b1e:	4604      	mov	r4, r0
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d143      	bne.n	8006bac <f_sync+0x11a>
		res = load_xdir(dp);		/* Load the object's entry block */
 8006b24:	a804      	add	r0, sp, #16
 8006b26:	f7fe fecc 	bl	80058c2 <load_xdir>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
					if (res == FR_OK) {
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d13d      	bne.n	8006bac <f_sync+0x11a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8006b30:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 8006b32:	7913      	ldrb	r3, [r2, #4]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	7113      	strb	r3, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;		/* Update file allocation information */
 8006b3a:	79eb      	ldrb	r3, [r5, #7]
 8006b3c:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
						st_32(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);	/* Update start cluster */
 8006b46:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8006b48:	68a9      	ldr	r1, [r5, #8]
 8006b4a:	3034      	adds	r0, #52	@ 0x34
 8006b4c:	f7fd fddf 	bl	800470e <st_32>
						st_64(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);	/* Update file size */
 8006b50:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8006b52:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006b56:	3038      	adds	r0, #56	@ 0x38
 8006b58:	f7fd fde1 	bl	800471e <st_64>
						st_64(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8006b5c:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 8006b5e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006b62:	3028      	adds	r0, #40	@ 0x28
 8006b64:	f7fd fddb 	bl	800471e <st_64>
						st_32(fs->dirbuf + XDIR_ModTime, GET_FATTIME());	/* Update modified time */
 8006b68:	6d37      	ldr	r7, [r6, #80]	@ 0x50
 8006b6a:	f7fc fe29 	bl	80037c0 <get_fattime>
 8006b6e:	4601      	mov	r1, r0
 8006b70:	370c      	adds	r7, #12
 8006b72:	4638      	mov	r0, r7
 8006b74:	f7fd fdcb 	bl	800470e <st_32>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8006b78:	6d33      	ldr	r3, [r6, #80]	@ 0x50
						fs->dirbuf[XDIR_ModTZ] = 0;
						st_32(fs->dirbuf + XDIR_AccTime, 0);				/* Invalidate last access time */
						fs->dirbuf[XDIR_AccTZ] = 0;
						res = store_xdir(&dj);								/* Restore it to the directory */
 8006b7a:	a804      	add	r0, sp, #16
						fs->dirbuf[XDIR_ModTime10] = 0;
 8006b7c:	755c      	strb	r4, [r3, #21]
						fs->dirbuf[XDIR_ModTZ] = 0;
 8006b7e:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006b80:	75dc      	strb	r4, [r3, #23]
						st_32(fs->dirbuf + XDIR_AccTime, 0);				/* Invalidate last access time */
 8006b82:	6d33      	ldr	r3, [r6, #80]	@ 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 8006b84:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b86:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b88:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 8006b8a:	74dc      	strb	r4, [r3, #19]
						fs->dirbuf[XDIR_AccTZ] = 0;
 8006b8c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006b8e:	761c      	strb	r4, [r3, #24]
						res = store_xdir(&dj);								/* Restore it to the directory */
 8006b90:	f7fe ff0c 	bl	80059ac <store_xdir>
						if (res == FR_OK) {
 8006b94:	4604      	mov	r4, r0
 8006b96:	b948      	cbnz	r0, 8006bac <f_sync+0x11a>
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
					st_16(dir + DIR_LstAccDate, 0);				/* Invalidate last access date */
					fs->wflag = 1;
					res = sync_fs(fs);							/* Restore it to the directory */
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7fe f9f1 	bl	8004f80 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b9e:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
					res = sync_fs(fs);							/* Restore it to the directory */
 8006ba2:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba8:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8006bac:	4620      	mov	r0, r4
 8006bae:	b01b      	add	sp, #108	@ 0x6c
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = move_window(fs, fp->dir_sect);
 8006bb2:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	@ 0x50
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7fd feae 	bl	8004918 <move_window>
				if (res == FR_OK) {
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1f4      	bne.n	8006bac <f_sync+0x11a>
					dir = fp->dir_ptr;
 8006bc2:	6daf      	ldr	r7, [r5, #88]	@ 0x58
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8006bc6:	4639      	mov	r1, r7
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8006bc8:	f043 0320 	orr.w	r3, r3, #32
 8006bcc:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8006bce:	68aa      	ldr	r2, [r5, #8]
 8006bd0:	6828      	ldr	r0, [r5, #0]
 8006bd2:	f7fd fe95 	bl	8004900 <st_clust>
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006bd6:	6929      	ldr	r1, [r5, #16]
 8006bd8:	f107 001c 	add.w	r0, r7, #28
 8006bdc:	f7fd fd97 	bl	800470e <st_32>
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
 8006be0:	f7fc fdee 	bl	80037c0 <get_fattime>
 8006be4:	4601      	mov	r1, r0
 8006be6:	f107 0016 	add.w	r0, r7, #22
 8006bea:	f7fd fd90 	bl	800470e <st_32>
					fs->wflag = 1;
 8006bee:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8006bf0:	74bc      	strb	r4, [r7, #18]
	*ptr++ = (BYTE)val;
 8006bf2:	74fc      	strb	r4, [r7, #19]
					fs->wflag = 1;
 8006bf4:	7133      	strb	r3, [r6, #4]
 8006bf6:	e7cf      	b.n	8006b98 <f_sync+0x106>

08006bf8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8006bf8:	b513      	push	{r0, r1, r4, lr}
 8006bfa:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006bfc:	f7ff ff49 	bl	8006a92 <f_sync>
	if (res == FR_OK)
 8006c00:	b928      	cbnz	r0, 8006c0e <f_close+0x16>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006c02:	a901      	add	r1, sp, #4
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7fd fe1b 	bl	8004840 <validate>
		if (res == FR_OK) {
 8006c0a:	b900      	cbnz	r0, 8006c0e <f_close+0x16>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8006c0c:	6020      	str	r0, [r4, #0]
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8006c0e:	b002      	add	sp, #8
 8006c10:	bd10      	pop	{r4, pc}
	...

08006c14 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	b0a1      	sub	sp, #132	@ 0x84
 8006c1a:	460e      	mov	r6, r1
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	9015      	str	r0, [sp, #84]	@ 0x54
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 8006c20:	a815      	add	r0, sp, #84	@ 0x54
{
 8006c22:	930d      	str	r3, [sp, #52]	@ 0x34
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 8006c24:	f7fd fdd7 	bl	80047d6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	f2c0 8711 	blt.w	8007a50 <f_mkfs+0xe3c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8006c2e:	4b76      	ldr	r3, [pc, #472]	@ (8006e08 <f_mkfs+0x1f4>)
 8006c30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006c34:	b10b      	cbz	r3, 8006c3a <f_mkfs+0x26>
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8006c3a:	b2c3      	uxtb	r3, r0
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8006c3c:	4618      	mov	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8006c3e:	9303      	str	r3, [sp, #12]
	ds = disk_initialize(pdrv);
 8006c40:	f7fd fd3c 	bl	80046bc <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8006c44:	07c5      	lsls	r5, r0, #31
 8006c46:	f100 8706 	bmi.w	8007a56 <f_mkfs+0xe42>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006c4a:	0740      	lsls	r0, r0, #29
 8006c4c:	f100 8706 	bmi.w	8007a5c <f_mkfs+0xe48>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8006c50:	4b6e      	ldr	r3, [pc, #440]	@ (8006e0c <f_mkfs+0x1f8>)
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	bf08      	it	eq
 8006c56:	461e      	moveq	r6, r3
	sz_blk = opt->align;
 8006c58:	6873      	ldr	r3, [r6, #4]
 8006c5a:	9317      	str	r3, [sp, #92]	@ 0x5c
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 8006c5c:	b923      	cbnz	r3, 8006c68 <f_mkfs+0x54>
 8006c5e:	aa17      	add	r2, sp, #92	@ 0x5c
 8006c60:	2103      	movs	r1, #3
 8006c62:	9803      	ldr	r0, [sp, #12]
 8006c64:	f7fd fd44 	bl	80046f0 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8006c68:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006c6a:	1e53      	subs	r3, r2, #1
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c70:	d201      	bcs.n	8006c76 <f_mkfs+0x62>
 8006c72:	421a      	tst	r2, r3
 8006c74:	d001      	beq.n	8006c7a <f_mkfs+0x66>
 8006c76:	2301      	movs	r3, #1
 8006c78:	9317      	str	r3, [sp, #92]	@ 0x5c
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8006c7a:	7873      	ldrb	r3, [r6, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8006c7c:	f8d6 a008 	ldr.w	sl, [r6, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8006c80:	9306      	str	r3, [sp, #24]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	bf88      	it	hi
 8006c8a:	2301      	movhi	r3, #1
 8006c8c:	9306      	str	r3, [sp, #24]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8006c8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c96:	d247      	bcs.n	8006d28 <f_mkfs+0x114>
 8006c98:	f01a 0f0f 	tst.w	sl, #15
 8006c9c:	bf18      	it	ne
 8006c9e:	f44f 7a00 	movne.w	sl, #512	@ 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8006ca2:	68f5      	ldr	r5, [r6, #12]
 8006ca4:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 8006ca8:	d841      	bhi.n	8006d2e <f_mkfs+0x11a>
 8006caa:	1e6b      	subs	r3, r5, #1
 8006cac:	422b      	tst	r3, r5
 8006cae:	bf18      	it	ne
 8006cb0:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8006cb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb8:	f0c0 86d3 	bcc.w	8007a62 <f_mkfs+0xe4e>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	f000 86d0 	beq.w	8007a62 <f_mkfs+0xe4e>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_32(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_32(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	9803      	ldr	r0, [sp, #12]
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8006cca:	7836      	ldrb	r6, [r6, #0]
	b_vol = sz_vol = 0;
 8006ccc:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006cd0:	aa18      	add	r2, sp, #96	@ 0x60
 8006cd2:	f7fd fd0d 	bl	80046f0 <disk_ioctl>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f040 8163 	bne.w	8006fa2 <f_mkfs+0x38e>
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8006cdc:	f006 030f 	and.w	r3, r6, #15
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8006ce0:	f016 0108 	ands.w	r1, r6, #8
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8006ce4:	9309      	str	r3, [sp, #36]	@ 0x24
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8006ce6:	d12f      	bne.n	8006d48 <f_mkfs+0x134>
			/* Create a single-partition on the drive in this function */
#if FF_LBA64
			if (sz_vol >= FF_MIN_GPT) {	/* Which partition type to create, MBR or GPT? */
 8006ce8:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	@ 0x60
 8006cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf0:	f172 0000 	sbcs.w	r0, r2, #0
 8006cf4:	d31d      	bcc.n	8006d32 <f_mkfs+0x11e>
				fsopt |= 0x80;		/* Partitioning is in GPT */
 8006cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cf8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006cfc:	9009      	str	r0, [sp, #36]	@ 0x24
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
 8006cfe:	f46f 6002 	mvn.w	r0, #2080	@ 0x820
 8006d02:	181b      	adds	r3, r3, r0
 8006d04:	f162 0200 	sbc.w	r2, r2, #0
 8006d08:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
 8006d0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	910a      	str	r1, [sp, #40]	@ 0x28
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 8006d14:	e9dd 7118 	ldrd	r7, r1, [sp, #96]	@ 0x60
 8006d18:	2f80      	cmp	r7, #128	@ 0x80
 8006d1a:	f171 0300 	sbcs.w	r3, r1, #0
 8006d1e:	d21a      	bcs.n	8006d56 <f_mkfs+0x142>
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
		DWORD szb_bit, szb_case, sum, nbit, clu, clen[3];
		WCHAR ch, si;
		UINT j, st;

		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
 8006d20:	200e      	movs	r0, #14
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
 8006d22:	b021      	add	sp, #132	@ 0x84
 8006d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8006d28:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 8006d2c:	e7b9      	b.n	8006ca2 <f_mkfs+0x8e>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8006d2e:	2500      	movs	r5, #0
 8006d30:	e7bf      	b.n	8006cb2 <f_mkfs+0x9e>
				if (sz_vol > N_SEC_TRACK) {
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	f172 0000 	sbcs.w	r0, r2, #0
 8006d38:	d30a      	bcc.n	8006d50 <f_mkfs+0x13c>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8006d3a:	3b3f      	subs	r3, #63	@ 0x3f
 8006d3c:	f142 32ff 	adc.w	r2, r2, #4294967295
 8006d40:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
 8006d44:	233f      	movs	r3, #63	@ 0x3f
 8006d46:	e7e3      	b.n	8006d10 <f_mkfs+0xfc>
	b_vol = sz_vol = 0;
 8006d48:	4603      	mov	r3, r0
 8006d4a:	9004      	str	r0, [sp, #16]
 8006d4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d4e:	e7e1      	b.n	8006d14 <f_mkfs+0x100>
 8006d50:	460b      	mov	r3, r1
 8006d52:	9104      	str	r1, [sp, #16]
 8006d54:	e7fa      	b.n	8006d4c <f_mkfs+0x138>
	sz_au /= ss;	/* Byte --> Sector */
 8006d56:	0a6b      	lsrs	r3, r5, #9
 8006d58:	9302      	str	r3, [sp, #8]
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
 8006d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d5c:	f013 0304 	ands.w	r3, r3, #4
 8006d60:	d03e      	beq.n	8006de0 <f_mkfs+0x1cc>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64M sectors or sz_au > 128 sectors? */
 8006d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d64:	f003 0607 	and.w	r6, r3, #7
 8006d68:	2e04      	cmp	r6, #4
 8006d6a:	d00f      	beq.n	8006d8c <f_mkfs+0x178>
 8006d6c:	f1b7 6f80 	cmp.w	r7, #67108864	@ 0x4000000
 8006d70:	f171 0100 	sbcs.w	r1, r1, #0
 8006d74:	d245      	bcs.n	8006e02 <f_mkfs+0x1ee>
 8006d76:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 8006d7a:	d242      	bcs.n	8006e02 <f_mkfs+0x1ee>
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8006d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7e:	0799      	lsls	r1, r3, #30
 8006d80:	f003 0601 	and.w	r6, r3, #1
 8006d84:	d538      	bpl.n	8006df8 <f_mkfs+0x1e4>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8006d86:	f1c6 0603 	rsb	r6, r6, #3
 8006d8a:	b2f6      	uxtb	r6, r6
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8006d8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d8e:	0a5b      	lsrs	r3, r3, #9
 8006d90:	930b      	str	r3, [sp, #44]	@ 0x2c
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8006d92:	f7fc fd15 	bl	80037c0 <get_fattime>
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 8006d96:	2e04      	cmp	r6, #4
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8006d98:	eb00 0307 	add.w	r3, r0, r7
 8006d9c:	e9dd 8b18 	ldrd	r8, fp, [sp, #96]	@ 0x60
 8006da0:	9310      	str	r3, [sp, #64]	@ 0x40
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
 8006da2:	d037      	beq.n	8006e14 <f_mkfs+0x200>
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8006da4:	f3ca 1316 	ubfx	r3, sl, #4, #23
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8006da8:	2e03      	cmp	r6, #3
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8006daa:	930e      	str	r3, [sp, #56]	@ 0x38
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8006dac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dae:	f103 32ff 	add.w	r2, r3, #4294967295
 8006db2:	f1c3 0e00 	rsb	lr, r3, #0
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8006db6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006db8:	f040 845e 	bne.w	8007678 <f_mkfs+0xa64>
				if (pau == 0) {	/* AU auto-selection */
 8006dbc:	9b02      	ldr	r3, [sp, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 8423 	bne.w	800760a <f_mkfs+0x9f6>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006dc4:	ea4f 4158 	mov.w	r1, r8, lsr #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006dc8:	4a11      	ldr	r2, [pc, #68]	@ (8006e10 <f_mkfs+0x1fc>)
 8006dca:	2601      	movs	r6, #1
 8006dcc:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 83b1 	beq.w	8007538 <f_mkfs+0x924>
 8006dd6:	428b      	cmp	r3, r1
 8006dd8:	f200 83ae 	bhi.w	8007538 <f_mkfs+0x924>
 8006ddc:	0076      	lsls	r6, r6, #1
 8006dde:	e7f5      	b.n	8006dcc <f_mkfs+0x1b8>
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295
 8006de4:	42ba      	cmp	r2, r7
 8006de6:	418b      	sbcs	r3, r1
 8006de8:	d39a      	bcc.n	8006d20 <f_mkfs+0x10c>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8006dea:	f5b5 3f81 	cmp.w	r5, #66048	@ 0x10200
 8006dee:	9b02      	ldr	r3, [sp, #8]
 8006df0:	bf28      	it	cs
 8006df2:	2380      	movcs	r3, #128	@ 0x80
 8006df4:	9302      	str	r3, [sp, #8]
 8006df6:	e7c1      	b.n	8006d7c <f_mkfs+0x168>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	f000 8635 	beq.w	8007a68 <f_mkfs+0xe54>
		fsty = FS_FAT16;
 8006dfe:	2602      	movs	r6, #2
 8006e00:	e7c4      	b.n	8006d8c <f_mkfs+0x178>
				fsty = FS_EXFAT; break;
 8006e02:	2604      	movs	r6, #4
 8006e04:	e7c2      	b.n	8006d8c <f_mkfs+0x178>
 8006e06:	bf00      	nop
 8006e08:	20006ba4 	.word	0x20006ba4
 8006e0c:	08019290 	.word	0x08019290
 8006e10:	08019282 	.word	0x08019282
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
 8006e14:	f5b8 5f80 	cmp.w	r8, #4096	@ 0x1000
 8006e18:	f17b 0300 	sbcs.w	r3, fp, #0
 8006e1c:	d380      	bcc.n	8006d20 <f_mkfs+0x10c>
		if (sz_au == 0) {	/* AU auto-selection */
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	b95b      	cbnz	r3, 8006e3a <f_mkfs+0x226>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
 8006e22:	f5b8 2f00 	cmp.w	r8, #524288	@ 0x80000
 8006e26:	f17b 0300 	sbcs.w	r3, fp, #0
 8006e2a:	d37c      	bcc.n	8006f26 <f_mkfs+0x312>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
 8006e2c:	f1b8 6f80 	cmp.w	r8, #67108864	@ 0x4000000
 8006e30:	f17b 0300 	sbcs.w	r3, fp, #0
 8006e34:	d279      	bcs.n	8006f2a <f_mkfs+0x316>
 8006e36:	2340      	movs	r3, #64	@ 0x40
 8006e38:	9302      	str	r3, [sp, #8]
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8006e3a:	9b04      	ldr	r3, [sp, #16]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	9a02      	ldr	r2, [sp, #8]
 8006e40:	4640      	mov	r0, r8
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8006e42:	3320      	adds	r3, #32
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006e44:	4659      	mov	r1, fp
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8006e46:	930c      	str	r3, [sp, #48]	@ 0x30
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006e48:	462b      	mov	r3, r5
 8006e4a:	f7f9 fa51 	bl	80002f0 <__aeabi_uldivmod>
 8006e4e:	0080      	lsls	r0, r0, #2
 8006e50:	f200 2007 	addw	r0, r0, #519	@ 0x207
 8006e54:	0a43      	lsrs	r3, r0, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8006e56:	980c      	ldr	r0, [sp, #48]	@ 0x30
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
 8006e58:	9311      	str	r3, [sp, #68]	@ 0x44
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
 8006e5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	f145 31ff 	adc.w	r1, r5, #4294967295
 8006e62:	1812      	adds	r2, r2, r0
 8006e64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e66:	eb40 0101 	adc.w	r1, r0, r1
 8006e6a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006e6c:	1812      	adds	r2, r2, r0
 8006e6e:	f141 0100 	adc.w	r1, r1, #0
 8006e72:	425b      	negs	r3, r3
 8006e74:	ea02 0303 	and.w	r3, r2, r3
 8006e78:	eb60 0000 	sbc.w	r0, r0, r0
 8006e7c:	9305      	str	r3, [sp, #20]
 8006e7e:	ea01 0300 	and.w	r3, r1, r0
 8006e82:	9306      	str	r3, [sp, #24]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8006e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e88:	1a98      	subs	r0, r3, r2
 8006e8a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	ea42 72cb 	orr.w	r2, r2, fp, lsl #31
 8006e94:	f163 0100 	sbc.w	r1, r3, #0
 8006e98:	ea4f 035b 	mov.w	r3, fp, lsr #1
 8006e9c:	4290      	cmp	r0, r2
 8006e9e:	4199      	sbcs	r1, r3
 8006ea0:	f4bf af3e 	bcs.w	8006d20 <f_mkfs+0x10c>
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	9e06      	ldr	r6, [sp, #24]
 8006ea8:	eb13 0808 	adds.w	r8, r3, r8
 8006eac:	9b05      	ldr	r3, [sp, #20]
 8006eae:	9a02      	ldr	r2, [sp, #8]
 8006eb0:	f14b 0100 	adc.w	r1, fp, #0
 8006eb4:	ebb8 0003 	subs.w	r0, r8, r3
 8006eb8:	462b      	mov	r3, r5
 8006eba:	eb61 0106 	sbc.w	r1, r1, r6
 8006ebe:	f7f9 fa17 	bl	80002f0 <__aeabi_uldivmod>
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8006ec2:	4b75      	ldr	r3, [pc, #468]	@ (8007098 <f_mkfs+0x484>)
 8006ec4:	f1a0 0210 	sub.w	r2, r0, #16
		n_clst = (DWORD)((sz_vol - (b_data - b_vol)) / sz_au);	/* Number of clusters */
 8006ec8:	9012      	str	r0, [sp, #72]	@ 0x48
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	f63f af28 	bhi.w	8006d20 <f_mkfs+0x10c>
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8006ed0:	4603      	mov	r3, r0
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006ed2:	46a8      	mov	r8, r5
 8006ed4:	462f      	mov	r7, r5
		sum = 0;							/* Table checksum to be stored in the 82 entry */
 8006ed6:	950f      	str	r5, [sp, #60]	@ 0x3c
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8006ed8:	3307      	adds	r3, #7
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006eda:	9508      	str	r5, [sp, #32]
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
 8006edc:	08da      	lsrs	r2, r3, #3
 8006ede:	9213      	str	r2, [sp, #76]	@ 0x4c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8006ee0:	9a02      	ldr	r2, [sp, #8]
 8006ee2:	ea4f 2b42 	mov.w	fp, r2, lsl #9
 8006ee6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006eea:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8006eee:	920e      	str	r2, [sp, #56]	@ 0x38
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006ef0:	9a02      	ldr	r2, [sp, #8]
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8006ef2:	fbb3 f3fb 	udiv	r3, r3, fp
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006ef6:	fb02 f903 	mul.w	r9, r2, r3
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
 8006efa:	9307      	str	r3, [sp, #28]
 8006efc:	931c      	str	r3, [sp, #112]	@ 0x70
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006efe:	9b05      	ldr	r3, [sp, #20]
 8006f00:	eb19 0903 	adds.w	r9, r9, r3
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006f04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
		sect = b_data + sz_au * clen[0];	/* Table start sector */
 8006f06:	f146 0a00 	adc.w	sl, r6, #0
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006f0a:	f36f 0308 	bfc	r3, #0, #9
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006f0e:	462e      	mov	r6, r5
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006f10:	9314      	str	r3, [sp, #80]	@ 0x50
			switch (st) {
 8006f12:	b16d      	cbz	r5, 8006f30 <f_mkfs+0x31c>
 8006f14:	2d01      	cmp	r5, #1
 8006f16:	d01c      	beq.n	8006f52 <f_mkfs+0x33e>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 8006f18:	fa16 f688 	uxtah	r6, r6, r8
 8006f1c:	fa1f f088 	uxth.w	r0, r8
				st = 0;
 8006f20:	2500      	movs	r5, #0
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
 8006f22:	b2b6      	uxth	r6, r6
				st = 0;
 8006f24:	e01e      	b.n	8006f64 <f_mkfs+0x350>
			sz_au = 8;
 8006f26:	2308      	movs	r3, #8
 8006f28:	e786      	b.n	8006e38 <f_mkfs+0x224>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
 8006f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f2e:	e783      	b.n	8006e38 <f_mkfs+0x224>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 ffab 	bl	8007e8c <ff_wtoupper>
					si++; break;		/* Store the up-case char if exist */
 8006f36:	1c73      	adds	r3, r6, #1
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
 8006f38:	b280      	uxth	r0, r0
					si++; break;		/* Store the up-case char if exist */
 8006f3a:	b29b      	uxth	r3, r3
				if (ch != si) {
 8006f3c:	4286      	cmp	r6, r0
 8006f3e:	d13a      	bne.n	8006fb6 <f_mkfs+0x3a2>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8006f40:	f04f 0801 	mov.w	r8, #1
 8006f44:	eb06 0508 	add.w	r5, r6, r8
 8006f48:	b2ad      	uxth	r5, r5
 8006f4a:	bb65      	cbnz	r5, 8006fa6 <f_mkfs+0x392>
				if (j >= 128) {
 8006f4c:	f1b8 0f7f 	cmp.w	r8, #127	@ 0x7f
 8006f50:	d833      	bhi.n	8006fba <f_mkfs+0x3a6>
				if (--j == 0) st = 0;
 8006f52:	f1b8 0801 	subs.w	r8, r8, #1
				ch = si++;		/* Fill the short run */
 8006f56:	f106 0301 	add.w	r3, r6, #1
 8006f5a:	4630      	mov	r0, r6
				if (--j == 0) st = 0;
 8006f5c:	bf14      	ite	ne
 8006f5e:	2501      	movne	r5, #1
 8006f60:	2500      	moveq	r5, #0
				ch = si++;		/* Fill the short run */
 8006f62:	b29e      	uxth	r6, r3
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
 8006f64:	b2c3      	uxtb	r3, r0
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8006f66:	19e2      	adds	r2, r4, r7
 8006f68:	f3c0 200f 	ubfx	r0, r0, #8, #16
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
 8006f6c:	55e3      	strb	r3, [r4, r7]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8006f6e:	7050      	strb	r0, [r2, #1]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8006f70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f72:	eb03 0372 	add.w	r3, r3, r2, ror #1
 8006f76:	eb00 0373 	add.w	r3, r0, r3, ror #1
 8006f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
			i += 2; szb_case += 2;
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	3302      	adds	r3, #2
 8006f80:	9308      	str	r3, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006f82:	b11e      	cbz	r6, 8006f8c <f_mkfs+0x378>
			i += 2; szb_case += 2;
 8006f84:	1cb8      	adds	r0, r7, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
 8006f86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f88:	4283      	cmp	r3, r0
 8006f8a:	d120      	bne.n	8006fce <f_mkfs+0x3ba>
				n = (i + ss - 1) / ss;
 8006f8c:	f207 2701 	addw	r7, r7, #513	@ 0x201
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006f90:	464a      	mov	r2, r9
 8006f92:	4653      	mov	r3, sl
 8006f94:	4621      	mov	r1, r4
				n = (i + ss - 1) / ss;
 8006f96:	0a7f      	lsrs	r7, r7, #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8006f98:	9803      	ldr	r0, [sp, #12]
 8006f9a:	9700      	str	r7, [sp, #0]
 8006f9c:	f7fd fb9e 	bl	80046dc <disk_write>
 8006fa0:	b178      	cbz	r0, 8006fc2 <f_mkfs+0x3ae>
			if (res != FR_OK) LEAVE_MKFS(res);
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e6bd      	b.n	8006d22 <f_mkfs+0x10e>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 ff70 	bl	8007e8c <ff_wtoupper>
 8006fac:	4285      	cmp	r5, r0
 8006fae:	d1cd      	bne.n	8006f4c <f_mkfs+0x338>
 8006fb0:	f108 0801 	add.w	r8, r8, #1
 8006fb4:	e7c6      	b.n	8006f44 <f_mkfs+0x330>
					si++; break;		/* Store the up-case char if exist */
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	e7d4      	b.n	8006f64 <f_mkfs+0x350>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
 8006fba:	2502      	movs	r5, #2
 8006fbc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006fc0:	e7d0      	b.n	8006f64 <f_mkfs+0x350>
				sect += n; i = 0;
 8006fc2:	eb17 0709 	adds.w	r7, r7, r9
 8006fc6:	46b9      	mov	r9, r7
 8006fc8:	f14a 0a00 	adc.w	sl, sl, #0
		} while (si);
 8006fcc:	b10e      	cbz	r6, 8006fd2 <f_mkfs+0x3be>
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
 8006fce:	4607      	mov	r7, r0
 8006fd0:	e79f      	b.n	8006f12 <f_mkfs+0x2fe>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		clen[2] = 1;	/* Number of root directory clusters */
 8006fd4:	f04f 0a01 	mov.w	sl, #1
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006fd8:	9a08      	ldr	r2, [sp, #32]
		clen[2] = 1;	/* Number of root directory clusters */
 8006fda:	f8cd a078 	str.w	sl, [sp, #120]	@ 0x78
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006fde:	4413      	add	r3, r2
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006fe0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006fe2:	fbb3 f3fb 	udiv	r3, r3, fp
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006fe6:	f202 15ff 	addw	r5, r2, #511	@ 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8006fea:	9a07      	ldr	r2, [sp, #28]
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
 8006fec:	931d      	str	r3, [sp, #116]	@ 0x74
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8006fee:	18d3      	adds	r3, r2, r3
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006ff0:	0a6d      	lsrs	r5, r5, #9
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
 8006ff2:	eb03 060a 	add.w	r6, r3, sl
 8006ff6:	930e      	str	r3, [sp, #56]	@ 0x38
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8006ff8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ffa:	f36f 0308 	bfc	r3, #0, #9
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
 8006ffe:	e9dd 7b05 	ldrd	r7, fp, [sp, #20]
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8007002:	4698      	mov	r8, r3
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8007004:	46b1      	mov	r9, r6
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
 8007006:	4642      	mov	r2, r8
 8007008:	2100      	movs	r1, #0
 800700a:	4620      	mov	r0, r4
 800700c:	f00e ff30 	bl	8015e70 <memset>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8007010:	eba6 0309 	sub.w	r3, r6, r9
 8007014:	f1b9 0f00 	cmp.w	r9, #0
 8007018:	d004      	beq.n	8007024 <f_mkfs+0x410>
 800701a:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
 800701e:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8007022:	d82f      	bhi.n	8007084 <f_mkfs+0x470>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8007024:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007026:	463a      	mov	r2, r7
 8007028:	465b      	mov	r3, fp
 800702a:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 800702c:	42ae      	cmp	r6, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800702e:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8007030:	bf28      	it	cs
 8007032:	462e      	movcs	r6, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007034:	9600      	str	r6, [sp, #0]
 8007036:	f7fd fb51 	bl	80046dc <disk_write>
 800703a:	2800      	cmp	r0, #0
 800703c:	d1b1      	bne.n	8006fa2 <f_mkfs+0x38e>
			sect += n; nsect -= n;
 800703e:	19f7      	adds	r7, r6, r7
 8007040:	f14b 0b00 	adc.w	fp, fp, #0
		} while (nsect);
 8007044:	1bad      	subs	r5, r5, r6
 8007046:	d11b      	bne.n	8007080 <f_mkfs+0x46c>
		j = nbit = clu = 0;
 8007048:	46ab      	mov	fp, r5
 800704a:	46aa      	mov	sl, r5
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 800704c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 800704e:	27ff      	movs	r7, #255	@ 0xff
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8007050:	4642      	mov	r2, r8
 8007052:	2100      	movs	r1, #0
 8007054:	4620      	mov	r0, r4
 8007056:	f00e ff0b 	bl	8015e70 <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
 800705a:	f1bb 0f00 	cmp.w	fp, #0
 800705e:	f040 8103 	bne.w	8007268 <f_mkfs+0x654>
	*ptr++ = (BYTE)val; val >>= 8;
 8007062:	f06f 0307 	mvn.w	r3, #7
				st_32(buf + i, 0xFFFFFFFF); i += 4; clu++;
 8007066:	f04f 0b02 	mov.w	fp, #2
 800706a:	2208      	movs	r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800706c:	7067      	strb	r7, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800706e:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007070:	70a7      	strb	r7, [r4, #2]
	*ptr++ = (BYTE)val;
 8007072:	70e7      	strb	r7, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8007074:	7127      	strb	r7, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007076:	7167      	strb	r7, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8007078:	71a7      	strb	r7, [r4, #6]
	*ptr++ = (BYTE)val;
 800707a:	71e7      	strb	r7, [r4, #7]
				st_32(buf + i, 0xFFFFFFFF); i += 4; clu++;
 800707c:	46a9      	mov	r9, r5
 800707e:	e01d      	b.n	80070bc <f_mkfs+0x4a8>
 8007080:	464e      	mov	r6, r9
 8007082:	e7bf      	b.n	8007004 <f_mkfs+0x3f0>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	5ca1      	ldrb	r1, [r4, r2]
 800708a:	f109 39ff 	add.w	r9, r9, #4294967295
 800708e:	fa0a f303 	lsl.w	r3, sl, r3
 8007092:	430b      	orrs	r3, r1
 8007094:	54a3      	strb	r3, [r4, r2]
 8007096:	e7bb      	b.n	8007010 <f_mkfs+0x3fc>
 8007098:	7fffffed 	.word	0x7fffffed
					st_32(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
 800709c:	f1ba 0f01 	cmp.w	sl, #1
 80070a0:	f10b 0b01 	add.w	fp, fp, #1
 80070a4:	eb04 0002 	add.w	r0, r4, r2
					i += 4; clu++; nbit--;
 80070a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ac:	f102 0204 	add.w	r2, r2, #4
					st_32(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
 80070b0:	bf14      	ite	ne
 80070b2:	4659      	movne	r1, fp
 80070b4:	f04f 31ff 	moveq.w	r1, #4294967295
 80070b8:	f7fd fb29 	bl	800470e <st_32>
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
 80070bc:	f1ba 0f00 	cmp.w	sl, #0
 80070c0:	f000 80d4 	beq.w	800726c <f_mkfs+0x658>
 80070c4:	4590      	cmp	r8, r2
 80070c6:	d8e9      	bhi.n	800709c <f_mkfs+0x488>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 80070c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80070ca:	4621      	mov	r1, r4
 80070cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 80070ce:	42b3      	cmp	r3, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80070d0:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 80070d2:	bf28      	it	cs
 80070d4:	4633      	movcs	r3, r6
 80070d6:	4699      	mov	r9, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070dc:	f7fd fafe 	bl	80046dc <disk_write>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f47f af5e 	bne.w	8006fa2 <f_mkfs+0x38e>
			sect += n; nsect -= n;
 80070e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070e8:	eb19 0303 	adds.w	r3, r9, r3
 80070ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80070ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070f0:	f143 0300 	adc.w	r3, r3, #0
		} while (nsect);
 80070f4:	ebb6 0609 	subs.w	r6, r6, r9
			sect += n; nsect -= n;
 80070f8:	930a      	str	r3, [sp, #40]	@ 0x28
		} while (nsect);
 80070fa:	d1a9      	bne.n	8007050 <f_mkfs+0x43c>
		memset(buf, 0, sz_buf * ss);
 80070fc:	4642      	mov	r2, r8
 80070fe:	4631      	mov	r1, r6
 8007100:	4620      	mov	r0, r4
 8007102:	f00e feb5 	bl	8015e70 <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;			/* Volume label entry (no label) */
 8007106:	2383      	movs	r3, #131	@ 0x83
		st_32(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 8007108:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800710a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
		buf[SZDIRE * 0 + 0] = ET_VLABEL;			/* Volume label entry (no label) */
 800710e:	7023      	strb	r3, [r4, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;			/* Bitmap entry */
 8007110:	2381      	movs	r3, #129	@ 0x81
	*ptr++ = (BYTE)val; val >>= 8;
 8007112:	f884 6035 	strb.w	r6, [r4, #53]	@ 0x35
		buf[SZDIRE * 1 + 0] = ET_BITMAP;			/* Bitmap entry */
 8007116:	f884 3020 	strb.w	r3, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800711a:	2302      	movs	r3, #2
	*ptr++ = (BYTE)val; val >>= 8;
 800711c:	f884 6036 	strb.w	r6, [r4, #54]	@ 0x36
	*ptr++ = (BYTE)val; val >>= 8;
 8007120:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
	*ptr++ = (BYTE)val;
 8007124:	f884 6037 	strb.w	r6, [r4, #55]	@ 0x37
		st_32(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
 8007128:	f7fd faf1 	bl	800470e <st_32>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;			/* Up-case table entry */
 800712c:	2382      	movs	r3, #130	@ 0x82
		st_32(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 800712e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007130:	f104 0044 	add.w	r0, r4, #68	@ 0x44
		buf[SZDIRE * 2 + 0] = ET_UPCASE;			/* Up-case table entry */
 8007134:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		st_32(buf + SZDIRE * 2 + 4, sum);			/*  sum */
 8007138:	f7fd fae9 	bl	800470e <st_32>
		st_32(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
 800713c:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 8007140:	9907      	ldr	r1, [sp, #28]
 8007142:	4618      	mov	r0, r3
 8007144:	930a      	str	r3, [sp, #40]	@ 0x28
 8007146:	3102      	adds	r1, #2
 8007148:	f7fd fae1 	bl	800470e <st_32>
		st_32(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
 800714c:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 8007150:	9908      	ldr	r1, [sp, #32]
 8007152:	4618      	mov	r0, r3
 8007154:	930c      	str	r3, [sp, #48]	@ 0x30
 8007156:	f7fd fada 	bl	800470e <st_32>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
 800715a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800715c:	9a02      	ldr	r2, [sp, #8]
 800715e:	fb02 f503 	mul.w	r5, r2, r3
 8007162:	9b05      	ldr	r3, [sp, #20]
 8007164:	4616      	mov	r6, r2
 8007166:	18ed      	adds	r5, r5, r3
 8007168:	9b06      	ldr	r3, [sp, #24]
 800716a:	f143 0800 	adc.w	r8, r3, #0
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800716e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007170:	4621      	mov	r1, r4
 8007172:	462a      	mov	r2, r5
 8007174:	4643      	mov	r3, r8
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007176:	42b7      	cmp	r7, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007178:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800717a:	bf28      	it	cs
 800717c:	4637      	movcs	r7, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800717e:	9700      	str	r7, [sp, #0]
 8007180:	f7fd faac 	bl	80046dc <disk_write>
 8007184:	4601      	mov	r1, r0
 8007186:	2800      	cmp	r0, #0
 8007188:	f47f af0b 	bne.w	8006fa2 <f_mkfs+0x38e>
			memset(buf, 0, ss);	/* Rest of entries are filled with zero */
 800718c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007190:	4620      	mov	r0, r4
 8007192:	f00e fe6d 	bl	8015e70 <memset>
			sect += n; nsect -= n;
 8007196:	197d      	adds	r5, r7, r5
 8007198:	f148 0800 	adc.w	r8, r8, #0
		} while (nsect);
 800719c:	1bf6      	subs	r6, r6, r7
 800719e:	d1e6      	bne.n	800716e <f_mkfs+0x55a>
 80071a0:	2302      	movs	r3, #2
		sect = b_vol;
 80071a2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80071a6:	4635      	mov	r5, r6
 80071a8:	930b      	str	r3, [sp, #44]	@ 0x2c
			memset(buf, 0, ss);
 80071aa:	2100      	movs	r1, #0
 80071ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071b0:	4620      	mov	r0, r4
 80071b2:	f00e fe5d 	bl	8015e70 <memset>
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 80071b6:	4a76      	ldr	r2, [pc, #472]	@ (8007390 <f_mkfs+0x77c>)
			st_64(buf + BPB_VolOfsEx, b_vol);						/* Volume offset in the physical drive [sector] */
 80071b8:	f104 0040 	add.w	r0, r4, #64	@ 0x40
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	6853      	ldr	r3, [r2, #4]
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	8913      	ldrh	r3, [r2, #8]
 80071c6:	8123      	strh	r3, [r4, #8]
 80071c8:	7a93      	ldrb	r3, [r2, #10]
			st_64(buf + BPB_VolOfsEx, b_vol);						/* Volume offset in the physical drive [sector] */
 80071ca:	9a04      	ldr	r2, [sp, #16]
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 80071cc:	72a3      	strb	r3, [r4, #10]
			st_64(buf + BPB_VolOfsEx, b_vol);						/* Volume offset in the physical drive [sector] */
 80071ce:	2300      	movs	r3, #0
 80071d0:	f7fd faa5 	bl	800471e <st_64>
			st_64(buf + BPB_TotSecEx, sz_vol);						/* Volume size [sector] */
 80071d4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80071d8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80071dc:	f7fd fa9f 	bl	800471e <st_64>
	*ptr++ = (BYTE)val; val >>= 8;
 80071e0:	2320      	movs	r3, #32
			st_32(buf + BPB_FatSzEx, sz_fat);						/* FAT size [sector] */
 80071e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80071e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 80071e6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			st_32(buf + BPB_FatSzEx, sz_fat);						/* FAT size [sector] */
 80071ea:	f7fd fa90 	bl	800470e <st_32>
			st_32(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
 80071ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80071f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071f4:	1a99      	subs	r1, r3, r2
 80071f6:	f7fd fa8a 	bl	800470e <st_32>
			st_32(buf + BPB_NumClusEx, n_clst);						/* Number of clusters */
 80071fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80071fc:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8007200:	f7fd fa85 	bl	800470e <st_32>
			st_32(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);		/* Root directory cluster number */
 8007204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007206:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800720a:	1c99      	adds	r1, r3, #2
 800720c:	f7fd fa7f 	bl	800470e <st_32>
			st_32(buf + BPB_VolIDEx, vsn);							/* VSN */
 8007210:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007212:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8007216:	f7fd fa7a 	bl	800470e <st_32>
	*ptr++ = (BYTE)val;
 800721a:	f04f 0301 	mov.w	r3, #1
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 800721e:	f8dd 9008 	ldr.w	r9, [sp, #8]
	*ptr++ = (BYTE)val;
 8007222:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;		/* Log2 of sector size [byte] */
 8007226:	2309      	movs	r3, #9
 8007228:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 800722c:	ea5f 0959 	movs.w	r9, r9, lsr #1
 8007230:	d130      	bne.n	8007294 <f_mkfs+0x680>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 8007232:	f04f 0301 	mov.w	r3, #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8007236:	46ca      	mov	sl, r9
 8007238:	464f      	mov	r7, r9
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 800723a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 800723e:	2380      	movs	r3, #128	@ 0x80
 8007240:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
 8007244:	23eb      	movs	r3, #235	@ 0xeb
 8007246:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
	*ptr++ = (BYTE)val;
 800724a:	23fe      	movs	r3, #254	@ 0xfe
 800724c:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
	*ptr++ = (BYTE)val; val >>= 8;
 8007250:	2355      	movs	r3, #85	@ 0x55
 8007252:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8007256:	23aa      	movs	r3, #170	@ 0xaa
 8007258:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 800725c:	f1a7 036a 	sub.w	r3, r7, #106	@ 0x6a
 8007260:	2b01      	cmp	r3, #1
 8007262:	d81d      	bhi.n	80072a0 <f_mkfs+0x68c>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 8007264:	3701      	adds	r7, #1
 8007266:	e7f9      	b.n	800725c <f_mkfs+0x648>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
 8007268:	2200      	movs	r2, #0
 800726a:	e707      	b.n	800707c <f_mkfs+0x468>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
 800726c:	2d02      	cmp	r5, #2
 800726e:	f63f af2b 	bhi.w	80070c8 <f_mkfs+0x4b4>
 8007272:	ab20      	add	r3, sp, #128	@ 0x80
 8007274:	3501      	adds	r5, #1
 8007276:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800727a:	f859 ac10 	ldr.w	sl, [r9, #-16]
			} while (nbit != 0 && i < sz_buf * ss);
 800727e:	f1ba 0f00 	cmp.w	sl, #0
 8007282:	f43f af21 	beq.w	80070c8 <f_mkfs+0x4b4>
 8007286:	4590      	cmp	r8, r2
 8007288:	f67f af1e 	bls.w	80070c8 <f_mkfs+0x4b4>
 800728c:	46a9      	mov	r9, r5
 800728e:	e719      	b.n	80070c4 <f_mkfs+0x4b0>
 8007290:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007292:	e78a      	b.n	80071aa <f_mkfs+0x596>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 8007294:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8007298:	3301      	adds	r3, #1
 800729a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800729e:	e7c5      	b.n	800722c <f_mkfs+0x618>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 80072a0:	2f70      	cmp	r7, #112	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80072a2:	bf08      	it	eq
 80072a4:	2771      	moveq	r7, #113	@ 0x71
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80072a6:	5de3      	ldrb	r3, [r4, r7]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80072a8:	3701      	adds	r7, #1
 80072aa:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80072ae:	eb03 0a7a 	add.w	sl, r3, sl, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80072b2:	d1d3      	bne.n	800725c <f_mkfs+0x648>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80072b4:	2301      	movs	r3, #1
 80072b6:	f11b 0601 	adds.w	r6, fp, #1
 80072ba:	4621      	mov	r1, r4
 80072bc:	465a      	mov	r2, fp
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	462b      	mov	r3, r5
 80072c2:	9803      	ldr	r0, [sp, #12]
 80072c4:	f145 0800 	adc.w	r8, r5, #0
 80072c8:	f7fd fa08 	bl	80046dc <disk_write>
 80072cc:	4601      	mov	r1, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f47f ae67 	bne.w	8006fa2 <f_mkfs+0x38e>
			memset(buf, 0, ss);
 80072d4:	463a      	mov	r2, r7
 80072d6:	4620      	mov	r0, r4
 80072d8:	f00e fdca 	bl	8015e70 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80072dc:	2355      	movs	r3, #85	@ 0x55
 80072de:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80072e2:	23aa      	movs	r3, #170	@ 0xaa
 80072e4:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
			for (j = 1; j < 9; j++) {
 80072e8:	f11b 0309 	adds.w	r3, fp, #9
 80072ec:	f104 3bff 	add.w	fp, r4, #4294967295
 80072f0:	9306      	str	r3, [sp, #24]
 80072f2:	f145 0300 	adc.w	r3, r5, #0
 80072f6:	9307      	str	r3, [sp, #28]
 80072f8:	f204 13ff 	addw	r3, r4, #511	@ 0x1ff
 80072fc:	9308      	str	r3, [sp, #32]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80072fe:	465b      	mov	r3, fp
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8007300:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007304:	eb02 0a7a 	add.w	sl, r2, sl, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8007308:	9a08      	ldr	r2, [sp, #32]
 800730a:	429a      	cmp	r2, r3
 800730c:	d1f8      	bne.n	8007300 <f_mkfs+0x6ec>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800730e:	2301      	movs	r3, #1
 8007310:	1c75      	adds	r5, r6, #1
 8007312:	4621      	mov	r1, r4
 8007314:	4632      	mov	r2, r6
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4643      	mov	r3, r8
 800731a:	9803      	ldr	r0, [sp, #12]
 800731c:	f148 0700 	adc.w	r7, r8, #0
 8007320:	f7fd f9dc 	bl	80046dc <disk_write>
 8007324:	4601      	mov	r1, r0
 8007326:	2800      	cmp	r0, #0
 8007328:	f47f ae3b 	bne.w	8006fa2 <f_mkfs+0x38e>
			for (j = 1; j < 9; j++) {
 800732c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007330:	4297      	cmp	r7, r2
 8007332:	bf08      	it	eq
 8007334:	429d      	cmpeq	r5, r3
 8007336:	d002      	beq.n	800733e <f_mkfs+0x72a>
 8007338:	462e      	mov	r6, r5
 800733a:	46b8      	mov	r8, r7
 800733c:	e7df      	b.n	80072fe <f_mkfs+0x6ea>
			memset(buf, 0, ss);
 800733e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007342:	4620      	mov	r0, r4
 8007344:	f00e fd94 	bl	8015e70 <memset>
			for ( ; j < 11; j++) {
 8007348:	3603      	adds	r6, #3
 800734a:	f148 0800 	adc.w	r8, r8, #0
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800734e:	465b      	mov	r3, fp
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 8007350:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007354:	eb02 0a7a 	add.w	sl, r2, sl, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8007358:	9a08      	ldr	r2, [sp, #32]
 800735a:	429a      	cmp	r2, r3
 800735c:	d1f8      	bne.n	8007350 <f_mkfs+0x73c>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800735e:	1c6b      	adds	r3, r5, #1
 8007360:	462a      	mov	r2, r5
 8007362:	4621      	mov	r1, r4
 8007364:	9803      	ldr	r0, [sp, #12]
 8007366:	9306      	str	r3, [sp, #24]
 8007368:	f147 0300 	adc.w	r3, r7, #0
 800736c:	9307      	str	r3, [sp, #28]
 800736e:	2301      	movs	r3, #1
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	463b      	mov	r3, r7
 8007374:	f7fd f9b2 	bl	80046dc <disk_write>
 8007378:	2800      	cmp	r0, #0
 800737a:	f47f ae12 	bne.w	8006fa2 <f_mkfs+0x38e>
			for ( ; j < 11; j++) {
 800737e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007382:	4542      	cmp	r2, r8
 8007384:	bf08      	it	eq
 8007386:	42b3      	cmpeq	r3, r6
 8007388:	d004      	beq.n	8007394 <f_mkfs+0x780>
 800738a:	461d      	mov	r5, r3
 800738c:	4617      	mov	r7, r2
 800738e:	e7de      	b.n	800734e <f_mkfs+0x73a>
 8007390:	08016daa 	.word	0x08016daa
			for (i = 0; i < ss; i += 4) st_32(buf + i, sum);	/* Fill with checksum value */
 8007394:	eb04 0009 	add.w	r0, r4, r9
 8007398:	f109 0904 	add.w	r9, r9, #4
 800739c:	4651      	mov	r1, sl
 800739e:	f7fd f9b6 	bl	800470e <st_32>
 80073a2:	f5b9 7f00 	cmp.w	r9, #512	@ 0x200
 80073a6:	d1f5      	bne.n	8007394 <f_mkfs+0x780>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80073a8:	2601      	movs	r6, #1
 80073aa:	f115 0b02 	adds.w	fp, r5, #2
 80073ae:	4621      	mov	r1, r4
 80073b0:	9803      	ldr	r0, [sp, #12]
 80073b2:	9600      	str	r6, [sp, #0]
 80073b4:	f147 0500 	adc.w	r5, r7, #0
 80073b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073bc:	f7fd f98e 	bl	80046dc <disk_write>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f47f adee 	bne.w	8006fa2 <f_mkfs+0x38e>
		for (n = 0; n < 2; n++) {
 80073c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c8:	42b3      	cmp	r3, r6
 80073ca:	f47f af61 	bne.w	8007290 <f_mkfs+0x67c>
		sys = 0x07;		/* exFAT */
 80073ce:	f04f 0907 	mov.w	r9, #7
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 80073d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d4:	071b      	lsls	r3, r3, #28
 80073d6:	f100 82a7 	bmi.w	8007928 <f_mkfs+0xd14>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 80073da:	2101      	movs	r1, #1
 80073dc:	9803      	ldr	r0, [sp, #12]
			lba[0] = sz_vol; lba[1] = 0;
 80073de:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80073e2:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80073e6:	2200      	movs	r2, #0
 80073e8:	2300      	movs	r3, #0
 80073ea:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 80073ee:	aa1a      	add	r2, sp, #104	@ 0x68
 80073f0:	f7fd f97e 	bl	80046f0 <disk_ioctl>
 80073f4:	4607      	mov	r7, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f47f add3 	bne.w	8006fa2 <f_mkfs+0x38e>
	if (sz_drv >= FF_MIN_GPT) {	/* Create partitions in GPT format */
 80073fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007400:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007402:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
 8007406:	f173 0300 	sbcs.w	r3, r3, #0
 800740a:	f0c0 829c 	bcc.w	8007946 <f_mkfs+0xd32>
		rnd = (DWORD)sz_drv + GET_FATTIME();	/* Random seed */
 800740e:	f7fc f9d7 	bl	80037c0 <get_fattime>
 8007412:	eb00 0308 	add.w	r3, r0, r8
		bcc = 0xFFFFFFFF; sz_part = 1;
 8007416:	2501      	movs	r5, #1
 8007418:	46b8      	mov	r8, r7
		rnd = (DWORD)sz_drv + GET_FATTIME();	/* Random seed */
 800741a:	9306      	str	r3, [sp, #24]
		nxt_alloc = 2 + sz_ptbl;			/* First allocatable LBA */
 800741c:	2622      	movs	r6, #34	@ 0x22
		top_bpt = sz_drv - sz_ptbl - 1;		/* Backup partition table start LBA */
 800741e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
		nxt_alloc = 2 + sz_ptbl;			/* First allocatable LBA */
 8007420:	9705      	str	r7, [sp, #20]
		top_bpt = sz_drv - sz_ptbl - 1;		/* Backup partition table start LBA */
 8007422:	9308      	str	r3, [sp, #32]
 8007424:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007426:	9309      	str	r3, [sp, #36]	@ 0x24
 8007428:	9b08      	ldr	r3, [sp, #32]
 800742a:	3b21      	subs	r3, #33	@ 0x21
 800742c:	9302      	str	r3, [sp, #8]
 800742e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007430:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007434:	9304      	str	r3, [sp, #16]
		sz_pool = top_bpt - nxt_alloc;		/* Size of allocatable area [sector] */
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	3b43      	subs	r3, #67	@ 0x43
 800743a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800743c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007442:	930c      	str	r3, [sp, #48]	@ 0x30
		bcc = 0xFFFFFFFF; sz_part = 1;
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	9307      	str	r3, [sp, #28]
		pi = si = 0;	/* partition table index, map index */
 800744a:	463b      	mov	r3, r7
			if (pi * SZ_GPTE % ss == 0) memset(buf, 0, ss);	/* Clean the buffer if needed */
 800744c:	f3c7 0908 	ubfx	r9, r7, #0, #9
 8007450:	f1b9 0f00 	cmp.w	r9, #0
 8007454:	d107      	bne.n	8007466 <f_mkfs+0x852>
 8007456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800745a:	4649      	mov	r1, r9
 800745c:	4620      	mov	r0, r4
 800745e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007460:	f00e fd06 	bl	8015e70 <memset>
 8007464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
			if (sz_part != 0) {				/* Is the size table not termintated? */
 8007466:	ea55 0208 	orrs.w	r2, r5, r8
 800746a:	f000 8267 	beq.w	800793c <f_mkfs+0xd28>
				nxt_alloc = (nxt_alloc + align - 1) & ((QWORD)0 - align);	/* Align partition start LBA */
 800746e:	f240 7bff 	movw	fp, #2047	@ 0x7ff
 8007472:	9a05      	ldr	r2, [sp, #20]
 8007474:	eb16 060b 	adds.w	r6, r6, fp
 8007478:	f142 0a00 	adc.w	sl, r2, #0
				sz_part = plst[si++];		/* Get a partition size */
 800747c:	1c5a      	adds	r2, r3, #1
				nxt_alloc = (nxt_alloc + align - 1) & ((QWORD)0 - align);	/* Align partition start LBA */
 800747e:	f36f 060a 	bfc	r6, #0, #11
				sz_part = plst[si++];		/* Get a partition size */
 8007482:	920a      	str	r2, [sp, #40]	@ 0x28
 8007484:	aa20      	add	r2, sp, #128	@ 0x80
				nxt_alloc = (nxt_alloc + align - 1) & ((QWORD)0 - align);	/* Align partition start LBA */
 8007486:	f8cd a014 	str.w	sl, [sp, #20]
				sz_part = plst[si++];		/* Get a partition size */
 800748a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800748e:	e953 5804 	ldrd	r5, r8, [r3, #-16]
				if (sz_part <= 100) {		/* Is the size in percentage? */
 8007492:	2d65      	cmp	r5, #101	@ 0x65
 8007494:	f178 0300 	sbcs.w	r3, r8, #0
 8007498:	d213      	bcs.n	80074c2 <f_mkfs+0x8ae>
					sz_part = sz_pool * sz_part / 100;	/* Sectors in percentage */
 800749a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800749c:	2264      	movs	r2, #100	@ 0x64
 800749e:	fb03 f808 	mul.w	r8, r3, r8
 80074a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074a4:	fb05 8803 	mla	r8, r5, r3, r8
 80074a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074aa:	fba3 0105 	umull	r0, r1, r3, r5
 80074ae:	2300      	movs	r3, #0
 80074b0:	4441      	add	r1, r8
 80074b2:	f7f8 ff1d 	bl	80002f0 <__aeabi_uldivmod>
					sz_part = (sz_part + align - 1) & ((QWORD)0 - align);	/* Align partition end LBA (only if in percentage) */
 80074b6:	eb10 050b 	adds.w	r5, r0, fp
 80074ba:	f36f 050a 	bfc	r5, #0, #11
 80074be:	f141 0800 	adc.w	r8, r1, #0
				if (nxt_alloc + sz_part > top_bpt) {	/* Clip the size at end of the pool */
 80074c2:	1972      	adds	r2, r6, r5
 80074c4:	9902      	ldr	r1, [sp, #8]
 80074c6:	eb4a 0308 	adc.w	r3, sl, r8
 80074ca:	4291      	cmp	r1, r2
 80074cc:	9a04      	ldr	r2, [sp, #16]
 80074ce:	eb72 0303 	sbcs.w	r3, r2, r3
 80074d2:	f080 8139 	bcs.w	8007748 <f_mkfs+0xb34>
					sz_part = (nxt_alloc < top_bpt) ? top_bpt - nxt_alloc : 0;
 80074d6:	428e      	cmp	r6, r1
 80074d8:	4613      	mov	r3, r2
 80074da:	eb7a 0303 	sbcs.w	r3, sl, r3
 80074de:	f080 822f 	bcs.w	8007940 <f_mkfs+0xd2c>
 80074e2:	1b8d      	subs	r5, r1, r6
 80074e4:	eb62 080a 	sbc.w	r8, r2, sl
				memcpy(buf + ofs + GPTE_PtGuid, GUID_MS_Basic, 16);	/* Set partition GUID (Microsoft Basic Data) */
 80074e8:	4b93      	ldr	r3, [pc, #588]	@ (8007738 <f_mkfs+0xb24>)
 80074ea:	eb04 0209 	add.w	r2, r4, r9
 80074ee:	f103 0110 	add.w	r1, r3, #16
 80074f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80074f6:	428b      	cmp	r3, r1
 80074f8:	f842 0b04 	str.w	r0, [r2], #4
 80074fc:	d1f9      	bne.n	80074f2 <f_mkfs+0x8de>
				rnd = make_rand(rnd, buf + ofs + GPTE_UpGuid, 16);	/* Set unique partition GUID */
 80074fe:	f109 0110 	add.w	r1, r9, #16
 8007502:	9806      	ldr	r0, [sp, #24]
 8007504:	4421      	add	r1, r4
 8007506:	f7fe f83b 	bl	8005580 <make_rand.constprop.0>
 800750a:	9006      	str	r0, [sp, #24]
				st_64(buf + ofs + GPTE_FstLba, nxt_alloc);			/* Set partition start LBA */
 800750c:	f109 0020 	add.w	r0, r9, #32
 8007510:	4632      	mov	r2, r6
 8007512:	4653      	mov	r3, sl
 8007514:	4420      	add	r0, r4
 8007516:	f7fd f902 	bl	800471e <st_64>
				st_64(buf + ofs + GPTE_LstLba, nxt_alloc + sz_part - 1);	/* Set partition end LBA */
 800751a:	19ae      	adds	r6, r5, r6
 800751c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8007520:	eb4a 0308 	adc.w	r3, sl, r8
 8007524:	1e72      	subs	r2, r6, #1
 8007526:	4420      	add	r0, r4
 8007528:	9305      	str	r3, [sp, #20]
 800752a:	f163 0300 	sbc.w	r3, r3, #0
 800752e:	f7fd f8f6 	bl	800471e <st_64>
				nxt_alloc += sz_part;								/* Next allocatable LBA */
 8007532:	e10d      	b.n	8007750 <f_mkfs+0xb3c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007534:	0876      	lsrs	r6, r6, #1
 8007536:	9602      	str	r6, [sp, #8]
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8007538:	fbb8 f3f6 	udiv	r3, r8, r6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800753c:	009a      	lsls	r2, r3, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800753e:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007542:	f202 2207 	addw	r2, r2, #519	@ 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8007546:	3bf6      	subs	r3, #246	@ 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007548:	0a52      	lsrs	r2, r2, #9
 800754a:	9207      	str	r2, [sp, #28]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800754c:	4a7b      	ldr	r2, [pc, #492]	@ (800773c <f_mkfs+0xb28>)
 800754e:	4293      	cmp	r3, r2
 8007550:	f63f abe6 	bhi.w	8006d20 <f_mkfs+0x10c>
				sz_dir = 0;		/* No static directory */
 8007554:	2300      	movs	r3, #0
 8007556:	9802      	ldr	r0, [sp, #8]
				sz_rsv = 32;	/* Number of reserved sectors */
 8007558:	f04f 0920 	mov.w	r9, #32
 800755c:	2703      	movs	r7, #3
				sz_dir = 0;		/* No static directory */
 800755e:	9308      	str	r3, [sp, #32]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	eb19 0503 	adds.w	r5, r9, r3
 8007566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007568:	f143 0300 	adc.w	r3, r3, #0
 800756c:	9305      	str	r3, [sp, #20]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800756e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007572:	435a      	muls	r2, r3
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	1952      	adds	r2, r2, r5
 8007578:	f143 0100 	adc.w	r1, r3, #0
 800757c:	9b08      	ldr	r3, [sp, #32]
 800757e:	18d2      	adds	r2, r2, r3
 8007580:	f141 0300 	adc.w	r3, r1, #0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8007584:	2f03      	cmp	r7, #3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8007586:	930c      	str	r3, [sp, #48]	@ 0x30
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8007588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758a:	4413      	add	r3, r2
 800758c:	ea03 030e 	and.w	r3, r3, lr
 8007590:	eba3 0302 	sub.w	r3, r3, r2
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8007594:	d13f      	bne.n	8007616 <f_mkfs+0xa02>
				sz_rsv += n; b_fat += n;
 8007596:	4499      	add	r9, r3
 8007598:	195b      	adds	r3, r3, r5
 800759a:	461d      	mov	r5, r3
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	f143 0300 	adc.w	r3, r3, #0
 80075a2:	9305      	str	r3, [sp, #20]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 80075a4:	9904      	ldr	r1, [sp, #16]
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	ebb1 1f06 	cmp.w	r1, r6, lsl #4
 80075ac:	ebc3 1306 	rsb	r3, r3, r6, lsl #4
 80075b0:	bf8c      	ite	hi
 80075b2:	f04f 3cff 	movhi.w	ip, #4294967295
 80075b6:	f04f 0c00 	movls.w	ip, #0
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075be:	eb42 010c 	adc.w	r1, r2, ip
 80075c2:	4598      	cmp	r8, r3
 80075c4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80075c8:	f4ff abaa 	bcc.w	8006d20 <f_mkfs+0x10c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80075cc:	9b08      	ldr	r3, [sp, #32]
			if (fsty == FS_FAT32) {
 80075ce:	2f03      	cmp	r7, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80075d0:	eba8 0303 	sub.w	r3, r8, r3
 80075d4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80075d8:	eba3 0309 	sub.w	r3, r3, r9
 80075dc:	fb01 3312 	mls	r3, r1, r2, r3
 80075e0:	fbb3 f3f6 	udiv	r3, r3, r6
 80075e4:	930c      	str	r3, [sp, #48]	@ 0x30
			if (fsty == FS_FAT32) {
 80075e6:	d12e      	bne.n	8007646 <f_mkfs+0xa32>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 80075e8:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 80075ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075ee:	429a      	cmp	r2, r3
 80075f0:	f200 824b 	bhi.w	8007a8a <f_mkfs+0xe76>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80075f4:	9b02      	ldr	r3, [sp, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f47f ab92 	bne.w	8006d20 <f_mkfs+0x10c>
 80075fc:	2e01      	cmp	r6, #1
 80075fe:	d899      	bhi.n	8007534 <f_mkfs+0x920>
 8007600:	f7ff bb8e 	b.w	8006d20 <f_mkfs+0x10c>
 8007604:	9002      	str	r0, [sp, #8]
 8007606:	f7ff bbd9 	b.w	8006dbc <f_mkfs+0x1a8>
			pau = sz_au;
 800760a:	9e02      	ldr	r6, [sp, #8]
 800760c:	e794      	b.n	8007538 <f_mkfs+0x924>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800760e:	0076      	lsls	r6, r6, #1
 8007610:	e039      	b.n	8007686 <f_mkfs+0xa72>
			pau = sz_au;
 8007612:	9e02      	ldr	r6, [sp, #8]
 8007614:	e03c      	b.n	8007690 <f_mkfs+0xa7c>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8007616:	9906      	ldr	r1, [sp, #24]
 8007618:	fbb3 fcf1 	udiv	ip, r3, r1
 800761c:	fb01 3c1c 	mls	ip, r1, ip, r3
 8007620:	f1bc 0f00 	cmp.w	ip, #0
 8007624:	d008      	beq.n	8007638 <f_mkfs+0xa24>
					n--; sz_rsv++; b_fat++;
 8007626:	9905      	ldr	r1, [sp, #20]
 8007628:	3501      	adds	r5, #1
 800762a:	f103 33ff 	add.w	r3, r3, #4294967295
 800762e:	f109 0901 	add.w	r9, r9, #1
 8007632:	f141 0100 	adc.w	r1, r1, #0
 8007636:	9105      	str	r1, [sp, #20]
				sz_fat += n / n_fat;
 8007638:	9906      	ldr	r1, [sp, #24]
 800763a:	fbb3 f3f1 	udiv	r3, r3, r1
 800763e:	9907      	ldr	r1, [sp, #28]
 8007640:	4419      	add	r1, r3
 8007642:	9107      	str	r1, [sp, #28]
 8007644:	e7ae      	b.n	80075a4 <f_mkfs+0x990>
			if (fsty == FS_FAT16) {
 8007646:	2f02      	cmp	r7, #2
 8007648:	f040 8218 	bne.w	8007a7c <f_mkfs+0xe68>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800764c:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 8007650:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007652:	429a      	cmp	r2, r3
 8007654:	d936      	bls.n	80076c4 <f_mkfs+0xab0>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8007656:	9b02      	ldr	r3, [sp, #8]
 8007658:	b91b      	cbnz	r3, 8007662 <f_mkfs+0xa4e>
 800765a:	0073      	lsls	r3, r6, #1
 800765c:	2b40      	cmp	r3, #64	@ 0x40
 800765e:	9302      	str	r3, [sp, #8]
 8007660:	d90a      	bls.n	8007678 <f_mkfs+0xa64>
					if ((fsopt & FM_FAT32)) {
 8007662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007664:	079a      	lsls	r2, r3, #30
 8007666:	d4cd      	bmi.n	8007604 <f_mkfs+0x9f0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007668:	2800      	cmp	r0, #0
 800766a:	f47f ab59 	bne.w	8006d20 <f_mkfs+0x10c>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800766e:	0073      	lsls	r3, r6, #1
 8007670:	2b80      	cmp	r3, #128	@ 0x80
 8007672:	9302      	str	r3, [sp, #8]
 8007674:	f63f ab54 	bhi.w	8006d20 <f_mkfs+0x10c>
				if (pau == 0) {	/* au auto-selection */
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1c9      	bne.n	8007612 <f_mkfs+0x9fe>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800767e:	ea4f 3118 	mov.w	r1, r8, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007682:	4a2f      	ldr	r2, [pc, #188]	@ (8007740 <f_mkfs+0xb2c>)
 8007684:	2601      	movs	r6, #1
 8007686:	f832 3b02 	ldrh.w	r3, [r2], #2
 800768a:	b10b      	cbz	r3, 8007690 <f_mkfs+0xa7c>
 800768c:	428b      	cmp	r3, r1
 800768e:	d9be      	bls.n	800760e <f_mkfs+0x9fa>
				n_clst = (DWORD)sz_vol / pau;
 8007690:	fbb8 f3f6 	udiv	r3, r8, r6
				if (n_clst > MAX_FAT12) {
 8007694:	f640 72f5 	movw	r2, #4085	@ 0xff5
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8007698:	9802      	ldr	r0, [sp, #8]
				sz_rsv = 1;						/* Number of reserved sectors */
 800769a:	f04f 0901 	mov.w	r9, #1
				if (n_clst > MAX_FAT12) {
 800769e:	4293      	cmp	r3, r2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80076a0:	bf93      	iteet	ls
 80076a2:	eb03 0343 	addls.w	r3, r3, r3, lsl #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80076a6:	3302      	addhi	r3, #2
 80076a8:	2702      	movhi	r7, #2
					fsty = FS_FAT12;
 80076aa:	2701      	movls	r7, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80076ac:	bf97      	itett	ls
 80076ae:	3301      	addls	r3, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80076b0:	005b      	lslhi	r3, r3, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80076b2:	085b      	lsrls	r3, r3, #1
 80076b4:	3303      	addls	r3, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80076b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80076ba:	0a5b      	lsrs	r3, r3, #9
 80076bc:	9307      	str	r3, [sp, #28]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 80076be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076c0:	9308      	str	r3, [sp, #32]
 80076c2:	e74d      	b.n	8007560 <f_mkfs+0x94c>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80076c4:	f640 73f5 	movw	r3, #4085	@ 0xff5
 80076c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f200 81dd 	bhi.w	8007a8a <f_mkfs+0xe76>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0cb      	beq.n	800766e <f_mkfs+0xa5a>
 80076d6:	f7ff bb23 	b.w	8006d20 <f_mkfs+0x10c>
			st_32(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80076da:	4641      	mov	r1, r8
 80076dc:	f104 0020 	add.w	r0, r4, #32
 80076e0:	f7fd f815 	bl	800470e <st_32>
 80076e4:	e202      	b.n	8007aec <f_mkfs+0xed8>
			st_32(buf + BS_VolID, vsn);					/* VSN */
 80076e6:	f104 0027 	add.w	r0, r4, #39	@ 0x27
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80076ea:	f104 022b 	add.w	r2, r4, #43	@ 0x2b
			st_32(buf + BS_VolID, vsn);					/* VSN */
 80076ee:	f7fd f80e 	bl	800470e <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80076f2:	9b07      	ldr	r3, [sp, #28]
 80076f4:	75a3      	strb	r3, [r4, #22]
 80076f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 80076fa:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80076fc:	2380      	movs	r3, #128	@ 0x80
 80076fe:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007702:	2329      	movs	r3, #41	@ 0x29
 8007704:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007708:	4b0e      	ldr	r3, [pc, #56]	@ (8007744 <f_mkfs+0xb30>)
 800770a:	f103 0110 	add.w	r1, r3, #16
 800770e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007712:	428b      	cmp	r3, r1
 8007714:	f842 0b04 	str.w	r0, [r2], #4
 8007718:	d1f9      	bne.n	800770e <f_mkfs+0xafa>
 800771a:	e219      	b.n	8007b50 <f_mkfs+0xf3c>
				st_32(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800771c:	4651      	mov	r1, sl
 800771e:	4620      	mov	r0, r4
 8007720:	f7fc fff5 	bl	800470e <st_32>
 8007724:	e290      	b.n	8007c48 <f_mkfs+0x1034>
		sys = 0x0C;		/* FAT32X */
 8007726:	f04f 090c 	mov.w	r9, #12
 800772a:	e652      	b.n	80073d2 <f_mkfs+0x7be>
		sys = 0x06;		/* FAT12/16 (large) */
 800772c:	f04f 0906 	mov.w	r9, #6
 8007730:	e64f      	b.n	80073d2 <f_mkfs+0x7be>
 8007732:	464f      	mov	r7, r9
 8007734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007736:	e689      	b.n	800744c <f_mkfs+0x838>
 8007738:	08016dfa 	.word	0x08016dfa
 800773c:	0ffeffff 	.word	0x0ffeffff
 8007740:	08019274 	.word	0x08019274
 8007744:	08016de6 	.word	0x08016de6
			if (sz_part != 0) {				/* Add a partition? */
 8007748:	ea55 0308 	orrs.w	r3, r5, r8
 800774c:	f47f aecc 	bne.w	80074e8 <f_mkfs+0x8d4>
			if ((pi + 1) * SZ_GPTE % ss == 0) {		/* Write the sector buffer if it is filled up */
 8007750:	f107 0980 	add.w	r9, r7, #128	@ 0x80
 8007754:	f3c9 0308 	ubfx	r3, r9, #0, #9
 8007758:	bb3b      	cbnz	r3, 80077aa <f_mkfs+0xb96>
 800775a:	f104 3aff 	add.w	sl, r4, #4294967295
 800775e:	f204 1bff 	addw	fp, r4, #511	@ 0x1ff
				for (i = 0; i < ss; bcc = crc32(bcc, buf[i++])) ;	/* Calculate table check sum */
 8007762:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8007766:	9807      	ldr	r0, [sp, #28]
 8007768:	f7fd f852 	bl	8004810 <crc32>
 800776c:	45d3      	cmp	fp, sl
 800776e:	9007      	str	r0, [sp, #28]
 8007770:	d1f7      	bne.n	8007762 <f_mkfs+0xb4e>
				if (disk_write(drv, buf, 2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;		/* Write to primary table */
 8007772:	0a7f      	lsrs	r7, r7, #9
 8007774:	f04f 0a01 	mov.w	sl, #1
 8007778:	2300      	movs	r3, #0
 800777a:	4621      	mov	r1, r4
 800777c:	1cba      	adds	r2, r7, #2
 800777e:	9803      	ldr	r0, [sp, #12]
 8007780:	f8cd a000 	str.w	sl, [sp]
 8007784:	f7fc ffaa 	bl	80046dc <disk_write>
 8007788:	2800      	cmp	r0, #0
 800778a:	f47f ac0a 	bne.w	8006fa2 <f_mkfs+0x38e>
				if (disk_write(drv, buf, top_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;	/* Write to secondary table */
 800778e:	9b02      	ldr	r3, [sp, #8]
 8007790:	4621      	mov	r1, r4
 8007792:	9803      	ldr	r0, [sp, #12]
 8007794:	18fa      	adds	r2, r7, r3
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	f8cd a000 	str.w	sl, [sp]
 800779c:	f143 0300 	adc.w	r3, r3, #0
 80077a0:	f7fc ff9c 	bl	80046dc <disk_write>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f47f abfc 	bne.w	8006fa2 <f_mkfs+0x38e>
		} while (++pi < GPT_ITEMS);
 80077aa:	f5b9 4f80 	cmp.w	r9, #16384	@ 0x4000
 80077ae:	d1c0      	bne.n	8007732 <f_mkfs+0xb1e>
		memset(buf, 0, ss);
 80077b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077b4:	2100      	movs	r1, #0
 80077b6:	4620      	mov	r0, r4
 80077b8:	f00e fb5a 	bl	8015e70 <memset>
		memcpy(buf + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16);	/* Signature, version (1.0) and size (92) */
 80077bc:	4bac      	ldr	r3, [pc, #688]	@ (8007a70 <f_mkfs+0xe5c>)
 80077be:	4622      	mov	r2, r4
 80077c0:	f103 0110 	add.w	r1, r3, #16
 80077c4:	f853 0b04 	ldr.w	r0, [r3], #4
 80077c8:	428b      	cmp	r3, r1
 80077ca:	f842 0b04 	str.w	r0, [r2], #4
 80077ce:	d1f9      	bne.n	80077c4 <f_mkfs+0xbb0>
		st_32(buf + GPTH_PtBcc, ~bcc);			/* Table check sum */
 80077d0:	9b07      	ldr	r3, [sp, #28]
 80077d2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077d6:	1e67      	subs	r7, r4, #1
 80077d8:	f104 095b 	add.w	r9, r4, #91	@ 0x5b
 80077dc:	43d9      	mvns	r1, r3
 80077de:	f7fc ff96 	bl	800470e <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80077e2:	2301      	movs	r3, #1
		st_64(buf + GPTH_BakLba, sz_drv - 1);	/* LBA of secondary header */
 80077e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80077e6:	f104 0020 	add.w	r0, r4, #32
	*ptr++ = (BYTE)val; val >>= 8;
 80077ea:	7623      	strb	r3, [r4, #24]
		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
 80077ec:	463d      	mov	r5, r7
		st_64(buf + GPTH_BakLba, sz_drv - 1);	/* LBA of secondary header */
 80077ee:	3a01      	subs	r2, #1
 80077f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80077f2:	f163 0300 	sbc.w	r3, r3, #0
 80077f6:	f7fc ff92 	bl	800471e <st_64>
	*ptr++ = (BYTE)val; val >>= 8;
 80077fa:	2322      	movs	r3, #34	@ 0x22
		st_64(buf + GPTH_LstLba, top_bpt - 1);	/* LBA of last allocatable sector */
 80077fc:	9a08      	ldr	r2, [sp, #32]
 80077fe:	f104 0030 	add.w	r0, r4, #48	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8007802:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
		st_64(buf + GPTH_LstLba, top_bpt - 1);	/* LBA of last allocatable sector */
 8007806:	3a22      	subs	r2, #34	@ 0x22
 8007808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780a:	f163 0300 	sbc.w	r3, r3, #0
 800780e:	f7fc ff86 	bl	800471e <st_64>
	*ptr++ = (BYTE)val; val >>= 8;
 8007812:	2380      	movs	r3, #128	@ 0x80
		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
 8007814:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8007818:	9806      	ldr	r0, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800781a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800781e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8007822:	2302      	movs	r3, #2
 8007824:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
 8007828:	f7fd feaa 	bl	8005580 <make_rand.constprop.0>
		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007834:	f7fc ffec 	bl	8004810 <crc32>
 8007838:	45a9      	cmp	r9, r5
 800783a:	d1f9      	bne.n	8007830 <f_mkfs+0xc1c>
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 800783c:	f104 0810 	add.w	r8, r4, #16
		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
 8007840:	f04f 0a01 	mov.w	sl, #1
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 8007844:	43c1      	mvns	r1, r0
		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
 8007846:	2201      	movs	r2, #1
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 8007848:	4640      	mov	r0, r8
 800784a:	f7fc ff60 	bl	800470e <st_32>
		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
 800784e:	2300      	movs	r3, #0
 8007850:	4621      	mov	r1, r4
 8007852:	9803      	ldr	r0, [sp, #12]
 8007854:	f8cd a000 	str.w	sl, [sp]
 8007858:	f7fc ff40 	bl	80046dc <disk_write>
 800785c:	4683      	mov	fp, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	f47f ab9f 	bne.w	8006fa2 <f_mkfs+0x38e>
		st_64(buf + GPTH_CurLba, sz_drv - 1);	/* LBA of this header */
 8007864:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8007866:	f104 0018 	add.w	r0, r4, #24
 800786a:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 800786c:	3d01      	subs	r5, #1
 800786e:	f146 36ff 	adc.w	r6, r6, #4294967295
 8007872:	462a      	mov	r2, r5
 8007874:	4633      	mov	r3, r6
 8007876:	f7fc ff52 	bl	800471e <st_64>
		st_64(buf + GPTH_PtOfs, top_bpt);		/* LBA of this table */
 800787a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800787e:	9a02      	ldr	r2, [sp, #8]
 8007880:	9b04      	ldr	r3, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007882:	f884 a020 	strb.w	sl, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8007886:	f884 b021 	strb.w	fp, [r4, #33]	@ 0x21
	*ptr++ = (BYTE)val; val >>= 8;
 800788a:	f884 b022 	strb.w	fp, [r4, #34]	@ 0x22
	*ptr++ = (BYTE)val; val >>= 8;
 800788e:	f884 b023 	strb.w	fp, [r4, #35]	@ 0x23
	*ptr++ = (BYTE)val; val >>= 8;
 8007892:	f884 b024 	strb.w	fp, [r4, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8007896:	f884 b025 	strb.w	fp, [r4, #37]	@ 0x25
	*ptr++ = (BYTE)val; val >>= 8;
 800789a:	f884 b026 	strb.w	fp, [r4, #38]	@ 0x26
	*ptr++ = (BYTE)val;
 800789e:	f884 b027 	strb.w	fp, [r4, #39]	@ 0x27
		st_64(buf + GPTH_PtOfs, top_bpt);		/* LBA of this table */
 80078a2:	f7fc ff3c 	bl	800471e <st_64>
		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80078aa:	f884 b010 	strb.w	fp, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80078ae:	f884 b011 	strb.w	fp, [r4, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80078b2:	f884 b012 	strb.w	fp, [r4, #18]
	*ptr++ = (BYTE)val;
 80078b6:	f884 b013 	strb.w	fp, [r4, #19]
		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 80078ba:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80078be:	f7fc ffa7 	bl	8004810 <crc32>
 80078c2:	45b9      	cmp	r9, r7
 80078c4:	d1f9      	bne.n	80078ba <f_mkfs+0xca6>
		st_32(buf + GPTH_Bcc, ~bcc);			/* Header check sum */
 80078c6:	43c1      	mvns	r1, r0
 80078c8:	4640      	mov	r0, r8
 80078ca:	f7fc ff20 	bl	800470e <st_32>
		if (disk_write(drv, buf, sz_drv - 1, 1) != RES_OK) return FR_DISK_ERR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	4621      	mov	r1, r4
 80078d2:	462a      	mov	r2, r5
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4633      	mov	r3, r6
 80078d8:	9803      	ldr	r0, [sp, #12]
 80078da:	f7fc feff 	bl	80046dc <disk_write>
 80078de:	4601      	mov	r1, r0
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f47f ab5e 	bne.w	8006fa2 <f_mkfs+0x38e>
		memset(buf, 0, ss);
 80078e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ea:	4620      	mov	r0, r4
 80078ec:	f00e fac0 	bl	8015e70 <memset>
		memcpy(buf + MBR_Table, gpt_mbr, 16);	/* Create a GPT partition */
 80078f0:	4b60      	ldr	r3, [pc, #384]	@ (8007a74 <f_mkfs+0xe60>)
 80078f2:	f504 72df 	add.w	r2, r4, #446	@ 0x1be
 80078f6:	f103 0110 	add.w	r1, r3, #16
 80078fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80078fe:	428b      	cmp	r3, r1
 8007900:	f842 0b04 	str.w	r0, [r2], #4
 8007904:	d1f9      	bne.n	80078fa <f_mkfs+0xce6>
	*ptr++ = (BYTE)val; val >>= 8;
 8007906:	2355      	movs	r3, #85	@ 0x55
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007908:	2200      	movs	r2, #0
 800790a:	4621      	mov	r1, r4
 800790c:	9803      	ldr	r0, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800790e:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8007912:	23aa      	movs	r3, #170	@ 0xaa
 8007914:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007918:	2301      	movs	r3, #1
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	f7fc fedd 	bl	80046dc <disk_write>
 8007922:	2800      	cmp	r0, #0
 8007924:	f47f ab3d 	bne.w	8006fa2 <f_mkfs+0x38e>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007928:	2200      	movs	r2, #0
 800792a:	9803      	ldr	r0, [sp, #12]
 800792c:	4611      	mov	r1, r2
 800792e:	f7fc fedf 	bl	80046f0 <disk_ioctl>
 8007932:	3800      	subs	r0, #0
 8007934:	bf18      	it	ne
 8007936:	2001      	movne	r0, #1
 8007938:	f7ff b9f3 	b.w	8006d22 <f_mkfs+0x10e>
 800793c:	930a      	str	r3, [sp, #40]	@ 0x28
 800793e:	e707      	b.n	8007750 <f_mkfs+0xb3c>
					sz_part = (nxt_alloc < top_bpt) ? top_bpt - nxt_alloc : 0;
 8007940:	2500      	movs	r5, #0
 8007942:	46a8      	mov	r8, r5
 8007944:	e704      	b.n	8007750 <f_mkfs+0xb3c>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8007946:	4b4c      	ldr	r3, [pc, #304]	@ (8007a78 <f_mkfs+0xe64>)
 8007948:	4598      	cmp	r8, r3
 800794a:	d97c      	bls.n	8007a46 <f_mkfs+0xe32>
 800794c:	2305      	movs	r3, #5
 800794e:	2508      	movs	r5, #8
 8007950:	f64f 423e 	movw	r2, #64574	@ 0xfc3e
 8007954:	006d      	lsls	r5, r5, #1
 8007956:	3b01      	subs	r3, #1
 8007958:	b2ed      	uxtb	r5, r5
 800795a:	d003      	beq.n	8007964 <f_mkfs+0xd50>
 800795c:	fbb8 f1f5 	udiv	r1, r8, r5
 8007960:	4291      	cmp	r1, r2
 8007962:	d8f7      	bhi.n	8007954 <f_mkfs+0xd40>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8007964:	2d00      	cmp	r5, #0
 8007966:	bf08      	it	eq
 8007968:	25ff      	moveq	r5, #255	@ 0xff
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800796a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800796e:	2100      	movs	r1, #0
 8007970:	4620      	mov	r0, r4
 8007972:	f00e fa7d 	bl	8015e70 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8007976:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
 800797a:	d9c4      	bls.n	8007906 <f_mkfs+0xcf2>
 800797c:	223f      	movs	r2, #63	@ 0x3f
 800797e:	f10d 0a70 	add.w	sl, sp, #112	@ 0x70
 8007982:	f504 76e3 	add.w	r6, r4, #454	@ 0x1c6
 8007986:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 800798a:	4693      	mov	fp, r2
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800798c:	f85a 7b08 	ldr.w	r7, [sl], #8
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8007990:	2f64      	cmp	r7, #100	@ 0x64
 8007992:	d804      	bhi.n	800799e <f_mkfs+0xd8a>
 8007994:	d00b      	beq.n	80079ae <f_mkfs+0xd9a>
 8007996:	2164      	movs	r1, #100	@ 0x64
 8007998:	fbb8 f1f1 	udiv	r1, r8, r1
 800799c:	434f      	muls	r7, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800799e:	18b8      	adds	r0, r7, r2
 80079a0:	bf2c      	ite	cs
 80079a2:	2101      	movcs	r1, #1
 80079a4:	2100      	movcc	r1, #0
 80079a6:	4540      	cmp	r0, r8
 80079a8:	d801      	bhi.n	80079ae <f_mkfs+0xd9a>
 80079aa:	2900      	cmp	r1, #0
 80079ac:	d04d      	beq.n	8007a4a <f_mkfs+0xe36>
 80079ae:	eba8 0702 	sub.w	r7, r8, r2
			st_32(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 80079b2:	4611      	mov	r1, r2
 80079b4:	4630      	mov	r0, r6
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	f7fc fea9 	bl	800470e <st_32>
			st_32(pte + PTE_SizLba, sz_part32);		/* Size of partition [sector] */
 80079bc:	4639      	mov	r1, r7
 80079be:	1d30      	adds	r0, r6, #4
 80079c0:	f7fc fea5 	bl	800470e <st_32>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80079c4:	9b02      	ldr	r3, [sp, #8]
			pte[PTE_System] = sys;					/* System type */
 80079c6:	f806 9c04 	strb.w	r9, [r6, #-4]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80079ca:	42b3      	cmp	r3, r6
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 80079cc:	fbb2 f1fb 	udiv	r1, r2, fp
 80079d0:	fbb1 f0f5 	udiv	r0, r1, r5
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 80079d4:	fb05 1c10 	mls	ip, r5, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 80079d8:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
			pte[PTE_StCyl] = (BYTE)cy;
 80079dc:	f806 0c05 	strb.w	r0, [r6, #-5]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 80079e0:	eba2 0101 	sub.w	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 80079e4:	f806 cc07 	strb.w	ip, [r6, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80079e8:	ea4f 0c90 	mov.w	ip, r0, lsr #2
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 80079ec:	443a      	add	r2, r7
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
 80079ee:	f101 0101 	add.w	r1, r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80079f2:	f02c 0c3f 	bic.w	ip, ip, #63	@ 0x3f
 80079f6:	ea41 010c 	orr.w	r1, r1, ip
 80079fa:	f806 1c06 	strb.w	r1, [r6, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 80079fe:	f102 31ff 	add.w	r1, r2, #4294967295
 8007a02:	fbb1 f7fb 	udiv	r7, r1, fp
 8007a06:	fbb7 f0f5 	udiv	r0, r7, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8007a0a:	fb05 7c10 	mls	ip, r5, r0, r7
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8007a0e:	ebc7 1787 	rsb	r7, r7, r7, lsl #6
			pte[PTE_EdCyl] = (BYTE)cy;
 8007a12:	f806 0c01 	strb.w	r0, [r6, #-1]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8007a16:	eba1 0107 	sub.w	r1, r1, r7
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8007a1a:	ea4f 0790 	mov.w	r7, r0, lsr #2
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8007a1e:	f806 cc03 	strb.w	ip, [r6, #-3]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
 8007a22:	f101 0101 	add.w	r1, r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8007a26:	f027 073f 	bic.w	r7, r7, #63	@ 0x3f
 8007a2a:	ea41 0107 	orr.w	r1, r1, r7
 8007a2e:	f806 1c02 	strb.w	r1, [r6, #-2]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8007a32:	f43f af68 	beq.w	8007906 <f_mkfs+0xcf2>
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	f43f af65 	beq.w	8007906 <f_mkfs+0xcf2>
 8007a3c:	4542      	cmp	r2, r8
 8007a3e:	f106 0610 	add.w	r6, r6, #16
 8007a42:	d3a3      	bcc.n	800798c <f_mkfs+0xd78>
 8007a44:	e75f      	b.n	8007906 <f_mkfs+0xcf2>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8007a46:	2508      	movs	r5, #8
 8007a48:	e78f      	b.n	800796a <f_mkfs+0xd56>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d1b1      	bne.n	80079b2 <f_mkfs+0xd9e>
 8007a4e:	e75a      	b.n	8007906 <f_mkfs+0xcf2>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a50:	200b      	movs	r0, #11
 8007a52:	f7ff b966 	b.w	8006d22 <f_mkfs+0x10e>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8007a56:	2003      	movs	r0, #3
 8007a58:	f7ff b963 	b.w	8006d22 <f_mkfs+0x10e>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007a5c:	200a      	movs	r0, #10
 8007a5e:	f7ff b960 	b.w	8006d22 <f_mkfs+0x10e>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8007a62:	2011      	movs	r0, #17
 8007a64:	f7ff b95d 	b.w	8006d22 <f_mkfs+0x10e>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8007a68:	2013      	movs	r0, #19
 8007a6a:	f7ff b95a 	b.w	8006d22 <f_mkfs+0x10e>
 8007a6e:	bf00      	nop
 8007a70:	0801696c 	.word	0x0801696c
 8007a74:	0801697c 	.word	0x0801697c
 8007a78:	0007e1f7 	.word	0x0007e1f7
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8007a7c:	f640 73f5 	movw	r3, #4085	@ 0xff5
 8007a80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a82:	429a      	cmp	r2, r3
 8007a84:	f63f a94c 	bhi.w	8006d20 <f_mkfs+0x10c>
 8007a88:	2701      	movs	r7, #1
		memset(buf, 0, ss);
 8007a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4620      	mov	r0, r4
 8007a92:	f00e f9ed 	bl	8015e70 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007a96:	4b9a      	ldr	r3, [pc, #616]	@ (8007d00 <f_mkfs+0x10ec>)
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8007a98:	2f03      	cmp	r7, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8007a9a:	f884 900e 	strb.w	r9, [r4, #14]
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007a9e:	681a      	ldr	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007aa0:	f3c9 2907 	ubfx	r9, r9, #8, #8
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8007aa4:	bf08      	it	eq
 8007aa6:	f04f 0a00 	moveq.w	sl, #0
		if (sz_vol < 0x10000) {
 8007aaa:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007aae:	6022      	str	r2, [r4, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ab2:	f884 a011 	strb.w	sl, [r4, #17]
 8007ab6:	f3ca 2a07 	ubfx	sl, sl, #8, #8
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007aba:	6062      	str	r2, [r4, #4]
 8007abc:	891a      	ldrh	r2, [r3, #8]
 8007abe:	7a9b      	ldrb	r3, [r3, #10]
 8007ac0:	8122      	strh	r2, [r4, #8]
 8007ac2:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8007ac4:	f04f 0302 	mov.w	r3, #2
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007ac8:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 8007aca:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007acc:	9b06      	ldr	r3, [sp, #24]
	*ptr++ = (BYTE)val;
 8007ace:	f884 900f 	strb.w	r9, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007ad2:	7423      	strb	r3, [r4, #16]
		if (sz_vol < 0x10000) {
 8007ad4:	f17b 0300 	sbcs.w	r3, fp, #0
	*ptr++ = (BYTE)val;
 8007ad8:	f884 a012 	strb.w	sl, [r4, #18]
		if (sz_vol < 0x10000) {
 8007adc:	f4bf adfd 	bcs.w	80076da <f_mkfs+0xac6>
	*ptr++ = (BYTE)val; val >>= 8;
 8007ae0:	f884 8013 	strb.w	r8, [r4, #19]
 8007ae4:	f3c8 2807 	ubfx	r8, r8, #8, #8
	*ptr++ = (BYTE)val;
 8007ae8:	f884 8014 	strb.w	r8, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007aec:	23f8      	movs	r3, #248	@ 0xf8
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8007aee:	9904      	ldr	r1, [sp, #16]
 8007af0:	f104 001c 	add.w	r0, r4, #28
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007af4:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8007af6:	233f      	movs	r3, #63	@ 0x3f
 8007af8:	7623      	strb	r3, [r4, #24]
 8007afa:	23ff      	movs	r3, #255	@ 0xff
 8007afc:	76a3      	strb	r3, [r4, #26]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8007afe:	f7fc fe06 	bl	800470e <st_32>
		if (fsty == FS_FAT32) {
 8007b02:	2f03      	cmp	r7, #3
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8007b04:	9910      	ldr	r1, [sp, #64]	@ 0x40
		if (fsty == FS_FAT32) {
 8007b06:	f47f adee 	bne.w	80076e6 <f_mkfs+0xad2>
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8007b0a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007b0e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8007b12:	f7fc fdfc 	bl	800470e <st_32>
			st_32(buf + BPB_FATSz32, sz_fat);			/* FAT size [sector] */
 8007b16:	9907      	ldr	r1, [sp, #28]
 8007b18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b1c:	f7fc fdf7 	bl	800470e <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8007b20:	2302      	movs	r3, #2
 8007b22:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8007b2c:	2306      	movs	r3, #6
 8007b2e:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007b32:	2380      	movs	r3, #128	@ 0x80
 8007b34:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007b38:	2329      	movs	r3, #41	@ 0x29
 8007b3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007b3e:	4b71      	ldr	r3, [pc, #452]	@ (8007d04 <f_mkfs+0x10f0>)
 8007b40:	f103 0110 	add.w	r1, r3, #16
 8007b44:	f853 0b04 	ldr.w	r0, [r3], #4
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	f842 0b04 	str.w	r0, [r2], #4
 8007b4e:	d1f9      	bne.n	8007b44 <f_mkfs+0xf30>
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007b50:	8819      	ldrh	r1, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b52:	f04f 0b55 	mov.w	fp, #85	@ 0x55
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007b56:	789b      	ldrb	r3, [r3, #2]
	*ptr++ = (BYTE)val;
 8007b58:	f04f 0aaa 	mov.w	sl, #170	@ 0xaa
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007b5c:	f04f 0801 	mov.w	r8, #1
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007b60:	8011      	strh	r1, [r2, #0]
 8007b62:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007b64:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8007b66:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007b6a:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8007b6c:	f884 a1ff 	strb.w	sl, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8007b70:	9a04      	ldr	r2, [sp, #16]
 8007b72:	9803      	ldr	r0, [sp, #12]
 8007b74:	f8cd 8000 	str.w	r8, [sp]
 8007b78:	f7fc fdb0 	bl	80046dc <disk_write>
 8007b7c:	4681      	mov	r9, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f47f aa0f 	bne.w	8006fa2 <f_mkfs+0x38e>
		if (fsty == FS_FAT32) {
 8007b84:	2f03      	cmp	r7, #3
 8007b86:	d13e      	bne.n	8007c06 <f_mkfs+0xff2>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	9803      	ldr	r0, [sp, #12]
 8007b8e:	1d9a      	adds	r2, r3, #6
 8007b90:	f8cd 8000 	str.w	r8, [sp]
 8007b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b96:	f7fc fda1 	bl	80046dc <disk_write>
			memset(buf, 0, ss);
 8007b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f00e f965 	bl	8015e70 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8007ba6:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8007ba8:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8007baa:	2172      	movs	r1, #114	@ 0x72
 8007bac:	7023      	strb	r3, [r4, #0]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007bae:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
	*ptr++ = (BYTE)val; val >>= 8;
 8007bb2:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bb4:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8007bb6:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bb8:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8007bba:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007bbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc0:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc4:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007bc8:	1e59      	subs	r1, r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007bca:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007bce:	f7fc fd9e 	bl	800470e <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8007bd2:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007bd4:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8007bd6:	f884 b1fe 	strb.w	fp, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8007bda:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007bde:	9b04      	ldr	r3, [sp, #16]
	*ptr++ = (BYTE)val;
 8007be0:	f884 a1ff 	strb.w	sl, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007be4:	1dda      	adds	r2, r3, #7
 8007be6:	9803      	ldr	r0, [sp, #12]
 8007be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bea:	f8cd 8000 	str.w	r8, [sp]
 8007bee:	f7fc fd75 	bl	80046dc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007bf2:	9b04      	ldr	r3, [sp, #16]
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	9803      	ldr	r0, [sp, #12]
 8007bf8:	eb03 0208 	add.w	r2, r3, r8
 8007bfc:	f8cd 8000 	str.w	r8, [sp]
 8007c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c02:	f7fc fd6b 	bl	80046dc <disk_write>
		memset(buf, 0, sz_buf * ss);
 8007c06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4620      	mov	r0, r4
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8007c0c:	f04f 0b00 	mov.w	fp, #0
		memset(buf, 0, sz_buf * ss);
 8007c10:	f36f 0208 	bfc	r2, #0, #9
 8007c14:	f00e f92c 	bl	8015e70 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8007c18:	2f01      	cmp	r7, #1
 8007c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8007d08 <f_mkfs+0x10f4>)
 8007c1c:	bf14      	ite	ne
 8007c1e:	f06f 0a07 	mvnne.w	sl, #7
 8007c22:	469a      	moveq	sl, r3
			if (fsty == FS_FAT32) {
 8007c24:	2f03      	cmp	r7, #3
 8007c26:	f47f ad79 	bne.w	800771c <f_mkfs+0xb08>
	*ptr++ = (BYTE)val; val >>= 8;
 8007c2a:	23f8      	movs	r3, #248	@ 0xf8
 8007c2c:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c2e:	23ff      	movs	r3, #255	@ 0xff
 8007c30:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c32:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8007c34:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c36:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c38:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c3a:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8007c3c:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c3e:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c40:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c42:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8007c44:	230f      	movs	r3, #15
 8007c46:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8007c48:	f8dd 901c 	ldr.w	r9, [sp, #28]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007c4e:	4621      	mov	r1, r4
 8007c50:	462a      	mov	r2, r5
 8007c52:	9803      	ldr	r0, [sp, #12]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007c54:	454b      	cmp	r3, r9
 8007c56:	bf28      	it	cs
 8007c58:	464b      	movcs	r3, r9
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007c5a:	9300      	str	r3, [sp, #0]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007c5c:	4698      	mov	r8, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007c5e:	9b05      	ldr	r3, [sp, #20]
 8007c60:	f7fc fd3c 	bl	80046dc <disk_write>
 8007c64:	4601      	mov	r1, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f47f a99b 	bne.w	8006fa2 <f_mkfs+0x38e>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 8007c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c70:	4620      	mov	r0, r4
 8007c72:	f00e f8fd 	bl	8015e70 <memset>
				sect += n; nsect -= n;
 8007c76:	eb18 0505 	adds.w	r5, r8, r5
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	f143 0300 	adc.w	r3, r3, #0
			} while (nsect);
 8007c80:	ebb9 0908 	subs.w	r9, r9, r8
				sect += n; nsect -= n;
 8007c84:	9305      	str	r3, [sp, #20]
			} while (nsect);
 8007c86:	d1e1      	bne.n	8007c4c <f_mkfs+0x1038>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8007c88:	f08b 0301 	eor.w	r3, fp, #1
 8007c8c:	f04f 0b01 	mov.w	fp, #1
 8007c90:	9a06      	ldr	r2, [sp, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf14      	ite	ne
 8007c96:	465b      	movne	r3, fp
 8007c98:	2302      	moveq	r3, #2
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d8c2      	bhi.n	8007c24 <f_mkfs+0x1010>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007c9e:	9b08      	ldr	r3, [sp, #32]
 8007ca0:	2f03      	cmp	r7, #3
 8007ca2:	bf08      	it	eq
 8007ca4:	4633      	moveq	r3, r6
 8007ca6:	9308      	str	r3, [sp, #32]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007ca8:	9e08      	ldr	r6, [sp, #32]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007caa:	462a      	mov	r2, r5
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007cae:	4621      	mov	r1, r4
 8007cb0:	9803      	ldr	r0, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007cb2:	429e      	cmp	r6, r3
 8007cb4:	bf28      	it	cs
 8007cb6:	461e      	movcs	r6, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007cb8:	9b05      	ldr	r3, [sp, #20]
 8007cba:	9600      	str	r6, [sp, #0]
 8007cbc:	f7fc fd0e 	bl	80046dc <disk_write>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f47f a96e 	bne.w	8006fa2 <f_mkfs+0x38e>
			sect += n; nsect -= n;
 8007cc6:	1975      	adds	r5, r6, r5
 8007cc8:	9b05      	ldr	r3, [sp, #20]
 8007cca:	f143 0300 	adc.w	r3, r3, #0
 8007cce:	9305      	str	r3, [sp, #20]
		} while (nsect);
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	1b9b      	subs	r3, r3, r6
 8007cd4:	9308      	str	r3, [sp, #32]
 8007cd6:	d1e7      	bne.n	8007ca8 <f_mkfs+0x1094>
	} else if (fsty == FS_FAT32) {
 8007cd8:	2f03      	cmp	r7, #3
 8007cda:	f43f ad24 	beq.w	8007726 <f_mkfs+0xb12>
	} else if (sz_vol >= 0x10000) {
 8007cde:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ce6:	f173 0300 	sbcs.w	r3, r3, #0
 8007cea:	f4bf ad1f 	bcs.w	800772c <f_mkfs+0xb18>
		sys = 0x04;		/* FAT16 */
 8007cee:	2f02      	cmp	r7, #2
 8007cf0:	bf14      	ite	ne
 8007cf2:	f04f 0901 	movne.w	r9, #1
 8007cf6:	f04f 0904 	moveq.w	r9, #4
 8007cfa:	f7ff bb6a 	b.w	80073d2 <f_mkfs+0x7be>
 8007cfe:	bf00      	nop
 8007d00:	08016dc6 	.word	0x08016dc6
 8007d04:	08016dd2 	.word	0x08016dd2
 8007d08:	00fffff8 	.word	0x00fffff8

08007d0c <ff_uni2oem>:
	const WCHAR* p;
	WCHAR c = 0, uc;
	UINT i, n, li, hi;


	if (uni < 0x80) {	/* ASCII? */
 8007d0c:	287f      	cmp	r0, #127	@ 0x7f
{
 8007d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x80) {	/* ASCII? */
 8007d10:	d801      	bhi.n	8007d16 <ff_uni2oem+0xa>
		c = (WCHAR)uni;
 8007d12:	b280      	uxth	r0, r0
			}
		}
	}

	return c;
}
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (uni < 0x10000) { /* Is it in BMP? */
 8007d16:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d1a:	d229      	bcs.n	8007d70 <ff_uni2oem+0x64>
			if (cp < 900) {	/* SBCS */
 8007d1c:	f5b1 7f61 	cmp.w	r1, #900	@ 0x384
			uc = (WCHAR)uni;
 8007d20:	b285      	uxth	r5, r0
			if (cp < 900) {	/* SBCS */
 8007d22:	d21a      	bcs.n	8007d5a <ff_uni2oem+0x4e>
 8007d24:	4826      	ldr	r0, [pc, #152]	@ (8007dc0 <ff_uni2oem+0xb4>)
				for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get conversion table */
 8007d26:	2300      	movs	r3, #0
 8007d28:	f830 2b02 	ldrh.w	r2, [r0], #2
 8007d2c:	b95a      	cbnz	r2, 8007d46 <ff_uni2oem+0x3a>
				p = cp_table[i];
 8007d2e:	4a25      	ldr	r2, [pc, #148]	@ (8007dc4 <ff_uni2oem+0xb8>)
 8007d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
				if (p) {	/* Is it valid code page ? */
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d0ed      	beq.n	8007d14 <ff_uni2oem+0x8>
 8007d38:	2300      	movs	r3, #0
					for (c = 0; c < 0x80 && uc != p[c]; c++) ;	/* Find OEM code in the table */
 8007d3a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8007d3e:	42aa      	cmp	r2, r5
 8007d40:	d105      	bne.n	8007d4e <ff_uni2oem+0x42>
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	e006      	b.n	8007d54 <ff_uni2oem+0x48>
				for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get conversion table */
 8007d46:	428a      	cmp	r2, r1
 8007d48:	d0f1      	beq.n	8007d2e <ff_uni2oem+0x22>
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	e7ec      	b.n	8007d28 <ff_uni2oem+0x1c>
					for (c = 0; c < 0x80 && uc != p[c]; c++) ;	/* Find OEM code in the table */
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2b80      	cmp	r3, #128	@ 0x80
 8007d52:	d1f2      	bne.n	8007d3a <ff_uni2oem+0x2e>
					c = (c + 0x80) & 0xFF;
 8007d54:	3380      	adds	r3, #128	@ 0x80
 8007d56:	b2d8      	uxtb	r0, r3
 8007d58:	e7dc      	b.n	8007d14 <ff_uni2oem+0x8>
				switch (cp) {	/* Get conversion table */
 8007d5a:	f240 33b5 	movw	r3, #949	@ 0x3b5
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	d01f      	beq.n	8007da2 <ff_uni2oem+0x96>
 8007d62:	d807      	bhi.n	8007d74 <ff_uni2oem+0x68>
 8007d64:	f5b1 7f69 	cmp.w	r1, #932	@ 0x3a4
 8007d68:	d01f      	beq.n	8007daa <ff_uni2oem+0x9e>
 8007d6a:	f5b1 7f6a 	cmp.w	r1, #936	@ 0x3a8
 8007d6e:	d020      	beq.n	8007db2 <ff_uni2oem+0xa6>
	WCHAR c = 0, uc;
 8007d70:	2000      	movs	r0, #0
 8007d72:	e7cf      	b.n	8007d14 <ff_uni2oem+0x8>
				switch (cp) {	/* Get conversion table */
 8007d74:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d1f9      	bne.n	8007d70 <ff_uni2oem+0x64>
				case 950 : p = uni2oem950; hi = sizeof uni2oem950 / 4 - 1; break;
 8007d7c:	f243 41bf 	movw	r1, #13503	@ 0x34bf
 8007d80:	4b11      	ldr	r3, [pc, #68]	@ (8007dc8 <ff_uni2oem+0xbc>)
					li = 0;
 8007d82:	2400      	movs	r4, #0
					for (n = 16; n; n--) {	/* Find OEM code */
 8007d84:	2010      	movs	r0, #16
						i = li + (hi - li) / 2;
 8007d86:	1b0a      	subs	r2, r1, r4
 8007d88:	eb04 0252 	add.w	r2, r4, r2, lsr #1
						if (uc == p[i * 2]) break;
 8007d8c:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
 8007d90:	0096      	lsls	r6, r2, #2
 8007d92:	42af      	cmp	r7, r5
 8007d94:	d011      	beq.n	8007dba <ff_uni2oem+0xae>
							li = i;
 8007d96:	bf34      	ite	cc
 8007d98:	4614      	movcc	r4, r2
							hi = i;
 8007d9a:	4611      	movcs	r1, r2
					for (n = 16; n; n--) {	/* Find OEM code */
 8007d9c:	3801      	subs	r0, #1
 8007d9e:	d1f2      	bne.n	8007d86 <ff_uni2oem+0x7a>
 8007da0:	e7b8      	b.n	8007d14 <ff_uni2oem+0x8>
				case 949 : p = uni2oem949; hi = sizeof uni2oem949 / 4 - 1; break;
 8007da2:	f244 2198 	movw	r1, #17048	@ 0x4298
 8007da6:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <ff_uni2oem+0xc0>)
 8007da8:	e7eb      	b.n	8007d82 <ff_uni2oem+0x76>
				case 932 : p = uni2oem932; hi = sizeof uni2oem932 / 4 - 1; break;
 8007daa:	f641 41dd 	movw	r1, #7389	@ 0x1cdd
 8007dae:	4b08      	ldr	r3, [pc, #32]	@ (8007dd0 <ff_uni2oem+0xc4>)
 8007db0:	e7e7      	b.n	8007d82 <ff_uni2oem+0x76>
				switch (cp) {	/* Get conversion table */
 8007db2:	f245 5120 	movw	r1, #21792	@ 0x5520
 8007db6:	4b07      	ldr	r3, [pc, #28]	@ (8007dd4 <ff_uni2oem+0xc8>)
 8007db8:	e7e3      	b.n	8007d82 <ff_uni2oem+0x76>
					if (n != 0) c = p[i * 2 + 1];
 8007dba:	4433      	add	r3, r6
 8007dbc:	8858      	ldrh	r0, [r3, #2]
	return c;
 8007dbe:	e7a9      	b.n	8007d14 <ff_uni2oem+0x8>
 8007dc0:	080195b4 	.word	0x080195b4
 8007dc4:	0801956c 	.word	0x0801956c
 8007dc8:	080279d8 	.word	0x080279d8
 8007dcc:	0804573c 	.word	0x0804573c
 8007dd0:	08087e20 	.word	0x08087e20
 8007dd4:	0806b624 	.word	0x0806b624

08007dd8 <ff_oem2uni>:
	const WCHAR* p;
	WCHAR c = 0;
	UINT i, n, li, hi;


	if (oem < 0x80) {	/* ASCII? */
 8007dd8:	287f      	cmp	r0, #127	@ 0x7f
{
 8007dda:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (oem < 0x80) {	/* ASCII? */
 8007ddc:	d918      	bls.n	8007e10 <ff_oem2uni+0x38>
		c = oem;

	} else {			/* Extended char */
		p = 0;
		if (cp < 900) {	/* SBCS */
 8007dde:	f5b1 7f61 	cmp.w	r1, #900	@ 0x384
 8007de2:	d216      	bcs.n	8007e12 <ff_oem2uni+0x3a>
 8007de4:	4c23      	ldr	r4, [pc, #140]	@ (8007e74 <ff_oem2uni+0x9c>)
			for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get table */
 8007de6:	2300      	movs	r3, #0
 8007de8:	f834 2b02 	ldrh.w	r2, [r4], #2
 8007dec:	b92a      	cbnz	r2, 8007dfa <ff_oem2uni+0x22>
			p = cp_table[i];
 8007dee:	4a22      	ldr	r2, [pc, #136]	@ (8007e78 <ff_oem2uni+0xa0>)
 8007df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (p) {	/* Is it a valid CP ? */
 8007df4:	b92b      	cbnz	r3, 8007e02 <ff_oem2uni+0x2a>
	WCHAR c = 0;
 8007df6:	2000      	movs	r0, #0
 8007df8:	e00a      	b.n	8007e10 <ff_oem2uni+0x38>
			for (i = 0; cp_code[i] != 0 && cp_code[i] != cp; i++) ;		/* Get table */
 8007dfa:	428a      	cmp	r2, r1
 8007dfc:	d0f7      	beq.n	8007dee <ff_oem2uni+0x16>
 8007dfe:	3301      	adds	r3, #1
 8007e00:	e7f2      	b.n	8007de8 <ff_oem2uni+0x10>
				if (oem < 0x100) c = p[oem - 0x80];
 8007e02:	28ff      	cmp	r0, #255	@ 0xff
 8007e04:	d8f7      	bhi.n	8007df6 <ff_oem2uni+0x1e>
 8007e06:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007e0a:	3880      	subs	r0, #128	@ 0x80
 8007e0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			}
		}
	}

	return c;
}
 8007e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (cp) {
 8007e12:	f240 33b5 	movw	r3, #949	@ 0x3b5
 8007e16:	4299      	cmp	r1, r3
 8007e18:	d021      	beq.n	8007e5e <ff_oem2uni+0x86>
 8007e1a:	d809      	bhi.n	8007e30 <ff_oem2uni+0x58>
 8007e1c:	f5b1 7f69 	cmp.w	r1, #932	@ 0x3a4
 8007e20:	d021      	beq.n	8007e66 <ff_oem2uni+0x8e>
 8007e22:	f5b1 7f6a 	cmp.w	r1, #936	@ 0x3a8
 8007e26:	d1e6      	bne.n	8007df6 <ff_oem2uni+0x1e>
 8007e28:	f245 5120 	movw	r1, #21792	@ 0x5520
 8007e2c:	4b13      	ldr	r3, [pc, #76]	@ (8007e7c <ff_oem2uni+0xa4>)
 8007e2e:	e006      	b.n	8007e3e <ff_oem2uni+0x66>
 8007e30:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d1de      	bne.n	8007df6 <ff_oem2uni+0x1e>
			case 950 : p = oem2uni950; hi = sizeof oem2uni950 / 4 - 1; break;
 8007e38:	f243 41bf 	movw	r1, #13503	@ 0x34bf
 8007e3c:	4b10      	ldr	r3, [pc, #64]	@ (8007e80 <ff_oem2uni+0xa8>)
				li = 0;
 8007e3e:	2500      	movs	r5, #0
				for (n = 16; n; n--) {
 8007e40:	2410      	movs	r4, #16
					i = li + (hi - li) / 2;
 8007e42:	1b4a      	subs	r2, r1, r5
 8007e44:	eb05 0252 	add.w	r2, r5, r2, lsr #1
					if (oem == p[i * 2]) break;
 8007e48:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
 8007e4c:	0096      	lsls	r6, r2, #2
 8007e4e:	4287      	cmp	r7, r0
 8007e50:	d00d      	beq.n	8007e6e <ff_oem2uni+0x96>
						li = i;
 8007e52:	bf34      	ite	cc
 8007e54:	4615      	movcc	r5, r2
						hi = i;
 8007e56:	4611      	movcs	r1, r2
				for (n = 16; n; n--) {
 8007e58:	3c01      	subs	r4, #1
 8007e5a:	d1f2      	bne.n	8007e42 <ff_oem2uni+0x6a>
 8007e5c:	e7cb      	b.n	8007df6 <ff_oem2uni+0x1e>
			case 949 : p = oem2uni949; hi = sizeof oem2uni949 / 4 - 1; break;
 8007e5e:	f244 2198 	movw	r1, #17048	@ 0x4298
 8007e62:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <ff_oem2uni+0xac>)
 8007e64:	e7eb      	b.n	8007e3e <ff_oem2uni+0x66>
			case 932 : p = oem2uni932; hi = sizeof oem2uni932 / 4 - 1; break;
 8007e66:	f641 41dd 	movw	r1, #7389	@ 0x1cdd
 8007e6a:	4b07      	ldr	r3, [pc, #28]	@ (8007e88 <ff_oem2uni+0xb0>)
 8007e6c:	e7e7      	b.n	8007e3e <ff_oem2uni+0x66>
				if (n != 0) c = p[i * 2 + 1];
 8007e6e:	4433      	add	r3, r6
 8007e70:	8858      	ldrh	r0, [r3, #2]
	return c;
 8007e72:	e7cd      	b.n	8007e10 <ff_oem2uni+0x38>
 8007e74:	080195b4 	.word	0x080195b4
 8007e78:	0801956c 	.word	0x0801956c
 8007e7c:	080561a0 	.word	0x080561a0
 8007e80:	0801a6d8 	.word	0x0801a6d8
 8007e84:	08034cd8 	.word	0x08034cd8
 8007e88:	08080aa8 	.word	0x08080aa8

08007e8c <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8007e8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
{
 8007e90:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 8007e92:	d222      	bcs.n	8007eda <ff_wtoupper+0x4e>
		uc = (WORD)uni;
 8007e94:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8007e96:	4a1f      	ldr	r2, [pc, #124]	@ (8007f14 <ff_wtoupper+0x88>)
 8007e98:	491f      	ldr	r1, [pc, #124]	@ (8007f18 <ff_wtoupper+0x8c>)
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e9e:	bf38      	it	cc
 8007ea0:	460a      	movcc	r2, r1
 8007ea2:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 8007ea4:	f834 2c04 	ldrh.w	r2, [r4, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	b1aa      	cbz	r2, 8007ed8 <ff_wtoupper+0x4c>
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d313      	bcc.n	8007ed8 <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007eb0:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 8007eb4:	0a2e      	lsrs	r6, r5, #8
 8007eb6:	b2ef      	uxtb	r7, r5
			if (uc < bc + nc) {	/* In the block? */
 8007eb8:	fa52 f585 	uxtab	r5, r2, r5
 8007ebc:	42a8      	cmp	r0, r5
 8007ebe:	da23      	bge.n	8007f08 <ff_wtoupper+0x7c>
				switch (cmd) {
 8007ec0:	2e08      	cmp	r6, #8
 8007ec2:	d809      	bhi.n	8007ed8 <ff_wtoupper+0x4c>
 8007ec4:	e8df f006 	tbb	[pc, r6]
 8007ec8:	13100a05 	.word	0x13100a05
 8007ecc:	1b191715 	.word	0x1b191715
 8007ed0:	1d          	.byte	0x1d
 8007ed1:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007ed2:	1a80      	subs	r0, r0, r2
 8007ed4:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 8007ed8:	4618      	mov	r0, r3
	}

	return uni;
}
 8007eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8007edc:	1a9a      	subs	r2, r3, r2
 8007ede:	f002 0201 	and.w	r2, r2, #1
 8007ee2:	1a9a      	subs	r2, r3, r2
 8007ee4:	b293      	uxth	r3, r2
 8007ee6:	e7f7      	b.n	8007ed8 <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
 8007ee8:	3b10      	subs	r3, #16
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	e7f4      	b.n	8007ed8 <ff_wtoupper+0x4c>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007eee:	3b20      	subs	r3, #32
 8007ef0:	e7fb      	b.n	8007eea <ff_wtoupper+0x5e>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8007ef2:	3b30      	subs	r3, #48	@ 0x30
 8007ef4:	e7f9      	b.n	8007eea <ff_wtoupper+0x5e>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8007ef6:	3b1a      	subs	r3, #26
 8007ef8:	e7f7      	b.n	8007eea <ff_wtoupper+0x5e>
				case 6:	uc += 8; break;				/* Shift +8 */
 8007efa:	3308      	adds	r3, #8
 8007efc:	e7f5      	b.n	8007eea <ff_wtoupper+0x5e>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007efe:	3b50      	subs	r3, #80	@ 0x50
 8007f00:	e7f3      	b.n	8007eea <ff_wtoupper+0x5e>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8007f02:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007f06:	e7f0      	b.n	8007eea <ff_wtoupper+0x5e>
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007f08:	3404      	adds	r4, #4
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d1ca      	bne.n	8007ea4 <ff_wtoupper+0x18>
 8007f0e:	eb01 0247 	add.w	r2, r1, r7, lsl #1
 8007f12:	e7c6      	b.n	8007ea2 <ff_wtoupper+0x16>
 8007f14:	080192be 	.word	0x080192be
 8007f18:	0801937a 	.word	0x0801937a

08007f1c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f1c:	f100 0308 	add.w	r3, r0, #8

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f20:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f24:	6043      	str	r3, [r0, #4]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f26:	6103      	str	r3, [r0, #16]
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f28:	e9c0 2302 	strd	r2, r3, [r0, #8]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f30:	4770      	bx	lr

08007f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f36:	4770      	bx	lr

08007f38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 8007f38:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f3a:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
 8007f3c:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f3e:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f40:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8007f42:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8007f44:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8007f46:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8007f48:	3301      	adds	r3, #1
 8007f4a:	6003      	str	r3, [r0, #0]
}
 8007f4c:	4770      	bx	lr

08007f4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007f4e:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f50:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007f52:	1c63      	adds	r3, r4, #1
 8007f54:	d10a      	bne.n	8007f6c <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007f56:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f5c:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007f5e:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8007f60:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8007f62:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8007f64:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8007f66:	3301      	adds	r3, #1
 8007f68:	6003      	str	r3, [r0, #0]
}
 8007f6a:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f6c:	f100 0208 	add.w	r2, r0, #8
 8007f70:	4613      	mov	r3, r2
 8007f72:	6852      	ldr	r2, [r2, #4]
 8007f74:	6815      	ldr	r5, [r2, #0]
 8007f76:	42a5      	cmp	r5, r4
 8007f78:	d9fa      	bls.n	8007f70 <vListInsert+0x22>
 8007f7a:	e7ed      	b.n	8007f58 <vListInsert+0xa>

08007f7c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007f7c:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f7e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007f82:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f84:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007f86:	6859      	ldr	r1, [r3, #4]
 8007f88:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f8a:	bf08      	it	eq
 8007f8c:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007f8e:	2200      	movs	r2, #0
 8007f90:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	3a01      	subs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007f98:	6818      	ldr	r0, [r3, #0]
}
 8007f9a:	4770      	bx	lr

08007f9c <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007fa0:	f001 fde8 	bl	8009b74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007fa4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8007fa6:	f001 fe09 	bl	8009bbc <vPortExitCritical>

    return xReturn;
}
 8007faa:	fab4 f084 	clz	r0, r4
 8007fae:	0940      	lsrs	r0, r0, #5
 8007fb0:	bd10      	pop	{r4, pc}

08007fb2 <prvCopyDataToQueue>:
{
 8007fb2:	b570      	push	{r4, r5, r6, lr}
 8007fb4:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fb6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8007fb8:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fba:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fbc:	b942      	cbnz	r2, 8007fd0 <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fbe:	6806      	ldr	r6, [r0, #0]
 8007fc0:	b99e      	cbnz	r6, 8007fea <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fc2:	6880      	ldr	r0, [r0, #8]
 8007fc4:	f001 fa32 	bl	800942c <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fc8:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fca:	3501      	adds	r5, #1
 8007fcc:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8007fd0:	b96e      	cbnz	r6, 8007fee <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fd2:	6840      	ldr	r0, [r0, #4]
 8007fd4:	f00d ffe5 	bl	8015fa2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007fdc:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fde:	68a2      	ldr	r2, [r4, #8]
 8007fe0:	4293      	cmp	r3, r2
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fe2:	6063      	str	r3, [r4, #4]
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe4:	bf24      	itt	cs
 8007fe6:	6823      	ldrcs	r3, [r4, #0]
 8007fe8:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8007fea:	2000      	movs	r0, #0
 8007fec:	e7ed      	b.n	8007fca <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fee:	68c0      	ldr	r0, [r0, #12]
 8007ff0:	f00d ffd7 	bl	8015fa2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ff4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ff6:	68e3      	ldr	r3, [r4, #12]
 8007ff8:	4251      	negs	r1, r2
 8007ffa:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ffc:	6822      	ldr	r2, [r4, #0]
 8007ffe:	4293      	cmp	r3, r2
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008000:	60e3      	str	r3, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008002:	bf3e      	ittt	cc
 8008004:	68a3      	ldrcc	r3, [r4, #8]
 8008006:	185b      	addcc	r3, r3, r1
 8008008:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 800800a:	2e02      	cmp	r6, #2
 800800c:	d1ed      	bne.n	8007fea <prvCopyDataToQueue+0x38>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800800e:	b10d      	cbz	r5, 8008014 <prvCopyDataToQueue+0x62>
                --uxMessagesWaiting;
 8008010:	3d01      	subs	r5, #1
 8008012:	e7ea      	b.n	8007fea <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
 8008014:	4628      	mov	r0, r5
 8008016:	e7d8      	b.n	8007fca <prvCopyDataToQueue+0x18>

08008018 <prvCopyDataFromQueue>:
{
 8008018:	4603      	mov	r3, r0
 800801a:	4608      	mov	r0, r1
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800801c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800801e:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008020:	b162      	cbz	r2, 800803c <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008022:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008024:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008026:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008028:	428c      	cmp	r4, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800802a:	60dc      	str	r4, [r3, #12]
}
 800802c:	f85d 4b04 	ldr.w	r4, [sp], #4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008030:	bf24      	itt	cs
 8008032:	6819      	ldrcs	r1, [r3, #0]
 8008034:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008036:	68d9      	ldr	r1, [r3, #12]
 8008038:	f00d bfb3 	b.w	8015fa2 <memcpy>
}
 800803c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008040:	4770      	bx	lr

08008042 <prvUnlockQueue>:
{
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8008046:	f001 fd95 	bl	8009b74 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800804a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8008052:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008054:	2d00      	cmp	r5, #0
 8008056:	dd01      	ble.n	800805c <prvUnlockQueue+0x1a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008058:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800805a:	b9b3      	cbnz	r3, 800808a <prvUnlockQueue+0x48>
        pxQueue->cTxLock = queueUNLOCKED;
 800805c:	23ff      	movs	r3, #255	@ 0xff
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800805e:	f104 0610 	add.w	r6, r4, #16
        pxQueue->cTxLock = queueUNLOCKED;
 8008062:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008066:	f001 fda9 	bl	8009bbc <vPortExitCritical>
    taskENTER_CRITICAL();
 800806a:	f001 fd83 	bl	8009b74 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800806e:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8008072:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008074:	2d00      	cmp	r5, #0
 8008076:	dd01      	ble.n	800807c <prvUnlockQueue+0x3a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	b97b      	cbnz	r3, 800809c <prvUnlockQueue+0x5a>
        pxQueue->cRxLock = queueUNLOCKED;
 800807c:	23ff      	movs	r3, #255	@ 0xff
 800807e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8008082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8008086:	f001 bd99 	b.w	8009bbc <vPortExitCritical>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800808a:	4630      	mov	r0, r6
 800808c:	f001 f8b8 	bl	8009200 <xTaskRemoveFromEventList>
 8008090:	b108      	cbz	r0, 8008096 <prvUnlockQueue+0x54>
                        vTaskMissedYield();
 8008092:	f001 f969 	bl	8009368 <vTaskMissedYield>
            --cTxLock;
 8008096:	3d01      	subs	r5, #1
 8008098:	b26d      	sxtb	r5, r5
 800809a:	e7db      	b.n	8008054 <prvUnlockQueue+0x12>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809c:	4630      	mov	r0, r6
 800809e:	f001 f8af 	bl	8009200 <xTaskRemoveFromEventList>
 80080a2:	b108      	cbz	r0, 80080a8 <prvUnlockQueue+0x66>
                    vTaskMissedYield();
 80080a4:	f001 f960 	bl	8009368 <vTaskMissedYield>
                --cRxLock;
 80080a8:	3d01      	subs	r5, #1
 80080aa:	b26d      	sxtb	r5, r5
 80080ac:	e7e2      	b.n	8008074 <prvUnlockQueue+0x32>

080080ae <xQueueGenericReset>:
{
 80080ae:	b570      	push	{r4, r5, r6, lr}
 80080b0:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 80080b2:	4604      	mov	r4, r0
 80080b4:	b950      	cbnz	r0, 80080cc <xQueueGenericReset+0x1e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	b672      	cpsid	i
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	b662      	cpsie	i
 80080ca:	e7fe      	b.n	80080ca <xQueueGenericReset+0x1c>
        ( pxQueue->uxLength >= 1U ) &&
 80080cc:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80080ce:	b3a5      	cbz	r5, 800813a <xQueueGenericReset+0x8c>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80080d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80080d2:	fba3 3505 	umull	r3, r5, r3, r5
 80080d6:	bb85      	cbnz	r5, 800813a <xQueueGenericReset+0x8c>
        taskENTER_CRITICAL();
 80080d8:	f001 fd4c 	bl	8009b74 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080dc:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080de:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e0:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080e2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80080e6:	434b      	muls	r3, r1
 80080e8:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ea:	1a5b      	subs	r3, r3, r1
 80080ec:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
 80080ee:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080f0:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 80080f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080f6:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
 80080f8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 80080fc:	b9a6      	cbnz	r6, 8008128 <xQueueGenericReset+0x7a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	b173      	cbz	r3, 8008120 <xQueueGenericReset+0x72>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008102:	f104 0010 	add.w	r0, r4, #16
 8008106:	f001 f87b 	bl	8009200 <xTaskRemoveFromEventList>
 800810a:	b148      	cbz	r0, 8008120 <xQueueGenericReset+0x72>
                        queueYIELD_IF_USING_PREEMPTION();
 800810c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008114:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8008120:	f001 fd4c 	bl	8009bbc <vPortExitCritical>
}
 8008124:	2001      	movs	r0, #1
 8008126:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008128:	f104 0010 	add.w	r0, r4, #16
 800812c:	f7ff fef6 	bl	8007f1c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008130:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008134:	f7ff fef2 	bl	8007f1c <vListInitialise>
 8008138:	e7f2      	b.n	8008120 <xQueueGenericReset+0x72>
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
    configASSERT( xReturn != pdFAIL );
 800814e:	e7fe      	b.n	800814e <xQueueGenericReset+0xa0>

08008150 <xQueueGenericCreate>:
    {
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	460d      	mov	r5, r1
 8008154:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008156:	4606      	mov	r6, r0
 8008158:	b1d8      	cbz	r0, 8008192 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800815a:	fba1 2300 	umull	r2, r3, r1, r0
 800815e:	b9c3      	cbnz	r3, 8008192 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008160:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008162:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 8008166:	d814      	bhi.n	8008192 <xQueueGenericCreate+0x42>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008168:	3050      	adds	r0, #80	@ 0x50
 800816a:	f001 fbc3 	bl	80098f4 <pvPortMalloc>
            if( pxNewQueue != NULL )
 800816e:	4604      	mov	r4, r0
 8008170:	b158      	cbz	r0, 800818a <xQueueGenericCreate+0x3a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8008172:	b165      	cbz	r5, 800818e <xQueueGenericCreate+0x3e>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008174:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008178:	2101      	movs	r1, #1
 800817a:	4620      	mov	r0, r4
 800817c:	6023      	str	r3, [r4, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 800817e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008182:	f7ff ff94 	bl	80080ae <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 8008186:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
    }
 800818a:	4620      	mov	r0, r4
 800818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800818e:	4603      	mov	r3, r0
 8008190:	e7f2      	b.n	8008178 <xQueueGenericCreate+0x28>
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
            configASSERT( pxNewQueue );
 80081a6:	e7fe      	b.n	80081a6 <xQueueGenericCreate+0x56>

080081a8 <xQueueGenericSend>:
{
 80081a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80081ac:	460f      	mov	r7, r1
 80081ae:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 80081b0:	4604      	mov	r4, r0
{
 80081b2:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80081b4:	b950      	cbnz	r0, 80081cc <xQueueGenericSend+0x24>
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	b672      	cpsid	i
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	b662      	cpsie	i
 80081ca:	e7fe      	b.n	80081ca <xQueueGenericSend+0x22>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081cc:	b961      	cbnz	r1, 80081e8 <xQueueGenericSend+0x40>
 80081ce:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80081d0:	b153      	cbz	r3, 80081e8 <xQueueGenericSend+0x40>
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	b672      	cpsid	i
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	b662      	cpsie	i
 80081e6:	e7fe      	b.n	80081e6 <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081e8:	2e02      	cmp	r6, #2
 80081ea:	d10d      	bne.n	8008208 <xQueueGenericSend+0x60>
 80081ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d00a      	beq.n	8008208 <xQueueGenericSend+0x60>
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	e7fe      	b.n	8008206 <xQueueGenericSend+0x5e>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008208:	f001 f8ba 	bl	8009380 <xTaskGetSchedulerState>
 800820c:	4605      	mov	r5, r0
 800820e:	b320      	cbz	r0, 800825a <xQueueGenericSend+0xb2>
 8008210:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8008212:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8008216:	f001 fcad 	bl	8009b74 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800821a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800821c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800821e:	429a      	cmp	r2, r3
 8008220:	d229      	bcs.n	8008276 <xQueueGenericSend+0xce>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008222:	4632      	mov	r2, r6
 8008224:	4639      	mov	r1, r7
 8008226:	4620      	mov	r0, r4
 8008228:	f7ff fec3 	bl	8007fb2 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800822c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800822e:	b11b      	cbz	r3, 8008238 <xQueueGenericSend+0x90>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008230:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008234:	f000 ffe4 	bl	8009200 <xTaskRemoveFromEventList>
                    else if( xYieldRequired != pdFALSE )
 8008238:	b148      	cbz	r0, 800824e <xQueueGenericSend+0xa6>
                        queueYIELD_IF_USING_PREEMPTION();
 800823a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800823e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008242:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800824e:	f001 fcb5 	bl	8009bbc <vPortExitCritical>
                return pdPASS;
 8008252:	2001      	movs	r0, #1
}
 8008254:	b004      	add	sp, #16
 8008256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0d8      	beq.n	8008212 <xQueueGenericSend+0x6a>
 8008260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008264:	b672      	cpsid	i
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	b662      	cpsie	i
 8008274:	e7fe      	b.n	8008274 <xQueueGenericSend+0xcc>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008276:	2e02      	cmp	r6, #2
 8008278:	d0d3      	beq.n	8008222 <xQueueGenericSend+0x7a>
                if( xTicksToWait == ( TickType_t ) 0 )
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	b91b      	cbnz	r3, 8008286 <xQueueGenericSend+0xde>
                    taskEXIT_CRITICAL();
 800827e:	f001 fc9d 	bl	8009bbc <vPortExitCritical>
                    return errQUEUE_FULL;
 8008282:	2000      	movs	r0, #0
 8008284:	e7e6      	b.n	8008254 <xQueueGenericSend+0xac>
                else if( xEntryTimeSet == pdFALSE )
 8008286:	b915      	cbnz	r5, 800828e <xQueueGenericSend+0xe6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008288:	a802      	add	r0, sp, #8
 800828a:	f001 f821 	bl	80092d0 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800828e:	f001 fc95 	bl	8009bbc <vPortExitCritical>
        vTaskSuspendAll();
 8008292:	f000 fd87 	bl	8008da4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008296:	f001 fc6d 	bl	8009b74 <vPortEnterCritical>
 800829a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800829e:	2bff      	cmp	r3, #255	@ 0xff
 80082a0:	d101      	bne.n	80082a6 <xQueueGenericSend+0xfe>
 80082a2:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80082a6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80082aa:	2bff      	cmp	r3, #255	@ 0xff
 80082ac:	d101      	bne.n	80082b2 <xQueueGenericSend+0x10a>
 80082ae:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 80082b2:	f001 fc83 	bl	8009bbc <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082b6:	a901      	add	r1, sp, #4
 80082b8:	a802      	add	r0, sp, #8
 80082ba:	f001 f815 	bl	80092e8 <xTaskCheckForTimeOut>
 80082be:	bb38      	cbnz	r0, 8008310 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80082c0:	f001 fc58 	bl	8009b74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80082c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d10e      	bne.n	80082ea <xQueueGenericSend+0x142>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80082cc:	f001 fc76 	bl	8009bbc <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	f104 0010 	add.w	r0, r4, #16
 80082d6:	f000 ff49 	bl	800916c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff feb1 	bl	8008042 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80082e0:	f000 fe2a 	bl	8008f38 <xTaskResumeAll>
 80082e4:	b148      	cbz	r0, 80082fa <xQueueGenericSend+0x152>
 80082e6:	2501      	movs	r5, #1
 80082e8:	e795      	b.n	8008216 <xQueueGenericSend+0x6e>
    taskEXIT_CRITICAL();
 80082ea:	f001 fc67 	bl	8009bbc <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff fea7 	bl	8008042 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80082f4:	f000 fe20 	bl	8008f38 <xTaskResumeAll>
 80082f8:	e7f5      	b.n	80082e6 <xQueueGenericSend+0x13e>
                    portYIELD_WITHIN_API();
 80082fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80082fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008302:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	e7ea      	b.n	80082e6 <xQueueGenericSend+0x13e>
            prvUnlockQueue( pxQueue );
 8008310:	4620      	mov	r0, r4
 8008312:	f7ff fe96 	bl	8008042 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008316:	f000 fe0f 	bl	8008f38 <xTaskResumeAll>
            return errQUEUE_FULL;
 800831a:	e7b2      	b.n	8008282 <xQueueGenericSend+0xda>

0800831c <xQueueCreateMutex>:
    {
 800831c:	4602      	mov	r2, r0
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800831e:	2100      	movs	r1, #0
 8008320:	2001      	movs	r0, #1
    {
 8008322:	b510      	push	{r4, lr}
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008324:	f7ff ff14 	bl	8008150 <xQueueGenericCreate>
        if( pxNewQueue != NULL )
 8008328:	4604      	mov	r4, r0
 800832a:	b138      	cbz	r0, 800833c <xQueueCreateMutex+0x20>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800832c:	2300      	movs	r3, #0
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800832e:	461a      	mov	r2, r3
 8008330:	4619      	mov	r1, r3
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008332:	6083      	str	r3, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008334:	6003      	str	r3, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008336:	60c3      	str	r3, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008338:	f7ff ff36 	bl	80081a8 <xQueueGenericSend>
    }
 800833c:	4620      	mov	r0, r4
 800833e:	bd10      	pop	{r4, pc}

08008340 <xQueueGiveMutexRecursive>:
    {
 8008340:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxMutex );
 8008342:	4604      	mov	r4, r0
 8008344:	b950      	cbnz	r0, 800835c <xQueueGiveMutexRecursive+0x1c>
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	b672      	cpsid	i
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	b662      	cpsie	i
 800835a:	e7fe      	b.n	800835a <xQueueGiveMutexRecursive+0x1a>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800835c:	6885      	ldr	r5, [r0, #8]
 800835e:	f001 f809 	bl	8009374 <xTaskGetCurrentTaskHandle>
 8008362:	4285      	cmp	r5, r0
 8008364:	d10b      	bne.n	800837e <xQueueGiveMutexRecursive+0x3e>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008366:	68e3      	ldr	r3, [r4, #12]
 8008368:	3b01      	subs	r3, #1
 800836a:	60e3      	str	r3, [r4, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800836c:	b10b      	cbz	r3, 8008372 <xQueueGiveMutexRecursive+0x32>
            xReturn = pdPASS;
 800836e:	2001      	movs	r0, #1
    }
 8008370:	bd38      	pop	{r3, r4, r5, pc}
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008372:	461a      	mov	r2, r3
 8008374:	4619      	mov	r1, r3
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff ff16 	bl	80081a8 <xQueueGenericSend>
 800837c:	e7f7      	b.n	800836e <xQueueGiveMutexRecursive+0x2e>
            xReturn = pdFAIL;
 800837e:	2000      	movs	r0, #0
        return xReturn;
 8008380:	e7f6      	b.n	8008370 <xQueueGiveMutexRecursive+0x30>

08008382 <xQueueGenericSendFromISR>:
{
 8008382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008386:	4689      	mov	r9, r1
 8008388:	4617      	mov	r7, r2
 800838a:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 800838c:	4604      	mov	r4, r0
 800838e:	b950      	cbnz	r0, 80083a6 <xQueueGenericSendFromISR+0x24>
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	b672      	cpsid	i
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	b662      	cpsie	i
 80083a4:	e7fe      	b.n	80083a4 <xQueueGenericSendFromISR+0x22>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a6:	b961      	cbnz	r1, 80083c2 <xQueueGenericSendFromISR+0x40>
 80083a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80083aa:	b153      	cbz	r3, 80083c2 <xQueueGenericSendFromISR+0x40>
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	b672      	cpsid	i
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	b662      	cpsie	i
 80083c0:	e7fe      	b.n	80083c0 <xQueueGenericSendFromISR+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083c2:	2e02      	cmp	r6, #2
 80083c4:	d10d      	bne.n	80083e2 <xQueueGenericSendFromISR+0x60>
 80083c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d00a      	beq.n	80083e2 <xQueueGenericSendFromISR+0x60>
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	b672      	cpsid	i
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	b662      	cpsie	i
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericSendFromISR+0x5e>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083e2:	f001 fcc3 	bl	8009d6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80083e6:	f3ef 8811 	mrs	r8, BASEPRI
 80083ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ee:	b672      	cpsid	i
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	b662      	cpsie	i
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008400:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008402:	429a      	cmp	r2, r3
 8008404:	d301      	bcc.n	800840a <xQueueGenericSendFromISR+0x88>
 8008406:	2e02      	cmp	r6, #2
 8008408:	d12f      	bne.n	800846a <xQueueGenericSendFromISR+0xe8>
            const int8_t cTxLock = pxQueue->cTxLock;
 800840a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800840e:	4632      	mov	r2, r6
 8008410:	4649      	mov	r1, r9
 8008412:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8008414:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008416:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008418:	f7ff fdcb 	bl	8007fb2 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 800841c:	1c6b      	adds	r3, r5, #1
 800841e:	d10e      	bne.n	800843e <xQueueGenericSendFromISR+0xbc>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008420:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008422:	b13b      	cbz	r3, 8008434 <xQueueGenericSendFromISR+0xb2>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008424:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008428:	f000 feea 	bl	8009200 <xTaskRemoveFromEventList>
 800842c:	b110      	cbz	r0, 8008434 <xQueueGenericSendFromISR+0xb2>
                            if( pxHigherPriorityTaskWoken != NULL )
 800842e:	b10f      	cbz	r7, 8008434 <xQueueGenericSendFromISR+0xb2>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8008430:	2301      	movs	r3, #1
 8008432:	603b      	str	r3, [r7, #0]
            xReturn = pdPASS;
 8008434:	2001      	movs	r0, #1
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008436:	f388 8811 	msr	BASEPRI, r8
}
 800843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800843e:	f000 fcbf 	bl	8008dc0 <uxTaskGetNumberOfTasks>
 8008442:	4285      	cmp	r5, r0
 8008444:	d2f6      	bcs.n	8008434 <xQueueGenericSendFromISR+0xb2>
 8008446:	2d7f      	cmp	r5, #127	@ 0x7f
 8008448:	d10a      	bne.n	8008460 <xQueueGenericSendFromISR+0xde>
        __asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844e:	b672      	cpsid	i
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	b662      	cpsie	i
 800845e:	e7fe      	b.n	800845e <xQueueGenericSendFromISR+0xdc>
 8008460:	3501      	adds	r5, #1
 8008462:	b26d      	sxtb	r5, r5
 8008464:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008468:	e7e4      	b.n	8008434 <xQueueGenericSendFromISR+0xb2>
            xReturn = errQUEUE_FULL;
 800846a:	2000      	movs	r0, #0
 800846c:	e7e3      	b.n	8008436 <xQueueGenericSendFromISR+0xb4>

0800846e <xQueueGiveFromISR>:
{
 800846e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008470:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 8008472:	4604      	mov	r4, r0
 8008474:	b950      	cbnz	r0, 800848c <xQueueGiveFromISR+0x1e>
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	b672      	cpsid	i
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	b662      	cpsie	i
 800848a:	e7fe      	b.n	800848a <xQueueGiveFromISR+0x1c>
    configASSERT( pxQueue->uxItemSize == 0 );
 800848c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800848e:	b153      	cbz	r3, 80084a6 <xQueueGiveFromISR+0x38>
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	b672      	cpsid	i
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	e7fe      	b.n	80084a4 <xQueueGiveFromISR+0x36>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084a6:	6803      	ldr	r3, [r0, #0]
 80084a8:	b963      	cbnz	r3, 80084c4 <xQueueGiveFromISR+0x56>
 80084aa:	6883      	ldr	r3, [r0, #8]
 80084ac:	b153      	cbz	r3, 80084c4 <xQueueGiveFromISR+0x56>
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	b672      	cpsid	i
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	b662      	cpsie	i
 80084c2:	e7fe      	b.n	80084c2 <xQueueGiveFromISR+0x54>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084c4:	f001 fc52 	bl	8009d6c <vPortValidateInterruptPriority>
        __asm volatile
 80084c8:	f3ef 8711 	mrs	r7, BASEPRI
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	b672      	cpsid	i
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	b662      	cpsie	i
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 80084e2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d92a      	bls.n	800853e <xQueueGiveFromISR+0xd0>
            const int8_t cTxLock = pxQueue->cTxLock;
 80084e8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084ec:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
 80084ee:	2aff      	cmp	r2, #255	@ 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
 80084f0:	b255      	sxtb	r5, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084f2:	63a3      	str	r3, [r4, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
 80084f4:	d10d      	bne.n	8008512 <xQueueGiveFromISR+0xa4>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80084f8:	b13b      	cbz	r3, 800850a <xQueueGiveFromISR+0x9c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084fa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80084fe:	f000 fe7f 	bl	8009200 <xTaskRemoveFromEventList>
 8008502:	b110      	cbz	r0, 800850a <xQueueGiveFromISR+0x9c>
                            if( pxHigherPriorityTaskWoken != NULL )
 8008504:	b10e      	cbz	r6, 800850a <xQueueGiveFromISR+0x9c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	6033      	str	r3, [r6, #0]
            xReturn = pdPASS;
 800850a:	2001      	movs	r0, #1
        __asm volatile
 800850c:	f387 8811 	msr	BASEPRI, r7
}
 8008510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8008512:	f000 fc55 	bl	8008dc0 <uxTaskGetNumberOfTasks>
 8008516:	4285      	cmp	r5, r0
 8008518:	d2f7      	bcs.n	800850a <xQueueGiveFromISR+0x9c>
 800851a:	2d7f      	cmp	r5, #127	@ 0x7f
 800851c:	d10a      	bne.n	8008534 <xQueueGiveFromISR+0xc6>
        __asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	b672      	cpsid	i
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	b662      	cpsie	i
 8008532:	e7fe      	b.n	8008532 <xQueueGiveFromISR+0xc4>
 8008534:	3501      	adds	r5, #1
 8008536:	b26d      	sxtb	r5, r5
 8008538:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800853c:	e7e5      	b.n	800850a <xQueueGiveFromISR+0x9c>
            xReturn = errQUEUE_FULL;
 800853e:	2000      	movs	r0, #0
 8008540:	e7e4      	b.n	800850c <xQueueGiveFromISR+0x9e>

08008542 <xQueueReceive>:
{
 8008542:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008546:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
 8008548:	4604      	mov	r4, r0
{
 800854a:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 800854c:	b950      	cbnz	r0, 8008564 <xQueueReceive+0x22>
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	b672      	cpsid	i
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	b662      	cpsie	i
 8008562:	e7fe      	b.n	8008562 <xQueueReceive+0x20>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008564:	b961      	cbnz	r1, 8008580 <xQueueReceive+0x3e>
 8008566:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008568:	b153      	cbz	r3, 8008580 <xQueueReceive+0x3e>
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	b672      	cpsid	i
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	b662      	cpsie	i
 800857e:	e7fe      	b.n	800857e <xQueueReceive+0x3c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008580:	f000 fefe 	bl	8009380 <xTaskGetSchedulerState>
 8008584:	4605      	mov	r5, r0
 8008586:	b318      	cbz	r0, 80085d0 <xQueueReceive+0x8e>
 8008588:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 800858a:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 800858e:	f001 faf1 	bl	8009b74 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008592:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008594:	b357      	cbz	r7, 80085ec <xQueueReceive+0xaa>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008596:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008598:	4631      	mov	r1, r6
 800859a:	4620      	mov	r0, r4
 800859c:	f7ff fd3c 	bl	8008018 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085a0:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	b173      	cbz	r3, 80085c4 <xQueueReceive+0x82>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a6:	f104 0010 	add.w	r0, r4, #16
 80085aa:	f000 fe29 	bl	8009200 <xTaskRemoveFromEventList>
 80085ae:	b148      	cbz	r0, 80085c4 <xQueueReceive+0x82>
                        queueYIELD_IF_USING_PREEMPTION();
 80085b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80085b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80085c4:	f001 fafa 	bl	8009bbc <vPortExitCritical>
                return pdPASS;
 80085c8:	2001      	movs	r0, #1
}
 80085ca:	b004      	add	sp, #16
 80085cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0d9      	beq.n	800858a <xQueueReceive+0x48>
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	b672      	cpsid	i
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	b662      	cpsie	i
 80085ea:	e7fe      	b.n	80085ea <xQueueReceive+0xa8>
                if( xTicksToWait == ( TickType_t ) 0 )
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	b91b      	cbnz	r3, 80085f8 <xQueueReceive+0xb6>
                    taskEXIT_CRITICAL();
 80085f0:	f001 fae4 	bl	8009bbc <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80085f4:	2000      	movs	r0, #0
 80085f6:	e7e8      	b.n	80085ca <xQueueReceive+0x88>
                else if( xEntryTimeSet == pdFALSE )
 80085f8:	b915      	cbnz	r5, 8008600 <xQueueReceive+0xbe>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80085fa:	a802      	add	r0, sp, #8
 80085fc:	f000 fe68 	bl	80092d0 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8008600:	f001 fadc 	bl	8009bbc <vPortExitCritical>
        vTaskSuspendAll();
 8008604:	f000 fbce 	bl	8008da4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008608:	f001 fab4 	bl	8009b74 <vPortEnterCritical>
 800860c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008610:	2bff      	cmp	r3, #255	@ 0xff
 8008612:	d101      	bne.n	8008618 <xQueueReceive+0xd6>
 8008614:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8008618:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800861c:	2bff      	cmp	r3, #255	@ 0xff
 800861e:	d101      	bne.n	8008624 <xQueueReceive+0xe2>
 8008620:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8008624:	f001 faca 	bl	8009bbc <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008628:	a901      	add	r1, sp, #4
 800862a:	a802      	add	r0, sp, #8
 800862c:	f000 fe5c 	bl	80092e8 <xTaskCheckForTimeOut>
 8008630:	bb00      	cbnz	r0, 8008674 <xQueueReceive+0x132>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff fcb2 	bl	8007f9c <prvIsQueueEmpty>
 8008638:	b1b0      	cbz	r0, 8008668 <xQueueReceive+0x126>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800863a:	9901      	ldr	r1, [sp, #4]
 800863c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008640:	f000 fd94 	bl	800916c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff fcfc 	bl	8008042 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800864a:	f000 fc75 	bl	8008f38 <xTaskResumeAll>
 800864e:	b948      	cbnz	r0, 8008664 <xQueueReceive+0x122>
                    portYIELD_WITHIN_API();
 8008650:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008658:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	2501      	movs	r5, #1
 8008666:	e792      	b.n	800858e <xQueueReceive+0x4c>
                prvUnlockQueue( pxQueue );
 8008668:	4620      	mov	r0, r4
 800866a:	f7ff fcea 	bl	8008042 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800866e:	f000 fc63 	bl	8008f38 <xTaskResumeAll>
 8008672:	e7f7      	b.n	8008664 <xQueueReceive+0x122>
            prvUnlockQueue( pxQueue );
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff fce4 	bl	8008042 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800867a:	f000 fc5d 	bl	8008f38 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800867e:	4620      	mov	r0, r4
 8008680:	f7ff fc8c 	bl	8007f9c <prvIsQueueEmpty>
 8008684:	2800      	cmp	r0, #0
 8008686:	d0ed      	beq.n	8008664 <xQueueReceive+0x122>
 8008688:	e7b4      	b.n	80085f4 <xQueueReceive+0xb2>

0800868a <xQueueSemaphoreTake>:
{
 800868a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868c:	b085      	sub	sp, #20
    configASSERT( ( pxQueue ) );
 800868e:	4604      	mov	r4, r0
{
 8008690:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8008692:	b950      	cbnz	r0, 80086aa <xQueueSemaphoreTake+0x20>
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	b672      	cpsid	i
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	b662      	cpsie	i
 80086a8:	e7fe      	b.n	80086a8 <xQueueSemaphoreTake+0x1e>
    configASSERT( pxQueue->uxItemSize == 0 );
 80086aa:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80086ac:	b155      	cbz	r5, 80086c4 <xQueueSemaphoreTake+0x3a>
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	b672      	cpsid	i
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	b662      	cpsie	i
 80086c2:	e7fe      	b.n	80086c2 <xQueueSemaphoreTake+0x38>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086c4:	f000 fe5c 	bl	8009380 <xTaskGetSchedulerState>
 80086c8:	4606      	mov	r6, r0
 80086ca:	b320      	cbz	r0, 8008716 <xQueueSemaphoreTake+0x8c>
 80086cc:	462e      	mov	r6, r5
        prvLockQueue( pxQueue );
 80086ce:	2700      	movs	r7, #0
        taskENTER_CRITICAL();
 80086d0:	f001 fa50 	bl	8009b74 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80086d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80086d6:	b363      	cbz	r3, 8008732 <xQueueSemaphoreTake+0xa8>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80086d8:	3b01      	subs	r3, #1
 80086da:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	b913      	cbnz	r3, 80086e6 <xQueueSemaphoreTake+0x5c>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80086e0:	f000 ff4a 	bl	8009578 <pvTaskIncrementMutexHeldCount>
 80086e4:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	b173      	cbz	r3, 8008708 <xQueueSemaphoreTake+0x7e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086ea:	f104 0010 	add.w	r0, r4, #16
 80086ee:	f000 fd87 	bl	8009200 <xTaskRemoveFromEventList>
 80086f2:	b148      	cbz	r0, 8008708 <xQueueSemaphoreTake+0x7e>
                        queueYIELD_IF_USING_PREEMPTION();
 80086f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8008708:	f001 fa58 	bl	8009bbc <vPortExitCritical>
                return pdPASS;
 800870c:	2001      	movs	r0, #1
}
 800870e:	b005      	add	sp, #20
 8008710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008712:	4635      	mov	r5, r6
 8008714:	e7db      	b.n	80086ce <xQueueSemaphoreTake+0x44>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008716:	9b01      	ldr	r3, [sp, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0fa      	beq.n	8008712 <xQueueSemaphoreTake+0x88>
 800871c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008720:	b672      	cpsid	i
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	b662      	cpsie	i
 8008730:	e7fe      	b.n	8008730 <xQueueSemaphoreTake+0xa6>
                if( xTicksToWait == ( TickType_t ) 0 )
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	b91b      	cbnz	r3, 800873e <xQueueSemaphoreTake+0xb4>
                        taskEXIT_CRITICAL();
 8008736:	f001 fa41 	bl	8009bbc <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800873a:	2000      	movs	r0, #0
 800873c:	e7e7      	b.n	800870e <xQueueSemaphoreTake+0x84>
                else if( xEntryTimeSet == pdFALSE )
 800873e:	b916      	cbnz	r6, 8008746 <xQueueSemaphoreTake+0xbc>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008740:	a802      	add	r0, sp, #8
 8008742:	f000 fdc5 	bl	80092d0 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8008746:	f001 fa39 	bl	8009bbc <vPortExitCritical>
        vTaskSuspendAll();
 800874a:	f000 fb2b 	bl	8008da4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800874e:	f001 fa11 	bl	8009b74 <vPortEnterCritical>
 8008752:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008756:	2bff      	cmp	r3, #255	@ 0xff
 8008758:	d101      	bne.n	800875e <xQueueSemaphoreTake+0xd4>
 800875a:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800875e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008762:	2bff      	cmp	r3, #255	@ 0xff
 8008764:	d101      	bne.n	800876a <xQueueSemaphoreTake+0xe0>
 8008766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800876a:	f001 fa27 	bl	8009bbc <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800876e:	a901      	add	r1, sp, #4
 8008770:	a802      	add	r0, sp, #8
 8008772:	f000 fdb9 	bl	80092e8 <xTaskCheckForTimeOut>
 8008776:	bb50      	cbnz	r0, 80087ce <xQueueSemaphoreTake+0x144>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008778:	4620      	mov	r0, r4
 800877a:	f7ff fc0f 	bl	8007f9c <prvIsQueueEmpty>
 800877e:	b300      	cbz	r0, 80087c2 <xQueueSemaphoreTake+0x138>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	b93b      	cbnz	r3, 8008794 <xQueueSemaphoreTake+0x10a>
                        taskENTER_CRITICAL();
 8008784:	f001 f9f6 	bl	8009b74 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008788:	68a0      	ldr	r0, [r4, #8]
 800878a:	f000 fe09 	bl	80093a0 <xTaskPriorityInherit>
 800878e:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
 8008790:	f001 fa14 	bl	8009bbc <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008794:	9901      	ldr	r1, [sp, #4]
 8008796:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800879a:	f000 fce7 	bl	800916c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800879e:	4620      	mov	r0, r4
 80087a0:	f7ff fc4f 	bl	8008042 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80087a4:	f000 fbc8 	bl	8008f38 <xTaskResumeAll>
 80087a8:	b948      	cbnz	r0, 80087be <xQueueSemaphoreTake+0x134>
                    portYIELD_WITHIN_API();
 80087aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	2601      	movs	r6, #1
 80087c0:	e786      	b.n	80086d0 <xQueueSemaphoreTake+0x46>
                prvUnlockQueue( pxQueue );
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fc3d 	bl	8008042 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80087c8:	f000 fbb6 	bl	8008f38 <xTaskResumeAll>
 80087cc:	e7f7      	b.n	80087be <xQueueSemaphoreTake+0x134>
            prvUnlockQueue( pxQueue );
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff fc37 	bl	8008042 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80087d4:	f000 fbb0 	bl	8008f38 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d8:	4620      	mov	r0, r4
 80087da:	f7ff fbdf 	bl	8007f9c <prvIsQueueEmpty>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0ed      	beq.n	80087be <xQueueSemaphoreTake+0x134>
                    if( xInheritanceOccurred != pdFALSE )
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	d0a9      	beq.n	800873a <xQueueSemaphoreTake+0xb0>
                        taskENTER_CRITICAL();
 80087e6:	f001 f9c5 	bl	8009b74 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80087ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80087ec:	b119      	cbz	r1, 80087f6 <xQueueSemaphoreTake+0x16c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80087ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80087f0:	6819      	ldr	r1, [r3, #0]
 80087f2:	f1c1 0105 	rsb	r1, r1, #5
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80087f6:	68a0      	ldr	r0, [r4, #8]
 80087f8:	f000 fe66 	bl	80094c8 <vTaskPriorityDisinheritAfterTimeout>
 80087fc:	e79b      	b.n	8008736 <xQueueSemaphoreTake+0xac>

080087fe <xQueueTakeMutexRecursive>:
    {
 80087fe:	b570      	push	{r4, r5, r6, lr}
 8008800:	460d      	mov	r5, r1
        configASSERT( pxMutex );
 8008802:	4604      	mov	r4, r0
 8008804:	b950      	cbnz	r0, 800881c <xQueueTakeMutexRecursive+0x1e>
 8008806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880a:	b672      	cpsid	i
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	b662      	cpsie	i
 800881a:	e7fe      	b.n	800881a <xQueueTakeMutexRecursive+0x1c>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800881c:	6886      	ldr	r6, [r0, #8]
 800881e:	f000 fda9 	bl	8009374 <xTaskGetCurrentTaskHandle>
 8008822:	4286      	cmp	r6, r0
 8008824:	d104      	bne.n	8008830 <xQueueTakeMutexRecursive+0x32>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008826:	68e3      	ldr	r3, [r4, #12]
            xReturn = pdPASS;
 8008828:	2001      	movs	r0, #1
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800882a:	3301      	adds	r3, #1
 800882c:	60e3      	str	r3, [r4, #12]
    }
 800882e:	bd70      	pop	{r4, r5, r6, pc}
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008830:	4629      	mov	r1, r5
 8008832:	4620      	mov	r0, r4
 8008834:	f7ff ff29 	bl	800868a <xQueueSemaphoreTake>
            if( xReturn != pdFAIL )
 8008838:	2800      	cmp	r0, #0
 800883a:	d0f8      	beq.n	800882e <xQueueTakeMutexRecursive+0x30>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800883c:	68e3      	ldr	r3, [r4, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60e3      	str	r3, [r4, #12]
 8008842:	e7f4      	b.n	800882e <xQueueTakeMutexRecursive+0x30>

08008844 <uxQueueMessagesWaiting>:
{
 8008844:	b510      	push	{r4, lr}
    configASSERT( xQueue );
 8008846:	4604      	mov	r4, r0
 8008848:	b950      	cbnz	r0, 8008860 <uxQueueMessagesWaiting+0x1c>
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	e7fe      	b.n	800885e <uxQueueMessagesWaiting+0x1a>
    taskENTER_CRITICAL();
 8008860:	f001 f988 	bl	8009b74 <vPortEnterCritical>
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008864:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
    taskEXIT_CRITICAL();
 8008866:	f001 f9a9 	bl	8009bbc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800886a:	4620      	mov	r0, r4
 800886c:	bd10      	pop	{r4, pc}
	...

08008870 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008870:	b570      	push	{r4, r5, r6, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
 8008872:	b950      	cbnz	r0, 800888a <vQueueAddToRegistry+0x1a>
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	b672      	cpsid	i
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	b662      	cpsie	i
 8008888:	e7fe      	b.n	8008888 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800888a:	b1b1      	cbz	r1, 80088ba <vQueueAddToRegistry+0x4a>
 800888c:	4a0b      	ldr	r2, [pc, #44]	@ (80088bc <vQueueAddToRegistry+0x4c>)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	4615      	mov	r5, r2
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008892:	461c      	mov	r4, r3
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008894:	6856      	ldr	r6, [r2, #4]
 8008896:	4286      	cmp	r6, r0
 8008898:	d104      	bne.n	80088a4 <vQueueAddToRegistry+0x34>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800889a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
 800889e:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80088a2:	e00a      	b.n	80088ba <vQueueAddToRegistry+0x4a>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80088a4:	b91b      	cbnz	r3, 80088ae <vQueueAddToRegistry+0x3e>
 80088a6:	6816      	ldr	r6, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	bf08      	it	eq
 80088ac:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088ae:	3401      	adds	r4, #1
 80088b0:	3208      	adds	r2, #8
 80088b2:	2c08      	cmp	r4, #8
 80088b4:	d1ee      	bne.n	8008894 <vQueueAddToRegistry+0x24>
        if( pxEntryToWrite != NULL )
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f1      	bne.n	800889e <vQueueAddToRegistry+0x2e>
    }
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	20006bb0 	.word	0x20006bb0

080088c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80088c0:	b510      	push	{r4, lr}
        UBaseType_t ux;

        configASSERT( xQueue );
 80088c2:	b950      	cbnz	r0, 80088da <vQueueUnregisterQueue+0x1a>
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	b672      	cpsid	i
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	b662      	cpsie	i
 80088d8:	e7fe      	b.n	80088d8 <vQueueUnregisterQueue+0x18>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088da:	2300      	movs	r3, #0
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088dc:	4a08      	ldr	r2, [pc, #32]	@ (8008900 <vQueueUnregisterQueue+0x40>)
 80088de:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80088e2:	00dc      	lsls	r4, r3, #3
 80088e4:	4281      	cmp	r1, r0
 80088e6:	d106      	bne.n	80088f6 <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80088e8:	4a06      	ldr	r2, [pc, #24]	@ (8008904 <vQueueUnregisterQueue+0x44>)
 80088ea:	2100      	movs	r1, #0
 80088ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088f0:	4422      	add	r2, r4
 80088f2:	6051      	str	r1, [r2, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088f4:	bd10      	pop	{r4, pc}
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088f6:	3301      	adds	r3, #1
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d1f0      	bne.n	80088de <vQueueUnregisterQueue+0x1e>
 80088fc:	e7fa      	b.n	80088f4 <vQueueUnregisterQueue+0x34>
 80088fe:	bf00      	nop
 8008900:	20006bb4 	.word	0x20006bb4
 8008904:	20006bb0 	.word	0x20006bb0

08008908 <vQueueDelete>:
{
 8008908:	b508      	push	{r3, lr}
    configASSERT( pxQueue );
 800890a:	b950      	cbnz	r0, 8008922 <vQueueDelete+0x1a>
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	b672      	cpsid	i
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	b662      	cpsie	i
 8008920:	e7fe      	b.n	8008920 <vQueueDelete+0x18>
        vQueueUnregisterQueue( pxQueue );
 8008922:	f7ff ffcd 	bl	80088c0 <vQueueUnregisterQueue>
}
 8008926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        vPortFree( pxQueue );
 800892a:	f001 b879 	b.w	8009a20 <vPortFree>

0800892e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800892e:	b570      	push	{r4, r5, r6, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008936:	f001 f91d 	bl	8009b74 <vPortEnterCritical>
 800893a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800893e:	2bff      	cmp	r3, #255	@ 0xff
 8008940:	d102      	bne.n	8008948 <vQueueWaitForMessageRestricted+0x1a>
 8008942:	2300      	movs	r3, #0
 8008944:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008948:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800894c:	2bff      	cmp	r3, #255	@ 0xff
 800894e:	d102      	bne.n	8008956 <vQueueWaitForMessageRestricted+0x28>
 8008950:	2300      	movs	r3, #0
 8008952:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008956:	f001 f931 	bl	8009bbc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800895a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800895c:	b92b      	cbnz	r3, 800896a <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800895e:	4632      	mov	r2, r6
 8008960:	4629      	mov	r1, r5
 8008962:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008966:	f000 fc1d 	bl	80091a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800896a:	4620      	mov	r0, r4
    }
 800896c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 8008970:	f7ff bb67 	b.w	8008042 <prvUnlockQueue>

08008974 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8008976:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008978:	4606      	mov	r6, r0
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800897a:	4c1b      	ldr	r4, [pc, #108]	@ (80089e8 <prvAddCurrentTaskToDelayedList+0x74>)
{
 800897c:	460f      	mov	r7, r1
    const TickType_t xConstTickCount = xTickCount;
 800897e:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	3004      	adds	r0, #4
 8008984:	f7ff fafa 	bl	8007f7c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008988:	1c73      	adds	r3, r6, #1
 800898a:	d113      	bne.n	80089b4 <prvAddCurrentTaskToDelayedList+0x40>
 800898c:	b197      	cbz	r7, 80089b4 <prvAddCurrentTaskToDelayedList+0x40>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898e:	4b17      	ldr	r3, [pc, #92]	@ (80089ec <prvAddCurrentTaskToDelayedList+0x78>)
 8008990:	6821      	ldr	r1, [r4, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	608a      	str	r2, [r1, #8]
 8008996:	6890      	ldr	r0, [r2, #8]
 8008998:	6821      	ldr	r1, [r4, #0]
 800899a:	60c8      	str	r0, [r1, #12]
 800899c:	6821      	ldr	r1, [r4, #0]
 800899e:	3104      	adds	r1, #4
 80089a0:	6041      	str	r1, [r0, #4]
 80089a2:	6821      	ldr	r1, [r4, #0]
 80089a4:	3104      	adds	r1, #4
 80089a6:	6091      	str	r1, [r2, #8]
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	6153      	str	r3, [r2, #20]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	3201      	adds	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80089b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xTimeToWake = xConstTickCount + xTicksToWait;
 80089b4:	19ad      	adds	r5, r5, r6
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80089ba:	d307      	bcc.n	80089cc <prvAddCurrentTaskToDelayedList+0x58>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089bc:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <prvAddCurrentTaskToDelayedList+0x7c>)
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	6821      	ldr	r1, [r4, #0]
}
 80089c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c6:	3104      	adds	r1, #4
 80089c8:	f7ff bac1 	b.w	8007f4e <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089cc:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	6821      	ldr	r1, [r4, #0]
 80089d2:	3104      	adds	r1, #4
 80089d4:	f7ff fabb 	bl	8007f4e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80089d8:	4b07      	ldr	r3, [pc, #28]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0x84>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	42aa      	cmp	r2, r5
 80089de:	d9e8      	bls.n	80089b2 <prvAddCurrentTaskToDelayedList+0x3e>
                    xNextTaskUnblockTime = xTimeToWake;
 80089e0:	601d      	str	r5, [r3, #0]
}
 80089e2:	e7e6      	b.n	80089b2 <prvAddCurrentTaskToDelayedList+0x3e>
 80089e4:	20006c14 	.word	0x20006c14
 80089e8:	20006cf0 	.word	0x20006cf0
 80089ec:	20006c1c 	.word	0x20006c1c
 80089f0:	20006c5c 	.word	0x20006c5c
 80089f4:	20006c60 	.word	0x20006c60
 80089f8:	20006bf8 	.word	0x20006bf8

080089fc <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fc:	4a06      	ldr	r2, [pc, #24]	@ (8008a18 <prvResetNextTaskUnblockTime+0x1c>)
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	6819      	ldr	r1, [r3, #0]
 8008a02:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <prvResetNextTaskUnblockTime+0x20>)
 8008a04:	b919      	cbnz	r1, 8008a0e <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a0a:	601a      	str	r2, [r3, #0]
}
 8008a0c:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	68d2      	ldr	r2, [r2, #12]
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	e7f9      	b.n	8008a0a <prvResetNextTaskUnblockTime+0xe>
 8008a16:	bf00      	nop
 8008a18:	20006c60 	.word	0x20006c60
 8008a1c:	20006bf8 	.word	0x20006bf8

08008a20 <prvIdleTask>:
{
 8008a20:	b580      	push	{r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a22:	4c15      	ldr	r4, [pc, #84]	@ (8008a78 <prvIdleTask+0x58>)
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a24:	4f15      	ldr	r7, [pc, #84]	@ (8008a7c <prvIdleTask+0x5c>)
                --uxCurrentNumberOfTasks;
 8008a26:	4e16      	ldr	r6, [pc, #88]	@ (8008a80 <prvIdleTask+0x60>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	b973      	cbnz	r3, 8008a4a <prvIdleTask+0x2a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a2c:	4b15      	ldr	r3, [pc, #84]	@ (8008a84 <prvIdleTask+0x64>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d9f8      	bls.n	8008a26 <prvIdleTask+0x6>
                taskYIELD();
 8008a34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	e7ed      	b.n	8008a26 <prvIdleTask+0x6>
            taskENTER_CRITICAL();
 8008a4a:	f001 f893 	bl	8009b74 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68dd      	ldr	r5, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a52:	1d28      	adds	r0, r5, #4
 8008a54:	f7ff fa92 	bl	8007f7c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	6033      	str	r3, [r6, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	6023      	str	r3, [r4, #0]
            taskEXIT_CRITICAL();
 8008a64:	f001 f8aa 	bl	8009bbc <vPortExitCritical>
            vPortFreeStack( pxTCB->pxStack );
 8008a68:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8008a6a:	f000 ffd9 	bl	8009a20 <vPortFree>
            vPortFree( pxTCB );
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 ffd6 	bl	8009a20 <vPortFree>
    }
 8008a74:	e7d8      	b.n	8008a28 <prvIdleTask+0x8>
 8008a76:	bf00      	nop
 8008a78:	20006c30 	.word	0x20006c30
 8008a7c:	20006c34 	.word	0x20006c34
 8008a80:	20006c18 	.word	0x20006c18
 8008a84:	20006c8c 	.word	0x20006c8c

08008a88 <xTaskCreate>:
    {
 8008a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a8c:	0095      	lsls	r5, r2, #2
    {
 8008a8e:	4680      	mov	r8, r0
 8008a90:	460e      	mov	r6, r1
 8008a92:	4699      	mov	r9, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a94:	4628      	mov	r0, r5
    {
 8008a96:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	@ 0x28
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a9a:	f000 ff2b 	bl	80098f4 <pvPortMalloc>
            if( pxStack != NULL )
 8008a9e:	4683      	mov	fp, r0
 8008aa0:	b918      	cbnz	r0, 8008aaa <xTaskCreate+0x22>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8008aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008aaa:	205c      	movs	r0, #92	@ 0x5c
 8008aac:	f000 ff22 	bl	80098f4 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f000 80b3 	beq.w	8008c1e <xTaskCreate+0x196>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008ab8:	225c      	movs	r2, #92	@ 0x5c
 8008aba:	2100      	movs	r1, #0
 8008abc:	f00d f9d8 	bl	8015e70 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ac0:	4658      	mov	r0, fp
                    pxNewTCB->pxStack = pxStack;
 8008ac2:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	21a5      	movs	r1, #165	@ 0xa5
 8008aca:	f00d f9d1 	bl	8015e70 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ace:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
    if( pcName != NULL )
 8008ad2:	b16e      	cbz	r6, 8008af0 <xTaskCreate+0x68>
 8008ad4:	1e73      	subs	r3, r6, #1
 8008ad6:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008ada:	360f      	adds	r6, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008adc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008ae0:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8008ae4:	b109      	cbz	r1, 8008aea <xTaskCreate+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ae6:	42b3      	cmp	r3, r6
 8008ae8:	d1f8      	bne.n	8008adc <xTaskCreate+0x54>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aea:	2300      	movs	r3, #0
 8008aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008af0:	2f04      	cmp	r7, #4
 8008af2:	d90a      	bls.n	8008b0a <xTaskCreate+0x82>
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	b672      	cpsid	i
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	b662      	cpsie	i
 8008b08:	e7fe      	b.n	8008b08 <xTaskCreate+0x80>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b0a:	1d26      	adds	r6, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 8008b0c:	62e7      	str	r7, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8008b0e:	64e7      	str	r7, [r4, #76]	@ 0x4c
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b10:	3d04      	subs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b12:	4630      	mov	r0, r6
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b14:	f1c7 0705 	rsb	r7, r7, #5
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b18:	f7ff fa0b 	bl	8007f32 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b1c:	f104 0018 	add.w	r0, r4, #24
 8008b20:	f7ff fa07 	bl	8007f32 <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b24:	eb0b 0005 	add.w	r0, fp, r5
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b28:	464a      	mov	r2, r9
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	f020 0007 	bic.w	r0, r0, #7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b30:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b32:	61a7      	str	r7, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b34:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b36:	f000 fff3 	bl	8009b20 <pxPortInitialiseStack>
 8008b3a:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8008b3c:	f1ba 0f00 	cmp.w	sl, #0
 8008b40:	d001      	beq.n	8008b46 <xTaskCreate+0xbe>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b42:	f8ca 4000 	str.w	r4, [sl]
    taskENTER_CRITICAL();
 8008b46:	f001 f815 	bl	8009b74 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8008b4a:	4b37      	ldr	r3, [pc, #220]	@ (8008c28 <xTaskCreate+0x1a0>)
        if( pxCurrentTCB == NULL )
 8008b4c:	4f37      	ldr	r7, [pc, #220]	@ (8008c2c <xTaskCreate+0x1a4>)
        uxCurrentNumberOfTasks++;
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8008c54 <xTaskCreate+0x1cc>
 8008b54:	3201      	adds	r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 8008b58:	683d      	ldr	r5, [r7, #0]
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	d154      	bne.n	8008c08 <xTaskCreate+0x180>
            pxCurrentTCB = pxNewTCB;
 8008b5e:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d11f      	bne.n	8008ba6 <xTaskCreate+0x11e>
 8008b66:	46c1      	mov	r9, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b68:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f7ff f9d6 	bl	8007f1c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b70:	f109 0914 	add.w	r9, r9, #20
 8008b74:	2d05      	cmp	r5, #5
 8008b76:	d1f7      	bne.n	8008b68 <xTaskCreate+0xe0>
    vListInitialise( &xDelayedTaskList1 );
 8008b78:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8008c58 <xTaskCreate+0x1d0>
    vListInitialise( &xDelayedTaskList2 );
 8008b7c:	4d2c      	ldr	r5, [pc, #176]	@ (8008c30 <xTaskCreate+0x1a8>)
    vListInitialise( &xDelayedTaskList1 );
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f7ff f9cc 	bl	8007f1c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008b84:	4628      	mov	r0, r5
 8008b86:	f7ff f9c9 	bl	8007f1c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008b8a:	482a      	ldr	r0, [pc, #168]	@ (8008c34 <xTaskCreate+0x1ac>)
 8008b8c:	f7ff f9c6 	bl	8007f1c <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 8008b90:	4829      	ldr	r0, [pc, #164]	@ (8008c38 <xTaskCreate+0x1b0>)
 8008b92:	f7ff f9c3 	bl	8007f1c <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8008b96:	4829      	ldr	r0, [pc, #164]	@ (8008c3c <xTaskCreate+0x1b4>)
 8008b98:	f7ff f9c0 	bl	8007f1c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8008b9c:	4b28      	ldr	r3, [pc, #160]	@ (8008c40 <xTaskCreate+0x1b8>)
 8008b9e:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ba2:	4b28      	ldr	r3, [pc, #160]	@ (8008c44 <xTaskCreate+0x1bc>)
 8008ba4:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
 8008ba6:	4a28      	ldr	r2, [pc, #160]	@ (8008c48 <xTaskCreate+0x1c0>)
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	3301      	adds	r3, #1
 8008bac:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8008bae:	4a27      	ldr	r2, [pc, #156]	@ (8008c4c <xTaskCreate+0x1c4>)
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bb0:	6463      	str	r3, [r4, #68]	@ 0x44
        prvAddTaskToReadyList( pxNewTCB );
 8008bb2:	6811      	ldr	r1, [r2, #0]
 8008bb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008bb6:	428b      	cmp	r3, r1
 8008bb8:	d900      	bls.n	8008bbc <xTaskCreate+0x134>
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	2214      	movs	r2, #20
 8008bbe:	4353      	muls	r3, r2
 8008bc0:	eb08 0103 	add.w	r1, r8, r3
 8008bc4:	684a      	ldr	r2, [r1, #4]
 8008bc6:	6890      	ldr	r0, [r2, #8]
 8008bc8:	60a2      	str	r2, [r4, #8]
 8008bca:	60e0      	str	r0, [r4, #12]
 8008bcc:	6046      	str	r6, [r0, #4]
 8008bce:	6096      	str	r6, [r2, #8]
 8008bd0:	f858 2003 	ldr.w	r2, [r8, r3]
 8008bd4:	6161      	str	r1, [r4, #20]
 8008bd6:	3201      	adds	r2, #1
 8008bd8:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
 8008bdc:	f000 ffee 	bl	8009bbc <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8008be0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c50 <xTaskCreate+0x1c8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	b173      	cbz	r3, 8008c04 <xTaskCreate+0x17c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d209      	bcs.n	8008c04 <xTaskCreate+0x17c>
            taskYIELD_IF_USING_PREEMPTION();
 8008bf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
            xReturn = pdPASS;
 8008c04:	2001      	movs	r0, #1
        return xReturn;
 8008c06:	e74e      	b.n	8008aa6 <xTaskCreate+0x1e>
            if( xSchedulerRunning == pdFALSE )
 8008c08:	4b11      	ldr	r3, [pc, #68]	@ (8008c50 <xTaskCreate+0x1c8>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	d1c9      	bne.n	8008ba6 <xTaskCreate+0x11e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d8c5      	bhi.n	8008ba6 <xTaskCreate+0x11e>
                    pxCurrentTCB = pxNewTCB;
 8008c1a:	603c      	str	r4, [r7, #0]
 8008c1c:	e7c3      	b.n	8008ba6 <xTaskCreate+0x11e>
                    vPortFreeStack( pxStack );
 8008c1e:	4658      	mov	r0, fp
 8008c20:	f000 fefe 	bl	8009a20 <vPortFree>
        if( pxNewTCB != NULL )
 8008c24:	e73d      	b.n	8008aa2 <xTaskCreate+0x1a>
 8008c26:	bf00      	nop
 8008c28:	20006c18 	.word	0x20006c18
 8008c2c:	20006cf0 	.word	0x20006cf0
 8008c30:	20006c64 	.word	0x20006c64
 8008c34:	20006c48 	.word	0x20006c48
 8008c38:	20006c34 	.word	0x20006c34
 8008c3c:	20006c1c 	.word	0x20006c1c
 8008c40:	20006c60 	.word	0x20006c60
 8008c44:	20006c5c 	.word	0x20006c5c
 8008c48:	20006bfc 	.word	0x20006bfc
 8008c4c:	20006c10 	.word	0x20006c10
 8008c50:	20006c0c 	.word	0x20006c0c
 8008c54:	20006c8c 	.word	0x20006c8c
 8008c58:	20006c78 	.word	0x20006c78

08008c5c <vTaskDelete>:
    {
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4d27      	ldr	r5, [pc, #156]	@ (8008d00 <vTaskDelete+0xa4>)
        taskENTER_CRITICAL();
 8008c62:	f000 ff87 	bl	8009b74 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008c66:	b904      	cbnz	r4, 8008c6a <vTaskDelete+0xe>
 8008c68:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6a:	1d26      	adds	r6, r4, #4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff f985 	bl	8007f7c <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008c74:	b11b      	cbz	r3, 8008c7e <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c76:	f104 0018 	add.w	r0, r4, #24
 8008c7a:	f7ff f97f 	bl	8007f7c <uxListRemove>
            uxTaskNumber++;
 8008c7e:	4a21      	ldr	r2, [pc, #132]	@ (8008d04 <vTaskDelete+0xa8>)
 8008c80:	6813      	ldr	r3, [r2, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d126      	bne.n	8008cda <vTaskDelete+0x7e>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	481e      	ldr	r0, [pc, #120]	@ (8008d08 <vTaskDelete+0xac>)
 8008c90:	f7ff f952 	bl	8007f38 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8008c94:	4a1d      	ldr	r2, [pc, #116]	@ (8008d0c <vTaskDelete+0xb0>)
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8008c9c:	f000 ff8e 	bl	8009bbc <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	d005      	beq.n	8008cb2 <vTaskDelete+0x56>
            vPortFreeStack( pxTCB->pxStack );
 8008ca6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008ca8:	f000 feba 	bl	8009a20 <vPortFree>
            vPortFree( pxTCB );
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 feb7 	bl	8009a20 <vPortFree>
        if( xSchedulerRunning != pdFALSE )
 8008cb2:	4b17      	ldr	r3, [pc, #92]	@ (8008d10 <vTaskDelete+0xb4>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	b30b      	cbz	r3, 8008cfc <vTaskDelete+0xa0>
            if( pxTCB == pxCurrentTCB )
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	d11e      	bne.n	8008cfc <vTaskDelete+0xa0>
                configASSERT( uxSchedulerSuspended == 0 );
 8008cbe:	4b15      	ldr	r3, [pc, #84]	@ (8008d14 <vTaskDelete+0xb8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	b18b      	cbz	r3, 8008ce8 <vTaskDelete+0x8c>
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	b672      	cpsid	i
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	b662      	cpsie	i
 8008cd8:	e7fe      	b.n	8008cd8 <vTaskDelete+0x7c>
                --uxCurrentNumberOfTasks;
 8008cda:	4a0f      	ldr	r2, [pc, #60]	@ (8008d18 <vTaskDelete+0xbc>)
 8008cdc:	6813      	ldr	r3, [r2, #0]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 8008ce2:	f7ff fe8b 	bl	80089fc <prvResetNextTaskUnblockTime>
 8008ce6:	e7d9      	b.n	8008c9c <vTaskDelete+0x40>
                portYIELD_WITHIN_API();
 8008ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	f3bf 8f6f 	isb	sy
    }
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
 8008cfe:	bf00      	nop
 8008d00:	20006cf0 	.word	0x20006cf0
 8008d04:	20006bfc 	.word	0x20006bfc
 8008d08:	20006c34 	.word	0x20006c34
 8008d0c:	20006c30 	.word	0x20006c30
 8008d10:	20006c0c 	.word	0x20006c0c
 8008d14:	20006bf0 	.word	0x20006bf0
 8008d18:	20006c18 	.word	0x20006c18

08008d1c <vTaskStartScheduler>:
{
 8008d1c:	b513      	push	{r0, r1, r4, lr}
        xReturn = xTaskCreate( prvIdleTask,
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d88 <vTaskStartScheduler+0x6c>)
 8008d20:	2400      	movs	r4, #0
 8008d22:	2280      	movs	r2, #128	@ 0x80
 8008d24:	4919      	ldr	r1, [pc, #100]	@ (8008d8c <vTaskStartScheduler+0x70>)
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	4623      	mov	r3, r4
 8008d2a:	4819      	ldr	r0, [pc, #100]	@ (8008d90 <vTaskStartScheduler+0x74>)
 8008d2c:	9400      	str	r4, [sp, #0]
 8008d2e:	f7ff feab 	bl	8008a88 <xTaskCreate>
        if( xReturn == pdPASS )
 8008d32:	2801      	cmp	r0, #1
 8008d34:	d11b      	bne.n	8008d6e <vTaskStartScheduler+0x52>
            xReturn = xTimerCreateTimerTask();
 8008d36:	f000 fd8d 	bl	8009854 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8008d3a:	2801      	cmp	r0, #1
 8008d3c:	d117      	bne.n	8008d6e <vTaskStartScheduler+0x52>
 8008d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d42:	b672      	cpsid	i
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	b662      	cpsie	i
        xNextTaskUnblockTime = portMAX_DELAY;
 8008d52:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <vTaskStartScheduler+0x78>)
 8008d54:	f04f 32ff 	mov.w	r2, #4294967295
 8008d58:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d98 <vTaskStartScheduler+0x7c>)
 8008d5c:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <vTaskStartScheduler+0x80>)
 8008d60:	601c      	str	r4, [r3, #0]
        xPortStartScheduler();
 8008d62:	f000 ffa1 	bl	8009ca8 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8008d66:	4b0e      	ldr	r3, [pc, #56]	@ (8008da0 <vTaskStartScheduler+0x84>)
 8008d68:	681b      	ldr	r3, [r3, #0]
}
 8008d6a:	b002      	add	sp, #8
 8008d6c:	bd10      	pop	{r4, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d1f9      	bne.n	8008d66 <vTaskStartScheduler+0x4a>
 8008d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d76:	b672      	cpsid	i
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	b662      	cpsie	i
 8008d86:	e7fe      	b.n	8008d86 <vTaskStartScheduler+0x6a>
 8008d88:	20006bf4 	.word	0x20006bf4
 8008d8c:	08016e0b 	.word	0x08016e0b
 8008d90:	08008a21 	.word	0x08008a21
 8008d94:	20006bf8 	.word	0x20006bf8
 8008d98:	20006c0c 	.word	0x20006c0c
 8008d9c:	20006c14 	.word	0x20006c14
 8008da0:	0808f198 	.word	0x0808f198

08008da4 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8008da4:	4a02      	ldr	r2, [pc, #8]	@ (8008db0 <vTaskSuspendAll+0xc>)
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	20006bf0 	.word	0x20006bf0

08008db4 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8008db4:	4b01      	ldr	r3, [pc, #4]	@ (8008dbc <xTaskGetTickCount+0x8>)
 8008db6:	6818      	ldr	r0, [r3, #0]
}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	20006c14 	.word	0x20006c14

08008dc0 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 8008dc0:	4b01      	ldr	r3, [pc, #4]	@ (8008dc8 <uxTaskGetNumberOfTasks+0x8>)
 8008dc2:	6818      	ldr	r0, [r3, #0]
}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20006c18 	.word	0x20006c18

08008dcc <xTaskIncrementTick>:
{
 8008dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8008f0c <xTaskIncrementTick+0x140>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 8093 	bne.w	8008f00 <xTaskIncrementTick+0x134>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dda:	4b4d      	ldr	r3, [pc, #308]	@ (8008f10 <xTaskIncrementTick+0x144>)
 8008ddc:	681c      	ldr	r4, [r3, #0]
 8008dde:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8008de0:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008de2:	b9cc      	cbnz	r4, 8008e18 <xTaskIncrementTick+0x4c>
            taskSWITCH_DELAYED_LISTS();
 8008de4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f14 <xTaskIncrementTick+0x148>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	6812      	ldr	r2, [r2, #0]
 8008dea:	b152      	cbz	r2, 8008e02 <xTaskIncrementTick+0x36>
 8008dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df0:	b672      	cpsid	i
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	b662      	cpsie	i
 8008e00:	e7fe      	b.n	8008e00 <xTaskIncrementTick+0x34>
 8008e02:	4a45      	ldr	r2, [pc, #276]	@ (8008f18 <xTaskIncrementTick+0x14c>)
 8008e04:	6819      	ldr	r1, [r3, #0]
 8008e06:	6810      	ldr	r0, [r2, #0]
 8008e08:	6018      	str	r0, [r3, #0]
 8008e0a:	6011      	str	r1, [r2, #0]
 8008e0c:	4a43      	ldr	r2, [pc, #268]	@ (8008f1c <xTaskIncrementTick+0x150>)
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	f7ff fdf2 	bl	80089fc <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008e18:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8008f2c <xTaskIncrementTick+0x160>
    BaseType_t xSwitchRequired = pdFALSE;
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	4a40      	ldr	r2, [pc, #256]	@ (8008f20 <xTaskIncrementTick+0x154>)
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008e20:	f8dc 3000 	ldr.w	r3, [ip]
 8008e24:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 8008f30 <xTaskIncrementTick+0x164>
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	d20f      	bcs.n	8008e4c <xTaskIncrementTick+0x80>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e30:	2114      	movs	r1, #20
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	434b      	muls	r3, r1
 8008e36:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
 8008e38:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
 8008e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8008f24 <xTaskIncrementTick+0x158>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
 8008e3e:	bf28      	it	cs
 8008e40:	2001      	movcs	r0, #1
                xSwitchRequired = pdTRUE;
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bf18      	it	ne
 8008e46:	2001      	movne	r0, #1
}
 8008e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e4c:	f8df e0c4 	ldr.w	lr, [pc, #196]	@ 8008f14 <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
 8008e50:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8008f34 <xTaskIncrementTick+0x168>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e54:	f8de 3000 	ldr.w	r3, [lr]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	b923      	cbnz	r3, 8008e66 <xTaskIncrementTick+0x9a>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	f8cc 3000 	str.w	r3, [ip]
                    break;
 8008e64:	e7e2      	b.n	8008e2c <xTaskIncrementTick+0x60>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e66:	f8de 3000 	ldr.w	r3, [lr]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e6e:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8008e70:	428c      	cmp	r4, r1
 8008e72:	d202      	bcs.n	8008e7a <xTaskIncrementTick+0xae>
                        xNextTaskUnblockTime = xItemValue;
 8008e74:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008e78:	e7d8      	b.n	8008e2c <xTaskIncrementTick+0x60>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008e7a:	695d      	ldr	r5, [r3, #20]
 8008e7c:	1d1f      	adds	r7, r3, #4
 8008e7e:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
 8008e82:	608e      	str	r6, [r1, #8]
 8008e84:	6071      	str	r1, [r6, #4]
 8008e86:	6869      	ldr	r1, [r5, #4]
 8008e88:	42b9      	cmp	r1, r7
 8008e8a:	f04f 0100 	mov.w	r1, #0
 8008e8e:	bf08      	it	eq
 8008e90:	606e      	streq	r6, [r5, #4]
 8008e92:	6159      	str	r1, [r3, #20]
 8008e94:	6829      	ldr	r1, [r5, #0]
 8008e96:	3901      	subs	r1, #1
 8008e98:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e9a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008e9c:	b17d      	cbz	r5, 8008ebe <xTaskIncrementTick+0xf2>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008e9e:	f103 0a18 	add.w	sl, r3, #24
 8008ea2:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
 8008ea6:	608e      	str	r6, [r1, #8]
 8008ea8:	6071      	str	r1, [r6, #4]
 8008eaa:	6869      	ldr	r1, [r5, #4]
 8008eac:	4551      	cmp	r1, sl
 8008eae:	f04f 0100 	mov.w	r1, #0
 8008eb2:	bf08      	it	eq
 8008eb4:	606e      	streq	r6, [r5, #4]
 8008eb6:	6299      	str	r1, [r3, #40]	@ 0x28
 8008eb8:	6829      	ldr	r1, [r5, #0]
 8008eba:	3901      	subs	r1, #1
 8008ebc:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008ebe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ec0:	f8d9 5000 	ldr.w	r5, [r9]
 8008ec4:	42a9      	cmp	r1, r5
 8008ec6:	d901      	bls.n	8008ecc <xTaskIncrementTick+0x100>
 8008ec8:	f8c9 1000 	str.w	r1, [r9]
 8008ecc:	2514      	movs	r5, #20
 8008ece:	434d      	muls	r5, r1
 8008ed0:	eb02 0a05 	add.w	sl, r2, r5
 8008ed4:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008ed8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008edc:	609e      	str	r6, [r3, #8]
 8008ede:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008ee2:	f8cb 7004 	str.w	r7, [fp, #4]
 8008ee6:	60b7      	str	r7, [r6, #8]
 8008ee8:	f8c3 a014 	str.w	sl, [r3, #20]
 8008eec:	5953      	ldr	r3, [r2, r5]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	bf88      	it	hi
 8008efc:	2001      	movhi	r0, #1
 8008efe:	e7a9      	b.n	8008e54 <xTaskIncrementTick+0x88>
        ++xPendedTicks;
 8008f00:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <xTaskIncrementTick+0x15c>)
    BaseType_t xSwitchRequired = pdFALSE;
 8008f02:	2000      	movs	r0, #0
        ++xPendedTicks;
 8008f04:	6813      	ldr	r3, [r2, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	e79d      	b.n	8008e48 <xTaskIncrementTick+0x7c>
 8008f0c:	20006bf0 	.word	0x20006bf0
 8008f10:	20006c14 	.word	0x20006c14
 8008f14:	20006c60 	.word	0x20006c60
 8008f18:	20006c5c 	.word	0x20006c5c
 8008f1c:	20006c00 	.word	0x20006c00
 8008f20:	20006c8c 	.word	0x20006c8c
 8008f24:	20006c04 	.word	0x20006c04
 8008f28:	20006c08 	.word	0x20006c08
 8008f2c:	20006bf8 	.word	0x20006bf8
 8008f30:	20006cf0 	.word	0x20006cf0
 8008f34:	20006c10 	.word	0x20006c10

08008f38 <xTaskResumeAll>:
{
 8008f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended );
 8008f3c:	4c46      	ldr	r4, [pc, #280]	@ (8009058 <xTaskResumeAll+0x120>)
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	b953      	cbnz	r3, 8008f58 <xTaskResumeAll+0x20>
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	b672      	cpsid	i
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	b662      	cpsie	i
 8008f56:	e7fe      	b.n	8008f56 <xTaskResumeAll+0x1e>
    taskENTER_CRITICAL();
 8008f58:	f000 fe0c 	bl	8009b74 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	b12b      	cbz	r3, 8008f72 <xTaskResumeAll+0x3a>
    BaseType_t xAlreadyYielded = pdFALSE;
 8008f66:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8008f68:	f000 fe28 	bl	8009bbc <vPortExitCritical>
}
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f72:	4a3a      	ldr	r2, [pc, #232]	@ (800905c <xTaskResumeAll+0x124>)
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d0f5      	beq.n	8008f66 <xTaskResumeAll+0x2e>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f7a:	4e39      	ldr	r6, [pc, #228]	@ (8009060 <xTaskResumeAll+0x128>)
                    prvAddTaskToReadyList( pxTCB );
 8008f7c:	f04f 0c14 	mov.w	ip, #20
 8008f80:	4f38      	ldr	r7, [pc, #224]	@ (8009064 <xTaskResumeAll+0x12c>)
                        xYieldPending = pdTRUE;
 8008f82:	f04f 0901 	mov.w	r9, #1
                    prvAddTaskToReadyList( pxTCB );
 8008f86:	4938      	ldr	r1, [pc, #224]	@ (8009068 <xTaskResumeAll+0x130>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f88:	f8df e0e8 	ldr.w	lr, [pc, #232]	@ 8009074 <xTaskResumeAll+0x13c>
                        xYieldPending = pdTRUE;
 8008f8c:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8009070 <xTaskResumeAll+0x138>
 8008f90:	e03f      	b.n	8009012 <xTaskResumeAll+0xda>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f92:	68f3      	ldr	r3, [r6, #12]
 8008f94:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008f96:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008f98:	f103 0518 	add.w	r5, r3, #24
 8008f9c:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
 8008fa0:	6094      	str	r4, [r2, #8]
 8008fa2:	6062      	str	r2, [r4, #4]
 8008fa4:	6842      	ldr	r2, [r0, #4]
 8008fa6:	42aa      	cmp	r2, r5
 8008fa8:	f04f 0200 	mov.w	r2, #0
 8008fac:	bf08      	it	eq
 8008fae:	6044      	streq	r4, [r0, #4]
 8008fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fb2:	6802      	ldr	r2, [r0, #0]
 8008fb4:	3a01      	subs	r2, #1
 8008fb6:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008fb8:	6958      	ldr	r0, [r3, #20]
 8008fba:	1d1d      	adds	r5, r3, #4
 8008fbc:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
 8008fc0:	6094      	str	r4, [r2, #8]
 8008fc2:	6062      	str	r2, [r4, #4]
 8008fc4:	6842      	ldr	r2, [r0, #4]
 8008fc6:	42aa      	cmp	r2, r5
 8008fc8:	6802      	ldr	r2, [r0, #0]
 8008fca:	f102 32ff 	add.w	r2, r2, #4294967295
 8008fce:	bf08      	it	eq
 8008fd0:	6044      	streq	r4, [r0, #4]
 8008fd2:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008fd4:	6838      	ldr	r0, [r7, #0]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd8:	4282      	cmp	r2, r0
 8008fda:	d900      	bls.n	8008fde <xTaskResumeAll+0xa6>
 8008fdc:	603a      	str	r2, [r7, #0]
 8008fde:	fb0c f002 	mul.w	r0, ip, r2
 8008fe2:	eb01 0a00 	add.w	sl, r1, r0
 8008fe6:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008fea:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8008fee:	609c      	str	r4, [r3, #8]
 8008ff0:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008ff4:	f8cb 5004 	str.w	r5, [fp, #4]
 8008ff8:	60a5      	str	r5, [r4, #8]
 8008ffa:	580c      	ldr	r4, [r1, r0]
 8008ffc:	f8c3 a014 	str.w	sl, [r3, #20]
 8009000:	3401      	adds	r4, #1
 8009002:	500c      	str	r4, [r1, r0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009004:	f8de 0000 	ldr.w	r0, [lr]
 8009008:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800900a:	4282      	cmp	r2, r0
 800900c:	d301      	bcc.n	8009012 <xTaskResumeAll+0xda>
                        xYieldPending = pdTRUE;
 800900e:	f8c8 9000 	str.w	r9, [r8]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009012:	6832      	ldr	r2, [r6, #0]
 8009014:	2a00      	cmp	r2, #0
 8009016:	d1bc      	bne.n	8008f92 <xTaskResumeAll+0x5a>
                if( pxTCB != NULL )
 8009018:	b10b      	cbz	r3, 800901e <xTaskResumeAll+0xe6>
                    prvResetNextTaskUnblockTime();
 800901a:	f7ff fcef 	bl	80089fc <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800901e:	4d13      	ldr	r5, [pc, #76]	@ (800906c <xTaskResumeAll+0x134>)
 8009020:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8009022:	b144      	cbz	r4, 8009036 <xTaskResumeAll+0xfe>
                                xYieldPending = pdTRUE;
 8009024:	4e12      	ldr	r6, [pc, #72]	@ (8009070 <xTaskResumeAll+0x138>)
 8009026:	2701      	movs	r7, #1
                            if( xTaskIncrementTick() != pdFALSE )
 8009028:	f7ff fed0 	bl	8008dcc <xTaskIncrementTick>
 800902c:	b100      	cbz	r0, 8009030 <xTaskResumeAll+0xf8>
                                xYieldPending = pdTRUE;
 800902e:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009030:	3c01      	subs	r4, #1
 8009032:	d1f9      	bne.n	8009028 <xTaskResumeAll+0xf0>
                        xPendedTicks = 0;
 8009034:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 8009036:	4b0e      	ldr	r3, [pc, #56]	@ (8009070 <xTaskResumeAll+0x138>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d093      	beq.n	8008f66 <xTaskResumeAll+0x2e>
                    taskYIELD_IF_USING_PREEMPTION();
 800903e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009046:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
 8009052:	2401      	movs	r4, #1
 8009054:	e788      	b.n	8008f68 <xTaskResumeAll+0x30>
 8009056:	bf00      	nop
 8009058:	20006bf0 	.word	0x20006bf0
 800905c:	20006c18 	.word	0x20006c18
 8009060:	20006c48 	.word	0x20006c48
 8009064:	20006c10 	.word	0x20006c10
 8009068:	20006c8c 	.word	0x20006c8c
 800906c:	20006c08 	.word	0x20006c08
 8009070:	20006c04 	.word	0x20006c04
 8009074:	20006cf0 	.word	0x20006cf0

08009078 <vTaskDelay>:
    {
 8009078:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 800907a:	b950      	cbnz	r0, 8009092 <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 800907c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009084:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
    }
 8009090:	bd08      	pop	{r3, pc}
            configASSERT( uxSchedulerSuspended == 0 );
 8009092:	4b0b      	ldr	r3, [pc, #44]	@ (80090c0 <vTaskDelay+0x48>)
 8009094:	6819      	ldr	r1, [r3, #0]
 8009096:	b151      	cbz	r1, 80090ae <vTaskDelay+0x36>
 8009098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909c:	b672      	cpsid	i
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	b662      	cpsie	i
 80090ac:	e7fe      	b.n	80090ac <vTaskDelay+0x34>
            vTaskSuspendAll();
 80090ae:	f7ff fe79 	bl	8008da4 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090b2:	f7ff fc5f 	bl	8008974 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80090b6:	f7ff ff3f 	bl	8008f38 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0de      	beq.n	800907c <vTaskDelay+0x4>
 80090be:	e7e7      	b.n	8009090 <vTaskDelay+0x18>
 80090c0:	20006bf0 	.word	0x20006bf0

080090c4 <vTaskSwitchContext>:
{
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090c6:	4b24      	ldr	r3, [pc, #144]	@ (8009158 <vTaskSwitchContext+0x94>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b24      	ldr	r3, [pc, #144]	@ (800915c <vTaskSwitchContext+0x98>)
 80090cc:	b112      	cbz	r2, 80090d4 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
}
 80090d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
 80090d4:	4c22      	ldr	r4, [pc, #136]	@ (8009160 <vTaskSwitchContext+0x9c>)
        xYieldPending = pdFALSE;
 80090d6:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80090e2:	d10b      	bne.n	80090fc <vTaskSwitchContext+0x38>
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80090ea:	d107      	bne.n	80090fc <vTaskSwitchContext+0x38>
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80090f2:	d103      	bne.n	80090fc <vTaskSwitchContext+0x38>
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 80090fa:	d004      	beq.n	8009106 <vTaskSwitchContext+0x42>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	6821      	ldr	r1, [r4, #0]
 8009100:	3134      	adds	r1, #52	@ 0x34
 8009102:	f009 f9c7 	bl	8012494 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009106:	4e17      	ldr	r6, [pc, #92]	@ (8009164 <vTaskSwitchContext+0xa0>)
 8009108:	2714      	movs	r7, #20
 800910a:	4917      	ldr	r1, [pc, #92]	@ (8009168 <vTaskSwitchContext+0xa4>)
 800910c:	6832      	ldr	r2, [r6, #0]
 800910e:	fb07 f302 	mul.w	r3, r7, r2
 8009112:	58cd      	ldr	r5, [r1, r3]
 8009114:	18c8      	adds	r0, r1, r3
 8009116:	b185      	cbz	r5, 800913a <vTaskSwitchContext+0x76>
 8009118:	6845      	ldr	r5, [r0, #4]
 800911a:	3308      	adds	r3, #8
 800911c:	686d      	ldr	r5, [r5, #4]
 800911e:	440b      	add	r3, r1
 8009120:	429d      	cmp	r5, r3
 8009122:	6045      	str	r5, [r0, #4]
 8009124:	bf04      	itt	eq
 8009126:	686b      	ldreq	r3, [r5, #4]
 8009128:	6043      	streq	r3, [r0, #4]
 800912a:	2314      	movs	r3, #20
 800912c:	fb03 1102 	mla	r1, r3, r2, r1
 8009130:	684b      	ldr	r3, [r1, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	6032      	str	r2, [r6, #0]
}
 8009138:	e7cb      	b.n	80090d2 <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913a:	b952      	cbnz	r2, 8009152 <vTaskSwitchContext+0x8e>
 800913c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009140:	b672      	cpsid	i
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	b662      	cpsie	i
 8009150:	e7fe      	b.n	8009150 <vTaskSwitchContext+0x8c>
 8009152:	3a01      	subs	r2, #1
 8009154:	e7db      	b.n	800910e <vTaskSwitchContext+0x4a>
 8009156:	bf00      	nop
 8009158:	20006bf0 	.word	0x20006bf0
 800915c:	20006c04 	.word	0x20006c04
 8009160:	20006cf0 	.word	0x20006cf0
 8009164:	20006c10 	.word	0x20006c10
 8009168:	20006c8c 	.word	0x20006c8c

0800916c <vTaskPlaceOnEventList>:
{
 800916c:	b510      	push	{r4, lr}
 800916e:	460c      	mov	r4, r1
    configASSERT( pxEventList );
 8009170:	b950      	cbnz	r0, 8009188 <vTaskPlaceOnEventList+0x1c>
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	b672      	cpsid	i
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	b662      	cpsie	i
 8009186:	e7fe      	b.n	8009186 <vTaskPlaceOnEventList+0x1a>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <vTaskPlaceOnEventList+0x34>)
 800918a:	6819      	ldr	r1, [r3, #0]
 800918c:	3118      	adds	r1, #24
 800918e:	f7fe fede 	bl	8007f4e <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009192:	4620      	mov	r0, r4
 8009194:	2101      	movs	r1, #1
}
 8009196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800919a:	f7ff bbeb 	b.w	8008974 <prvAddCurrentTaskToDelayedList>
 800919e:	bf00      	nop
 80091a0:	20006cf0 	.word	0x20006cf0

080091a4 <vTaskPlaceOnEventListRestricted>:
    {
 80091a4:	b470      	push	{r4, r5, r6}
 80091a6:	460c      	mov	r4, r1
 80091a8:	4611      	mov	r1, r2
        configASSERT( pxEventList );
 80091aa:	b950      	cbnz	r0, 80091c2 <vTaskPlaceOnEventListRestricted+0x1e>
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	b672      	cpsid	i
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	b662      	cpsie	i
 80091c0:	e7fe      	b.n	80091c0 <vTaskPlaceOnEventListRestricted+0x1c>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091c2:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <vTaskPlaceOnEventListRestricted+0x58>)
            xTicksToWait = portMAX_DELAY;
 80091c4:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091c6:	6842      	ldr	r2, [r0, #4]
 80091c8:	681d      	ldr	r5, [r3, #0]
 80091ca:	6896      	ldr	r6, [r2, #8]
 80091cc:	61ea      	str	r2, [r5, #28]
 80091ce:	681d      	ldr	r5, [r3, #0]
 80091d0:	622e      	str	r6, [r5, #32]
 80091d2:	681d      	ldr	r5, [r3, #0]
 80091d4:	f105 0518 	add.w	r5, r5, #24
 80091d8:	6075      	str	r5, [r6, #4]
 80091da:	681d      	ldr	r5, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f105 0518 	add.w	r5, r5, #24
 80091e2:	6095      	str	r5, [r2, #8]
 80091e4:	6298      	str	r0, [r3, #40]	@ 0x28
 80091e6:	6803      	ldr	r3, [r0, #0]
 80091e8:	f103 0301 	add.w	r3, r3, #1
 80091ec:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091ee:	bf0c      	ite	eq
 80091f0:	4620      	moveq	r0, r4
 80091f2:	f04f 30ff 	movne.w	r0, #4294967295
    }
 80091f6:	bc70      	pop	{r4, r5, r6}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091f8:	f7ff bbbc 	b.w	8008974 <prvAddCurrentTaskToDelayedList>
 80091fc:	20006cf0 	.word	0x20006cf0

08009200 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009200:	68c3      	ldr	r3, [r0, #12]
 8009202:	68db      	ldr	r3, [r3, #12]
{
 8009204:	b5f0      	push	{r4, r5, r6, r7, lr}
    configASSERT( pxUnblockedTCB );
 8009206:	b953      	cbnz	r3, 800921e <xTaskRemoveFromEventList+0x1e>
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	b672      	cpsid	i
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	b662      	cpsie	i
 800921c:	e7fe      	b.n	800921c <xTaskRemoveFromEventList+0x1c>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800921e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009220:	f103 0418 	add.w	r4, r3, #24
 8009224:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8009228:	6081      	str	r1, [r0, #8]
 800922a:	6048      	str	r0, [r1, #4]
 800922c:	6850      	ldr	r0, [r2, #4]
 800922e:	42a0      	cmp	r0, r4
 8009230:	bf08      	it	eq
 8009232:	6051      	streq	r1, [r2, #4]
 8009234:	2100      	movs	r1, #0
 8009236:	6299      	str	r1, [r3, #40]	@ 0x28
 8009238:	6811      	ldr	r1, [r2, #0]
 800923a:	3901      	subs	r1, #1
 800923c:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800923e:	4a1e      	ldr	r2, [pc, #120]	@ (80092b8 <xTaskRemoveFromEventList+0xb8>)
 8009240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	2a00      	cmp	r2, #0
 8009246:	d128      	bne.n	800929a <xTaskRemoveFromEventList+0x9a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	1d1d      	adds	r5, r3, #4
 800924c:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
 8009250:	60a0      	str	r0, [r4, #8]
 8009252:	6044      	str	r4, [r0, #4]
 8009254:	6854      	ldr	r4, [r2, #4]
 8009256:	42ac      	cmp	r4, r5
 8009258:	bf08      	it	eq
 800925a:	6050      	streq	r0, [r2, #4]
 800925c:	6810      	ldr	r0, [r2, #0]
 800925e:	3801      	subs	r0, #1
 8009260:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009262:	4a16      	ldr	r2, [pc, #88]	@ (80092bc <xTaskRemoveFromEventList+0xbc>)
 8009264:	6810      	ldr	r0, [r2, #0]
 8009266:	4281      	cmp	r1, r0
 8009268:	d900      	bls.n	800926c <xTaskRemoveFromEventList+0x6c>
 800926a:	6011      	str	r1, [r2, #0]
 800926c:	2214      	movs	r2, #20
 800926e:	4814      	ldr	r0, [pc, #80]	@ (80092c0 <xTaskRemoveFromEventList+0xc0>)
 8009270:	434a      	muls	r2, r1
 8009272:	1886      	adds	r6, r0, r2
 8009274:	6874      	ldr	r4, [r6, #4]
 8009276:	68a7      	ldr	r7, [r4, #8]
 8009278:	609c      	str	r4, [r3, #8]
 800927a:	60df      	str	r7, [r3, #12]
 800927c:	607d      	str	r5, [r7, #4]
 800927e:	60a5      	str	r5, [r4, #8]
 8009280:	615e      	str	r6, [r3, #20]
 8009282:	5883      	ldr	r3, [r0, r2]
 8009284:	3301      	adds	r3, #1
 8009286:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009288:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <xTaskRemoveFromEventList+0xc4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	4299      	cmp	r1, r3
 8009290:	d90f      	bls.n	80092b2 <xTaskRemoveFromEventList+0xb2>
        xYieldPending = pdTRUE;
 8009292:	2001      	movs	r0, #1
 8009294:	4b0c      	ldr	r3, [pc, #48]	@ (80092c8 <xTaskRemoveFromEventList+0xc8>)
 8009296:	6018      	str	r0, [r3, #0]
}
 8009298:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800929a:	4a0c      	ldr	r2, [pc, #48]	@ (80092cc <xTaskRemoveFromEventList+0xcc>)
 800929c:	6850      	ldr	r0, [r2, #4]
 800929e:	6885      	ldr	r5, [r0, #8]
 80092a0:	61d8      	str	r0, [r3, #28]
 80092a2:	621d      	str	r5, [r3, #32]
 80092a4:	606c      	str	r4, [r5, #4]
 80092a6:	6084      	str	r4, [r0, #8]
 80092a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80092aa:	6813      	ldr	r3, [r2, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	e7ea      	b.n	8009288 <xTaskRemoveFromEventList+0x88>
        xReturn = pdFALSE;
 80092b2:	2000      	movs	r0, #0
    return xReturn;
 80092b4:	e7f0      	b.n	8009298 <xTaskRemoveFromEventList+0x98>
 80092b6:	bf00      	nop
 80092b8:	20006bf0 	.word	0x20006bf0
 80092bc:	20006c10 	.word	0x20006c10
 80092c0:	20006c8c 	.word	0x20006c8c
 80092c4:	20006cf0 	.word	0x20006cf0
 80092c8:	20006c04 	.word	0x20006c04
 80092cc:	20006c48 	.word	0x20006c48

080092d0 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092d0:	4b03      	ldr	r3, [pc, #12]	@ (80092e0 <vTaskInternalSetTimeOutState+0x10>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80092d6:	4b03      	ldr	r3, [pc, #12]	@ (80092e4 <vTaskInternalSetTimeOutState+0x14>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6043      	str	r3, [r0, #4]
}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20006c00 	.word	0x20006c00
 80092e4:	20006c14 	.word	0x20006c14

080092e8 <xTaskCheckForTimeOut>:
{
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
 80092ec:	4604      	mov	r4, r0
 80092ee:	b950      	cbnz	r0, 8009306 <xTaskCheckForTimeOut+0x1e>
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	b662      	cpsie	i
 8009304:	e7fe      	b.n	8009304 <xTaskCheckForTimeOut+0x1c>
    configASSERT( pxTicksToWait );
 8009306:	b951      	cbnz	r1, 800931e <xTaskCheckForTimeOut+0x36>
 8009308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930c:	b672      	cpsid	i
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	b662      	cpsie	i
 800931c:	e7fe      	b.n	800931c <xTaskCheckForTimeOut+0x34>
    taskENTER_CRITICAL();
 800931e:	f000 fc29 	bl	8009b74 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8009322:	4b0f      	ldr	r3, [pc, #60]	@ (8009360 <xTaskCheckForTimeOut+0x78>)
 8009324:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8009326:	682b      	ldr	r3, [r5, #0]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	d017      	beq.n	800935c <xTaskCheckForTimeOut+0x74>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800932c:	480d      	ldr	r0, [pc, #52]	@ (8009364 <xTaskCheckForTimeOut+0x7c>)
 800932e:	6826      	ldr	r6, [r4, #0]
 8009330:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009332:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009334:	4286      	cmp	r6, r0
 8009336:	d008      	beq.n	800934a <xTaskCheckForTimeOut+0x62>
 8009338:	428a      	cmp	r2, r1
 800933a:	d806      	bhi.n	800934a <xTaskCheckForTimeOut+0x62>
            *pxTicksToWait = ( TickType_t ) 0;
 800933c:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800933e:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8009340:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 8009342:	f000 fc3b 	bl	8009bbc <vPortExitCritical>
}
 8009346:	4620      	mov	r0, r4
 8009348:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800934a:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800934c:	4283      	cmp	r3, r0
 800934e:	d9f5      	bls.n	800933c <xTaskCheckForTimeOut+0x54>
            *pxTicksToWait -= xElapsedTime;
 8009350:	1a5b      	subs	r3, r3, r1
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009352:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 8009354:	4413      	add	r3, r2
 8009356:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009358:	f7ff ffba 	bl	80092d0 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 800935c:	2400      	movs	r4, #0
 800935e:	e7f0      	b.n	8009342 <xTaskCheckForTimeOut+0x5a>
 8009360:	20006c14 	.word	0x20006c14
 8009364:	20006c00 	.word	0x20006c00

08009368 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8009368:	4b01      	ldr	r3, [pc, #4]	@ (8009370 <vTaskMissedYield+0x8>)
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]
}
 800936e:	4770      	bx	lr
 8009370:	20006c04 	.word	0x20006c04

08009374 <xTaskGetCurrentTaskHandle>:
        xReturn = pxCurrentTCB;
 8009374:	4b01      	ldr	r3, [pc, #4]	@ (800937c <xTaskGetCurrentTaskHandle+0x8>)
 8009376:	6818      	ldr	r0, [r3, #0]
    }
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20006cf0 	.word	0x20006cf0

08009380 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8009380:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <xTaskGetSchedulerState+0x18>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	b133      	cbz	r3, 8009394 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009386:	4b05      	ldr	r3, [pc, #20]	@ (800939c <xTaskGetSchedulerState+0x1c>)
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	fab0 f080 	clz	r0, r0
 800938e:	0940      	lsrs	r0, r0, #5
 8009390:	0040      	lsls	r0, r0, #1
 8009392:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009394:	2001      	movs	r0, #1
    }
 8009396:	4770      	bx	lr
 8009398:	20006c0c 	.word	0x20006c0c
 800939c:	20006bf0 	.word	0x20006bf0

080093a0 <xTaskPriorityInherit>:
    {
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 80093a2:	4604      	mov	r4, r0
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d02e      	beq.n	8009406 <xTaskPriorityInherit+0x66>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093a8:	4d1d      	ldr	r5, [pc, #116]	@ (8009420 <xTaskPriorityInherit+0x80>)
 80093aa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80093ac:	682a      	ldr	r2, [r5, #0]
 80093ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d22d      	bcs.n	8009410 <xTaskPriorityInherit+0x70>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093b4:	6982      	ldr	r2, [r0, #24]
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	db04      	blt.n	80093c4 <xTaskPriorityInherit+0x24>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ba:	682a      	ldr	r2, [r5, #0]
 80093bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093be:	f1c2 0205 	rsb	r2, r2, #5
 80093c2:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093c4:	2214      	movs	r2, #20
 80093c6:	4e17      	ldr	r6, [pc, #92]	@ (8009424 <xTaskPriorityInherit+0x84>)
 80093c8:	fb02 6303 	mla	r3, r2, r3, r6
 80093cc:	6962      	ldr	r2, [r4, #20]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d11a      	bne.n	8009408 <xTaskPriorityInherit+0x68>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093d2:	1d27      	adds	r7, r4, #4
 80093d4:	4638      	mov	r0, r7
 80093d6:	f7fe fdd1 	bl	8007f7c <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093da:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80093dc:	4a12      	ldr	r2, [pc, #72]	@ (8009428 <xTaskPriorityInherit+0x88>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80093e0:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80093e4:	428b      	cmp	r3, r1
 80093e6:	d900      	bls.n	80093ea <xTaskPriorityInherit+0x4a>
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	2214      	movs	r2, #20
 80093ec:	4353      	muls	r3, r2
 80093ee:	18f1      	adds	r1, r6, r3
 80093f0:	684a      	ldr	r2, [r1, #4]
 80093f2:	6890      	ldr	r0, [r2, #8]
 80093f4:	60a2      	str	r2, [r4, #8]
 80093f6:	60e0      	str	r0, [r4, #12]
 80093f8:	6047      	str	r7, [r0, #4]
 80093fa:	6097      	str	r7, [r2, #8]
 80093fc:	58f2      	ldr	r2, [r6, r3]
 80093fe:	6161      	str	r1, [r4, #20]
 8009400:	3201      	adds	r2, #1
 8009402:	50f2      	str	r2, [r6, r3]
                xReturn = pdTRUE;
 8009404:	2001      	movs	r0, #1
    }
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800940e:	e7f9      	b.n	8009404 <xTaskPriorityInherit+0x64>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009416:	4298      	cmp	r0, r3
 8009418:	bf2c      	ite	cs
 800941a:	2000      	movcs	r0, #0
 800941c:	2001      	movcc	r0, #1
 800941e:	e7f2      	b.n	8009406 <xTaskPriorityInherit+0x66>
 8009420:	20006cf0 	.word	0x20006cf0
 8009424:	20006c8c 	.word	0x20006c8c
 8009428:	20006c10 	.word	0x20006c10

0800942c <xTaskPriorityDisinherit>:
    {
 800942c:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 800942e:	4604      	mov	r4, r0
 8009430:	b908      	cbnz	r0, 8009436 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 8009432:	2000      	movs	r0, #0
    }
 8009434:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB == pxCurrentTCB );
 8009436:	4b21      	ldr	r3, [pc, #132]	@ (80094bc <xTaskPriorityDisinherit+0x90>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4283      	cmp	r3, r0
 800943c:	d00a      	beq.n	8009454 <xTaskPriorityDisinherit+0x28>
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	b672      	cpsid	i
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	b662      	cpsie	i
 8009452:	e7fe      	b.n	8009452 <xTaskPriorityDisinherit+0x26>
            configASSERT( pxTCB->uxMutexesHeld );
 8009454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009456:	b953      	cbnz	r3, 800946e <xTaskPriorityDisinherit+0x42>
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	b672      	cpsid	i
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	b662      	cpsie	i
 800946c:	e7fe      	b.n	800946c <xTaskPriorityDisinherit+0x40>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800946e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
            ( pxTCB->uxMutexesHeld )--;
 8009470:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009472:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8009474:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009476:	4291      	cmp	r1, r2
 8009478:	d0db      	beq.n	8009432 <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1d9      	bne.n	8009432 <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947e:	1d05      	adds	r5, r0, #4
 8009480:	4628      	mov	r0, r5
 8009482:	f7fe fd7b 	bl	8007f7c <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009486:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009488:	f1c3 0205 	rsb	r2, r3, #5
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800948c:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948e:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009490:	4a0b      	ldr	r2, [pc, #44]	@ (80094c0 <xTaskPriorityDisinherit+0x94>)
 8009492:	6811      	ldr	r1, [r2, #0]
 8009494:	428b      	cmp	r3, r1
 8009496:	d900      	bls.n	800949a <xTaskPriorityDisinherit+0x6e>
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	2114      	movs	r1, #20
 800949c:	4a09      	ldr	r2, [pc, #36]	@ (80094c4 <xTaskPriorityDisinherit+0x98>)
 800949e:	434b      	muls	r3, r1
 80094a0:	18d0      	adds	r0, r2, r3
 80094a2:	6841      	ldr	r1, [r0, #4]
 80094a4:	688e      	ldr	r6, [r1, #8]
 80094a6:	60a1      	str	r1, [r4, #8]
 80094a8:	60e6      	str	r6, [r4, #12]
 80094aa:	6075      	str	r5, [r6, #4]
 80094ac:	608d      	str	r5, [r1, #8]
 80094ae:	58d1      	ldr	r1, [r2, r3]
 80094b0:	6160      	str	r0, [r4, #20]
                    xReturn = pdTRUE;
 80094b2:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
 80094b4:	3101      	adds	r1, #1
 80094b6:	50d1      	str	r1, [r2, r3]
        return xReturn;
 80094b8:	e7bc      	b.n	8009434 <xTaskPriorityDisinherit+0x8>
 80094ba:	bf00      	nop
 80094bc:	20006cf0 	.word	0x20006cf0
 80094c0:	20006c10 	.word	0x20006c10
 80094c4:	20006c8c 	.word	0x20006c8c

080094c8 <vTaskPriorityDisinheritAfterTimeout>:
    {
 80094c8:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 80094ca:	4604      	mov	r4, r0
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d04b      	beq.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0xa0>
            configASSERT( pxTCB->uxMutexesHeld );
 80094d0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80094d2:	b952      	cbnz	r2, 80094ea <vTaskPriorityDisinheritAfterTimeout+0x22>
 80094d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d8:	b672      	cpsid	i
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	b662      	cpsie	i
 80094e8:	e7fe      	b.n	80094e8 <vTaskPriorityDisinheritAfterTimeout+0x20>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094ea:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80094ec:	4299      	cmp	r1, r3
 80094ee:	bf38      	it	cc
 80094f0:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 80094f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80094f4:	428b      	cmp	r3, r1
 80094f6:	d037      	beq.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094f8:	2a01      	cmp	r2, #1
 80094fa:	d135      	bne.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                    configASSERT( pxTCB != pxCurrentTCB );
 80094fc:	4a1b      	ldr	r2, [pc, #108]	@ (800956c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	4282      	cmp	r2, r0
 8009502:	d10a      	bne.n	800951a <vTaskPriorityDisinheritAfterTimeout+0x52>
 8009504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009508:	b672      	cpsid	i
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	b662      	cpsie	i
 8009518:	e7fe      	b.n	8009518 <vTaskPriorityDisinheritAfterTimeout+0x50>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800951a:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800951c:	4d14      	ldr	r5, [pc, #80]	@ (8009570 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800951e:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009520:	f04f 0214 	mov.w	r2, #20
                    pxTCB->uxPriority = uxPriorityToUse;
 8009524:	62c1      	str	r1, [r0, #44]	@ 0x2c
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009526:	fb02 5303 	mla	r3, r2, r3, r5
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952a:	bfa8      	it	ge
 800952c:	f1c1 0105 	rsbge	r1, r1, #5
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009530:	6942      	ldr	r2, [r0, #20]
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009532:	bfa8      	it	ge
 8009534:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009536:	429a      	cmp	r2, r3
 8009538:	d116      	bne.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800953a:	1d06      	adds	r6, r0, #4
 800953c:	4630      	mov	r0, r6
 800953e:	f7fe fd1d 	bl	8007f7c <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8009542:	4a0c      	ldr	r2, [pc, #48]	@ (8009574 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8009544:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009546:	6811      	ldr	r1, [r2, #0]
 8009548:	428b      	cmp	r3, r1
 800954a:	d900      	bls.n	800954e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	2214      	movs	r2, #20
 8009550:	4353      	muls	r3, r2
 8009552:	18e9      	adds	r1, r5, r3
 8009554:	684a      	ldr	r2, [r1, #4]
 8009556:	6890      	ldr	r0, [r2, #8]
 8009558:	60a2      	str	r2, [r4, #8]
 800955a:	60e0      	str	r0, [r4, #12]
 800955c:	6046      	str	r6, [r0, #4]
 800955e:	6096      	str	r6, [r2, #8]
 8009560:	58ea      	ldr	r2, [r5, r3]
 8009562:	6161      	str	r1, [r4, #20]
 8009564:	3201      	adds	r2, #1
 8009566:	50ea      	str	r2, [r5, r3]
    }
 8009568:	bd70      	pop	{r4, r5, r6, pc}
 800956a:	bf00      	nop
 800956c:	20006cf0 	.word	0x20006cf0
 8009570:	20006c8c 	.word	0x20006c8c
 8009574:	20006c10 	.word	0x20006c10

08009578 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8009578:	4b04      	ldr	r3, [pc, #16]	@ (800958c <pvTaskIncrementMutexHeldCount+0x14>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	b11a      	cbz	r2, 8009586 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 800957e:	6819      	ldr	r1, [r3, #0]
 8009580:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8009582:	3201      	adds	r2, #1
 8009584:	650a      	str	r2, [r1, #80]	@ 0x50
        return pxCurrentTCB;
 8009586:	6818      	ldr	r0, [r3, #0]
    }
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	20006cf0 	.word	0x20006cf0

08009590 <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
 8009590:	4291      	cmp	r1, r2
    {
 8009592:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009594:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009596:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
 8009598:	d80a      	bhi.n	80095b0 <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	6983      	ldr	r3, [r0, #24]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d20d      	bcs.n	80095be <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095a2:	1d01      	adds	r1, r0, #4
 80095a4:	4b07      	ldr	r3, [pc, #28]	@ (80095c4 <prvInsertTimerInActiveList+0x34>)
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	f7fe fcd1 	bl	8007f4e <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 80095ac:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
 80095ae:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d201      	bcs.n	80095b8 <prvInsertTimerInActiveList+0x28>
 80095b4:	4299      	cmp	r1, r3
 80095b6:	d202      	bcs.n	80095be <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095b8:	1d01      	adds	r1, r0, #4
 80095ba:	4b03      	ldr	r3, [pc, #12]	@ (80095c8 <prvInsertTimerInActiveList+0x38>)
 80095bc:	e7f3      	b.n	80095a6 <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
 80095be:	2001      	movs	r0, #1
        return xProcessTimerNow;
 80095c0:	e7f5      	b.n	80095ae <prvInsertTimerInActiveList+0x1e>
 80095c2:	bf00      	nop
 80095c4:	20006d00 	.word	0x20006d00
 80095c8:	20006d04 	.word	0x20006d04

080095cc <prvReloadTimer>:
    {
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	4604      	mov	r4, r0
 80095d0:	460d      	mov	r5, r1
 80095d2:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80095d4:	69a1      	ldr	r1, [r4, #24]
 80095d6:	462b      	mov	r3, r5
 80095d8:	4632      	mov	r2, r6
 80095da:	4620      	mov	r0, r4
 80095dc:	4429      	add	r1, r5
 80095de:	f7ff ffd7 	bl	8009590 <prvInsertTimerInActiveList>
 80095e2:	b900      	cbnz	r0, 80095e6 <prvReloadTimer+0x1a>
    }
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80095e6:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095e8:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80095ea:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ec:	6a23      	ldr	r3, [r4, #32]
 80095ee:	4798      	blx	r3
 80095f0:	e7f0      	b.n	80095d4 <prvReloadTimer+0x8>
	...

080095f4 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009630 <prvProcessExpiredTimer+0x3c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
    {
 80095fa:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fc:	68dc      	ldr	r4, [r3, #12]
    {
 80095fe:	4605      	mov	r5, r0
 8009600:	460e      	mov	r6, r1
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009602:	1d20      	adds	r0, r4, #4
 8009604:	f7fe fcba 	bl	8007f7c <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009608:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800960c:	075a      	lsls	r2, r3, #29
 800960e:	d509      	bpl.n	8009624 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009610:	4632      	mov	r2, r6
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff ffd9 	bl	80095cc <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800961a:	6a23      	ldr	r3, [r4, #32]
 800961c:	4620      	mov	r0, r4
    }
 800961e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009622:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800962c:	e7f5      	b.n	800961a <prvProcessExpiredTimer+0x26>
 800962e:	bf00      	nop
 8009630:	20006d04 	.word	0x20006d04

08009634 <prvSampleTimeNow>:
    {
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( xTimeNow < xLastTime )
 8009636:	4e0f      	ldr	r6, [pc, #60]	@ (8009674 <prvSampleTimeNow+0x40>)
    {
 8009638:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 800963a:	f7ff fbbb 	bl	8008db4 <xTaskGetTickCount>
 800963e:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 8009640:	6833      	ldr	r3, [r6, #0]
 8009642:	4283      	cmp	r3, r0
 8009644:	d909      	bls.n	800965a <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009646:	4f0c      	ldr	r7, [pc, #48]	@ (8009678 <prvSampleTimeNow+0x44>)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	b952      	cbnz	r2, 8009664 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 800964e:	4a0b      	ldr	r2, [pc, #44]	@ (800967c <prvSampleTimeNow+0x48>)
 8009650:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	2301      	movs	r3, #1
        pxCurrentTimerList = pxOverflowTimerList;
 8009656:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8009658:	e000      	b.n	800965c <prvSampleTimeNow+0x28>
 800965a:	2300      	movs	r3, #0
    }
 800965c:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
 800965e:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 8009660:	6034      	str	r4, [r6, #0]
    }
 8009662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009664:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8009666:	f04f 31ff 	mov.w	r1, #4294967295
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	f7ff ffc2 	bl	80095f4 <prvProcessExpiredTimer>
 8009670:	e7ea      	b.n	8009648 <prvSampleTimeNow+0x14>
 8009672:	bf00      	nop
 8009674:	20006cf4 	.word	0x20006cf4
 8009678:	20006d04 	.word	0x20006d04
 800967c:	20006d00 	.word	0x20006d00

08009680 <prvTimerTask>:
    {
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009684:	4f5a      	ldr	r7, [pc, #360]	@ (80097f0 <prvTimerTask+0x170>)
    {
 8009686:	b086      	sub	sp, #24
 8009688:	4e5a      	ldr	r6, [pc, #360]	@ (80097f4 <prvTimerTask+0x174>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	f8d3 8000 	ldr.w	r8, [r3]
 8009690:	f1b8 0f00 	cmp.w	r8, #0
 8009694:	d033      	beq.n	80096fe <prvTimerTask+0x7e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009696:	68db      	ldr	r3, [r3, #12]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009698:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800969a:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
 800969e:	f7ff fb81 	bl	8008da4 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096a2:	a802      	add	r0, sp, #8
 80096a4:	f7ff ffc6 	bl	8009634 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
 80096a8:	9b02      	ldr	r3, [sp, #8]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096aa:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d143      	bne.n	8009738 <prvTimerTask+0xb8>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096b0:	bb3c      	cbnz	r4, 8009702 <prvTimerTask+0x82>
 80096b2:	4540      	cmp	r0, r8
 80096b4:	d32b      	bcc.n	800970e <prvTimerTask+0x8e>
                    ( void ) xTaskResumeAll();
 80096b6:	f7ff fc3f 	bl	8008f38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096ba:	4629      	mov	r1, r5
 80096bc:	4640      	mov	r0, r8
 80096be:	f7ff ff99 	bl	80095f4 <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096c2:	2200      	movs	r2, #0
 80096c4:	a902      	add	r1, sp, #8
 80096c6:	6830      	ldr	r0, [r6, #0]
 80096c8:	f7fe ff3b 	bl	8008542 <xQueueReceive>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d0dc      	beq.n	800968a <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096d0:	9b02      	ldr	r3, [sp, #8]
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096d2:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	db32      	blt.n	800973e <prvTimerTask+0xbe>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096d8:	9c04      	ldr	r4, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096da:	6963      	ldr	r3, [r4, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d135      	bne.n	800974c <prvTimerTask+0xcc>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e0:	a801      	add	r0, sp, #4
 80096e2:	f7ff ffa7 	bl	8009634 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
 80096e6:	9b02      	ldr	r3, [sp, #8]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e8:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
 80096ea:	3b01      	subs	r3, #1
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d8e8      	bhi.n	80096c2 <prvTimerTask+0x42>
 80096f0:	e8df f003 	tbb	[pc, r3]
 80096f4:	5a533030 	.word	0x5a533030
 80096f8:	53303075 	.word	0x53303075
 80096fc:	5a          	.byte	0x5a
 80096fd:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096fe:	2401      	movs	r4, #1
 8009700:	e7cd      	b.n	800969e <prvTimerTask+0x1e>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009702:	4b3d      	ldr	r3, [pc, #244]	@ (80097f8 <prvTimerTask+0x178>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681c      	ldr	r4, [r3, #0]
 8009708:	fab4 f484 	clz	r4, r4
 800970c:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800970e:	4622      	mov	r2, r4
 8009710:	eba8 0105 	sub.w	r1, r8, r5
 8009714:	6830      	ldr	r0, [r6, #0]
 8009716:	f7ff f90a 	bl	800892e <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800971a:	f7ff fc0d 	bl	8008f38 <xTaskResumeAll>
 800971e:	2800      	cmp	r0, #0
 8009720:	d1cf      	bne.n	80096c2 <prvTimerTask+0x42>
                        portYIELD_WITHIN_API();
 8009722:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800972a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	e7c4      	b.n	80096c2 <prvTimerTask+0x42>
                ( void ) xTaskResumeAll();
 8009738:	f7ff fbfe 	bl	8008f38 <xTaskResumeAll>
    }
 800973c:	e7c1      	b.n	80096c2 <prvTimerTask+0x42>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	9905      	ldr	r1, [sp, #20]
 8009742:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	dbbb      	blt.n	80096c2 <prvTimerTask+0x42>
 800974a:	e7c5      	b.n	80096d8 <prvTimerTask+0x58>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800974c:	1d20      	adds	r0, r4, #4
 800974e:	f7fe fc15 	bl	8007f7c <uxListRemove>
 8009752:	e7c5      	b.n	80096e0 <prvTimerTask+0x60>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009754:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009758:	4602      	mov	r2, r0
 800975a:	69a1      	ldr	r1, [r4, #24]
 800975c:	4620      	mov	r0, r4
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	4419      	add	r1, r3
 800976a:	f7ff ff11 	bl	8009590 <prvInsertTimerInActiveList>
 800976e:	2800      	cmp	r0, #0
 8009770:	d0a7      	beq.n	80096c2 <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009772:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009776:	0759      	lsls	r1, r3, #29
 8009778:	d50a      	bpl.n	8009790 <prvTimerTask+0x110>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800977a:	69a3      	ldr	r3, [r4, #24]
 800977c:	462a      	mov	r2, r5
 800977e:	9903      	ldr	r1, [sp, #12]
 8009780:	4620      	mov	r0, r4
 8009782:	4419      	add	r1, r3
 8009784:	f7ff ff22 	bl	80095cc <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009788:	6a23      	ldr	r3, [r4, #32]
 800978a:	4620      	mov	r0, r4
 800978c:	4798      	blx	r3
 800978e:	e798      	b.n	80096c2 <prvTimerTask+0x42>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009798:	e7f6      	b.n	8009788 <prvTimerTask+0x108>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800979a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800979e:	f023 0301 	bic.w	r3, r3, #1
 80097a2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80097a6:	e78c      	b.n	80096c2 <prvTimerTask+0x42>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80097ac:	f043 0301 	orr.w	r3, r3, #1
 80097b0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097b4:	9903      	ldr	r1, [sp, #12]
 80097b6:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097b8:	b951      	cbnz	r1, 80097d0 <prvTimerTask+0x150>
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	b672      	cpsid	i
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	b662      	cpsie	i
 80097ce:	e7fe      	b.n	80097ce <prvTimerTask+0x14e>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097d0:	4603      	mov	r3, r0
 80097d2:	4602      	mov	r2, r0
 80097d4:	4401      	add	r1, r0
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7ff feda 	bl	8009590 <prvInsertTimerInActiveList>
                        break;
 80097dc:	e771      	b.n	80096c2 <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80097e2:	079a      	lsls	r2, r3, #30
 80097e4:	d4db      	bmi.n	800979e <prvTimerTask+0x11e>
                                vPortFree( pxTimer );
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 f91a 	bl	8009a20 <vPortFree>
 80097ec:	e769      	b.n	80096c2 <prvTimerTask+0x42>
 80097ee:	bf00      	nop
 80097f0:	20006d04 	.word	0x20006d04
 80097f4:	20006cfc 	.word	0x20006cfc
 80097f8:	20006d00 	.word	0x20006d00

080097fc <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 80097fe:	4c0f      	ldr	r4, [pc, #60]	@ (800983c <prvCheckForValidListAndQueue+0x40>)
        taskENTER_CRITICAL();
 8009800:	f000 f9b8 	bl	8009b74 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8009804:	6825      	ldr	r5, [r4, #0]
 8009806:	b9ad      	cbnz	r5, 8009834 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8009808:	4f0d      	ldr	r7, [pc, #52]	@ (8009840 <prvCheckForValidListAndQueue+0x44>)
                vListInitialise( &xActiveTimerList2 );
 800980a:	4e0e      	ldr	r6, [pc, #56]	@ (8009844 <prvCheckForValidListAndQueue+0x48>)
                vListInitialise( &xActiveTimerList1 );
 800980c:	4638      	mov	r0, r7
 800980e:	f7fe fb85 	bl	8007f1c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8009812:	4630      	mov	r0, r6
 8009814:	f7fe fb82 	bl	8007f1c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8009818:	4b0b      	ldr	r3, [pc, #44]	@ (8009848 <prvCheckForValidListAndQueue+0x4c>)

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800981a:	462a      	mov	r2, r5
 800981c:	2110      	movs	r1, #16
                pxCurrentTimerList = &xActiveTimerList1;
 800981e:	601f      	str	r7, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009820:	2020      	movs	r0, #32
                pxOverflowTimerList = &xActiveTimerList2;
 8009822:	4b0a      	ldr	r3, [pc, #40]	@ (800984c <prvCheckForValidListAndQueue+0x50>)
 8009824:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009826:	f7fe fc93 	bl	8008150 <xQueueGenericCreate>
 800982a:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800982c:	b110      	cbz	r0, 8009834 <prvCheckForValidListAndQueue+0x38>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800982e:	4908      	ldr	r1, [pc, #32]	@ (8009850 <prvCheckForValidListAndQueue+0x54>)
 8009830:	f7ff f81e 	bl	8008870 <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 8009834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 8009838:	f000 b9c0 	b.w	8009bbc <vPortExitCritical>
 800983c:	20006cfc 	.word	0x20006cfc
 8009840:	20006d1c 	.word	0x20006d1c
 8009844:	20006d08 	.word	0x20006d08
 8009848:	20006d04 	.word	0x20006d04
 800984c:	20006d00 	.word	0x20006d00
 8009850:	08016e10 	.word	0x08016e10

08009854 <xTimerCreateTimerTask>:
    {
 8009854:	b507      	push	{r0, r1, r2, lr}
        prvCheckForValidListAndQueue();
 8009856:	f7ff ffd1 	bl	80097fc <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800985a:	4b0f      	ldr	r3, [pc, #60]	@ (8009898 <xTimerCreateTimerTask+0x44>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	b953      	cbnz	r3, 8009876 <xTimerCreateTimerTask+0x22>
 8009860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009864:	b672      	cpsid	i
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	b662      	cpsie	i
        configASSERT( xReturn );
 8009874:	e7fe      	b.n	8009874 <xTimerCreateTimerTask+0x20>
                xReturn = xTaskCreate( prvTimerTask,
 8009876:	4b09      	ldr	r3, [pc, #36]	@ (800989c <xTimerCreateTimerTask+0x48>)
 8009878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800987c:	4908      	ldr	r1, [pc, #32]	@ (80098a0 <xTimerCreateTimerTask+0x4c>)
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	2302      	movs	r3, #2
 8009882:	4808      	ldr	r0, [pc, #32]	@ (80098a4 <xTimerCreateTimerTask+0x50>)
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2300      	movs	r3, #0
 8009888:	f7ff f8fe 	bl	8008a88 <xTaskCreate>
        configASSERT( xReturn );
 800988c:	2800      	cmp	r0, #0
 800988e:	d0e7      	beq.n	8009860 <xTimerCreateTimerTask+0xc>
    }
 8009890:	b003      	add	sp, #12
 8009892:	f85d fb04 	ldr.w	pc, [sp], #4
 8009896:	bf00      	nop
 8009898:	20006cfc 	.word	0x20006cfc
 800989c:	20006cf8 	.word	0x20006cf8
 80098a0:	08016e15 	.word	0x08016e15
 80098a4:	08009681 	.word	0x08009681

080098a8 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098a8:	4b10      	ldr	r3, [pc, #64]	@ (80098ec <prvInsertBlockIntoFreeList+0x44>)
{
 80098aa:	b510      	push	{r4, lr}
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098ac:	461a      	mov	r2, r3
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4283      	cmp	r3, r0
 80098b2:	d3fb      	bcc.n	80098ac <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098b4:	6854      	ldr	r4, [r2, #4]
 80098b6:	1911      	adds	r1, r2, r4
 80098b8:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098ba:	bf01      	itttt	eq
 80098bc:	6841      	ldreq	r1, [r0, #4]
        pxBlockToInsert = pxIterator;
 80098be:	4610      	moveq	r0, r2
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098c0:	1909      	addeq	r1, r1, r4
 80098c2:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098c4:	6844      	ldr	r4, [r0, #4]
 80098c6:	1901      	adds	r1, r0, r4
 80098c8:	428b      	cmp	r3, r1
 80098ca:	d10c      	bne.n	80098e6 <prvInsertBlockIntoFreeList+0x3e>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80098cc:	4908      	ldr	r1, [pc, #32]	@ (80098f0 <prvInsertBlockIntoFreeList+0x48>)
 80098ce:	6809      	ldr	r1, [r1, #0]
 80098d0:	428b      	cmp	r3, r1
 80098d2:	d003      	beq.n	80098dc <prvInsertBlockIntoFreeList+0x34>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098d4:	6859      	ldr	r1, [r3, #4]
 80098d6:	4421      	add	r1, r4
 80098d8:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098da:	6819      	ldr	r1, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80098dc:	4290      	cmp	r0, r2
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098de:	6001      	str	r1, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098e0:	bf18      	it	ne
 80098e2:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80098e4:	bd10      	pop	{r4, pc}
 80098e6:	4619      	mov	r1, r3
 80098e8:	e7f8      	b.n	80098dc <prvInsertBlockIntoFreeList+0x34>
 80098ea:	bf00      	nop
 80098ec:	20006d44 	.word	0x20006d44
 80098f0:	20006d40 	.word	0x20006d40

080098f4 <pvPortMalloc>:
{
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	4604      	mov	r4, r0
    vTaskSuspendAll();
 80098f8:	f7ff fa54 	bl	8008da4 <vTaskSuspendAll>
        if( pxEnd == NULL )
 80098fc:	4842      	ldr	r0, [pc, #264]	@ (8009a08 <pvPortMalloc+0x114>)
 80098fe:	6803      	ldr	r3, [r0, #0]
 8009900:	b9f3      	cbnz	r3, 8009940 <pvPortMalloc+0x4c>
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009902:	4a42      	ldr	r2, [pc, #264]	@ (8009a0c <pvPortMalloc+0x118>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009904:	4d42      	ldr	r5, [pc, #264]	@ (8009a10 <pvPortMalloc+0x11c>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009906:	0751      	lsls	r1, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009908:	bf1b      	ittet	ne
 800990a:	1dd1      	addne	r1, r2, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800990c:	f502 42c8 	addne.w	r2, r2, #25600	@ 0x6400
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009910:	f44f 43c8 	moveq.w	r3, #25600	@ 0x6400
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009914:	f021 0107 	bicne.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009918:	bf1c      	itt	ne
 800991a:	1a53      	subne	r3, r2, r1
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800991c:	460a      	movne	r2, r1
    xStart.xBlockSize = ( size_t ) 0;
 800991e:	2100      	movs	r1, #0
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8009920:	4413      	add	r3, r2
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009922:	602a      	str	r2, [r5, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009924:	6069      	str	r1, [r5, #4]
    uxAddress -= xHeapStructSize;
 8009926:	3b08      	subs	r3, #8
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009928:	f023 0307 	bic.w	r3, r3, #7
    pxEnd->pxNextFreeBlock = NULL;
 800992c:	e9c3 1100 	strd	r1, r1, [r3]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009930:	1a99      	subs	r1, r3, r2
    pxEnd = ( BlockLink_t * ) uxAddress;
 8009932:	6003      	str	r3, [r0, #0]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009934:	e9c2 3100 	strd	r3, r1, [r2]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009938:	4b36      	ldr	r3, [pc, #216]	@ (8009a14 <pvPortMalloc+0x120>)
 800993a:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800993c:	4b36      	ldr	r3, [pc, #216]	@ (8009a18 <pvPortMalloc+0x124>)
 800993e:	6019      	str	r1, [r3, #0]
        if( xWantedSize > 0 )
 8009940:	b164      	cbz	r4, 800995c <pvPortMalloc+0x68>
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8009942:	f004 0307 	and.w	r3, r4, #7
            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009946:	f1a3 0211 	sub.w	r2, r3, #17
 800994a:	42a2      	cmp	r2, r4
 800994c:	d306      	bcc.n	800995c <pvPortMalloc+0x68>
 800994e:	f104 0210 	add.w	r2, r4, #16
                xWantedSize += xAdditionalRequiredSize;
 8009952:	eba2 0c03 	sub.w	ip, r2, r3
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009956:	f1bc 0f00 	cmp.w	ip, #0
 800995a:	dc06      	bgt.n	800996a <pvPortMalloc+0x76>
            vApplicationMallocFailedHook();
 800995c:	2700      	movs	r7, #0
    ( void ) xTaskResumeAll();
 800995e:	f7ff faeb 	bl	8008f38 <xTaskResumeAll>
            vApplicationMallocFailedHook();
 8009962:	f008 fd85 	bl	8012470 <vApplicationMallocFailedHook>
}
 8009966:	4638      	mov	r0, r7
 8009968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800996a:	4e2b      	ldr	r6, [pc, #172]	@ (8009a18 <pvPortMalloc+0x124>)
 800996c:	6835      	ldr	r5, [r6, #0]
 800996e:	4565      	cmp	r5, ip
 8009970:	d3f4      	bcc.n	800995c <pvPortMalloc+0x68>
                pxBlock = xStart.pxNextFreeBlock;
 8009972:	4927      	ldr	r1, [pc, #156]	@ (8009a10 <pvPortMalloc+0x11c>)
 8009974:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009976:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800997a:	45e6      	cmp	lr, ip
 800997c:	d201      	bcs.n	8009982 <pvPortMalloc+0x8e>
 800997e:	6827      	ldr	r7, [r4, #0]
 8009980:	b9c7      	cbnz	r7, 80099b4 <pvPortMalloc+0xc0>
                if( pxBlock != pxEnd )
 8009982:	6800      	ldr	r0, [r0, #0]
 8009984:	42a0      	cmp	r0, r4
 8009986:	d0e9      	beq.n	800995c <pvPortMalloc+0x68>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009988:	1a9b      	subs	r3, r3, r2
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800998a:	6820      	ldr	r0, [r4, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800998c:	680f      	ldr	r7, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800998e:	4473      	add	r3, lr
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009990:	6008      	str	r0, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009992:	2b10      	cmp	r3, #16
 8009994:	d916      	bls.n	80099c4 <pvPortMalloc+0xd0>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009996:	eb04 000c 	add.w	r0, r4, ip
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800999a:	0742      	lsls	r2, r0, #29
 800999c:	d00d      	beq.n	80099ba <pvPortMalloc+0xc6>
 800999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a2:	b672      	cpsid	i
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	b662      	cpsie	i
 80099b2:	e7fe      	b.n	80099b2 <pvPortMalloc+0xbe>
                    pxPreviousBlock = pxBlock;
 80099b4:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 80099b6:	463c      	mov	r4, r7
 80099b8:	e7dd      	b.n	8009976 <pvPortMalloc+0x82>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099ba:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80099bc:	f8c4 c004 	str.w	ip, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099c0:	f7ff ff72 	bl	80098a8 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099c4:	6862      	ldr	r2, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80099c6:	2300      	movs	r3, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099c8:	4912      	ldr	r1, [pc, #72]	@ (8009a14 <pvPortMalloc+0x120>)
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099ca:	3708      	adds	r7, #8
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099cc:	1aad      	subs	r5, r5, r2
                    heapALLOCATE_BLOCK( pxBlock );
 80099ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099d2:	6808      	ldr	r0, [r1, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 80099d4:	6062      	str	r2, [r4, #4]
                    xNumberOfSuccessfulAllocations++;
 80099d6:	4a11      	ldr	r2, [pc, #68]	@ (8009a1c <pvPortMalloc+0x128>)
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099d8:	4285      	cmp	r5, r0
                    pxBlock->pxNextFreeBlock = NULL;
 80099da:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 80099dc:	6813      	ldr	r3, [r2, #0]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099de:	bf38      	it	cc
 80099e0:	600d      	strcc	r5, [r1, #0]
                    xNumberOfSuccessfulAllocations++;
 80099e2:	3301      	adds	r3, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099e4:	6035      	str	r5, [r6, #0]
                    xNumberOfSuccessfulAllocations++;
 80099e6:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 80099e8:	f7ff faa6 	bl	8008f38 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099ec:	077b      	lsls	r3, r7, #29
 80099ee:	d0ba      	beq.n	8009966 <pvPortMalloc+0x72>
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	b672      	cpsid	i
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	b662      	cpsie	i
 8009a04:	e7fe      	b.n	8009a04 <pvPortMalloc+0x110>
 8009a06:	bf00      	nop
 8009a08:	20006d40 	.word	0x20006d40
 8009a0c:	20006d4c 	.word	0x20006d4c
 8009a10:	20006d44 	.word	0x20006d44
 8009a14:	20006d38 	.word	0x20006d38
 8009a18:	20006d3c 	.word	0x20006d3c
 8009a1c:	20006d34 	.word	0x20006d34

08009a20 <vPortFree>:
{
 8009a20:	b510      	push	{r4, lr}
    if( pv != NULL )
 8009a22:	4604      	mov	r4, r0
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d034      	beq.n	8009a92 <vPortFree+0x72>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009a28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	db0a      	blt.n	8009a46 <vPortFree+0x26>
 8009a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a34:	b672      	cpsid	i
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	b662      	cpsie	i
 8009a44:	e7fe      	b.n	8009a44 <vPortFree+0x24>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a46:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8009a4a:	b152      	cbz	r2, 8009a62 <vPortFree+0x42>
 8009a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a50:	b672      	cpsid	i
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	b662      	cpsie	i
 8009a60:	e7fe      	b.n	8009a60 <vPortFree+0x40>
                heapFREE_BLOCK( pxLink );
 8009a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a66:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8009a6a:	f7ff f99b 	bl	8008da4 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009a6e:	4a09      	ldr	r2, [pc, #36]	@ (8009a94 <vPortFree+0x74>)
 8009a70:	f854 3c04 	ldr.w	r3, [r4, #-4]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a74:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009a78:	6811      	ldr	r1, [r2, #0]
 8009a7a:	440b      	add	r3, r1
 8009a7c:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a7e:	f7ff ff13 	bl	80098a8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009a82:	4a05      	ldr	r2, [pc, #20]	@ (8009a98 <vPortFree+0x78>)
 8009a84:	6813      	ldr	r3, [r2, #0]
 8009a86:	3301      	adds	r3, #1
}
 8009a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 8009a8c:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8009a8e:	f7ff ba53 	b.w	8008f38 <xTaskResumeAll>
}
 8009a92:	bd10      	pop	{r4, pc}
 8009a94:	20006d3c 	.word	0x20006d3c
 8009a98:	20006d30 	.word	0x20006d30

08009a9c <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009a9c:	4808      	ldr	r0, [pc, #32]	@ (8009ac0 <prvPortStartFirstTask+0x24>)
 8009a9e:	6800      	ldr	r0, [r0, #0]
 8009aa0:	6800      	ldr	r0, [r0, #0]
 8009aa2:	f380 8808 	msr	MSP, r0
 8009aa6:	f04f 0000 	mov.w	r0, #0
 8009aaa:	f380 8814 	msr	CONTROL, r0
 8009aae:	b662      	cpsie	i
 8009ab0:	b661      	cpsie	f
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	df00      	svc	0
 8009abc:	bf00      	nop
 8009abe:	0000      	.short	0x0000
 8009ac0:	e000ed08 	.word	0xe000ed08

08009ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ad4 <vPortEnableVFP+0x10>
 8009ac8:	6801      	ldr	r1, [r0, #0]
 8009aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009ace:	6001      	str	r1, [r0, #0]
 8009ad0:	4770      	bx	lr
 8009ad2:	0000      	.short	0x0000
 8009ad4:	e000ed88 	.word	0xe000ed88

08009ad8 <prvTaskExitError>:
    volatile uint32_t ulDummy = 0;
 8009ad8:	2300      	movs	r3, #0
{
 8009ada:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 8009adc:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
 8009ade:	4b0f      	ldr	r3, [pc, #60]	@ (8009b1c <prvTaskExitError+0x44>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	d00a      	beq.n	8009afc <prvTaskExitError+0x24>
 8009ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aea:	b672      	cpsid	i
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	b662      	cpsie	i
 8009afa:	e7fe      	b.n	8009afa <prvTaskExitError+0x22>
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	b672      	cpsid	i
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	b662      	cpsie	i
    while( ulDummy == 0 )
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0fc      	beq.n	8009b10 <prvTaskExitError+0x38>
}
 8009b16:	b002      	add	sp, #8
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20000050 	.word	0x20000050

08009b20 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009b24:	f021 0101 	bic.w	r1, r1, #1
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009b28:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009b2c:	3844      	subs	r0, #68	@ 0x44
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009b2e:	6403      	str	r3, [r0, #64]	@ 0x40
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009b30:	4b03      	ldr	r3, [pc, #12]	@ (8009b40 <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009b32:	63c1      	str	r1, [r0, #60]	@ 0x3c
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009b34:	6383      	str	r3, [r0, #56]	@ 0x38
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b36:	f06f 0302 	mvn.w	r3, #2
 8009b3a:	6203      	str	r3, [r0, #32]
}
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	08009ad9 	.word	0x08009ad9
	...

08009b50 <SVC_Handler>:
    __asm volatile (
 8009b50:	4b07      	ldr	r3, [pc, #28]	@ (8009b70 <pxCurrentTCBConst2>)
 8009b52:	6819      	ldr	r1, [r3, #0]
 8009b54:	6808      	ldr	r0, [r1, #0]
 8009b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5a:	f380 8809 	msr	PSP, r0
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f04f 0000 	mov.w	r0, #0
 8009b66:	f380 8811 	msr	BASEPRI, r0
 8009b6a:	4770      	bx	lr
 8009b6c:	f3af 8000 	nop.w

08009b70 <pxCurrentTCBConst2>:
 8009b70:	20006cf0 	.word	0x20006cf0

08009b74 <vPortEnterCritical>:
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	b672      	cpsid	i
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	b662      	cpsie	i
    uxCriticalNesting++;
 8009b88:	4a0b      	ldr	r2, [pc, #44]	@ (8009bb8 <vPortEnterCritical+0x44>)
 8009b8a:	6813      	ldr	r3, [r2, #0]
 8009b8c:	3301      	adds	r3, #1
    if( uxCriticalNesting == 1 )
 8009b8e:	2b01      	cmp	r3, #1
    uxCriticalNesting++;
 8009b90:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8009b92:	d110      	bne.n	8009bb6 <vPortEnterCritical+0x42>
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009b98:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	b153      	cbz	r3, 8009bb6 <vPortEnterCritical+0x42>
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	b672      	cpsid	i
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	b662      	cpsie	i
 8009bb4:	e7fe      	b.n	8009bb4 <vPortEnterCritical+0x40>
}
 8009bb6:	4770      	bx	lr
 8009bb8:	20000050 	.word	0x20000050

08009bbc <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8009bbc:	4a09      	ldr	r2, [pc, #36]	@ (8009be4 <vPortExitCritical+0x28>)
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	b953      	cbnz	r3, 8009bd8 <vPortExitCritical+0x1c>
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	e7fe      	b.n	8009bd6 <vPortExitCritical+0x1a>
    uxCriticalNesting--;
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8009bdc:	b90b      	cbnz	r3, 8009be2 <vPortExitCritical+0x26>
        __asm volatile
 8009bde:	f383 8811 	msr	BASEPRI, r3
}
 8009be2:	4770      	bx	lr
 8009be4:	20000050 	.word	0x20000050
	...

08009bf0 <PendSV_Handler>:
    __asm volatile
 8009bf0:	f3ef 8009 	mrs	r0, PSP
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	4b15      	ldr	r3, [pc, #84]	@ (8009c50 <pxCurrentTCBConst>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f01e 0f10 	tst.w	lr, #16
 8009c00:	bf08      	it	eq
 8009c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	6010      	str	r0, [r2, #0]
 8009c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c14:	b672      	cpsid	i
 8009c16:	f380 8811 	msr	BASEPRI, r0
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	b662      	cpsie	i
 8009c24:	f7ff fa4e 	bl	80090c4 <vTaskSwitchContext>
 8009c28:	f04f 0000 	mov.w	r0, #0
 8009c2c:	f380 8811 	msr	BASEPRI, r0
 8009c30:	bc09      	pop	{r0, r3}
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	6808      	ldr	r0, [r1, #0]
 8009c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f01e 0f10 	tst.w	lr, #16
 8009c3e:	bf08      	it	eq
 8009c40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c44:	f380 8809 	msr	PSP, r0
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop

08009c50 <pxCurrentTCBConst>:
 8009c50:	20006cf0 	.word	0x20006cf0

08009c54 <SysTick_Handler>:
{
 8009c54:	b508      	push	{r3, lr}
        __asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	b672      	cpsid	i
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	b662      	cpsie	i
        if( xTaskIncrementTick() != pdFALSE )
 8009c6a:	f7ff f8af 	bl	8008dcc <xTaskIncrementTick>
 8009c6e:	b128      	cbz	r0, 8009c7c <SysTick_Handler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        __asm volatile
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f383 8811 	msr	BASEPRI, r3
}
 8009c82:	bd08      	pop	{r3, pc}

08009c84 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c84:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009c88:	2300      	movs	r3, #0
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c8e:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c90:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c92:	4b04      	ldr	r3, [pc, #16]	@ (8009ca4 <vPortSetupTimerInterrupt+0x20>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c9e:	2307      	movs	r3, #7
 8009ca0:	6113      	str	r3, [r2, #16]
}
 8009ca2:	4770      	bx	lr
 8009ca4:	20000014 	.word	0x20000014

08009ca8 <xPortStartScheduler>:
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8009d5c <xPortStartScheduler+0xb4>)
{
 8009caa:	b537      	push	{r0, r1, r2, r4, r5, lr}
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cb2:	22ff      	movs	r2, #255	@ 0xff
 8009cb4:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cb6:	781b      	ldrb	r3, [r3, #0]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cb8:	4a29      	ldr	r2, [pc, #164]	@ (8009d60 <xPortStartScheduler+0xb8>)
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009cc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009cc8:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cca:	2307      	movs	r3, #7
 8009ccc:	4a25      	ldr	r2, [pc, #148]	@ (8009d64 <xPortStartScheduler+0xbc>)
 8009cce:	6013      	str	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cd0:	f89d 1003 	ldrb.w	r1, [sp, #3]
            ulMaxPRIGROUPValue--;
 8009cd4:	6813      	ldr	r3, [r2, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cd6:	0609      	lsls	r1, r1, #24
 8009cd8:	d40c      	bmi.n	8009cf4 <xPortStartScheduler+0x4c>
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d013      	beq.n	8009d06 <xPortStartScheduler+0x5e>
        __asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	b672      	cpsid	i
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	b662      	cpsie	i
 8009cf2:	e7fe      	b.n	8009cf2 <xPortStartScheduler+0x4a>
            ulMaxPRIGROUPValue--;
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f88d 3003 	strb.w	r3, [sp, #3]
 8009d04:	e7e4      	b.n	8009cd0 <xPortStartScheduler+0x28>
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d06:	f44f 7340 	mov.w	r3, #768	@ 0x300
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009d0a:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
    uxCriticalNesting = 0;
 8009d0e:	2500      	movs	r5, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d10:	6013      	str	r3, [r2, #0]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	4a11      	ldr	r2, [pc, #68]	@ (8009d5c <xPortStartScheduler+0xb4>)
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009d1a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009d1e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d22:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009d26:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009d2a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d2e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
 8009d32:	f7ff ffa7 	bl	8009c84 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8009d36:	4b0c      	ldr	r3, [pc, #48]	@ (8009d68 <xPortStartScheduler+0xc0>)
 8009d38:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 8009d3a:	f7ff fec3 	bl	8009ac4 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d3e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009d42:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d46:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
    prvPortStartFirstTask();
 8009d4a:	f7ff fea7 	bl	8009a9c <prvPortStartFirstTask>
    vTaskSwitchContext();
 8009d4e:	f7ff f9b9 	bl	80090c4 <vTaskSwitchContext>
}
 8009d52:	4628      	mov	r0, r5
    prvTaskExitError();
 8009d54:	f7ff fec0 	bl	8009ad8 <prvTaskExitError>
}
 8009d58:	b003      	add	sp, #12
 8009d5a:	bd30      	pop	{r4, r5, pc}
 8009d5c:	e000e400 	.word	0xe000e400
 8009d60:	2000d150 	.word	0x2000d150
 8009d64:	2000d14c 	.word	0x2000d14c
 8009d68:	20000050 	.word	0x20000050

08009d6c <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009d6c:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d70:	2b0f      	cmp	r3, #15
 8009d72:	d910      	bls.n	8009d96 <vPortValidateInterruptPriority+0x2a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d74:	4a13      	ldr	r2, [pc, #76]	@ (8009dc4 <vPortValidateInterruptPriority+0x58>)
 8009d76:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d78:	4a13      	ldr	r2, [pc, #76]	@ (8009dc8 <vPortValidateInterruptPriority+0x5c>)
 8009d7a:	7812      	ldrb	r2, [r2, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d90a      	bls.n	8009d96 <vPortValidateInterruptPriority+0x2a>
 8009d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	e7fe      	b.n	8009d94 <vPortValidateInterruptPriority+0x28>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009dcc <vPortValidateInterruptPriority+0x60>)
 8009d9c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d90a      	bls.n	8009dc0 <vPortValidateInterruptPriority+0x54>
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	b672      	cpsid	i
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	b662      	cpsie	i
 8009dbe:	e7fe      	b.n	8009dbe <vPortValidateInterruptPriority+0x52>
    }
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	e000e3f0 	.word	0xe000e3f0
 8009dc8:	2000d150 	.word	0x2000d150
 8009dcc:	2000d14c 	.word	0x2000d14c

08009dd0 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009dd0:	680a      	ldr	r2, [r1, #0]
{
 8009dd2:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009dd4:	320c      	adds	r2, #12
{
 8009dd6:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009dd8:	f001 fa92 	bl	800b300 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009ddc:	b908      	cbnz	r0, 8009de2 <netconn_apimsg+0x12>
    return apimsg->err;
 8009dde:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8009de2:	bd10      	pop	{r4, pc}

08009de4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009de4:	b500      	push	{lr}
 8009de6:	b089      	sub	sp, #36	@ 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009de8:	b160      	cbz	r0, 8009e04 <netconn_close_shutdown+0x20>
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009dea:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8009dec:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009dee:	f88d 1008 	strb.w	r1, [sp, #8]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009df2:	4669      	mov	r1, sp
 8009df4:	4805      	ldr	r0, [pc, #20]	@ (8009e0c <netconn_close_shutdown+0x28>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009df6:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009dfa:	f7ff ffe9 	bl	8009dd0 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8009dfe:	b009      	add	sp, #36	@ 0x24
 8009e00:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009e04:	f06f 000f 	mvn.w	r0, #15
 8009e08:	e7f9      	b.n	8009dfe <netconn_close_shutdown+0x1a>
 8009e0a:	bf00      	nop
 8009e0c:	0800b085 	.word	0x0800b085

08009e10 <netconn_new_with_proto_and_callback>:
{
 8009e10:	b530      	push	{r4, r5, lr}
 8009e12:	460d      	mov	r5, r1
 8009e14:	b089      	sub	sp, #36	@ 0x24
  conn = netconn_alloc(t, callback);
 8009e16:	4611      	mov	r1, r2
 8009e18:	f000 fe94 	bl	800ab44 <netconn_alloc>
  if (conn != NULL) {
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d033      	beq.n	8009e8a <netconn_new_with_proto_and_callback+0x7a>
    API_MSG_VAR_REF(msg).conn = conn;
 8009e22:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009e24:	4669      	mov	r1, sp
 8009e26:	481b      	ldr	r0, [pc, #108]	@ (8009e94 <netconn_new_with_proto_and_callback+0x84>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009e28:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009e2c:	f7ff ffd0 	bl	8009dd0 <netconn_apimsg>
    if (err != ERR_OK) {
 8009e30:	b360      	cbz	r0, 8009e8c <netconn_new_with_proto_and_callback+0x7c>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	b12b      	cbz	r3, 8009e42 <netconn_new_with_proto_and_callback+0x32>
 8009e36:	4b18      	ldr	r3, [pc, #96]	@ (8009e98 <netconn_new_with_proto_and_callback+0x88>)
 8009e38:	22a3      	movs	r2, #163	@ 0xa3
 8009e3a:	4918      	ldr	r1, [pc, #96]	@ (8009e9c <netconn_new_with_proto_and_callback+0x8c>)
 8009e3c:	4818      	ldr	r0, [pc, #96]	@ (8009ea0 <netconn_new_with_proto_and_callback+0x90>)
 8009e3e:	f00b fea5 	bl	8015b8c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	b92b      	cbnz	r3, 8009e52 <netconn_new_with_proto_and_callback+0x42>
 8009e46:	4b14      	ldr	r3, [pc, #80]	@ (8009e98 <netconn_new_with_proto_and_callback+0x88>)
 8009e48:	22a4      	movs	r2, #164	@ 0xa4
 8009e4a:	4916      	ldr	r1, [pc, #88]	@ (8009ea4 <netconn_new_with_proto_and_callback+0x94>)
 8009e4c:	4814      	ldr	r0, [pc, #80]	@ (8009ea0 <netconn_new_with_proto_and_callback+0x90>)
 8009e4e:	f00b fe9d 	bl	8015b8c <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009e52:	6963      	ldr	r3, [r4, #20]
 8009e54:	b12b      	cbz	r3, 8009e62 <netconn_new_with_proto_and_callback+0x52>
 8009e56:	4b10      	ldr	r3, [pc, #64]	@ (8009e98 <netconn_new_with_proto_and_callback+0x88>)
 8009e58:	22a6      	movs	r2, #166	@ 0xa6
 8009e5a:	4913      	ldr	r1, [pc, #76]	@ (8009ea8 <netconn_new_with_proto_and_callback+0x98>)
 8009e5c:	4810      	ldr	r0, [pc, #64]	@ (8009ea0 <netconn_new_with_proto_and_callback+0x90>)
 8009e5e:	f00b fe95 	bl	8015b8c <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009e62:	68e3      	ldr	r3, [r4, #12]
 8009e64:	b92b      	cbnz	r3, 8009e72 <netconn_new_with_proto_and_callback+0x62>
 8009e66:	4b0c      	ldr	r3, [pc, #48]	@ (8009e98 <netconn_new_with_proto_and_callback+0x88>)
 8009e68:	22a9      	movs	r2, #169	@ 0xa9
 8009e6a:	4910      	ldr	r1, [pc, #64]	@ (8009eac <netconn_new_with_proto_and_callback+0x9c>)
 8009e6c:	480c      	ldr	r0, [pc, #48]	@ (8009ea0 <netconn_new_with_proto_and_callback+0x90>)
 8009e6e:	f00b fe8d 	bl	8015b8c <iprintf>
      sys_sem_free(&conn->op_completed);
 8009e72:	f104 000c 	add.w	r0, r4, #12
 8009e76:	f007 ff5d 	bl	8011d34 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8009e7a:	f104 0010 	add.w	r0, r4, #16
 8009e7e:	f008 f853 	bl	8011f28 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009e82:	4621      	mov	r1, r4
 8009e84:	2007      	movs	r0, #7
 8009e86:	f002 f9a7 	bl	800c1d8 <memp_free>
      return NULL;
 8009e8a:	2400      	movs	r4, #0
}
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	b009      	add	sp, #36	@ 0x24
 8009e90:	bd30      	pop	{r4, r5, pc}
 8009e92:	bf00      	nop
 8009e94:	0800aae5 	.word	0x0800aae5
 8009e98:	08016e1d 	.word	0x08016e1d
 8009e9c:	08016e3d 	.word	0x08016e3d
 8009ea0:	080169d3 	.word	0x080169d3
 8009ea4:	08016e5e 	.word	0x08016e5e
 8009ea8:	08016e73 	.word	0x08016e73
 8009eac:	08016e94 	.word	0x08016e94

08009eb0 <netconn_prepare_delete>:
{
 8009eb0:	b500      	push	{lr}
 8009eb2:	b089      	sub	sp, #36	@ 0x24
  if (conn == NULL) {
 8009eb4:	b138      	cbz	r0, 8009ec6 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009eb6:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8009eb8:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009eba:	4669      	mov	r1, sp
 8009ebc:	4803      	ldr	r0, [pc, #12]	@ (8009ecc <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009ebe:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009ec2:	f7ff ff85 	bl	8009dd0 <netconn_apimsg>
}
 8009ec6:	b009      	add	sp, #36	@ 0x24
 8009ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ecc:	0800ada1 	.word	0x0800ada1

08009ed0 <netconn_delete>:
{
 8009ed0:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	b140      	cbz	r0, 8009ee8 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8009ed6:	f7ff ffeb 	bl	8009eb0 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8009eda:	4604      	mov	r4, r0
 8009edc:	b910      	cbnz	r0, 8009ee4 <netconn_delete+0x14>
    netconn_free(conn);
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 fe72 	bl	800abc8 <netconn_free>
}
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8009ee8:	4604      	mov	r4, r0
 8009eea:	e7fb      	b.n	8009ee4 <netconn_delete+0x14>

08009eec <netconn_bind>:
{
 8009eec:	b500      	push	{lr}
 8009eee:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009ef0:	b170      	cbz	r0, 8009f10 <netconn_bind+0x24>
    addr = IP4_ADDR_ANY;
 8009ef2:	4b09      	ldr	r3, [pc, #36]	@ (8009f18 <netconn_bind+0x2c>)
  API_MSG_VAR_REF(msg).conn = conn;
 8009ef4:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8009ef6:	2900      	cmp	r1, #0
 8009ef8:	bf08      	it	eq
 8009efa:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009efc:	4807      	ldr	r0, [pc, #28]	@ (8009f1c <netconn_bind+0x30>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009efe:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009f02:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009f04:	4669      	mov	r1, sp
 8009f06:	f7ff ff63 	bl	8009dd0 <netconn_apimsg>
}
 8009f0a:	b009      	add	sp, #36	@ 0x24
 8009f0c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009f10:	f06f 000f 	mvn.w	r0, #15
 8009f14:	e7f9      	b.n	8009f0a <netconn_bind+0x1e>
 8009f16:	bf00      	nop
 8009f18:	0808f8f8 	.word	0x0808f8f8
 8009f1c:	0800aea9 	.word	0x0800aea9

08009f20 <netconn_listen_with_backlog>:
{
 8009f20:	b500      	push	{lr}
 8009f22:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009f24:	b138      	cbz	r0, 8009f36 <netconn_listen_with_backlog+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8009f26:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009f28:	4669      	mov	r1, sp
 8009f2a:	4804      	ldr	r0, [pc, #16]	@ (8009f3c <netconn_listen_with_backlog+0x1c>)
 8009f2c:	f7ff ff50 	bl	8009dd0 <netconn_apimsg>
}
 8009f30:	b009      	add	sp, #36	@ 0x24
 8009f32:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009f36:	f06f 000f 	mvn.w	r0, #15
 8009f3a:	e7f9      	b.n	8009f30 <netconn_listen_with_backlog+0x10>
 8009f3c:	0800aedd 	.word	0x0800aedd

08009f40 <netconn_write_vectors_partly>:
{
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	b088      	sub	sp, #32
 8009f46:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d047      	beq.n	8009fde <netconn_write_vectors_partly+0x9e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009f4e:	7804      	ldrb	r4, [r0, #0]
 8009f50:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 8009f54:	2c10      	cmp	r4, #16
 8009f56:	d145      	bne.n	8009fe4 <netconn_write_vectors_partly+0xa4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009f58:	7f05      	ldrb	r5, [r0, #28]
 8009f5a:	f003 0404 	and.w	r4, r3, #4
 8009f5e:	f005 0502 	and.w	r5, r5, #2
 8009f62:	4325      	orrs	r5, r4
 8009f64:	d003      	beq.n	8009f6e <netconn_write_vectors_partly+0x2e>
  if (dontblock && !bytes_written) {
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	d03b      	beq.n	8009fe4 <netconn_write_vectors_partly+0xa4>
 8009f6c:	2501      	movs	r5, #1
 8009f6e:	2600      	movs	r6, #0
    size += vectors[i].len;
 8009f70:	f101 0c04 	add.w	ip, r1, #4
 8009f74:	4637      	mov	r7, r6
 8009f76:	e004      	b.n	8009f82 <netconn_write_vectors_partly+0x42>
 8009f78:	f85c 4036 	ldr.w	r4, [ip, r6, lsl #3]
    if (size < vectors[i].len) {
 8009f7c:	19e7      	adds	r7, r4, r7
 8009f7e:	d231      	bcs.n	8009fe4 <netconn_write_vectors_partly+0xa4>
  for (i = 0; i < vectorcnt; i++) {
 8009f80:	3601      	adds	r6, #1
 8009f82:	42b2      	cmp	r2, r6
 8009f84:	dcf8      	bgt.n	8009f78 <netconn_write_vectors_partly+0x38>
  if (size == 0) {
 8009f86:	2f00      	cmp	r7, #0
 8009f88:	d025      	beq.n	8009fd6 <netconn_write_vectors_partly+0x96>
  } else if (size > SSIZE_MAX) {
 8009f8a:	da04      	bge.n	8009f96 <netconn_write_vectors_partly+0x56>
    if (!bytes_written) {
 8009f8c:	f1b8 0f00 	cmp.w	r8, #0
 8009f90:	d028      	beq.n	8009fe4 <netconn_write_vectors_partly+0xa4>
    size = (size_t)limited;
 8009f92:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009f96:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009f9a:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 8009f9c:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009f9e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009fa0:	4669      	mov	r1, sp
 8009fa2:	4812      	ldr	r0, [pc, #72]	@ (8009fec <netconn_write_vectors_partly+0xac>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009fa4:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009fa6:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009faa:	e9cd 7205 	strd	r7, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009fae:	f7ff ff0f 	bl	8009dd0 <netconn_apimsg>
  if (err == ERR_OK) {
 8009fb2:	b988      	cbnz	r0, 8009fd8 <netconn_write_vectors_partly+0x98>
    if (bytes_written != NULL) {
 8009fb4:	f1b8 0f00 	cmp.w	r8, #0
 8009fb8:	d002      	beq.n	8009fc0 <netconn_write_vectors_partly+0x80>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009fba:	9b06      	ldr	r3, [sp, #24]
 8009fbc:	f8c8 3000 	str.w	r3, [r8]
    if (!dontblock) {
 8009fc0:	b94d      	cbnz	r5, 8009fd6 <netconn_write_vectors_partly+0x96>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009fc2:	9b06      	ldr	r3, [sp, #24]
 8009fc4:	42bb      	cmp	r3, r7
 8009fc6:	d006      	beq.n	8009fd6 <netconn_write_vectors_partly+0x96>
 8009fc8:	4b09      	ldr	r3, [pc, #36]	@ (8009ff0 <netconn_write_vectors_partly+0xb0>)
 8009fca:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009fce:	4909      	ldr	r1, [pc, #36]	@ (8009ff4 <netconn_write_vectors_partly+0xb4>)
 8009fd0:	4809      	ldr	r0, [pc, #36]	@ (8009ff8 <netconn_write_vectors_partly+0xb8>)
 8009fd2:	f00b fddb 	bl	8015b8c <iprintf>
  return err;
 8009fd6:	2000      	movs	r0, #0
}
 8009fd8:	b008      	add	sp, #32
 8009fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009fde:	f06f 000f 	mvn.w	r0, #15
 8009fe2:	e7f9      	b.n	8009fd8 <netconn_write_vectors_partly+0x98>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009fe4:	f06f 0005 	mvn.w	r0, #5
 8009fe8:	e7f6      	b.n	8009fd8 <netconn_write_vectors_partly+0x98>
 8009fea:	bf00      	nop
 8009fec:	0800afb9 	.word	0x0800afb9
 8009ff0:	08016e1d 	.word	0x08016e1d
 8009ff4:	08016ead 	.word	0x08016ead
 8009ff8:	080169d3 	.word	0x080169d3

08009ffc <netconn_write_partly>:
{
 8009ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 8009ffe:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a002:	9a06      	ldr	r2, [sp, #24]
 800a004:	a902      	add	r1, sp, #8
 800a006:	9200      	str	r2, [sp, #0]
 800a008:	2201      	movs	r2, #1
 800a00a:	f7ff ff99 	bl	8009f40 <netconn_write_vectors_partly>
}
 800a00e:	b005      	add	sp, #20
 800a010:	f85d fb04 	ldr.w	pc, [sp], #4

0800a014 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a014:	2103      	movs	r1, #3
 800a016:	f7ff bee5 	b.w	8009de4 <netconn_close_shutdown>

0800a01a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a01a:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a01c:	4604      	mov	r4, r0
 800a01e:	b148      	cbz	r0, 800a034 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800a020:	f007 fd6d 	bl	8011afe <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 800a024:	2300      	movs	r3, #0
  err = conn->pending_err;
 800a026:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800a02a:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a02c:	f007 fd6c 	bl	8011b08 <sys_arch_unprotect>
  return err;
}
 800a030:	4628      	mov	r0, r5
 800a032:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800a034:	4605      	mov	r5, r0
 800a036:	e7fb      	b.n	800a030 <netconn_err+0x16>

0800a038 <netconn_accept>:
{
 800a038:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a03a:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a03c:	460e      	mov	r6, r1
 800a03e:	b921      	cbnz	r1, 800a04a <netconn_accept+0x12>
 800a040:	f06f 040f 	mvn.w	r4, #15
}
 800a044:	4620      	mov	r0, r4
 800a046:	b002      	add	sp, #8
 800a048:	bd70      	pop	{r4, r5, r6, pc}
  *new_conn = NULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0f6      	beq.n	800a040 <netconn_accept+0x8>
  err = netconn_err(conn);
 800a052:	f7ff ffe2 	bl	800a01a <netconn_err>
 800a056:	4604      	mov	r4, r0
 800a058:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d1f1      	bne.n	800a044 <netconn_accept+0xc>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a060:	696b      	ldr	r3, [r5, #20]
 800a062:	b913      	cbnz	r3, 800a06a <netconn_accept+0x32>
    return ERR_CLSD;
 800a064:	f06f 040e 	mvn.w	r4, #14
 800a068:	e7ec      	b.n	800a044 <netconn_accept+0xc>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a06a:	7f2b      	ldrb	r3, [r5, #28]
 800a06c:	07da      	lsls	r2, r3, #31
 800a06e:	d4f9      	bmi.n	800a064 <netconn_accept+0x2c>
  if (netconn_is_nonblocking(conn)) {
 800a070:	f013 0f02 	tst.w	r3, #2
 800a074:	f105 0014 	add.w	r0, r5, #20
 800a078:	d007      	beq.n	800a08a <netconn_accept+0x52>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_MBOX_EMPTY) {
 800a07a:	a901      	add	r1, sp, #4
 800a07c:	f007 ff1c 	bl	8011eb8 <sys_arch_mbox_tryfetch>
 800a080:	3001      	adds	r0, #1
 800a082:	d106      	bne.n	800a092 <netconn_accept+0x5a>
      return ERR_WOULDBLOCK;
 800a084:	f06f 0406 	mvn.w	r4, #6
 800a088:	e7dc      	b.n	800a044 <netconn_accept+0xc>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a08a:	4622      	mov	r2, r4
 800a08c:	a901      	add	r1, sp, #4
 800a08e:	f007 fecf 	bl	8011e30 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a092:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a094:	b11b      	cbz	r3, 800a09e <netconn_accept+0x66>
 800a096:	2200      	movs	r2, #0
 800a098:	2101      	movs	r1, #1
 800a09a:	4628      	mov	r0, r5
 800a09c:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a09e:	f10d 0103 	add.w	r1, sp, #3
 800a0a2:	9801      	ldr	r0, [sp, #4]
 800a0a4:	f000 fcf4 	bl	800aa90 <lwip_netconn_is_err_msg>
 800a0a8:	b110      	cbz	r0, 800a0b0 <netconn_accept+0x78>
    return err;
 800a0aa:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800a0ae:	e7c9      	b.n	800a044 <netconn_accept+0xc>
  if (accept_ptr == NULL) {
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0d6      	beq.n	800a064 <netconn_accept+0x2c>
  *new_conn = newconn;
 800a0b6:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 800a0b8:	e7c4      	b.n	800a044 <netconn_accept+0xc>
	...

0800a0bc <netconn_recv_data>:
  void *buf = NULL;
 800a0bc:	2300      	movs	r3, #0
{
 800a0be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c0:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a0c2:	460d      	mov	r5, r1
  void *buf = NULL;
 800a0c4:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a0c6:	b919      	cbnz	r1, 800a0d0 <netconn_recv_data+0x14>
 800a0c8:	f06f 000f 	mvn.w	r0, #15
}
 800a0cc:	b003      	add	sp, #12
 800a0ce:	bd30      	pop	{r4, r5, pc}
  *new_buf = NULL;
 800a0d0:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d0f8      	beq.n	800a0c8 <netconn_recv_data+0xc>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a0d6:	6903      	ldr	r3, [r0, #16]
 800a0d8:	b933      	cbnz	r3, 800a0e8 <netconn_recv_data+0x2c>
    err_t err = netconn_err(conn);
 800a0da:	f7ff ff9e 	bl	800a01a <netconn_err>
    if (err != ERR_OK) {
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d1f4      	bne.n	800a0cc <netconn_recv_data+0x10>
    return ERR_CONN;
 800a0e2:	f06f 000a 	mvn.w	r0, #10
 800a0e6:	e7f1      	b.n	800a0cc <netconn_recv_data+0x10>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a0e8:	7f03      	ldrb	r3, [r0, #28]
 800a0ea:	f002 0204 	and.w	r2, r2, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_MBOX_EMPTY) {
 800a0ee:	a901      	add	r1, sp, #4
 800a0f0:	3010      	adds	r0, #16
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	d102      	bne.n	800a100 <netconn_recv_data+0x44>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a0fa:	f994 2008 	ldrsb.w	r2, [r4, #8]
 800a0fe:	b172      	cbz	r2, 800a11e <netconn_recv_data+0x62>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_MBOX_EMPTY) {
 800a100:	f007 feda 	bl	8011eb8 <sys_arch_mbox_tryfetch>
 800a104:	3001      	adds	r0, #1
 800a106:	d10c      	bne.n	800a122 <netconn_recv_data+0x66>
      err = netconn_err(conn);
 800a108:	4620      	mov	r0, r4
 800a10a:	f7ff ff86 	bl	800a01a <netconn_err>
      if (err != ERR_OK) {
 800a10e:	2800      	cmp	r0, #0
 800a110:	d1dc      	bne.n	800a0cc <netconn_recv_data+0x10>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a112:	7f23      	ldrb	r3, [r4, #28]
 800a114:	07db      	lsls	r3, r3, #31
 800a116:	d4e4      	bmi.n	800a0e2 <netconn_recv_data+0x26>
      return ERR_WOULDBLOCK;
 800a118:	f06f 0006 	mvn.w	r0, #6
 800a11c:	e7d6      	b.n	800a0cc <netconn_recv_data+0x10>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a11e:	f007 fe87 	bl	8011e30 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a122:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a124:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a12a:	2b10      	cmp	r3, #16
 800a12c:	d116      	bne.n	800a15c <netconn_recv_data+0xa0>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a12e:	f10d 0103 	add.w	r1, sp, #3
 800a132:	f000 fcad 	bl	800aa90 <lwip_netconn_is_err_msg>
 800a136:	b130      	cbz	r0, 800a146 <netconn_recv_data+0x8a>
      if (err == ERR_CLSD) {
 800a138:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800a13c:	f110 0f0f 	cmn.w	r0, #15
 800a140:	bf08      	it	eq
 800a142:	2000      	moveq	r0, #0
 800a144:	e7c2      	b.n	800a0cc <netconn_recv_data+0x10>
    len = ((struct pbuf *)buf)->tot_len;
 800a146:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 800a148:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a14a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a14c:	b113      	cbz	r3, 800a154 <netconn_recv_data+0x98>
 800a14e:	2101      	movs	r1, #1
 800a150:	4620      	mov	r0, r4
 800a152:	4798      	blx	r3
  *new_buf = buf;
 800a154:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 800a156:	2000      	movs	r0, #0
  *new_buf = buf;
 800a158:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800a15a:	e7b7      	b.n	800a0cc <netconn_recv_data+0x10>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a15c:	b930      	cbnz	r0, 800a16c <netconn_recv_data+0xb0>
 800a15e:	4b05      	ldr	r3, [pc, #20]	@ (800a174 <netconn_recv_data+0xb8>)
 800a160:	f240 2291 	movw	r2, #657	@ 0x291
 800a164:	4904      	ldr	r1, [pc, #16]	@ (800a178 <netconn_recv_data+0xbc>)
 800a166:	4805      	ldr	r0, [pc, #20]	@ (800a17c <netconn_recv_data+0xc0>)
 800a168:	f00b fd10 	bl	8015b8c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	e7ea      	b.n	800a148 <netconn_recv_data+0x8c>
 800a172:	bf00      	nop
 800a174:	08016e1d 	.word	0x08016e1d
 800a178:	08016ed0 	.word	0x08016ed0
 800a17c:	080169d3 	.word	0x080169d3

0800a180 <netconn_recv_data_tcp>:
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a180:	6903      	ldr	r3, [r0, #16]
{
 800a182:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a184:	4604      	mov	r4, r0
 800a186:	b089      	sub	sp, #36	@ 0x24
 800a188:	460f      	mov	r7, r1
 800a18a:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d040      	beq.n	800a212 <netconn_recv_data_tcp+0x92>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a190:	f990 501c 	ldrsb.w	r5, [r0, #28]
 800a194:	7f03      	ldrb	r3, [r0, #28]
 800a196:	2d00      	cmp	r5, #0
 800a198:	da12      	bge.n	800a1c0 <netconn_recv_data_tcp+0x40>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a19a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a19e:	7703      	strb	r3, [r0, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a1a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1a2:	b11b      	cbz	r3, 800a1ac <netconn_recv_data_tcp+0x2c>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a1ac:	6863      	ldr	r3, [r4, #4]
 800a1ae:	bb4b      	cbnz	r3, 800a204 <netconn_recv_data_tcp+0x84>
        err = netconn_err(conn);
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7ff ff32 	bl	800a01a <netconn_err>
        return ERR_RST;
 800a1b6:	1e05      	subs	r5, r0, #0
 800a1b8:	bf08      	it	eq
 800a1ba:	f06f 050d 	mvneq.w	r5, #13
 800a1be:	e01c      	b.n	800a1fa <netconn_recv_data_tcp+0x7a>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a1c0:	f7ff ff7c 	bl	800a0bc <netconn_recv_data>
  if (err != ERR_OK) {
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	b9c0      	cbnz	r0, 800a1fa <netconn_recv_data_tcp+0x7a>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a1c8:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 800a1ca:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a1cc:	d40c      	bmi.n	800a1e8 <netconn_recv_data_tcp+0x68>
    u16_t len = buf ? buf->tot_len : 1;
 800a1ce:	b1bf      	cbz	r7, 800a200 <netconn_recv_data_tcp+0x80>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a1d0:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a1d2:	7823      	ldrb	r3, [r4, #0]
 800a1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d105      	bne.n	800a1e8 <netconn_recv_data_tcp+0x68>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a1dc:	4669      	mov	r1, sp
 800a1de:	480e      	ldr	r0, [pc, #56]	@ (800a218 <netconn_recv_data_tcp+0x98>)
  msg->conn = conn;
 800a1e0:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 800a1e2:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a1e4:	f7ff fdf4 	bl	8009dd0 <netconn_apimsg>
  if (buf == NULL) {
 800a1e8:	b93f      	cbnz	r7, 800a1fa <netconn_recv_data_tcp+0x7a>
    if (apiflags & NETCONN_NOFIN) {
 800a1ea:	06f3      	lsls	r3, r6, #27
 800a1ec:	d5d8      	bpl.n	800a1a0 <netconn_recv_data_tcp+0x20>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a1ee:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800a1f0:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a1f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1f8:	7723      	strb	r3, [r4, #28]
}
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	b009      	add	sp, #36	@ 0x24
 800a1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a200:	2201      	movs	r2, #1
 800a202:	e7e6      	b.n	800a1d2 <netconn_recv_data_tcp+0x52>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a204:	2101      	movs	r1, #1
 800a206:	4620      	mov	r0, r4
      return ERR_CLSD;
 800a208:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a20c:	f7ff fdea 	bl	8009de4 <netconn_close_shutdown>
      return ERR_CLSD;
 800a210:	e7f3      	b.n	800a1fa <netconn_recv_data_tcp+0x7a>
    return ERR_CONN;
 800a212:	f06f 050a 	mvn.w	r5, #10
 800a216:	e7f0      	b.n	800a1fa <netconn_recv_data_tcp+0x7a>
 800a218:	0800af81 	.word	0x0800af81

0800a21c <netconn_recv>:
{
 800a21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21e:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a220:	460e      	mov	r6, r1
 800a222:	b921      	cbnz	r1, 800a22e <netconn_recv+0x12>
 800a224:	f06f 050f 	mvn.w	r5, #15
}
 800a228:	4628      	mov	r0, r5
 800a22a:	b003      	add	sp, #12
 800a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 800a22e:	2700      	movs	r7, #0
 800a230:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a232:	2800      	cmp	r0, #0
 800a234:	d0f6      	beq.n	800a224 <netconn_recv+0x8>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a236:	7803      	ldrb	r3, [r0, #0]
 800a238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a23c:	2b10      	cmp	r3, #16
 800a23e:	d124      	bne.n	800a28a <netconn_recv+0x6e>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a240:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 800a242:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a244:	f001 ffaa 	bl	800c19c <memp_malloc>
    if (buf == NULL) {
 800a248:	4604      	mov	r4, r0
 800a24a:	b1d8      	cbz	r0, 800a284 <netconn_recv+0x68>
    err = netconn_recv_data_tcp(conn, &p, 0);
 800a24c:	4628      	mov	r0, r5
 800a24e:	463a      	mov	r2, r7
 800a250:	a901      	add	r1, sp, #4
 800a252:	f7ff ff95 	bl	800a180 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800a256:	4605      	mov	r5, r0
 800a258:	b120      	cbz	r0, 800a264 <netconn_recv+0x48>
      memp_free(MEMP_NETBUF, buf);
 800a25a:	4621      	mov	r1, r4
 800a25c:	2006      	movs	r0, #6
 800a25e:	f001 ffbb 	bl	800c1d8 <memp_free>
      return err;
 800a262:	e7e1      	b.n	800a228 <netconn_recv+0xc>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a264:	9f01      	ldr	r7, [sp, #4]
 800a266:	b937      	cbnz	r7, 800a276 <netconn_recv+0x5a>
 800a268:	4b0b      	ldr	r3, [pc, #44]	@ (800a298 <netconn_recv+0x7c>)
 800a26a:	f240 3279 	movw	r2, #889	@ 0x379
 800a26e:	490b      	ldr	r1, [pc, #44]	@ (800a29c <netconn_recv+0x80>)
 800a270:	480b      	ldr	r0, [pc, #44]	@ (800a2a0 <netconn_recv+0x84>)
 800a272:	f00b fc8b 	bl	8015b8c <iprintf>
    buf->port = 0;
 800a276:	2300      	movs	r3, #0
    buf->ptr = p;
 800a278:	e9c4 7700 	strd	r7, r7, [r4]
    buf->port = 0;
 800a27c:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 800a27e:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 800a280:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 800a282:	e7d1      	b.n	800a228 <netconn_recv+0xc>
      return ERR_MEM;
 800a284:	f04f 35ff 	mov.w	r5, #4294967295
 800a288:	e7ce      	b.n	800a228 <netconn_recv+0xc>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a28a:	463a      	mov	r2, r7
}
 800a28c:	b003      	add	sp, #12
 800a28e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a292:	f7ff bf13 	b.w	800a0bc <netconn_recv_data>
 800a296:	bf00      	nop
 800a298:	08016e1d 	.word	0x08016e1d
 800a29c:	08017814 	.word	0x08017814
 800a2a0:	080169d3 	.word	0x080169d3

0800a2a4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	4617      	mov	r7, r2
 800a2ac:	461e      	mov	r6, r3
 800a2ae:	f8bd 8018 	ldrh.w	r8, [sp, #24]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	b929      	cbnz	r1, 800a2c2 <recv_udp+0x1e>
 800a2b6:	4b20      	ldr	r3, [pc, #128]	@ (800a338 <recv_udp+0x94>)
 800a2b8:	22e6      	movs	r2, #230	@ 0xe6
 800a2ba:	4920      	ldr	r1, [pc, #128]	@ (800a33c <recv_udp+0x98>)
 800a2bc:	4820      	ldr	r0, [pc, #128]	@ (800a340 <recv_udp+0x9c>)
 800a2be:	f00b fc65 	bl	8015b8c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a2c2:	b1ed      	cbz	r5, 800a300 <recv_udp+0x5c>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a2c4:	686b      	ldr	r3, [r5, #4]
 800a2c6:	42a3      	cmp	r3, r4
 800a2c8:	d125      	bne.n	800a316 <recv_udp+0x72>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a2ca:	692b      	ldr	r3, [r5, #16]
 800a2cc:	b1f3      	cbz	r3, 800a30c <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a2ce:	2006      	movs	r0, #6
 800a2d0:	f001 ff64 	bl	800c19c <memp_malloc>
  if (buf == NULL) {
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	b1c8      	cbz	r0, 800a30c <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 800a2d8:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 800a2dc:	b106      	cbz	r6, 800a2e0 <recv_udp+0x3c>
 800a2de:	6836      	ldr	r6, [r6, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  err = sys_mbox_trypost(&conn->recvmbox, buf);
 800a2e0:	4621      	mov	r1, r4
    ip_addr_set(&buf->addr, addr);
 800a2e2:	60a6      	str	r6, [r4, #8]
  err = sys_mbox_trypost(&conn->recvmbox, buf);
 800a2e4:	f105 0010 	add.w	r0, r5, #16
    buf->port = port;
 800a2e8:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 800a2ec:	893e      	ldrh	r6, [r7, #8]
  err = sys_mbox_trypost(&conn->recvmbox, buf);
 800a2ee:	f007 fd6b 	bl	8011dc8 <sys_mbox_trypost>
  if (err != ERR_OK) {
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	b1b0      	cbz	r0, 800a324 <recv_udp+0x80>
    netbuf_delete(buf);
 800a2f6:	4620      	mov	r0, r4
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 800a2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    netbuf_delete(buf);
 800a2fc:	f000 bf20 	b.w	800b140 <netbuf_delete>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a300:	4b0d      	ldr	r3, [pc, #52]	@ (800a338 <recv_udp+0x94>)
 800a302:	22e7      	movs	r2, #231	@ 0xe7
 800a304:	490f      	ldr	r1, [pc, #60]	@ (800a344 <recv_udp+0xa0>)
 800a306:	480e      	ldr	r0, [pc, #56]	@ (800a340 <recv_udp+0x9c>)
 800a308:	f00b fc40 	bl	8015b8c <iprintf>
    pbuf_free(p);
 800a30c:	4638      	mov	r0, r7
}
 800a30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    pbuf_free(p);
 800a312:	f002 b95d 	b.w	800c5d0 <pbuf_free>
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a316:	4b08      	ldr	r3, [pc, #32]	@ (800a338 <recv_udp+0x94>)
 800a318:	22ef      	movs	r2, #239	@ 0xef
 800a31a:	490b      	ldr	r1, [pc, #44]	@ (800a348 <recv_udp+0xa4>)
 800a31c:	4808      	ldr	r0, [pc, #32]	@ (800a340 <recv_udp+0x9c>)
 800a31e:	f00b fc35 	bl	8015b8c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a322:	e7d2      	b.n	800a2ca <recv_udp+0x26>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a324:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a326:	b123      	cbz	r3, 800a332 <recv_udp+0x8e>
 800a328:	4632      	mov	r2, r6
 800a32a:	4628      	mov	r0, r5
}
 800a32c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a330:	4718      	bx	r3
}
 800a332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a336:	bf00      	nop
 800a338:	08016edc 	.word	0x08016edc
 800a33c:	08016efc 	.word	0x08016efc
 800a340:	080169d3 	.word	0x080169d3
 800a344:	08016f1e 	.word	0x08016f1e
 800a348:	08016f3d 	.word	0x08016f3d

0800a34c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a34c:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a34e:	6844      	ldr	r4, [r0, #4]
{
 800a350:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 800a352:	4620      	mov	r0, r4
 800a354:	f002 fd80 	bl	800ce58 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a358:	4620      	mov	r0, r4
 800a35a:	4909      	ldr	r1, [pc, #36]	@ (800a380 <setup_tcp+0x34>)
 800a35c:	f002 fd80 	bl	800ce60 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a360:	4620      	mov	r0, r4
 800a362:	4908      	ldr	r1, [pc, #32]	@ (800a384 <setup_tcp+0x38>)
 800a364:	f002 fd94 	bl	800ce90 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a368:	4620      	mov	r0, r4
 800a36a:	4907      	ldr	r1, [pc, #28]	@ (800a388 <setup_tcp+0x3c>)
 800a36c:	2202      	movs	r2, #2
 800a36e:	f002 fdc3 	bl	800cef8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a372:	4620      	mov	r0, r4
 800a374:	4905      	ldr	r1, [pc, #20]	@ (800a38c <setup_tcp+0x40>)
}
 800a376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 800a37a:	f002 bd9f 	b.w	800cebc <tcp_err>
 800a37e:	bf00      	nop
 800a380:	0800a8ad 	.word	0x0800a8ad
 800a384:	0800a841 	.word	0x0800a841
 800a388:	0800a7c5 	.word	0x0800a7c5
 800a38c:	0800a969 	.word	0x0800a969

0800a390 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	4689      	mov	r9, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a396:	4604      	mov	r4, r0
 800a398:	b930      	cbnz	r0, 800a3a8 <lwip_netconn_do_writemore+0x18>
 800a39a:	4b88      	ldr	r3, [pc, #544]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a39c:	f240 6277 	movw	r2, #1655	@ 0x677
 800a3a0:	4987      	ldr	r1, [pc, #540]	@ (800a5c0 <lwip_netconn_do_writemore+0x230>)
 800a3a2:	4888      	ldr	r0, [pc, #544]	@ (800a5c4 <lwip_netconn_do_writemore+0x234>)
 800a3a4:	f00b fbf2 	bl	8015b8c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a3a8:	7863      	ldrb	r3, [r4, #1]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d006      	beq.n	800a3bc <lwip_netconn_do_writemore+0x2c>
 800a3ae:	4b83      	ldr	r3, [pc, #524]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a3b0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800a3b4:	4984      	ldr	r1, [pc, #528]	@ (800a5c8 <lwip_netconn_do_writemore+0x238>)
 800a3b6:	4883      	ldr	r0, [pc, #524]	@ (800a5c4 <lwip_netconn_do_writemore+0x234>)
 800a3b8:	f00b fbe8 	bl	8015b8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a3bc:	6a23      	ldr	r3, [r4, #32]
 800a3be:	b933      	cbnz	r3, 800a3ce <lwip_netconn_do_writemore+0x3e>
 800a3c0:	4b7e      	ldr	r3, [pc, #504]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a3c2:	f240 6279 	movw	r2, #1657	@ 0x679
 800a3c6:	4981      	ldr	r1, [pc, #516]	@ (800a5cc <lwip_netconn_do_writemore+0x23c>)
 800a3c8:	487e      	ldr	r0, [pc, #504]	@ (800a5c4 <lwip_netconn_do_writemore+0x234>)
 800a3ca:	f00b fbdf 	bl	8015b8c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a3ce:	6863      	ldr	r3, [r4, #4]
 800a3d0:	b933      	cbnz	r3, 800a3e0 <lwip_netconn_do_writemore+0x50>
 800a3d2:	4b7a      	ldr	r3, [pc, #488]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a3d4:	f240 627a 	movw	r2, #1658	@ 0x67a
 800a3d8:	497d      	ldr	r1, [pc, #500]	@ (800a5d0 <lwip_netconn_do_writemore+0x240>)
 800a3da:	487a      	ldr	r0, [pc, #488]	@ (800a5c4 <lwip_netconn_do_writemore+0x234>)
 800a3dc:	f00b fbd6 	bl	8015b8c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a3e0:	6a23      	ldr	r3, [r4, #32]
 800a3e2:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d306      	bcc.n	800a3f8 <lwip_netconn_do_writemore+0x68>
 800a3ea:	4b74      	ldr	r3, [pc, #464]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a3ec:	f240 627b 	movw	r2, #1659	@ 0x67b
 800a3f0:	4978      	ldr	r1, [pc, #480]	@ (800a5d4 <lwip_netconn_do_writemore+0x244>)
 800a3f2:	4874      	ldr	r0, [pc, #464]	@ (800a5c4 <lwip_netconn_do_writemore+0x234>)
 800a3f4:	f00b fbca 	bl	8015b8c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a3f8:	6a23      	ldr	r3, [r4, #32]
 800a3fa:	899b      	ldrh	r3, [r3, #12]
 800a3fc:	b933      	cbnz	r3, 800a40c <lwip_netconn_do_writemore+0x7c>
 800a3fe:	4b6f      	ldr	r3, [pc, #444]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a400:	f240 627d 	movw	r2, #1661	@ 0x67d
 800a404:	4974      	ldr	r1, [pc, #464]	@ (800a5d8 <lwip_netconn_do_writemore+0x248>)
 800a406:	486f      	ldr	r0, [pc, #444]	@ (800a5c4 <lwip_netconn_do_writemore+0x234>)
 800a408:	f00b fbc0 	bl	8015b8c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a40c:	6a23      	ldr	r3, [r4, #32]
 800a40e:	7f26      	ldrb	r6, [r4, #28]
 800a410:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a412:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a416:	f8df b1ac 	ldr.w	fp, [pc, #428]	@ 800a5c4 <lwip_netconn_do_writemore+0x234>
 800a41a:	f007 0304 	and.w	r3, r7, #4
 800a41e:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a420:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
 800a422:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a424:	688a      	ldr	r2, [r1, #8]
 800a426:	690b      	ldr	r3, [r1, #16]
 800a428:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 800a42a:	f8b5 5064 	ldrh.w	r5, [r5, #100]	@ 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a42e:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a432:	6850      	ldr	r0, [r2, #4]
 800a434:	eba0 0803 	sub.w	r8, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 800a438:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
        len = 0xffff;
 800a43c:	bf2a      	itet	cs
 800a43e:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
        len = (u16_t)diff;
 800a442:	fa1f f288 	uxthcc.w	r2, r8
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a446:	f047 0702 	orrcs.w	r7, r7, #2
      if (available < len) {
 800a44a:	42aa      	cmp	r2, r5
 800a44c:	d969      	bls.n	800a522 <lwip_netconn_do_writemore+0x192>
        if (dontblock) {
 800a44e:	2e00      	cmp	r6, #0
 800a450:	d039      	beq.n	800a4c6 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 800a452:	2d00      	cmp	r5, #0
 800a454:	d139      	bne.n	800a4ca <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a456:	698b      	ldr	r3, [r1, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bf14      	ite	ne
 800a45c:	f04f 0a00 	movne.w	sl, #0
 800a460:	f06f 0a06 	mvneq.w	sl, #6
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a464:	6a23      	ldr	r3, [r4, #32]
 800a466:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d277      	bcs.n	800a55e <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a46e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a470:	b11b      	cbz	r3, 800a47a <lwip_netconn_do_writemore+0xea>
 800a472:	2200      	movs	r2, #0
 800a474:	2103      	movs	r1, #3
 800a476:	4620      	mov	r0, r4
 800a478:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a47a:	7f23      	ldrb	r3, [r4, #28]
 800a47c:	f043 0310 	orr.w	r3, r3, #16
 800a480:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800a482:	f1ba 0f00 	cmp.w	sl, #0
 800a486:	d17f      	bne.n	800a588 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a488:	6a23      	ldr	r3, [r4, #32]
 800a48a:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d078      	beq.n	800a584 <lwip_netconn_do_writemore+0x1f4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a492:	3e00      	subs	r6, #0
 800a494:	bf18      	it	ne
 800a496:	2601      	movne	r6, #1
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a498:	6860      	ldr	r0, [r4, #4]
 800a49a:	f005 fb83 	bl	800fba4 <tcp_output>
      if (out_err == ERR_RTE) {
 800a49e:	3004      	adds	r0, #4
 800a4a0:	f040 8088 	bne.w	800a5b4 <lwip_netconn_do_writemore+0x224>
      err_t out_err = tcp_output(conn->pcb.tcp);
      if (out_err == ERR_RTE) {
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a4a4:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4a8:	6a23      	ldr	r3, [r4, #32]
 800a4aa:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800a4ac:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a4b4:	7063      	strb	r3, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a4b6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ba:	d002      	beq.n	800a4c2 <lwip_netconn_do_writemore+0x132>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a4bc:	300c      	adds	r0, #12
 800a4be:	f007 fbcd 	bl	8011c5c <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e06b      	b.n	800a59e <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a4c6:	f047 0702 	orr.w	r7, r7, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a4ca:	442b      	add	r3, r5
 800a4cc:	4298      	cmp	r0, r3
 800a4ce:	d206      	bcs.n	800a4de <lwip_netconn_do_writemore+0x14e>
 800a4d0:	4b3a      	ldr	r3, [pc, #232]	@ (800a5bc <lwip_netconn_do_writemore+0x22c>)
 800a4d2:	f240 62a7 	movw	r2, #1703	@ 0x6a7
 800a4d6:	4941      	ldr	r1, [pc, #260]	@ (800a5dc <lwip_netconn_do_writemore+0x24c>)
 800a4d8:	4658      	mov	r0, fp
 800a4da:	f00b fb57 	bl	8015b8c <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a4de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4e2:	429d      	cmp	r5, r3
 800a4e4:	d102      	bne.n	800a4ec <lwip_netconn_do_writemore+0x15c>
 800a4e6:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 800a4ea:	d207      	bcs.n	800a4fc <lwip_netconn_do_writemore+0x16c>
 800a4ec:	fa1f f888 	uxth.w	r8, r8
 800a4f0:	45a8      	cmp	r8, r5
 800a4f2:	d118      	bne.n	800a526 <lwip_netconn_do_writemore+0x196>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a4f4:	6a23      	ldr	r3, [r4, #32]
 800a4f6:	899b      	ldrh	r3, [r3, #12]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d914      	bls.n	800a526 <lwip_netconn_do_writemore+0x196>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a4fc:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 800a500:	f04f 0801 	mov.w	r8, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a504:	4651      	mov	r1, sl
 800a506:	463b      	mov	r3, r7
 800a508:	462a      	mov	r2, r5
 800a50a:	6860      	ldr	r0, [r4, #4]
 800a50c:	f004 fe12 	bl	800f134 <tcp_write>
      if (err == ERR_OK) {
 800a510:	4682      	mov	sl, r0
 800a512:	b158      	cbz	r0, 800a52c <lwip_netconn_do_writemore+0x19c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d8c5      	bhi.n	800a4a8 <lwip_netconn_do_writemore+0x118>
err_mem:
 800a51c:	f04f 3aff 	mov.w	sl, #4294967295
 800a520:	e01b      	b.n	800a55a <lwip_netconn_do_writemore+0x1ca>
 800a522:	4615      	mov	r5, r2
 800a524:	e7d1      	b.n	800a4ca <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 800a526:	f04f 0800 	mov.w	r8, #0
 800a52a:	e7eb      	b.n	800a504 <lwip_netconn_do_writemore+0x174>
        conn->current_msg->msg.w.offset += len;
 800a52c:	6a23      	ldr	r3, [r4, #32]
 800a52e:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a530:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 800a532:	442a      	add	r2, r5
 800a534:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a536:	691a      	ldr	r2, [r3, #16]
 800a538:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a53a:	684a      	ldr	r2, [r1, #4]
 800a53c:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 800a53e:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a540:	d107      	bne.n	800a552 <lwip_netconn_do_writemore+0x1c2>
          conn->current_msg->msg.w.vector_cnt--;
 800a542:	899a      	ldrh	r2, [r3, #12]
 800a544:	3a01      	subs	r2, #1
 800a546:	b292      	uxth	r2, r2
 800a548:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a54a:	b112      	cbz	r2, 800a552 <lwip_netconn_do_writemore+0x1c2>
            conn->current_msg->msg.w.vector++;
 800a54c:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 800a54e:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 800a550:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800a552:	f1b8 0f00 	cmp.w	r8, #0
 800a556:	f47f af63 	bne.w	800a420 <lwip_netconn_do_writemore+0x90>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d182      	bne.n	800a464 <lwip_netconn_do_writemore+0xd4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a55e:	6863      	ldr	r3, [r4, #4]
 800a560:	f640 3269 	movw	r2, #2921	@ 0xb69
 800a564:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800a568:	4291      	cmp	r1, r2
 800a56a:	d903      	bls.n	800a574 <lwip_netconn_do_writemore+0x1e4>
 800a56c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a570:	2b07      	cmp	r3, #7
 800a572:	d986      	bls.n	800a482 <lwip_netconn_do_writemore+0xf2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a574:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a576:	2b00      	cmp	r3, #0
 800a578:	d083      	beq.n	800a482 <lwip_netconn_do_writemore+0xf2>
 800a57a:	2200      	movs	r2, #0
 800a57c:	2103      	movs	r1, #3
 800a57e:	4620      	mov	r0, r4
 800a580:	4798      	blx	r3
 800a582:	e77e      	b.n	800a482 <lwip_netconn_do_writemore+0xf2>
 800a584:	2601      	movs	r6, #1
 800a586:	e787      	b.n	800a498 <lwip_netconn_do_writemore+0x108>
    } else if (err == ERR_MEM) {
 800a588:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a58c:	d10f      	bne.n	800a5ae <lwip_netconn_do_writemore+0x21e>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a58e:	6860      	ldr	r0, [r4, #4]
 800a590:	f005 fb08 	bl	800fba4 <tcp_output>
      if (out_err == ERR_RTE) {
 800a594:	3004      	adds	r0, #4
 800a596:	d085      	beq.n	800a4a4 <lwip_netconn_do_writemore+0x114>
      } else if (dontblock) {
 800a598:	b91e      	cbnz	r6, 800a5a2 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a59e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a5a2:	6a23      	ldr	r3, [r4, #32]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	b113      	cbz	r3, 800a5ae <lwip_netconn_do_writemore+0x21e>
 800a5a8:	f04f 0a00 	mov.w	sl, #0
 800a5ac:	e77c      	b.n	800a4a8 <lwip_netconn_do_writemore+0x118>
 800a5ae:	f06f 0a06 	mvn.w	sl, #6
 800a5b2:	e779      	b.n	800a4a8 <lwip_netconn_do_writemore+0x118>
  if (write_finished) {
 800a5b4:	2e00      	cmp	r6, #0
 800a5b6:	d1f7      	bne.n	800a5a8 <lwip_netconn_do_writemore+0x218>
 800a5b8:	e7ef      	b.n	800a59a <lwip_netconn_do_writemore+0x20a>
 800a5ba:	bf00      	nop
 800a5bc:	08016edc 	.word	0x08016edc
 800a5c0:	0801743b 	.word	0x0801743b
 800a5c4:	080169d3 	.word	0x080169d3
 800a5c8:	08016f5b 	.word	0x08016f5b
 800a5cc:	08016f78 	.word	0x08016f78
 800a5d0:	08016f92 	.word	0x08016f92
 800a5d4:	08016fa8 	.word	0x08016fa8
 800a5d8:	08016fe7 	.word	0x08016fe7
 800a5dc:	0801700f 	.word	0x0801700f

0800a5e0 <lwip_netconn_do_close_internal>:
{
 800a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	b930      	cbnz	r0, 800a5f8 <lwip_netconn_do_close_internal+0x18>
 800a5ea:	4b6b      	ldr	r3, [pc, #428]	@ (800a798 <lwip_netconn_do_close_internal+0x1b8>)
 800a5ec:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a5f0:	496a      	ldr	r1, [pc, #424]	@ (800a79c <lwip_netconn_do_close_internal+0x1bc>)
 800a5f2:	486b      	ldr	r0, [pc, #428]	@ (800a7a0 <lwip_netconn_do_close_internal+0x1c0>)
 800a5f4:	f00b faca 	bl	8015b8c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a5f8:	7823      	ldrb	r3, [r4, #0]
 800a5fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d006      	beq.n	800a610 <lwip_netconn_do_close_internal+0x30>
 800a602:	4b65      	ldr	r3, [pc, #404]	@ (800a798 <lwip_netconn_do_close_internal+0x1b8>)
 800a604:	f240 32a7 	movw	r2, #935	@ 0x3a7
 800a608:	4966      	ldr	r1, [pc, #408]	@ (800a7a4 <lwip_netconn_do_close_internal+0x1c4>)
 800a60a:	4865      	ldr	r0, [pc, #404]	@ (800a7a0 <lwip_netconn_do_close_internal+0x1c0>)
 800a60c:	f00b fabe 	bl	8015b8c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a610:	7863      	ldrb	r3, [r4, #1]
 800a612:	2b04      	cmp	r3, #4
 800a614:	d006      	beq.n	800a624 <lwip_netconn_do_close_internal+0x44>
 800a616:	4b60      	ldr	r3, [pc, #384]	@ (800a798 <lwip_netconn_do_close_internal+0x1b8>)
 800a618:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a61c:	4962      	ldr	r1, [pc, #392]	@ (800a7a8 <lwip_netconn_do_close_internal+0x1c8>)
 800a61e:	4860      	ldr	r0, [pc, #384]	@ (800a7a0 <lwip_netconn_do_close_internal+0x1c0>)
 800a620:	f00b fab4 	bl	8015b8c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	b933      	cbnz	r3, 800a636 <lwip_netconn_do_close_internal+0x56>
 800a628:	4b5b      	ldr	r3, [pc, #364]	@ (800a798 <lwip_netconn_do_close_internal+0x1b8>)
 800a62a:	f240 32a9 	movw	r2, #937	@ 0x3a9
 800a62e:	495f      	ldr	r1, [pc, #380]	@ (800a7ac <lwip_netconn_do_close_internal+0x1cc>)
 800a630:	485b      	ldr	r0, [pc, #364]	@ (800a7a0 <lwip_netconn_do_close_internal+0x1c0>)
 800a632:	f00b faab 	bl	8015b8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a636:	6a23      	ldr	r3, [r4, #32]
 800a638:	b933      	cbnz	r3, 800a648 <lwip_netconn_do_close_internal+0x68>
 800a63a:	4b57      	ldr	r3, [pc, #348]	@ (800a798 <lwip_netconn_do_close_internal+0x1b8>)
 800a63c:	f240 32aa 	movw	r2, #938	@ 0x3aa
 800a640:	495b      	ldr	r1, [pc, #364]	@ (800a7b0 <lwip_netconn_do_close_internal+0x1d0>)
 800a642:	4857      	ldr	r0, [pc, #348]	@ (800a7a0 <lwip_netconn_do_close_internal+0x1c0>)
 800a644:	f00b faa2 	bl	8015b8c <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800a648:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
 800a64a:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 800a64c:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 800a64e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800a650:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800a654:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800a658:	d00f      	beq.n	800a67a <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 800a65a:	f1b9 0f00 	cmp.w	r9, #0
 800a65e:	d005      	beq.n	800a66c <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 800a660:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 800a662:	1f5a      	subs	r2, r3, #5
 800a664:	2a01      	cmp	r2, #1
 800a666:	d908      	bls.n	800a67a <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d006      	beq.n	800a67a <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a66c:	f1b8 0f00 	cmp.w	r8, #0
 800a670:	d04d      	beq.n	800a70e <lwip_netconn_do_close_internal+0x12e>
 800a672:	8b6f      	ldrh	r7, [r5, #26]
 800a674:	f017 0710 	ands.w	r7, r7, #16
 800a678:	d004      	beq.n	800a684 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 800a67a:	2701      	movs	r7, #1
 800a67c:	2100      	movs	r1, #0
 800a67e:	4628      	mov	r0, r5
 800a680:	f002 fbea 	bl	800ce58 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a684:	7d2b      	ldrb	r3, [r5, #20]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d143      	bne.n	800a712 <lwip_netconn_do_close_internal+0x132>
    tcp_accept(tpcb, NULL);
 800a68a:	2100      	movs	r1, #0
 800a68c:	4628      	mov	r0, r5
 800a68e:	f002 fc2d 	bl	800ceec <tcp_accept>
  if (shut_close) {
 800a692:	2f00      	cmp	r7, #0
 800a694:	d05a      	beq.n	800a74c <lwip_netconn_do_close_internal+0x16c>
      err = tcp_close(tpcb);
 800a696:	4628      	mov	r0, r5
 800a698:	f002 ff86 	bl	800d5a8 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a69c:	4606      	mov	r6, r0
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a69e:	6a23      	ldr	r3, [r4, #32]
  if (err == ERR_OK) {
 800a6a0:	b140      	cbz	r0, 800a6b4 <lwip_netconn_do_close_internal+0xd4>
    if (err == ERR_MEM) {
 800a6a2:	1c42      	adds	r2, r0, #1
 800a6a4:	d107      	bne.n	800a6b6 <lwip_netconn_do_close_internal+0xd6>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a6a6:	7a5b      	ldrb	r3, [r3, #9]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d155      	bne.n	800a758 <lwip_netconn_do_close_internal+0x178>
        if (shut_close) {
 800a6ac:	b11f      	cbz	r7, 800a6b6 <lwip_netconn_do_close_internal+0xd6>
          tcp_abort(tpcb);
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f003 f8c8 	bl	800d844 <tcp_abort>
    shut_close = 0;
 800a6b4:	2600      	movs	r6, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a6b6:	6a23      	ldr	r3, [r4, #32]
 800a6b8:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a6ba:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a6c0:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800a6c2:	b9ce      	cbnz	r6, 800a6f8 <lwip_netconn_do_close_internal+0x118>
      if (shut_close) {
 800a6c4:	b137      	cbz	r7, 800a6d4 <lwip_netconn_do_close_internal+0xf4>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a6c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        conn->pcb.tcp = NULL;
 800a6c8:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a6ca:	b11b      	cbz	r3, 800a6d4 <lwip_netconn_do_close_internal+0xf4>
 800a6cc:	4632      	mov	r2, r6
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4798      	blx	r3
      if (shut_rx) {
 800a6d4:	f1b9 0f00 	cmp.w	r9, #0
 800a6d8:	d005      	beq.n	800a6e6 <lwip_netconn_do_close_internal+0x106>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a6da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a6dc:	b11b      	cbz	r3, 800a6e6 <lwip_netconn_do_close_internal+0x106>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4798      	blx	r3
      if (shut_tx) {
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	d005      	beq.n	800a6f8 <lwip_netconn_do_close_internal+0x118>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a6ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a6ee:	b11b      	cbz	r3, 800a6f8 <lwip_netconn_do_close_internal+0x118>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2102      	movs	r1, #2
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4798      	blx	r3
    if (delayed)
 800a6f8:	f1ba 0f00 	cmp.w	sl, #0
 800a6fc:	d003      	beq.n	800a706 <lwip_netconn_do_close_internal+0x126>
      sys_sem_signal(op_completed_sem);
 800a6fe:	f105 000c 	add.w	r0, r5, #12
 800a702:	f007 faab 	bl	8011c5c <sys_sem_signal>
    return ERR_OK;
 800a706:	2600      	movs	r6, #0
}
 800a708:	4630      	mov	r0, r6
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    shut_close = 0;
 800a70e:	4647      	mov	r7, r8
 800a710:	e7b8      	b.n	800a684 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 800a712:	f1b9 0f00 	cmp.w	r9, #0
 800a716:	d007      	beq.n	800a728 <lwip_netconn_do_close_internal+0x148>
      tcp_recv(tpcb, NULL);
 800a718:	2100      	movs	r1, #0
 800a71a:	4628      	mov	r0, r5
 800a71c:	f002 fba0 	bl	800ce60 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a720:	2100      	movs	r1, #0
 800a722:	4628      	mov	r0, r5
 800a724:	f002 fbe2 	bl	800ceec <tcp_accept>
    if (shut_tx) {
 800a728:	f1b8 0f00 	cmp.w	r8, #0
 800a72c:	d003      	beq.n	800a736 <lwip_netconn_do_close_internal+0x156>
      tcp_sent(tpcb, NULL);
 800a72e:	2100      	movs	r1, #0
 800a730:	4628      	mov	r0, r5
 800a732:	f002 fbad 	bl	800ce90 <tcp_sent>
    if (shut_close) {
 800a736:	b14f      	cbz	r7, 800a74c <lwip_netconn_do_close_internal+0x16c>
      tcp_poll(tpcb, NULL, 0);
 800a738:	2200      	movs	r2, #0
 800a73a:	4628      	mov	r0, r5
 800a73c:	4611      	mov	r1, r2
 800a73e:	f002 fbdb 	bl	800cef8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a742:	2100      	movs	r1, #0
 800a744:	4628      	mov	r0, r5
 800a746:	f002 fbb9 	bl	800cebc <tcp_err>
  if (shut_close) {
 800a74a:	e7a4      	b.n	800a696 <lwip_netconn_do_close_internal+0xb6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a74c:	4642      	mov	r2, r8
 800a74e:	4649      	mov	r1, r9
 800a750:	4628      	mov	r0, r5
 800a752:	f002 ffd7 	bl	800d704 <tcp_shutdown>
 800a756:	e7a1      	b.n	800a69c <lwip_netconn_do_close_internal+0xbc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a758:	7d2b      	ldrb	r3, [r5, #20]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d106      	bne.n	800a76c <lwip_netconn_do_close_internal+0x18c>
 800a75e:	4b0e      	ldr	r3, [pc, #56]	@ (800a798 <lwip_netconn_do_close_internal+0x1b8>)
 800a760:	f240 4245 	movw	r2, #1093	@ 0x445
 800a764:	4913      	ldr	r1, [pc, #76]	@ (800a7b4 <lwip_netconn_do_close_internal+0x1d4>)
 800a766:	480e      	ldr	r0, [pc, #56]	@ (800a7a0 <lwip_netconn_do_close_internal+0x1c0>)
 800a768:	f00b fa10 	bl	8015b8c <iprintf>
    if (shut_tx) {
 800a76c:	f1b8 0f00 	cmp.w	r8, #0
 800a770:	d003      	beq.n	800a77a <lwip_netconn_do_close_internal+0x19a>
      tcp_sent(tpcb, sent_tcp);
 800a772:	4911      	ldr	r1, [pc, #68]	@ (800a7b8 <lwip_netconn_do_close_internal+0x1d8>)
 800a774:	4628      	mov	r0, r5
 800a776:	f002 fb8b 	bl	800ce90 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 800a77a:	2201      	movs	r2, #1
 800a77c:	4628      	mov	r0, r5
 800a77e:	490f      	ldr	r1, [pc, #60]	@ (800a7bc <lwip_netconn_do_close_internal+0x1dc>)
 800a780:	f002 fbba 	bl	800cef8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a784:	4628      	mov	r0, r5
 800a786:	490e      	ldr	r1, [pc, #56]	@ (800a7c0 <lwip_netconn_do_close_internal+0x1e0>)
 800a788:	f002 fb98 	bl	800cebc <tcp_err>
    tcp_arg(tpcb, conn);
 800a78c:	4621      	mov	r1, r4
 800a78e:	4628      	mov	r0, r5
 800a790:	f002 fb62 	bl	800ce58 <tcp_arg>
  return err;
 800a794:	e7b8      	b.n	800a708 <lwip_netconn_do_close_internal+0x128>
 800a796:	bf00      	nop
 800a798:	08016edc 	.word	0x08016edc
 800a79c:	0801703a 	.word	0x0801703a
 800a7a0:	080169d3 	.word	0x080169d3
 800a7a4:	08017047 	.word	0x08017047
 800a7a8:	08017065 	.word	0x08017065
 800a7ac:	08017089 	.word	0x08017089
 800a7b0:	08016f78 	.word	0x08016f78
 800a7b4:	0801709c 	.word	0x0801709c
 800a7b8:	0800a841 	.word	0x0800a841
 800a7bc:	0800a7c5 	.word	0x0800a7c5
 800a7c0:	0800a969 	.word	0x0800a969

0800a7c4 <poll_tcp>:
{
 800a7c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	b930      	cbnz	r0, 800a7d8 <poll_tcp+0x14>
 800a7ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a834 <poll_tcp+0x70>)
 800a7cc:	f240 126d 	movw	r2, #365	@ 0x16d
 800a7d0:	4919      	ldr	r1, [pc, #100]	@ (800a838 <poll_tcp+0x74>)
 800a7d2:	481a      	ldr	r0, [pc, #104]	@ (800a83c <poll_tcp+0x78>)
 800a7d4:	f00b f9da 	bl	8015b8c <iprintf>
  if (conn->state == NETCONN_WRITE) {
 800a7d8:	7861      	ldrb	r1, [r4, #1]
 800a7da:	2901      	cmp	r1, #1
 800a7dc:	d11c      	bne.n	800a818 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f7ff fdd6 	bl	800a390 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a7e4:	7f23      	ldrb	r3, [r4, #28]
 800a7e6:	06da      	lsls	r2, r3, #27
 800a7e8:	d514      	bpl.n	800a814 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a7ea:	6862      	ldr	r2, [r4, #4]
 800a7ec:	b192      	cbz	r2, 800a814 <poll_tcp+0x50>
 800a7ee:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 800a7f2:	f640 3169 	movw	r1, #2921	@ 0xb69
 800a7f6:	4288      	cmp	r0, r1
 800a7f8:	d90c      	bls.n	800a814 <poll_tcp+0x50>
 800a7fa:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 800a7fe:	2a07      	cmp	r2, #7
 800a800:	d808      	bhi.n	800a814 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a802:	f023 0310 	bic.w	r3, r3, #16
 800a806:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a808:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a80a:	b11b      	cbz	r3, 800a814 <poll_tcp+0x50>
 800a80c:	2200      	movs	r2, #0
 800a80e:	2102      	movs	r1, #2
 800a810:	4620      	mov	r0, r4
 800a812:	4798      	blx	r3
}
 800a814:	2000      	movs	r0, #0
 800a816:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 800a818:	2904      	cmp	r1, #4
 800a81a:	d1e3      	bne.n	800a7e4 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a81c:	6a22      	ldr	r2, [r4, #32]
 800a81e:	b11a      	cbz	r2, 800a828 <poll_tcp+0x64>
 800a820:	7a53      	ldrb	r3, [r2, #9]
 800a822:	b10b      	cbz	r3, 800a828 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 800a824:	3b01      	subs	r3, #1
 800a826:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a828:	2101      	movs	r1, #1
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7ff fed8 	bl	800a5e0 <lwip_netconn_do_close_internal>
 800a830:	e7d8      	b.n	800a7e4 <poll_tcp+0x20>
 800a832:	bf00      	nop
 800a834:	08016edc 	.word	0x08016edc
 800a838:	0801743b 	.word	0x0801743b
 800a83c:	080169d3 	.word	0x080169d3

0800a840 <sent_tcp>:
{
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a844:	4604      	mov	r4, r0
 800a846:	b1d8      	cbz	r0, 800a880 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 800a848:	7841      	ldrb	r1, [r0, #1]
 800a84a:	2901      	cmp	r1, #1
 800a84c:	d121      	bne.n	800a892 <sent_tcp+0x52>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a84e:	f7ff fd9f 	bl	800a390 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a852:	6863      	ldr	r3, [r4, #4]
 800a854:	b1db      	cbz	r3, 800a88e <sent_tcp+0x4e>
 800a856:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800a85a:	f640 3269 	movw	r2, #2921	@ 0xb69
 800a85e:	4291      	cmp	r1, r2
 800a860:	d915      	bls.n	800a88e <sent_tcp+0x4e>
 800a862:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a866:	2b07      	cmp	r3, #7
 800a868:	d811      	bhi.n	800a88e <sent_tcp+0x4e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a86a:	7f23      	ldrb	r3, [r4, #28]
 800a86c:	f023 0310 	bic.w	r3, r3, #16
 800a870:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a872:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a874:	b15b      	cbz	r3, 800a88e <sent_tcp+0x4e>
 800a876:	462a      	mov	r2, r5
 800a878:	2102      	movs	r1, #2
 800a87a:	4620      	mov	r0, r4
 800a87c:	4798      	blx	r3
 800a87e:	e006      	b.n	800a88e <sent_tcp+0x4e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a880:	4b07      	ldr	r3, [pc, #28]	@ (800a8a0 <sent_tcp+0x60>)
 800a882:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 800a886:	4907      	ldr	r1, [pc, #28]	@ (800a8a4 <sent_tcp+0x64>)
 800a888:	4807      	ldr	r0, [pc, #28]	@ (800a8a8 <sent_tcp+0x68>)
 800a88a:	f00b f97f 	bl	8015b8c <iprintf>
}
 800a88e:	2000      	movs	r0, #0
 800a890:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 800a892:	2904      	cmp	r1, #4
 800a894:	d1dd      	bne.n	800a852 <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a896:	2101      	movs	r1, #1
 800a898:	f7ff fea2 	bl	800a5e0 <lwip_netconn_do_close_internal>
 800a89c:	e7d9      	b.n	800a852 <sent_tcp+0x12>
 800a89e:	bf00      	nop
 800a8a0:	08016edc 	.word	0x08016edc
 800a8a4:	0801743b 	.word	0x0801743b
 800a8a8:	080169d3 	.word	0x080169d3

0800a8ac <recv_tcp>:
{
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4615      	mov	r5, r2
 800a8b2:	461f      	mov	r7, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a8b4:	460e      	mov	r6, r1
 800a8b6:	b931      	cbnz	r1, 800a8c6 <recv_tcp+0x1a>
 800a8b8:	4b24      	ldr	r3, [pc, #144]	@ (800a94c <recv_tcp+0xa0>)
 800a8ba:	f240 122f 	movw	r2, #303	@ 0x12f
 800a8be:	4924      	ldr	r1, [pc, #144]	@ (800a950 <recv_tcp+0xa4>)
 800a8c0:	4824      	ldr	r0, [pc, #144]	@ (800a954 <recv_tcp+0xa8>)
 800a8c2:	f00b f963 	bl	8015b8c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a8c6:	b9fc      	cbnz	r4, 800a908 <recv_tcp+0x5c>
 800a8c8:	4b20      	ldr	r3, [pc, #128]	@ (800a94c <recv_tcp+0xa0>)
 800a8ca:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800a8ce:	4922      	ldr	r1, [pc, #136]	@ (800a958 <recv_tcp+0xac>)
 800a8d0:	4820      	ldr	r0, [pc, #128]	@ (800a954 <recv_tcp+0xa8>)
 800a8d2:	f00b f95b 	bl	8015b8c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a8d6:	b9c7      	cbnz	r7, 800a90a <recv_tcp+0x5e>
    return ERR_VAL;
 800a8d8:	f06f 0005 	mvn.w	r0, #5
}
 800a8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (p != NULL) {
 800a8de:	b16d      	cbz	r5, 800a8fc <recv_tcp+0x50>
    len = p->tot_len;
 800a8e0:	892e      	ldrh	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f104 0010 	add.w	r0, r4, #16
 800a8e8:	f007 fa6e 	bl	8011dc8 <sys_mbox_trypost>
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	b940      	cbnz	r0, 800a902 <recv_tcp+0x56>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a8f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a8f2:	b343      	cbz	r3, 800a946 <recv_tcp+0x9a>
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4798      	blx	r3
 800a8fa:	e024      	b.n	800a946 <recv_tcp+0x9a>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a8fc:	4d17      	ldr	r5, [pc, #92]	@ (800a95c <recv_tcp+0xb0>)
    len = 0;
 800a8fe:	2600      	movs	r6, #0
 800a900:	e7ef      	b.n	800a8e2 <recv_tcp+0x36>
    return ERR_MEM;
 800a902:	f04f 30ff 	mov.w	r0, #4294967295
 800a906:	e7e9      	b.n	800a8dc <recv_tcp+0x30>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a908:	b147      	cbz	r7, 800a91c <recv_tcp+0x70>
 800a90a:	4b10      	ldr	r3, [pc, #64]	@ (800a94c <recv_tcp+0xa0>)
 800a90c:	f240 1231 	movw	r2, #305	@ 0x131
 800a910:	4913      	ldr	r1, [pc, #76]	@ (800a960 <recv_tcp+0xb4>)
 800a912:	4810      	ldr	r0, [pc, #64]	@ (800a954 <recv_tcp+0xa8>)
 800a914:	f00b f93a 	bl	8015b8c <iprintf>
  if (conn == NULL) {
 800a918:	2c00      	cmp	r4, #0
 800a91a:	d0dd      	beq.n	800a8d8 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	42b3      	cmp	r3, r6
 800a920:	d006      	beq.n	800a930 <recv_tcp+0x84>
 800a922:	4b0a      	ldr	r3, [pc, #40]	@ (800a94c <recv_tcp+0xa0>)
 800a924:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800a928:	490e      	ldr	r1, [pc, #56]	@ (800a964 <recv_tcp+0xb8>)
 800a92a:	480a      	ldr	r0, [pc, #40]	@ (800a954 <recv_tcp+0xa8>)
 800a92c:	f00b f92e 	bl	8015b8c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1d3      	bne.n	800a8de <recv_tcp+0x32>
    if (p != NULL) {
 800a936:	b135      	cbz	r5, 800a946 <recv_tcp+0x9a>
      tcp_recved(pcb, p->tot_len);
 800a938:	4630      	mov	r0, r6
 800a93a:	8929      	ldrh	r1, [r5, #8]
 800a93c:	f002 fa44 	bl	800cdc8 <tcp_recved>
      pbuf_free(p);
 800a940:	4628      	mov	r0, r5
 800a942:	f001 fe45 	bl	800c5d0 <pbuf_free>
    return ERR_OK;
 800a946:	2000      	movs	r0, #0
 800a948:	e7c8      	b.n	800a8dc <recv_tcp+0x30>
 800a94a:	bf00      	nop
 800a94c:	08016edc 	.word	0x08016edc
 800a950:	080170bf 	.word	0x080170bf
 800a954:	080169d3 	.word	0x080169d3
 800a958:	080170e1 	.word	0x080170e1
 800a95c:	0808f1a8 	.word	0x0808f1a8
 800a960:	08017100 	.word	0x08017100
 800a964:	08017118 	.word	0x08017118

0800a968 <err_tcp>:
{
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a96e:	4604      	mov	r4, r0
 800a970:	b930      	cbnz	r0, 800a980 <err_tcp+0x18>
 800a972:	4b3f      	ldr	r3, [pc, #252]	@ (800aa70 <err_tcp+0x108>)
 800a974:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800a978:	493e      	ldr	r1, [pc, #248]	@ (800aa74 <err_tcp+0x10c>)
 800a97a:	483f      	ldr	r0, [pc, #252]	@ (800aa78 <err_tcp+0x110>)
 800a97c:	f00b f906 	bl	8015b8c <iprintf>
  SYS_ARCH_PROTECT(lev);
 800a980:	f007 f8bd 	bl	8011afe <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a984:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 800a986:	2700      	movs	r7, #0
  old_state = conn->state;
 800a988:	7866      	ldrb	r6, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a98a:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800a98e:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 800a990:	6067      	str	r7, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a992:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 800a994:	7067      	strb	r7, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800a996:	f007 f8b7 	bl	8011b08 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a99a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a99c:	b11b      	cbz	r3, 800a9a6 <err_tcp+0x3e>
 800a99e:	463a      	mov	r2, r7
 800a9a0:	2104      	movs	r1, #4
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a9a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9a8:	b11b      	cbz	r3, 800a9b2 <err_tcp+0x4a>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a9b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9b4:	b11b      	cbz	r3, 800a9be <err_tcp+0x56>
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2102      	movs	r1, #2
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4798      	blx	r3
  switch (err) {
 800a9be:	f105 030f 	add.w	r3, r5, #15
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d83c      	bhi.n	800aa42 <err_tcp+0xda>
 800a9c8:	4a2c      	ldr	r2, [pc, #176]	@ (800aa7c <err_tcp+0x114>)
 800a9ca:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	b123      	cbz	r3, 800a9dc <err_tcp+0x74>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f104 0010 	add.w	r0, r4, #16
 800a9d8:	f007 f9f6 	bl	8011dc8 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a9dc:	6963      	ldr	r3, [r4, #20]
 800a9de:	b123      	cbz	r3, 800a9ea <err_tcp+0x82>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	f104 0014 	add.w	r0, r4, #20
 800a9e6:	f007 f9ef 	bl	8011dc8 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a9ea:	2e01      	cmp	r6, #1
 800a9ec:	d002      	beq.n	800a9f4 <err_tcp+0x8c>
 800a9ee:	1ef3      	subs	r3, r6, #3
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d82f      	bhi.n	800aa54 <err_tcp+0xec>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a9f4:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a9f6:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800a9fa:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a9fc:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800a9fe:	d434      	bmi.n	800aa6a <err_tcp+0x102>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aa00:	6a23      	ldr	r3, [r4, #32]
 800aa02:	b933      	cbnz	r3, 800aa12 <err_tcp+0xaa>
 800aa04:	4b1a      	ldr	r3, [pc, #104]	@ (800aa70 <err_tcp+0x108>)
 800aa06:	f240 12e9 	movw	r2, #489	@ 0x1e9
 800aa0a:	491d      	ldr	r1, [pc, #116]	@ (800aa80 <err_tcp+0x118>)
 800aa0c:	481a      	ldr	r0, [pc, #104]	@ (800aa78 <err_tcp+0x110>)
 800aa0e:	f00b f8bd 	bl	8015b8c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800aa12:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 800aa14:	6a23      	ldr	r3, [r4, #32]
 800aa16:	bf08      	it	eq
 800aa18:	2500      	moveq	r5, #0
 800aa1a:	711d      	strb	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f103 050c 	add.w	r5, r3, #12
      LWIP_ASSERT("invalid op_completed_sem", sys_sem_valid(op_completed_sem));
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	b933      	cbnz	r3, 800aa34 <err_tcp+0xcc>
 800aa26:	4b12      	ldr	r3, [pc, #72]	@ (800aa70 <err_tcp+0x108>)
 800aa28:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 800aa2c:	4915      	ldr	r1, [pc, #84]	@ (800aa84 <err_tcp+0x11c>)
 800aa2e:	4812      	ldr	r0, [pc, #72]	@ (800aa78 <err_tcp+0x110>)
 800aa30:	f00b f8ac 	bl	8015b8c <iprintf>
      conn->current_msg = NULL;
 800aa34:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800aa36:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 800aa38:	6223      	str	r3, [r4, #32]
}
 800aa3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800aa3e:	f007 b90d 	b.w	8011c5c <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800aa42:	b12d      	cbz	r5, 800aa50 <err_tcp+0xe8>
 800aa44:	4b0a      	ldr	r3, [pc, #40]	@ (800aa70 <err_tcp+0x108>)
 800aa46:	227d      	movs	r2, #125	@ 0x7d
 800aa48:	490f      	ldr	r1, [pc, #60]	@ (800aa88 <err_tcp+0x120>)
 800aa4a:	480b      	ldr	r0, [pc, #44]	@ (800aa78 <err_tcp+0x110>)
 800aa4c:	f00b f89e 	bl	8015b8c <iprintf>
{
 800aa50:	2700      	movs	r7, #0
 800aa52:	e7bc      	b.n	800a9ce <err_tcp+0x66>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800aa54:	6a23      	ldr	r3, [r4, #32]
 800aa56:	b143      	cbz	r3, 800aa6a <err_tcp+0x102>
 800aa58:	4b05      	ldr	r3, [pc, #20]	@ (800aa70 <err_tcp+0x108>)
 800aa5a:	f44f 72fd 	mov.w	r2, #506	@ 0x1fa
 800aa5e:	490b      	ldr	r1, [pc, #44]	@ (800aa8c <err_tcp+0x124>)
 800aa60:	4805      	ldr	r0, [pc, #20]	@ (800aa78 <err_tcp+0x110>)
}
 800aa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800aa66:	f00b b891 	b.w	8015b8c <iprintf>
}
 800aa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa6e:	bf00      	nop
 800aa70:	08016edc 	.word	0x08016edc
 800aa74:	0801743b 	.word	0x0801743b
 800aa78:	080169d3 	.word	0x080169d3
 800aa7c:	0808f19c 	.word	0x0808f19c
 800aa80:	08016f78 	.word	0x08016f78
 800aa84:	08017146 	.word	0x08017146
 800aa88:	08017136 	.word	0x08017136
 800aa8c:	0801715f 	.word	0x0801715f

0800aa90 <lwip_netconn_is_err_msg>:
{
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800aa94:	460c      	mov	r4, r1
 800aa96:	b929      	cbnz	r1, 800aaa4 <lwip_netconn_is_err_msg+0x14>
 800aa98:	4b0c      	ldr	r3, [pc, #48]	@ (800aacc <lwip_netconn_is_err_msg+0x3c>)
 800aa9a:	2285      	movs	r2, #133	@ 0x85
 800aa9c:	490c      	ldr	r1, [pc, #48]	@ (800aad0 <lwip_netconn_is_err_msg+0x40>)
 800aa9e:	480d      	ldr	r0, [pc, #52]	@ (800aad4 <lwip_netconn_is_err_msg+0x44>)
 800aaa0:	f00b f874 	bl	8015b8c <iprintf>
  if (msg == &netconn_aborted) {
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	@ (800aad8 <lwip_netconn_is_err_msg+0x48>)
 800aaa6:	429d      	cmp	r5, r3
 800aaa8:	d103      	bne.n	800aab2 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_ABRT;
 800aaaa:	23f3      	movs	r3, #243	@ 0xf3
    return 1;
 800aaac:	2001      	movs	r0, #1
    *err = ERR_RST;
 800aaae:	7023      	strb	r3, [r4, #0]
}
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 800aab2:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <lwip_netconn_is_err_msg+0x4c>)
 800aab4:	429d      	cmp	r5, r3
 800aab6:	d101      	bne.n	800aabc <lwip_netconn_is_err_msg+0x2c>
    *err = ERR_RST;
 800aab8:	23f2      	movs	r3, #242	@ 0xf2
 800aaba:	e7f7      	b.n	800aaac <lwip_netconn_is_err_msg+0x1c>
  } else if (msg == &netconn_closed) {
 800aabc:	4b08      	ldr	r3, [pc, #32]	@ (800aae0 <lwip_netconn_is_err_msg+0x50>)
 800aabe:	429d      	cmp	r5, r3
 800aac0:	d101      	bne.n	800aac6 <lwip_netconn_is_err_msg+0x36>
    *err = ERR_CLSD;
 800aac2:	23f1      	movs	r3, #241	@ 0xf1
 800aac4:	e7f2      	b.n	800aaac <lwip_netconn_is_err_msg+0x1c>
  return 0;
 800aac6:	2000      	movs	r0, #0
 800aac8:	e7f2      	b.n	800aab0 <lwip_netconn_is_err_msg+0x20>
 800aaca:	bf00      	nop
 800aacc:	08016edc 	.word	0x08016edc
 800aad0:	08017179 	.word	0x08017179
 800aad4:	080169d3 	.word	0x080169d3
 800aad8:	0808f1aa 	.word	0x0808f1aa
 800aadc:	0808f1a9 	.word	0x0808f1a9
 800aae0:	0808f1a8 	.word	0x0808f1a8

0800aae4 <lwip_netconn_do_newconn>:
{
 800aae4:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800aae6:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800aae8:	6805      	ldr	r5, [r0, #0]
{
 800aaea:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800aaec:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800aaee:	6868      	ldr	r0, [r5, #4]
 800aaf0:	bb28      	cbnz	r0, 800ab3e <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aaf2:	782b      	ldrb	r3, [r5, #0]
 800aaf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aaf8:	2b10      	cmp	r3, #16
 800aafa:	d014      	beq.n	800ab26 <lwip_netconn_do_newconn+0x42>
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	d11c      	bne.n	800ab3a <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ab00:	f005 fd12 	bl	8010528 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800ab04:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ab06:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ab08:	6850      	ldr	r0, [r2, #4]
 800ab0a:	b150      	cbz	r0, 800ab22 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ab0c:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ab0e:	490c      	ldr	r1, [pc, #48]	@ (800ab40 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ab10:	2b22      	cmp	r3, #34	@ 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ab12:	bf04      	itt	eq
 800ab14:	2301      	moveq	r3, #1
 800ab16:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ab18:	f005 fcda 	bl	80104d0 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	b96b      	cbnz	r3, 800ab3e <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800ab22:	23ff      	movs	r3, #255	@ 0xff
 800ab24:	e00a      	b.n	800ab3c <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ab26:	f002 ff7d 	bl	800da24 <tcp_new_ip_type>
 800ab2a:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ab2c:	6820      	ldr	r0, [r4, #0]
 800ab2e:	6843      	ldr	r3, [r0, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0f6      	beq.n	800ab22 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 800ab34:	f7ff fc0a 	bl	800a34c <setup_tcp>
 800ab38:	e7f0      	b.n	800ab1c <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 800ab3a:	23fa      	movs	r3, #250	@ 0xfa
    msg->err = ERR_MEM;
 800ab3c:	7123      	strb	r3, [r4, #4]
}
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	0800a2a5 	.word	0x0800a2a5

0800ab44 <netconn_alloc>:
{
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ab48:	2007      	movs	r0, #7
{
 800ab4a:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ab4c:	f001 fb26 	bl	800c19c <memp_malloc>
  if (conn == NULL) {
 800ab50:	4604      	mov	r4, r0
 800ab52:	b1a0      	cbz	r0, 800ab7e <netconn_alloc+0x3a>
  conn->type = t;
 800ab54:	7005      	strb	r5, [r0, #0]
 800ab56:	f005 05f0 	and.w	r5, r5, #240	@ 0xf0
  conn->pending_err = ERR_OK;
 800ab5a:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 800ab5c:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 800ab5e:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 800ab60:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800ab62:	d00e      	beq.n	800ab82 <netconn_alloc+0x3e>
 800ab64:	2d20      	cmp	r5, #32
 800ab66:	d00c      	beq.n	800ab82 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ab68:	4b14      	ldr	r3, [pc, #80]	@ (800abbc <netconn_alloc+0x78>)
 800ab6a:	f240 22eb 	movw	r2, #747	@ 0x2eb
 800ab6e:	4914      	ldr	r1, [pc, #80]	@ (800abc0 <netconn_alloc+0x7c>)
 800ab70:	4814      	ldr	r0, [pc, #80]	@ (800abc4 <netconn_alloc+0x80>)
 800ab72:	f00b f80b 	bl	8015b8c <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800ab76:	4621      	mov	r1, r4
 800ab78:	2007      	movs	r0, #7
 800ab7a:	f001 fb2d 	bl	800c1d8 <memp_free>
    return NULL;
 800ab7e:	2400      	movs	r4, #0
 800ab80:	e019      	b.n	800abb6 <netconn_alloc+0x72>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ab82:	f104 0510 	add.w	r5, r4, #16
 800ab86:	2106      	movs	r1, #6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f007 f8f5 	bl	8011d78 <sys_mbox_new>
 800ab8e:	4601      	mov	r1, r0
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d1f0      	bne.n	800ab76 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ab94:	f104 000c 	add.w	r0, r4, #12
 800ab98:	f007 f826 	bl	8011be8 <sys_sem_new>
 800ab9c:	b118      	cbz	r0, 800aba6 <netconn_alloc+0x62>
    sys_mbox_free(&conn->recvmbox);
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f007 f9c2 	bl	8011f28 <sys_mbox_free>
    goto free_and_return;
 800aba4:	e7e7      	b.n	800ab76 <netconn_alloc+0x32>
  conn->callback_arg.socket = -1;
 800aba6:	f04f 33ff 	mov.w	r3, #4294967295
  sys_mbox_set_invalid(&conn->acceptmbox);
 800abaa:	6160      	str	r0, [r4, #20]
  conn->state        = NETCONN_NONE;
 800abac:	7060      	strb	r0, [r4, #1]
  conn->callback_arg.socket = -1;
 800abae:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
 800abb0:	7720      	strb	r0, [r4, #28]
  conn->current_msg  = NULL;
 800abb2:	e9c4 0608 	strd	r0, r6, [r4, #32]
}
 800abb6:	4620      	mov	r0, r4
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	bf00      	nop
 800abbc:	08016edc 	.word	0x08016edc
 800abc0:	08017185 	.word	0x08017185
 800abc4:	080169d3 	.word	0x080169d3

0800abc8 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800abc8:	6843      	ldr	r3, [r0, #4]
{
 800abca:	b510      	push	{r4, lr}
 800abcc:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800abce:	b133      	cbz	r3, 800abde <netconn_free+0x16>
 800abd0:	4b12      	ldr	r3, [pc, #72]	@ (800ac1c <netconn_free+0x54>)
 800abd2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800abd6:	4912      	ldr	r1, [pc, #72]	@ (800ac20 <netconn_free+0x58>)
 800abd8:	4812      	ldr	r0, [pc, #72]	@ (800ac24 <netconn_free+0x5c>)
 800abda:	f00a ffd7 	bl	8015b8c <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	b133      	cbz	r3, 800abf0 <netconn_free+0x28>
 800abe2:	4b0e      	ldr	r3, [pc, #56]	@ (800ac1c <netconn_free+0x54>)
 800abe4:	f240 3227 	movw	r2, #807	@ 0x327
 800abe8:	490f      	ldr	r1, [pc, #60]	@ (800ac28 <netconn_free+0x60>)
 800abea:	480e      	ldr	r0, [pc, #56]	@ (800ac24 <netconn_free+0x5c>)
 800abec:	f00a ffce 	bl	8015b8c <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800abf0:	6963      	ldr	r3, [r4, #20]
 800abf2:	b133      	cbz	r3, 800ac02 <netconn_free+0x3a>
 800abf4:	4b09      	ldr	r3, [pc, #36]	@ (800ac1c <netconn_free+0x54>)
 800abf6:	f240 322a 	movw	r2, #810	@ 0x32a
 800abfa:	490c      	ldr	r1, [pc, #48]	@ (800ac2c <netconn_free+0x64>)
 800abfc:	4809      	ldr	r0, [pc, #36]	@ (800ac24 <netconn_free+0x5c>)
 800abfe:	f00a ffc5 	bl	8015b8c <iprintf>
  sys_sem_free(&conn->op_completed);
 800ac02:	f104 000c 	add.w	r0, r4, #12
 800ac06:	f007 f895 	bl	8011d34 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ac0a:	2300      	movs	r3, #0
  memp_free(MEMP_NETCONN, conn);
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	2007      	movs	r0, #7
  sys_sem_set_invalid(&conn->op_completed);
 800ac10:	60e3      	str	r3, [r4, #12]
}
 800ac12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 800ac16:	f001 badf 	b.w	800c1d8 <memp_free>
 800ac1a:	bf00      	nop
 800ac1c:	08016edc 	.word	0x08016edc
 800ac20:	080171ab 	.word	0x080171ab
 800ac24:	080169d3 	.word	0x080169d3
 800ac28:	080171d9 	.word	0x080171d9
 800ac2c:	08017213 	.word	0x08017213

0800ac30 <netconn_drain>:
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ac30:	6903      	ldr	r3, [r0, #16]
{
 800ac32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac34:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ac36:	b163      	cbz	r3, 800ac52 <netconn_drain+0x22>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ac38:	f100 0510 	add.w	r5, r0, #16
 800ac3c:	a901      	add	r1, sp, #4
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f007 f93a 	bl	8011eb8 <sys_arch_mbox_tryfetch>
 800ac44:	3001      	adds	r0, #1
 800ac46:	d115      	bne.n	800ac74 <netconn_drain+0x44>
    sys_mbox_free(&conn->recvmbox);
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f007 f96d 	bl	8011f28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	6123      	str	r3, [r4, #16]
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ac52:	6963      	ldr	r3, [r4, #20]
 800ac54:	b163      	cbz	r3, 800ac70 <netconn_drain+0x40>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ac56:	f104 0714 	add.w	r7, r4, #20
 800ac5a:	a901      	add	r1, sp, #4
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	f007 f92b 	bl	8011eb8 <sys_arch_mbox_tryfetch>
 800ac62:	3001      	adds	r0, #1
 800ac64:	d119      	bne.n	800ac9a <netconn_drain+0x6a>
    sys_mbox_free(&conn->acceptmbox);
 800ac66:	4638      	mov	r0, r7
 800ac68:	f007 f95e 	bl	8011f28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	6163      	str	r3, [r4, #20]
}
 800ac70:	b003      	add	sp, #12
 800ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ac74:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ac76:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ac78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d109      	bne.n	800ac94 <netconn_drain+0x64>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ac80:	f10d 0103 	add.w	r1, sp, #3
 800ac84:	f7ff ff04 	bl	800aa90 <lwip_netconn_is_err_msg>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d1d7      	bne.n	800ac3c <netconn_drain+0xc>
            pbuf_free((struct pbuf *)mem);
 800ac8c:	9801      	ldr	r0, [sp, #4]
 800ac8e:	f001 fc9f 	bl	800c5d0 <pbuf_free>
 800ac92:	e7d3      	b.n	800ac3c <netconn_drain+0xc>
          netbuf_delete((struct netbuf *)mem);
 800ac94:	f000 fa54 	bl	800b140 <netbuf_delete>
 800ac98:	e7d0      	b.n	800ac3c <netconn_drain+0xc>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ac9a:	f10d 0103 	add.w	r1, sp, #3
 800ac9e:	9801      	ldr	r0, [sp, #4]
 800aca0:	f7ff fef6 	bl	800aa90 <lwip_netconn_is_err_msg>
 800aca4:	4606      	mov	r6, r0
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d1d7      	bne.n	800ac5a <netconn_drain+0x2a>
          struct netconn *newconn = (struct netconn *)mem;
 800acaa:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 800acac:	4628      	mov	r0, r5
 800acae:	f7ff ffbf 	bl	800ac30 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800acb2:	6868      	ldr	r0, [r5, #4]
 800acb4:	b110      	cbz	r0, 800acbc <netconn_drain+0x8c>
            tcp_abort(newconn->pcb.tcp);
 800acb6:	f002 fdc5 	bl	800d844 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800acba:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 800acbc:	4628      	mov	r0, r5
 800acbe:	f7ff ff83 	bl	800abc8 <netconn_free>
 800acc2:	e7ca      	b.n	800ac5a <netconn_drain+0x2a>

0800acc4 <accept_function>:
{
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	460e      	mov	r6, r1
  if (conn == NULL) {
 800acc8:	4604      	mov	r4, r0
 800acca:	b178      	cbz	r0, 800acec <accept_function+0x28>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800accc:	6943      	ldr	r3, [r0, #20]
 800acce:	b16b      	cbz	r3, 800acec <accept_function+0x28>
  if (newpcb == NULL) {
 800acd0:	f100 0714 	add.w	r7, r0, #20
 800acd4:	b971      	cbnz	r1, 800acf4 <accept_function+0x30>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800acd6:	492e      	ldr	r1, [pc, #184]	@ (800ad90 <accept_function+0xcc>)
 800acd8:	4638      	mov	r0, r7
 800acda:	f007 f875 	bl	8011dc8 <sys_mbox_trypost>
 800acde:	4602      	mov	r2, r0
 800ace0:	b920      	cbnz	r0, 800acec <accept_function+0x28>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ace2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ace4:	b113      	cbz	r3, 800acec <accept_function+0x28>
 800ace6:	4601      	mov	r1, r0
 800ace8:	4620      	mov	r0, r4
 800acea:	4798      	blx	r3
    return ERR_VAL;
 800acec:	f06f 0605 	mvn.w	r6, #5
}
 800acf0:	4630      	mov	r0, r6
 800acf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800acf4:	b132      	cbz	r2, 800ad04 <accept_function+0x40>
 800acf6:	4b27      	ldr	r3, [pc, #156]	@ (800ad94 <accept_function+0xd0>)
 800acf8:	f240 222d 	movw	r2, #557	@ 0x22d
 800acfc:	4926      	ldr	r1, [pc, #152]	@ (800ad98 <accept_function+0xd4>)
 800acfe:	4827      	ldr	r0, [pc, #156]	@ (800ad9c <accept_function+0xd8>)
 800ad00:	f00a ff44 	bl	8015b8c <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 800ad04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ad06:	7820      	ldrb	r0, [r4, #0]
 800ad08:	f7ff ff1c 	bl	800ab44 <netconn_alloc>
  if (newconn == NULL) {
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	b968      	cbnz	r0, 800ad2c <accept_function+0x68>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ad10:	491f      	ldr	r1, [pc, #124]	@ (800ad90 <accept_function+0xcc>)
 800ad12:	4638      	mov	r0, r7
 800ad14:	f007 f858 	bl	8011dc8 <sys_mbox_trypost>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	b920      	cbnz	r0, 800ad26 <accept_function+0x62>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ad1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ad1e:	b113      	cbz	r3, 800ad26 <accept_function+0x62>
 800ad20:	4601      	mov	r1, r0
 800ad22:	4620      	mov	r0, r4
 800ad24:	4798      	blx	r3
    return ERR_MEM;
 800ad26:	f04f 36ff 	mov.w	r6, #4294967295
 800ad2a:	e7e1      	b.n	800acf0 <accept_function+0x2c>
  newconn->pcb.tcp = newpcb;
 800ad2c:	6046      	str	r6, [r0, #4]
  setup_tcp(newconn);
 800ad2e:	f7ff fb0d 	bl	800a34c <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ad32:	4629      	mov	r1, r5
 800ad34:	4638      	mov	r0, r7
 800ad36:	f007 f847 	bl	8011dc8 <sys_mbox_trypost>
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	b300      	cbz	r0, 800ad80 <accept_function+0xbc>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ad3e:	686c      	ldr	r4, [r5, #4]
    tcp_arg(pcb, NULL);
 800ad40:	2100      	movs	r1, #0
 800ad42:	4620      	mov	r0, r4
 800ad44:	f002 f888 	bl	800ce58 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ad48:	4620      	mov	r0, r4
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	f002 f888 	bl	800ce60 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ad50:	4620      	mov	r0, r4
 800ad52:	2100      	movs	r1, #0
 800ad54:	f002 f89c 	bl	800ce90 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	f002 f8cb 	bl	800cef8 <tcp_poll>
    tcp_err(pcb, NULL);
 800ad62:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 800ad64:	2400      	movs	r4, #0
    tcp_err(pcb, NULL);
 800ad66:	2100      	movs	r1, #0
 800ad68:	f002 f8a8 	bl	800cebc <tcp_err>
    sys_mbox_free(&newconn->recvmbox);
 800ad6c:	f105 0010 	add.w	r0, r5, #16
    newconn->pcb.tcp = NULL;
 800ad70:	606c      	str	r4, [r5, #4]
    sys_mbox_free(&newconn->recvmbox);
 800ad72:	f007 f8d9 	bl	8011f28 <sys_mbox_free>
    netconn_free(newconn);
 800ad76:	4628      	mov	r0, r5
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ad78:	612c      	str	r4, [r5, #16]
    netconn_free(newconn);
 800ad7a:	f7ff ff25 	bl	800abc8 <netconn_free>
    return ERR_MEM;
 800ad7e:	e7d2      	b.n	800ad26 <accept_function+0x62>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ad80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0b4      	beq.n	800acf0 <accept_function+0x2c>
 800ad86:	4602      	mov	r2, r0
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4798      	blx	r3
 800ad8e:	e7af      	b.n	800acf0 <accept_function+0x2c>
 800ad90:	0808f1aa 	.word	0x0808f1aa
 800ad94:	08016edc 	.word	0x08016edc
 800ad98:	0801724f 	.word	0x0801724f
 800ad9c:	080169d3 	.word	0x080169d3

0800ada0 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 800ada0:	6803      	ldr	r3, [r0, #0]
{
 800ada2:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800ada4:	785d      	ldrb	r5, [r3, #1]
{
 800ada6:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ada8:	b1b5      	cbz	r5, 800add8 <lwip_netconn_do_delconn+0x38>
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adb0:	2b10      	cmp	r3, #16
 800adb2:	d006      	beq.n	800adc2 <lwip_netconn_do_delconn+0x22>
 800adb4:	4b36      	ldr	r3, [pc, #216]	@ (800ae90 <lwip_netconn_do_delconn+0xf0>)
 800adb6:	f240 4262 	movw	r2, #1122	@ 0x462
 800adba:	4936      	ldr	r1, [pc, #216]	@ (800ae94 <lwip_netconn_do_delconn+0xf4>)
 800adbc:	4836      	ldr	r0, [pc, #216]	@ (800ae98 <lwip_netconn_do_delconn+0xf8>)
 800adbe:	f00a fee5 	bl	8015b8c <iprintf>
  if (((state != NETCONN_NONE) &&
 800adc2:	2d02      	cmp	r5, #2
 800adc4:	d008      	beq.n	800add8 <lwip_netconn_do_delconn+0x38>
       (state != NETCONN_LISTEN) &&
 800adc6:	2d03      	cmp	r5, #3
 800adc8:	d103      	bne.n	800add2 <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	7f1b      	ldrb	r3, [r3, #28]
 800adce:	075b      	lsls	r3, r3, #29
 800add0:	d402      	bmi.n	800add8 <lwip_netconn_do_delconn+0x38>
    msg->err = ERR_INPROGRESS;
 800add2:	23fb      	movs	r3, #251	@ 0xfb
 800add4:	7123      	strb	r3, [r4, #4]
}
 800add6:	bd70      	pop	{r4, r5, r6, pc}
    msg->err = ERR_OK;
 800add8:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 800adda:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800addc:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800adde:	f7ff ff27 	bl	800ac30 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800ade2:	6822      	ldr	r2, [r4, #0]
 800ade4:	6850      	ldr	r0, [r2, #4]
 800ade6:	b160      	cbz	r0, 800ae02 <lwip_netconn_do_delconn+0x62>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ade8:	7813      	ldrb	r3, [r2, #0]
 800adea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adee:	2b10      	cmp	r3, #16
 800adf0:	d016      	beq.n	800ae20 <lwip_netconn_do_delconn+0x80>
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d102      	bne.n	800adfc <lwip_netconn_do_delconn+0x5c>
          msg->conn->pcb.udp->recv_arg = NULL;
 800adf6:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 800adf8:	f005 fb6e 	bl	80104d8 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	2200      	movs	r2, #0
 800ae00:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ae06:	b113      	cbz	r3, 800ae0e <lwip_netconn_do_delconn+0x6e>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ae0e:	6820      	ldr	r0, [r4, #0]
 800ae10:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0df      	beq.n	800add6 <lwip_netconn_do_delconn+0x36>
 800ae16:	2200      	movs	r2, #0
 800ae18:	2102      	movs	r1, #2
}
 800ae1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ae1e:	4718      	bx	r3
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae20:	6a13      	ldr	r3, [r2, #32]
 800ae22:	b133      	cbz	r3, 800ae32 <lwip_netconn_do_delconn+0x92>
 800ae24:	4b1a      	ldr	r3, [pc, #104]	@ (800ae90 <lwip_netconn_do_delconn+0xf0>)
 800ae26:	f44f 6293 	mov.w	r2, #1176	@ 0x498
 800ae2a:	491c      	ldr	r1, [pc, #112]	@ (800ae9c <lwip_netconn_do_delconn+0xfc>)
 800ae2c:	481a      	ldr	r0, [pc, #104]	@ (800ae98 <lwip_netconn_do_delconn+0xf8>)
 800ae2e:	f00a fead 	bl	8015b8c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ae32:	6820      	ldr	r0, [r4, #0]
 800ae34:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae36:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 800ae38:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800ae3e:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae40:	f7ff fbce 	bl	800a5e0 <lwip_netconn_do_close_internal>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d0c6      	beq.n	800add6 <lwip_netconn_do_delconn+0x36>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d006      	beq.n	800ae5e <lwip_netconn_do_delconn+0xbe>
 800ae50:	4b0f      	ldr	r3, [pc, #60]	@ (800ae90 <lwip_netconn_do_delconn+0xf0>)
 800ae52:	f240 429e 	movw	r2, #1182	@ 0x49e
 800ae56:	4912      	ldr	r1, [pc, #72]	@ (800aea0 <lwip_netconn_do_delconn+0x100>)
 800ae58:	480f      	ldr	r0, [pc, #60]	@ (800ae98 <lwip_netconn_do_delconn+0xf8>)
 800ae5a:	f00a fe97 	bl	8015b8c <iprintf>
            UNLOCK_TCPIP_CORE();
 800ae5e:	4811      	ldr	r0, [pc, #68]	@ (800aea4 <lwip_netconn_do_delconn+0x104>)
 800ae60:	f006 fe98 	bl	8011b94 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	2100      	movs	r1, #0
 800ae68:	300c      	adds	r0, #12
 800ae6a:	f006 ff27 	bl	8011cbc <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ae6e:	480d      	ldr	r0, [pc, #52]	@ (800aea4 <lwip_netconn_do_delconn+0x104>)
 800ae70:	f006 fe64 	bl	8011b3c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0ac      	beq.n	800add6 <lwip_netconn_do_delconn+0x36>
 800ae7c:	4b04      	ldr	r3, [pc, #16]	@ (800ae90 <lwip_netconn_do_delconn+0xf0>)
 800ae7e:	f240 42a2 	movw	r2, #1186	@ 0x4a2
 800ae82:	4907      	ldr	r1, [pc, #28]	@ (800aea0 <lwip_netconn_do_delconn+0x100>)
 800ae84:	4804      	ldr	r0, [pc, #16]	@ (800ae98 <lwip_netconn_do_delconn+0xf8>)
}
 800ae86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ae8a:	f00a be7f 	b.w	8015b8c <iprintf>
 800ae8e:	bf00      	nop
 800ae90:	08016edc 	.word	0x08016edc
 800ae94:	08017276 	.word	0x08017276
 800ae98:	080169d3 	.word	0x080169d3
 800ae9c:	0801728a 	.word	0x0801728a
 800aea0:	080172a5 	.word	0x080172a5
 800aea4:	2000d154 	.word	0x2000d154

0800aea8 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 800aea8:	6803      	ldr	r3, [r0, #0]
{
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800aeae:	6858      	ldr	r0, [r3, #4]
 800aeb0:	b188      	cbz	r0, 800aed6 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aeb8:	2b10      	cmp	r3, #16
 800aeba:	d007      	beq.n	800aecc <lwip_netconn_do_bind+0x24>
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d10a      	bne.n	800aed6 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aec0:	89a2      	ldrh	r2, [r4, #12]
 800aec2:	68a1      	ldr	r1, [r4, #8]
 800aec4:	f005 faa4 	bl	8010410 <udp_bind>
  msg->err = err;
 800aec8:	7120      	strb	r0, [r4, #4]
}
 800aeca:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aecc:	89a2      	ldrh	r2, [r4, #12]
 800aece:	68a1      	ldr	r1, [r4, #8]
 800aed0:	f001 feae 	bl	800cc30 <tcp_bind>
        break;
 800aed4:	e7f8      	b.n	800aec8 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aed6:	f06f 0005 	mvn.w	r0, #5
 800aeda:	e7f5      	b.n	800aec8 <lwip_netconn_do_bind+0x20>

0800aedc <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 800aedc:	6803      	ldr	r3, [r0, #0]
{
 800aede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee0:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800aee2:	6858      	ldr	r0, [r3, #4]
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d045      	beq.n	800af74 <lwip_netconn_do_listen+0x98>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aee8:	781a      	ldrb	r2, [r3, #0]
 800aeea:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800aeee:	2a10      	cmp	r2, #16
 800aef0:	d142      	bne.n	800af78 <lwip_netconn_do_listen+0x9c>
      if (msg->conn->state == NETCONN_NONE) {
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d139      	bne.n	800af6c <lwip_netconn_do_listen+0x90>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800aef8:	7d06      	ldrb	r6, [r0, #20]
 800aefa:	b11e      	cbz	r6, 800af04 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 800aefc:	23fa      	movs	r3, #250	@ 0xfa
      err = ERR_ARG;
 800aefe:	f88d 3007 	strb.w	r3, [sp, #7]
 800af02:	e020      	b.n	800af46 <lwip_netconn_do_listen+0x6a>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800af04:	f10d 0207 	add.w	r2, sp, #7
 800af08:	21ff      	movs	r1, #255	@ 0xff
 800af0a:	f001 fed1 	bl	800ccb0 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800af0e:	4605      	mov	r5, r0
 800af10:	b1c8      	cbz	r0, 800af46 <lwip_netconn_do_listen+0x6a>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800af12:	6820      	ldr	r0, [r4, #0]
 800af14:	6903      	ldr	r3, [r0, #16]
 800af16:	b123      	cbz	r3, 800af22 <lwip_netconn_do_listen+0x46>
              sys_mbox_free(&msg->conn->recvmbox);
 800af18:	3010      	adds	r0, #16
 800af1a:	f007 f805 	bl	8011f28 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	611e      	str	r6, [r3, #16]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800af22:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800af24:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800af26:	6946      	ldr	r6, [r0, #20]
            err = ERR_OK;
 800af28:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800af2c:	b186      	cbz	r6, 800af50 <lwip_netconn_do_listen+0x74>
              msg->conn->state = NETCONN_LISTEN;
 800af2e:	6821      	ldr	r1, [r4, #0]
 800af30:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800af32:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800af34:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 800af36:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800af38:	f001 ff8e 	bl	800ce58 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	490f      	ldr	r1, [pc, #60]	@ (800af7c <lwip_netconn_do_listen+0xa0>)
 800af40:	6858      	ldr	r0, [r3, #4]
 800af42:	f001 ffd3 	bl	800ceec <tcp_accept>
  msg->err = err;
 800af46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af4a:	7123      	strb	r3, [r4, #4]
}
 800af4c:	b002      	add	sp, #8
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800af50:	2106      	movs	r1, #6
 800af52:	3014      	adds	r0, #20
 800af54:	f006 ff10 	bl	8011d78 <sys_mbox_new>
 800af58:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d0e6      	beq.n	800af2e <lwip_netconn_do_listen+0x52>
              tcp_close(lpcb);
 800af60:	4628      	mov	r0, r5
 800af62:	f002 fb21 	bl	800d5a8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	605e      	str	r6, [r3, #4]
 800af6a:	e7ec      	b.n	800af46 <lwip_netconn_do_listen+0x6a>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d101      	bne.n	800af74 <lwip_netconn_do_listen+0x98>
        err = ERR_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	e7c4      	b.n	800aefe <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 800af74:	23f5      	movs	r3, #245	@ 0xf5
 800af76:	e7c2      	b.n	800aefe <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 800af78:	23f0      	movs	r3, #240	@ 0xf0
 800af7a:	e7c0      	b.n	800aefe <lwip_netconn_do_listen+0x22>
 800af7c:	0800acc5 	.word	0x0800acc5

0800af80 <lwip_netconn_do_recv>:
{
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800af82:	2300      	movs	r3, #0
{
 800af84:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800af86:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800af88:	6803      	ldr	r3, [r0, #0]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	b192      	cbz	r2, 800afb4 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af94:	2b10      	cmp	r3, #16
 800af96:	d10d      	bne.n	800afb4 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 800af98:	6885      	ldr	r5, [r0, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800af9a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800af9e:	42bd      	cmp	r5, r7
 800afa0:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 800afa2:	6823      	ldr	r3, [r4, #0]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800afa4:	bf28      	it	cs
 800afa6:	463e      	movcs	r6, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800afa8:	6858      	ldr	r0, [r3, #4]
 800afaa:	b2b1      	uxth	r1, r6
 800afac:	f001 ff0c 	bl	800cdc8 <tcp_recved>
      } while (remaining != 0);
 800afb0:	1bad      	subs	r5, r5, r6
 800afb2:	d1f4      	bne.n	800af9e <lwip_netconn_do_recv+0x1e>
}
 800afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afb8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800afb8:	b510      	push	{r4, lr}
 800afba:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800afbc:	6800      	ldr	r0, [r0, #0]
 800afbe:	f7ff f82c 	bl	800a01a <netconn_err>
  if (err == ERR_OK) {
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d14a      	bne.n	800b05c <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	781a      	ldrb	r2, [r3, #0]
 800afca:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800afce:	2a10      	cmp	r2, #16
 800afd0:	d142      	bne.n	800b058 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800afd2:	785a      	ldrb	r2, [r3, #1]
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	d143      	bne.n	800b060 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	2a00      	cmp	r2, #0
 800afdc:	d043      	beq.n	800b066 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 800afde:	2201      	movs	r2, #1
 800afe0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	b133      	cbz	r3, 800aff4 <lwip_netconn_do_write+0x3c>
 800afe6:	4b21      	ldr	r3, [pc, #132]	@ (800b06c <lwip_netconn_do_write+0xb4>)
 800afe8:	f240 7227 	movw	r2, #1831	@ 0x727
 800afec:	4920      	ldr	r1, [pc, #128]	@ (800b070 <lwip_netconn_do_write+0xb8>)
 800afee:	4821      	ldr	r0, [pc, #132]	@ (800b074 <lwip_netconn_do_write+0xbc>)
 800aff0:	f00a fdcc 	bl	8015b8c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800aff4:	6963      	ldr	r3, [r4, #20]
 800aff6:	b933      	cbnz	r3, 800b006 <lwip_netconn_do_write+0x4e>
 800aff8:	4b1c      	ldr	r3, [pc, #112]	@ (800b06c <lwip_netconn_do_write+0xb4>)
 800affa:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800affe:	491e      	ldr	r1, [pc, #120]	@ (800b078 <lwip_netconn_do_write+0xc0>)
 800b000:	481c      	ldr	r0, [pc, #112]	@ (800b074 <lwip_netconn_do_write+0xbc>)
 800b002:	f00a fdc3 	bl	8015b8c <iprintf>
        msg->conn->current_msg = msg;
 800b006:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b008:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800b00a:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b00c:	f7ff f9c0 	bl	800a390 <lwip_netconn_do_writemore>
 800b010:	b328      	cbz	r0, 800b05e <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d006      	beq.n	800b028 <lwip_netconn_do_write+0x70>
 800b01a:	4b14      	ldr	r3, [pc, #80]	@ (800b06c <lwip_netconn_do_write+0xb4>)
 800b01c:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b020:	4916      	ldr	r1, [pc, #88]	@ (800b07c <lwip_netconn_do_write+0xc4>)
 800b022:	4814      	ldr	r0, [pc, #80]	@ (800b074 <lwip_netconn_do_write+0xbc>)
 800b024:	f00a fdb2 	bl	8015b8c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b028:	4815      	ldr	r0, [pc, #84]	@ (800b080 <lwip_netconn_do_write+0xc8>)
 800b02a:	f006 fdb3 	bl	8011b94 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b02e:	6820      	ldr	r0, [r4, #0]
 800b030:	2100      	movs	r1, #0
 800b032:	300c      	adds	r0, #12
 800b034:	f006 fe42 	bl	8011cbc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b038:	4811      	ldr	r0, [pc, #68]	@ (800b080 <lwip_netconn_do_write+0xc8>)
 800b03a:	f006 fd7f 	bl	8011b3c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	785b      	ldrb	r3, [r3, #1]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d10b      	bne.n	800b05e <lwip_netconn_do_write+0xa6>
 800b046:	4b09      	ldr	r3, [pc, #36]	@ (800b06c <lwip_netconn_do_write+0xb4>)
 800b048:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 800b04c:	490b      	ldr	r1, [pc, #44]	@ (800b07c <lwip_netconn_do_write+0xc4>)
 800b04e:	4809      	ldr	r0, [pc, #36]	@ (800b074 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 800b050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b054:	f00a bd9a 	b.w	8015b8c <iprintf>
      err = ERR_VAL;
 800b058:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800b05c:	7120      	strb	r0, [r4, #4]
}
 800b05e:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 800b060:	f06f 0004 	mvn.w	r0, #4
 800b064:	e7fa      	b.n	800b05c <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 800b066:	f06f 000a 	mvn.w	r0, #10
 800b06a:	e7f7      	b.n	800b05c <lwip_netconn_do_write+0xa4>
 800b06c:	08016edc 	.word	0x08016edc
 800b070:	0801728a 	.word	0x0801728a
 800b074:	080169d3 	.word	0x080169d3
 800b078:	080172ac 	.word	0x080172ac
 800b07c:	080172a5 	.word	0x080172a5
 800b080:	2000d154 	.word	0x2000d154

0800b084 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b084:	b510      	push	{r4, lr}
 800b086:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b088:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b08a:	6842      	ldr	r2, [r0, #4]
  enum netconn_state state = msg->conn->state;
 800b08c:	7843      	ldrb	r3, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 800b08e:	b15a      	cbz	r2, 800b0a8 <lwip_netconn_do_close+0x24>
 800b090:	7802      	ldrb	r2, [r0, #0]
 800b092:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800b096:	2a10      	cmp	r2, #16
 800b098:	d106      	bne.n	800b0a8 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b09a:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b09c:	2a03      	cmp	r2, #3
 800b09e:	d001      	beq.n	800b0a4 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d001      	beq.n	800b0a8 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d102      	bne.n	800b0ae <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b0a8:	23f5      	movs	r3, #245	@ 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b0aa:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b0ac:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d101      	bne.n	800b0b6 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 800b0b2:	23fb      	movs	r3, #251	@ 0xfb
 800b0b4:	e7f9      	b.n	800b0aa <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b0b6:	07d3      	lsls	r3, r2, #31
 800b0b8:	d501      	bpl.n	800b0be <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 800b0ba:	f7ff fdb9 	bl	800ac30 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	b133      	cbz	r3, 800b0d2 <lwip_netconn_do_close+0x4e>
 800b0c4:	4b19      	ldr	r3, [pc, #100]	@ (800b12c <lwip_netconn_do_close+0xa8>)
 800b0c6:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800b0ca:	4919      	ldr	r1, [pc, #100]	@ (800b130 <lwip_netconn_do_close+0xac>)
 800b0cc:	4819      	ldr	r0, [pc, #100]	@ (800b134 <lwip_netconn_do_close+0xb0>)
 800b0ce:	f00a fd5d 	bl	8015b8c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b0d6:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 800b0d8:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800b0da:	6204      	str	r4, [r0, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b0dc:	f7ff fa80 	bl	800a5e0 <lwip_netconn_do_close_internal>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d0e3      	beq.n	800b0ac <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	785b      	ldrb	r3, [r3, #1]
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d006      	beq.n	800b0fa <lwip_netconn_do_close+0x76>
 800b0ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b12c <lwip_netconn_do_close+0xa8>)
 800b0ee:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b0f2:	4911      	ldr	r1, [pc, #68]	@ (800b138 <lwip_netconn_do_close+0xb4>)
 800b0f4:	480f      	ldr	r0, [pc, #60]	@ (800b134 <lwip_netconn_do_close+0xb0>)
 800b0f6:	f00a fd49 	bl	8015b8c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b0fa:	4810      	ldr	r0, [pc, #64]	@ (800b13c <lwip_netconn_do_close+0xb8>)
 800b0fc:	f006 fd4a 	bl	8011b94 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	2100      	movs	r1, #0
 800b104:	300c      	adds	r0, #12
 800b106:	f006 fdd9 	bl	8011cbc <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b10a:	480c      	ldr	r0, [pc, #48]	@ (800b13c <lwip_netconn_do_close+0xb8>)
 800b10c:	f006 fd16 	bl	8011b3c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0c9      	beq.n	800b0ac <lwip_netconn_do_close+0x28>
 800b118:	4b04      	ldr	r3, [pc, #16]	@ (800b12c <lwip_netconn_do_close+0xa8>)
 800b11a:	f240 72ca 	movw	r2, #1994	@ 0x7ca
 800b11e:	4906      	ldr	r1, [pc, #24]	@ (800b138 <lwip_netconn_do_close+0xb4>)
 800b120:	4804      	ldr	r0, [pc, #16]	@ (800b134 <lwip_netconn_do_close+0xb0>)
}
 800b122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b126:	f00a bd31 	b.w	8015b8c <iprintf>
 800b12a:	bf00      	nop
 800b12c:	08016edc 	.word	0x08016edc
 800b130:	0801728a 	.word	0x0801728a
 800b134:	080169d3 	.word	0x080169d3
 800b138:	080172a5 	.word	0x080172a5
 800b13c:	2000d154 	.word	0x2000d154

0800b140 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b140:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800b142:	4604      	mov	r4, r0
 800b144:	b160      	cbz	r0, 800b160 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800b146:	6800      	ldr	r0, [r0, #0]
 800b148:	b120      	cbz	r0, 800b154 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800b14a:	f001 fa41 	bl	800c5d0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800b154:	4621      	mov	r1, r4
 800b156:	2006      	movs	r0, #6
  }
}
 800b158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800b15c:	f001 b83c 	b.w	800c1d8 <memp_free>
}
 800b160:	bd10      	pop	{r4, pc}

0800b162 <netbuf_data>:
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b162:	b150      	cbz	r0, 800b17a <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b164:	b149      	cbz	r1, 800b17a <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b166:	b142      	cbz	r2, 800b17a <netbuf_data+0x18>

  if (buf->ptr == NULL) {
 800b168:	6843      	ldr	r3, [r0, #4]
 800b16a:	b14b      	cbz	r3, 800b180 <netbuf_data+0x1e>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 800b170:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 800b172:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 800b174:	895b      	ldrh	r3, [r3, #10]
 800b176:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800b178:	4770      	bx	lr
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b17a:	f06f 000f 	mvn.w	r0, #15
 800b17e:	4770      	bx	lr
    return ERR_BUF;
 800b180:	f06f 0001 	mvn.w	r0, #1
}
 800b184:	4770      	bx	lr

0800b186 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800b186:	b510      	push	{r4, lr}
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  if (msg->msg.common.errtfunc != NULL) {
 800b188:	68c4      	ldr	r4, [r0, #12]
{
 800b18a:	4603      	mov	r3, r0
    return msg->msg.common.errtfunc(msg->netif);
 800b18c:	6840      	ldr	r0, [r0, #4]
  if (msg->msg.common.errtfunc != NULL) {
 800b18e:	b11c      	cbz	r4, 800b198 <netifapi_do_netif_common+0x12>
    return msg->msg.common.errtfunc(msg->netif);
 800b190:	4623      	mov	r3, r4
  } else {
    msg->msg.common.voidfunc(msg->netif);
    return ERR_OK;
  }
}
 800b192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return msg->msg.common.errtfunc(msg->netif);
 800b196:	4718      	bx	r3
    msg->msg.common.voidfunc(msg->netif);
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	4798      	blx	r3
}
 800b19c:	4620      	mov	r0, r4
 800b19e:	bd10      	pop	{r4, pc}

0800b1a0 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800b1a0:	b500      	push	{lr}
 800b1a2:	b089      	sub	sp, #36	@ 0x24
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800b1a4:	e9cd 0101 	strd	r0, r1, [sp, #4]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800b1a8:	4669      	mov	r1, sp
 800b1aa:	4803      	ldr	r0, [pc, #12]	@ (800b1b8 <netifapi_netif_common+0x18>)
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800b1ac:	9203      	str	r2, [sp, #12]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800b1ae:	f000 f8b7 	bl	800b320 <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 800b1b2:	b009      	add	sp, #36	@ 0x24
 800b1b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1b8:	0800b187 	.word	0x0800b187

0800b1bc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b1bc:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b1be:	482c      	ldr	r0, [pc, #176]	@ (800b270 <tcpip_thread+0xb4>)
 800b1c0:	f006 fcbc 	bl	8011b3c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b1c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b274 <tcpip_thread+0xb8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	b113      	cbz	r3, 800b1d0 <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 800b1ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b278 <tcpip_thread+0xbc>)
 800b1cc:	6810      	ldr	r0, [r2, #0]
 800b1ce:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b1d0:	4d27      	ldr	r5, [pc, #156]	@ (800b270 <tcpip_thread+0xb4>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b1d2:	4f2a      	ldr	r7, [pc, #168]	@ (800b27c <tcpip_thread+0xc0>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b1d4:	4e2a      	ldr	r6, [pc, #168]	@ (800b280 <tcpip_thread+0xc4>)
  sleeptime = sys_timeouts_sleeptime();
 800b1d6:	f005 f827 	bl	8010228 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b1da:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800b1dc:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b1de:	d113      	bne.n	800b208 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f006 fcd7 	bl	8011b94 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	a901      	add	r1, sp, #4
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	f006 fe20 	bl	8011e30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f006 fca3 	bl	8011b3c <sys_mutex_lock>
    if (msg == NULL) {
 800b1f6:	9c01      	ldr	r4, [sp, #4]
 800b1f8:	b9cc      	cbnz	r4, 800b22e <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b1fa:	4633      	mov	r3, r6
 800b1fc:	229a      	movs	r2, #154	@ 0x9a
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b1fe:	4921      	ldr	r1, [pc, #132]	@ (800b284 <tcpip_thread+0xc8>)
 800b200:	4821      	ldr	r0, [pc, #132]	@ (800b288 <tcpip_thread+0xcc>)
 800b202:	f00a fcc3 	bl	8015b8c <iprintf>
      break;
 800b206:	e7e6      	b.n	800b1d6 <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 800b208:	b910      	cbnz	r0, 800b210 <tcpip_thread+0x54>
    sys_check_timeouts();
 800b20a:	f004 ffeb 	bl	80101e4 <sys_check_timeouts>
    goto again;
 800b20e:	e7e2      	b.n	800b1d6 <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 800b210:	4628      	mov	r0, r5
 800b212:	f006 fcbf 	bl	8011b94 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b216:	4622      	mov	r2, r4
 800b218:	a901      	add	r1, sp, #4
 800b21a:	4638      	mov	r0, r7
 800b21c:	f006 fe08 	bl	8011e30 <sys_arch_mbox_fetch>
 800b220:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800b222:	4628      	mov	r0, r5
 800b224:	f006 fc8a 	bl	8011b3c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b228:	3401      	adds	r4, #1
 800b22a:	d0ee      	beq.n	800b20a <tcpip_thread+0x4e>
 800b22c:	e7e3      	b.n	800b1f6 <tcpip_thread+0x3a>
  switch (msg->type) {
 800b22e:	7823      	ldrb	r3, [r4, #0]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d00f      	beq.n	800b254 <tcpip_thread+0x98>
 800b234:	2b02      	cmp	r3, #2
 800b236:	d013      	beq.n	800b260 <tcpip_thread+0xa4>
 800b238:	b9b3      	cbnz	r3, 800b268 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b23a:	6860      	ldr	r0, [r4, #4]
 800b23c:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b240:	4798      	blx	r3
 800b242:	b110      	cbz	r0, 800b24a <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 800b244:	6860      	ldr	r0, [r4, #4]
 800b246:	f001 f9c3 	bl	800c5d0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b24a:	4621      	mov	r1, r4
 800b24c:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b24e:	f000 ffc3 	bl	800c1d8 <memp_free>
      break;
 800b252:	e7c0      	b.n	800b1d6 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b254:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b258:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b25a:	4621      	mov	r1, r4
 800b25c:	2008      	movs	r0, #8
 800b25e:	e7f6      	b.n	800b24e <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b260:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b264:	4798      	blx	r3
      break;
 800b266:	e7b6      	b.n	800b1d6 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b268:	4633      	mov	r3, r6
 800b26a:	22dd      	movs	r2, #221	@ 0xdd
 800b26c:	e7c7      	b.n	800b1fe <tcpip_thread+0x42>
 800b26e:	bf00      	nop
 800b270:	2000d154 	.word	0x2000d154
 800b274:	2000d160 	.word	0x2000d160
 800b278:	2000d15c 	.word	0x2000d15c
 800b27c:	2000d158 	.word	0x2000d158
 800b280:	080172c0 	.word	0x080172c0
 800b284:	080172de 	.word	0x080172de
 800b288:	080169d3 	.word	0x080169d3

0800b28c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b28e:	4b11      	ldr	r3, [pc, #68]	@ (800b2d4 <tcpip_inpkt+0x48>)
{
 800b290:	4607      	mov	r7, r0
 800b292:	460e      	mov	r6, r1
 800b294:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	b933      	cbnz	r3, 800b2a8 <tcpip_inpkt+0x1c>
 800b29a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2d8 <tcpip_inpkt+0x4c>)
 800b29c:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 800b2a0:	490e      	ldr	r1, [pc, #56]	@ (800b2dc <tcpip_inpkt+0x50>)
 800b2a2:	480f      	ldr	r0, [pc, #60]	@ (800b2e0 <tcpip_inpkt+0x54>)
 800b2a4:	f00a fc72 	bl	8015b8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b2a8:	2009      	movs	r0, #9
 800b2aa:	f000 ff77 	bl	800c19c <memp_malloc>
  if (msg == NULL) {
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	b168      	cbz	r0, 800b2ce <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800b2b2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b2b4:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 800b2b6:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 800b2b8:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 800b2ba:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b2be:	4805      	ldr	r0, [pc, #20]	@ (800b2d4 <tcpip_inpkt+0x48>)
 800b2c0:	f006 fd82 	bl	8011dc8 <sys_mbox_trypost>
 800b2c4:	b128      	cbz	r0, 800b2d2 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	2009      	movs	r0, #9
 800b2ca:	f000 ff85 	bl	800c1d8 <memp_free>
    return ERR_MEM;
 800b2ce:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d4:	2000d158 	.word	0x2000d158
 800b2d8:	080172c0 	.word	0x080172c0
 800b2dc:	080172fc 	.word	0x080172fc
 800b2e0:	080169d3 	.word	0x080169d3

0800b2e4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b2e4:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 800b2e8:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800b2ec:	bf14      	ite	ne
 800b2ee:	4a02      	ldrne	r2, [pc, #8]	@ (800b2f8 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b2f0:	4a02      	ldreq	r2, [pc, #8]	@ (800b2fc <tcpip_input+0x18>)
 800b2f2:	f7ff bfcb 	b.w	800b28c <tcpip_inpkt>
 800b2f6:	bf00      	nop
 800b2f8:	080119e9 	.word	0x080119e9
 800b2fc:	08010f21 	.word	0x08010f21

0800b300 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b300:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b302:	4e06      	ldr	r6, [pc, #24]	@ (800b31c <tcpip_send_msg_wait_sem+0x1c>)
{
 800b304:	460d      	mov	r5, r1
 800b306:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800b308:	4630      	mov	r0, r6
 800b30a:	f006 fc17 	bl	8011b3c <sys_mutex_lock>
  fn(apimsg);
 800b30e:	4628      	mov	r0, r5
 800b310:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800b312:	4630      	mov	r0, r6
 800b314:	f006 fc3e 	bl	8011b94 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b318:	2000      	movs	r0, #0
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	2000d154 	.word	0x2000d154

0800b320 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800b320:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800b322:	4e07      	ldr	r6, [pc, #28]	@ (800b340 <tcpip_api_call+0x20>)
{
 800b324:	460d      	mov	r5, r1
 800b326:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800b328:	4630      	mov	r0, r6
 800b32a:	f006 fc07 	bl	8011b3c <sys_mutex_lock>
  err = fn(call);
 800b32e:	4628      	mov	r0, r5
 800b330:	47a0      	blx	r4
 800b332:	4604      	mov	r4, r0
  UNLOCK_TCPIP_CORE();
 800b334:	4630      	mov	r0, r6
 800b336:	f006 fc2d 	bl	8011b94 <sys_mutex_unlock>
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b33a:	4620      	mov	r0, r4
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
 800b33e:	bf00      	nop
 800b340:	2000d154 	.word	0x2000d154

0800b344 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b346:	4605      	mov	r5, r0
 800b348:	460c      	mov	r4, r1
  lwip_init();
 800b34a:	f000 fc3b 	bl	800bbc4 <lwip_init>

  tcpip_init_done = initfunc;
 800b34e:	4b13      	ldr	r3, [pc, #76]	@ (800b39c <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b350:	2106      	movs	r1, #6
 800b352:	4813      	ldr	r0, [pc, #76]	@ (800b3a0 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 800b354:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 800b356:	4b13      	ldr	r3, [pc, #76]	@ (800b3a4 <tcpip_init+0x60>)
 800b358:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b35a:	f006 fd0d 	bl	8011d78 <sys_mbox_new>
 800b35e:	b130      	cbz	r0, 800b36e <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b360:	4b11      	ldr	r3, [pc, #68]	@ (800b3a8 <tcpip_init+0x64>)
 800b362:	f240 229a 	movw	r2, #666	@ 0x29a
 800b366:	4911      	ldr	r1, [pc, #68]	@ (800b3ac <tcpip_init+0x68>)
 800b368:	4811      	ldr	r0, [pc, #68]	@ (800b3b0 <tcpip_init+0x6c>)
 800b36a:	f00a fc0f 	bl	8015b8c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b36e:	4811      	ldr	r0, [pc, #68]	@ (800b3b4 <tcpip_init+0x70>)
 800b370:	f006 fbcc 	bl	8011b0c <sys_mutex_new>
 800b374:	b130      	cbz	r0, 800b384 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b376:	4b0c      	ldr	r3, [pc, #48]	@ (800b3a8 <tcpip_init+0x64>)
 800b378:	f240 229e 	movw	r2, #670	@ 0x29e
 800b37c:	490e      	ldr	r1, [pc, #56]	@ (800b3b8 <tcpip_init+0x74>)
 800b37e:	480c      	ldr	r0, [pc, #48]	@ (800b3b0 <tcpip_init+0x6c>)
 800b380:	f00a fc04 	bl	8015b8c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b384:	2302      	movs	r3, #2
 800b386:	2200      	movs	r2, #0
 800b388:	490c      	ldr	r1, [pc, #48]	@ (800b3bc <tcpip_init+0x78>)
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b390:	480b      	ldr	r0, [pc, #44]	@ (800b3c0 <tcpip_init+0x7c>)
 800b392:	f006 fde9 	bl	8011f68 <sys_thread_new>
}
 800b396:	b003      	add	sp, #12
 800b398:	bd30      	pop	{r4, r5, pc}
 800b39a:	bf00      	nop
 800b39c:	2000d160 	.word	0x2000d160
 800b3a0:	2000d158 	.word	0x2000d158
 800b3a4:	2000d15c 	.word	0x2000d15c
 800b3a8:	080172c0 	.word	0x080172c0
 800b3ac:	08017309 	.word	0x08017309
 800b3b0:	080169d3 	.word	0x080169d3
 800b3b4:	2000d154 	.word	0x2000d154
 800b3b8:	0801732c 	.word	0x0801732c
 800b3bc:	0800b1bd 	.word	0x0800b1bd
 800b3c0:	0801734d 	.word	0x0801734d

0800b3c4 <lwiperf_tcp_close>:
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800b3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	4604      	mov	r4, r0
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800b3ca:	4838      	ldr	r0, [pc, #224]	@ (800b4ac <lwiperf_tcp_close+0xe8>)
{
 800b3cc:	b087      	sub	sp, #28
 800b3ce:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800b3d0:	6803      	ldr	r3, [r0, #0]
  lwiperf_state_base_t *prev = NULL;
 800b3d2:	2200      	movs	r2, #0
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800b3d4:	bb23      	cbnz	r3, 800b420 <lwiperf_tcp_close+0x5c>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 800b3d6:	bb7c      	cbnz	r4, 800b438 <lwiperf_tcp_close+0x74>
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 800b3d8:	6920      	ldr	r0, [r4, #16]
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d056      	beq.n	800b48c <lwiperf_tcp_close+0xc8>
    tcp_arg(conn->conn_pcb, NULL);
 800b3de:	2100      	movs	r1, #0
 800b3e0:	f001 fd3a 	bl	800ce58 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	6920      	ldr	r0, [r4, #16]
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	f001 fd85 	bl	800cef8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	6920      	ldr	r0, [r4, #16]
 800b3f2:	f001 fd4d 	bl	800ce90 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6920      	ldr	r0, [r4, #16]
 800b3fa:	f001 fd31 	bl	800ce60 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 800b3fe:	6920      	ldr	r0, [r4, #16]
 800b400:	2100      	movs	r1, #0
 800b402:	f001 fd5b 	bl	800cebc <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800b406:	6920      	ldr	r0, [r4, #16]
 800b408:	f002 f8ce 	bl	800d5a8 <tcp_close>
    if (err != ERR_OK) {
 800b40c:	b110      	cbz	r0, 800b414 <lwiperf_tcp_close+0x50>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 800b40e:	6920      	ldr	r0, [r4, #16]
 800b410:	f002 fa18 	bl	800d844 <tcp_abort>
  } else if (conn->server_pcb != NULL) {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800b414:	4620      	mov	r0, r4
}
 800b416:	b007      	add	sp, #28
 800b418:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800b41c:	f000 bc18 	b.w	800bc50 <mem_free>
    if (iter == item) {
 800b420:	429c      	cmp	r4, r3
        lwiperf_all_connections = iter->next;
 800b422:	6819      	ldr	r1, [r3, #0]
    if (iter == item) {
 800b424:	d12f      	bne.n	800b486 <lwiperf_tcp_close+0xc2>
      if (prev == NULL) {
 800b426:	bb12      	cbnz	r2, 800b46e <lwiperf_tcp_close+0xaa>
        lwiperf_all_connections = iter->next;
 800b428:	6001      	str	r1, [r0, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800b42a:	681d      	ldr	r5, [r3, #0]
        LWIP_ASSERT("duplicate entry", iter != item);
 800b42c:	4f20      	ldr	r7, [pc, #128]	@ (800b4b0 <lwiperf_tcp_close+0xec>)
 800b42e:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800b4bc <lwiperf_tcp_close+0xf8>
 800b432:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 800b4b8 <lwiperf_tcp_close+0xf4>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800b436:	b9e5      	cbnz	r5, 800b472 <lwiperf_tcp_close+0xae>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 800b438:	69a3      	ldr	r3, [r4, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0cc      	beq.n	800b3d8 <lwiperf_tcp_close+0x14>
    now = sys_now();
 800b43e:	f006 fb5c 	bl	8011afa <sys_now>
    duration_ms = now - conn->time_started;
 800b442:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 800b444:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b446:	1ac0      	subs	r0, r0, r3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 800b448:	6922      	ldr	r2, [r4, #16]
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800b44a:	bf16      	itet	ne
 800b44c:	fbb1 f5f0 	udivne	r5, r1, r0
      bandwidth_kbitpsec = 0;
 800b450:	4605      	moveq	r5, r0
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800b452:	00ed      	lslne	r5, r5, #3
    conn->report_fn(conn->report_arg, report_type,
 800b454:	8ad3      	ldrh	r3, [r2, #22]
 800b456:	9102      	str	r1, [sp, #8]
 800b458:	e9cd 0503 	strd	r0, r5, [sp, #12]
 800b45c:	8b11      	ldrh	r1, [r2, #24]
 800b45e:	9101      	str	r1, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800b460:	1d11      	adds	r1, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 800b462:	9100      	str	r1, [sp, #0]
 800b464:	4631      	mov	r1, r6
 800b466:	69a5      	ldr	r5, [r4, #24]
 800b468:	69e0      	ldr	r0, [r4, #28]
 800b46a:	47a8      	blx	r5
 800b46c:	e7b4      	b.n	800b3d8 <lwiperf_tcp_close+0x14>
        prev->next = iter->next;
 800b46e:	6011      	str	r1, [r2, #0]
 800b470:	e7db      	b.n	800b42a <lwiperf_tcp_close+0x66>
        LWIP_ASSERT("duplicate entry", iter != item);
 800b472:	42ac      	cmp	r4, r5
 800b474:	d105      	bne.n	800b482 <lwiperf_tcp_close+0xbe>
 800b476:	463b      	mov	r3, r7
 800b478:	22d1      	movs	r2, #209	@ 0xd1
 800b47a:	4641      	mov	r1, r8
 800b47c:	4648      	mov	r0, r9
 800b47e:	f00a fb85 	bl	8015b8c <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800b482:	682d      	ldr	r5, [r5, #0]
 800b484:	e7d7      	b.n	800b436 <lwiperf_tcp_close+0x72>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800b486:	461a      	mov	r2, r3
 800b488:	460b      	mov	r3, r1
 800b48a:	e7a3      	b.n	800b3d4 <lwiperf_tcp_close+0x10>
  } else if (conn->server_pcb != NULL) {
 800b48c:	68e0      	ldr	r0, [r4, #12]
 800b48e:	2800      	cmp	r0, #0
 800b490:	d0c0      	beq.n	800b414 <lwiperf_tcp_close+0x50>
    err = tcp_close(conn->server_pcb);
 800b492:	f002 f889 	bl	800d5a8 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 800b496:	2800      	cmp	r0, #0
 800b498:	d0bc      	beq.n	800b414 <lwiperf_tcp_close+0x50>
 800b49a:	4b05      	ldr	r3, [pc, #20]	@ (800b4b0 <lwiperf_tcp_close+0xec>)
 800b49c:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800b4a0:	4904      	ldr	r1, [pc, #16]	@ (800b4b4 <lwiperf_tcp_close+0xf0>)
 800b4a2:	4805      	ldr	r0, [pc, #20]	@ (800b4b8 <lwiperf_tcp_close+0xf4>)
 800b4a4:	f00a fb72 	bl	8015b8c <iprintf>
 800b4a8:	e7b4      	b.n	800b414 <lwiperf_tcp_close+0x50>
 800b4aa:	bf00      	nop
 800b4ac:	2000d164 	.word	0x2000d164
 800b4b0:	08017354 	.word	0x08017354
 800b4b4:	08017140 	.word	0x08017140
 800b4b8:	080169d3 	.word	0x080169d3
 800b4bc:	0801737d 	.word	0x0801737d

0800b4c0 <lwiperf_tcp_accept>:
}

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	460e      	mov	r6, r1
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800b4c6:	4617      	mov	r7, r2
 800b4c8:	b11a      	cbz	r2, 800b4d2 <lwiperf_tcp_accept+0x12>
    return ERR_VAL;
 800b4ca:	f06f 0705 	mvn.w	r7, #5
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
}
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800b4d2:	2900      	cmp	r1, #0
 800b4d4:	d0f9      	beq.n	800b4ca <lwiperf_tcp_accept+0xa>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d0f7      	beq.n	800b4ca <lwiperf_tcp_accept+0xa>
  LWIP_ASSERT("invalid session", s->base.server);
 800b4da:	7943      	ldrb	r3, [r0, #5]
 800b4dc:	b933      	cbnz	r3, 800b4ec <lwiperf_tcp_accept+0x2c>
 800b4de:	4b3b      	ldr	r3, [pc, #236]	@ (800b5cc <lwiperf_tcp_accept+0x10c>)
 800b4e0:	f240 225e 	movw	r2, #606	@ 0x25e
 800b4e4:	493a      	ldr	r1, [pc, #232]	@ (800b5d0 <lwiperf_tcp_accept+0x110>)
 800b4e6:	483b      	ldr	r0, [pc, #236]	@ (800b5d4 <lwiperf_tcp_accept+0x114>)
 800b4e8:	f00a fb50 	bl	8015b8c <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800b4ec:	68e3      	ldr	r3, [r4, #12]
 800b4ee:	b933      	cbnz	r3, 800b4fe <lwiperf_tcp_accept+0x3e>
 800b4f0:	4b36      	ldr	r3, [pc, #216]	@ (800b5cc <lwiperf_tcp_accept+0x10c>)
 800b4f2:	f240 225f 	movw	r2, #607	@ 0x25f
 800b4f6:	4938      	ldr	r1, [pc, #224]	@ (800b5d8 <lwiperf_tcp_accept+0x118>)
 800b4f8:	4836      	ldr	r0, [pc, #216]	@ (800b5d4 <lwiperf_tcp_accept+0x114>)
 800b4fa:	f00a fb47 	bl	8015b8c <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	b133      	cbz	r3, 800b510 <lwiperf_tcp_accept+0x50>
 800b502:	4b32      	ldr	r3, [pc, #200]	@ (800b5cc <lwiperf_tcp_accept+0x10c>)
 800b504:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800b508:	4934      	ldr	r1, [pc, #208]	@ (800b5dc <lwiperf_tcp_accept+0x11c>)
 800b50a:	4832      	ldr	r0, [pc, #200]	@ (800b5d4 <lwiperf_tcp_accept+0x114>)
 800b50c:	f00a fb3e 	bl	8015b8c <iprintf>
  if (s->specific_remote) {
 800b510:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800b514:	68a3      	ldr	r3, [r4, #8]
  if (s->specific_remote) {
 800b516:	2a00      	cmp	r2, #0
 800b518:	d047      	beq.n	800b5aa <lwiperf_tcp_accept+0xea>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800b51a:	b933      	cbnz	r3, 800b52a <lwiperf_tcp_accept+0x6a>
 800b51c:	4b2b      	ldr	r3, [pc, #172]	@ (800b5cc <lwiperf_tcp_accept+0x10c>)
 800b51e:	f240 2262 	movw	r2, #610	@ 0x262
 800b522:	492f      	ldr	r1, [pc, #188]	@ (800b5e0 <lwiperf_tcp_accept+0x120>)
 800b524:	482b      	ldr	r0, [pc, #172]	@ (800b5d4 <lwiperf_tcp_accept+0x114>)
 800b526:	f00a fb31 	bl	8015b8c <iprintf>
    if (!ip_addr_eq(&newpcb->remote_ip, &s->remote_addr)) {
 800b52a:	6872      	ldr	r2, [r6, #4]
 800b52c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b52e:	429a      	cmp	r2, r3
 800b530:	d1cb      	bne.n	800b4ca <lwiperf_tcp_accept+0xa>
  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800b532:	2048      	movs	r0, #72	@ 0x48
 800b534:	f000 fd1a 	bl	800bf6c <mem_malloc>
  if (conn == NULL) {
 800b538:	4605      	mov	r5, r0
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d043      	beq.n	800b5c6 <lwiperf_tcp_accept+0x106>
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 800b53e:	2248      	movs	r2, #72	@ 0x48
 800b540:	2100      	movs	r1, #0
 800b542:	f00a fc95 	bl	8015e70 <memset>
  conn->base.tcp = 1;
 800b546:	f240 1301 	movw	r3, #257	@ 0x101
  conn->conn_pcb = newpcb;
 800b54a:	612e      	str	r6, [r5, #16]
  conn->base.tcp = 1;
 800b54c:	80ab      	strh	r3, [r5, #4]
  conn->base.related_master_state = &s->base;
 800b54e:	60ac      	str	r4, [r5, #8]
  conn->time_started = sys_now();
 800b550:	f006 fad3 	bl	8011afa <sys_now>
  conn->report_fn = s->report_fn;
 800b554:	69a3      	ldr	r3, [r4, #24]
  tcp_arg(newpcb, conn);
 800b556:	4629      	mov	r1, r5
  conn->time_started = sys_now();
 800b558:	6168      	str	r0, [r5, #20]
  conn->report_fn = s->report_fn;
 800b55a:	61ab      	str	r3, [r5, #24]
  tcp_arg(newpcb, conn);
 800b55c:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 800b55e:	69e3      	ldr	r3, [r4, #28]
 800b560:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 800b562:	f001 fc79 	bl	800ce58 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800b566:	4630      	mov	r0, r6
 800b568:	491e      	ldr	r1, [pc, #120]	@ (800b5e4 <lwiperf_tcp_accept+0x124>)
 800b56a:	f001 fc79 	bl	800ce60 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800b56e:	4630      	mov	r0, r6
 800b570:	2202      	movs	r2, #2
 800b572:	491d      	ldr	r1, [pc, #116]	@ (800b5e8 <lwiperf_tcp_accept+0x128>)
 800b574:	f001 fcc0 	bl	800cef8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 800b578:	491c      	ldr	r1, [pc, #112]	@ (800b5ec <lwiperf_tcp_accept+0x12c>)
 800b57a:	6928      	ldr	r0, [r5, #16]
 800b57c:	f001 fc9e 	bl	800cebc <tcp_err>
  if (s->specific_remote) {
 800b580:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b584:	4e1a      	ldr	r6, [pc, #104]	@ (800b5f0 <lwiperf_tcp_accept+0x130>)
 800b586:	b163      	cbz	r3, 800b5a2 <lwiperf_tcp_accept+0xe2>
    conn->base.related_master_state = s->base.related_master_state;
 800b588:	68a2      	ldr	r2, [r4, #8]
 800b58a:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 800b58c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800b590:	b10b      	cbz	r3, 800b596 <lwiperf_tcp_accept+0xd6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800b592:	6833      	ldr	r3, [r6, #0]
 800b594:	b99b      	cbnz	r3, 800b5be <lwiperf_tcp_accept+0xfe>
      s->report_fn = NULL;
 800b596:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800b598:	2102      	movs	r1, #2
 800b59a:	4620      	mov	r0, r4
      s->report_fn = NULL;
 800b59c:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800b59e:	f7ff ff11 	bl	800b3c4 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 800b5a2:	6833      	ldr	r3, [r6, #0]
  lwiperf_all_connections = item;
 800b5a4:	6035      	str	r5, [r6, #0]
  item->next = lwiperf_all_connections;
 800b5a6:	602b      	str	r3, [r5, #0]
}
 800b5a8:	e791      	b.n	800b4ce <lwiperf_tcp_accept+0xe>
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d0c1      	beq.n	800b532 <lwiperf_tcp_accept+0x72>
 800b5ae:	4b07      	ldr	r3, [pc, #28]	@ (800b5cc <lwiperf_tcp_accept+0x10c>)
 800b5b0:	f44f 721a 	mov.w	r2, #616	@ 0x268
 800b5b4:	490f      	ldr	r1, [pc, #60]	@ (800b5f4 <lwiperf_tcp_accept+0x134>)
 800b5b6:	4807      	ldr	r0, [pc, #28]	@ (800b5d4 <lwiperf_tcp_accept+0x114>)
 800b5b8:	f00a fae8 	bl	8015b8c <iprintf>
 800b5bc:	e7b9      	b.n	800b532 <lwiperf_tcp_accept+0x72>
    if (iter == item) {
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d0ef      	beq.n	800b5a2 <lwiperf_tcp_accept+0xe2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	e7e6      	b.n	800b594 <lwiperf_tcp_accept+0xd4>
    return ERR_MEM;
 800b5c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b5ca:	e780      	b.n	800b4ce <lwiperf_tcp_accept+0xe>
 800b5cc:	08017354 	.word	0x08017354
 800b5d0:	0801738d 	.word	0x0801738d
 800b5d4:	080169d3 	.word	0x080169d3
 800b5d8:	0801739d 	.word	0x0801739d
 800b5dc:	080173b0 	.word	0x080173b0
 800b5e0:	080173c1 	.word	0x080173c1
 800b5e4:	0800b9a9 	.word	0x0800b9a9
 800b5e8:	0800b725 	.word	0x0800b725
 800b5ec:	0800b5f9 	.word	0x0800b5f9
 800b5f0:	2000d164 	.word	0x2000d164
 800b5f4:	080173e6 	.word	0x080173e6

0800b5f8 <lwiperf_tcp_err>:
  conn->conn_pcb = NULL;
 800b5f8:	2200      	movs	r2, #0
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800b5fa:	2105      	movs	r1, #5
  conn->server_pcb = NULL;
 800b5fc:	e9c0 2203 	strd	r2, r2, [r0, #12]
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800b600:	f7ff bee0 	b.w	800b3c4 <lwiperf_tcp_close>

0800b604 <lwiperf_tcp_client_send_more>:
{
 800b604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 800b608:	4604      	mov	r4, r0
 800b60a:	b118      	cbz	r0, 800b614 <lwiperf_tcp_client_send_more+0x10>
 800b60c:	7903      	ldrb	r3, [r0, #4]
 800b60e:	b10b      	cbz	r3, 800b614 <lwiperf_tcp_client_send_more+0x10>
 800b610:	7943      	ldrb	r3, [r0, #5]
 800b612:	b133      	cbz	r3, 800b622 <lwiperf_tcp_client_send_more+0x1e>
 800b614:	4b32      	ldr	r3, [pc, #200]	@ (800b6e0 <lwiperf_tcp_client_send_more+0xdc>)
 800b616:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800b61a:	4932      	ldr	r1, [pc, #200]	@ (800b6e4 <lwiperf_tcp_client_send_more+0xe0>)
 800b61c:	4832      	ldr	r0, [pc, #200]	@ (800b6e8 <lwiperf_tcp_client_send_more+0xe4>)
 800b61e:	f00a fab5 	bl	8015b8c <iprintf>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800b622:	4f32      	ldr	r7, [pc, #200]	@ (800b6ec <lwiperf_tcp_client_send_more+0xe8>)
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800b624:	f240 28da 	movw	r8, #730	@ 0x2da
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 800b628:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b62a:	0602      	lsls	r2, r0, #24
 800b62c:	d512      	bpl.n	800b654 <lwiperf_tcp_client_send_more+0x50>
      u32_t now = sys_now();
 800b62e:	f006 fa64 	bl	8011afa <sys_now>
      u32_t diff_ms = now - conn->time_started;
 800b632:	6963      	ldr	r3, [r4, #20]
 800b634:	1ac5      	subs	r5, r0, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800b636:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b638:	f000 fa75 	bl	800bb26 <lwip_htonl>
      u32_t time_ms = time * 10;
 800b63c:	f06f 0309 	mvn.w	r3, #9
 800b640:	4358      	muls	r0, r3
      if (diff_ms >= time_ms) {
 800b642:	4285      	cmp	r5, r0
 800b644:	d30b      	bcc.n	800b65e <lwiperf_tcp_client_send_more+0x5a>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800b646:	2101      	movs	r1, #1
 800b648:	4620      	mov	r0, r4
 800b64a:	f7ff febb 	bl	800b3c4 <lwiperf_tcp_close>
}
 800b64e:	2000      	movs	r0, #0
 800b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 800b654:	f000 fa67 	bl	800bb26 <lwip_htonl>
      if (conn->bytes_transferred >= amount_bytes) {
 800b658:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b65a:	4283      	cmp	r3, r0
 800b65c:	e7f2      	b.n	800b644 <lwiperf_tcp_client_send_more+0x40>
    if (conn->bytes_transferred < 24) {
 800b65e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b660:	2817      	cmp	r0, #23
 800b662:	d818      	bhi.n	800b696 <lwiperf_tcp_client_send_more+0x92>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800b664:	f104 0528 	add.w	r5, r4, #40	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 800b668:	f04f 0a01 	mov.w	sl, #1
    send_more = 0;
 800b66c:	f04f 0900 	mov.w	r9, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800b670:	4405      	add	r5, r0
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800b672:	f1c0 0018 	rsb	r0, r0, #24
 800b676:	b286      	uxth	r6, r0
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 800b678:	4653      	mov	r3, sl
 800b67a:	4632      	mov	r2, r6
 800b67c:	4629      	mov	r1, r5
 800b67e:	6920      	ldr	r0, [r4, #16]
 800b680:	f003 fd58 	bl	800f134 <tcp_write>
      if (err ==  ERR_MEM) {
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d122      	bne.n	800b6ce <lwiperf_tcp_client_send_more+0xca>
        txlen /= 2;
 800b688:	0876      	lsrs	r6, r6, #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800b68a:	4546      	cmp	r6, r8
 800b68c:	d0f4      	beq.n	800b678 <lwiperf_tcp_client_send_more+0x74>
  tcp_output(conn->conn_pcb);
 800b68e:	6920      	ldr	r0, [r4, #16]
 800b690:	f004 fa88 	bl	800fba4 <tcp_output>
  return ERR_OK;
 800b694:	e7db      	b.n	800b64e <lwiperf_tcp_client_send_more+0x4a>
    } else if (conn->bytes_transferred < 48) {
 800b696:	282f      	cmp	r0, #47	@ 0x2f
 800b698:	d809      	bhi.n	800b6ae <lwiperf_tcp_client_send_more+0xaa>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800b69a:	1825      	adds	r5, r4, r0
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800b69c:	f1c0 0030 	rsb	r0, r0, #48	@ 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 800b6a0:	f04f 0a03 	mov.w	sl, #3
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800b6a4:	3510      	adds	r5, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800b6a6:	b286      	uxth	r6, r0
      apiflags = 0; /* no copying needed */
 800b6a8:	f04f 0901 	mov.w	r9, #1
    txlen = txlen_max;
 800b6ac:	e7e4      	b.n	800b678 <lwiperf_tcp_client_send_more+0x74>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800b6ae:	230a      	movs	r3, #10
      apiflags = 0; /* no copying needed */
 800b6b0:	f240 569c 	movw	r6, #1436	@ 0x59c
 800b6b4:	f04f 0a00 	mov.w	sl, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800b6b8:	fbb0 f5f3 	udiv	r5, r0, r3
 800b6bc:	fb03 0515 	mls	r5, r3, r5, r0
      apiflags = 0; /* no copying needed */
 800b6c0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800b6c4:	443d      	add	r5, r7
      apiflags = 0; /* no copying needed */
 800b6c6:	2830      	cmp	r0, #48	@ 0x30
 800b6c8:	bf18      	it	ne
 800b6ca:	461e      	movne	r6, r3
 800b6cc:	e7ec      	b.n	800b6a8 <lwiperf_tcp_client_send_more+0xa4>
    if (err == ERR_OK) {
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d1dd      	bne.n	800b68e <lwiperf_tcp_client_send_more+0x8a>
      conn->bytes_transferred += txlen;
 800b6d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b6d4:	4433      	add	r3, r6
 800b6d6:	6263      	str	r3, [r4, #36]	@ 0x24
  } while (send_more);
 800b6d8:	f1b9 0f00 	cmp.w	r9, #0
 800b6dc:	d1a4      	bne.n	800b628 <lwiperf_tcp_client_send_more+0x24>
 800b6de:	e7d6      	b.n	800b68e <lwiperf_tcp_client_send_more+0x8a>
 800b6e0:	08017354 	.word	0x08017354
 800b6e4:	0801740b 	.word	0x0801740b
 800b6e8:	080169d3 	.word	0x080169d3
 800b6ec:	0808f1ab 	.word	0x0808f1ab

0800b6f0 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800b6f0:	6903      	ldr	r3, [r0, #16]
 800b6f2:	428b      	cmp	r3, r1
{
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800b6f8:	d006      	beq.n	800b708 <lwiperf_tcp_client_sent+0x18>
 800b6fa:	4b07      	ldr	r3, [pc, #28]	@ (800b718 <lwiperf_tcp_client_sent+0x28>)
 800b6fc:	f240 1267 	movw	r2, #359	@ 0x167
 800b700:	4906      	ldr	r1, [pc, #24]	@ (800b71c <lwiperf_tcp_client_sent+0x2c>)
 800b702:	4807      	ldr	r0, [pc, #28]	@ (800b720 <lwiperf_tcp_client_sent+0x30>)
 800b704:	f00a fa42 	bl	8015b8c <iprintf>
  conn->poll_count = 0;
 800b708:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 800b70a:	4620      	mov	r0, r4
  conn->poll_count = 0;
 800b70c:	f884 3020 	strb.w	r3, [r4, #32]
}
 800b710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 800b714:	f7ff bf76 	b.w	800b604 <lwiperf_tcp_client_send_more>
 800b718:	08017354 	.word	0x08017354
 800b71c:	0801703a 	.word	0x0801703a
 800b720:	080169d3 	.word	0x080169d3

0800b724 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800b724:	6903      	ldr	r3, [r0, #16]
 800b726:	428b      	cmp	r3, r1
{
 800b728:	b510      	push	{r4, lr}
 800b72a:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800b72c:	d006      	beq.n	800b73c <lwiperf_tcp_poll+0x18>
 800b72e:	4b0e      	ldr	r3, [pc, #56]	@ (800b768 <lwiperf_tcp_poll+0x44>)
 800b730:	f240 2246 	movw	r2, #582	@ 0x246
 800b734:	490d      	ldr	r1, [pc, #52]	@ (800b76c <lwiperf_tcp_poll+0x48>)
 800b736:	480e      	ldr	r0, [pc, #56]	@ (800b770 <lwiperf_tcp_poll+0x4c>)
 800b738:	f00a fa28 	bl	8015b8c <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 800b73c:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b740:	3301      	adds	r3, #1
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b09      	cmp	r3, #9
 800b746:	f884 3020 	strb.w	r3, [r4, #32]
 800b74a:	d905      	bls.n	800b758 <lwiperf_tcp_poll+0x34>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800b74c:	2102      	movs	r1, #2
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff fe38 	bl	800b3c4 <lwiperf_tcp_close>
}
 800b754:	2000      	movs	r0, #0
 800b756:	bd10      	pop	{r4, pc}
  if (!conn->base.server) {
 800b758:	7963      	ldrb	r3, [r4, #5]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1fa      	bne.n	800b754 <lwiperf_tcp_poll+0x30>
    lwiperf_tcp_client_send_more(conn);
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ff50 	bl	800b604 <lwiperf_tcp_client_send_more>
 800b764:	e7f6      	b.n	800b754 <lwiperf_tcp_poll+0x30>
 800b766:	bf00      	nop
 800b768:	08017354 	.word	0x08017354
 800b76c:	08017418 	.word	0x08017418
 800b770:	080169d3 	.word	0x080169d3

0800b774 <lwiperf_tcp_client_connected>:
{
 800b774:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800b776:	6903      	ldr	r3, [r0, #16]
{
 800b778:	4604      	mov	r4, r0
 800b77a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800b77c:	428b      	cmp	r3, r1
 800b77e:	d006      	beq.n	800b78e <lwiperf_tcp_client_connected+0x1a>
 800b780:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <lwiperf_tcp_client_connected+0x3c>)
 800b782:	f240 1275 	movw	r2, #373	@ 0x175
 800b786:	490b      	ldr	r1, [pc, #44]	@ (800b7b4 <lwiperf_tcp_client_connected+0x40>)
 800b788:	480b      	ldr	r0, [pc, #44]	@ (800b7b8 <lwiperf_tcp_client_connected+0x44>)
 800b78a:	f00a f9ff 	bl	8015b8c <iprintf>
  if (err != ERR_OK) {
 800b78e:	b94d      	cbnz	r5, 800b7a4 <lwiperf_tcp_client_connected+0x30>
  conn->poll_count = 0;
 800b790:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 800b794:	f006 f9b1 	bl	8011afa <sys_now>
 800b798:	6160      	str	r0, [r4, #20]
  return lwiperf_tcp_client_send_more(conn);
 800b79a:	4620      	mov	r0, r4
}
 800b79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 800b7a0:	f7ff bf30 	b.w	800b604 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	2105      	movs	r1, #5
 800b7a8:	f7ff fe0c 	bl	800b3c4 <lwiperf_tcp_close>
}
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	08017354 	.word	0x08017354
 800b7b4:	0801703a 	.word	0x0801703a
 800b7b8:	080169d3 	.word	0x080169d3

0800b7bc <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 800b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	460f      	mov	r7, r1
 800b7c2:	4690      	mov	r8, r2
 800b7c4:	461e      	mov	r6, r3

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d039      	beq.n	800b840 <lwiperf_start_tcp_server_impl.constprop.0+0x84>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800b7cc:	2048      	movs	r0, #72	@ 0x48
 800b7ce:	f000 fbcd 	bl	800bf6c <mem_malloc>
  if (s == NULL) {
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	b308      	cbz	r0, 800b81a <lwiperf_start_tcp_server_impl.constprop.0+0x5e>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 800b7d6:	2248      	movs	r2, #72	@ 0x48
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f00a fb49 	bl	8015e70 <memset>
  s->base.tcp = 1;
 800b7de:	f240 1301 	movw	r3, #257	@ 0x101
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
  s->report_fn = report_fn;
  s->report_arg = report_arg;

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800b7e2:	202e      	movs	r0, #46	@ 0x2e
  s->base.tcp = 1;
 800b7e4:	80a3      	strh	r3, [r4, #4]
  s->base.related_master_state = related_master_state;
 800b7e6:	9b06      	ldr	r3, [sp, #24]
  s->report_arg = report_arg;
 800b7e8:	e9c4 8606 	strd	r8, r6, [r4, #24]
  s->base.related_master_state = related_master_state;
 800b7ec:	60a3      	str	r3, [r4, #8]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800b7ee:	f002 f919 	bl	800da24 <tcp_new_ip_type>
  if (pcb == NULL) {
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	b188      	cbz	r0, 800b81a <lwiperf_start_tcp_server_impl.constprop.0+0x5e>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	463a      	mov	r2, r7
 800b7fa:	f001 fa19 	bl	800cc30 <tcp_bind>
  if (err != ERR_OK) {
 800b7fe:	4605      	mov	r5, r0
 800b800:	b968      	cbnz	r0, 800b81e <lwiperf_start_tcp_server_impl.constprop.0+0x62>
    return err;
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800b802:	2101      	movs	r1, #1
 800b804:	4630      	mov	r0, r6
 800b806:	f001 faa7 	bl	800cd58 <tcp_listen_with_backlog>
 800b80a:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 800b80c:	b950      	cbnz	r0, 800b824 <lwiperf_start_tcp_server_impl.constprop.0+0x68>
    if (pcb != NULL) {
      tcp_close(pcb);
 800b80e:	4630      	mov	r0, r6
 800b810:	f001 feca 	bl	800d5a8 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 800b814:	4620      	mov	r0, r4
 800b816:	f000 fa1b 	bl	800bc50 <mem_free>
    return ERR_MEM;
 800b81a:	f04f 35ff 	mov.w	r5, #4294967295
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 800b81e:	4628      	mov	r0, r5
 800b820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tcp_arg(s->server_pcb, s);
 800b824:	4621      	mov	r1, r4
 800b826:	f001 fb17 	bl	800ce58 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 800b82a:	4907      	ldr	r1, [pc, #28]	@ (800b848 <lwiperf_start_tcp_server_impl.constprop.0+0x8c>)
 800b82c:	68e0      	ldr	r0, [r4, #12]
 800b82e:	f001 fb5d 	bl	800ceec <tcp_accept>
  item->next = lwiperf_all_connections;
 800b832:	4b06      	ldr	r3, [pc, #24]	@ (800b84c <lwiperf_start_tcp_server_impl.constprop.0+0x90>)
 800b834:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800b836:	601c      	str	r4, [r3, #0]
  *state = s;
 800b838:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 800b83a:	6022      	str	r2, [r4, #0]
  *state = s;
 800b83c:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800b83e:	e7ee      	b.n	800b81e <lwiperf_start_tcp_server_impl.constprop.0+0x62>
    return ERR_ARG;
 800b840:	f06f 050f 	mvn.w	r5, #15
 800b844:	e7eb      	b.n	800b81e <lwiperf_start_tcp_server_impl.constprop.0+0x62>
 800b846:	bf00      	nop
 800b848:	0800b4c1 	.word	0x0800b4c1
 800b84c:	2000d164 	.word	0x2000d164

0800b850 <lwiperf_tx_start_impl>:
{
 800b850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800b858:	468a      	mov	sl, r1
 800b85a:	4616      	mov	r6, r2
 800b85c:	469b      	mov	fp, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800b85e:	4607      	mov	r7, r0
 800b860:	b930      	cbnz	r0, 800b870 <lwiperf_tx_start_impl+0x20>
 800b862:	4b34      	ldr	r3, [pc, #208]	@ (800b934 <lwiperf_tx_start_impl+0xe4>)
 800b864:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800b868:	4933      	ldr	r1, [pc, #204]	@ (800b938 <lwiperf_tx_start_impl+0xe8>)
 800b86a:	4834      	ldr	r0, [pc, #208]	@ (800b93c <lwiperf_tx_start_impl+0xec>)
 800b86c:	f00a f98e 	bl	8015b8c <iprintf>
  *new_conn = NULL;
 800b870:	f04f 0900 	mov.w	r9, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800b874:	2048      	movs	r0, #72	@ 0x48
  *new_conn = NULL;
 800b876:	f8c8 9000 	str.w	r9, [r8]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800b87a:	f000 fb77 	bl	800bf6c <mem_malloc>
  if (client_conn == NULL) {
 800b87e:	4604      	mov	r4, r0
 800b880:	b138      	cbz	r0, 800b892 <lwiperf_tx_start_impl+0x42>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 800b882:	4648      	mov	r0, r9
 800b884:	f002 f8ce 	bl	800da24 <tcp_new_ip_type>
  if (newpcb == NULL) {
 800b888:	4605      	mov	r5, r0
 800b88a:	b940      	cbnz	r0, 800b89e <lwiperf_tx_start_impl+0x4e>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 f9df 	bl	800bc50 <mem_free>
    return ERR_MEM;
 800b892:	f04f 35ff 	mov.w	r5, #4294967295
}
 800b896:	4628      	mov	r0, r5
 800b898:	b003      	add	sp, #12
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 800b89e:	2248      	movs	r2, #72	@ 0x48
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f00a fae4 	bl	8015e70 <memset>
  client_conn->base.tcp = 1;
 800b8a8:	2301      	movs	r3, #1
  client_conn->conn_pcb = newpcb;
 800b8aa:	6125      	str	r5, [r4, #16]
  client_conn->base.tcp = 1;
 800b8ac:	7123      	strb	r3, [r4, #4]
  client_conn->base.related_master_state = related_master_state;
 800b8ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8b0:	60a3      	str	r3, [r4, #8]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 800b8b2:	f006 f922 	bl	8011afa <sys_now>
  client_conn->report_arg = report_arg;
 800b8b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800b8b8:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800b8bc:	f106 0118 	add.w	r1, r6, #24
  client_conn->report_arg = report_arg;
 800b8c0:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800b8c2:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 800b8c4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800b8c8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800b8cc:	4633      	mov	r3, r6
  client_conn->report_fn = report_fn;
 800b8ce:	e9c4 0b05 	strd	r0, fp, [r4, #20]
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800b8d2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b8d6:	428b      	cmp	r3, r1
 800b8d8:	f842 0b04 	str.w	r0, [r2], #4
 800b8dc:	d1f9      	bne.n	800b8d2 <lwiperf_tx_start_impl+0x82>
  client_conn->have_settings_buf = 1;
 800b8de:	2301      	movs	r3, #1
  tcp_arg(newpcb, client_conn);
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	4621      	mov	r1, r4
  client_conn->have_settings_buf = 1;
 800b8e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  tcp_arg(newpcb, client_conn);
 800b8e8:	f001 fab6 	bl	800ce58 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	4914      	ldr	r1, [pc, #80]	@ (800b940 <lwiperf_tx_start_impl+0xf0>)
 800b8f0:	f001 face 	bl	800ce90 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	4912      	ldr	r1, [pc, #72]	@ (800b944 <lwiperf_tx_start_impl+0xf4>)
 800b8fa:	f001 fafd 	bl	800cef8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800b8fe:	4628      	mov	r0, r5
 800b900:	4911      	ldr	r1, [pc, #68]	@ (800b948 <lwiperf_tx_start_impl+0xf8>)
 800b902:	f001 fadb 	bl	800cebc <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 800b906:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800b908:	4628      	mov	r0, r5
 800b90a:	4652      	mov	r2, sl
  ip_addr_copy(remote_addr, *remote_ip);
 800b90c:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800b90e:	a901      	add	r1, sp, #4
 800b910:	4b0e      	ldr	r3, [pc, #56]	@ (800b94c <lwiperf_tx_start_impl+0xfc>)
 800b912:	f002 f8c3 	bl	800da9c <tcp_connect>
  if (err != ERR_OK) {
 800b916:	4605      	mov	r5, r0
 800b918:	b120      	cbz	r0, 800b924 <lwiperf_tx_start_impl+0xd4>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800b91a:	2102      	movs	r1, #2
 800b91c:	4620      	mov	r0, r4
 800b91e:	f7ff fd51 	bl	800b3c4 <lwiperf_tcp_close>
    return err;
 800b922:	e7b8      	b.n	800b896 <lwiperf_tx_start_impl+0x46>
  item->next = lwiperf_all_connections;
 800b924:	4b0a      	ldr	r3, [pc, #40]	@ (800b950 <lwiperf_tx_start_impl+0x100>)
 800b926:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800b928:	601c      	str	r4, [r3, #0]
  item->next = lwiperf_all_connections;
 800b92a:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 800b92c:	f8c8 4000 	str.w	r4, [r8]
  return ERR_OK;
 800b930:	e7b1      	b.n	800b896 <lwiperf_tx_start_impl+0x46>
 800b932:	bf00      	nop
 800b934:	08017354 	.word	0x08017354
 800b938:	08017425 	.word	0x08017425
 800b93c:	080169d3 	.word	0x080169d3
 800b940:	0800b6f1 	.word	0x0800b6f1
 800b944:	0800b725 	.word	0x0800b725
 800b948:	0800b5f9 	.word	0x0800b5f9
 800b94c:	0800b775 	.word	0x0800b775
 800b950:	2000d164 	.word	0x2000d164

0800b954 <lwiperf_tx_start_passive>:
{
 800b954:	b530      	push	{r4, r5, lr}
 800b956:	b087      	sub	sp, #28
 800b958:	4604      	mov	r4, r0
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 800b95a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800b95c:	f000 f8e3 	bl	800bb26 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 800b960:	ab05      	add	r3, sp, #20
 800b962:	6925      	ldr	r5, [r4, #16]
 800b964:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800b968:	9302      	str	r3, [sp, #8]
 800b96a:	b281      	uxth	r1, r0
 800b96c:	68a3      	ldr	r3, [r4, #8]
 800b96e:	1d28      	adds	r0, r5, #4
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	69e3      	ldr	r3, [r4, #28]
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	69a3      	ldr	r3, [r4, #24]
 800b978:	f7ff ff6a 	bl	800b850 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 800b97c:	4604      	mov	r4, r0
 800b97e:	b950      	cbnz	r0, 800b996 <lwiperf_tx_start_passive+0x42>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800b980:	9d05      	ldr	r5, [sp, #20]
 800b982:	b935      	cbnz	r5, 800b992 <lwiperf_tx_start_passive+0x3e>
 800b984:	4b05      	ldr	r3, [pc, #20]	@ (800b99c <lwiperf_tx_start_passive+0x48>)
 800b986:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800b98a:	4905      	ldr	r1, [pc, #20]	@ (800b9a0 <lwiperf_tx_start_passive+0x4c>)
 800b98c:	4805      	ldr	r0, [pc, #20]	@ (800b9a4 <lwiperf_tx_start_passive+0x50>)
 800b98e:	f00a f8fd 	bl	8015b8c <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 800b992:	2300      	movs	r3, #0
 800b994:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 800b996:	4620      	mov	r0, r4
 800b998:	b007      	add	sp, #28
 800b99a:	bd30      	pop	{r4, r5, pc}
 800b99c:	08017354 	.word	0x08017354
 800b9a0:	08017437 	.word	0x08017437
 800b9a4:	080169d3 	.word	0x080169d3

0800b9a8 <lwiperf_tcp_recv>:
{
 800b9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	461e      	mov	r6, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800b9ae:	6903      	ldr	r3, [r0, #16]
{
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	460f      	mov	r7, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800b9b4:	428b      	cmp	r3, r1
{
 800b9b6:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800b9b8:	d006      	beq.n	800b9c8 <lwiperf_tcp_recv+0x20>
 800b9ba:	4b46      	ldr	r3, [pc, #280]	@ (800bad4 <lwiperf_tcp_recv+0x12c>)
 800b9bc:	f240 12d1 	movw	r2, #465	@ 0x1d1
 800b9c0:	4945      	ldr	r1, [pc, #276]	@ (800bad8 <lwiperf_tcp_recv+0x130>)
 800b9c2:	4846      	ldr	r0, [pc, #280]	@ (800badc <lwiperf_tcp_recv+0x134>)
 800b9c4:	f00a f8e2 	bl	8015b8c <iprintf>
  if (err != ERR_OK) {
 800b9c8:	b136      	cbz	r6, 800b9d8 <lwiperf_tcp_recv+0x30>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800b9ca:	2105      	movs	r1, #5
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7ff fcf9 	bl	800b3c4 <lwiperf_tcp_close>
}
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (p == NULL) {
 800b9d8:	b94d      	cbnz	r5, 800b9ee <lwiperf_tcp_recv+0x46>
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800b9da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b9dc:	0619      	lsls	r1, r3, #24
 800b9de:	d504      	bpl.n	800b9ea <lwiperf_tcp_recv+0x42>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 800b9e0:	01da      	lsls	r2, r3, #7
 800b9e2:	d402      	bmi.n	800b9ea <lwiperf_tcp_recv+0x42>
        lwiperf_tx_start_passive(conn);
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f7ff ffb5 	bl	800b954 <lwiperf_tx_start_passive>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	e7ee      	b.n	800b9cc <lwiperf_tcp_recv+0x24>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800b9ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  tot_len = p->tot_len;
 800b9f2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
  conn->poll_count = 0;
 800b9f6:	f884 6020 	strb.w	r6, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d05b      	beq.n	800bab6 <lwiperf_tcp_recv+0x10e>
 800b9fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ba00:	03db      	lsls	r3, r3, #15
 800ba02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ba06:	d04b      	beq.n	800baa0 <lwiperf_tcp_recv+0xf8>
  for (q = p; q != NULL; q = q->next) {
 800ba08:	462b      	mov	r3, r5
  packet_idx = 0;
 800ba0a:	2600      	movs	r6, #0
    packet_idx += q->len;
 800ba0c:	895a      	ldrh	r2, [r3, #10]
  for (q = p; q != NULL; q = q->next) {
 800ba0e:	681b      	ldr	r3, [r3, #0]
    packet_idx += q->len;
 800ba10:	4416      	add	r6, r2
  for (q = p; q != NULL; q = q->next) {
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1fa      	bne.n	800ba0c <lwiperf_tcp_recv+0x64>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 800ba16:	892b      	ldrh	r3, [r5, #8]
 800ba18:	42b3      	cmp	r3, r6
 800ba1a:	d006      	beq.n	800ba2a <lwiperf_tcp_recv+0x82>
 800ba1c:	4b2d      	ldr	r3, [pc, #180]	@ (800bad4 <lwiperf_tcp_recv+0x12c>)
 800ba1e:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800ba22:	492f      	ldr	r1, [pc, #188]	@ (800bae0 <lwiperf_tcp_recv+0x138>)
 800ba24:	482d      	ldr	r0, [pc, #180]	@ (800badc <lwiperf_tcp_recv+0x134>)
 800ba26:	f00a f8b1 	bl	8015b8c <iprintf>
  conn->bytes_transferred += packet_idx;
 800ba2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 800ba2c:	4641      	mov	r1, r8
  conn->bytes_transferred += packet_idx;
 800ba2e:	4433      	add	r3, r6
 800ba30:	6263      	str	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 800ba32:	e020      	b.n	800ba76 <lwiperf_tcp_recv+0xce>
      conn->have_settings_buf = 1;
 800ba34:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800ba36:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      conn->have_settings_buf = 1;
 800ba38:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800ba3c:	4b29      	ldr	r3, [pc, #164]	@ (800bae4 <lwiperf_tcp_recv+0x13c>)
 800ba3e:	4393      	bics	r3, r2
 800ba40:	d110      	bne.n	800ba64 <lwiperf_tcp_recv+0xbc>
          err_t err2 = lwiperf_tx_start_passive(conn);
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff ff86 	bl	800b954 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 800ba48:	b160      	cbz	r0, 800ba64 <lwiperf_tcp_recv+0xbc>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800ba4a:	2104      	movs	r1, #4
 800ba4c:	e02c      	b.n	800baa8 <lwiperf_tcp_recv+0x100>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800ba4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ba50:	061b      	lsls	r3, r3, #24
 800ba52:	d507      	bpl.n	800ba64 <lwiperf_tcp_recv+0xbc>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 800ba54:	2318      	movs	r3, #24
 800ba56:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f001 f843 	bl	800cae8 <pbuf_memcmp>
 800ba62:	bb00      	cbnz	r0, 800baa6 <lwiperf_tcp_recv+0xfe>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800ba64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ba66:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 800ba68:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800ba6a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 800ba6c:	d807      	bhi.n	800ba7e <lwiperf_tcp_recv+0xd6>
      conn->time_started = sys_now();
 800ba6e:	f006 f844 	bl	8011afa <sys_now>
      tcp_recved(tpcb, p->tot_len);
 800ba72:	8929      	ldrh	r1, [r5, #8]
      conn->time_started = sys_now();
 800ba74:	6160      	str	r0, [r4, #20]
  tcp_recved(tpcb, tot_len);
 800ba76:	4638      	mov	r0, r7
 800ba78:	f001 f9a6 	bl	800cdc8 <tcp_recved>
 800ba7c:	e017      	b.n	800baae <lwiperf_tcp_recv+0x106>
    conn->next_num = 4; /* 24 bytes received... */
 800ba7e:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 800ba80:	2118      	movs	r1, #24
 800ba82:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 800ba84:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 800ba88:	f000 fd76 	bl	800c578 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d0bb      	beq.n	800ba08 <lwiperf_tcp_recv+0x60>
 800ba90:	4b10      	ldr	r3, [pc, #64]	@ (800bad4 <lwiperf_tcp_recv+0x12c>)
 800ba92:	f240 2212 	movw	r2, #530	@ 0x212
 800ba96:	4914      	ldr	r1, [pc, #80]	@ (800bae8 <lwiperf_tcp_recv+0x140>)
 800ba98:	4810      	ldr	r0, [pc, #64]	@ (800badc <lwiperf_tcp_recv+0x134>)
 800ba9a:	f00a f877 	bl	8015b8c <iprintf>
 800ba9e:	e7b3      	b.n	800ba08 <lwiperf_tcp_recv+0x60>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 800baa0:	f1b8 0f17 	cmp.w	r8, #23
 800baa4:	d8d3      	bhi.n	800ba4e <lwiperf_tcp_recv+0xa6>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800baa6:	2103      	movs	r1, #3
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7ff fc8b 	bl	800b3c4 <lwiperf_tcp_close>
  pbuf_free(p);
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 fd8e 	bl	800c5d0 <pbuf_free>
  return ERR_OK;
 800bab4:	e78d      	b.n	800b9d2 <lwiperf_tcp_recv+0x2a>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 800bab6:	f1b8 0f17 	cmp.w	r8, #23
 800baba:	d9f4      	bls.n	800baa6 <lwiperf_tcp_recv+0xfe>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 800babc:	4633      	mov	r3, r6
 800babe:	2218      	movs	r2, #24
 800bac0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800bac4:	4628      	mov	r0, r5
 800bac6:	f000 ffa9 	bl	800ca1c <pbuf_copy_partial>
 800baca:	2818      	cmp	r0, #24
 800bacc:	d0b2      	beq.n	800ba34 <lwiperf_tcp_recv+0x8c>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800bace:	2102      	movs	r1, #2
 800bad0:	e7ea      	b.n	800baa8 <lwiperf_tcp_recv+0x100>
 800bad2:	bf00      	nop
 800bad4:	08017354 	.word	0x08017354
 800bad8:	08017418 	.word	0x08017418
 800badc:	080169d3 	.word	0x080169d3
 800bae0:	08017462 	.word	0x08017462
 800bae4:	01000080 	.word	0x01000080
 800bae8:	08017448 	.word	0x08017448

0800baec <lwiperf_start_tcp_server>:
{
 800baec:	b530      	push	{r4, r5, lr}
 800baee:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 800baf0:	2400      	movs	r4, #0
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800baf2:	ad03      	add	r5, sp, #12
  lwiperf_state_tcp_t *state = NULL;
 800baf4:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800baf6:	e9cd 4500 	strd	r4, r5, [sp]
 800bafa:	f7ff fe5f 	bl	800b7bc <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 800bafe:	b910      	cbnz	r0, 800bb06 <lwiperf_start_tcp_server+0x1a>
    return state;
 800bb00:	9803      	ldr	r0, [sp, #12]
}
 800bb02:	b005      	add	sp, #20
 800bb04:	bd30      	pop	{r4, r5, pc}
  return NULL;
 800bb06:	4620      	mov	r0, r4
 800bb08:	e7fb      	b.n	800bb02 <lwiperf_start_tcp_server+0x16>
	...

0800bb0c <lwiperf_start_tcp_server_default>:
{
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 800bb10:	4802      	ldr	r0, [pc, #8]	@ (800bb1c <lwiperf_start_tcp_server_default+0x10>)
 800bb12:	f241 3189 	movw	r1, #5001	@ 0x1389
 800bb16:	f7ff bfe9 	b.w	800baec <lwiperf_start_tcp_server>
 800bb1a:	bf00      	nop
 800bb1c:	0808f8f8 	.word	0x0808f8f8

0800bb20 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800bb20:	ba40      	rev16	r0, r0
}
 800bb22:	b280      	uxth	r0, r0
 800bb24:	4770      	bx	lr

0800bb26 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800bb26:	ba00      	rev	r0, r0
 800bb28:	4770      	bx	lr

0800bb2a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800bb2a:	b530      	push	{r4, r5, lr}
  u16_t t = 0;
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800bb2c:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800bb30:	f04f 0300 	mov.w	r3, #0
  if (odd && len > 0) {
 800bb34:	d006      	beq.n	800bb44 <lwip_standard_chksum+0x1a>
 800bb36:	4299      	cmp	r1, r3
 800bb38:	dd20      	ble.n	800bb7c <lwip_standard_chksum+0x52>
    ((u8_t *)&t)[1] = *pb++;
 800bb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
    len--;
 800bb3e:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800bb40:	f362 231f 	bfi	r3, r2, #8, #24
  u32_t sum = 0;
 800bb44:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800bb46:	2901      	cmp	r1, #1
 800bb48:	dc13      	bgt.n	800bb72 <lwip_standard_chksum+0x48>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800bb4a:	d103      	bne.n	800bb54 <lwip_standard_chksum+0x2a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800bb4c:	7801      	ldrb	r1, [r0, #0]
 800bb4e:	f361 0307 	bfi	r3, r1, #0, #8
 800bb52:	b29b      	uxth	r3, r3
  }

  /* Add end bytes */
  sum += t;
 800bb54:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	eb02 4313 	add.w	r3, r2, r3, lsr #16
  sum = FOLD_U32T(sum);
 800bb5c:	b298      	uxth	r0, r3
 800bb5e:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800bb62:	b124      	cbz	r4, 800bb6e <lwip_standard_chksum+0x44>
    sum = SWAP_BYTES_IN_WORD(sum);
 800bb64:	0203      	lsls	r3, r0, #8
 800bb66:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800bb6e:	b280      	uxth	r0, r0
 800bb70:	bd30      	pop	{r4, r5, pc}
    sum += *ps++;
 800bb72:	f830 5b02 	ldrh.w	r5, [r0], #2
    len -= 2;
 800bb76:	3902      	subs	r1, #2
    sum += *ps++;
 800bb78:	442a      	add	r2, r5
    len -= 2;
 800bb7a:	e7e4      	b.n	800bb46 <lwip_standard_chksum+0x1c>
  u32_t sum = 0;
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	e7e9      	b.n	800bb54 <lwip_standard_chksum+0x2a>

0800bb80 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800bb82:	2600      	movs	r6, #0
{
 800bb84:	4605      	mov	r5, r0

  acc = 0;
 800bb86:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 800bb88:	b945      	cbnz	r5, 800bb9c <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 800bb8a:	b126      	cbz	r6, 800bb96 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 800bb8c:	0223      	lsls	r3, r4, #8
 800bb8e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800bb96:	43e0      	mvns	r0, r4
}
 800bb98:	b280      	uxth	r0, r0
 800bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800bb9c:	896f      	ldrh	r7, [r5, #10]
 800bb9e:	6868      	ldr	r0, [r5, #4]
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7ff ffc2 	bl	800bb2a <lwip_standard_chksum>
 800bba6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 800bba8:	b2a3      	uxth	r3, r4
 800bbaa:	eb03 4414 	add.w	r4, r3, r4, lsr #16
    if (q->len % 2 != 0) {
 800bbae:	07fb      	lsls	r3, r7, #31
 800bbb0:	d506      	bpl.n	800bbc0 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800bbb2:	0223      	lsls	r3, r4, #8
 800bbb4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800bbb8:	f086 0601 	eor.w	r6, r6, #1
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 800bbc0:	682d      	ldr	r5, [r5, #0]
 800bbc2:	e7e1      	b.n	800bb88 <inet_chksum_pbuf+0x8>

0800bbc4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bbc4:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bbc6:	f005 ff97 	bl	8011af8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bbca:	f000 f80d 	bl	800bbe8 <mem_init>
  memp_init();
 800bbce:	f000 fac1 	bl	800c154 <memp_init>
  pbuf_init();
  netif_init();
 800bbd2:	f000 fb4d 	bl	800c270 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bbd6:	f004 fb39 	bl	801024c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bbda:	f001 f805 	bl	800cbe8 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800bbde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800bbe2:	f004 bae9 	b.w	80101b8 <sys_timeouts_init>
	...

0800bbe8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bbe8:	4b10      	ldr	r3, [pc, #64]	@ (800bc2c <mem_init+0x44>)
 800bbea:	4a11      	ldr	r2, [pc, #68]	@ (800bc30 <mem_init+0x48>)
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bbec:	4911      	ldr	r1, [pc, #68]	@ (800bc34 <mem_init+0x4c>)
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bbee:	4812      	ldr	r0, [pc, #72]	@ (800bc38 <mem_init+0x50>)
{
 800bbf0:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bbf2:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800bbf4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800bbf8:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bbfe:	4a0f      	ldr	r2, [pc, #60]	@ (800bc3c <mem_init+0x54>)
 800bc00:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bc02:	f04f 2140 	mov.w	r1, #1073758208	@ 0x40004000
 800bc06:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 800bc08:	2101      	movs	r1, #1
 800bc0a:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 800bc0c:	4a0c      	ldr	r2, [pc, #48]	@ (800bc40 <mem_init+0x58>)
 800bc0e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bc10:	f005 ff7c 	bl	8011b0c <sys_mutex_new>
 800bc14:	b140      	cbz	r0, 800bc28 <mem_init+0x40>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bc16:	4b0b      	ldr	r3, [pc, #44]	@ (800bc44 <mem_init+0x5c>)
 800bc18:	f240 2212 	movw	r2, #530	@ 0x212
 800bc1c:	490a      	ldr	r1, [pc, #40]	@ (800bc48 <mem_init+0x60>)
 800bc1e:	480b      	ldr	r0, [pc, #44]	@ (800bc4c <mem_init+0x64>)
  }
}
 800bc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bc24:	f009 bfb2 	b.w	8015b8c <iprintf>
}
 800bc28:	bd10      	pop	{r4, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20078000 	.word	0x20078000
 800bc30:	2000d18c 	.word	0x2000d18c
 800bc34:	2000d188 	.word	0x2000d188
 800bc38:	2000d184 	.word	0x2000d184
 800bc3c:	2007c000 	.word	0x2007c000
 800bc40:	2000d180 	.word	0x2000d180
 800bc44:	08017471 	.word	0x08017471
 800bc48:	0801748e 	.word	0x0801748e
 800bc4c:	080169d3 	.word	0x080169d3

0800bc50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bc54:	4604      	mov	r4, r0
 800bc56:	2800      	cmp	r0, #0
 800bc58:	f000 80b4 	beq.w	800bdc4 <mem_free+0x174>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bc5c:	0783      	lsls	r3, r0, #30
 800bc5e:	d00c      	beq.n	800bc7a <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bc60:	4b59      	ldr	r3, [pc, #356]	@ (800bdc8 <mem_free+0x178>)
 800bc62:	f240 2266 	movw	r2, #614	@ 0x266
 800bc66:	4959      	ldr	r1, [pc, #356]	@ (800bdcc <mem_free+0x17c>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc68:	4859      	ldr	r0, [pc, #356]	@ (800bdd0 <mem_free+0x180>)
 800bc6a:	f009 ff8f 	bl	8015b8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc6e:	f005 ff46 	bl	8011afe <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800bc76:	f005 bf47 	b.w	8011b08 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc7a:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 800bdfc <mem_free+0x1ac>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc7e:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc82:	f8d8 3000 	ldr.w	r3, [r8]
 800bc86:	42ab      	cmp	r3, r5
 800bc88:	d805      	bhi.n	800bc96 <mem_free+0x46>
 800bc8a:	4f52      	ldr	r7, [pc, #328]	@ (800bdd4 <mem_free+0x184>)
 800bc8c:	f100 030c 	add.w	r3, r0, #12
 800bc90:	683a      	ldr	r2, [r7, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d204      	bcs.n	800bca0 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc96:	4b4c      	ldr	r3, [pc, #304]	@ (800bdc8 <mem_free+0x178>)
 800bc98:	f240 2272 	movw	r2, #626	@ 0x272
 800bc9c:	494e      	ldr	r1, [pc, #312]	@ (800bdd8 <mem_free+0x188>)
 800bc9e:	e7e3      	b.n	800bc68 <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 800bca0:	484e      	ldr	r0, [pc, #312]	@ (800bddc <mem_free+0x18c>)
 800bca2:	f005 ff4b 	bl	8011b3c <sys_mutex_lock>
  if (!mem->used) {
 800bca6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800bcaa:	b953      	cbnz	r3, 800bcc2 <mem_free+0x72>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bcac:	4b46      	ldr	r3, [pc, #280]	@ (800bdc8 <mem_free+0x178>)
 800bcae:	f240 227f 	movw	r2, #639	@ 0x27f
 800bcb2:	494b      	ldr	r1, [pc, #300]	@ (800bde0 <mem_free+0x190>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bcb4:	4846      	ldr	r0, [pc, #280]	@ (800bdd0 <mem_free+0x180>)
 800bcb6:	f009 ff69 	bl	8015b8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bcba:	4848      	ldr	r0, [pc, #288]	@ (800bddc <mem_free+0x18c>)
 800bcbc:	f005 ff6a 	bl	8011b94 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800bcc0:	e7d5      	b.n	800bc6e <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 800bcc2:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800bcc6:	f8d8 1000 	ldr.w	r1, [r8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcca:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
  pmem = ptr_to_mem(mem->prev);
 800bcce:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcd2:	d810      	bhi.n	800bcf6 <mem_free+0xa6>
 800bcd4:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800bcd8:	d80d      	bhi.n	800bcf6 <mem_free+0xa6>
  return (mem_size_t)((u8_t *)mem - ram);
 800bcda:	1a6b      	subs	r3, r5, r1
 800bcdc:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcde:	4283      	cmp	r3, r0
 800bce0:	d002      	beq.n	800bce8 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bce2:	5a08      	ldrh	r0, [r1, r0]
 800bce4:	4298      	cmp	r0, r3
 800bce6:	d106      	bne.n	800bcf6 <mem_free+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 800bce8:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcea:	6838      	ldr	r0, [r7, #0]
 800bcec:	4282      	cmp	r2, r0
 800bcee:	d007      	beq.n	800bd00 <mem_free+0xb0>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bcf0:	8852      	ldrh	r2, [r2, #2]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d004      	beq.n	800bd00 <mem_free+0xb0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bcf6:	4b34      	ldr	r3, [pc, #208]	@ (800bdc8 <mem_free+0x178>)
 800bcf8:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800bcfc:	4939      	ldr	r1, [pc, #228]	@ (800bde4 <mem_free+0x194>)
 800bcfe:	e7d9      	b.n	800bcb4 <mem_free+0x64>
  mem->used = 0;
 800bd00:	2300      	movs	r3, #0
  if (mem < lfree) {
 800bd02:	4e39      	ldr	r6, [pc, #228]	@ (800bde8 <mem_free+0x198>)
  mem->used = 0;
 800bd04:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800bd08:	6833      	ldr	r3, [r6, #0]
 800bd0a:	42ab      	cmp	r3, r5
    lfree = mem;
 800bd0c:	bf88      	it	hi
 800bd0e:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bd10:	428d      	cmp	r5, r1
 800bd12:	d206      	bcs.n	800bd22 <mem_free+0xd2>
 800bd14:	4b2c      	ldr	r3, [pc, #176]	@ (800bdc8 <mem_free+0x178>)
 800bd16:	f44f 72e9 	mov.w	r2, #466	@ 0x1d2
 800bd1a:	4934      	ldr	r1, [pc, #208]	@ (800bdec <mem_free+0x19c>)
 800bd1c:	482c      	ldr	r0, [pc, #176]	@ (800bdd0 <mem_free+0x180>)
 800bd1e:	f009 ff35 	bl	8015b8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	429d      	cmp	r5, r3
 800bd26:	d306      	bcc.n	800bd36 <mem_free+0xe6>
 800bd28:	4b27      	ldr	r3, [pc, #156]	@ (800bdc8 <mem_free+0x178>)
 800bd2a:	f240 12d3 	movw	r2, #467	@ 0x1d3
 800bd2e:	4930      	ldr	r1, [pc, #192]	@ (800bdf0 <mem_free+0x1a0>)
 800bd30:	4827      	ldr	r0, [pc, #156]	@ (800bdd0 <mem_free+0x180>)
 800bd32:	f009 ff2b 	bl	8015b8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bd36:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800bd3a:	b133      	cbz	r3, 800bd4a <mem_free+0xfa>
 800bd3c:	4b22      	ldr	r3, [pc, #136]	@ (800bdc8 <mem_free+0x178>)
 800bd3e:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800bd42:	492c      	ldr	r1, [pc, #176]	@ (800bdf4 <mem_free+0x1a4>)
 800bd44:	4822      	ldr	r0, [pc, #136]	@ (800bdd0 <mem_free+0x180>)
 800bd46:	f009 ff21 	bl	8015b8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bd4a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800bd4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd52:	d906      	bls.n	800bd62 <mem_free+0x112>
 800bd54:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc8 <mem_free+0x178>)
 800bd56:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800bd5a:	4927      	ldr	r1, [pc, #156]	@ (800bdf8 <mem_free+0x1a8>)
 800bd5c:	481c      	ldr	r0, [pc, #112]	@ (800bdd0 <mem_free+0x180>)
 800bd5e:	f009 ff15 	bl	8015b8c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800bd62:	f8d8 3000 	ldr.w	r3, [r8]
 800bd66:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800bd6a:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bd6c:	4295      	cmp	r5, r2
 800bd6e:	d011      	beq.n	800bd94 <mem_free+0x144>
 800bd70:	7910      	ldrb	r0, [r2, #4]
 800bd72:	b978      	cbnz	r0, 800bd94 <mem_free+0x144>
 800bd74:	6838      	ldr	r0, [r7, #0]
 800bd76:	4282      	cmp	r2, r0
 800bd78:	d00c      	beq.n	800bd94 <mem_free+0x144>
    if (lfree == nmem) {
 800bd7a:	6830      	ldr	r0, [r6, #0]
 800bd7c:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800bd7e:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800bd80:	bf08      	it	eq
 800bd82:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd84:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
    mem->next = nmem->next;
 800bd88:	f824 2c08 	strh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800bd8c:	bf1e      	ittt	ne
 800bd8e:	1ae9      	subne	r1, r5, r3
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd90:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800bd92:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800bd94:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800bd98:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800bd9a:	428d      	cmp	r5, r1
 800bd9c:	d00d      	beq.n	800bdba <mem_free+0x16a>
 800bd9e:	7908      	ldrb	r0, [r1, #4]
 800bda0:	b958      	cbnz	r0, 800bdba <mem_free+0x16a>
    if (lfree == mem) {
 800bda2:	6830      	ldr	r0, [r6, #0]
 800bda4:	4285      	cmp	r5, r0
      lfree = pmem;
 800bda6:	bf08      	it	eq
 800bda8:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 800bdaa:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bdae:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
    pmem->next = mem->next;
 800bdb2:	5299      	strh	r1, [r3, r2]
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bdb4:	bf1c      	itt	ne
 800bdb6:	185b      	addne	r3, r3, r1
 800bdb8:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800bdba:	4808      	ldr	r0, [pc, #32]	@ (800bddc <mem_free+0x18c>)
}
 800bdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800bdc0:	f005 bee8 	b.w	8011b94 <sys_mutex_unlock>
}
 800bdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc8:	08017471 	.word	0x08017471
 800bdcc:	080174a9 	.word	0x080174a9
 800bdd0:	080169d3 	.word	0x080169d3
 800bdd4:	2000d188 	.word	0x2000d188
 800bdd8:	080174ca 	.word	0x080174ca
 800bddc:	2000d184 	.word	0x2000d184
 800bde0:	080174e3 	.word	0x080174e3
 800bde4:	08017509 	.word	0x08017509
 800bde8:	2000d180 	.word	0x2000d180
 800bdec:	0801753b 	.word	0x0801753b
 800bdf0:	08017552 	.word	0x08017552
 800bdf4:	0801756c 	.word	0x0801756c
 800bdf8:	08017587 	.word	0x08017587
 800bdfc:	2000d18c 	.word	0x2000d18c

0800be00 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800be00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800be04:	1ccc      	adds	r4, r1, #3
{
 800be06:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800be08:	f024 0403 	bic.w	r4, r4, #3
 800be0c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800be0e:	2c0b      	cmp	r4, #11
 800be10:	d904      	bls.n	800be1c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800be12:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 800be16:	d902      	bls.n	800be1e <mem_trim+0x1e>
    return NULL;
 800be18:	2500      	movs	r5, #0
 800be1a:	e01f      	b.n	800be5c <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 800be1c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800be1e:	42a1      	cmp	r1, r4
 800be20:	d8fa      	bhi.n	800be18 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800be22:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800bf68 <mem_trim+0x168>
 800be26:	f8d8 3000 	ldr.w	r3, [r8]
 800be2a:	42ab      	cmp	r3, r5
 800be2c:	d803      	bhi.n	800be36 <mem_trim+0x36>
 800be2e:	4b46      	ldr	r3, [pc, #280]	@ (800bf48 <mem_trim+0x148>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	42ab      	cmp	r3, r5
 800be34:	d806      	bhi.n	800be44 <mem_trim+0x44>
 800be36:	4b45      	ldr	r3, [pc, #276]	@ (800bf4c <mem_trim+0x14c>)
 800be38:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800be3c:	4944      	ldr	r1, [pc, #272]	@ (800bf50 <mem_trim+0x150>)
 800be3e:	4845      	ldr	r0, [pc, #276]	@ (800bf54 <mem_trim+0x154>)
 800be40:	f009 fea4 	bl	8015b8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800be44:	f8d8 3000 	ldr.w	r3, [r8]
 800be48:	42ab      	cmp	r3, r5
 800be4a:	d803      	bhi.n	800be54 <mem_trim+0x54>
 800be4c:	4a3e      	ldr	r2, [pc, #248]	@ (800bf48 <mem_trim+0x148>)
 800be4e:	6812      	ldr	r2, [r2, #0]
 800be50:	42aa      	cmp	r2, r5
 800be52:	d806      	bhi.n	800be62 <mem_trim+0x62>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be54:	f005 fe53 	bl	8011afe <sys_arch_protect>
 800be58:	f005 fe56 	bl	8011b08 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800be5c:	4628      	mov	r0, r5
 800be5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800be62:	f1a5 0608 	sub.w	r6, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800be66:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800be6a:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800be6c:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800be6e:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800be70:	1bbf      	subs	r7, r7, r6
 800be72:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800be74:	42a7      	cmp	r7, r4
 800be76:	d335      	bcc.n	800bee4 <mem_trim+0xe4>
  if (newsize == size) {
 800be78:	d0f0      	beq.n	800be5c <mem_trim+0x5c>
  LWIP_MEM_FREE_PROTECT();
 800be7a:	4837      	ldr	r0, [pc, #220]	@ (800bf58 <mem_trim+0x158>)
 800be7c:	f005 fe5e 	bl	8011b3c <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800be80:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800be84:	f8d8 b000 	ldr.w	fp, [r8]
 800be88:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 800be8c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800be90:	bb83      	cbnz	r3, 800bef4 <mem_trim+0xf4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be92:	f5b9 4f80 	cmp.w	r9, #16384	@ 0x4000
 800be96:	d106      	bne.n	800bea6 <mem_trim+0xa6>
 800be98:	4b2c      	ldr	r3, [pc, #176]	@ (800bf4c <mem_trim+0x14c>)
 800be9a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800be9e:	492f      	ldr	r1, [pc, #188]	@ (800bf5c <mem_trim+0x15c>)
 800bea0:	482c      	ldr	r0, [pc, #176]	@ (800bf54 <mem_trim+0x154>)
 800bea2:	f009 fe73 	bl	8015b8c <iprintf>
    if (lfree == mem2) {
 800bea6:	482e      	ldr	r0, [pc, #184]	@ (800bf60 <mem_trim+0x160>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bea8:	f106 0308 	add.w	r3, r6, #8
  return (struct mem *)(void *)&ram[ptr];
 800beac:	f8d8 2000 	ldr.w	r2, [r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800beb0:	4423      	add	r3, r4
    if (lfree == mem2) {
 800beb2:	6804      	ldr	r4, [r0, #0]
    next = mem2->next;
 800beb4:	f83b 7009 	ldrh.w	r7, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800beb8:	b299      	uxth	r1, r3
    if (lfree == mem2) {
 800beba:	4554      	cmp	r4, sl
  return (struct mem *)(void *)&ram[ptr];
 800bebc:	fa12 f383 	uxtah	r3, r2, r3
      lfree = ptr_to_mem(ptr2);
 800bec0:	bf08      	it	eq
 800bec2:	6003      	streq	r3, [r0, #0]
    mem2->used = 0;
 800bec4:	2000      	movs	r0, #0
 800bec6:	7118      	strb	r0, [r3, #4]
    mem2->next = next;
 800bec8:	5257      	strh	r7, [r2, r1]
    mem2->prev = ptr;
 800beca:	805e      	strh	r6, [r3, #2]
    mem->next = ptr2;
 800becc:	f825 1c08 	strh.w	r1, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bed0:	5a53      	ldrh	r3, [r2, r1]
 800bed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bed6:	d001      	beq.n	800bedc <mem_trim+0xdc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bed8:	441a      	add	r2, r3
 800beda:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800bedc:	481e      	ldr	r0, [pc, #120]	@ (800bf58 <mem_trim+0x158>)
 800bede:	f005 fe59 	bl	8011b94 <sys_mutex_unlock>
  return rmem;
 800bee2:	e7bb      	b.n	800be5c <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bee4:	4b19      	ldr	r3, [pc, #100]	@ (800bf4c <mem_trim+0x14c>)
 800bee6:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800beea:	491e      	ldr	r1, [pc, #120]	@ (800bf64 <mem_trim+0x164>)
 800beec:	4819      	ldr	r0, [pc, #100]	@ (800bf54 <mem_trim+0x154>)
 800beee:	f009 fe4d 	bl	8015b8c <iprintf>
  if (newsize > size) {
 800bef2:	e791      	b.n	800be18 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bef4:	f104 0314 	add.w	r3, r4, #20
 800bef8:	b29b      	uxth	r3, r3
 800befa:	42bb      	cmp	r3, r7
 800befc:	d8ee      	bhi.n	800bedc <mem_trim+0xdc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800befe:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bf02:	f5b9 4f80 	cmp.w	r9, #16384	@ 0x4000
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf06:	441c      	add	r4, r3
 800bf08:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bf0a:	d106      	bne.n	800bf1a <mem_trim+0x11a>
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	@ (800bf4c <mem_trim+0x14c>)
 800bf0e:	f240 3209 	movw	r2, #777	@ 0x309
 800bf12:	4912      	ldr	r1, [pc, #72]	@ (800bf5c <mem_trim+0x15c>)
 800bf14:	480f      	ldr	r0, [pc, #60]	@ (800bf54 <mem_trim+0x154>)
 800bf16:	f009 fe39 	bl	8015b8c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800bf1a:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 800bf1e:	4910      	ldr	r1, [pc, #64]	@ (800bf60 <mem_trim+0x160>)
  return (struct mem *)(void *)&ram[ptr];
 800bf20:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800bf22:	6808      	ldr	r0, [r1, #0]
 800bf24:	4290      	cmp	r0, r2
      lfree = mem2;
 800bf26:	bf88      	it	hi
 800bf28:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800bf2e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800bf32:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 800bf34:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800bf36:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf3a:	5b1a      	ldrh	r2, [r3, r4]
 800bf3c:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bf40:	bf1c      	itt	ne
 800bf42:	189b      	addne	r3, r3, r2
 800bf44:	805c      	strhne	r4, [r3, #2]
 800bf46:	e7c9      	b.n	800bedc <mem_trim+0xdc>
 800bf48:	2000d188 	.word	0x2000d188
 800bf4c:	08017471 	.word	0x08017471
 800bf50:	080175b1 	.word	0x080175b1
 800bf54:	080169d3 	.word	0x080169d3
 800bf58:	2000d184 	.word	0x2000d184
 800bf5c:	080175e8 	.word	0x080175e8
 800bf60:	2000d180 	.word	0x2000d180
 800bf64:	080175c8 	.word	0x080175c8
 800bf68:	2000d18c 	.word	0x2000d18c

0800bf6c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bf6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bf70:	b140      	cbz	r0, 800bf84 <mem_malloc+0x18>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bf72:	1cc4      	adds	r4, r0, #3
 800bf74:	f024 0403 	bic.w	r4, r4, #3
 800bf78:	b2a4      	uxth	r4, r4
  if (size < MIN_SIZE_ALIGNED) {
 800bf7a:	2c0b      	cmp	r4, #11
 800bf7c:	d904      	bls.n	800bf88 <mem_malloc+0x1c>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bf7e:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 800bf82:	d902      	bls.n	800bf8a <mem_malloc+0x1e>
    return NULL;
 800bf84:	2000      	movs	r0, #0
 800bf86:	e06b      	b.n	800c060 <mem_malloc+0xf4>
    size = MIN_SIZE_ALIGNED;
 800bf88:	240c      	movs	r4, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bf8a:	42a0      	cmp	r0, r4
 800bf8c:	d8fa      	bhi.n	800bf84 <mem_malloc+0x18>
  return (mem_size_t)((u8_t *)mem - ram);
 800bf8e:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 800c0b0 <mem_malloc+0x144>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf92:	f06f 0707 	mvn.w	r7, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf96:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800c0b4 <mem_malloc+0x148>
  sys_mutex_lock(&mem_mutex);
 800bf9a:	483d      	ldr	r0, [pc, #244]	@ (800c090 <mem_malloc+0x124>)
 800bf9c:	f005 fdce 	bl	8011b3c <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800bfa0:	f8d9 2000 	ldr.w	r2, [r9]
 800bfa4:	f8d8 6000 	ldr.w	r6, [r8]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bfa8:	f5c4 4080 	rsb	r0, r4, #16384	@ 0x4000
  return (mem_size_t)((u8_t *)mem - ram);
 800bfac:	1ab6      	subs	r6, r6, r2
 800bfae:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bfb0:	4286      	cmp	r6, r0
 800bfb2:	d303      	bcc.n	800bfbc <mem_malloc+0x50>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bfb4:	4836      	ldr	r0, [pc, #216]	@ (800c090 <mem_malloc+0x124>)
 800bfb6:	f005 fded 	bl	8011b94 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bfba:	e7e3      	b.n	800bf84 <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 800bfbc:	1995      	adds	r5, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bfbe:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 800bfc0:	792b      	ldrb	r3, [r5, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d161      	bne.n	800c08a <mem_malloc+0x11e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bfc6:	1bbb      	subs	r3, r7, r6
 800bfc8:	440b      	add	r3, r1
      if ((!mem->used) &&
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	d35d      	bcc.n	800c08a <mem_malloc+0x11e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bfce:	f104 0214 	add.w	r2, r4, #20
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d346      	bcc.n	800c064 <mem_malloc+0xf8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bfd6:	f104 0708 	add.w	r7, r4, #8
 800bfda:	4437      	add	r7, r6
 800bfdc:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bfde:	f5b7 4f80 	cmp.w	r7, #16384	@ 0x4000
 800bfe2:	d106      	bne.n	800bff2 <mem_malloc+0x86>
 800bfe4:	4b2b      	ldr	r3, [pc, #172]	@ (800c094 <mem_malloc+0x128>)
 800bfe6:	f240 327a 	movw	r2, #890	@ 0x37a
 800bfea:	492b      	ldr	r1, [pc, #172]	@ (800c098 <mem_malloc+0x12c>)
 800bfec:	482b      	ldr	r0, [pc, #172]	@ (800c09c <mem_malloc+0x130>)
 800bfee:	f009 fdcd 	bl	8015b8c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800bff2:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 800bff6:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800bff8:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 800bffa:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800bffc:	8829      	ldrh	r1, [r5, #0]
 800bffe:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 800c000:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 800c002:	2201      	movs	r2, #1
          mem->next = ptr2;
 800c004:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 800c006:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c008:	5bda      	ldrh	r2, [r3, r7]
 800c00a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800c00e:	d001      	beq.n	800c014 <mem_malloc+0xa8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c010:	4413      	add	r3, r2
 800c012:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 800c014:	f8d8 3000 	ldr.w	r3, [r8]
 800c018:	4e21      	ldr	r6, [pc, #132]	@ (800c0a0 <mem_malloc+0x134>)
 800c01a:	42ab      	cmp	r3, r5
 800c01c:	d025      	beq.n	800c06a <mem_malloc+0xfe>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c01e:	3408      	adds	r4, #8
        sys_mutex_unlock(&mem_mutex);
 800c020:	481b      	ldr	r0, [pc, #108]	@ (800c090 <mem_malloc+0x124>)
 800c022:	f005 fdb7 	bl	8011b94 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c026:	6833      	ldr	r3, [r6, #0]
 800c028:	442c      	add	r4, r5
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	d206      	bcs.n	800c03c <mem_malloc+0xd0>
 800c02e:	4b19      	ldr	r3, [pc, #100]	@ (800c094 <mem_malloc+0x128>)
 800c030:	f44f 726b 	mov.w	r2, #940	@ 0x3ac
 800c034:	491b      	ldr	r1, [pc, #108]	@ (800c0a4 <mem_malloc+0x138>)
 800c036:	4819      	ldr	r0, [pc, #100]	@ (800c09c <mem_malloc+0x130>)
 800c038:	f009 fda8 	bl	8015b8c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c03c:	07ab      	lsls	r3, r5, #30
 800c03e:	d00d      	beq.n	800c05c <mem_malloc+0xf0>
 800c040:	4b14      	ldr	r3, [pc, #80]	@ (800c094 <mem_malloc+0x128>)
 800c042:	f240 32ae 	movw	r2, #942	@ 0x3ae
 800c046:	4918      	ldr	r1, [pc, #96]	@ (800c0a8 <mem_malloc+0x13c>)
 800c048:	4814      	ldr	r0, [pc, #80]	@ (800c09c <mem_malloc+0x130>)
 800c04a:	f009 fd9f 	bl	8015b8c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c04e:	4b11      	ldr	r3, [pc, #68]	@ (800c094 <mem_malloc+0x128>)
 800c050:	f44f 726c 	mov.w	r2, #944	@ 0x3b0
 800c054:	4915      	ldr	r1, [pc, #84]	@ (800c0ac <mem_malloc+0x140>)
 800c056:	4811      	ldr	r0, [pc, #68]	@ (800c09c <mem_malloc+0x130>)
 800c058:	f009 fd98 	bl	8015b8c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c05c:	f105 0008 	add.w	r0, r5, #8
}
 800c060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800c064:	2301      	movs	r3, #1
 800c066:	712b      	strb	r3, [r5, #4]
 800c068:	e7d4      	b.n	800c014 <mem_malloc+0xa8>
          while (cur->used && cur != ram_end) {
 800c06a:	6832      	ldr	r2, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 800c06c:	f8d9 1000 	ldr.w	r1, [r9]
          while (cur->used && cur != ram_end) {
 800c070:	7918      	ldrb	r0, [r3, #4]
 800c072:	b138      	cbz	r0, 800c084 <mem_malloc+0x118>
 800c074:	429a      	cmp	r2, r3
 800c076:	d102      	bne.n	800c07e <mem_malloc+0x112>
          lfree = cur;
 800c078:	f8c8 2000 	str.w	r2, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c07c:	e7cf      	b.n	800c01e <mem_malloc+0xb2>
  return (struct mem *)(void *)&ram[ptr];
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	440b      	add	r3, r1
 800c082:	e7f5      	b.n	800c070 <mem_malloc+0x104>
          lfree = cur;
 800c084:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c088:	e7c9      	b.n	800c01e <mem_malloc+0xb2>
    size = MIN_SIZE_ALIGNED;
 800c08a:	460e      	mov	r6, r1
 800c08c:	e790      	b.n	800bfb0 <mem_malloc+0x44>
 800c08e:	bf00      	nop
 800c090:	2000d184 	.word	0x2000d184
 800c094:	08017471 	.word	0x08017471
 800c098:	080175e8 	.word	0x080175e8
 800c09c:	080169d3 	.word	0x080169d3
 800c0a0:	2000d188 	.word	0x2000d188
 800c0a4:	080175f9 	.word	0x080175f9
 800c0a8:	08017629 	.word	0x08017629
 800c0ac:	08017658 	.word	0x08017658
 800c0b0:	2000d18c 	.word	0x2000d18c
 800c0b4:	2000d180 	.word	0x2000d180

0800c0b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c0bc:	f005 fd1f 	bl	8011afe <sys_arch_protect>
 800c0c0:	4605      	mov	r5, r0

  memp = *desc->tab;
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c0c6:	b15c      	cbz	r4, 800c0e0 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c0c8:	6822      	ldr	r2, [r4, #0]
 800c0ca:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c0cc:	07a3      	lsls	r3, r4, #30
 800c0ce:	d006      	beq.n	800c0de <do_memp_malloc_pool+0x26>
 800c0d0:	4b05      	ldr	r3, [pc, #20]	@ (800c0e8 <do_memp_malloc_pool+0x30>)
 800c0d2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c0d6:	4905      	ldr	r1, [pc, #20]	@ (800c0ec <do_memp_malloc_pool+0x34>)
 800c0d8:	4805      	ldr	r0, [pc, #20]	@ (800c0f0 <do_memp_malloc_pool+0x38>)
 800c0da:	f009 fd57 	bl	8015b8c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c0de:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c0e0:	f005 fd12 	bl	8011b08 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	0801767b 	.word	0x0801767b
 800c0ec:	08017699 	.word	0x08017699
 800c0f0:	080169d3 	.word	0x080169d3

0800c0f4 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0f4:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0f6:	078b      	lsls	r3, r1, #30
{
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0fc:	d006      	beq.n	800c10c <do_memp_free_pool+0x18>
 800c0fe:	4b08      	ldr	r3, [pc, #32]	@ (800c120 <do_memp_free_pool+0x2c>)
 800c100:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c104:	4907      	ldr	r1, [pc, #28]	@ (800c124 <do_memp_free_pool+0x30>)
 800c106:	4808      	ldr	r0, [pc, #32]	@ (800c128 <do_memp_free_pool+0x34>)
 800c108:	f009 fd40 	bl	8015b8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800c10c:	f005 fcf7 	bl	8011afe <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c110:	68ab      	ldr	r3, [r5, #8]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800c116:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800c11c:	f005 bcf4 	b.w	8011b08 <sys_arch_unprotect>
 800c120:	0801767b 	.word	0x0801767b
 800c124:	080176bc 	.word	0x080176bc
 800c128:	080169d3 	.word	0x080169d3

0800c12c <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c12c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800c12e:	2200      	movs	r2, #0
 800c130:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c132:	3303      	adds	r3, #3
{
 800c134:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c136:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800c13a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800c13c:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800c13e:	4294      	cmp	r4, r2
 800c140:	dc00      	bgt.n	800c144 <memp_init_pool+0x18>
}
 800c142:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800c144:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800c146:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800c148:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c14a:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800c14c:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c14e:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 800c150:	e7f5      	b.n	800c13e <memp_init_pool+0x12>
	...

0800c154 <memp_init>:
{
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d05      	ldr	r5, [pc, #20]	@ (800c16c <memp_init+0x18>)
 800c158:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c15a:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 800c15c:	f855 0b04 	ldr.w	r0, [r5], #4
 800c160:	f7ff ffe4 	bl	800c12c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c164:	b2a4      	uxth	r4, r4
 800c166:	2c00      	cmp	r4, #0
 800c168:	d1f7      	bne.n	800c15a <memp_init+0x6>
}
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	0808f7ec 	.word	0x0808f7ec

0800c170 <memp_malloc_pool>:
{
 800c170:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c172:	4604      	mov	r4, r0
 800c174:	b118      	cbz	r0, 800c17e <memp_malloc_pool+0xe>
}
 800c176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800c17a:	f7ff bf9d 	b.w	800c0b8 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c17e:	4b04      	ldr	r3, [pc, #16]	@ (800c190 <memp_malloc_pool+0x20>)
 800c180:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c184:	4903      	ldr	r1, [pc, #12]	@ (800c194 <memp_malloc_pool+0x24>)
 800c186:	4804      	ldr	r0, [pc, #16]	@ (800c198 <memp_malloc_pool+0x28>)
 800c188:	f009 fd00 	bl	8015b8c <iprintf>
}
 800c18c:	4620      	mov	r0, r4
 800c18e:	bd10      	pop	{r4, pc}
 800c190:	0801767b 	.word	0x0801767b
 800c194:	080176dc 	.word	0x080176dc
 800c198:	080169d3 	.word	0x080169d3

0800c19c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c19c:	280c      	cmp	r0, #12
 800c19e:	d804      	bhi.n	800c1aa <memp_malloc+0xe>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c1a0:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <memp_malloc+0x14>)
 800c1a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c1a6:	f7ff bf87 	b.w	800c0b8 <do_memp_malloc_pool>
}
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	0808f7ec 	.word	0x0808f7ec

0800c1b4 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1b4:	b108      	cbz	r0, 800c1ba <memp_free_pool+0x6>
  if ((desc == NULL) || (mem == NULL)) {
 800c1b6:	b939      	cbnz	r1, 800c1c8 <memp_free_pool+0x14>
 800c1b8:	4770      	bx	lr
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1ba:	4b04      	ldr	r3, [pc, #16]	@ (800c1cc <memp_free_pool+0x18>)
 800c1bc:	f240 1295 	movw	r2, #405	@ 0x195
 800c1c0:	4903      	ldr	r1, [pc, #12]	@ (800c1d0 <memp_free_pool+0x1c>)
 800c1c2:	4804      	ldr	r0, [pc, #16]	@ (800c1d4 <memp_free_pool+0x20>)
 800c1c4:	f009 bce2 	b.w	8015b8c <iprintf>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c1c8:	f7ff bf94 	b.w	800c0f4 <do_memp_free_pool>
 800c1cc:	0801767b 	.word	0x0801767b
 800c1d0:	080176dc 	.word	0x080176dc
 800c1d4:	080169d3 	.word	0x080169d3

0800c1d8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c1d8:	280c      	cmp	r0, #12
 800c1da:	d805      	bhi.n	800c1e8 <memp_free+0x10>

  if (mem == NULL) {
 800c1dc:	b121      	cbz	r1, 800c1e8 <memp_free+0x10>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c1de:	4b03      	ldr	r3, [pc, #12]	@ (800c1ec <memp_free+0x14>)
 800c1e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c1e4:	f7ff bf86 	b.w	800c0f4 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	0808f7ec 	.word	0x0808f7ec

0800c1f0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800c1f0:	f06f 000b 	mvn.w	r0, #11
 800c1f4:	4770      	bx	lr
	...

0800c1f8 <netif_issue_reports>:
{
 800c1f8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	b930      	cbnz	r0, 800c20c <netif_issue_reports+0x14>
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c230 <netif_issue_reports+0x38>)
 800c200:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800c204:	490b      	ldr	r1, [pc, #44]	@ (800c234 <netif_issue_reports+0x3c>)
 800c206:	480c      	ldr	r0, [pc, #48]	@ (800c238 <netif_issue_reports+0x40>)
 800c208:	f009 fcc0 	bl	8015b8c <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c20c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c210:	f003 0205 	and.w	r2, r3, #5
 800c214:	2a05      	cmp	r2, #5
 800c216:	d109      	bne.n	800c22c <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c218:	6862      	ldr	r2, [r4, #4]
 800c21a:	b13a      	cbz	r2, 800c22c <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c21c:	071b      	lsls	r3, r3, #28
 800c21e:	d505      	bpl.n	800c22c <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 800c220:	1d21      	adds	r1, r4, #4
 800c222:	4620      	mov	r0, r4
}
 800c224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800c228:	f004 bb60 	b.w	80108ec <etharp_request>
}
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	bf00      	nop
 800c230:	080176ee 	.word	0x080176ee
 800c234:	0801770d 	.word	0x0801770d
 800c238:	080169d3 	.word	0x080169d3

0800c23c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800c23c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c23e:	6843      	ldr	r3, [r0, #4]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800c240:	4615      	mov	r5, r2
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c242:	680a      	ldr	r2, [r1, #0]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800c244:	4604      	mov	r4, r0
 800c246:	460e      	mov	r6, r1
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c248:	429a      	cmp	r2, r3
 800c24a:	d00f      	beq.n	800c26c <netif_do_set_ipaddr.isra.0+0x30>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c24c:	602b      	str	r3, [r5, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c24e:	a901      	add	r1, sp, #4
 800c250:	4628      	mov	r0, r5
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c252:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c254:	f001 fc9e 	bl	800db94 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c258:	a901      	add	r1, sp, #4
 800c25a:	4628      	mov	r0, r5
 800c25c:	f004 f966 	bl	801052c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c260:	6833      	ldr	r3, [r6, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c262:	2101      	movs	r1, #1
 800c264:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c266:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c268:	f7ff ffc6 	bl	800c1f8 <netif_issue_reports>
}
 800c26c:	b002      	add	sp, #8
 800c26e:	bd70      	pop	{r4, r5, r6, pc}

0800c270 <netif_init>:
}
 800c270:	4770      	bx	lr
	...

0800c274 <netif_set_addr>:
{
 800c274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800c276:	4e14      	ldr	r6, [pc, #80]	@ (800c2c8 <netif_set_addr+0x54>)
{
 800c278:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800c27a:	2900      	cmp	r1, #0
 800c27c:	bf14      	ite	ne
 800c27e:	460d      	movne	r5, r1
 800c280:	4635      	moveq	r5, r6
    netmask = IP4_ADDR_ANY4;
 800c282:	2a00      	cmp	r2, #0
 800c284:	bf14      	ite	ne
 800c286:	4617      	movne	r7, r2
 800c288:	4637      	moveq	r7, r6
    gw = IP4_ADDR_ANY4;
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bf18      	it	ne
 800c28e:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b9b3      	cbnz	r3, 800c2c2 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c294:	aa01      	add	r2, sp, #4
 800c296:	4629      	mov	r1, r5
 800c298:	f7ff ffd0 	bl	800c23c <netif_do_set_ipaddr.isra.0>
 800c29c:	2301      	movs	r3, #1
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 800c29e:	683a      	ldr	r2, [r7, #0]
 800c2a0:	68a1      	ldr	r1, [r4, #8]
 800c2a2:	428a      	cmp	r2, r1
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 800c2a4:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c2a6:	bf18      	it	ne
 800c2a8:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 800c2aa:	6832      	ldr	r2, [r6, #0]
 800c2ac:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c2ae:	bf18      	it	ne
 800c2b0:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800c2b2:	b923      	cbnz	r3, 800c2be <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c2b4:	aa01      	add	r2, sp, #4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7ff ffbf 	bl	800c23c <netif_do_set_ipaddr.isra.0>
}
 800c2be:	b003      	add	sp, #12
 800c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e7eb      	b.n	800c29e <netif_set_addr+0x2a>
 800c2c6:	bf00      	nop
 800c2c8:	0808f8f8 	.word	0x0808f8f8

0800c2cc <netif_add>:
{
 800c2cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	b918      	cbnz	r0, 800c2de <netif_add+0x12>
 800c2d6:	2400      	movs	r4, #0
}
 800c2d8:	4620      	mov	r0, r4
 800c2da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	d0f9      	beq.n	800c2d6 <netif_add+0xa>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c2e2:	2500      	movs	r5, #0
  netif->num = netif_num;
 800c2e4:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 800c3b4 <netif_add+0xe8>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c2e8:	4f2f      	ldr	r7, [pc, #188]	@ (800c3a8 <netif_add+0xdc>)
  ip_addr_set_zero_ip4(&netif->gw);
 800c2ea:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 800c2ec:	8485      	strh	r5, [r0, #36]	@ 0x24
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bf08      	it	eq
 800c2f2:	463b      	moveq	r3, r7
  netif->flags = 0;
 800c2f4:	f880 502d 	strb.w	r5, [r0, #45]	@ 0x2d
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c2f8:	2a00      	cmp	r2, #0
 800c2fa:	bf08      	it	eq
 800c2fc:	463a      	moveq	r2, r7
  netif->link_callback = NULL;
 800c2fe:	61c5      	str	r5, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c300:	2900      	cmp	r1, #0
 800c302:	bf08      	it	eq
 800c304:	4639      	moveq	r1, r7
  netif->output = netif_null_output_ip4;
 800c306:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 800c3b8 <netif_add+0xec>
  ip_addr_set_zero_ip4(&netif->netmask);
 800c30a:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif->state = state;
 800c30e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  netif->output = netif_null_output_ip4;
 800c310:	f8c0 c014 	str.w	ip, [r0, #20]
  netif->state = state;
 800c314:	6205      	str	r5, [r0, #32]
  netif->num = netif_num;
 800c316:	f898 5000 	ldrb.w	r5, [r8]
 800c31a:	f880 5030 	strb.w	r5, [r0, #48]	@ 0x30
  netif->input = input;
 800c31e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800c320:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c322:	f7ff ffa7 	bl	800c274 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800c326:	4620      	mov	r0, r4
 800c328:	47b0      	blx	r6
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d1d3      	bne.n	800c2d6 <netif_add+0xa>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c32e:	4e1f      	ldr	r6, [pc, #124]	@ (800c3ac <netif_add+0xe0>)
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c330:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800c3bc <netif_add+0xf0>
      if (netif->num == 255) {
 800c334:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
      num_netifs = 0;
 800c338:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c33a:	6835      	ldr	r5, [r6, #0]
      if (netif->num == 255) {
 800c33c:	2bff      	cmp	r3, #255	@ 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c33e:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c3c0 <netif_add+0xf4>
 800c342:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800c3c4 <netif_add+0xf8>
        netif->num = 0;
 800c346:	bf04      	itt	eq
 800c348:	2300      	moveq	r3, #0
 800c34a:	f884 3030 	strbeq.w	r3, [r4, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c34e:	b95d      	cbnz	r5, 800c368 <netif_add+0x9c>
  if (netif->num == 254) {
 800c350:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800c354:	2bfe      	cmp	r3, #254	@ 0xfe
    netif_num = (u8_t)(netif->num + 1);
 800c356:	bf1c      	itt	ne
 800c358:	3301      	addne	r3, #1
 800c35a:	b2dd      	uxtbne	r5, r3
  netif->next = netif_list;
 800c35c:	6833      	ldr	r3, [r6, #0]
 800c35e:	f888 5000 	strb.w	r5, [r8]
 800c362:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800c364:	6034      	str	r4, [r6, #0]
  return netif;
 800c366:	e7b7      	b.n	800c2d8 <netif_add+0xc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c368:	42a5      	cmp	r5, r4
 800c36a:	d106      	bne.n	800c37a <netif_add+0xae>
 800c36c:	464b      	mov	r3, r9
 800c36e:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c372:	4659      	mov	r1, fp
 800c374:	4650      	mov	r0, sl
 800c376:	f009 fc09 	bl	8015b8c <iprintf>
        num_netifs++;
 800c37a:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c37c:	2fff      	cmp	r7, #255	@ 0xff
 800c37e:	dd06      	ble.n	800c38e <netif_add+0xc2>
 800c380:	464b      	mov	r3, r9
 800c382:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c386:	490a      	ldr	r1, [pc, #40]	@ (800c3b0 <netif_add+0xe4>)
 800c388:	4650      	mov	r0, sl
 800c38a:	f009 fbff 	bl	8015b8c <iprintf>
        if (netif2->num == netif->num) {
 800c38e:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 800c392:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800c396:	4293      	cmp	r3, r2
 800c398:	d103      	bne.n	800c3a2 <netif_add+0xd6>
          netif->num++;
 800c39a:	3301      	adds	r3, #1
 800c39c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    } while (netif2 != NULL);
 800c3a0:	e7c8      	b.n	800c334 <netif_add+0x68>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3a2:	682d      	ldr	r5, [r5, #0]
 800c3a4:	e7d3      	b.n	800c34e <netif_add+0x82>
 800c3a6:	bf00      	nop
 800c3a8:	0808f8f8 	.word	0x0808f8f8
 800c3ac:	20010f60 	.word	0x20010f60
 800c3b0:	08017744 	.word	0x08017744
 800c3b4:	20010f5b 	.word	0x20010f5b
 800c3b8:	0800c1f1 	.word	0x0800c1f1
 800c3bc:	080176ee 	.word	0x080176ee
 800c3c0:	08017730 	.word	0x08017730
 800c3c4:	080169d3 	.word	0x080169d3

0800c3c8 <netif_set_default>:
  netif_default = netif;
 800c3c8:	4b01      	ldr	r3, [pc, #4]	@ (800c3d0 <netif_set_default+0x8>)
 800c3ca:	6018      	str	r0, [r3, #0]
}
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	20010f5c 	.word	0x20010f5c

0800c3d4 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c3d4:	b150      	cbz	r0, 800c3ec <netif_set_up+0x18>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c3d6:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800c3da:	07d1      	lsls	r1, r2, #31
 800c3dc:	d406      	bmi.n	800c3ec <netif_set_up+0x18>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c3de:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c3e2:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c3e4:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c3e8:	f7ff bf06 	b.w	800c1f8 <netif_issue_reports>
}
 800c3ec:	4770      	bx	lr

0800c3ee <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c3ee:	b158      	cbz	r0, 800c408 <netif_set_down+0x1a>
  if (netif->flags & NETIF_FLAG_UP) {
 800c3f0:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800c3f4:	07d1      	lsls	r1, r2, #31
 800c3f6:	d507      	bpl.n	800c408 <netif_set_down+0x1a>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c3f8:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c3fc:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c3fe:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c402:	d501      	bpl.n	800c408 <netif_set_down+0x1a>
      etharp_cleanup_netif(netif);
 800c404:	f004 b9b8 	b.w	8010778 <etharp_cleanup_netif>
}
 800c408:	4770      	bx	lr

0800c40a <netif_set_link_up>:
{
 800c40a:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c40c:	4604      	mov	r4, r0
 800c40e:	b180      	cbz	r0, 800c432 <netif_set_link_up+0x28>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c410:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800c414:	075a      	lsls	r2, r3, #29
 800c416:	d40c      	bmi.n	800c432 <netif_set_link_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c418:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c41c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c41e:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c422:	f7ff fee9 	bl	800c1f8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800c426:	69e3      	ldr	r3, [r4, #28]
 800c428:	b11b      	cbz	r3, 800c432 <netif_set_link_up+0x28>
 800c42a:	4620      	mov	r0, r4
}
 800c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800c430:	4718      	bx	r3
}
 800c432:	bd10      	pop	{r4, pc}

0800c434 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c434:	b150      	cbz	r0, 800c44c <netif_set_link_down+0x18>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c436:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800c43a:	0751      	lsls	r1, r2, #29
 800c43c:	d506      	bpl.n	800c44c <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c43e:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 800c442:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c444:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c448:	b103      	cbz	r3, 800c44c <netif_set_link_down+0x18>
 800c44a:	4718      	bx	r3
}
 800c44c:	4770      	bx	lr

0800c44e <netif_set_link_callback>:
  if (netif) {
 800c44e:	b100      	cbz	r0, 800c452 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800c450:	61c1      	str	r1, [r0, #28]
}
 800c452:	4770      	bx	lr

0800c454 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c454:	4603      	mov	r3, r0
 800c456:	b158      	cbz	r0, 800c470 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800c458:	4a06      	ldr	r2, [pc, #24]	@ (800c474 <netif_get_by_index+0x20>)
 800c45a:	6810      	ldr	r0, [r2, #0]
 800c45c:	b900      	cbnz	r0, 800c460 <netif_get_by_index+0xc>
 800c45e:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800c460:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 800c464:	3201      	adds	r2, #1
 800c466:	b2d2      	uxtb	r2, r2
 800c468:	429a      	cmp	r2, r3
 800c46a:	d001      	beq.n	800c470 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800c46c:	6800      	ldr	r0, [r0, #0]
 800c46e:	e7f5      	b.n	800c45c <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20010f60 	.word	0x20010f60

0800c478 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c478:	b110      	cbz	r0, 800c480 <pbuf_skip_const+0x8>
 800c47a:	8943      	ldrh	r3, [r0, #10]
 800c47c:	428b      	cmp	r3, r1
 800c47e:	d902      	bls.n	800c486 <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
 800c480:	b102      	cbz	r2, 800c484 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 800c482:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 800c484:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
 800c486:	1ac9      	subs	r1, r1, r3
    q = q->next;
 800c488:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800c48a:	b289      	uxth	r1, r1
    q = q->next;
 800c48c:	e7f4      	b.n	800c478 <pbuf_skip_const>
	...

0800c490 <pbuf_add_header_impl>:
{
 800c490:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c492:	b120      	cbz	r0, 800c49e <pbuf_add_header_impl+0xe>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c494:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c498:	d309      	bcc.n	800c4ae <pbuf_add_header_impl+0x1e>
    return 1;
 800c49a:	2001      	movs	r0, #1
}
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c49e:	4b13      	ldr	r3, [pc, #76]	@ (800c4ec <pbuf_add_header_impl+0x5c>)
 800c4a0:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c4a4:	4912      	ldr	r1, [pc, #72]	@ (800c4f0 <pbuf_add_header_impl+0x60>)
 800c4a6:	4813      	ldr	r0, [pc, #76]	@ (800c4f4 <pbuf_add_header_impl+0x64>)
 800c4a8:	f009 fb70 	bl	8015b8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c4ac:	e7f5      	b.n	800c49a <pbuf_add_header_impl+0xa>
  if (header_size_increment == 0) {
 800c4ae:	b1a9      	cbz	r1, 800c4dc <pbuf_add_header_impl+0x4c>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c4b0:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800c4b2:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c4b4:	fa13 f381 	uxtah	r3, r3, r1
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	d3ed      	bcc.n	800c49a <pbuf_add_header_impl+0xa>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c4be:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800c4c2:	2d00      	cmp	r5, #0
 800c4c4:	da0c      	bge.n	800c4e0 <pbuf_add_header_impl+0x50>
    payload = (u8_t *)p->payload - header_size_increment;
 800c4c6:	6842      	ldr	r2, [r0, #4]
 800c4c8:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c4ca:	f100 0210 	add.w	r2, r0, #16
 800c4ce:	4291      	cmp	r1, r2
 800c4d0:	d3e3      	bcc.n	800c49a <pbuf_add_header_impl+0xa>
  p->len = (u16_t)(p->len + increment_magnitude);
 800c4d2:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800c4d4:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c4d6:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c4d8:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c4da:	8144      	strh	r4, [r0, #10]
    return 0;
 800c4dc:	2000      	movs	r0, #0
 800c4de:	e7dd      	b.n	800c49c <pbuf_add_header_impl+0xc>
    if (force) {
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	d0da      	beq.n	800c49a <pbuf_add_header_impl+0xa>
      payload = (u8_t *)p->payload - header_size_increment;
 800c4e4:	6842      	ldr	r2, [r0, #4]
 800c4e6:	1a51      	subs	r1, r2, r1
 800c4e8:	e7f3      	b.n	800c4d2 <pbuf_add_header_impl+0x42>
 800c4ea:	bf00      	nop
 800c4ec:	08017772 	.word	0x08017772
 800c4f0:	08017814 	.word	0x08017814
 800c4f4:	080169d3 	.word	0x080169d3

0800c4f8 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c4f8:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800c4fc:	2b01      	cmp	r3, #1
{
 800c4fe:	b570      	push	{r4, r5, r6, lr}
 800c500:	4606      	mov	r6, r0
 800c502:	460d      	mov	r5, r1
 800c504:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c506:	d006      	beq.n	800c516 <pbuf_alloc_reference+0x1e>
 800c508:	4b0a      	ldr	r3, [pc, #40]	@ (800c534 <pbuf_alloc_reference+0x3c>)
 800c50a:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800c50e:	490a      	ldr	r1, [pc, #40]	@ (800c538 <pbuf_alloc_reference+0x40>)
 800c510:	480a      	ldr	r0, [pc, #40]	@ (800c53c <pbuf_alloc_reference+0x44>)
 800c512:	f009 fb3b 	bl	8015b8c <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c516:	200b      	movs	r0, #11
 800c518:	f7ff fe40 	bl	800c19c <memp_malloc>
  if (p == NULL) {
 800c51c:	b140      	cbz	r0, 800c530 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800c51e:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800c520:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800c522:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 800c524:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800c526:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800c528:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 800c52c:	2301      	movs	r3, #1
 800c52e:	81c3      	strh	r3, [r0, #14]
}
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	bf00      	nop
 800c534:	08017772 	.word	0x08017772
 800c538:	08017790 	.word	0x08017790
 800c53c:	080169d3 	.word	0x080169d3

0800c540 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c540:	3003      	adds	r0, #3
{
 800c542:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c544:	f020 0403 	bic.w	r4, r0, #3
 800c548:	f8bd 0014 	ldrh.w	r0, [sp, #20]
{
 800c54c:	9d04      	ldr	r5, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c54e:	190e      	adds	r6, r1, r4
 800c550:	4286      	cmp	r6, r0
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	d80b      	bhi.n	800c570 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800c558:	b105      	cbz	r5, 800c55c <pbuf_alloced_custom+0x1c>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c55a:	4425      	add	r5, r4
  p->type_internal = (u8_t)type;
 800c55c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c55e:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 800c560:	8119      	strh	r1, [r3, #8]
  p->flags = flags;
 800c562:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c564:	2201      	movs	r2, #1
  p->len = len;
 800c566:	8159      	strh	r1, [r3, #10]
  p->ref = 1;
 800c568:	81da      	strh	r2, [r3, #14]
  p->payload = payload;
 800c56a:	e9c3 0500 	strd	r0, r5, [r3]
  return &p->pbuf;
 800c56e:	4618      	mov	r0, r3
}
 800c570:	bd70      	pop	{r4, r5, r6, pc}

0800c572 <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c572:	2200      	movs	r2, #0
 800c574:	f7ff bf8c 	b.w	800c490 <pbuf_add_header_impl>

0800c578 <pbuf_remove_header>:
{
 800c578:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c57a:	b120      	cbz	r0, 800c586 <pbuf_remove_header+0xe>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c57c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c580:	d309      	bcc.n	800c596 <pbuf_remove_header+0x1e>
    return 1;
 800c582:	2001      	movs	r0, #1
}
 800c584:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c586:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b4 <pbuf_remove_header+0x3c>)
 800c588:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800c58c:	490a      	ldr	r1, [pc, #40]	@ (800c5b8 <pbuf_remove_header+0x40>)
 800c58e:	480b      	ldr	r0, [pc, #44]	@ (800c5bc <pbuf_remove_header+0x44>)
 800c590:	f009 fafc 	bl	8015b8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c594:	e7f5      	b.n	800c582 <pbuf_remove_header+0xa>
  if (header_size_decrement == 0) {
 800c596:	b159      	cbz	r1, 800c5b0 <pbuf_remove_header+0x38>
  increment_magnitude = (u16_t)header_size_decrement;
 800c598:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c59a:	8943      	ldrh	r3, [r0, #10]
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d3f0      	bcc.n	800c582 <pbuf_remove_header+0xa>
  p->len = (u16_t)(p->len - increment_magnitude);
 800c5a0:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c5a2:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800c5a4:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c5a6:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c5a8:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c5aa:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c5ac:	1a9b      	subs	r3, r3, r2
 800c5ae:	8103      	strh	r3, [r0, #8]
    return 0;
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	e7e7      	b.n	800c584 <pbuf_remove_header+0xc>
 800c5b4:	08017772 	.word	0x08017772
 800c5b8:	08017814 	.word	0x08017814
 800c5bc:	080169d3 	.word	0x080169d3

0800c5c0 <pbuf_header_force>:
  if (header_size_increment < 0) {
 800c5c0:	1e0b      	subs	r3, r1, #0
 800c5c2:	da02      	bge.n	800c5ca <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c5c4:	4259      	negs	r1, r3
 800c5c6:	f7ff bfd7 	b.w	800c578 <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f7ff bf60 	b.w	800c490 <pbuf_add_header_impl>

0800c5d0 <pbuf_free>:
{
 800c5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	b950      	cbnz	r0, 800c5ee <pbuf_free+0x1e>
    return 0;
 800c5d8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800c5da:	4b2c      	ldr	r3, [pc, #176]	@ (800c68c <pbuf_free+0xbc>)
 800c5dc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c5e0:	492b      	ldr	r1, [pc, #172]	@ (800c690 <pbuf_free+0xc0>)
 800c5e2:	482c      	ldr	r0, [pc, #176]	@ (800c694 <pbuf_free+0xc4>)
 800c5e4:	f009 fad2 	bl	8015b8c <iprintf>
}
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800c5ee:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c5f0:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800c68c <pbuf_free+0xbc>
 800c5f4:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 800c6a0 <pbuf_free+0xd0>
 800c5f8:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 800c694 <pbuf_free+0xc4>
    SYS_ARCH_PROTECT(old_level);
 800c5fc:	f005 fa7f 	bl	8011afe <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c600:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800c602:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c604:	b933      	cbnz	r3, 800c614 <pbuf_free+0x44>
 800c606:	4643      	mov	r3, r8
 800c608:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c60c:	4651      	mov	r1, sl
 800c60e:	4648      	mov	r0, r9
 800c610:	f009 fabc 	bl	8015b8c <iprintf>
    ref = --(p->ref);
 800c614:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800c616:	4638      	mov	r0, r7
    ref = --(p->ref);
 800c618:	3e01      	subs	r6, #1
 800c61a:	b2f6      	uxtb	r6, r6
 800c61c:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800c61e:	f005 fa73 	bl	8011b08 <sys_arch_unprotect>
    if (ref == 0) {
 800c622:	2e00      	cmp	r6, #0
 800c624:	d1e0      	bne.n	800c5e8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c626:	7b62      	ldrb	r2, [r4, #13]
      q = p->next;
 800c628:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c62a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800c62c:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c62e:	d511      	bpl.n	800c654 <pbuf_free+0x84>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	b933      	cbnz	r3, 800c642 <pbuf_free+0x72>
 800c634:	4b15      	ldr	r3, [pc, #84]	@ (800c68c <pbuf_free+0xbc>)
 800c636:	f240 3203 	movw	r2, #771	@ 0x303
 800c63a:	4917      	ldr	r1, [pc, #92]	@ (800c698 <pbuf_free+0xc8>)
 800c63c:	4815      	ldr	r0, [pc, #84]	@ (800c694 <pbuf_free+0xc4>)
 800c63e:	f009 faa5 	bl	8015b8c <iprintf>
        pc->custom_free_function(p);
 800c642:	6923      	ldr	r3, [r4, #16]
 800c644:	4620      	mov	r0, r4
 800c646:	4798      	blx	r3
      count++;
 800c648:	3501      	adds	r5, #1
 800c64a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800c64c:	2e00      	cmp	r6, #0
 800c64e:	d0cb      	beq.n	800c5e8 <pbuf_free+0x18>
 800c650:	4634      	mov	r4, r6
 800c652:	e7d3      	b.n	800c5fc <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
 800c654:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d104      	bne.n	800c666 <pbuf_free+0x96>
          memp_free(MEMP_PBUF_POOL, p);
 800c65c:	4621      	mov	r1, r4
 800c65e:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800c660:	f7ff fdba 	bl	800c1d8 <memp_free>
 800c664:	e7f0      	b.n	800c648 <pbuf_free+0x78>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c666:	2b01      	cmp	r3, #1
 800c668:	d102      	bne.n	800c670 <pbuf_free+0xa0>
          memp_free(MEMP_PBUF, p);
 800c66a:	4621      	mov	r1, r4
 800c66c:	200b      	movs	r0, #11
 800c66e:	e7f7      	b.n	800c660 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c670:	b91b      	cbnz	r3, 800c67a <pbuf_free+0xaa>
          mem_free(p);
 800c672:	4620      	mov	r0, r4
 800c674:	f7ff faec 	bl	800bc50 <mem_free>
 800c678:	e7e6      	b.n	800c648 <pbuf_free+0x78>
          LWIP_ASSERT("invalid pbuf type", 0);
 800c67a:	4643      	mov	r3, r8
 800c67c:	f240 3213 	movw	r2, #787	@ 0x313
 800c680:	4906      	ldr	r1, [pc, #24]	@ (800c69c <pbuf_free+0xcc>)
 800c682:	4648      	mov	r0, r9
 800c684:	f009 fa82 	bl	8015b8c <iprintf>
 800c688:	e7de      	b.n	800c648 <pbuf_free+0x78>
 800c68a:	bf00      	nop
 800c68c:	08017772 	.word	0x08017772
 800c690:	08017814 	.word	0x08017814
 800c694:	080169d3 	.word	0x080169d3
 800c698:	080177b8 	.word	0x080177b8
 800c69c:	080177d9 	.word	0x080177d9
 800c6a0:	080177a2 	.word	0x080177a2

0800c6a4 <pbuf_alloc>:
  switch (type) {
 800c6a4:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 800c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	460d      	mov	r5, r1
  u16_t offset = (u16_t)layer;
 800c6b0:	4606      	mov	r6, r0
  switch (type) {
 800c6b2:	d014      	beq.n	800c6de <pbuf_alloc+0x3a>
 800c6b4:	d808      	bhi.n	800c6c8 <pbuf_alloc+0x24>
 800c6b6:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d107      	bne.n	800c6ce <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800c6be:	2000      	movs	r0, #0
}
 800c6c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800c6c4:	f7ff bf18 	b.w	800c4f8 <pbuf_alloc_reference>
  switch (type) {
 800c6c8:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800c6cc:	d038      	beq.n	800c740 <pbuf_alloc+0x9c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c780 <pbuf_alloc+0xdc>)
 800c6d0:	f240 1229 	movw	r2, #297	@ 0x129
 800c6d4:	492b      	ldr	r1, [pc, #172]	@ (800c784 <pbuf_alloc+0xe0>)
 800c6d6:	482c      	ldr	r0, [pc, #176]	@ (800c788 <pbuf_alloc+0xe4>)
 800c6d8:	f009 fa58 	bl	8015b8c <iprintf>
      return NULL;
 800c6dc:	e00e      	b.n	800c6fc <pbuf_alloc+0x58>
  switch (type) {
 800c6de:	2000      	movs	r0, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c6e0:	f240 57f4 	movw	r7, #1524	@ 0x5f4
  p->type_internal = (u8_t)type;
 800c6e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800c790 <pbuf_alloc+0xec>
  switch (type) {
 800c6e8:	4604      	mov	r4, r0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c6ea:	4681      	mov	r9, r0
 800c6ec:	200c      	movs	r0, #12
 800c6ee:	f7ff fd55 	bl	800c19c <memp_malloc>
        if (q == NULL) {
 800c6f2:	b938      	cbnz	r0, 800c704 <pbuf_alloc+0x60>
          if (p) {
 800c6f4:	b114      	cbz	r4, 800c6fc <pbuf_alloc+0x58>
            pbuf_free(p);
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f7ff ff6a 	bl	800c5d0 <pbuf_free>
          return NULL;
 800c6fc:	2400      	movs	r4, #0
}
 800c6fe:	4620      	mov	r0, r4
 800c700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c704:	1cf3      	adds	r3, r6, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c706:	4406      	add	r6, r0
  p->next = NULL;
 800c708:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800c70a:	8105      	strh	r5, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c70c:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c710:	3613      	adds	r6, #19
  p->next = NULL;
 800c712:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c714:	1afb      	subs	r3, r7, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c716:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 800c71a:	f8c0 800c 	str.w	r8, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c71e:	b29b      	uxth	r3, r3
  p->payload = payload;
 800c720:	6046      	str	r6, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c722:	42ab      	cmp	r3, r5
 800c724:	bf28      	it	cs
 800c726:	462b      	movcs	r3, r5
  p->len = len;
 800c728:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800c72a:	b13c      	cbz	r4, 800c73c <pbuf_alloc+0x98>
          last->next = q;
 800c72c:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 800c730:	1aeb      	subs	r3, r5, r3
        offset = 0;
 800c732:	2600      	movs	r6, #0
        rem_len = (u16_t)(rem_len - qlen);
 800c734:	b29d      	uxth	r5, r3
      } while (rem_len > 0);
 800c736:	2d00      	cmp	r5, #0
 800c738:	d1d7      	bne.n	800c6ea <pbuf_alloc+0x46>
 800c73a:	e7e0      	b.n	800c6fe <pbuf_alloc+0x5a>
          p = q;
 800c73c:	4604      	mov	r4, r0
 800c73e:	e7f7      	b.n	800c730 <pbuf_alloc+0x8c>
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c740:	1cc3      	adds	r3, r0, #3
 800c742:	1cca      	adds	r2, r1, #3
 800c744:	f023 0303 	bic.w	r3, r3, #3
 800c748:	f022 0203 	bic.w	r2, r2, #3
 800c74c:	4413      	add	r3, r2
 800c74e:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c750:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c754:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c756:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c758:	d3d0      	bcc.n	800c6fc <pbuf_alloc+0x58>
 800c75a:	4282      	cmp	r2, r0
 800c75c:	d8ce      	bhi.n	800c6fc <pbuf_alloc+0x58>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c75e:	f7ff fc05 	bl	800bf6c <mem_malloc>
      if (p == NULL) {
 800c762:	4604      	mov	r4, r0
 800c764:	2800      	cmp	r0, #0
 800c766:	d0ca      	beq.n	800c6fe <pbuf_alloc+0x5a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c768:	4407      	add	r7, r0
  p->next = NULL;
 800c76a:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800c76c:	8105      	strh	r5, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c76e:	3713      	adds	r7, #19
  p->next = NULL;
 800c770:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800c772:	4b06      	ldr	r3, [pc, #24]	@ (800c78c <pbuf_alloc+0xe8>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c774:	f027 0703 	bic.w	r7, r7, #3
  p->len = len;
 800c778:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800c77a:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800c77c:	6047      	str	r7, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c77e:	e7be      	b.n	800c6fe <pbuf_alloc+0x5a>
 800c780:	08017772 	.word	0x08017772
 800c784:	080177eb 	.word	0x080177eb
 800c788:	080169d3 	.word	0x080169d3
 800c78c:	00010080 	.word	0x00010080
 800c790:	00010082 	.word	0x00010082

0800c794 <pbuf_realloc>:
{
 800c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c79a:	4604      	mov	r4, r0
 800c79c:	b930      	cbnz	r0, 800c7ac <pbuf_realloc+0x18>
 800c79e:	4b28      	ldr	r3, [pc, #160]	@ (800c840 <pbuf_realloc+0xac>)
 800c7a0:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 800c7a4:	4927      	ldr	r1, [pc, #156]	@ (800c844 <pbuf_realloc+0xb0>)
 800c7a6:	4828      	ldr	r0, [pc, #160]	@ (800c848 <pbuf_realloc+0xb4>)
 800c7a8:	f009 f9f0 	bl	8015b8c <iprintf>
  if (new_len >= p->tot_len) {
 800c7ac:	8927      	ldrh	r7, [r4, #8]
 800c7ae:	42b7      	cmp	r7, r6
 800c7b0:	d943      	bls.n	800c83a <pbuf_realloc+0xa6>
  rem_len = new_len;
 800c7b2:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c7b4:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800c840 <pbuf_realloc+0xac>
 800c7b8:	f8df a098 	ldr.w	sl, [pc, #152]	@ 800c854 <pbuf_realloc+0xc0>
 800c7bc:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800c848 <pbuf_realloc+0xb4>
  while (rem_len > q->len) {
 800c7c0:	8962      	ldrh	r2, [r4, #10]
 800c7c2:	42aa      	cmp	r2, r5
 800c7c4:	d31e      	bcc.n	800c804 <pbuf_realloc+0x70>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c7c6:	7b23      	ldrb	r3, [r4, #12]
 800c7c8:	0719      	lsls	r1, r3, #28
 800c7ca:	d12e      	bne.n	800c82a <pbuf_realloc+0x96>
 800c7cc:	42aa      	cmp	r2, r5
 800c7ce:	d02c      	beq.n	800c82a <pbuf_realloc+0x96>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c7d0:	7b63      	ldrb	r3, [r4, #13]
 800c7d2:	079b      	lsls	r3, r3, #30
 800c7d4:	d429      	bmi.n	800c82a <pbuf_realloc+0x96>
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c7d6:	6861      	ldr	r1, [r4, #4]
 800c7d8:	4620      	mov	r0, r4
 800c7da:	1b09      	subs	r1, r1, r4
 800c7dc:	4429      	add	r1, r5
 800c7de:	b289      	uxth	r1, r1
 800c7e0:	f7ff fb0e 	bl	800be00 <mem_trim>
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 800c7e4:	b9f8      	cbnz	r0, 800c826 <pbuf_realloc+0x92>
 800c7e6:	4b16      	ldr	r3, [pc, #88]	@ (800c840 <pbuf_realloc+0xac>)
 800c7e8:	f240 12bf 	movw	r2, #447	@ 0x1bf
 800c7ec:	4917      	ldr	r1, [pc, #92]	@ (800c84c <pbuf_realloc+0xb8>)
 800c7ee:	4816      	ldr	r0, [pc, #88]	@ (800c848 <pbuf_realloc+0xb4>)
 800c7f0:	f009 f9cc 	bl	8015b8c <iprintf>
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800c7f4:	4b12      	ldr	r3, [pc, #72]	@ (800c840 <pbuf_realloc+0xac>)
 800c7f6:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800c7fa:	4915      	ldr	r1, [pc, #84]	@ (800c850 <pbuf_realloc+0xbc>)
 800c7fc:	4812      	ldr	r0, [pc, #72]	@ (800c848 <pbuf_realloc+0xb4>)
 800c7fe:	f009 f9c5 	bl	8015b8c <iprintf>
 800c802:	e012      	b.n	800c82a <pbuf_realloc+0x96>
    rem_len = (u16_t)(rem_len - q->len);
 800c804:	1aaa      	subs	r2, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c806:	1bf3      	subs	r3, r6, r7
    rem_len = (u16_t)(rem_len - q->len);
 800c808:	b295      	uxth	r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c80a:	8922      	ldrh	r2, [r4, #8]
 800c80c:	4413      	add	r3, r2
 800c80e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800c810:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c812:	2c00      	cmp	r4, #0
 800c814:	d1d4      	bne.n	800c7c0 <pbuf_realloc+0x2c>
 800c816:	4643      	mov	r3, r8
 800c818:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800c81c:	4651      	mov	r1, sl
 800c81e:	4648      	mov	r0, r9
 800c820:	f009 f9b4 	bl	8015b8c <iprintf>
 800c824:	e7cc      	b.n	800c7c0 <pbuf_realloc+0x2c>
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800c826:	4284      	cmp	r4, r0
 800c828:	d1e4      	bne.n	800c7f4 <pbuf_realloc+0x60>
  if (q->next != NULL) {
 800c82a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800c82c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800c82e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800c830:	b108      	cbz	r0, 800c836 <pbuf_realloc+0xa2>
    pbuf_free(q->next);
 800c832:	f7ff fecd 	bl	800c5d0 <pbuf_free>
  q->next = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	6023      	str	r3, [r4, #0]
}
 800c83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83e:	bf00      	nop
 800c840:	08017772 	.word	0x08017772
 800c844:	08017806 	.word	0x08017806
 800c848:	080169d3 	.word	0x080169d3
 800c84c:	08017836 	.word	0x08017836
 800c850:	08017852 	.word	0x08017852
 800c854:	0801781e 	.word	0x0801781e

0800c858 <pbuf_clen>:
  while (p != NULL) {
 800c858:	2300      	movs	r3, #0
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	b908      	cbnz	r0, 800c862 <pbuf_clen+0xa>
}
 800c85e:	b298      	uxth	r0, r3
 800c860:	4770      	bx	lr
    p = p->next;
 800c862:	6800      	ldr	r0, [r0, #0]
 800c864:	4613      	mov	r3, r2
 800c866:	e7f8      	b.n	800c85a <pbuf_clen+0x2>

0800c868 <pbuf_ref>:
{
 800c868:	b510      	push	{r4, lr}
  if (p != NULL) {
 800c86a:	4604      	mov	r4, r0
 800c86c:	b188      	cbz	r0, 800c892 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c86e:	f005 f946 	bl	8011afe <sys_arch_protect>
 800c872:	7ba3      	ldrb	r3, [r4, #14]
 800c874:	3301      	adds	r3, #1
 800c876:	73a3      	strb	r3, [r4, #14]
 800c878:	f005 f946 	bl	8011b08 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c87c:	7ba3      	ldrb	r3, [r4, #14]
 800c87e:	b943      	cbnz	r3, 800c892 <pbuf_ref+0x2a>
 800c880:	4b04      	ldr	r3, [pc, #16]	@ (800c894 <pbuf_ref+0x2c>)
 800c882:	f240 3246 	movw	r2, #838	@ 0x346
 800c886:	4904      	ldr	r1, [pc, #16]	@ (800c898 <pbuf_ref+0x30>)
 800c888:	4804      	ldr	r0, [pc, #16]	@ (800c89c <pbuf_ref+0x34>)
}
 800c88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c88e:	f009 b97d 	b.w	8015b8c <iprintf>
}
 800c892:	bd10      	pop	{r4, pc}
 800c894:	08017772 	.word	0x08017772
 800c898:	0801786b 	.word	0x0801786b
 800c89c:	080169d3 	.word	0x080169d3

0800c8a0 <pbuf_cat>:
{
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	b320      	cbz	r0, 800c8f2 <pbuf_cat+0x52>
 800c8a8:	b319      	cbz	r1, 800c8f2 <pbuf_cat+0x52>
  LWIP_ASSERT("Creating an infinite loop", h != t);
 800c8aa:	4288      	cmp	r0, r1
 800c8ac:	d106      	bne.n	800c8bc <pbuf_cat+0x1c>
 800c8ae:	4b14      	ldr	r3, [pc, #80]	@ (800c900 <pbuf_cat+0x60>)
 800c8b0:	f240 325f 	movw	r2, #863	@ 0x35f
 800c8b4:	4913      	ldr	r1, [pc, #76]	@ (800c904 <pbuf_cat+0x64>)
 800c8b6:	4814      	ldr	r0, [pc, #80]	@ (800c908 <pbuf_cat+0x68>)
 800c8b8:	f009 f968 	bl	8015b8c <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 800c8bc:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8be:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c8c0:	b9c2      	cbnz	r2, 800c8f4 <pbuf_cat+0x54>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c8c2:	8962      	ldrh	r2, [r4, #10]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d00f      	beq.n	800c8e8 <pbuf_cat+0x48>
 800c8c8:	4b0d      	ldr	r3, [pc, #52]	@ (800c900 <pbuf_cat+0x60>)
 800c8ca:	f240 3267 	movw	r2, #871	@ 0x367
 800c8ce:	490f      	ldr	r1, [pc, #60]	@ (800c90c <pbuf_cat+0x6c>)
 800c8d0:	480d      	ldr	r0, [pc, #52]	@ (800c908 <pbuf_cat+0x68>)
 800c8d2:	f009 f95b 	bl	8015b8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	b133      	cbz	r3, 800c8e8 <pbuf_cat+0x48>
 800c8da:	4b09      	ldr	r3, [pc, #36]	@ (800c900 <pbuf_cat+0x60>)
 800c8dc:	f44f 725a 	mov.w	r2, #872	@ 0x368
 800c8e0:	490b      	ldr	r1, [pc, #44]	@ (800c910 <pbuf_cat+0x70>)
 800c8e2:	4809      	ldr	r0, [pc, #36]	@ (800c908 <pbuf_cat+0x68>)
 800c8e4:	f009 f952 	bl	8015b8c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8e8:	892a      	ldrh	r2, [r5, #8]
 800c8ea:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800c8ec:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8ee:	4413      	add	r3, r2
 800c8f0:	8123      	strh	r3, [r4, #8]
}
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8f4:	8929      	ldrh	r1, [r5, #8]
 800c8f6:	440b      	add	r3, r1
 800c8f8:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c8fa:	4614      	mov	r4, r2
 800c8fc:	e7de      	b.n	800c8bc <pbuf_cat+0x1c>
 800c8fe:	bf00      	nop
 800c900:	08017772 	.word	0x08017772
 800c904:	0801787d 	.word	0x0801787d
 800c908:	080169d3 	.word	0x080169d3
 800c90c:	08017897 	.word	0x08017897
 800c910:	080178c4 	.word	0x080178c4

0800c914 <pbuf_copy_partial_pbuf>:
{
 800c914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	4605      	mov	r5, r0
 800c91a:	4616      	mov	r6, r2
 800c91c:	461f      	mov	r7, r3
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800c91e:	460c      	mov	r4, r1
 800c920:	2900      	cmp	r1, #0
 800c922:	d049      	beq.n	800c9b8 <pbuf_copy_partial_pbuf+0xa4>
 800c924:	890b      	ldrh	r3, [r1, #8]
 800c926:	4293      	cmp	r3, r2
 800c928:	d346      	bcc.n	800c9b8 <pbuf_copy_partial_pbuf+0xa4>
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d044      	beq.n	800c9b8 <pbuf_copy_partial_pbuf+0xa4>
 800c92e:	8902      	ldrh	r2, [r0, #8]
 800c930:	19bb      	adds	r3, r7, r6
 800c932:	429a      	cmp	r2, r3
 800c934:	db40      	blt.n	800c9b8 <pbuf_copy_partial_pbuf+0xa4>
  size_t offset_to = offset, offset_from = 0, len;
 800c936:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c93a:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 800ca00 <pbuf_copy_partial_pbuf+0xec>
 800c93e:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 800ca04 <pbuf_copy_partial_pbuf+0xf0>
 800c942:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 800ca08 <pbuf_copy_partial_pbuf+0xf4>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c946:	896a      	ldrh	r2, [r5, #10]
 800c948:	8963      	ldrh	r3, [r4, #10]
 800c94a:	1bd2      	subs	r2, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c94c:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c94e:	eba3 0308 	sub.w	r3, r3, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c952:	6861      	ldr	r1, [r4, #4]
 800c954:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c956:	429a      	cmp	r2, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c958:	4441      	add	r1, r8
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c95a:	bf28      	it	cs
 800c95c:	461a      	movcs	r2, r3
    len = LWIP_MIN(copy_len, len);
 800c95e:	42b2      	cmp	r2, r6
 800c960:	bf28      	it	cs
 800c962:	4632      	movcs	r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c964:	9201      	str	r2, [sp, #4]
 800c966:	f009 fb1c 	bl	8015fa2 <memcpy>
    offset_to += len;
 800c96a:	9a01      	ldr	r2, [sp, #4]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c96c:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800c96e:	4417      	add	r7, r2
    offset_from += len;
 800c970:	4490      	add	r8, r2
    copy_len = (u16_t)(copy_len - len);
 800c972:	1ab2      	subs	r2, r6, r2
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c974:	42bb      	cmp	r3, r7
    copy_len = (u16_t)(copy_len - len);
 800c976:	b296      	uxth	r6, r2
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c978:	d206      	bcs.n	800c988 <pbuf_copy_partial_pbuf+0x74>
 800c97a:	464b      	mov	r3, r9
 800c97c:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 800c980:	4659      	mov	r1, fp
 800c982:	4650      	mov	r0, sl
 800c984:	f009 f902 	bl	8015b8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c988:	8963      	ldrh	r3, [r4, #10]
 800c98a:	4543      	cmp	r3, r8
 800c98c:	d206      	bcs.n	800c99c <pbuf_copy_partial_pbuf+0x88>
 800c98e:	464b      	mov	r3, r9
 800c990:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 800c994:	4919      	ldr	r1, [pc, #100]	@ (800c9fc <pbuf_copy_partial_pbuf+0xe8>)
 800c996:	4650      	mov	r0, sl
 800c998:	f009 f8f8 	bl	8015b8c <iprintf>
    if (offset_from >= p_from->len) {
 800c99c:	8963      	ldrh	r3, [r4, #10]
 800c99e:	4543      	cmp	r3, r8
 800c9a0:	d804      	bhi.n	800c9ac <pbuf_copy_partial_pbuf+0x98>
      p_from = p_from->next;
 800c9a2:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800c9a4:	b904      	cbnz	r4, 800c9a8 <pbuf_copy_partial_pbuf+0x94>
 800c9a6:	b93e      	cbnz	r6, 800c9b8 <pbuf_copy_partial_pbuf+0xa4>
      offset_from = 0;
 800c9a8:	f04f 0800 	mov.w	r8, #0
    if (offset_to == p_to->len) {
 800c9ac:	896b      	ldrh	r3, [r5, #10]
 800c9ae:	42bb      	cmp	r3, r7
 800c9b0:	d121      	bne.n	800c9f6 <pbuf_copy_partial_pbuf+0xe2>
      p_to = p_to->next;
 800c9b2:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800c9b4:	b9f5      	cbnz	r5, 800c9f4 <pbuf_copy_partial_pbuf+0xe0>
 800c9b6:	b1ce      	cbz	r6, 800c9ec <pbuf_copy_partial_pbuf+0xd8>
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800c9b8:	f06f 000f 	mvn.w	r0, #15
 800c9bc:	e010      	b.n	800c9e0 <pbuf_copy_partial_pbuf+0xcc>
      offset_to = 0;
 800c9be:	4637      	mov	r7, r6
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c9c0:	8962      	ldrh	r2, [r4, #10]
 800c9c2:	8923      	ldrh	r3, [r4, #8]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d101      	bne.n	800c9cc <pbuf_copy_partial_pbuf+0xb8>
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	b963      	cbnz	r3, 800c9e6 <pbuf_copy_partial_pbuf+0xd2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c9cc:	b12d      	cbz	r5, 800c9da <pbuf_copy_partial_pbuf+0xc6>
 800c9ce:	896a      	ldrh	r2, [r5, #10]
 800c9d0:	892b      	ldrh	r3, [r5, #8]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d101      	bne.n	800c9da <pbuf_copy_partial_pbuf+0xc6>
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b92b      	cbnz	r3, 800c9e6 <pbuf_copy_partial_pbuf+0xd2>
  } while (copy_len);
 800c9da:	2e00      	cmp	r6, #0
 800c9dc:	d1b3      	bne.n	800c946 <pbuf_copy_partial_pbuf+0x32>
  return ERR_OK;
 800c9de:	4630      	mov	r0, r6
}
 800c9e0:	b003      	add	sp, #12
 800c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800c9e6:	f06f 0005 	mvn.w	r0, #5
 800c9ea:	e7f9      	b.n	800c9e0 <pbuf_copy_partial_pbuf+0xcc>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	d1e6      	bne.n	800c9be <pbuf_copy_partial_pbuf+0xaa>
  return ERR_OK;
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	e7f5      	b.n	800c9e0 <pbuf_copy_partial_pbuf+0xcc>
      offset_to = 0;
 800c9f4:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c9f6:	2c00      	cmp	r4, #0
 800c9f8:	d1e2      	bne.n	800c9c0 <pbuf_copy_partial_pbuf+0xac>
 800c9fa:	e7e8      	b.n	800c9ce <pbuf_copy_partial_pbuf+0xba>
 800c9fc:	080178eb 	.word	0x080178eb
 800ca00:	08017772 	.word	0x08017772
 800ca04:	080178d4 	.word	0x080178d4
 800ca08:	080169d3 	.word	0x080169d3

0800ca0c <pbuf_copy>:
  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800ca0c:	b119      	cbz	r1, 800ca16 <pbuf_copy+0xa>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800ca0e:	2300      	movs	r3, #0
 800ca10:	890a      	ldrh	r2, [r1, #8]
 800ca12:	f7ff bf7f 	b.w	800c914 <pbuf_copy_partial_pbuf>
}
 800ca16:	f06f 000f 	mvn.w	r0, #15
 800ca1a:	4770      	bx	lr

0800ca1c <pbuf_copy_partial>:
{
 800ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca20:	460f      	mov	r7, r1
 800ca22:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ca24:	4605      	mov	r5, r0
 800ca26:	b328      	cbz	r0, 800ca74 <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ca28:	b331      	cbz	r1, 800ca78 <pbuf_copy_partial+0x5c>
  u16_t left = 0;
 800ca2a:	2600      	movs	r6, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	d109      	bne.n	800ca46 <pbuf_copy_partial+0x2a>
}
 800ca32:	4630      	mov	r0, r6
 800ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((offset != 0) && (offset >= p->len)) {
 800ca38:	896c      	ldrh	r4, [r5, #10]
 800ca3a:	b13b      	cbz	r3, 800ca4c <pbuf_copy_partial+0x30>
 800ca3c:	429c      	cmp	r4, r3
 800ca3e:	d805      	bhi.n	800ca4c <pbuf_copy_partial+0x30>
      offset = (u16_t)(offset - p->len);
 800ca40:	1b1b      	subs	r3, r3, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca42:	682d      	ldr	r5, [r5, #0]
      offset = (u16_t)(offset - p->len);
 800ca44:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca46:	2d00      	cmp	r5, #0
 800ca48:	d1f6      	bne.n	800ca38 <pbuf_copy_partial+0x1c>
 800ca4a:	e7f2      	b.n	800ca32 <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 800ca4c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ca4e:	6869      	ldr	r1, [r5, #4]
 800ca50:	19b8      	adds	r0, r7, r6
      if (buf_copy_len > len) {
 800ca52:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ca54:	4419      	add	r1, r3
      if (buf_copy_len > len) {
 800ca56:	4544      	cmp	r4, r8
 800ca58:	bf28      	it	cs
 800ca5a:	4644      	movcs	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ca5c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ca5e:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 800ca60:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ca64:	f009 fa9d 	bl	8015fa2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ca68:	b2b6      	uxth	r6, r6
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca6a:	682d      	ldr	r5, [r5, #0]
      len = (u16_t)(len - buf_copy_len);
 800ca6c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca70:	2300      	movs	r3, #0
 800ca72:	e7db      	b.n	800ca2c <pbuf_copy_partial+0x10>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ca74:	4606      	mov	r6, r0
 800ca76:	e7dc      	b.n	800ca32 <pbuf_copy_partial+0x16>
 800ca78:	460e      	mov	r6, r1
 800ca7a:	e7da      	b.n	800ca32 <pbuf_copy_partial+0x16>

0800ca7c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ca80:	460a      	mov	r2, r1
 800ca82:	8929      	ldrh	r1, [r5, #8]
 800ca84:	f7ff fe0e 	bl	800c6a4 <pbuf_alloc>
  if (q == NULL) {
 800ca88:	4604      	mov	r4, r0
 800ca8a:	b150      	cbz	r0, 800caa2 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	f7ff ffbd 	bl	800ca0c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ca92:	b130      	cbz	r0, 800caa2 <pbuf_clone+0x26>
 800ca94:	4b04      	ldr	r3, [pc, #16]	@ (800caa8 <pbuf_clone+0x2c>)
 800ca96:	f240 524c 	movw	r2, #1356	@ 0x54c
 800ca9a:	4904      	ldr	r1, [pc, #16]	@ (800caac <pbuf_clone+0x30>)
 800ca9c:	4804      	ldr	r0, [pc, #16]	@ (800cab0 <pbuf_clone+0x34>)
 800ca9e:	f009 f875 	bl	8015b8c <iprintf>
  return q;
}
 800caa2:	4620      	mov	r0, r4
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	bf00      	nop
 800caa8:	08017772 	.word	0x08017772
 800caac:	08017906 	.word	0x08017906
 800cab0:	080169d3 	.word	0x080169d3

0800cab4 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800cab4:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800cab6:	f10d 0206 	add.w	r2, sp, #6
 800caba:	f7ff fcdd 	bl	800c478 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800cabe:	b148      	cbz	r0, 800cad4 <pbuf_try_get_at+0x20>
 800cac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cac4:	8942      	ldrh	r2, [r0, #10]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d904      	bls.n	800cad4 <pbuf_try_get_at+0x20>
    return ((u8_t *)q->payload)[q_idx];
 800caca:	6842      	ldr	r2, [r0, #4]
 800cacc:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 800cace:	b003      	add	sp, #12
 800cad0:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800cad4:	f04f 30ff 	mov.w	r0, #4294967295
 800cad8:	e7f9      	b.n	800cace <pbuf_try_get_at+0x1a>

0800cada <pbuf_get_at>:
{
 800cada:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 800cadc:	f7ff ffea 	bl	800cab4 <pbuf_try_get_at>
  if (ret >= 0) {
 800cae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800cae4:	b2c0      	uxtb	r0, r0
 800cae6:	bd08      	pop	{r3, pc}

0800cae8 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caec:	460e      	mov	r6, r1
 800caee:	4698      	mov	r8, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800caf0:	8901      	ldrh	r1, [r0, #8]
{
 800caf2:	4605      	mov	r5, r0
  if (p->tot_len < (offset + n)) {
 800caf4:	18f3      	adds	r3, r6, r3
 800caf6:	4299      	cmp	r1, r3
 800caf8:	da05      	bge.n	800cb06 <pbuf_memcmp+0x1e>
    return 0xffff;
 800cafa:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800cafe:	e017      	b.n	800cb30 <pbuf_memcmp+0x48>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800cb00:	1af3      	subs	r3, r6, r3
    q = q->next;
 800cb02:	682d      	ldr	r5, [r5, #0]
    start = (u16_t)(start - q->len);
 800cb04:	b29e      	uxth	r6, r3
  while ((q != NULL) && (q->len <= start)) {
 800cb06:	b115      	cbz	r5, 800cb0e <pbuf_memcmp+0x26>
 800cb08:	896b      	ldrh	r3, [r5, #10]
 800cb0a:	429e      	cmp	r6, r3
 800cb0c:	d2f8      	bcs.n	800cb00 <pbuf_memcmp+0x18>
 800cb0e:	1e57      	subs	r7, r2, #1
{
 800cb10:	2400      	movs	r4, #0
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800cb12:	45a0      	cmp	r8, r4
 800cb14:	d101      	bne.n	800cb1a <pbuf_memcmp+0x32>
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 800cb16:	2400      	movs	r4, #0
 800cb18:	e00a      	b.n	800cb30 <pbuf_memcmp+0x48>
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800cb1a:	1931      	adds	r1, r6, r4
 800cb1c:	4628      	mov	r0, r5
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800cb1e:	3401      	adds	r4, #1
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800cb20:	b289      	uxth	r1, r1
 800cb22:	f7ff ffda 	bl	800cada <pbuf_get_at>
    if (a != b) {
 800cb26:	f817 3f01 	ldrb.w	r3, [r7, #1]!
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800cb2a:	b2a4      	uxth	r4, r4
    if (a != b) {
 800cb2c:	4283      	cmp	r3, r0
 800cb2e:	d0f0      	beq.n	800cb12 <pbuf_memcmp+0x2a>
}
 800cb30:	4620      	mov	r0, r4
 800cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cb38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb3a:	4c11      	ldr	r4, [pc, #68]	@ (800cb80 <tcp_new_port+0x48>)
 800cb3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cb40:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800cb44:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 800cb46:	3301      	adds	r3, #1
 800cb48:	4d0e      	ldr	r5, [pc, #56]	@ (800cb84 <tcp_new_port+0x4c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb4a:	2200      	movs	r2, #0
  tcp_port++;
 800cb4c:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cb4e:	42b3      	cmp	r3, r6
 800cb50:	bf08      	it	eq
 800cb52:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb56:	f855 1b04 	ldr.w	r1, [r5], #4
 800cb5a:	6809      	ldr	r1, [r1, #0]
 800cb5c:	b929      	cbnz	r1, 800cb6a <tcp_new_port+0x32>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb5e:	3201      	adds	r2, #1
 800cb60:	b2d2      	uxtb	r2, r2
 800cb62:	2a04      	cmp	r2, #4
 800cb64:	d1f7      	bne.n	800cb56 <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb66:	4618      	mov	r0, r3
 800cb68:	e006      	b.n	800cb78 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800cb6a:	8acf      	ldrh	r7, [r1, #22]
 800cb6c:	429f      	cmp	r7, r3
 800cb6e:	d105      	bne.n	800cb7c <tcp_new_port+0x44>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cb70:	3801      	subs	r0, #1
 800cb72:	b280      	uxth	r0, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d1e6      	bne.n	800cb46 <tcp_new_port+0xe>
 800cb78:	8023      	strh	r3, [r4, #0]
}
 800cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb7c:	68c9      	ldr	r1, [r1, #12]
 800cb7e:	e7ed      	b.n	800cb5c <tcp_new_port+0x24>
 800cb80:	20000058 	.word	0x20000058
 800cb84:	0808f8bc 	.word	0x0808f8bc

0800cb88 <tcp_close_shutdown_fin>:
{
 800cb88:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	b930      	cbnz	r0, 800cb9c <tcp_close_shutdown_fin+0x14>
 800cb8e:	4b13      	ldr	r3, [pc, #76]	@ (800cbdc <tcp_close_shutdown_fin+0x54>)
 800cb90:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cb94:	4912      	ldr	r1, [pc, #72]	@ (800cbe0 <tcp_close_shutdown_fin+0x58>)
 800cb96:	4813      	ldr	r0, [pc, #76]	@ (800cbe4 <tcp_close_shutdown_fin+0x5c>)
 800cb98:	f008 fff8 	bl	8015b8c <iprintf>
  switch (pcb->state) {
 800cb9c:	7d23      	ldrb	r3, [r4, #20]
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d003      	beq.n	800cbaa <tcp_close_shutdown_fin+0x22>
 800cba2:	2b07      	cmp	r3, #7
 800cba4:	d00c      	beq.n	800cbc0 <tcp_close_shutdown_fin+0x38>
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d108      	bne.n	800cbbc <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f002 fea6 	bl	800f8fc <tcp_send_fin>
      if (err == ERR_OK) {
 800cbb0:	b960      	cbnz	r0, 800cbcc <tcp_close_shutdown_fin+0x44>
  if (err == ERR_OK) {
 800cbb2:	2305      	movs	r3, #5
    tcp_output(pcb);
 800cbb4:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800cbb6:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800cbb8:	f002 fff4 	bl	800fba4 <tcp_output>
      return ERR_OK;
 800cbbc:	2000      	movs	r0, #0
}
 800cbbe:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f002 fe9b 	bl	800f8fc <tcp_send_fin>
      if (err == ERR_OK) {
 800cbc6:	b908      	cbnz	r0, 800cbcc <tcp_close_shutdown_fin+0x44>
 800cbc8:	2309      	movs	r3, #9
 800cbca:	e7f3      	b.n	800cbb4 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d1f6      	bne.n	800cbbe <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cbd0:	8b63      	ldrh	r3, [r4, #26]
 800cbd2:	f043 0308 	orr.w	r3, r3, #8
 800cbd6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800cbd8:	e7f0      	b.n	800cbbc <tcp_close_shutdown_fin+0x34>
 800cbda:	bf00      	nop
 800cbdc:	08017917 	.word	0x08017917
 800cbe0:	08017934 	.word	0x08017934
 800cbe4:	080169d3 	.word	0x080169d3

0800cbe8 <tcp_init>:
{
 800cbe8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cbea:	f008 fecf 	bl	801598c <rand>
 800cbee:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800cbf2:	4b02      	ldr	r3, [pc, #8]	@ (800cbfc <tcp_init+0x14>)
 800cbf4:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800cbf8:	8018      	strh	r0, [r3, #0]
}
 800cbfa:	bd08      	pop	{r3, pc}
 800cbfc:	20000058 	.word	0x20000058

0800cc00 <tcp_free>:
{
 800cc00:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cc02:	7d03      	ldrb	r3, [r0, #20]
{
 800cc04:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d105      	bne.n	800cc16 <tcp_free+0x16>
 800cc0a:	4b06      	ldr	r3, [pc, #24]	@ (800cc24 <tcp_free+0x24>)
 800cc0c:	22d4      	movs	r2, #212	@ 0xd4
 800cc0e:	4906      	ldr	r1, [pc, #24]	@ (800cc28 <tcp_free+0x28>)
 800cc10:	4806      	ldr	r0, [pc, #24]	@ (800cc2c <tcp_free+0x2c>)
 800cc12:	f008 ffbb 	bl	8015b8c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800cc16:	4621      	mov	r1, r4
 800cc18:	2001      	movs	r0, #1
}
 800cc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800cc1e:	f7ff badb 	b.w	800c1d8 <memp_free>
 800cc22:	bf00      	nop
 800cc24:	08017917 	.word	0x08017917
 800cc28:	08017940 	.word	0x08017940
 800cc2c:	080169d3 	.word	0x080169d3

0800cc30 <tcp_bind>:
{
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800cc32:	4b1c      	ldr	r3, [pc, #112]	@ (800cca4 <tcp_bind+0x74>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc34:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800cc36:	2900      	cmp	r1, #0
 800cc38:	bf14      	ite	ne
 800cc3a:	460d      	movne	r5, r1
 800cc3c:	461d      	moveq	r5, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc3e:	b340      	cbz	r0, 800cc92 <tcp_bind+0x62>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cc40:	7d03      	ldrb	r3, [r0, #20]
 800cc42:	bb4b      	cbnz	r3, 800cc98 <tcp_bind+0x68>
  if (port == 0) {
 800cc44:	b932      	cbnz	r2, 800cc54 <tcp_bind+0x24>
    port = tcp_new_port();
 800cc46:	f7ff ff77 	bl	800cb38 <tcp_new_port>
    if (port == 0) {
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	b950      	cbnz	r0, 800cc64 <tcp_bind+0x34>
      return ERR_BUF;
 800cc4e:	f06f 0001 	mvn.w	r0, #1
 800cc52:	e012      	b.n	800cc7a <tcp_bind+0x4a>
 800cc54:	4814      	ldr	r0, [pc, #80]	@ (800cca8 <tcp_bind+0x78>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc56:	f850 1b04 	ldr.w	r1, [r0], #4
 800cc5a:	6809      	ldr	r1, [r1, #0]
 800cc5c:	b971      	cbnz	r1, 800cc7c <tcp_bind+0x4c>
    for (i = 0; i < max_pcb_list; i++) {
 800cc5e:	3301      	adds	r3, #1
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d1f8      	bne.n	800cc56 <tcp_bind+0x26>
  if (!ip_addr_isany(ipaddr)
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	b103      	cbz	r3, 800cc6a <tcp_bind+0x3a>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cc68:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc6a:	4b10      	ldr	r3, [pc, #64]	@ (800ccac <tcp_bind+0x7c>)
  pcb->local_port = port;
 800cc6c:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	601c      	str	r4, [r3, #0]
 800cc72:	60e2      	str	r2, [r4, #12]
 800cc74:	f003 fa6a 	bl	801014c <tcp_timer_needed>
  return ERR_OK;
 800cc78:	2000      	movs	r0, #0
}
 800cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800cc7c:	8ace      	ldrh	r6, [r1, #22]
 800cc7e:	4296      	cmp	r6, r2
 800cc80:	d105      	bne.n	800cc8e <tcp_bind+0x5e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cc82:	680f      	ldr	r7, [r1, #0]
 800cc84:	b15f      	cbz	r7, 800cc9e <tcp_bind+0x6e>
                 ip_addr_isany(ipaddr) ||
 800cc86:	682e      	ldr	r6, [r5, #0]
 800cc88:	b14e      	cbz	r6, 800cc9e <tcp_bind+0x6e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cc8a:	42b7      	cmp	r7, r6
 800cc8c:	d007      	beq.n	800cc9e <tcp_bind+0x6e>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc8e:	68c9      	ldr	r1, [r1, #12]
 800cc90:	e7e4      	b.n	800cc5c <tcp_bind+0x2c>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc92:	f06f 000f 	mvn.w	r0, #15
 800cc96:	e7f0      	b.n	800cc7a <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cc98:	f06f 0005 	mvn.w	r0, #5
 800cc9c:	e7ed      	b.n	800cc7a <tcp_bind+0x4a>
              return ERR_USE;
 800cc9e:	f06f 0007 	mvn.w	r0, #7
 800cca2:	e7ea      	b.n	800cc7a <tcp_bind+0x4a>
 800cca4:	0808f8f8 	.word	0x0808f8f8
 800cca8:	0808f8bc 	.word	0x0808f8bc
 800ccac:	20010f74 	.word	0x20010f74

0800ccb0 <tcp_listen_with_backlog_and_err>:
{
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d03c      	beq.n	800cd34 <tcp_listen_with_backlog_and_err+0x84>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ccba:	7d03      	ldrb	r3, [r0, #20]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d13d      	bne.n	800cd3c <tcp_listen_with_backlog_and_err+0x8c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ccc0:	2002      	movs	r0, #2
 800ccc2:	f7ff fa6b 	bl	800c19c <memp_malloc>
  if (lpcb == NULL) {
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d03b      	beq.n	800cd44 <tcp_listen_with_backlog_and_err+0x94>
  lpcb->callback_arg = pcb->callback_arg;
 800cccc:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800ccce:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800ccd0:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800ccd2:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800ccd4:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800ccd6:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800ccd8:	7d62      	ldrb	r2, [r4, #21]
 800ccda:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800ccdc:	7a62      	ldrb	r2, [r4, #9]
 800ccde:	7242      	strb	r2, [r0, #9]
  lpcb->netif_idx = pcb->netif_idx;
 800cce0:	7a22      	ldrb	r2, [r4, #8]
 800cce2:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800cce4:	7ae2      	ldrb	r2, [r4, #11]
 800cce6:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800cce8:	7aa2      	ldrb	r2, [r4, #10]
 800ccea:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ccec:	6822      	ldr	r2, [r4, #0]
 800ccee:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800ccf0:	b13b      	cbz	r3, 800cd02 <tcp_listen_with_backlog_and_err+0x52>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ccf2:	4a16      	ldr	r2, [pc, #88]	@ (800cd4c <tcp_listen_with_backlog_and_err+0x9c>)
 800ccf4:	6813      	ldr	r3, [r2, #0]
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	d114      	bne.n	800cd24 <tcp_listen_with_backlog_and_err+0x74>
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7ff ff7c 	bl	800cc00 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800cd08:	4b11      	ldr	r3, [pc, #68]	@ (800cd50 <tcp_listen_with_backlog_and_err+0xa0>)
 800cd0a:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800cd0c:	4b11      	ldr	r3, [pc, #68]	@ (800cd54 <tcp_listen_with_backlog_and_err+0xa4>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	601d      	str	r5, [r3, #0]
 800cd12:	60ea      	str	r2, [r5, #12]
 800cd14:	f003 fa1a 	bl	801014c <tcp_timer_needed>
  res = ERR_OK;
 800cd18:	2300      	movs	r3, #0
  if (err != NULL) {
 800cd1a:	b106      	cbz	r6, 800cd1e <tcp_listen_with_backlog_and_err+0x6e>
    *err = res;
 800cd1c:	7033      	strb	r3, [r6, #0]
}
 800cd1e:	4628      	mov	r0, r5
 800cd20:	bd70      	pop	{r4, r5, r6, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd22:	4613      	mov	r3, r2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0ea      	beq.n	800ccfe <tcp_listen_with_backlog_and_err+0x4e>
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	42a2      	cmp	r2, r4
 800cd2c:	d1f9      	bne.n	800cd22 <tcp_listen_with_backlog_and_err+0x72>
 800cd2e:	68e2      	ldr	r2, [r4, #12]
 800cd30:	60da      	str	r2, [r3, #12]
 800cd32:	e7e4      	b.n	800ccfe <tcp_listen_with_backlog_and_err+0x4e>
  struct tcp_pcb_listen *lpcb = NULL;
 800cd34:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cd36:	f06f 030f 	mvn.w	r3, #15
 800cd3a:	e7ee      	b.n	800cd1a <tcp_listen_with_backlog_and_err+0x6a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cd3c:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 800cd40:	2500      	movs	r5, #0
 800cd42:	e7ea      	b.n	800cd1a <tcp_listen_with_backlog_and_err+0x6a>
    res = ERR_MEM;
 800cd44:	f04f 33ff 	mov.w	r3, #4294967295
 800cd48:	e7e7      	b.n	800cd1a <tcp_listen_with_backlog_and_err+0x6a>
 800cd4a:	bf00      	nop
 800cd4c:	20010f74 	.word	0x20010f74
 800cd50:	0800d84d 	.word	0x0800d84d
 800cd54:	20010f70 	.word	0x20010f70

0800cd58 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f7ff bfa9 	b.w	800ccb0 <tcp_listen_with_backlog_and_err>
	...

0800cd60 <tcp_update_rcv_ann_wnd>:
{
 800cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd62:	4604      	mov	r4, r0
 800cd64:	b930      	cbnz	r0, 800cd74 <tcp_update_rcv_ann_wnd+0x14>
 800cd66:	4b14      	ldr	r3, [pc, #80]	@ (800cdb8 <tcp_update_rcv_ann_wnd+0x58>)
 800cd68:	f240 32aa 	movw	r2, #938	@ 0x3aa
 800cd6c:	4913      	ldr	r1, [pc, #76]	@ (800cdbc <tcp_update_rcv_ann_wnd+0x5c>)
 800cd6e:	4814      	ldr	r0, [pc, #80]	@ (800cdc0 <tcp_update_rcv_ann_wnd+0x60>)
 800cd70:	f008 ff0c 	bl	8015b8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd74:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd76:	f240 56b4 	movw	r6, #1460	@ 0x5b4
 800cd7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cd7c:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd7e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd80:	1a58      	subs	r0, r3, r1
 800cd82:	42b7      	cmp	r7, r6
 800cd84:	4410      	add	r0, r2
 800cd86:	bf94      	ite	ls
 800cd88:	1bc5      	subls	r5, r0, r7
 800cd8a:	1b85      	subhi	r5, r0, r6
 800cd8c:	2d00      	cmp	r5, #0
 800cd8e:	da0d      	bge.n	800cdac <tcp_update_rcv_ann_wnd+0x4c>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd90:	1a8d      	subs	r5, r1, r2
 800cd92:	d40d      	bmi.n	800cdb0 <tcp_update_rcv_ann_wnd+0x50>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd94:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800cd98:	d306      	bcc.n	800cda8 <tcp_update_rcv_ann_wnd+0x48>
 800cd9a:	4b07      	ldr	r3, [pc, #28]	@ (800cdb8 <tcp_update_rcv_ann_wnd+0x58>)
 800cd9c:	f240 32ba 	movw	r2, #954	@ 0x3ba
 800cda0:	4908      	ldr	r1, [pc, #32]	@ (800cdc4 <tcp_update_rcv_ann_wnd+0x64>)
 800cda2:	4807      	ldr	r0, [pc, #28]	@ (800cdc0 <tcp_update_rcv_ann_wnd+0x60>)
 800cda4:	f008 fef2 	bl	8015b8c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cda8:	b2ab      	uxth	r3, r5
    return 0;
 800cdaa:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cdac:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800cdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdb0:	2300      	movs	r3, #0
    return 0;
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	e7fa      	b.n	800cdac <tcp_update_rcv_ann_wnd+0x4c>
 800cdb6:	bf00      	nop
 800cdb8:	08017917 	.word	0x08017917
 800cdbc:	08017951 	.word	0x08017951
 800cdc0:	080169d3 	.word	0x080169d3
 800cdc4:	08017975 	.word	0x08017975

0800cdc8 <tcp_recved>:
{
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cdcc:	4605      	mov	r5, r0
 800cdce:	b330      	cbz	r0, 800ce1e <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdd0:	7d03      	ldrb	r3, [r0, #20]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d106      	bne.n	800cde4 <tcp_recved+0x1c>
 800cdd6:	4b12      	ldr	r3, [pc, #72]	@ (800ce20 <tcp_recved+0x58>)
 800cdd8:	f240 32d6 	movw	r2, #982	@ 0x3d6
 800cddc:	4911      	ldr	r1, [pc, #68]	@ (800ce24 <tcp_recved+0x5c>)
 800cdde:	4812      	ldr	r0, [pc, #72]	@ (800ce28 <tcp_recved+0x60>)
 800cde0:	f008 fed4 	bl	8015b8c <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cde4:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cde6:	f640 3368 	movw	r3, #2920	@ 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdea:	1911      	adds	r1, r2, r4
 800cdec:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cdee:	4299      	cmp	r1, r3
 800cdf0:	d813      	bhi.n	800ce1a <tcp_recved+0x52>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cdf2:	428a      	cmp	r2, r1
 800cdf4:	bf88      	it	hi
 800cdf6:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	8529      	strh	r1, [r5, #40]	@ 0x28
 800cdfc:	f7ff ffb0 	bl	800cd60 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce00:	f240 23d9 	movw	r3, #729	@ 0x2d9
 800ce04:	4298      	cmp	r0, r3
 800ce06:	d90a      	bls.n	800ce1e <tcp_recved+0x56>
    tcp_ack_now(pcb);
 800ce08:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ce0a:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ce0c:	f043 0302 	orr.w	r3, r3, #2
 800ce10:	836b      	strh	r3, [r5, #26]
}
 800ce12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800ce16:	f002 bec5 	b.w	800fba4 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	e7ec      	b.n	800cdf8 <tcp_recved+0x30>
}
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	08017917 	.word	0x08017917
 800ce24:	0801798f 	.word	0x0801798f
 800ce28:	080169d3 	.word	0x080169d3

0800ce2c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ce2c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800ce2e:	4604      	mov	r4, r0
 800ce30:	b148      	cbz	r0, 800ce46 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800ce32:	6840      	ldr	r0, [r0, #4]
 800ce34:	b108      	cbz	r0, 800ce3a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800ce36:	f7ff fbcb 	bl	800c5d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	2003      	movs	r0, #3
  }
}
 800ce3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800ce42:	f7ff b9c9 	b.w	800c1d8 <memp_free>
}
 800ce46:	bd10      	pop	{r4, pc}

0800ce48 <tcp_segs_free>:
{
 800ce48:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800ce4a:	b900      	cbnz	r0, 800ce4e <tcp_segs_free+0x6>
}
 800ce4c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800ce4e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800ce50:	f7ff ffec 	bl	800ce2c <tcp_seg_free>
    seg = next;
 800ce54:	4620      	mov	r0, r4
 800ce56:	e7f8      	b.n	800ce4a <tcp_segs_free+0x2>

0800ce58 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ce58:	b100      	cbz	r0, 800ce5c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800ce5a:	6101      	str	r1, [r0, #16]
  }
}
 800ce5c:	4770      	bx	lr
	...

0800ce60 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ce64:	4604      	mov	r4, r0
 800ce66:	b158      	cbz	r0, 800ce80 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ce68:	7d03      	ldrb	r3, [r0, #20]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d106      	bne.n	800ce7c <tcp_recv+0x1c>
 800ce6e:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <tcp_recv+0x24>)
 800ce70:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 800ce74:	4904      	ldr	r1, [pc, #16]	@ (800ce88 <tcp_recv+0x28>)
 800ce76:	4805      	ldr	r0, [pc, #20]	@ (800ce8c <tcp_recv+0x2c>)
 800ce78:	f008 fe88 	bl	8015b8c <iprintf>
    pcb->recv = recv;
 800ce7c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  }
}
 800ce80:	bd38      	pop	{r3, r4, r5, pc}
 800ce82:	bf00      	nop
 800ce84:	08017917 	.word	0x08017917
 800ce88:	080179b5 	.word	0x080179b5
 800ce8c:	080169d3 	.word	0x080169d3

0800ce90 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ce94:	4604      	mov	r4, r0
 800ce96:	b150      	cbz	r0, 800ceae <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ce98:	7d03      	ldrb	r3, [r0, #20]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d106      	bne.n	800ceac <tcp_sent+0x1c>
 800ce9e:	4b04      	ldr	r3, [pc, #16]	@ (800ceb0 <tcp_sent+0x20>)
 800cea0:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 800cea4:	4903      	ldr	r1, [pc, #12]	@ (800ceb4 <tcp_sent+0x24>)
 800cea6:	4804      	ldr	r0, [pc, #16]	@ (800ceb8 <tcp_sent+0x28>)
 800cea8:	f008 fe70 	bl	8015b8c <iprintf>
    pcb->sent = sent;
 800ceac:	67e5      	str	r5, [r4, #124]	@ 0x7c
  }
}
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	08017917 	.word	0x08017917
 800ceb4:	080179dc 	.word	0x080179dc
 800ceb8:	080169d3 	.word	0x080169d3

0800cebc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cec0:	4604      	mov	r4, r0
 800cec2:	b158      	cbz	r0, 800cedc <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cec4:	7d03      	ldrb	r3, [r0, #20]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d106      	bne.n	800ced8 <tcp_err+0x1c>
 800ceca:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <tcp_err+0x24>)
 800cecc:	f640 0216 	movw	r2, #2070	@ 0x816
 800ced0:	4904      	ldr	r1, [pc, #16]	@ (800cee4 <tcp_err+0x28>)
 800ced2:	4805      	ldr	r0, [pc, #20]	@ (800cee8 <tcp_err+0x2c>)
 800ced4:	f008 fe5a 	bl	8015b8c <iprintf>
    pcb->errf = err;
 800ced8:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  }
}
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	bf00      	nop
 800cee0:	08017917 	.word	0x08017917
 800cee4:	08017a03 	.word	0x08017a03
 800cee8:	080169d3 	.word	0x080169d3

0800ceec <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ceec:	b118      	cbz	r0, 800cef6 <tcp_accept+0xa>
 800ceee:	7d03      	ldrb	r3, [r0, #20]
 800cef0:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800cef2:	bf08      	it	eq
 800cef4:	6181      	streq	r1, [r0, #24]
  }
}
 800cef6:	4770      	bx	lr

0800cef8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	460e      	mov	r6, r1
 800cefc:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800cefe:	4604      	mov	r4, r0
 800cf00:	b160      	cbz	r0, 800cf1c <tcp_poll+0x24>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800cf02:	7d03      	ldrb	r3, [r0, #20]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d106      	bne.n	800cf16 <tcp_poll+0x1e>
 800cf08:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <tcp_poll+0x28>)
 800cf0a:	f640 0248 	movw	r2, #2120	@ 0x848
 800cf0e:	4905      	ldr	r1, [pc, #20]	@ (800cf24 <tcp_poll+0x2c>)
 800cf10:	4805      	ldr	r0, [pc, #20]	@ (800cf28 <tcp_poll+0x30>)
 800cf12:	f008 fe3b 	bl	8015b8c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cf16:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cf1a:	7765      	strb	r5, [r4, #29]
}
 800cf1c:	bd70      	pop	{r4, r5, r6, pc}
 800cf1e:	bf00      	nop
 800cf20:	08017917 	.word	0x08017917
 800cf24:	08017a29 	.word	0x08017a29
 800cf28:	080169d3 	.word	0x080169d3

0800cf2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cf2c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cf2e:	4604      	mov	r4, r0
 800cf30:	b1c0      	cbz	r0, 800cf64 <tcp_pcb_purge+0x38>

  if (pcb->state != CLOSED &&
 800cf32:	7d03      	ldrb	r3, [r0, #20]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d915      	bls.n	800cf64 <tcp_pcb_purge+0x38>
 800cf38:	2b0a      	cmp	r3, #10
 800cf3a:	d013      	beq.n	800cf64 <tcp_pcb_purge+0x38>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cf3c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800cf3e:	b118      	cbz	r0, 800cf48 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cf40:	f7ff fb46 	bl	800c5d0 <pbuf_free>
      pcb->refused_data = NULL;
 800cf44:	2300      	movs	r3, #0
 800cf46:	6763      	str	r3, [r4, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf48:	f64f 73ff 	movw	r3, #65535	@ 0xffff

    tcp_segs_free(pcb->unsent);
 800cf4c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    pcb->rtime = -1;
 800cf4e:	8623      	strh	r3, [r4, #48]	@ 0x30
    tcp_segs_free(pcb->unsent);
 800cf50:	f7ff ff7a 	bl	800ce48 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf54:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800cf56:	f7ff ff77 	bl	800ce48 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e9c4 331b 	strd	r3, r3, [r4, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf60:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cf64:	bd10      	pop	{r4, pc}
	...

0800cf68 <tcp_slowtmr>:
{
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800cf6c:	4dae      	ldr	r5, [pc, #696]	@ (800d228 <tcp_slowtmr+0x2c0>)
{
 800cf6e:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800cf70:	4aae      	ldr	r2, [pc, #696]	@ (800d22c <tcp_slowtmr+0x2c4>)
  ++tcp_ticks;
 800cf72:	682b      	ldr	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800cf74:	f8df 82e8 	ldr.w	r8, [pc, #744]	@ 800d260 <tcp_slowtmr+0x2f8>
  ++tcp_ticks;
 800cf78:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cf7a:	4ead      	ldr	r6, [pc, #692]	@ (800d230 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 800cf7c:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800cf7e:	7813      	ldrb	r3, [r2, #0]
 800cf80:	3301      	adds	r3, #1
 800cf82:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800cf84:	f8d8 4000 	ldr.w	r4, [r8]
  prev = NULL;
 800cf88:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cf8a:	f8df 92bc 	ldr.w	r9, [pc, #700]	@ 800d248 <tcp_slowtmr+0x2e0>
  while (pcb != NULL) {
 800cf8e:	b96c      	cbnz	r4, 800cfac <tcp_slowtmr+0x44>
  pcb = tcp_tw_pcbs;
 800cf90:	4fa8      	ldr	r7, [pc, #672]	@ (800d234 <tcp_slowtmr+0x2cc>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf92:	f8df 829c 	ldr.w	r8, [pc, #668]	@ 800d230 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 800cf96:	683e      	ldr	r6, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf98:	f8df 92c8 	ldr.w	r9, [pc, #712]	@ 800d264 <tcp_slowtmr+0x2fc>
 800cf9c:	f8df a2a8 	ldr.w	sl, [pc, #680]	@ 800d248 <tcp_slowtmr+0x2e0>
  while (pcb != NULL) {
 800cfa0:	2e00      	cmp	r6, #0
 800cfa2:	f040 81ae 	bne.w	800d302 <tcp_slowtmr+0x39a>
}
 800cfa6:	b007      	add	sp, #28
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cfac:	7d23      	ldrb	r3, [r4, #20]
 800cfae:	b933      	cbnz	r3, 800cfbe <tcp_slowtmr+0x56>
 800cfb0:	4633      	mov	r3, r6
 800cfb2:	f240 42c2 	movw	r2, #1218	@ 0x4c2
 800cfb6:	49a0      	ldr	r1, [pc, #640]	@ (800d238 <tcp_slowtmr+0x2d0>)
 800cfb8:	4648      	mov	r0, r9
 800cfba:	f008 fde7 	bl	8015b8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cfbe:	7d23      	ldrb	r3, [r4, #20]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d106      	bne.n	800cfd2 <tcp_slowtmr+0x6a>
 800cfc4:	4633      	mov	r3, r6
 800cfc6:	f240 42c3 	movw	r2, #1219	@ 0x4c3
 800cfca:	499c      	ldr	r1, [pc, #624]	@ (800d23c <tcp_slowtmr+0x2d4>)
 800cfcc:	4648      	mov	r0, r9
 800cfce:	f008 fddd 	bl	8015b8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cfd2:	7d23      	ldrb	r3, [r4, #20]
 800cfd4:	2b0a      	cmp	r3, #10
 800cfd6:	d106      	bne.n	800cfe6 <tcp_slowtmr+0x7e>
 800cfd8:	4633      	mov	r3, r6
 800cfda:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800cfde:	4998      	ldr	r1, [pc, #608]	@ (800d240 <tcp_slowtmr+0x2d8>)
 800cfe0:	4648      	mov	r0, r9
 800cfe2:	f008 fdd3 	bl	8015b8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cfe6:	4b91      	ldr	r3, [pc, #580]	@ (800d22c <tcp_slowtmr+0x2c4>)
 800cfe8:	7fa2      	ldrb	r2, [r4, #30]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d104      	bne.n	800cffa <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800cff0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
        ++pcb_reset;
 800cff4:	4627      	mov	r7, r4
 800cff6:	4654      	mov	r4, sl
 800cff8:	e7c9      	b.n	800cf8e <tcp_slowtmr+0x26>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cffa:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800cffc:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cffe:	2a02      	cmp	r2, #2
 800d000:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800d004:	d165      	bne.n	800d0d2 <tcp_slowtmr+0x16a>
 800d006:	2b05      	cmp	r3, #5
 800d008:	d965      	bls.n	800d0d6 <tcp_slowtmr+0x16e>
      ++pcb_remove;
 800d00a:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800d00e:	7d23      	ldrb	r3, [r4, #20]
 800d010:	2b06      	cmp	r3, #6
 800d012:	d10b      	bne.n	800d02c <tcp_slowtmr+0xc4>
      if (pcb->flags & TF_RXCLOSED) {
 800d014:	8b62      	ldrh	r2, [r4, #26]
 800d016:	06d1      	lsls	r1, r2, #27
 800d018:	d508      	bpl.n	800d02c <tcp_slowtmr+0xc4>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d01a:	682a      	ldr	r2, [r5, #0]
 800d01c:	6a21      	ldr	r1, [r4, #32]
 800d01e:	1a52      	subs	r2, r2, r1
 800d020:	2a28      	cmp	r2, #40	@ 0x28
          ++pcb_remove;
 800d022:	bf84      	itt	hi
 800d024:	f10b 0b01 	addhi.w	fp, fp, #1
 800d028:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d02c:	7a62      	ldrb	r2, [r4, #9]
 800d02e:	0712      	lsls	r2, r2, #28
 800d030:	d505      	bpl.n	800d03e <tcp_slowtmr+0xd6>
 800d032:	2b04      	cmp	r3, #4
 800d034:	f000 80e2 	beq.w	800d1fc <tcp_slowtmr+0x294>
        ((pcb->state == ESTABLISHED) ||
 800d038:	2b07      	cmp	r3, #7
 800d03a:	f000 80df 	beq.w	800d1fc <tcp_slowtmr+0x294>
    pcb_reset = 0;
 800d03e:	f04f 0a00 	mov.w	sl, #0
    if (pcb->state == SYN_RCVD) {
 800d042:	7d23      	ldrb	r3, [r4, #20]
 800d044:	2b03      	cmp	r3, #3
 800d046:	f040 8126 	bne.w	800d296 <tcp_slowtmr+0x32e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	6a22      	ldr	r2, [r4, #32]
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	2b28      	cmp	r3, #40	@ 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d052:	d803      	bhi.n	800d05c <tcp_slowtmr+0xf4>
    if (pcb_remove) {
 800d054:	f1bb 0f00 	cmp.w	fp, #0
 800d058:	f000 8132 	beq.w	800d2c0 <tcp_slowtmr+0x358>
      tcp_pcb_purge(pcb);
 800d05c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800d05e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	@ 0x8c
      tcp_pcb_purge(pcb);
 800d062:	f7ff ff63 	bl	800cf2c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d066:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 800d06a:	2f00      	cmp	r7, #0
 800d06c:	f000 811b 	beq.w	800d2a6 <tcp_slowtmr+0x33e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d070:	42a3      	cmp	r3, r4
 800d072:	d106      	bne.n	800d082 <tcp_slowtmr+0x11a>
 800d074:	4b6e      	ldr	r3, [pc, #440]	@ (800d230 <tcp_slowtmr+0x2c8>)
 800d076:	f240 5271 	movw	r2, #1393	@ 0x571
 800d07a:	4972      	ldr	r1, [pc, #456]	@ (800d244 <tcp_slowtmr+0x2dc>)
 800d07c:	4872      	ldr	r0, [pc, #456]	@ (800d248 <tcp_slowtmr+0x2e0>)
 800d07e:	f008 fd85 	bl	8015b8c <iprintf>
        prev->next = pcb->next;
 800d082:	68e3      	ldr	r3, [r4, #12]
 800d084:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 800d086:	f1ba 0f00 	cmp.w	sl, #0
 800d08a:	d00b      	beq.n	800d0a4 <tcp_slowtmr+0x13c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d08c:	8b23      	ldrh	r3, [r4, #24]
 800d08e:	4620      	mov	r0, r4
 800d090:	9302      	str	r3, [sp, #8]
 800d092:	8ae3      	ldrh	r3, [r4, #22]
 800d094:	9301      	str	r3, [sp, #4]
 800d096:	1d23      	adds	r3, r4, #4
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	4623      	mov	r3, r4
 800d09c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d09e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800d0a0:	f002 fd14 	bl	800facc <tcp_rst>
      err_arg = pcb->callback_arg;
 800d0a4:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800d0a6:	4620      	mov	r0, r4
      pcb = pcb->next;
 800d0a8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      err_arg = pcb->callback_arg;
 800d0ac:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800d0ae:	f7ff fda7 	bl	800cc00 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d0b2:	4c66      	ldr	r4, [pc, #408]	@ (800d24c <tcp_slowtmr+0x2e4>)
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d0b8:	f1bb 0f00 	cmp.w	fp, #0
 800d0bc:	d007      	beq.n	800d0ce <tcp_slowtmr+0x166>
 800d0be:	f06f 010c 	mvn.w	r1, #12
 800d0c2:	9805      	ldr	r0, [sp, #20]
 800d0c4:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800d0c6:	7823      	ldrb	r3, [r4, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f47f af5b 	bne.w	800cf84 <tcp_slowtmr+0x1c>
        ++pcb_reset;
 800d0ce:	463c      	mov	r4, r7
 800d0d0:	e790      	b.n	800cff4 <tcp_slowtmr+0x8c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d0d2:	2b0b      	cmp	r3, #11
 800d0d4:	e798      	b.n	800d008 <tcp_slowtmr+0xa0>
      if (pcb->persist_backoff > 0) {
 800d0d6:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d045      	beq.n	800d16a <tcp_slowtmr+0x202>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d0de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d0e0:	b133      	cbz	r3, 800d0f0 <tcp_slowtmr+0x188>
 800d0e2:	4633      	mov	r3, r6
 800d0e4:	f44f 629b 	mov.w	r2, #1240	@ 0x4d8
 800d0e8:	4959      	ldr	r1, [pc, #356]	@ (800d250 <tcp_slowtmr+0x2e8>)
 800d0ea:	4648      	mov	r0, r9
 800d0ec:	f008 fd4e 	bl	8015b8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d0f0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d0f2:	b933      	cbnz	r3, 800d102 <tcp_slowtmr+0x19a>
 800d0f4:	4b4e      	ldr	r3, [pc, #312]	@ (800d230 <tcp_slowtmr+0x2c8>)
 800d0f6:	f240 42d9 	movw	r2, #1241	@ 0x4d9
 800d0fa:	4956      	ldr	r1, [pc, #344]	@ (800d254 <tcp_slowtmr+0x2ec>)
 800d0fc:	4852      	ldr	r0, [pc, #328]	@ (800d248 <tcp_slowtmr+0x2e0>)
 800d0fe:	f008 fd45 	bl	8015b8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d102:	f894 3096 	ldrb.w	r3, [r4, #150]	@ 0x96
 800d106:	2b0b      	cmp	r3, #11
 800d108:	f63f af7f 	bhi.w	800d00a <tcp_slowtmr+0xa2>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d10c:	f894 2095 	ldrb.w	r2, [r4, #149]	@ 0x95
 800d110:	4b51      	ldr	r3, [pc, #324]	@ (800d258 <tcp_slowtmr+0x2f0>)
 800d112:	4413      	add	r3, r2
 800d114:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800d118:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d30b      	bcc.n	800d138 <tcp_slowtmr+0x1d0>
            if (pcb->snd_wnd == 0) {
 800d120:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800d124:	b189      	cbz	r1, 800d14a <tcp_slowtmr+0x1e2>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d126:	4620      	mov	r0, r4
 800d128:	f002 fa88 	bl	800f63c <tcp_split_unsent_seg>
 800d12c:	b990      	cbnz	r0, 800d154 <tcp_slowtmr+0x1ec>
                if (tcp_output(pcb) == ERR_OK) {
 800d12e:	4620      	mov	r0, r4
 800d130:	f002 fd38 	bl	800fba4 <tcp_output>
 800d134:	b130      	cbz	r0, 800d144 <tcp_slowtmr+0x1dc>
 800d136:	e00d      	b.n	800d154 <tcp_slowtmr+0x1ec>
            pcb->persist_cnt++;
 800d138:	3301      	adds	r3, #1
 800d13a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800d13c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800d13e:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800d142:	d2ed      	bcs.n	800d120 <tcp_slowtmr+0x1b8>
    pcb_remove = 0;
 800d144:	f04f 0b00 	mov.w	fp, #0
 800d148:	e761      	b.n	800d00e <tcp_slowtmr+0xa6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d14a:	4620      	mov	r0, r4
 800d14c:	f002 ff30 	bl	800ffb0 <tcp_zero_window_probe>
 800d150:	2800      	cmp	r0, #0
 800d152:	d1f7      	bne.n	800d144 <tcp_slowtmr+0x1dc>
              pcb->persist_cnt = 0;
 800d154:	2300      	movs	r3, #0
 800d156:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d15a:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 800d15e:	2b06      	cmp	r3, #6
 800d160:	d8f0      	bhi.n	800d144 <tcp_slowtmr+0x1dc>
                pcb->persist_backoff++;
 800d162:	3301      	adds	r3, #1
 800d164:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
 800d168:	e7ec      	b.n	800d144 <tcp_slowtmr+0x1dc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d16a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d16c:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d170:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800d172:	bf9c      	itt	ls
 800d174:	3301      	addls	r3, #1
 800d176:	8623      	strhls	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d178:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800d17c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	@ 0x30
 800d180:	429a      	cmp	r2, r3
 800d182:	dbdf      	blt.n	800d144 <tcp_slowtmr+0x1dc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d184:	4620      	mov	r0, r4
 800d186:	f002 fbe9 	bl	800f95c <tcp_rexmit_rto_prepare>
 800d18a:	b128      	cbz	r0, 800d198 <tcp_slowtmr+0x230>
 800d18c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1d8      	bne.n	800d144 <tcp_slowtmr+0x1dc>
 800d192:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d194:	2b00      	cmp	r3, #0
 800d196:	d0d5      	beq.n	800d144 <tcp_slowtmr+0x1dc>
            if (pcb->state != SYN_SENT) {
 800d198:	7d23      	ldrb	r3, [r4, #20]
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d014      	beq.n	800d1c8 <tcp_slowtmr+0x260>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d19e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
 800d1a2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800d1a6:	492d      	ldr	r1, [pc, #180]	@ (800d25c <tcp_slowtmr+0x2f4>)
 800d1a8:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d1ac:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d1b0:	2a0c      	cmp	r2, #12
 800d1b2:	bf28      	it	cs
 800d1b4:	220c      	movcs	r2, #12
 800d1b6:	5c8a      	ldrb	r2, [r1, r2]
 800d1b8:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d1ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	bfa8      	it	ge
 800d1c2:	4613      	movge	r3, r2
 800d1c4:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d1c8:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
            pcb->rtime = 0;
 800d1cc:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d1ce:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1d2:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800d1d4:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 800d1d6:	8622      	strh	r2, [r4, #48]	@ 0x30
            pcb->cwnd = pcb->mss;
 800d1d8:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800d1dc:	bf28      	it	cs
 800d1de:	4603      	movcs	r3, r0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1e0:	0048      	lsls	r0, r1, #1
            pcb->bytes_acked = 0;
 800d1e2:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	b280      	uxth	r0, r0
 800d1ea:	4283      	cmp	r3, r0
 800d1ec:	bf38      	it	cc
 800d1ee:	4603      	movcc	r3, r0
            tcp_rexmit_rto_commit(pcb);
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800d1f6:	f002 fe7d 	bl	800fef4 <tcp_rexmit_rto_commit>
 800d1fa:	e7a3      	b.n	800d144 <tcp_slowtmr+0x1dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1fc:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d1fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d202:	6829      	ldr	r1, [r5, #0]
 800d204:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d206:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800d20a:	f503 2224 	add.w	r2, r3, #671744	@ 0xa4000
 800d20e:	f602 42b8 	addw	r2, r2, #3256	@ 0xcb8
 800d212:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d216:	4291      	cmp	r1, r2
 800d218:	d926      	bls.n	800d268 <tcp_slowtmr+0x300>
        ++pcb_remove;
 800d21a:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800d21e:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800d222:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 800d226:	e70c      	b.n	800d042 <tcp_slowtmr+0xda>
 800d228:	20010f78 	.word	0x20010f78
 800d22c:	20010f64 	.word	0x20010f64
 800d230:	08017917 	.word	0x08017917
 800d234:	20010f68 	.word	0x20010f68
 800d238:	08017a47 	.word	0x08017a47
 800d23c:	08017a70 	.word	0x08017a70
 800d240:	08017a99 	.word	0x08017a99
 800d244:	08017b2c 	.word	0x08017b2c
 800d248:	080169d3 	.word	0x080169d3
 800d24c:	20010f66 	.word	0x20010f66
 800d250:	08017ac5 	.word	0x08017ac5
 800d254:	08017af7 	.word	0x08017af7
 800d258:	0808f8cc 	.word	0x0808f8cc
 800d25c:	0808f8d3 	.word	0x0808f8d3
 800d260:	20010f6c 	.word	0x20010f6c
 800d264:	08017b81 	.word	0x08017b81
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d268:	f894 2097 	ldrb.w	r2, [r4, #151]	@ 0x97
 800d26c:	f8df c118 	ldr.w	ip, [pc, #280]	@ 800d388 <tcp_slowtmr+0x420>
 800d270:	fb0c 3302 	mla	r3, ip, r2, r3
                 / TCP_SLOW_INTERVAL) {
 800d274:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d278:	4299      	cmp	r1, r3
 800d27a:	f67f aee0 	bls.w	800d03e <tcp_slowtmr+0xd6>
        err = tcp_keepalive(pcb);
 800d27e:	4620      	mov	r0, r4
 800d280:	f002 fe6e 	bl	800ff60 <tcp_keepalive>
        if (err == ERR_OK) {
 800d284:	2800      	cmp	r0, #0
 800d286:	f47f aeda 	bne.w	800d03e <tcp_slowtmr+0xd6>
          pcb->keep_cnt_sent++;
 800d28a:	f894 3097 	ldrb.w	r3, [r4, #151]	@ 0x97
 800d28e:	3301      	adds	r3, #1
 800d290:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
 800d294:	e6d3      	b.n	800d03e <tcp_slowtmr+0xd6>
    if (pcb->state == LAST_ACK) {
 800d296:	2b09      	cmp	r3, #9
 800d298:	f47f aedc 	bne.w	800d054 <tcp_slowtmr+0xec>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	6a22      	ldr	r2, [r4, #32]
 800d2a0:	1a9b      	subs	r3, r3, r2
 800d2a2:	2bf0      	cmp	r3, #240	@ 0xf0
 800d2a4:	e6d5      	b.n	800d052 <tcp_slowtmr+0xea>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d2a6:	42a3      	cmp	r3, r4
 800d2a8:	d006      	beq.n	800d2b8 <tcp_slowtmr+0x350>
 800d2aa:	4633      	mov	r3, r6
 800d2ac:	f240 5275 	movw	r2, #1397	@ 0x575
 800d2b0:	492f      	ldr	r1, [pc, #188]	@ (800d370 <tcp_slowtmr+0x408>)
 800d2b2:	4830      	ldr	r0, [pc, #192]	@ (800d374 <tcp_slowtmr+0x40c>)
 800d2b4:	f008 fc6a 	bl	8015b8c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d2b8:	68e3      	ldr	r3, [r4, #12]
 800d2ba:	f8c8 3000 	str.w	r3, [r8]
 800d2be:	e6e2      	b.n	800d086 <tcp_slowtmr+0x11e>
      ++prev->polltmr;
 800d2c0:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d2c2:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800d2c4:	3301      	adds	r3, #1
      pcb = pcb->next;
 800d2c6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 800d2ca:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800d2cc:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800d2ce:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d2d0:	f63f ae90 	bhi.w	800cff4 <tcp_slowtmr+0x8c>
        tcp_active_pcbs_changed = 0;
 800d2d4:	4f28      	ldr	r7, [pc, #160]	@ (800d378 <tcp_slowtmr+0x410>)
        TCP_EVENT_POLL(prev, err);
 800d2d6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
        prev->polltmr = 0;
 800d2da:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800d2de:	f887 b000 	strb.w	fp, [r7]
        TCP_EVENT_POLL(prev, err);
 800d2e2:	b91b      	cbnz	r3, 800d2ec <tcp_slowtmr+0x384>
          tcp_output(prev);
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f002 fc5d 	bl	800fba4 <tcp_output>
 800d2ea:	e683      	b.n	800cff4 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	6920      	ldr	r0, [r4, #16]
 800d2f0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800d2f2:	783b      	ldrb	r3, [r7, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f47f ae45 	bne.w	800cf84 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	f47f ae7a 	bne.w	800cff4 <tcp_slowtmr+0x8c>
 800d300:	e7f0      	b.n	800d2e4 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d302:	7d33      	ldrb	r3, [r6, #20]
 800d304:	2b0a      	cmp	r3, #10
 800d306:	d006      	beq.n	800d316 <tcp_slowtmr+0x3ae>
 800d308:	4643      	mov	r3, r8
 800d30a:	f240 52a5 	movw	r2, #1445	@ 0x5a5
 800d30e:	4649      	mov	r1, r9
 800d310:	4650      	mov	r0, sl
 800d312:	f008 fc3b 	bl	8015b8c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d316:	682b      	ldr	r3, [r5, #0]
 800d318:	6a32      	ldr	r2, [r6, #32]
 800d31a:	1a9b      	subs	r3, r3, r2
 800d31c:	2bf0      	cmp	r3, #240	@ 0xf0
 800d31e:	d910      	bls.n	800d342 <tcp_slowtmr+0x3da>
      tcp_pcb_purge(pcb);
 800d320:	4630      	mov	r0, r6
 800d322:	f7ff fe03 	bl	800cf2c <tcp_pcb_purge>
      if (prev != NULL) {
 800d326:	b97c      	cbnz	r4, 800d348 <tcp_slowtmr+0x3e0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	42b3      	cmp	r3, r6
 800d32c:	d006      	beq.n	800d33c <tcp_slowtmr+0x3d4>
 800d32e:	4b13      	ldr	r3, [pc, #76]	@ (800d37c <tcp_slowtmr+0x414>)
 800d330:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800d334:	4912      	ldr	r1, [pc, #72]	@ (800d380 <tcp_slowtmr+0x418>)
 800d336:	480f      	ldr	r0, [pc, #60]	@ (800d374 <tcp_slowtmr+0x40c>)
 800d338:	f008 fc28 	bl	8015b8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d33c:	68f3      	ldr	r3, [r6, #12]
 800d33e:	603b      	str	r3, [r7, #0]
 800d340:	e00e      	b.n	800d360 <tcp_slowtmr+0x3f8>
      prev = pcb;
 800d342:	4634      	mov	r4, r6
      pcb = pcb->next;
 800d344:	68f6      	ldr	r6, [r6, #12]
 800d346:	e62b      	b.n	800cfa0 <tcp_slowtmr+0x38>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	42b3      	cmp	r3, r6
 800d34c:	d106      	bne.n	800d35c <tcp_slowtmr+0x3f4>
 800d34e:	4b0b      	ldr	r3, [pc, #44]	@ (800d37c <tcp_slowtmr+0x414>)
 800d350:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d354:	490b      	ldr	r1, [pc, #44]	@ (800d384 <tcp_slowtmr+0x41c>)
 800d356:	4807      	ldr	r0, [pc, #28]	@ (800d374 <tcp_slowtmr+0x40c>)
 800d358:	f008 fc18 	bl	8015b8c <iprintf>
        prev->next = pcb->next;
 800d35c:	68f3      	ldr	r3, [r6, #12]
 800d35e:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800d360:	f8d6 b00c 	ldr.w	fp, [r6, #12]
      tcp_free(pcb2);
 800d364:	4630      	mov	r0, r6
 800d366:	f7ff fc4b 	bl	800cc00 <tcp_free>
      pcb = pcb->next;
 800d36a:	465e      	mov	r6, fp
 800d36c:	e618      	b.n	800cfa0 <tcp_slowtmr+0x38>
 800d36e:	bf00      	nop
 800d370:	08017b57 	.word	0x08017b57
 800d374:	080169d3 	.word	0x080169d3
 800d378:	20010f66 	.word	0x20010f66
 800d37c:	08017917 	.word	0x08017917
 800d380:	08017bd7 	.word	0x08017bd7
 800d384:	08017bb0 	.word	0x08017bb0
 800d388:	000124f8 	.word	0x000124f8

0800d38c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d390:	460c      	mov	r4, r1
 800d392:	b931      	cbnz	r1, 800d3a2 <tcp_pcb_remove+0x16>
 800d394:	4b25      	ldr	r3, [pc, #148]	@ (800d42c <tcp_pcb_remove+0xa0>)
 800d396:	f640 028d 	movw	r2, #2189	@ 0x88d
 800d39a:	4925      	ldr	r1, [pc, #148]	@ (800d430 <tcp_pcb_remove+0xa4>)
 800d39c:	4825      	ldr	r0, [pc, #148]	@ (800d434 <tcp_pcb_remove+0xa8>)
 800d39e:	f008 fbf5 	bl	8015b8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d3a2:	b935      	cbnz	r5, 800d3b2 <tcp_pcb_remove+0x26>
 800d3a4:	4b21      	ldr	r3, [pc, #132]	@ (800d42c <tcp_pcb_remove+0xa0>)
 800d3a6:	f640 028e 	movw	r2, #2190	@ 0x88e
 800d3aa:	4923      	ldr	r1, [pc, #140]	@ (800d438 <tcp_pcb_remove+0xac>)
 800d3ac:	4821      	ldr	r0, [pc, #132]	@ (800d434 <tcp_pcb_remove+0xa8>)
 800d3ae:	f008 fbed 	bl	8015b8c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d3b2:	682b      	ldr	r3, [r5, #0]
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	d116      	bne.n	800d3e6 <tcp_pcb_remove+0x5a>
 800d3b8:	68e3      	ldr	r3, [r4, #12]
 800d3ba:	602b      	str	r3, [r5, #0]
 800d3bc:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800d3be:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800d3c0:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800d3c2:	f7ff fdb3 	bl	800cf2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d3c6:	7d23      	ldrb	r3, [r4, #20]
 800d3c8:	2b0a      	cmp	r3, #10
 800d3ca:	d114      	bne.n	800d3f6 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d3cc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d3ce:	bb23      	cbnz	r3, 800d41a <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d3d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3d2:	b1f3      	cbz	r3, 800d412 <tcp_pcb_remove+0x86>
 800d3d4:	4b15      	ldr	r3, [pc, #84]	@ (800d42c <tcp_pcb_remove+0xa0>)
 800d3d6:	f640 029e 	movw	r2, #2206	@ 0x89e
 800d3da:	4918      	ldr	r1, [pc, #96]	@ (800d43c <tcp_pcb_remove+0xb0>)
 800d3dc:	4815      	ldr	r0, [pc, #84]	@ (800d434 <tcp_pcb_remove+0xa8>)
 800d3de:	f008 fbd5 	bl	8015b8c <iprintf>
 800d3e2:	e016      	b.n	800d412 <tcp_pcb_remove+0x86>
  TCP_RMV(pcblist, pcb);
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d0e8      	beq.n	800d3bc <tcp_pcb_remove+0x30>
 800d3ea:	68da      	ldr	r2, [r3, #12]
 800d3ec:	42a2      	cmp	r2, r4
 800d3ee:	d1f9      	bne.n	800d3e4 <tcp_pcb_remove+0x58>
 800d3f0:	68e2      	ldr	r2, [r4, #12]
 800d3f2:	60da      	str	r2, [r3, #12]
 800d3f4:	e7e2      	b.n	800d3bc <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d00b      	beq.n	800d412 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800d3fa:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800d3fc:	07da      	lsls	r2, r3, #31
 800d3fe:	d5e5      	bpl.n	800d3cc <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800d400:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800d404:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800d406:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800d408:	f002 fbcc 	bl	800fba4 <tcp_output>
  if (pcb->state != LISTEN) {
 800d40c:	7d23      	ldrb	r3, [r4, #20]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d1dc      	bne.n	800d3cc <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d412:	2300      	movs	r3, #0
 800d414:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d416:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d418:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d41a:	4b04      	ldr	r3, [pc, #16]	@ (800d42c <tcp_pcb_remove+0xa0>)
 800d41c:	f640 029d 	movw	r2, #2205	@ 0x89d
 800d420:	4907      	ldr	r1, [pc, #28]	@ (800d440 <tcp_pcb_remove+0xb4>)
 800d422:	4804      	ldr	r0, [pc, #16]	@ (800d434 <tcp_pcb_remove+0xa8>)
 800d424:	f008 fbb2 	bl	8015b8c <iprintf>
 800d428:	e7d2      	b.n	800d3d0 <tcp_pcb_remove+0x44>
 800d42a:	bf00      	nop
 800d42c:	08017917 	.word	0x08017917
 800d430:	08017bfd 	.word	0x08017bfd
 800d434:	080169d3 	.word	0x080169d3
 800d438:	08017c19 	.word	0x08017c19
 800d43c:	08017c51 	.word	0x08017c51
 800d440:	08017c39 	.word	0x08017c39

0800d444 <tcp_close_shutdown>:
{
 800d444:	b530      	push	{r4, r5, lr}
 800d446:	460d      	mov	r5, r1
 800d448:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d44a:	4604      	mov	r4, r0
 800d44c:	b930      	cbnz	r0, 800d45c <tcp_close_shutdown+0x18>
 800d44e:	4b4b      	ldr	r3, [pc, #300]	@ (800d57c <tcp_close_shutdown+0x138>)
 800d450:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d454:	494a      	ldr	r1, [pc, #296]	@ (800d580 <tcp_close_shutdown+0x13c>)
 800d456:	484b      	ldr	r0, [pc, #300]	@ (800d584 <tcp_close_shutdown+0x140>)
 800d458:	f008 fb98 	bl	8015b8c <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d45c:	7d23      	ldrb	r3, [r4, #20]
 800d45e:	2d00      	cmp	r5, #0
 800d460:	d040      	beq.n	800d4e4 <tcp_close_shutdown+0xa0>
 800d462:	2b04      	cmp	r3, #4
 800d464:	d001      	beq.n	800d46a <tcp_close_shutdown+0x26>
 800d466:	2b07      	cmp	r3, #7
 800d468:	d13c      	bne.n	800d4e4 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d46a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d46c:	b923      	cbnz	r3, 800d478 <tcp_close_shutdown+0x34>
 800d46e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800d470:	f640 3368 	movw	r3, #2920	@ 0xb68
 800d474:	429a      	cmp	r2, r3
 800d476:	d07b      	beq.n	800d570 <tcp_close_shutdown+0x12c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d478:	8b63      	ldrh	r3, [r4, #26]
 800d47a:	06db      	lsls	r3, r3, #27
 800d47c:	d406      	bmi.n	800d48c <tcp_close_shutdown+0x48>
 800d47e:	4b3f      	ldr	r3, [pc, #252]	@ (800d57c <tcp_close_shutdown+0x138>)
 800d480:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d484:	4940      	ldr	r1, [pc, #256]	@ (800d588 <tcp_close_shutdown+0x144>)
 800d486:	483f      	ldr	r0, [pc, #252]	@ (800d584 <tcp_close_shutdown+0x140>)
 800d488:	f008 fb80 	bl	8015b8c <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d48c:	8b23      	ldrh	r3, [r4, #24]
 800d48e:	4620      	mov	r0, r4
 800d490:	9302      	str	r3, [sp, #8]
 800d492:	8ae3      	ldrh	r3, [r4, #22]
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	1d23      	adds	r3, r4, #4
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	4623      	mov	r3, r4
 800d49c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d49e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800d4a0:	f002 fb14 	bl	800facc <tcp_rst>
      tcp_pcb_purge(pcb);
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f7ff fd41 	bl	800cf2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d4aa:	4a38      	ldr	r2, [pc, #224]	@ (800d58c <tcp_close_shutdown+0x148>)
 800d4ac:	6813      	ldr	r3, [r2, #0]
 800d4ae:	42a3      	cmp	r3, r4
 800d4b0:	d110      	bne.n	800d4d4 <tcp_close_shutdown+0x90>
 800d4b2:	68e3      	ldr	r3, [r4, #12]
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	60e3      	str	r3, [r4, #12]
 800d4bc:	4b34      	ldr	r3, [pc, #208]	@ (800d590 <tcp_close_shutdown+0x14c>)
 800d4be:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800d4c0:	4b34      	ldr	r3, [pc, #208]	@ (800d594 <tcp_close_shutdown+0x150>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	42a3      	cmp	r3, r4
 800d4c6:	d11d      	bne.n	800d504 <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 800d4c8:	f001 fc4e 	bl	800ed68 <tcp_trigger_input_pcb_close>
}
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	b005      	add	sp, #20
 800d4d0:	bd30      	pop	{r4, r5, pc}
      TCP_RMV_ACTIVE(pcb);
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0ee      	beq.n	800d4b6 <tcp_close_shutdown+0x72>
 800d4d8:	68da      	ldr	r2, [r3, #12]
 800d4da:	42a2      	cmp	r2, r4
 800d4dc:	d1f9      	bne.n	800d4d2 <tcp_close_shutdown+0x8e>
 800d4de:	68e2      	ldr	r2, [r4, #12]
 800d4e0:	60da      	str	r2, [r3, #12]
 800d4e2:	e7e8      	b.n	800d4b6 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d01a      	beq.n	800d51e <tcp_close_shutdown+0xda>
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d039      	beq.n	800d560 <tcp_close_shutdown+0x11c>
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d13f      	bne.n	800d570 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800d4f0:	8ae3      	ldrh	r3, [r4, #22]
 800d4f2:	b13b      	cbz	r3, 800d504 <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d4f4:	4a28      	ldr	r2, [pc, #160]	@ (800d598 <tcp_close_shutdown+0x154>)
 800d4f6:	6813      	ldr	r3, [r2, #0]
 800d4f8:	42a3      	cmp	r3, r4
 800d4fa:	d108      	bne.n	800d50e <tcp_close_shutdown+0xca>
 800d4fc:	68e3      	ldr	r3, [r4, #12]
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	2300      	movs	r3, #0
 800d502:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800d504:	4620      	mov	r0, r4
 800d506:	f7ff fb7b 	bl	800cc00 <tcp_free>
      break;
 800d50a:	e7df      	b.n	800d4cc <tcp_close_shutdown+0x88>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d50c:	4613      	mov	r3, r2
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0f6      	beq.n	800d500 <tcp_close_shutdown+0xbc>
 800d512:	68da      	ldr	r2, [r3, #12]
 800d514:	42a2      	cmp	r2, r4
 800d516:	d1f9      	bne.n	800d50c <tcp_close_shutdown+0xc8>
 800d518:	68e2      	ldr	r2, [r4, #12]
 800d51a:	60da      	str	r2, [r3, #12]
 800d51c:	e7f0      	b.n	800d500 <tcp_close_shutdown+0xbc>
 800d51e:	491f      	ldr	r1, [pc, #124]	@ (800d59c <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800d520:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d522:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d526:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d528:	b9a2      	cbnz	r2, 800d554 <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d52a:	3301      	adds	r3, #1
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d1f8      	bne.n	800d522 <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d530:	4621      	mov	r1, r4
 800d532:	481b      	ldr	r0, [pc, #108]	@ (800d5a0 <tcp_close_shutdown+0x15c>)
 800d534:	f7ff ff2a 	bl	800d38c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d538:	7d23      	ldrb	r3, [r4, #20]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d105      	bne.n	800d54a <tcp_close_shutdown+0x106>
 800d53e:	4b0f      	ldr	r3, [pc, #60]	@ (800d57c <tcp_close_shutdown+0x138>)
 800d540:	22df      	movs	r2, #223	@ 0xdf
 800d542:	4918      	ldr	r1, [pc, #96]	@ (800d5a4 <tcp_close_shutdown+0x160>)
 800d544:	480f      	ldr	r0, [pc, #60]	@ (800d584 <tcp_close_shutdown+0x140>)
 800d546:	f008 fb21 	bl	8015b8c <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d54a:	4621      	mov	r1, r4
 800d54c:	2002      	movs	r0, #2
 800d54e:	f7fe fe43 	bl	800c1d8 <memp_free>
}
 800d552:	e7bb      	b.n	800d4cc <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800d554:	6f95      	ldr	r5, [r2, #120]	@ 0x78
 800d556:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800d558:	bf08      	it	eq
 800d55a:	6790      	streq	r0, [r2, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d55c:	68d2      	ldr	r2, [r2, #12]
 800d55e:	e7e3      	b.n	800d528 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d560:	4621      	mov	r1, r4
 800d562:	480a      	ldr	r0, [pc, #40]	@ (800d58c <tcp_close_shutdown+0x148>)
 800d564:	f7ff ff12 	bl	800d38c <tcp_pcb_remove>
 800d568:	4b09      	ldr	r3, [pc, #36]	@ (800d590 <tcp_close_shutdown+0x14c>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	701a      	strb	r2, [r3, #0]
 800d56e:	e7c9      	b.n	800d504 <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 800d570:	4620      	mov	r0, r4
}
 800d572:	b005      	add	sp, #20
 800d574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800d578:	f7ff bb06 	b.w	800cb88 <tcp_close_shutdown_fin>
 800d57c:	08017917 	.word	0x08017917
 800d580:	08017c6a 	.word	0x08017c6a
 800d584:	080169d3 	.word	0x080169d3
 800d588:	08017c8a 	.word	0x08017c8a
 800d58c:	20010f6c 	.word	0x20010f6c
 800d590:	20010f66 	.word	0x20010f66
 800d594:	20010f7c 	.word	0x20010f7c
 800d598:	20010f74 	.word	0x20010f74
 800d59c:	0808f8bc 	.word	0x0808f8bc
 800d5a0:	20010f70 	.word	0x20010f70
 800d5a4:	08017ca3 	.word	0x08017ca3

0800d5a8 <tcp_close>:
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5a8:	b148      	cbz	r0, 800d5be <tcp_close+0x16>
  if (pcb->state != LISTEN) {
 800d5aa:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800d5ac:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800d5ae:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d5b0:	bf1e      	ittt	ne
 800d5b2:	8b43      	ldrhne	r3, [r0, #26]
 800d5b4:	f043 0310 	orrne.w	r3, r3, #16
 800d5b8:	8343      	strhne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800d5ba:	f7ff bf43 	b.w	800d444 <tcp_close_shutdown>
}
 800d5be:	f06f 000f 	mvn.w	r0, #15
 800d5c2:	4770      	bx	lr

0800d5c4 <tcp_recv_null>:
{
 800d5c4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5c6:	4608      	mov	r0, r1
{
 800d5c8:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5ca:	b171      	cbz	r1, 800d5ea <tcp_recv_null+0x26>
  if (p != NULL) {
 800d5cc:	b13a      	cbz	r2, 800d5de <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 800d5ce:	8911      	ldrh	r1, [r2, #8]
 800d5d0:	f7ff fbfa 	bl	800cdc8 <tcp_recved>
    pbuf_free(p);
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7fe fffb 	bl	800c5d0 <pbuf_free>
  return ERR_OK;
 800d5da:	2000      	movs	r0, #0
}
 800d5dc:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1fb      	bne.n	800d5da <tcp_recv_null+0x16>
}
 800d5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800d5e6:	f7ff bfdf 	b.w	800d5a8 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5ea:	f06f 000f 	mvn.w	r0, #15
 800d5ee:	e7f5      	b.n	800d5dc <tcp_recv_null+0x18>

0800d5f0 <tcp_process_refused_data>:
{
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	b380      	cbz	r0, 800d658 <tcp_process_refused_data+0x68>
    u8_t refused_flags = pcb->refused_data->flags;
 800d5f6:	6f46      	ldr	r6, [r0, #116]	@ 0x74
    pcb->refused_data = NULL;
 800d5f8:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d5fa:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800d5fe:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800d600:	6743      	str	r3, [r0, #116]	@ 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d602:	b1e5      	cbz	r5, 800d63e <tcp_process_refused_data+0x4e>
 800d604:	4601      	mov	r1, r0
 800d606:	4632      	mov	r2, r6
 800d608:	6900      	ldr	r0, [r0, #16]
 800d60a:	47a8      	blx	r5
 800d60c:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800d60e:	b9e8      	cbnz	r0, 800d64c <tcp_process_refused_data+0x5c>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d610:	06bb      	lsls	r3, r7, #26
 800d612:	d512      	bpl.n	800d63a <tcp_process_refused_data+0x4a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d614:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800d616:	f640 3268 	movw	r2, #2920	@ 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800d61a:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d61e:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800d620:	bf1c      	itt	ne
 800d622:	3301      	addne	r3, #1
 800d624:	8523      	strhne	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800d626:	b146      	cbz	r6, 800d63a <tcp_process_refused_data+0x4a>
 800d628:	2300      	movs	r3, #0
 800d62a:	4621      	mov	r1, r4
 800d62c:	6920      	ldr	r0, [r4, #16]
 800d62e:	461a      	mov	r2, r3
 800d630:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800d632:	300d      	adds	r0, #13
 800d634:	d101      	bne.n	800d63a <tcp_process_refused_data+0x4a>
          return ERR_ABRT;
 800d636:	f06f 050c 	mvn.w	r5, #12
}
 800d63a:	4628      	mov	r0, r5
 800d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d63e:	4601      	mov	r1, r0
 800d640:	462b      	mov	r3, r5
 800d642:	4632      	mov	r2, r6
 800d644:	4628      	mov	r0, r5
 800d646:	f7ff ffbd 	bl	800d5c4 <tcp_recv_null>
 800d64a:	e7df      	b.n	800d60c <tcp_process_refused_data+0x1c>
    } else if (err == ERR_ABRT) {
 800d64c:	350d      	adds	r5, #13
 800d64e:	d0f2      	beq.n	800d636 <tcp_process_refused_data+0x46>
      return ERR_INPROGRESS;
 800d650:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800d654:	6766      	str	r6, [r4, #116]	@ 0x74
      return ERR_INPROGRESS;
 800d656:	e7f0      	b.n	800d63a <tcp_process_refused_data+0x4a>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d658:	f06f 050f 	mvn.w	r5, #15
 800d65c:	e7ed      	b.n	800d63a <tcp_process_refused_data+0x4a>
	...

0800d660 <tcp_fasttmr>:
{
 800d660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800d664:	4d1b      	ldr	r5, [pc, #108]	@ (800d6d4 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800d666:	4f1c      	ldr	r7, [pc, #112]	@ (800d6d8 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800d668:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800d66a:	4e1c      	ldr	r6, [pc, #112]	@ (800d6dc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800d66c:	3301      	adds	r3, #1
 800d66e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800d670:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800d672:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800d676:	b90c      	cbnz	r4, 800d67c <tcp_fasttmr+0x1c>
}
 800d678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800d67c:	782b      	ldrb	r3, [r5, #0]
 800d67e:	7fa2      	ldrb	r2, [r4, #30]
 800d680:	429a      	cmp	r2, r3
 800d682:	d024      	beq.n	800d6ce <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800d684:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800d686:	8b63      	ldrh	r3, [r4, #26]
 800d688:	07d9      	lsls	r1, r3, #31
 800d68a:	d509      	bpl.n	800d6a0 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800d68c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800d690:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800d692:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800d694:	f002 fa86 	bl	800fba4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d698:	8b63      	ldrh	r3, [r4, #26]
 800d69a:	f023 0303 	bic.w	r3, r3, #3
 800d69e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800d6a0:	8b63      	ldrh	r3, [r4, #26]
 800d6a2:	071a      	lsls	r2, r3, #28
 800d6a4:	d505      	bpl.n	800d6b2 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d6a6:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800d6aa:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d6ac:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800d6ae:	f7ff fa6b 	bl	800cb88 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800d6b2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      next = pcb->next;
 800d6b4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800d6b8:	b13b      	cbz	r3, 800d6ca <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800d6ba:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800d6bc:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800d6c0:	f7ff ff96 	bl	800d5f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d6c4:	7833      	ldrb	r3, [r6, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1d2      	bne.n	800d670 <tcp_fasttmr+0x10>
      pcb = next;
 800d6ca:	464c      	mov	r4, r9
 800d6cc:	e7d3      	b.n	800d676 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800d6ce:	68e4      	ldr	r4, [r4, #12]
 800d6d0:	e7d1      	b.n	800d676 <tcp_fasttmr+0x16>
 800d6d2:	bf00      	nop
 800d6d4:	20010f64 	.word	0x20010f64
 800d6d8:	20010f6c 	.word	0x20010f6c
 800d6dc:	20010f66 	.word	0x20010f66

0800d6e0 <tcp_tmr>:
{
 800d6e0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800d6e2:	f7ff ffbd 	bl	800d660 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800d6e6:	4a06      	ldr	r2, [pc, #24]	@ (800d700 <tcp_tmr+0x20>)
 800d6e8:	7813      	ldrb	r3, [r2, #0]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	7013      	strb	r3, [r2, #0]
 800d6f0:	07db      	lsls	r3, r3, #31
 800d6f2:	d503      	bpl.n	800d6fc <tcp_tmr+0x1c>
}
 800d6f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800d6f8:	f7ff bc36 	b.w	800cf68 <tcp_slowtmr>
}
 800d6fc:	bd08      	pop	{r3, pc}
 800d6fe:	bf00      	nop
 800d700:	20010f65 	.word	0x20010f65

0800d704 <tcp_shutdown>:
{
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	4615      	mov	r5, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d708:	4604      	mov	r4, r0
 800d70a:	b310      	cbz	r0, 800d752 <tcp_shutdown+0x4e>
  if (pcb->state == LISTEN) {
 800d70c:	7d03      	ldrb	r3, [r0, #20]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d017      	beq.n	800d742 <tcp_shutdown+0x3e>
  if (shut_rx) {
 800d712:	b181      	cbz	r1, 800d736 <tcp_shutdown+0x32>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d714:	8b43      	ldrh	r3, [r0, #26]
 800d716:	f043 0310 	orr.w	r3, r3, #16
 800d71a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800d71c:	b122      	cbz	r2, 800d728 <tcp_shutdown+0x24>
      return tcp_close_shutdown(pcb, 1);
 800d71e:	2101      	movs	r1, #1
}
 800d720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d724:	f7ff be8e 	b.w	800d444 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800d728:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800d72a:	b110      	cbz	r0, 800d732 <tcp_shutdown+0x2e>
      pbuf_free(pcb->refused_data);
 800d72c:	f7fe ff50 	bl	800c5d0 <pbuf_free>
      pcb->refused_data = NULL;
 800d730:	6765      	str	r5, [r4, #116]	@ 0x74
  return ERR_OK;
 800d732:	2000      	movs	r0, #0
}
 800d734:	bd38      	pop	{r3, r4, r5, pc}
  if (shut_tx) {
 800d736:	2a00      	cmp	r2, #0
 800d738:	d0fb      	beq.n	800d732 <tcp_shutdown+0x2e>
    switch (pcb->state) {
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d804      	bhi.n	800d748 <tcp_shutdown+0x44>
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d804      	bhi.n	800d74c <tcp_shutdown+0x48>
 800d742:	f06f 000a 	mvn.w	r0, #10
 800d746:	e7f5      	b.n	800d734 <tcp_shutdown+0x30>
 800d748:	2b07      	cmp	r3, #7
 800d74a:	d1fa      	bne.n	800d742 <tcp_shutdown+0x3e>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d74c:	2100      	movs	r1, #0
 800d74e:	4620      	mov	r0, r4
 800d750:	e7e6      	b.n	800d720 <tcp_shutdown+0x1c>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d752:	f06f 000f 	mvn.w	r0, #15
 800d756:	e7ed      	b.n	800d734 <tcp_shutdown+0x30>

0800d758 <tcp_abandon>:
{
 800d758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d75c:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d75e:	4604      	mov	r4, r0
 800d760:	2800      	cmp	r0, #0
 800d762:	d05e      	beq.n	800d822 <tcp_abandon+0xca>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d764:	7d03      	ldrb	r3, [r0, #20]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d106      	bne.n	800d778 <tcp_abandon+0x20>
 800d76a:	4b2f      	ldr	r3, [pc, #188]	@ (800d828 <tcp_abandon+0xd0>)
 800d76c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d770:	492e      	ldr	r1, [pc, #184]	@ (800d82c <tcp_abandon+0xd4>)
 800d772:	482f      	ldr	r0, [pc, #188]	@ (800d830 <tcp_abandon+0xd8>)
 800d774:	f008 fa0a 	bl	8015b8c <iprintf>
  if (pcb->state == TIME_WAIT) {
 800d778:	7d23      	ldrb	r3, [r4, #20]
 800d77a:	2b0a      	cmp	r3, #10
 800d77c:	d109      	bne.n	800d792 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d77e:	4621      	mov	r1, r4
 800d780:	482c      	ldr	r0, [pc, #176]	@ (800d834 <tcp_abandon+0xdc>)
 800d782:	f7ff fe03 	bl	800d38c <tcp_pcb_remove>
    tcp_free(pcb);
 800d786:	4620      	mov	r0, r4
}
 800d788:	b004      	add	sp, #16
 800d78a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800d78e:	f7ff ba37 	b.w	800cc00 <tcp_free>
    seqno = pcb->snd_nxt;
 800d792:	f8d4 9050 	ldr.w	r9, [r4, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800d796:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
    errf = pcb->errf;
 800d79a:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
    errf_arg = pcb->callback_arg;
 800d79e:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800d7a2:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d134      	bne.n	800d812 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 800d7a8:	bb0d      	cbnz	r5, 800d7ee <tcp_abandon+0x96>
    u16_t local_port = 0;
 800d7aa:	2500      	movs	r5, #0
    int send_rst = 0;
 800d7ac:	462e      	mov	r6, r5
    if (pcb->unacked != NULL) {
 800d7ae:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800d7b0:	b108      	cbz	r0, 800d7b6 <tcp_abandon+0x5e>
      tcp_segs_free(pcb->unacked);
 800d7b2:	f7ff fb49 	bl	800ce48 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d7b6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800d7b8:	b108      	cbz	r0, 800d7be <tcp_abandon+0x66>
      tcp_segs_free(pcb->unsent);
 800d7ba:	f7ff fb45 	bl	800ce48 <tcp_segs_free>
    if (send_rst) {
 800d7be:	b156      	cbz	r6, 800d7d6 <tcp_abandon+0x7e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d7c0:	8b23      	ldrh	r3, [r4, #24]
 800d7c2:	4652      	mov	r2, sl
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800d7cc:	1d23      	adds	r3, r4, #4
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	f002 f97b 	bl	800facc <tcp_rst>
    tcp_free(pcb);
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f7ff fa12 	bl	800cc00 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d7dc:	b30f      	cbz	r7, 800d822 <tcp_abandon+0xca>
 800d7de:	f06f 010c 	mvn.w	r1, #12
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	463b      	mov	r3, r7
}
 800d7e6:	b004      	add	sp, #16
 800d7e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d7ec:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d7ee:	4a12      	ldr	r2, [pc, #72]	@ (800d838 <tcp_abandon+0xe0>)
 800d7f0:	6813      	ldr	r3, [r2, #0]
 800d7f2:	42a3      	cmp	r3, r4
 800d7f4:	d105      	bne.n	800d802 <tcp_abandon+0xaa>
 800d7f6:	68e3      	ldr	r3, [r4, #12]
 800d7f8:	6013      	str	r3, [r2, #0]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	60e3      	str	r3, [r4, #12]
 800d7fe:	e7d4      	b.n	800d7aa <tcp_abandon+0x52>
 800d800:	4613      	mov	r3, r2
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0f9      	beq.n	800d7fa <tcp_abandon+0xa2>
 800d806:	68da      	ldr	r2, [r3, #12]
 800d808:	42a2      	cmp	r2, r4
 800d80a:	d1f9      	bne.n	800d800 <tcp_abandon+0xa8>
 800d80c:	68e2      	ldr	r2, [r4, #12]
 800d80e:	60da      	str	r2, [r3, #12]
 800d810:	e7f3      	b.n	800d7fa <tcp_abandon+0xa2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d812:	4621      	mov	r1, r4
 800d814:	4809      	ldr	r0, [pc, #36]	@ (800d83c <tcp_abandon+0xe4>)
 800d816:	f7ff fdb9 	bl	800d38c <tcp_pcb_remove>
 800d81a:	4b09      	ldr	r3, [pc, #36]	@ (800d840 <tcp_abandon+0xe8>)
 800d81c:	2201      	movs	r2, #1
 800d81e:	701a      	strb	r2, [r3, #0]
 800d820:	e7c5      	b.n	800d7ae <tcp_abandon+0x56>
}
 800d822:	b004      	add	sp, #16
 800d824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d828:	08017917 	.word	0x08017917
 800d82c:	08017cbc 	.word	0x08017cbc
 800d830:	080169d3 	.word	0x080169d3
 800d834:	20010f68 	.word	0x20010f68
 800d838:	20010f74 	.word	0x20010f74
 800d83c:	20010f6c 	.word	0x20010f6c
 800d840:	20010f66 	.word	0x20010f66

0800d844 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800d844:	2101      	movs	r1, #1
 800d846:	f7ff bf87 	b.w	800d758 <tcp_abandon>
	...

0800d84c <tcp_accept_null>:
{
 800d84c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d84e:	460c      	mov	r4, r1
 800d850:	b931      	cbnz	r1, 800d860 <tcp_accept_null+0x14>
 800d852:	4b06      	ldr	r3, [pc, #24]	@ (800d86c <tcp_accept_null+0x20>)
 800d854:	f44f 7244 	mov.w	r2, #784	@ 0x310
 800d858:	4905      	ldr	r1, [pc, #20]	@ (800d870 <tcp_accept_null+0x24>)
 800d85a:	4806      	ldr	r0, [pc, #24]	@ (800d874 <tcp_accept_null+0x28>)
 800d85c:	f008 f996 	bl	8015b8c <iprintf>
  tcp_abort(pcb);
 800d860:	4620      	mov	r0, r4
 800d862:	f7ff ffef 	bl	800d844 <tcp_abort>
}
 800d866:	f06f 000c 	mvn.w	r0, #12
 800d86a:	bd10      	pop	{r4, pc}
 800d86c:	08017917 	.word	0x08017917
 800d870:	08017ced 	.word	0x08017ced
 800d874:	080169d3 	.word	0x080169d3

0800d878 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d87c:	4605      	mov	r5, r0
 800d87e:	b930      	cbnz	r0, 800d88e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800d880:	4b09      	ldr	r3, [pc, #36]	@ (800d8a8 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800d882:	f640 120a 	movw	r2, #2314	@ 0x90a
 800d886:	4909      	ldr	r1, [pc, #36]	@ (800d8ac <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800d888:	4809      	ldr	r0, [pc, #36]	@ (800d8b0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800d88a:	f008 f97f 	bl	8015b8c <iprintf>

  while (pcb != NULL) {
 800d88e:	b904      	cbnz	r4, 800d892 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800d890:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 800d892:	6822      	ldr	r2, [r4, #0]
 800d894:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800d896:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 800d898:	429a      	cmp	r2, r3
 800d89a:	d102      	bne.n	800d8a2 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800d89c:	4620      	mov	r0, r4
 800d89e:	f7ff ffd1 	bl	800d844 <tcp_abort>
{
 800d8a2:	4634      	mov	r4, r6
 800d8a4:	e7f3      	b.n	800d88e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800d8a6:	bf00      	nop
 800d8a8:	08017917 	.word	0x08017917
 800d8ac:	08017d0a 	.word	0x08017d0a
 800d8b0:	080169d3 	.word	0x080169d3

0800d8b4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e8 <tcp_kill_state+0x34>)
  inactivity = 0;
 800d8b6:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8b8:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d8ec <tcp_kill_state+0x38>)
{
 800d8bc:	b430      	push	{r4, r5}
 800d8be:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8c0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800d8c2:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8c4:	b919      	cbnz	r1, 800d8ce <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800d8c6:	b168      	cbz	r0, 800d8e4 <tcp_kill_state+0x30>
}
 800d8c8:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800d8ca:	f7ff bf45 	b.w	800d758 <tcp_abandon>
    if (pcb->state == state) {
 800d8ce:	7d0b      	ldrb	r3, [r1, #20]
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	d105      	bne.n	800d8e0 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8d4:	6a0b      	ldr	r3, [r1, #32]
 800d8d6:	1aeb      	subs	r3, r5, r3
 800d8d8:	4293      	cmp	r3, r2
        inactivity = tcp_ticks - pcb->tmr;
 800d8da:	bf24      	itt	cs
 800d8dc:	461a      	movcs	r2, r3
        inactive = pcb;
 800d8de:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8e0:	68c9      	ldr	r1, [r1, #12]
 800d8e2:	e7ef      	b.n	800d8c4 <tcp_kill_state+0x10>
}
 800d8e4:	bc30      	pop	{r4, r5}
 800d8e6:	4770      	bx	lr
 800d8e8:	20010f6c 	.word	0x20010f6c
 800d8ec:	20010f78 	.word	0x20010f78

0800d8f0 <tcp_alloc>:
{
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	f7fe fc51 	bl	800c19c <memp_malloc>
  if (pcb == NULL) {
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d136      	bne.n	800d96e <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d900:	4e3f      	ldr	r6, [pc, #252]	@ (800da00 <tcp_alloc+0x110>)
 800d902:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 800d904:	2800      	cmp	r0, #0
 800d906:	d157      	bne.n	800d9b8 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d908:	4b3e      	ldr	r3, [pc, #248]	@ (800da04 <tcp_alloc+0x114>)
  inactivity = 0;
 800d90a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d90c:	4d3e      	ldr	r5, [pc, #248]	@ (800da08 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d90e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d910:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d912:	2b00      	cmp	r3, #0
 800d914:	d15b      	bne.n	800d9ce <tcp_alloc+0xde>
  if (inactive != NULL) {
 800d916:	b108      	cbz	r0, 800d91c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800d918:	f7ff ff94 	bl	800d844 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d91c:	2001      	movs	r0, #1
 800d91e:	f7fe fc3d 	bl	800c19c <memp_malloc>
    if (pcb == NULL) {
 800d922:	4603      	mov	r3, r0
 800d924:	bb18      	cbnz	r0, 800d96e <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800d926:	2009      	movs	r0, #9
 800d928:	f7ff ffc4 	bl	800d8b4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d92c:	2001      	movs	r0, #1
 800d92e:	f7fe fc35 	bl	800c19c <memp_malloc>
      if (pcb == NULL) {
 800d932:	4603      	mov	r3, r0
 800d934:	b9d8      	cbnz	r0, 800d96e <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800d936:	2008      	movs	r0, #8
 800d938:	f7ff ffbc 	bl	800d8b4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d93c:	2001      	movs	r0, #1
 800d93e:	f7fe fc2d 	bl	800c19c <memp_malloc>
        if (pcb == NULL) {
 800d942:	4603      	mov	r3, r0
 800d944:	b998      	cbnz	r0, 800d96e <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d946:	0622      	lsls	r2, r4, #24
 800d948:	d44a      	bmi.n	800d9e0 <tcp_alloc+0xf0>
  if (mprio == 0) {
 800d94a:	b15c      	cbz	r4, 800d964 <tcp_alloc+0x74>
 800d94c:	4621      	mov	r1, r4
  mprio--;
 800d94e:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d950:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 800d952:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d954:	682e      	ldr	r6, [r5, #0]
  mprio--;
 800d956:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d958:	2a00      	cmp	r2, #0
 800d95a:	d143      	bne.n	800d9e4 <tcp_alloc+0xf4>
  if (inactive != NULL) {
 800d95c:	b113      	cbz	r3, 800d964 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff ff70 	bl	800d844 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d964:	2001      	movs	r0, #1
 800d966:	f7fe fc19 	bl	800c19c <memp_malloc>
  if (pcb != NULL) {
 800d96a:	4603      	mov	r3, r0
 800d96c:	b310      	cbz	r0, 800d9b4 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d96e:	2298      	movs	r2, #152	@ 0x98
 800d970:	4618      	mov	r0, r3
 800d972:	2100      	movs	r1, #0
 800d974:	f008 fa7c 	bl	8015e70 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800d978:	f241 62d0 	movw	r2, #5840	@ 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d97c:	4603      	mov	r3, r0
    pcb->prio = prio;
 800d97e:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d980:	f8a0 2064 	strh.w	r2, [r0, #100]	@ 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d984:	4a21      	ldr	r2, [pc, #132]	@ (800da0c <tcp_alloc+0x11c>)
 800d986:	6282      	str	r2, [r0, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d988:	22ff      	movs	r2, #255	@ 0xff
 800d98a:	72c2      	strb	r2, [r0, #11]
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800d98c:	2206      	movs	r2, #6
 800d98e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800d992:	87c2      	strh	r2, [r0, #62]	@ 0x3e
    pcb->rtime = -1;
 800d994:	4a1e      	ldr	r2, [pc, #120]	@ (800da10 <tcp_alloc+0x120>)
 800d996:	6302      	str	r2, [r0, #48]	@ 0x30
    pcb->tmr = tcp_ticks;
 800d998:	4a1b      	ldr	r2, [pc, #108]	@ (800da08 <tcp_alloc+0x118>)
 800d99a:	6812      	ldr	r2, [r2, #0]
 800d99c:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d99e:	4a1d      	ldr	r2, [pc, #116]	@ (800da14 <tcp_alloc+0x124>)
 800d9a0:	7812      	ldrb	r2, [r2, #0]
 800d9a2:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800d9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800da18 <tcp_alloc+0x128>)
 800d9a6:	6482      	str	r2, [r0, #72]	@ 0x48
    pcb->recv = tcp_recv_null;
 800d9a8:	4a1c      	ldr	r2, [pc, #112]	@ (800da1c <tcp_alloc+0x12c>)
 800d9aa:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d9ae:	4a1c      	ldr	r2, [pc, #112]	@ (800da20 <tcp_alloc+0x130>)
 800d9b0:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800d9b8:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800d9ba:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800d9bc:	0719      	lsls	r1, r3, #28
 800d9be:	d504      	bpl.n	800d9ca <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d9c0:	f023 0308 	bic.w	r3, r3, #8
 800d9c4:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800d9c6:	f7ff f8df 	bl	800cb88 <tcp_close_shutdown_fin>
{
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	e79a      	b.n	800d904 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9ce:	6a1a      	ldr	r2, [r3, #32]
 800d9d0:	1aba      	subs	r2, r7, r2
 800d9d2:	428a      	cmp	r2, r1
 800d9d4:	bf34      	ite	cc
 800d9d6:	460a      	movcc	r2, r1
      inactive = pcb;
 800d9d8:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	4611      	mov	r1, r2
 800d9de:	e798      	b.n	800d912 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d9e0:	217f      	movs	r1, #127	@ 0x7f
 800d9e2:	e7b4      	b.n	800d94e <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 800d9e4:	7d57      	ldrb	r7, [r2, #21]
 800d9e6:	428f      	cmp	r7, r1
 800d9e8:	d304      	bcc.n	800d9f4 <tcp_alloc+0x104>
 800d9ea:	d107      	bne.n	800d9fc <tcp_alloc+0x10c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d9ec:	6a15      	ldr	r5, [r2, #32]
 800d9ee:	1b75      	subs	r5, r6, r5
 800d9f0:	4285      	cmp	r5, r0
 800d9f2:	d303      	bcc.n	800d9fc <tcp_alloc+0x10c>
      inactivity = tcp_ticks - pcb->tmr;
 800d9f4:	6a10      	ldr	r0, [r2, #32]
      mprio      = pcb->prio;
 800d9f6:	4639      	mov	r1, r7
      inactive   = pcb;
 800d9f8:	4613      	mov	r3, r2
      inactivity = tcp_ticks - pcb->tmr;
 800d9fa:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9fc:	68d2      	ldr	r2, [r2, #12]
 800d9fe:	e7ab      	b.n	800d958 <tcp_alloc+0x68>
 800da00:	20010f6c 	.word	0x20010f6c
 800da04:	20010f68 	.word	0x20010f68
 800da08:	20010f78 	.word	0x20010f78
 800da0c:	0b680b68 	.word	0x0b680b68
 800da10:	0218ffff 	.word	0x0218ffff
 800da14:	20010f64 	.word	0x20010f64
 800da18:	16d00001 	.word	0x16d00001
 800da1c:	0800d5c5 	.word	0x0800d5c5
 800da20:	006ddd00 	.word	0x006ddd00

0800da24 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800da24:	2040      	movs	r0, #64	@ 0x40
 800da26:	f7ff bf63 	b.w	800d8f0 <tcp_alloc>
	...

0800da2c <tcp_next_iss>:
{
 800da2c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800da2e:	b930      	cbnz	r0, 800da3e <tcp_next_iss+0x12>
 800da30:	4b06      	ldr	r3, [pc, #24]	@ (800da4c <tcp_next_iss+0x20>)
 800da32:	f640 02b9 	movw	r2, #2233	@ 0x8b9
 800da36:	4906      	ldr	r1, [pc, #24]	@ (800da50 <tcp_next_iss+0x24>)
 800da38:	4806      	ldr	r0, [pc, #24]	@ (800da54 <tcp_next_iss+0x28>)
 800da3a:	f008 f8a7 	bl	8015b8c <iprintf>
  iss += tcp_ticks;       /* XXX */
 800da3e:	4b06      	ldr	r3, [pc, #24]	@ (800da58 <tcp_next_iss+0x2c>)
 800da40:	4a06      	ldr	r2, [pc, #24]	@ (800da5c <tcp_next_iss+0x30>)
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	6812      	ldr	r2, [r2, #0]
 800da46:	4410      	add	r0, r2
 800da48:	6018      	str	r0, [r3, #0]
}
 800da4a:	bd08      	pop	{r3, pc}
 800da4c:	08017917 	.word	0x08017917
 800da50:	08017d3e 	.word	0x08017d3e
 800da54:	080169d3 	.word	0x080169d3
 800da58:	20000054 	.word	0x20000054
 800da5c:	20010f78 	.word	0x20010f78

0800da60 <tcp_eff_send_mss_netif>:
{
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4604      	mov	r4, r0
 800da64:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800da66:	b932      	cbnz	r2, 800da76 <tcp_eff_send_mss_netif+0x16>
 800da68:	4b09      	ldr	r3, [pc, #36]	@ (800da90 <tcp_eff_send_mss_netif+0x30>)
 800da6a:	f640 02cf 	movw	r2, #2255	@ 0x8cf
 800da6e:	4909      	ldr	r1, [pc, #36]	@ (800da94 <tcp_eff_send_mss_netif+0x34>)
 800da70:	4809      	ldr	r0, [pc, #36]	@ (800da98 <tcp_eff_send_mss_netif+0x38>)
 800da72:	f008 f88b 	bl	8015b8c <iprintf>
    if (outif == NULL) {
 800da76:	b14d      	cbz	r5, 800da8c <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800da78:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
  if (mtu != 0) {
 800da7a:	b13b      	cbz	r3, 800da8c <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800da7c:	2b28      	cmp	r3, #40	@ 0x28
 800da7e:	bf38      	it	cc
 800da80:	2328      	movcc	r3, #40	@ 0x28
 800da82:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800da84:	b29b      	uxth	r3, r3
 800da86:	429c      	cmp	r4, r3
 800da88:	bf28      	it	cs
 800da8a:	461c      	movcs	r4, r3
}
 800da8c:	4620      	mov	r0, r4
 800da8e:	bd38      	pop	{r3, r4, r5, pc}
 800da90:	08017917 	.word	0x08017917
 800da94:	08017d58 	.word	0x08017d58
 800da98:	080169d3 	.word	0x080169d3

0800da9c <tcp_connect>:
{
 800da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9e:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800daa0:	4604      	mov	r4, r0
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d065      	beq.n	800db72 <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800daa6:	2900      	cmp	r1, #0
 800daa8:	d063      	beq.n	800db72 <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800daaa:	7d03      	ldrb	r3, [r0, #20]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d163      	bne.n	800db78 <tcp_connect+0xdc>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dab0:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;
 800dab2:	8302      	strh	r2, [r0, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dab4:	6043      	str	r3, [r0, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dab6:	7a00      	ldrb	r0, [r0, #8]
 800dab8:	b380      	cbz	r0, 800db1c <tcp_connect+0x80>
    netif = netif_get_by_index(pcb->netif_idx);
 800daba:	f7fe fccb 	bl	800c454 <netif_get_by_index>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dabe:	4605      	mov	r5, r0
  if (netif == NULL) {
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d05c      	beq.n	800db7e <tcp_connect+0xe2>
  if (ip_addr_isany(&pcb->local_ip)) {
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	b90b      	cbnz	r3, 800dacc <tcp_connect+0x30>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dac8:	6843      	ldr	r3, [r0, #4]
 800daca:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 800dacc:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 800dace:	b34e      	cbz	r6, 800db24 <tcp_connect+0x88>
  iss = tcp_next_iss(pcb);
 800dad0:	4620      	mov	r0, r4
 800dad2:	f7ff ffab 	bl	800da2c <tcp_next_iss>
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dad6:	2300      	movs	r3, #0
 800dad8:	4a2a      	ldr	r2, [pc, #168]	@ (800db84 <tcp_connect+0xe8>)
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dada:	4629      	mov	r1, r5
  pcb->snd_nxt = iss;
 800dadc:	6520      	str	r0, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800dade:	3801      	subs	r0, #1
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  pcb->lastack = iss - 1;
 800dae2:	6460      	str	r0, [r4, #68]	@ 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dae4:	e9c4 3209 	strd	r3, r2, [r4, #36]	@ 0x24
  pcb->snd_lbb = iss - 1;
 800dae8:	e9c4 0016 	strd	r0, r0, [r4, #88]	@ 0x58
  pcb->snd_wnd = TCP_WND;
 800daec:	f640 3368 	movw	r3, #2920	@ 0xb68
  pcb->mss = INITIAL_MSS;
 800daf0:	f44f 7006 	mov.w	r0, #536	@ 0x218
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800daf4:	1d22      	adds	r2, r4, #4
  pcb->snd_wnd = TCP_WND;
 800daf6:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->mss = INITIAL_MSS;
 800dafa:	8660      	strh	r0, [r4, #50]	@ 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dafc:	f7ff ffb0 	bl	800da60 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 800db00:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800db02:	8660      	strh	r0, [r4, #50]	@ 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800db04:	2102      	movs	r1, #2
 800db06:	4620      	mov	r0, r4
  pcb->cwnd = 1;
 800db08:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  pcb->connected = connected;
 800db0c:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800db10:	f001 fe60 	bl	800f7d4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800db14:	4605      	mov	r5, r0
 800db16:	b168      	cbz	r0, 800db34 <tcp_connect+0x98>
}
 800db18:	4628      	mov	r0, r5
 800db1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800db1c:	1d20      	adds	r0, r4, #4
 800db1e:	f003 f9d1 	bl	8010ec4 <ip4_route>
 800db22:	e7cc      	b.n	800dabe <tcp_connect+0x22>
    pcb->local_port = tcp_new_port();
 800db24:	f7ff f808 	bl	800cb38 <tcp_new_port>
 800db28:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d1d0      	bne.n	800dad0 <tcp_connect+0x34>
      return ERR_BUF;
 800db2e:	f06f 0501 	mvn.w	r5, #1
 800db32:	e7f1      	b.n	800db18 <tcp_connect+0x7c>
    pcb->state = SYN_SENT;
 800db34:	2302      	movs	r3, #2
 800db36:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800db38:	b12e      	cbz	r6, 800db46 <tcp_connect+0xaa>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800db3a:	4a13      	ldr	r2, [pc, #76]	@ (800db88 <tcp_connect+0xec>)
 800db3c:	6813      	ldr	r3, [r2, #0]
 800db3e:	42a3      	cmp	r3, r4
 800db40:	d10f      	bne.n	800db62 <tcp_connect+0xc6>
 800db42:	68e3      	ldr	r3, [r4, #12]
 800db44:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 800db46:	4b11      	ldr	r3, [pc, #68]	@ (800db8c <tcp_connect+0xf0>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	601c      	str	r4, [r3, #0]
 800db4c:	60e2      	str	r2, [r4, #12]
 800db4e:	f002 fafd 	bl	801014c <tcp_timer_needed>
 800db52:	4b0f      	ldr	r3, [pc, #60]	@ (800db90 <tcp_connect+0xf4>)
 800db54:	2201      	movs	r2, #1
    tcp_output(pcb);
 800db56:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800db58:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800db5a:	f002 f823 	bl	800fba4 <tcp_output>
 800db5e:	e7db      	b.n	800db18 <tcp_connect+0x7c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800db60:	4613      	mov	r3, r2
 800db62:	2b00      	cmp	r3, #0
 800db64:	d0ef      	beq.n	800db46 <tcp_connect+0xaa>
 800db66:	68da      	ldr	r2, [r3, #12]
 800db68:	42a2      	cmp	r2, r4
 800db6a:	d1f9      	bne.n	800db60 <tcp_connect+0xc4>
 800db6c:	68e2      	ldr	r2, [r4, #12]
 800db6e:	60da      	str	r2, [r3, #12]
 800db70:	e7e9      	b.n	800db46 <tcp_connect+0xaa>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800db72:	f06f 050f 	mvn.w	r5, #15
 800db76:	e7cf      	b.n	800db18 <tcp_connect+0x7c>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800db78:	f06f 0509 	mvn.w	r5, #9
 800db7c:	e7cc      	b.n	800db18 <tcp_connect+0x7c>
    return ERR_RTE;
 800db7e:	f06f 0503 	mvn.w	r5, #3
 800db82:	e7c9      	b.n	800db18 <tcp_connect+0x7c>
 800db84:	0b680b68 	.word	0x0b680b68
 800db88:	20010f74 	.word	0x20010f74
 800db8c:	20010f6c 	.word	0x20010f6c
 800db90:	20010f66 	.word	0x20010f66

0800db94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800db98:	4604      	mov	r4, r0
 800db9a:	b180      	cbz	r0, 800dbbe <tcp_netif_ip_addr_changed+0x2a>
 800db9c:	6803      	ldr	r3, [r0, #0]
 800db9e:	b173      	cbz	r3, 800dbbe <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dba0:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd0 <tcp_netif_ip_addr_changed+0x3c>)
 800dba2:	6819      	ldr	r1, [r3, #0]
 800dba4:	f7ff fe68 	bl	800d878 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dba8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd4 <tcp_netif_ip_addr_changed+0x40>)
 800dbaa:	4620      	mov	r0, r4
 800dbac:	6819      	ldr	r1, [r3, #0]
 800dbae:	f7ff fe63 	bl	800d878 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dbb2:	b125      	cbz	r5, 800dbbe <tcp_netif_ip_addr_changed+0x2a>
 800dbb4:	682b      	ldr	r3, [r5, #0]
 800dbb6:	b113      	cbz	r3, 800dbbe <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbb8:	4b07      	ldr	r3, [pc, #28]	@ (800dbd8 <tcp_netif_ip_addr_changed+0x44>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	b903      	cbnz	r3, 800dbc0 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800dbbe:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 800dbc0:	6819      	ldr	r1, [r3, #0]
 800dbc2:	6822      	ldr	r2, [r4, #0]
 800dbc4:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dbc6:	bf04      	itt	eq
 800dbc8:	682a      	ldreq	r2, [r5, #0]
 800dbca:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	e7f5      	b.n	800dbbc <tcp_netif_ip_addr_changed+0x28>
 800dbd0:	20010f6c 	.word	0x20010f6c
 800dbd4:	20010f74 	.word	0x20010f74
 800dbd8:	20010f70 	.word	0x20010f70

0800dbdc <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800dbdc:	4a09      	ldr	r2, [pc, #36]	@ (800dc04 <tcp_get_next_optbyte+0x28>)
 800dbde:	8813      	ldrh	r3, [r2, #0]
 800dbe0:	1c59      	adds	r1, r3, #1
 800dbe2:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dbe4:	4a08      	ldr	r2, [pc, #32]	@ (800dc08 <tcp_get_next_optbyte+0x2c>)
 800dbe6:	6812      	ldr	r2, [r2, #0]
 800dbe8:	b11a      	cbz	r2, 800dbf2 <tcp_get_next_optbyte+0x16>
 800dbea:	4908      	ldr	r1, [pc, #32]	@ (800dc0c <tcp_get_next_optbyte+0x30>)
 800dbec:	8809      	ldrh	r1, [r1, #0]
 800dbee:	428b      	cmp	r3, r1
 800dbf0:	d204      	bcs.n	800dbfc <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800dbf2:	4a07      	ldr	r2, [pc, #28]	@ (800dc10 <tcp_get_next_optbyte+0x34>)
 800dbf4:	6812      	ldr	r2, [r2, #0]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	7d18      	ldrb	r0, [r3, #20]
 800dbfa:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dbfc:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800dc02:	4770      	bx	lr
 800dc04:	20010f94 	.word	0x20010f94
 800dc08:	20010f98 	.word	0x20010f98
 800dc0c:	20010f9c 	.word	0x20010f9c
 800dc10:	20010fa0 	.word	0x20010fa0

0800dc14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dc16:	4605      	mov	r5, r0
 800dc18:	b930      	cbnz	r0, 800dc28 <tcp_parseopt+0x14>
 800dc1a:	4b1e      	ldr	r3, [pc, #120]	@ (800dc94 <tcp_parseopt+0x80>)
 800dc1c:	f240 728d 	movw	r2, #1933	@ 0x78d
 800dc20:	491d      	ldr	r1, [pc, #116]	@ (800dc98 <tcp_parseopt+0x84>)
 800dc22:	481e      	ldr	r0, [pc, #120]	@ (800dc9c <tcp_parseopt+0x88>)
 800dc24:	f007 ffb2 	bl	8015b8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dc28:	4b1d      	ldr	r3, [pc, #116]	@ (800dca0 <tcp_parseopt+0x8c>)
 800dc2a:	881e      	ldrh	r6, [r3, #0]
 800dc2c:	b386      	cbz	r6, 800dc90 <tcp_parseopt+0x7c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc2e:	4c1d      	ldr	r4, [pc, #116]	@ (800dca4 <tcp_parseopt+0x90>)
 800dc30:	2300      	movs	r3, #0
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dc32:	8023      	strh	r3, [r4, #0]
 800dc34:	e029      	b.n	800dc8a <tcp_parseopt+0x76>
      u8_t opt = tcp_get_next_optbyte();
 800dc36:	f7ff ffd1 	bl	800dbdc <tcp_get_next_optbyte>
      switch (opt) {
 800dc3a:	2801      	cmp	r0, #1
 800dc3c:	d025      	beq.n	800dc8a <tcp_parseopt+0x76>
 800dc3e:	2802      	cmp	r0, #2
 800dc40:	d008      	beq.n	800dc54 <tcp_parseopt+0x40>
 800dc42:	b328      	cbz	r0, 800dc90 <tcp_parseopt+0x7c>
          data = tcp_get_next_optbyte();
 800dc44:	f7ff ffca 	bl	800dbdc <tcp_get_next_optbyte>
          if (data < 2) {
 800dc48:	2801      	cmp	r0, #1
 800dc4a:	d921      	bls.n	800dc90 <tcp_parseopt+0x7c>
          tcp_optidx += data - 2;
 800dc4c:	8823      	ldrh	r3, [r4, #0]
 800dc4e:	3b02      	subs	r3, #2
 800dc50:	4403      	add	r3, r0
 800dc52:	e7ee      	b.n	800dc32 <tcp_parseopt+0x1e>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dc54:	f7ff ffc2 	bl	800dbdc <tcp_get_next_optbyte>
 800dc58:	2804      	cmp	r0, #4
 800dc5a:	d119      	bne.n	800dc90 <tcp_parseopt+0x7c>
 800dc5c:	8823      	ldrh	r3, [r4, #0]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	42b3      	cmp	r3, r6
 800dc62:	da15      	bge.n	800dc90 <tcp_parseopt+0x7c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dc64:	f7ff ffba 	bl	800dbdc <tcp_get_next_optbyte>
 800dc68:	0207      	lsls	r7, r0, #8
          mss |= tcp_get_next_optbyte();
 800dc6a:	f7ff ffb7 	bl	800dbdc <tcp_get_next_optbyte>
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dc6e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dc72:	b2bf      	uxth	r7, r7
          mss |= tcp_get_next_optbyte();
 800dc74:	ea40 0307 	orr.w	r3, r0, r7
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dc78:	f240 50b3 	movw	r0, #1459	@ 0x5b3
          mss |= tcp_get_next_optbyte();
 800dc7c:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dc7e:	1e5a      	subs	r2, r3, #1
 800dc80:	b292      	uxth	r2, r2
 800dc82:	4282      	cmp	r2, r0
 800dc84:	bf88      	it	hi
 800dc86:	460b      	movhi	r3, r1
 800dc88:	866b      	strh	r3, [r5, #50]	@ 0x32
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc8a:	8823      	ldrh	r3, [r4, #0]
 800dc8c:	42b3      	cmp	r3, r6
 800dc8e:	d3d2      	bcc.n	800dc36 <tcp_parseopt+0x22>
      }
    }
  }
}
 800dc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc92:	bf00      	nop
 800dc94:	08017d7f 	.word	0x08017d7f
 800dc98:	08017d9f 	.word	0x08017d9f
 800dc9c:	080169d3 	.word	0x080169d3
 800dca0:	20010f9e 	.word	0x20010f9e
 800dca4:	20010f94 	.word	0x20010f94

0800dca8 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800dca8:	4b0c      	ldr	r3, [pc, #48]	@ (800dcdc <tcp_input_delayed_close+0x34>)
{
 800dcaa:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800dcac:	781b      	ldrb	r3, [r3, #0]
{
 800dcae:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800dcb0:	f013 0010 	ands.w	r0, r3, #16
 800dcb4:	d011      	beq.n	800dcda <tcp_input_delayed_close+0x32>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dcb6:	8b63      	ldrh	r3, [r4, #26]
 800dcb8:	06db      	lsls	r3, r3, #27
 800dcba:	d406      	bmi.n	800dcca <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dcbc:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800dcc0:	b11b      	cbz	r3, 800dcca <tcp_input_delayed_close+0x22>
 800dcc2:	f06f 010e 	mvn.w	r1, #14
 800dcc6:	6920      	ldr	r0, [r4, #16]
 800dcc8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dcca:	4621      	mov	r1, r4
 800dccc:	4804      	ldr	r0, [pc, #16]	@ (800dce0 <tcp_input_delayed_close+0x38>)
 800dcce:	f7ff fb5d 	bl	800d38c <tcp_pcb_remove>
    tcp_free(pcb);
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7fe ff94 	bl	800cc00 <tcp_free>
 800dcd8:	2001      	movs	r0, #1
}
 800dcda:	bd10      	pop	{r4, pc}
 800dcdc:	20010f84 	.word	0x20010f84
 800dce0:	20010f6c 	.word	0x20010f6c

0800dce4 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800dce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	4607      	mov	r7, r0
 800dcea:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dcec:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 800dda0 <tcp_free_acked_segments.isra.0+0xbc>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dcf0:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800dda4 <tcp_free_acked_segments.isra.0+0xc0>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800dcf4:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 800dcf6:	2c00      	cmp	r4, #0
 800dcf8:	d045      	beq.n	800dd86 <tcp_free_acked_segments.isra.0+0xa2>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	4626      	mov	r6, r4
 800dcfe:	f8da 5000 	ldr.w	r5, [sl]
 800dd02:	6858      	ldr	r0, [r3, #4]
 800dd04:	f7fd ff0f 	bl	800bb26 <lwip_htonl>
 800dd08:	68e2      	ldr	r2, [r4, #12]
 800dd0a:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800dd0e:	4683      	mov	fp, r0
 800dd10:	8990      	ldrh	r0, [r2, #12]
 800dd12:	eba5 0508 	sub.w	r5, r5, r8
 800dd16:	f7fd ff03 	bl	800bb20 <lwip_htons>
 800dd1a:	f010 0003 	ands.w	r0, r0, #3
 800dd1e:	eba5 050b 	sub.w	r5, r5, fp
 800dd22:	bf18      	it	ne
 800dd24:	2001      	movne	r0, #1
 800dd26:	1a2d      	subs	r5, r5, r0
  while (seg_list != NULL &&
 800dd28:	2d00      	cmp	r5, #0
 800dd2a:	db2d      	blt.n	800dd88 <tcp_free_acked_segments.isra.0+0xa4>
    clen = pbuf_clen(next->p);
 800dd2c:	6870      	ldr	r0, [r6, #4]
    seg_list = seg_list->next;
 800dd2e:	6824      	ldr	r4, [r4, #0]
    clen = pbuf_clen(next->p);
 800dd30:	f7fe fd92 	bl	800c858 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd34:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800dd38:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd3a:	4283      	cmp	r3, r0
 800dd3c:	d206      	bcs.n	800dd4c <tcp_free_acked_segments.isra.0+0x68>
 800dd3e:	4b14      	ldr	r3, [pc, #80]	@ (800dd90 <tcp_free_acked_segments.isra.0+0xac>)
 800dd40:	f240 4264 	movw	r2, #1124	@ 0x464
 800dd44:	4913      	ldr	r1, [pc, #76]	@ (800dd94 <tcp_free_acked_segments.isra.0+0xb0>)
 800dd46:	4814      	ldr	r0, [pc, #80]	@ (800dd98 <tcp_free_acked_segments.isra.0+0xb4>)
 800dd48:	f007 ff20 	bl	8015b8c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dd4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    tcp_seg_free(next);
 800dd50:	4630      	mov	r0, r6
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd52:	f8b9 2000 	ldrh.w	r2, [r9]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dd56:	1b5b      	subs	r3, r3, r5
 800dd58:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd5c:	8933      	ldrh	r3, [r6, #8]
 800dd5e:	4413      	add	r3, r2
 800dd60:	f8a9 3000 	strh.w	r3, [r9]
    tcp_seg_free(next);
 800dd64:	f7ff f862 	bl	800ce2c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800dd68:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d0c2      	beq.n	800dcf6 <tcp_free_acked_segments.isra.0+0x12>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dd70:	2c00      	cmp	r4, #0
 800dd72:	d1c2      	bne.n	800dcfa <tcp_free_acked_segments.isra.0+0x16>
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	b933      	cbnz	r3, 800dd86 <tcp_free_acked_segments.isra.0+0xa2>
 800dd78:	4b05      	ldr	r3, [pc, #20]	@ (800dd90 <tcp_free_acked_segments.isra.0+0xac>)
 800dd7a:	f240 426e 	movw	r2, #1134	@ 0x46e
 800dd7e:	4907      	ldr	r1, [pc, #28]	@ (800dd9c <tcp_free_acked_segments.isra.0+0xb8>)
 800dd80:	4805      	ldr	r0, [pc, #20]	@ (800dd98 <tcp_free_acked_segments.isra.0+0xb4>)
 800dd82:	f007 ff03 	bl	8015b8c <iprintf>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800dd86:	2600      	movs	r6, #0
}
 800dd88:	4630      	mov	r0, r6
 800dd8a:	b003      	add	sp, #12
 800dd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd90:	08017d7f 	.word	0x08017d7f
 800dd94:	08017db9 	.word	0x08017db9
 800dd98:	080169d3 	.word	0x080169d3
 800dd9c:	08017de1 	.word	0x08017de1
 800dda0:	20010f8c 	.word	0x20010f8c
 800dda4:	20010f88 	.word	0x20010f88

0800dda8 <tcp_receive>:
{
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ddac:	7d03      	ldrb	r3, [r0, #20]
{
 800ddae:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ddb0:	2b03      	cmp	r3, #3
 800ddb2:	d806      	bhi.n	800ddc2 <tcp_receive+0x1a>
 800ddb4:	4b33      	ldr	r3, [pc, #204]	@ (800de84 <tcp_receive+0xdc>)
 800ddb6:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 800ddba:	4933      	ldr	r1, [pc, #204]	@ (800de88 <tcp_receive+0xe0>)
 800ddbc:	4833      	ldr	r0, [pc, #204]	@ (800de8c <tcp_receive+0xe4>)
 800ddbe:	f007 fee5 	bl	8015b8c <iprintf>
  if (flags & TCP_ACK) {
 800ddc2:	4b33      	ldr	r3, [pc, #204]	@ (800de90 <tcp_receive+0xe8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ddc4:	4e33      	ldr	r6, [pc, #204]	@ (800de94 <tcp_receive+0xec>)
  if (flags & TCP_ACK) {
 800ddc6:	781b      	ldrb	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ddc8:	6832      	ldr	r2, [r6, #0]
  if (flags & TCP_ACK) {
 800ddca:	f013 0f10 	tst.w	r3, #16
 800ddce:	4d32      	ldr	r5, [pc, #200]	@ (800de98 <tcp_receive+0xf0>)
 800ddd0:	f000 8093 	beq.w	800defa <tcp_receive+0x152>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddd4:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800dea0 <tcp_receive+0xf8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ddd8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dddc:	f8d9 3000 	ldr.w	r3, [r9]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dde0:	e9d4 0c15 	ldrd	r0, ip, [r4, #84]	@ 0x54
 800dde4:	eba0 0e02 	sub.w	lr, r0, r2
 800dde8:	f1be 0f00 	cmp.w	lr, #0
 800ddec:	db0c      	blt.n	800de08 <tcp_receive+0x60>
 800ddee:	4290      	cmp	r0, r2
 800ddf0:	d103      	bne.n	800ddfa <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddf2:	ebac 0003 	sub.w	r0, ip, r3
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	db06      	blt.n	800de08 <tcp_receive+0x60>
 800ddfa:	459c      	cmp	ip, r3
 800ddfc:	d113      	bne.n	800de26 <tcp_receive+0x7e>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ddfe:	4827      	ldr	r0, [pc, #156]	@ (800de9c <tcp_receive+0xf4>)
 800de00:	6800      	ldr	r0, [r0, #0]
 800de02:	89c0      	ldrh	r0, [r0, #14]
 800de04:	4288      	cmp	r0, r1
 800de06:	d90e      	bls.n	800de26 <tcp_receive+0x7e>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800de08:	4824      	ldr	r0, [pc, #144]	@ (800de9c <tcp_receive+0xf4>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800de0a:	f8b4 8062 	ldrh.w	r8, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800de0e:	6800      	ldr	r0, [r0, #0]
 800de10:	89c0      	ldrh	r0, [r0, #14]
 800de12:	fa1f fe80 	uxth.w	lr, r0
 800de16:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800de1a:	45f0      	cmp	r8, lr
      pcb->snd_wl2 = ackno;
 800de1c:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800de20:	bf38      	it	cc
 800de22:	f8a4 0062 	strhcc.w	r0, [r4, #98]	@ 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800de26:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800de28:	1ad0      	subs	r0, r2, r3
 800de2a:	2800      	cmp	r0, #0
 800de2c:	f2c0 814b 	blt.w	800e0c6 <tcp_receive+0x31e>
      if (tcplen == 0) {
 800de30:	8828      	ldrh	r0, [r5, #0]
 800de32:	2800      	cmp	r0, #0
 800de34:	d137      	bne.n	800dea6 <tcp_receive+0xfe>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800de36:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800de3a:	4461      	add	r1, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800de3c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800de3e:	4438      	add	r0, r7
 800de40:	4288      	cmp	r0, r1
 800de42:	d130      	bne.n	800dea6 <tcp_receive+0xfe>
          if (pcb->rtime >= 0) {
 800de44:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	@ 0x30
 800de48:	2900      	cmp	r1, #0
 800de4a:	db2c      	blt.n	800dea6 <tcp_receive+0xfe>
            if (pcb->lastack == ackno) {
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d12a      	bne.n	800dea6 <tcp_receive+0xfe>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800de50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de54:	2bff      	cmp	r3, #255	@ 0xff
                ++pcb->dupacks;
 800de56:	bf1c      	itt	ne
 800de58:	3301      	addne	r3, #1
 800de5a:	f884 3043 	strbne.w	r3, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800de5e:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de62:	2b03      	cmp	r3, #3
 800de64:	d91e      	bls.n	800dea4 <tcp_receive+0xfc>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800de66:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800de6a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800de6c:	4413      	add	r3, r2
 800de6e:	b29b      	uxth	r3, r3
 800de70:	429a      	cmp	r2, r3
 800de72:	bf88      	it	hi
 800de74:	f64f 73ff 	movwhi	r3, #65535	@ 0xffff
 800de78:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800de7c:	4620      	mov	r0, r4
 800de7e:	f001 fdf1 	bl	800fa64 <tcp_rexmit_fast>
 800de82:	e010      	b.n	800dea6 <tcp_receive+0xfe>
 800de84:	08017d7f 	.word	0x08017d7f
 800de88:	08017e01 	.word	0x08017e01
 800de8c:	080169d3 	.word	0x080169d3
 800de90:	20010f85 	.word	0x20010f85
 800de94:	20010f90 	.word	0x20010f90
 800de98:	20010f86 	.word	0x20010f86
 800de9c:	20010fa0 	.word	0x20010fa0
 800dea0:	20010f8c 	.word	0x20010f8c
              if (pcb->dupacks >= 3) {
 800dea4:	d0ea      	beq.n	800de7c <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dea6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dea8:	b33b      	cbz	r3, 800defa <tcp_receive+0x152>
 800deaa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800deac:	f8d9 1000 	ldr.w	r1, [r9]
 800deb0:	1a52      	subs	r2, r2, r1
 800deb2:	2a00      	cmp	r2, #0
 800deb4:	da21      	bge.n	800defa <tcp_receive+0x152>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800deb6:	4aa5      	ldr	r2, [pc, #660]	@ (800e14c <tcp_receive+0x3a4>)
 800deb8:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800deba:	f9b4 c03c 	ldrsh.w	ip, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800debe:	8817      	ldrh	r7, [r2, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800dec0:	f3cc 01cf 	ubfx	r1, ip, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dec4:	1afa      	subs	r2, r7, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800dec6:	1a52      	subs	r2, r2, r1
 800dec8:	b210      	sxth	r0, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800deca:	fa1c f282 	uxtah	r2, ip, r2
      if (m < 0) {
 800dece:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800ded0:	b212      	sxth	r2, r2
        m = (s16_t) - m;
 800ded2:	bfb8      	it	lt
 800ded4:	1bdb      	sublt	r3, r3, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800ded6:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        m = (s16_t) - m;
 800ded8:	bfb8      	it	lt
 800deda:	18c9      	addlt	r1, r1, r3
      m = (s16_t)(m - (pcb->sv >> 2));
 800dedc:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
        m = (s16_t) - m;
 800dee0:	bfb8      	it	lt
 800dee2:	b208      	sxthlt	r0, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800dee4:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 800dee8:	4403      	add	r3, r0
 800deea:	b29b      	uxth	r3, r3
 800deec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800deee:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800def2:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	6363      	str	r3, [r4, #52]	@ 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800defa:	8828      	ldrh	r0, [r5, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800defc:	6832      	ldr	r2, [r6, #0]
 800defe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800df00:	2800      	cmp	r0, #0
 800df02:	f000 819f 	beq.w	800e244 <tcp_receive+0x49c>
 800df06:	7d21      	ldrb	r1, [r4, #20]
 800df08:	2906      	cmp	r1, #6
 800df0a:	f200 819b 	bhi.w	800e244 <tcp_receive+0x49c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800df0e:	1a9f      	subs	r7, r3, r2
 800df10:	2f01      	cmp	r7, #1
 800df12:	f100 8185 	bmi.w	800e220 <tcp_receive+0x478>
 800df16:	1e51      	subs	r1, r2, #1
 800df18:	4401      	add	r1, r0
 800df1a:	1ac9      	subs	r1, r1, r3
 800df1c:	2900      	cmp	r1, #0
 800df1e:	f2c0 817f 	blt.w	800e220 <tcp_receive+0x478>
      struct pbuf *p = inseg.p;
 800df22:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 800e164 <tcp_receive+0x3bc>
 800df26:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800df2a:	f1b8 0f00 	cmp.w	r8, #0
 800df2e:	d106      	bne.n	800df3e <tcp_receive+0x196>
 800df30:	4b87      	ldr	r3, [pc, #540]	@ (800e150 <tcp_receive+0x3a8>)
 800df32:	f240 529a 	movw	r2, #1434	@ 0x59a
 800df36:	4987      	ldr	r1, [pc, #540]	@ (800e154 <tcp_receive+0x3ac>)
 800df38:	4887      	ldr	r0, [pc, #540]	@ (800e158 <tcp_receive+0x3b0>)
 800df3a:	f007 fe27 	bl	8015b8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800df3e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800df42:	429f      	cmp	r7, r3
 800df44:	d906      	bls.n	800df54 <tcp_receive+0x1ac>
 800df46:	4b82      	ldr	r3, [pc, #520]	@ (800e150 <tcp_receive+0x3a8>)
 800df48:	f240 529b 	movw	r2, #1435	@ 0x59b
 800df4c:	4983      	ldr	r1, [pc, #524]	@ (800e15c <tcp_receive+0x3b4>)
 800df4e:	4882      	ldr	r0, [pc, #520]	@ (800e158 <tcp_receive+0x3b0>)
 800df50:	f007 fe1c 	bl	8015b8c <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df54:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800df58:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df5a:	891b      	ldrh	r3, [r3, #8]
 800df5c:	42bb      	cmp	r3, r7
 800df5e:	d206      	bcs.n	800df6e <tcp_receive+0x1c6>
 800df60:	4b7b      	ldr	r3, [pc, #492]	@ (800e150 <tcp_receive+0x3a8>)
 800df62:	f240 529d 	movw	r2, #1437	@ 0x59d
 800df66:	497e      	ldr	r1, [pc, #504]	@ (800e160 <tcp_receive+0x3b8>)
 800df68:	487b      	ldr	r0, [pc, #492]	@ (800e158 <tcp_receive+0x3b0>)
 800df6a:	f007 fe0f 	bl	8015b8c <iprintf>
      inseg.len -= off;
 800df6e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
        p->len = 0;
 800df72:	2100      	movs	r1, #0
      inseg.len -= off;
 800df74:	1bdb      	subs	r3, r3, r7
 800df76:	f8a9 3008 	strh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800df7e:	891b      	ldrh	r3, [r3, #8]
 800df80:	1bdb      	subs	r3, r3, r7
 800df82:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800df84:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800df88:	42ba      	cmp	r2, r7
 800df8a:	f0c0 8140 	bcc.w	800e20e <tcp_receive+0x466>
      pbuf_remove_header(p, off);
 800df8e:	4639      	mov	r1, r7
 800df90:	4640      	mov	r0, r8
 800df92:	f7fe faf1 	bl	800c578 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800df96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800df98:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800df9c:	6033      	str	r3, [r6, #0]
 800df9e:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dfa0:	6832      	ldr	r2, [r6, #0]
 800dfa2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dfa4:	1ad1      	subs	r1, r2, r3
 800dfa6:	2900      	cmp	r1, #0
 800dfa8:	f2c0 8147 	blt.w	800e23a <tcp_receive+0x492>
 800dfac:	1a99      	subs	r1, r3, r2
 800dfae:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800dfb0:	3901      	subs	r1, #1
 800dfb2:	42c1      	cmn	r1, r0
 800dfb4:	f100 8141 	bmi.w	800e23a <tcp_receive+0x492>
      if (pcb->rcv_nxt == seqno) {
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	f040 813e 	bne.w	800e23a <tcp_receive+0x492>
        tcplen = TCP_TCPLEN(&inseg);
 800dfbe:	4f69      	ldr	r7, [pc, #420]	@ (800e164 <tcp_receive+0x3bc>)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 800dfc6:	8998      	ldrh	r0, [r3, #12]
 800dfc8:	f7fd fdaa 	bl	800bb20 <lwip_htons>
 800dfcc:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800dfd0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800dfd2:	bf18      	it	ne
 800dfd4:	2001      	movne	r0, #1
 800dfd6:	eb08 0300 	add.w	r3, r8, r0
 800dfda:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800dfdc:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800dfde:	802b      	strh	r3, [r5, #0]
        if (tcplen > pcb->rcv_wnd) {
 800dfe0:	d241      	bcs.n	800e066 <tcp_receive+0x2be>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	8998      	ldrh	r0, [r3, #12]
 800dfe6:	f7fd fd9b 	bl	800bb20 <lwip_htons>
 800dfea:	07c3      	lsls	r3, r0, #31
 800dfec:	d50f      	bpl.n	800e00e <tcp_receive+0x266>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800dff4:	4640      	mov	r0, r8
 800dff6:	f428 587c 	bic.w	r8, r8, #16128	@ 0x3f00
 800dffa:	f7fd fd91 	bl	800bb20 <lwip_htons>
 800dffe:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800e002:	f7fd fd8d 	bl	800bb20 <lwip_htons>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	ea40 0008 	orr.w	r0, r0, r8
 800e00c:	8198      	strh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e00e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800e010:	813b      	strh	r3, [r7, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8998      	ldrh	r0, [r3, #12]
 800e016:	f7fd fd83 	bl	800bb20 <lwip_htons>
 800e01a:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800e01c:	6878      	ldr	r0, [r7, #4]
            inseg.len -= 1;
 800e01e:	bf42      	ittt	mi
 800e020:	893b      	ldrhmi	r3, [r7, #8]
 800e022:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e026:	813b      	strhmi	r3, [r7, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800e028:	8939      	ldrh	r1, [r7, #8]
 800e02a:	f7fe fbb3 	bl	800c794 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 800e034:	8998      	ldrh	r0, [r3, #12]
 800e036:	f7fd fd73 	bl	800bb20 <lwip_htons>
 800e03a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800e03e:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800e040:	bf18      	it	ne
 800e042:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800e044:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800e046:	eb08 0300 	add.w	r3, r8, r0
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	802b      	strh	r3, [r5, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800e04e:	4413      	add	r3, r2
 800e050:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e052:	440a      	add	r2, r1
 800e054:	4293      	cmp	r3, r2
 800e056:	d006      	beq.n	800e066 <tcp_receive+0x2be>
 800e058:	4b3d      	ldr	r3, [pc, #244]	@ (800e150 <tcp_receive+0x3a8>)
 800e05a:	f240 52d1 	movw	r2, #1489	@ 0x5d1
 800e05e:	4942      	ldr	r1, [pc, #264]	@ (800e168 <tcp_receive+0x3c0>)
 800e060:	483d      	ldr	r0, [pc, #244]	@ (800e158 <tcp_receive+0x3b0>)
 800e062:	f007 fd93 	bl	8015b8c <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800e066:	882a      	ldrh	r2, [r5, #0]
 800e068:	6833      	ldr	r3, [r6, #0]
 800e06a:	4413      	add	r3, r2
 800e06c:	6263      	str	r3, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800e06e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800e070:	4293      	cmp	r3, r2
 800e072:	d206      	bcs.n	800e082 <tcp_receive+0x2da>
 800e074:	4b36      	ldr	r3, [pc, #216]	@ (800e150 <tcp_receive+0x3a8>)
 800e076:	f240 620d 	movw	r2, #1549	@ 0x60d
 800e07a:	493c      	ldr	r1, [pc, #240]	@ (800e16c <tcp_receive+0x3c4>)
 800e07c:	4836      	ldr	r0, [pc, #216]	@ (800e158 <tcp_receive+0x3b0>)
 800e07e:	f007 fd85 	bl	8015b8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e082:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800e084:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800e086:	882a      	ldrh	r2, [r5, #0]
 800e088:	1a9b      	subs	r3, r3, r2
 800e08a:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800e08c:	f7fe fe68 	bl	800cd60 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	891a      	ldrh	r2, [r3, #8]
 800e094:	b11a      	cbz	r2, 800e09e <tcp_receive+0x2f6>
          recv_data = inseg.p;
 800e096:	4a36      	ldr	r2, [pc, #216]	@ (800e170 <tcp_receive+0x3c8>)
 800e098:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	607b      	str	r3, [r7, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	8998      	ldrh	r0, [r3, #12]
 800e0a2:	f7fd fd3d 	bl	800bb20 <lwip_htons>
 800e0a6:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800e0a8:	bf41      	itttt	mi
 800e0aa:	4a32      	ldrmi	r2, [pc, #200]	@ (800e174 <tcp_receive+0x3cc>)
 800e0ac:	7813      	ldrbmi	r3, [r2, #0]
 800e0ae:	f043 0320 	orrmi.w	r3, r3, #32
 800e0b2:	7013      	strbmi	r3, [r2, #0]
        tcp_ack(pcb);
 800e0b4:	8b63      	ldrh	r3, [r4, #26]
 800e0b6:	07da      	lsls	r2, r3, #31
 800e0b8:	f140 80ba 	bpl.w	800e230 <tcp_receive+0x488>
 800e0bc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800e0c0:	f043 0302 	orr.w	r3, r3, #2
 800e0c4:	e0b6      	b.n	800e234 <tcp_receive+0x48c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e0c6:	43d1      	mvns	r1, r2
 800e0c8:	42d9      	cmn	r1, r3
 800e0ca:	f100 809c 	bmi.w	800e206 <tcp_receive+0x45e>
 800e0ce:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800e0d0:	1ac9      	subs	r1, r1, r3
 800e0d2:	2900      	cmp	r1, #0
 800e0d4:	f2c0 8097 	blt.w	800e206 <tcp_receive+0x45e>
      if (pcb->flags & TF_INFR) {
 800e0d8:	8b61      	ldrh	r1, [r4, #26]
 800e0da:	0748      	lsls	r0, r1, #29
 800e0dc:	d509      	bpl.n	800e0f2 <tcp_receive+0x34a>
        tcp_clear_flags(pcb, TF_INFR);
 800e0de:	f021 0104 	bic.w	r1, r1, #4
 800e0e2:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800e0e4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 800e0e8:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e0f2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800e0f6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800e0f8:	6463      	str	r3, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e0fa:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 800e0fe:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
      pcb->nrtx = 0;
 800e102:	2100      	movs	r1, #0
 800e104:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800e108:	7d21      	ldrb	r1, [r4, #20]
 800e10a:	2903      	cmp	r1, #3
 800e10c:	d93e      	bls.n	800e18c <tcp_receive+0x3e4>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e10e:	1a9b      	subs	r3, r3, r2
        if (pcb->cwnd < pcb->ssthresh) {
 800e110:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 800e114:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e118:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800e11a:	4291      	cmp	r1, r2
 800e11c:	d92c      	bls.n	800e178 <tcp_receive+0x3d0>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e11e:	8b61      	ldrh	r1, [r4, #26]
 800e120:	f411 6f00 	tst.w	r1, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e124:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e126:	bf0c      	ite	eq
 800e128:	2002      	moveq	r0, #2
 800e12a:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e12c:	fb11 f100 	smulbb	r1, r1, r0
 800e130:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800e132:	4299      	cmp	r1, r3
 800e134:	bf94      	ite	ls
 800e136:	1850      	addls	r0, r2, r1
 800e138:	18d0      	addhi	r0, r2, r3
 800e13a:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d901      	bls.n	800e144 <tcp_receive+0x39c>
          TCP_WND_INC(pcb->cwnd, increase);
 800e140:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e144:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800e148:	e020      	b.n	800e18c <tcp_receive+0x3e4>
 800e14a:	bf00      	nop
 800e14c:	20010f78 	.word	0x20010f78
 800e150:	08017d7f 	.word	0x08017d7f
 800e154:	08017e1a 	.word	0x08017e1a
 800e158:	080169d3 	.word	0x080169d3
 800e15c:	08017e2a 	.word	0x08017e2a
 800e160:	08017e39 	.word	0x08017e39
 800e164:	20010fa4 	.word	0x20010fa4
 800e168:	08017e49 	.word	0x08017e49
 800e16c:	08017e7f 	.word	0x08017e7f
 800e170:	20010f80 	.word	0x20010f80
 800e174:	20010f84 	.word	0x20010f84
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e178:	f8b4 106a 	ldrh.w	r1, [r4, #106]	@ 0x6a
 800e17c:	440b      	add	r3, r1
 800e17e:	b29b      	uxth	r3, r3
 800e180:	4299      	cmp	r1, r3
 800e182:	d82c      	bhi.n	800e1de <tcp_receive+0x436>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e184:	429a      	cmp	r2, r3
 800e186:	d92c      	bls.n	800e1e2 <tcp_receive+0x43a>
 800e188:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e18c:	4620      	mov	r0, r4
 800e18e:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800e192:	f7ff fda7 	bl	800dce4 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e196:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e198:	4602      	mov	r2, r0
 800e19a:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e19c:	4620      	mov	r0, r4
 800e19e:	f7ff fda1 	bl	800dce4 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800e1a2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e1a4:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800e1a6:	fab2 f382 	clz	r3, r2
 800e1aa:	095b      	lsrs	r3, r3, #5
 800e1ac:	425b      	negs	r3, r3
 800e1ae:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800e1b4:	b908      	cbnz	r0, 800e1ba <tcp_receive+0x412>
        pcb->unsent_oversize = 0;
 800e1b6:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e1ba:	4927      	ldr	r1, [pc, #156]	@ (800e258 <tcp_receive+0x4b0>)
 800e1bc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800e1c0:	8809      	ldrh	r1, [r1, #0]
 800e1c2:	440b      	add	r3, r1
 800e1c4:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800e1c8:	8b63      	ldrh	r3, [r4, #26]
 800e1ca:	0519      	lsls	r1, r3, #20
 800e1cc:	f57f ae6b 	bpl.w	800dea6 <tcp_receive+0xfe>
        if (pcb->unacked == NULL) {
 800e1d0:	b9ba      	cbnz	r2, 800e202 <tcp_receive+0x45a>
          if ((pcb->unsent == NULL) ||
 800e1d2:	b968      	cbnz	r0, 800e1f0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e1d4:	8b63      	ldrh	r3, [r4, #26]
 800e1d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e1da:	8363      	strh	r3, [r4, #26]
 800e1dc:	e663      	b.n	800dea6 <tcp_receive+0xfe>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e1de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e1e2:	1a9b      	subs	r3, r3, r2
 800e1e4:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e1e8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e1ea:	4413      	add	r3, r2
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	e7a5      	b.n	800e13c <tcp_receive+0x394>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e1f0:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e1f2:	6858      	ldr	r0, [r3, #4]
 800e1f4:	f7fd fc97 	bl	800bb26 <lwip_htonl>
 800e1f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e1fa:	1ac0      	subs	r0, r0, r3
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	dae9      	bge.n	800e1d4 <tcp_receive+0x42c>
 800e200:	e651      	b.n	800dea6 <tcp_receive+0xfe>
 800e202:	68d3      	ldr	r3, [r2, #12]
 800e204:	e7f5      	b.n	800e1f2 <tcp_receive+0x44a>
      tcp_send_empty_ack(pcb);
 800e206:	4620      	mov	r0, r4
 800e208:	f001 fc9a 	bl	800fb40 <tcp_send_empty_ack>
 800e20c:	e64b      	b.n	800dea6 <tcp_receive+0xfe>
        off -= p->len;
 800e20e:	1aba      	subs	r2, r7, r2
        p->tot_len = new_tot_len;
 800e210:	f8a8 3008 	strh.w	r3, [r8, #8]
        p->len = 0;
 800e214:	f8a8 100a 	strh.w	r1, [r8, #10]
        off -= p->len;
 800e218:	b297      	uxth	r7, r2
        p = p->next;
 800e21a:	f8d8 8000 	ldr.w	r8, [r8]
 800e21e:	e6b1      	b.n	800df84 <tcp_receive+0x1dc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e220:	1ad2      	subs	r2, r2, r3
 800e222:	2a00      	cmp	r2, #0
        tcp_ack_now(pcb);
 800e224:	bfbe      	ittt	lt
 800e226:	8b63      	ldrhlt	r3, [r4, #26]
 800e228:	f043 0302 	orrlt.w	r3, r3, #2
 800e22c:	8363      	strhlt	r3, [r4, #26]
 800e22e:	e6b7      	b.n	800dfa0 <tcp_receive+0x1f8>
        tcp_ack(pcb);
 800e230:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800e234:	8363      	strh	r3, [r4, #26]
}
 800e236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tcp_send_empty_ack(pcb);
 800e23a:	4620      	mov	r0, r4
}
 800e23c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        tcp_send_empty_ack(pcb);
 800e240:	f001 bc7e 	b.w	800fb40 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e244:	1ad1      	subs	r1, r2, r3
 800e246:	2900      	cmp	r1, #0
 800e248:	db04      	blt.n	800e254 <tcp_receive+0x4ac>
 800e24a:	1a9b      	subs	r3, r3, r2
 800e24c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e24e:	3b01      	subs	r3, #1
 800e250:	42d3      	cmn	r3, r2
 800e252:	d5f0      	bpl.n	800e236 <tcp_receive+0x48e>
      tcp_ack_now(pcb);
 800e254:	8b63      	ldrh	r3, [r4, #26]
 800e256:	e733      	b.n	800e0c0 <tcp_receive+0x318>
 800e258:	20010f88 	.word	0x20010f88

0800e25c <tcp_input>:
{
 800e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e260:	4605      	mov	r5, r0
{
 800e262:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e264:	b928      	cbnz	r0, 800e272 <tcp_input+0x16>
 800e266:	4b74      	ldr	r3, [pc, #464]	@ (800e438 <tcp_input+0x1dc>)
 800e268:	2283      	movs	r2, #131	@ 0x83
 800e26a:	4974      	ldr	r1, [pc, #464]	@ (800e43c <tcp_input+0x1e0>)
 800e26c:	4874      	ldr	r0, [pc, #464]	@ (800e440 <tcp_input+0x1e4>)
 800e26e:	f007 fc8d 	bl	8015b8c <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800e272:	686b      	ldr	r3, [r5, #4]
 800e274:	4e73      	ldr	r6, [pc, #460]	@ (800e444 <tcp_input+0x1e8>)
 800e276:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800e278:	896b      	ldrh	r3, [r5, #10]
 800e27a:	2b13      	cmp	r3, #19
 800e27c:	f240 80d6 	bls.w	800e42c <tcp_input+0x1d0>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e280:	f8df 81ec 	ldr.w	r8, [pc, #492]	@ 800e470 <tcp_input+0x214>
 800e284:	f8d8 1000 	ldr.w	r1, [r8]
 800e288:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800e28c:	f002 ff8b 	bl	80111a6 <ip4_addr_isbroadcast_u32>
 800e290:	4604      	mov	r4, r0
 800e292:	2800      	cmp	r0, #0
 800e294:	f040 80ca 	bne.w	800e42c <tcp_input+0x1d0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e298:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e29c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2a0:	2be0      	cmp	r3, #224	@ 0xe0
 800e2a2:	f000 80c3 	beq.w	800e42c <tcp_input+0x1d0>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e2a6:	6833      	ldr	r3, [r6, #0]
 800e2a8:	8998      	ldrh	r0, [r3, #12]
 800e2aa:	f7fd fc39 	bl	800bb20 <lwip_htons>
 800e2ae:	0a81      	lsrs	r1, r0, #10
 800e2b0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e2b4:	2913      	cmp	r1, #19
 800e2b6:	f240 80b9 	bls.w	800e42c <tcp_input+0x1d0>
 800e2ba:	892b      	ldrh	r3, [r5, #8]
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	f0c0 80b5 	bcc.w	800e42c <tcp_input+0x1d0>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e2c2:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800e2c6:	896a      	ldrh	r2, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e2c8:	4f5f      	ldr	r7, [pc, #380]	@ (800e448 <tcp_input+0x1ec>)
 800e2ca:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800e2cc:	f8df a1a4 	ldr.w	sl, [pc, #420]	@ 800e474 <tcp_input+0x218>
  if (p->len >= hdrlen_bytes) {
 800e2d0:	428a      	cmp	r2, r1
 800e2d2:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 800e478 <tcp_input+0x21c>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e2d6:	803b      	strh	r3, [r7, #0]
  tcphdr_opt2 = NULL;
 800e2d8:	f8ca 4000 	str.w	r4, [sl]
  if (p->len >= hdrlen_bytes) {
 800e2dc:	d364      	bcc.n	800e3a8 <tcp_input+0x14c>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e2de:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800e2e0:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e2e4:	f7fe f948 	bl	800c578 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e2e8:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e2ea:	f8df b190 	ldr.w	fp, [pc, #400]	@ 800e47c <tcp_input+0x220>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e2ee:	8820      	ldrh	r0, [r4, #0]
 800e2f0:	f7fd fc16 	bl	800bb20 <lwip_htons>
 800e2f4:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e2f6:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e2f8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800e480 <tcp_input+0x224>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e2fc:	8860      	ldrh	r0, [r4, #2]
 800e2fe:	f7fd fc0f 	bl	800bb20 <lwip_htons>
 800e302:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e304:	6834      	ldr	r4, [r6, #0]
 800e306:	6860      	ldr	r0, [r4, #4]
 800e308:	f7fd fc0d 	bl	800bb26 <lwip_htonl>
 800e30c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e30e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e310:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e314:	68a0      	ldr	r0, [r4, #8]
 800e316:	f7fd fc06 	bl	800bb26 <lwip_htonl>
 800e31a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e31c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e31e:	f8ca 0000 	str.w	r0, [sl]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e322:	89e0      	ldrh	r0, [r4, #14]
 800e324:	f7fd fbfc 	bl	800bb20 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800e328:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e32a:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800e32c:	8998      	ldrh	r0, [r3, #12]
 800e32e:	f7fd fbf7 	bl	800bb20 <lwip_htons>
 800e332:	4a46      	ldr	r2, [pc, #280]	@ (800e44c <tcp_input+0x1f0>)
 800e334:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e338:	0787      	lsls	r7, r0, #30
  flags = TCPH_FLAGS(tcphdr);
 800e33a:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len;
 800e33c:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e33e:	d16f      	bne.n	800e420 <tcp_input+0x1c4>
  tcplen = p->tot_len;
 800e340:	4b43      	ldr	r3, [pc, #268]	@ (800e450 <tcp_input+0x1f4>)
 800e342:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e344:	4f43      	ldr	r7, [pc, #268]	@ (800e454 <tcp_input+0x1f8>)
  prev = NULL;
 800e346:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e34a:	683c      	ldr	r4, [r7, #0]
 800e34c:	2c00      	cmp	r4, #0
 800e34e:	f040 8099 	bne.w	800e484 <tcp_input+0x228>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e352:	4b41      	ldr	r3, [pc, #260]	@ (800e458 <tcp_input+0x1fc>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e354:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800e440 <tcp_input+0x1e4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e358:	681c      	ldr	r4, [r3, #0]
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	f040 8129 	bne.w	800e5b2 <tcp_input+0x356>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e360:	4b3e      	ldr	r3, [pc, #248]	@ (800e45c <tcp_input+0x200>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e362:	f8d8 0004 	ldr.w	r0, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e366:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800e368:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 800e36a:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e36e:	4691      	mov	r9, r2
 800e370:	f1b9 0f00 	cmp.w	r9, #0
 800e374:	f040 8175 	bne.w	800e662 <tcp_input+0x406>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e378:	8988      	ldrh	r0, [r1, #12]
 800e37a:	f7fd fbd1 	bl	800bb20 <lwip_htons>
 800e37e:	0743      	lsls	r3, r0, #29
 800e380:	d454      	bmi.n	800e42c <tcp_input+0x1d0>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e382:	6833      	ldr	r3, [r6, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e384:	4a32      	ldr	r2, [pc, #200]	@ (800e450 <tcp_input+0x1f4>)
 800e386:	8818      	ldrh	r0, [r3, #0]
 800e388:	8811      	ldrh	r1, [r2, #0]
 800e38a:	f8db 2000 	ldr.w	r2, [fp]
 800e38e:	9002      	str	r0, [sp, #8]
 800e390:	885b      	ldrh	r3, [r3, #2]
 800e392:	440a      	add	r2, r1
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	4b32      	ldr	r3, [pc, #200]	@ (800e460 <tcp_input+0x204>)
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	3304      	adds	r3, #4
 800e39c:	f8da 1000 	ldr.w	r1, [sl]
 800e3a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e3a4:	f000 bcd4 	b.w	800ed50 <tcp_input+0xaf4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b92b      	cbnz	r3, 800e3b8 <tcp_input+0x15c>
 800e3ac:	4b22      	ldr	r3, [pc, #136]	@ (800e438 <tcp_input+0x1dc>)
 800e3ae:	22c2      	movs	r2, #194	@ 0xc2
 800e3b0:	492c      	ldr	r1, [pc, #176]	@ (800e464 <tcp_input+0x208>)
 800e3b2:	4823      	ldr	r0, [pc, #140]	@ (800e440 <tcp_input+0x1e4>)
 800e3b4:	f007 fbea 	bl	8015b8c <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800e3b8:	2114      	movs	r1, #20
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f7fe f8dc 	bl	800c578 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800e3c0:	896c      	ldrh	r4, [r5, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 800e3c2:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 800e3c4:	f8a9 4000 	strh.w	r4, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800e3c8:	4621      	mov	r1, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e3ca:	f8b7 9000 	ldrh.w	r9, [r7]
    pbuf_remove_header(p, tcphdr_opt1len);
 800e3ce:	f7fe f8d3 	bl	800c578 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800e3d2:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e3d4:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 800e3d8:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e3da:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800e3dc:	42bb      	cmp	r3, r7
 800e3de:	d325      	bcc.n	800e42c <tcp_input+0x1d0>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e3e0:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800e3e2:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e3e4:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 800e3e8:	f7fe f8c6 	bl	800c578 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e3ec:	892b      	ldrh	r3, [r5, #8]
 800e3ee:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3f0:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e3f2:	eba4 0409 	sub.w	r4, r4, r9
 800e3f6:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3f8:	b12b      	cbz	r3, 800e406 <tcp_input+0x1aa>
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e438 <tcp_input+0x1dc>)
 800e3fc:	22df      	movs	r2, #223	@ 0xdf
 800e3fe:	491a      	ldr	r1, [pc, #104]	@ (800e468 <tcp_input+0x20c>)
 800e400:	480f      	ldr	r0, [pc, #60]	@ (800e440 <tcp_input+0x1e4>)
 800e402:	f007 fbc3 	bl	8015b8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e406:	682b      	ldr	r3, [r5, #0]
 800e408:	892a      	ldrh	r2, [r5, #8]
 800e40a:	891b      	ldrh	r3, [r3, #8]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	f43f af6b 	beq.w	800e2e8 <tcp_input+0x8c>
 800e412:	4b09      	ldr	r3, [pc, #36]	@ (800e438 <tcp_input+0x1dc>)
 800e414:	22e0      	movs	r2, #224	@ 0xe0
 800e416:	4915      	ldr	r1, [pc, #84]	@ (800e46c <tcp_input+0x210>)
 800e418:	4809      	ldr	r0, [pc, #36]	@ (800e440 <tcp_input+0x1e4>)
 800e41a:	f007 fbb7 	bl	8015b8c <iprintf>
 800e41e:	e763      	b.n	800e2e8 <tcp_input+0x8c>
    tcplen++;
 800e420:	1c53      	adds	r3, r2, #1
 800e422:	490b      	ldr	r1, [pc, #44]	@ (800e450 <tcp_input+0x1f4>)
 800e424:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800e426:	429a      	cmp	r2, r3
    tcplen++;
 800e428:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800e42a:	d98b      	bls.n	800e344 <tcp_input+0xe8>
  pbuf_free(p);
 800e42c:	4628      	mov	r0, r5
}
 800e42e:	b005      	add	sp, #20
 800e430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800e434:	f7fe b8cc 	b.w	800c5d0 <pbuf_free>
 800e438:	08017d7f 	.word	0x08017d7f
 800e43c:	08017e9d 	.word	0x08017e9d
 800e440:	080169d3 	.word	0x080169d3
 800e444:	20010fa0 	.word	0x20010fa0
 800e448:	20010f9e 	.word	0x20010f9e
 800e44c:	20010f85 	.word	0x20010f85
 800e450:	20010f86 	.word	0x20010f86
 800e454:	20010f6c 	.word	0x20010f6c
 800e458:	20010f68 	.word	0x20010f68
 800e45c:	20010f70 	.word	0x20010f70
 800e460:	2000d178 	.word	0x2000d178
 800e464:	08017eb5 	.word	0x08017eb5
 800e468:	08017ec5 	.word	0x08017ec5
 800e46c:	08017ed1 	.word	0x08017ed1
 800e470:	2000d168 	.word	0x2000d168
 800e474:	20010f98 	.word	0x20010f98
 800e478:	20010f9c 	.word	0x20010f9c
 800e47c:	20010f90 	.word	0x20010f90
 800e480:	20010f8c 	.word	0x20010f8c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e484:	7d23      	ldrb	r3, [r4, #20]
 800e486:	b92b      	cbnz	r3, 800e494 <tcp_input+0x238>
 800e488:	4b8e      	ldr	r3, [pc, #568]	@ (800e6c4 <tcp_input+0x468>)
 800e48a:	22fb      	movs	r2, #251	@ 0xfb
 800e48c:	498e      	ldr	r1, [pc, #568]	@ (800e6c8 <tcp_input+0x46c>)
 800e48e:	488f      	ldr	r0, [pc, #572]	@ (800e6cc <tcp_input+0x470>)
 800e490:	f007 fb7c 	bl	8015b8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e494:	7d23      	ldrb	r3, [r4, #20]
 800e496:	2b0a      	cmp	r3, #10
 800e498:	d105      	bne.n	800e4a6 <tcp_input+0x24a>
 800e49a:	4b8a      	ldr	r3, [pc, #552]	@ (800e6c4 <tcp_input+0x468>)
 800e49c:	22fc      	movs	r2, #252	@ 0xfc
 800e49e:	498c      	ldr	r1, [pc, #560]	@ (800e6d0 <tcp_input+0x474>)
 800e4a0:	488a      	ldr	r0, [pc, #552]	@ (800e6cc <tcp_input+0x470>)
 800e4a2:	f007 fb73 	bl	8015b8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e4a6:	7d23      	ldrb	r3, [r4, #20]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d105      	bne.n	800e4b8 <tcp_input+0x25c>
 800e4ac:	4b85      	ldr	r3, [pc, #532]	@ (800e6c4 <tcp_input+0x468>)
 800e4ae:	22fd      	movs	r2, #253	@ 0xfd
 800e4b0:	4988      	ldr	r1, [pc, #544]	@ (800e6d4 <tcp_input+0x478>)
 800e4b2:	4886      	ldr	r0, [pc, #536]	@ (800e6cc <tcp_input+0x470>)
 800e4b4:	f007 fb6a 	bl	8015b8c <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4b8:	7a21      	ldrb	r1, [r4, #8]
 800e4ba:	68e2      	ldr	r2, [r4, #12]
 800e4bc:	b139      	cbz	r1, 800e4ce <tcp_input+0x272>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e4c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4c6:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	4299      	cmp	r1, r3
 800e4cc:	d16e      	bne.n	800e5ac <tcp_input+0x350>
    if (pcb->remote_port == tcphdr->src &&
 800e4ce:	6833      	ldr	r3, [r6, #0]
 800e4d0:	8b20      	ldrh	r0, [r4, #24]
 800e4d2:	8819      	ldrh	r1, [r3, #0]
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	d169      	bne.n	800e5ac <tcp_input+0x350>
 800e4d8:	8ae1      	ldrh	r1, [r4, #22]
 800e4da:	885b      	ldrh	r3, [r3, #2]
 800e4dc:	4299      	cmp	r1, r3
 800e4de:	d165      	bne.n	800e5ac <tcp_input+0x350>
        pcb->local_port == tcphdr->dest &&
 800e4e0:	6861      	ldr	r1, [r4, #4]
 800e4e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e4e6:	4299      	cmp	r1, r3
 800e4e8:	d160      	bne.n	800e5ac <tcp_input+0x350>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800e4ea:	6821      	ldr	r1, [r4, #0]
 800e4ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e4f0:	4299      	cmp	r1, r3
 800e4f2:	d15b      	bne.n	800e5ac <tcp_input+0x350>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e4f4:	42a2      	cmp	r2, r4
 800e4f6:	f040 8406 	bne.w	800ed06 <tcp_input+0xaaa>
 800e4fa:	4b72      	ldr	r3, [pc, #456]	@ (800e6c4 <tcp_input+0x468>)
 800e4fc:	f240 120d 	movw	r2, #269	@ 0x10d
 800e500:	4975      	ldr	r1, [pc, #468]	@ (800e6d8 <tcp_input+0x47c>)
 800e502:	4872      	ldr	r0, [pc, #456]	@ (800e6cc <tcp_input+0x470>)
 800e504:	f007 fb42 	bl	8015b8c <iprintf>
      if (prev != NULL) {
 800e508:	f1b9 0f00 	cmp.w	r9, #0
 800e50c:	d005      	beq.n	800e51a <tcp_input+0x2be>
        prev->next = pcb->next;
 800e50e:	68e3      	ldr	r3, [r4, #12]
 800e510:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800e514:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 800e516:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 800e518:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e51a:	68e3      	ldr	r3, [r4, #12]
 800e51c:	42a3      	cmp	r3, r4
 800e51e:	d106      	bne.n	800e52e <tcp_input+0x2d2>
 800e520:	4b68      	ldr	r3, [pc, #416]	@ (800e6c4 <tcp_input+0x468>)
 800e522:	f240 1215 	movw	r2, #277	@ 0x115
 800e526:	496d      	ldr	r1, [pc, #436]	@ (800e6dc <tcp_input+0x480>)
 800e528:	4868      	ldr	r0, [pc, #416]	@ (800e6cc <tcp_input+0x470>)
 800e52a:	f007 fb2f 	bl	8015b8c <iprintf>
    inseg.next = NULL;
 800e52e:	496c      	ldr	r1, [pc, #432]	@ (800e6e0 <tcp_input+0x484>)
 800e530:	2300      	movs	r3, #0
    inseg.len = p->tot_len;
 800e532:	892a      	ldrh	r2, [r5, #8]
    recv_data = NULL;
 800e534:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 800e700 <tcp_input+0x4a4>
    inseg.len = p->tot_len;
 800e538:	810a      	strh	r2, [r1, #8]
    inseg.tcphdr = tcphdr;
 800e53a:	6832      	ldr	r2, [r6, #0]
    recv_flags = 0;
 800e53c:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800e704 <tcp_input+0x4a8>
    inseg.tcphdr = tcphdr;
 800e540:	60ca      	str	r2, [r1, #12]
    recv_acked = 0;
 800e542:	4a68      	ldr	r2, [pc, #416]	@ (800e6e4 <tcp_input+0x488>)
    inseg.next = NULL;
 800e544:	600b      	str	r3, [r1, #0]
    recv_data = NULL;
 800e546:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 800e54a:	f888 3000 	strb.w	r3, [r8]
    recv_acked = 0;
 800e54e:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800e550:	4b65      	ldr	r3, [pc, #404]	@ (800e6e8 <tcp_input+0x48c>)
    inseg.p = p;
 800e552:	604d      	str	r5, [r1, #4]
    if (flags & TCP_PSH) {
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	071b      	lsls	r3, r3, #28
      p->flags |= PBUF_FLAG_PUSH;
 800e558:	bf42      	ittt	mi
 800e55a:	7b6b      	ldrbmi	r3, [r5, #13]
 800e55c:	f043 0301 	orrmi.w	r3, r3, #1
 800e560:	736b      	strbmi	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800e562:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e564:	4d61      	ldr	r5, [pc, #388]	@ (800e6ec <tcp_input+0x490>)
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8130 	beq.w	800e7cc <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e56c:	4620      	mov	r0, r4
 800e56e:	f7ff f83f 	bl	800d5f0 <tcp_process_refused_data>
 800e572:	300d      	adds	r0, #13
 800e574:	d008      	beq.n	800e588 <tcp_input+0x32c>
 800e576:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 8127 	beq.w	800e7cc <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e57e:	4b5c      	ldr	r3, [pc, #368]	@ (800e6f0 <tcp_input+0x494>)
 800e580:	881b      	ldrh	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 8122 	beq.w	800e7cc <tcp_input+0x570>
        if (pcb->rcv_ann_wnd == 0) {
 800e588:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e58a:	b913      	cbnz	r3, 800e592 <tcp_input+0x336>
          tcp_send_empty_ack(pcb);
 800e58c:	4620      	mov	r0, r4
 800e58e:	f001 fad7 	bl	800fb40 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800e592:	2400      	movs	r4, #0
 800e594:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL) {
 800e596:	4d52      	ldr	r5, [pc, #328]	@ (800e6e0 <tcp_input+0x484>)
    recv_data = NULL;
 800e598:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 800e59c:	6868      	ldr	r0, [r5, #4]
 800e59e:	b110      	cbz	r0, 800e5a6 <tcp_input+0x34a>
      pbuf_free(inseg.p);
 800e5a0:	f7fe f816 	bl	800c5d0 <pbuf_free>
      inseg.p = NULL;
 800e5a4:	606c      	str	r4, [r5, #4]
}
 800e5a6:	b005      	add	sp, #20
 800e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5ac:	46a1      	mov	r9, r4
 800e5ae:	4614      	mov	r4, r2
 800e5b0:	e6cc      	b.n	800e34c <tcp_input+0xf0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5b2:	7d23      	ldrb	r3, [r4, #20]
 800e5b4:	2b0a      	cmp	r3, #10
 800e5b6:	d006      	beq.n	800e5c6 <tcp_input+0x36a>
 800e5b8:	4b42      	ldr	r3, [pc, #264]	@ (800e6c4 <tcp_input+0x468>)
 800e5ba:	f240 121f 	movw	r2, #287	@ 0x11f
 800e5be:	494d      	ldr	r1, [pc, #308]	@ (800e6f4 <tcp_input+0x498>)
 800e5c0:	4648      	mov	r0, r9
 800e5c2:	f007 fae3 	bl	8015b8c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5c6:	7a22      	ldrb	r2, [r4, #8]
 800e5c8:	b13a      	cbz	r2, 800e5da <tcp_input+0x37e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e5d2:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d141      	bne.n	800e65e <tcp_input+0x402>
      if (pcb->remote_port == tcphdr->src &&
 800e5da:	6833      	ldr	r3, [r6, #0]
 800e5dc:	8b21      	ldrh	r1, [r4, #24]
 800e5de:	881a      	ldrh	r2, [r3, #0]
 800e5e0:	4291      	cmp	r1, r2
 800e5e2:	d13c      	bne.n	800e65e <tcp_input+0x402>
          pcb->local_port == tcphdr->dest &&
 800e5e4:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800e5e6:	8ae3      	ldrh	r3, [r4, #22]
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d138      	bne.n	800e65e <tcp_input+0x402>
          pcb->local_port == tcphdr->dest &&
 800e5ec:	6860      	ldr	r0, [r4, #4]
 800e5ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e5f2:	4290      	cmp	r0, r2
 800e5f4:	d133      	bne.n	800e65e <tcp_input+0x402>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800e5f6:	6820      	ldr	r0, [r4, #0]
 800e5f8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800e5fc:	4290      	cmp	r0, r2
 800e5fe:	d12e      	bne.n	800e65e <tcp_input+0x402>
  if (flags & TCP_RST) {
 800e600:	4a39      	ldr	r2, [pc, #228]	@ (800e6e8 <tcp_input+0x48c>)
 800e602:	7810      	ldrb	r0, [r2, #0]
 800e604:	0746      	lsls	r6, r0, #29
 800e606:	f53f af11 	bmi.w	800e42c <tcp_input+0x1d0>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e60a:	4a39      	ldr	r2, [pc, #228]	@ (800e6f0 <tcp_input+0x494>)
 800e60c:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800e60e:	0782      	lsls	r2, r0, #30
 800e610:	d515      	bpl.n	800e63e <tcp_input+0x3e2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e612:	f8db 2000 	ldr.w	r2, [fp]
 800e616:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e618:	1a17      	subs	r7, r2, r0
 800e61a:	2f00      	cmp	r7, #0
 800e61c:	db14      	blt.n	800e648 <tcp_input+0x3ec>
 800e61e:	8d27      	ldrh	r7, [r4, #40]	@ 0x28
 800e620:	1a80      	subs	r0, r0, r2
 800e622:	42c7      	cmn	r7, r0
 800e624:	d410      	bmi.n	800e648 <tcp_input+0x3ec>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e626:	4432      	add	r2, r6
 800e628:	4620      	mov	r0, r4
 800e62a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e62e:	4b32      	ldr	r3, [pc, #200]	@ (800e6f8 <tcp_input+0x49c>)
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	3304      	adds	r3, #4
 800e634:	f8da 1000 	ldr.w	r1, [sl]
 800e638:	f001 fa48 	bl	800facc <tcp_rst>
      return;
 800e63c:	e6f6      	b.n	800e42c <tcp_input+0x1d0>
  } else if (flags & TCP_FIN) {
 800e63e:	07c7      	lsls	r7, r0, #31
    pcb->tmr = tcp_ticks;
 800e640:	bf42      	ittt	mi
 800e642:	4b2e      	ldrmi	r3, [pc, #184]	@ (800e6fc <tcp_input+0x4a0>)
 800e644:	681b      	ldrmi	r3, [r3, #0]
 800e646:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800e648:	2e00      	cmp	r6, #0
 800e64a:	f43f aeef 	beq.w	800e42c <tcp_input+0x1d0>
    tcp_ack_now(pcb);
 800e64e:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 800e650:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800e652:	f043 0302 	orr.w	r3, r3, #2
 800e656:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800e658:	f001 faa4 	bl	800fba4 <tcp_output>
        pbuf_free(p);
 800e65c:	e6e6      	b.n	800e42c <tcp_input+0x1d0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e65e:	68e4      	ldr	r4, [r4, #12]
 800e660:	e67b      	b.n	800e35a <tcp_input+0xfe>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e662:	f899 c008 	ldrb.w	ip, [r9, #8]
 800e666:	f1bc 0f00 	cmp.w	ip, #0
 800e66a:	d005      	beq.n	800e678 <tcp_input+0x41c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e66c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800e670:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e672:	b2db      	uxtb	r3, r3
 800e674:	459c      	cmp	ip, r3
 800e676:	d10c      	bne.n	800e692 <tcp_input+0x436>
      if (lpcb->local_port == tcphdr->dest) {
 800e678:	f8b9 c016 	ldrh.w	ip, [r9, #22]
 800e67c:	884b      	ldrh	r3, [r1, #2]
 800e67e:	459c      	cmp	ip, r3
 800e680:	d107      	bne.n	800e692 <tcp_input+0x436>
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 800e682:	f8d9 3000 	ldr.w	r3, [r9]
 800e686:	4573      	cmp	r3, lr
 800e688:	f000 8342 	beq.w	800ed10 <tcp_input+0xab4>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 833f 	beq.w	800ed10 <tcp_input+0xab4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e692:	464c      	mov	r4, r9
 800e694:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800e698:	e66a      	b.n	800e370 <tcp_input+0x114>
  } else if (flags & TCP_SYN) {
 800e69a:	079a      	lsls	r2, r3, #30
 800e69c:	f57f aec6 	bpl.w	800e42c <tcp_input+0x1d0>
    npcb = tcp_alloc(pcb->prio);
 800e6a0:	f899 0015 	ldrb.w	r0, [r9, #21]
 800e6a4:	f7ff f924 	bl	800d8f0 <tcp_alloc>
    if (npcb == NULL) {
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	bb68      	cbnz	r0, 800e708 <tcp_input+0x4ac>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6ac:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f43f aebb 	beq.w	800e42c <tcp_input+0x1d0>
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e6bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6c0:	4798      	blx	r3
 800e6c2:	e6b3      	b.n	800e42c <tcp_input+0x1d0>
 800e6c4:	08017d7f 	.word	0x08017d7f
 800e6c8:	08017ef0 	.word	0x08017ef0
 800e6cc:	080169d3 	.word	0x080169d3
 800e6d0:	08017f17 	.word	0x08017f17
 800e6d4:	08017f41 	.word	0x08017f41
 800e6d8:	08017f68 	.word	0x08017f68
 800e6dc:	08017f93 	.word	0x08017f93
 800e6e0:	20010fa4 	.word	0x20010fa4
 800e6e4:	20010f88 	.word	0x20010f88
 800e6e8:	20010f85 	.word	0x20010f85
 800e6ec:	20010f7c 	.word	0x20010f7c
 800e6f0:	20010f86 	.word	0x20010f86
 800e6f4:	08017fbd 	.word	0x08017fbd
 800e6f8:	2000d178 	.word	0x2000d178
 800e6fc:	20010f78 	.word	0x20010f78
 800e700:	20010f80 	.word	0x20010f80
 800e704:	20010f84 	.word	0x20010f84
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e708:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800e70c:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e70e:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e710:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e714:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800e716:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800e71a:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800e71c:	7813      	ldrb	r3, [r2, #0]
 800e71e:	7852      	ldrb	r2, [r2, #1]
 800e720:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e724:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800e726:	2303      	movs	r3, #3
 800e728:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800e72a:	f8db 3000 	ldr.w	r3, [fp]
 800e72e:	3301      	adds	r3, #1
 800e730:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e732:	62c3      	str	r3, [r0, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e734:	f7ff f97a 	bl	800da2c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e738:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800e73c:	f8ca 0058 	str.w	r0, [sl, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e740:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800e742:	f8ca 0050 	str.w	r0, [sl, #80]	@ 0x50
    npcb->lastack = iss;
 800e746:	f8ca 0044 	str.w	r0, [sl, #68]	@ 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e74a:	f8ca 3054 	str.w	r3, [sl, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e74e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 800e752:	f8ca 005c 	str.w	r0, [sl, #92]	@ 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800e756:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 800e75a:	f8ca 9078 	str.w	r9, [sl, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e75e:	f899 3009 	ldrb.w	r3, [r9, #9]
 800e762:	f003 030c 	and.w	r3, r3, #12
 800e766:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e76a:	f899 3008 	ldrb.w	r3, [r9, #8]
 800e76e:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	f8c7 a000 	str.w	sl, [r7]
 800e778:	f8ca 300c 	str.w	r3, [sl, #12]
 800e77c:	f001 fce6 	bl	801014c <tcp_timer_needed>
 800e780:	2201      	movs	r2, #1
 800e782:	4ba2      	ldr	r3, [pc, #648]	@ (800ea0c <tcp_input+0x7b0>)
    tcp_parseopt(npcb);
 800e784:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 800e786:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e788:	f7ff fa44 	bl	800dc14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e78c:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e78e:	f10a 0604 	add.w	r6, sl, #4
 800e792:	f8ba 7032 	ldrh.w	r7, [sl, #50]	@ 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800e796:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e798:	4630      	mov	r0, r6
    npcb->snd_wnd = tcphdr->wnd;
 800e79a:	f8aa 3060 	strh.w	r3, [sl, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e79e:	f8aa 3062 	strh.w	r3, [sl, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e7a2:	f002 fb8f 	bl	8010ec4 <ip4_route>
 800e7a6:	4632      	mov	r2, r6
 800e7a8:	4601      	mov	r1, r0
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	f7ff f958 	bl	800da60 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e7b0:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e7b2:	f8aa 0032 	strh.w	r0, [sl, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e7b6:	4650      	mov	r0, sl
 800e7b8:	f001 f80c 	bl	800f7d4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800e7bc:	b120      	cbz	r0, 800e7c8 <tcp_input+0x56c>
      tcp_abandon(npcb, 0);
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4650      	mov	r0, sl
 800e7c2:	f7fe ffc9 	bl	800d758 <tcp_abandon>
      return;
 800e7c6:	e631      	b.n	800e42c <tcp_input+0x1d0>
    tcp_output(npcb);
 800e7c8:	4650      	mov	r0, sl
 800e7ca:	e745      	b.n	800e658 <tcp_input+0x3fc>
  if (flags & TCP_RST) {
 800e7cc:	4b90      	ldr	r3, [pc, #576]	@ (800ea10 <tcp_input+0x7b4>)
    tcp_input_pcb = pcb;
 800e7ce:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 800e7d0:	781a      	ldrb	r2, [r3, #0]
 800e7d2:	0750      	lsls	r0, r2, #29
 800e7d4:	d53d      	bpl.n	800e852 <tcp_input+0x5f6>
    if (pcb->state == SYN_SENT) {
 800e7d6:	7d21      	ldrb	r1, [r4, #20]
 800e7d8:	2902      	cmp	r1, #2
 800e7da:	d122      	bne.n	800e822 <tcp_input+0x5c6>
      if (ackno == pcb->snd_nxt) {
 800e7dc:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800e7de:	f8da 3000 	ldr.w	r3, [sl]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d109      	bne.n	800e7fa <tcp_input+0x59e>
      recv_flags |= TF_RESET;
 800e7e6:	f898 3000 	ldrb.w	r3, [r8]
 800e7ea:	f043 0308 	orr.w	r3, r3, #8
 800e7ee:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e7f2:	8b63      	ldrh	r3, [r4, #26]
 800e7f4:	f023 0301 	bic.w	r3, r3, #1
 800e7f8:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800e7fa:	f898 3000 	ldrb.w	r3, [r8]
 800e7fe:	0719      	lsls	r1, r3, #28
 800e800:	f140 8205 	bpl.w	800ec0e <tcp_input+0x9b2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e804:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800e808:	b11b      	cbz	r3, 800e812 <tcp_input+0x5b6>
 800e80a:	f06f 010d 	mvn.w	r1, #13
 800e80e:	6920      	ldr	r0, [r4, #16]
 800e810:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e812:	4621      	mov	r1, r4
 800e814:	487f      	ldr	r0, [pc, #508]	@ (800ea14 <tcp_input+0x7b8>)
 800e816:	f7fe fdb9 	bl	800d38c <tcp_pcb_remove>
        tcp_free(pcb);
 800e81a:	4620      	mov	r0, r4
 800e81c:	f7fe f9f0 	bl	800cc00 <tcp_free>
 800e820:	e6b7      	b.n	800e592 <tcp_input+0x336>
      if (seqno == pcb->rcv_nxt) {
 800e822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e824:	f8db 2000 	ldr.w	r2, [fp]
 800e828:	4293      	cmp	r3, r2
 800e82a:	d008      	beq.n	800e83e <tcp_input+0x5e2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e82c:	1ad1      	subs	r1, r2, r3
 800e82e:	2900      	cmp	r1, #0
 800e830:	dbe3      	blt.n	800e7fa <tcp_input+0x59e>
 800e832:	1a9b      	subs	r3, r3, r2
 800e834:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e836:	42d3      	cmn	r3, r2
 800e838:	d4df      	bmi.n	800e7fa <tcp_input+0x59e>
        tcp_ack_now(pcb);
 800e83a:	8b63      	ldrh	r3, [r4, #26]
 800e83c:	e010      	b.n	800e860 <tcp_input+0x604>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e83e:	2900      	cmp	r1, #0
 800e840:	d1d1      	bne.n	800e7e6 <tcp_input+0x58a>
 800e842:	4b75      	ldr	r3, [pc, #468]	@ (800ea18 <tcp_input+0x7bc>)
 800e844:	f240 323b 	movw	r2, #827	@ 0x33b
 800e848:	4974      	ldr	r1, [pc, #464]	@ (800ea1c <tcp_input+0x7c0>)
 800e84a:	4875      	ldr	r0, [pc, #468]	@ (800ea20 <tcp_input+0x7c4>)
 800e84c:	f007 f99e 	bl	8015b8c <iprintf>
 800e850:	e7c9      	b.n	800e7e6 <tcp_input+0x58a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e852:	0791      	lsls	r1, r2, #30
        tcp_ack_now(pcb);
 800e854:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e856:	d506      	bpl.n	800e866 <tcp_input+0x60a>
 800e858:	7d22      	ldrb	r2, [r4, #20]
 800e85a:	3a02      	subs	r2, #2
 800e85c:	2a01      	cmp	r2, #1
 800e85e:	d902      	bls.n	800e866 <tcp_input+0x60a>
        tcp_ack_now(pcb);
 800e860:	f043 0302 	orr.w	r3, r3, #2
 800e864:	e7c8      	b.n	800e7f8 <tcp_input+0x59c>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e866:	06da      	lsls	r2, r3, #27
  tcp_parseopt(pcb);
 800e868:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800e86a:	bf5e      	ittt	pl
 800e86c:	4b6d      	ldrpl	r3, [pc, #436]	@ (800ea24 <tcp_input+0x7c8>)
 800e86e:	681b      	ldrpl	r3, [r3, #0]
 800e870:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	f8a4 3096 	strh.w	r3, [r4, #150]	@ 0x96
  tcp_parseopt(pcb);
 800e878:	f7ff f9cc 	bl	800dc14 <tcp_parseopt>
  if (flags & TCP_SYN) {
 800e87c:	4b64      	ldr	r3, [pc, #400]	@ (800ea10 <tcp_input+0x7b4>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	f013 0102 	ands.w	r1, r3, #2
 800e884:	d003      	beq.n	800e88e <tcp_input+0x632>
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 800e886:	7d22      	ldrb	r2, [r4, #20]
 800e888:	3a02      	subs	r2, #2
 800e88a:	2a01      	cmp	r2, #1
 800e88c:	d8b5      	bhi.n	800e7fa <tcp_input+0x59e>
  switch (pcb->state) {
 800e88e:	7d22      	ldrb	r2, [r4, #20]
 800e890:	3a02      	subs	r2, #2
 800e892:	2a07      	cmp	r2, #7
 800e894:	d8b1      	bhi.n	800e7fa <tcp_input+0x59e>
 800e896:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e89a:	0008      	.short	0x0008
 800e89c:	011d0098 	.word	0x011d0098
 800e8a0:	01690121 	.word	0x01690121
 800e8a4:	0182011d 	.word	0x0182011d
 800e8a8:	01a1      	.short	0x01a1
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e8aa:	f003 0212 	and.w	r2, r3, #18
 800e8ae:	2a12      	cmp	r2, #18
 800e8b0:	d16b      	bne.n	800e98a <tcp_input+0x72e>
          && (ackno == pcb->lastack + 1)) {
 800e8b2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e8b4:	f8da 1000 	ldr.w	r1, [sl]
 800e8b8:	3201      	adds	r2, #1
 800e8ba:	428a      	cmp	r2, r1
 800e8bc:	d165      	bne.n	800e98a <tcp_input+0x72e>
        pcb->rcv_nxt = seqno + 1;
 800e8be:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 800e8c2:	6462      	str	r2, [r4, #68]	@ 0x44
        pcb->rcv_nxt = seqno + 1;
 800e8c4:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800e8c6:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e8c8:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8ca:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800e8cc:	6261      	str	r1, [r4, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e8ce:	62e1      	str	r1, [r4, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800e8d0:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e8d2:	6563      	str	r3, [r4, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e8d4:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800e8d6:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8da:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 800e8dc:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e8de:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f002 faee 	bl	8010ec4 <ip4_route>
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	4601      	mov	r1, r0
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	f7ff f8b7 	bl	800da60 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8f2:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e8f6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8f8:	8660      	strh	r0, [r4, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8fa:	0081      	lsls	r1, r0, #2
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	4616      	mov	r6, r2
 800e900:	bf38      	it	cc
 800e902:	461e      	movcc	r6, r3
 800e904:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800e908:	d933      	bls.n	800e972 <tcp_input+0x716>
 800e90a:	b28b      	uxth	r3, r1
 800e90c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e910:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800e914:	b933      	cbnz	r3, 800e924 <tcp_input+0x6c8>
 800e916:	4b40      	ldr	r3, [pc, #256]	@ (800ea18 <tcp_input+0x7bc>)
 800e918:	f240 3277 	movw	r2, #887	@ 0x377
 800e91c:	4942      	ldr	r1, [pc, #264]	@ (800ea28 <tcp_input+0x7cc>)
 800e91e:	4840      	ldr	r0, [pc, #256]	@ (800ea20 <tcp_input+0x7c4>)
 800e920:	f007 f934 	bl	8015b8c <iprintf>
        --pcb->snd_queuelen;
 800e924:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
        rseg = pcb->unacked;
 800e928:	6f26      	ldr	r6, [r4, #112]	@ 0x70
        --pcb->snd_queuelen;
 800e92a:	3b01      	subs	r3, #1
 800e92c:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
        if (rseg == NULL) {
 800e930:	bb1e      	cbnz	r6, 800e97a <tcp_input+0x71e>
          rseg = pcb->unsent;
 800e932:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e934:	b936      	cbnz	r6, 800e944 <tcp_input+0x6e8>
 800e936:	4b38      	ldr	r3, [pc, #224]	@ (800ea18 <tcp_input+0x7bc>)
 800e938:	f240 327f 	movw	r2, #895	@ 0x37f
 800e93c:	493b      	ldr	r1, [pc, #236]	@ (800ea2c <tcp_input+0x7d0>)
 800e93e:	4838      	ldr	r0, [pc, #224]	@ (800ea20 <tcp_input+0x7c4>)
 800e940:	f007 f924 	bl	8015b8c <iprintf>
          pcb->unsent = rseg->next;
 800e944:	6833      	ldr	r3, [r6, #0]
 800e946:	66e3      	str	r3, [r4, #108]	@ 0x6c
        tcp_seg_free(rseg);
 800e948:	4630      	mov	r0, r6
 800e94a:	f7fe fa6f 	bl	800ce2c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800e94e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e950:	b9b3      	cbnz	r3, 800e980 <tcp_input+0x724>
          pcb->rtime = -1;
 800e952:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e956:	8623      	strh	r3, [r4, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e958:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f43f af6c 	beq.w	800e83a <tcp_input+0x5de>
 800e962:	2200      	movs	r2, #0
 800e964:	4621      	mov	r1, r4
 800e966:	6920      	ldr	r0, [r4, #16]
 800e968:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800e96a:	300d      	adds	r0, #13
 800e96c:	f47f af65 	bne.w	800e83a <tcp_input+0x5de>
 800e970:	e60f      	b.n	800e592 <tcp_input+0x336>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e972:	429a      	cmp	r2, r3
 800e974:	bf88      	it	hi
 800e976:	b293      	uxthhi	r3, r2
 800e978:	e7c8      	b.n	800e90c <tcp_input+0x6b0>
          pcb->unacked = rseg->next;
 800e97a:	6833      	ldr	r3, [r6, #0]
 800e97c:	6723      	str	r3, [r4, #112]	@ 0x70
 800e97e:	e7e3      	b.n	800e948 <tcp_input+0x6ec>
          pcb->rtime = 0;
 800e980:	2300      	movs	r3, #0
 800e982:	8623      	strh	r3, [r4, #48]	@ 0x30
          pcb->nrtx = 0;
 800e984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e988:	e7e6      	b.n	800e958 <tcp_input+0x6fc>
      else if (flags & TCP_ACK) {
 800e98a:	06db      	lsls	r3, r3, #27
 800e98c:	f57f af35 	bpl.w	800e7fa <tcp_input+0x59e>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e990:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e992:	4a27      	ldr	r2, [pc, #156]	@ (800ea30 <tcp_input+0x7d4>)
 800e994:	8818      	ldrh	r0, [r3, #0]
 800e996:	8811      	ldrh	r1, [r2, #0]
 800e998:	f8db 2000 	ldr.w	r2, [fp]
 800e99c:	9002      	str	r0, [sp, #8]
 800e99e:	4620      	mov	r0, r4
 800e9a0:	885b      	ldrh	r3, [r3, #2]
 800e9a2:	440a      	add	r2, r1
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ea34 <tcp_input+0x7d8>)
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	3304      	adds	r3, #4
 800e9ac:	f8da 1000 	ldr.w	r1, [sl]
 800e9b0:	f001 f88c 	bl	800facc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e9b4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800e9b8:	2b05      	cmp	r3, #5
 800e9ba:	f63f af1e 	bhi.w	800e7fa <tcp_input+0x59e>
          pcb->rtime = 0;
 800e9be:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800e9c0:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800e9c2:	8623      	strh	r3, [r4, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e9c4:	f001 fab2 	bl	800ff2c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800e9c8:	e717      	b.n	800e7fa <tcp_input+0x59e>
      if (flags & TCP_SYN) {
 800e9ca:	b151      	cbz	r1, 800e9e2 <tcp_input+0x786>
        if (seqno == pcb->rcv_nxt - 1) {
 800e9cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e9ce:	f8db 2000 	ldr.w	r2, [fp]
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	f47f af10 	bne.w	800e7fa <tcp_input+0x59e>
          tcp_rexmit(pcb);
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f001 f802 	bl	800f9e4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800e9e0:	e70b      	b.n	800e7fa <tcp_input+0x59e>
      } else if (flags & TCP_ACK) {
 800e9e2:	06df      	lsls	r7, r3, #27
 800e9e4:	f57f af09 	bpl.w	800e7fa <tcp_input+0x59e>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e9ea:	f8da 1000 	ldr.w	r1, [sl]
 800e9ee:	43db      	mvns	r3, r3
 800e9f0:	42cb      	cmn	r3, r1
 800e9f2:	d45e      	bmi.n	800eab2 <tcp_input+0x856>
 800e9f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e9f6:	1a5b      	subs	r3, r3, r1
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	db5a      	blt.n	800eab2 <tcp_input+0x856>
          pcb->state = ESTABLISHED;
 800e9fc:	2304      	movs	r3, #4
 800e9fe:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800ea00:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ea02:	b9cb      	cbnz	r3, 800ea38 <tcp_input+0x7dc>
            tcp_abort(pcb);
 800ea04:	4620      	mov	r0, r4
 800ea06:	f7fe ff1d 	bl	800d844 <tcp_abort>
            goto aborted;
 800ea0a:	e5c2      	b.n	800e592 <tcp_input+0x336>
 800ea0c:	20010f66 	.word	0x20010f66
 800ea10:	20010f85 	.word	0x20010f85
 800ea14:	20010f6c 	.word	0x20010f6c
 800ea18:	08017d7f 	.word	0x08017d7f
 800ea1c:	08017fea 	.word	0x08017fea
 800ea20:	080169d3 	.word	0x080169d3
 800ea24:	20010f78 	.word	0x20010f78
 800ea28:	0801800a 	.word	0x0801800a
 800ea2c:	08018020 	.word	0x08018020
 800ea30:	20010f86 	.word	0x20010f86
 800ea34:	2000d178 	.word	0x2000d178
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	b933      	cbnz	r3, 800ea4a <tcp_input+0x7ee>
 800ea3c:	4b9e      	ldr	r3, [pc, #632]	@ (800ecb8 <tcp_input+0xa5c>)
 800ea3e:	f44f 726e 	mov.w	r2, #952	@ 0x3b8
 800ea42:	499e      	ldr	r1, [pc, #632]	@ (800ecbc <tcp_input+0xa60>)
 800ea44:	489e      	ldr	r0, [pc, #632]	@ (800ecc0 <tcp_input+0xa64>)
 800ea46:	f007 f8a1 	bl	8015b8c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea4a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d0d8      	beq.n	800ea04 <tcp_input+0x7a8>
 800ea52:	2200      	movs	r2, #0
 800ea54:	4621      	mov	r1, r4
 800ea56:	6920      	ldr	r0, [r4, #16]
 800ea58:	4798      	blx	r3
          if (err != ERR_OK) {
 800ea5a:	b118      	cbz	r0, 800ea64 <tcp_input+0x808>
            if (err != ERR_ABRT) {
 800ea5c:	300d      	adds	r0, #13
 800ea5e:	f43f ad98 	beq.w	800e592 <tcp_input+0x336>
 800ea62:	e7cf      	b.n	800ea04 <tcp_input+0x7a8>
          tcp_receive(pcb);
 800ea64:	4620      	mov	r0, r4
 800ea66:	f7ff f99f 	bl	800dda8 <tcp_receive>
          if (recv_acked != 0) {
 800ea6a:	4a96      	ldr	r2, [pc, #600]	@ (800ecc4 <tcp_input+0xa68>)
 800ea6c:	8813      	ldrh	r3, [r2, #0]
 800ea6e:	b10b      	cbz	r3, 800ea74 <tcp_input+0x818>
            recv_acked--;
 800ea70:	3b01      	subs	r3, #1
 800ea72:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea74:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 800ea76:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ea7a:	004a      	lsls	r2, r1, #1
 800ea7c:	0088      	lsls	r0, r1, #2
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	4616      	mov	r6, r2
 800ea82:	bf38      	it	cc
 800ea84:	461e      	movcc	r6, r3
 800ea86:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800ea8a:	d90e      	bls.n	800eaaa <tcp_input+0x84e>
 800ea8c:	b283      	uxth	r3, r0
 800ea8e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ea92:	f898 3000 	ldrb.w	r3, [r8]
 800ea96:	069e      	lsls	r6, r3, #26
 800ea98:	f57f aeaf 	bpl.w	800e7fa <tcp_input+0x59e>
        tcp_ack_now(pcb);
 800ea9c:	8b63      	ldrh	r3, [r4, #26]
 800ea9e:	f043 0302 	orr.w	r3, r3, #2
 800eaa2:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800eaa4:	2307      	movs	r3, #7
          pcb->state = CLOSING;
 800eaa6:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800eaa8:	e6a7      	b.n	800e7fa <tcp_input+0x59e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	bf88      	it	hi
 800eaae:	b293      	uxthhi	r3, r2
 800eab0:	e7ed      	b.n	800ea8e <tcp_input+0x832>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eab2:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eab4:	4a84      	ldr	r2, [pc, #528]	@ (800ecc8 <tcp_input+0xa6c>)
 800eab6:	881e      	ldrh	r6, [r3, #0]
 800eab8:	8810      	ldrh	r0, [r2, #0]
 800eaba:	f8db 2000 	ldr.w	r2, [fp]
 800eabe:	9602      	str	r6, [sp, #8]
 800eac0:	885b      	ldrh	r3, [r3, #2]
 800eac2:	4402      	add	r2, r0
 800eac4:	4620      	mov	r0, r4
 800eac6:	9301      	str	r3, [sp, #4]
 800eac8:	4b80      	ldr	r3, [pc, #512]	@ (800eccc <tcp_input+0xa70>)
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	3304      	adds	r3, #4
 800eace:	f000 fffd 	bl	800facc <tcp_rst>
    if (err != ERR_ABRT) {
 800ead2:	e692      	b.n	800e7fa <tcp_input+0x59e>
      tcp_receive(pcb);
 800ead4:	4620      	mov	r0, r4
 800ead6:	f7ff f967 	bl	800dda8 <tcp_receive>
 800eada:	e7da      	b.n	800ea92 <tcp_input+0x836>
      tcp_receive(pcb);
 800eadc:	4620      	mov	r0, r4
 800eade:	f7ff f963 	bl	800dda8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eae2:	f898 3000 	ldrb.w	r3, [r8]
 800eae6:	0698      	lsls	r0, r3, #26
 800eae8:	d52f      	bpl.n	800eb4a <tcp_input+0x8ee>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eaea:	4a79      	ldr	r2, [pc, #484]	@ (800ecd0 <tcp_input+0xa74>)
          tcp_ack_now(pcb);
 800eaec:	8b63      	ldrh	r3, [r4, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eaee:	7812      	ldrb	r2, [r2, #0]
          tcp_ack_now(pcb);
 800eaf0:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eaf4:	06d1      	lsls	r1, r2, #27
 800eaf6:	d525      	bpl.n	800eb44 <tcp_input+0x8e8>
 800eaf8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800eafa:	f8da 2000 	ldr.w	r2, [sl]
 800eafe:	4291      	cmp	r1, r2
 800eb00:	d120      	bne.n	800eb44 <tcp_input+0x8e8>
 800eb02:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800eb04:	b9f2      	cbnz	r2, 800eb44 <tcp_input+0x8e8>
          tcp_ack_now(pcb);
 800eb06:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f7fe fa0f 	bl	800cf2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	429c      	cmp	r4, r3
 800eb12:	d109      	bne.n	800eb28 <tcp_input+0x8cc>
        TCP_RMV_ACTIVE(pcb);
 800eb14:	68e3      	ldr	r3, [r4, #12]
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	e008      	b.n	800eb2c <tcp_input+0x8d0>
          TCP_RMV_ACTIVE(pcb);
 800eb1a:	68da      	ldr	r2, [r3, #12]
 800eb1c:	4294      	cmp	r4, r2
 800eb1e:	d102      	bne.n	800eb26 <tcp_input+0x8ca>
        TCP_RMV_ACTIVE(pcb);
 800eb20:	68e2      	ldr	r2, [r4, #12]
 800eb22:	60da      	str	r2, [r3, #12]
 800eb24:	e002      	b.n	800eb2c <tcp_input+0x8d0>
          TCP_RMV_ACTIVE(pcb);
 800eb26:	4613      	mov	r3, r2
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1f6      	bne.n	800eb1a <tcp_input+0x8be>
        TCP_RMV_ACTIVE(pcb);
 800eb2c:	4b69      	ldr	r3, [pc, #420]	@ (800ecd4 <tcp_input+0xa78>)
 800eb2e:	2201      	movs	r2, #1
 800eb30:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb32:	230a      	movs	r3, #10
 800eb34:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb36:	4b68      	ldr	r3, [pc, #416]	@ (800ecd8 <tcp_input+0xa7c>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	601c      	str	r4, [r3, #0]
 800eb3c:	60e2      	str	r2, [r4, #12]
 800eb3e:	f001 fb05 	bl	801014c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800eb42:	e65a      	b.n	800e7fa <tcp_input+0x59e>
          tcp_ack_now(pcb);
 800eb44:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800eb46:	2308      	movs	r3, #8
 800eb48:	e7ad      	b.n	800eaa6 <tcp_input+0x84a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb4a:	4b61      	ldr	r3, [pc, #388]	@ (800ecd0 <tcp_input+0xa74>)
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	06da      	lsls	r2, r3, #27
 800eb50:	f57f ae53 	bpl.w	800e7fa <tcp_input+0x59e>
 800eb54:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800eb56:	f8da 3000 	ldr.w	r3, [sl]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	f47f ae4d 	bne.w	800e7fa <tcp_input+0x59e>
 800eb60:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f47f ae49 	bne.w	800e7fa <tcp_input+0x59e>
        pcb->state = FIN_WAIT_2;
 800eb68:	2306      	movs	r3, #6
 800eb6a:	e79c      	b.n	800eaa6 <tcp_input+0x84a>
      tcp_receive(pcb);
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f7ff f91b 	bl	800dda8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb72:	f898 3000 	ldrb.w	r3, [r8]
 800eb76:	069b      	lsls	r3, r3, #26
 800eb78:	f57f ae3f 	bpl.w	800e7fa <tcp_input+0x59e>
        tcp_ack_now(pcb);
 800eb7c:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800eb7e:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800eb80:	f043 0302 	orr.w	r3, r3, #2
 800eb84:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800eb86:	f7fe f9d1 	bl	800cf2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	429c      	cmp	r4, r3
 800eb8e:	d0c1      	beq.n	800eb14 <tcp_input+0x8b8>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0cb      	beq.n	800eb2c <tcp_input+0x8d0>
 800eb94:	68da      	ldr	r2, [r3, #12]
 800eb96:	4294      	cmp	r4, r2
 800eb98:	d0c2      	beq.n	800eb20 <tcp_input+0x8c4>
 800eb9a:	4613      	mov	r3, r2
 800eb9c:	e7f8      	b.n	800eb90 <tcp_input+0x934>
      tcp_receive(pcb);
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7ff f902 	bl	800dda8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eba4:	4b4a      	ldr	r3, [pc, #296]	@ (800ecd0 <tcp_input+0xa74>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	06de      	lsls	r6, r3, #27
 800ebaa:	f57f ae26 	bpl.w	800e7fa <tcp_input+0x59e>
 800ebae:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800ebb0:	f8da 3000 	ldr.w	r3, [sl]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	f47f ae20 	bne.w	800e7fa <tcp_input+0x59e>
 800ebba:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f47f ae1c 	bne.w	800e7fa <tcp_input+0x59e>
        tcp_pcb_purge(pcb);
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f7fe f9b2 	bl	800cf2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	429c      	cmp	r4, r3
 800ebcc:	d0a2      	beq.n	800eb14 <tcp_input+0x8b8>
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0ac      	beq.n	800eb2c <tcp_input+0x8d0>
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	4294      	cmp	r4, r2
 800ebd6:	d0a3      	beq.n	800eb20 <tcp_input+0x8c4>
 800ebd8:	4613      	mov	r3, r2
 800ebda:	e7f8      	b.n	800ebce <tcp_input+0x972>
      tcp_receive(pcb);
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f7ff f8e3 	bl	800dda8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ebe2:	4b3b      	ldr	r3, [pc, #236]	@ (800ecd0 <tcp_input+0xa74>)
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	06d8      	lsls	r0, r3, #27
 800ebe8:	f57f ae07 	bpl.w	800e7fa <tcp_input+0x59e>
 800ebec:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800ebee:	f8da 2000 	ldr.w	r2, [sl]
        recv_flags |= TF_CLOSED;
 800ebf2:	f898 3000 	ldrb.w	r3, [r8]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ebf6:	4291      	cmp	r1, r2
 800ebf8:	f47f adff 	bne.w	800e7fa <tcp_input+0x59e>
 800ebfc:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800ebfe:	2a00      	cmp	r2, #0
 800ec00:	f47f adfb 	bne.w	800e7fa <tcp_input+0x59e>
        recv_flags |= TF_CLOSED;
 800ec04:	f043 0310 	orr.w	r3, r3, #16
 800ec08:	f888 3000 	strb.w	r3, [r8]
    if (err != ERR_ABRT) {
 800ec0c:	e5f5      	b.n	800e7fa <tcp_input+0x59e>
        if (recv_acked > 0) {
 800ec0e:	4b2d      	ldr	r3, [pc, #180]	@ (800ecc4 <tcp_input+0xa68>)
 800ec10:	881a      	ldrh	r2, [r3, #0]
 800ec12:	b122      	cbz	r2, 800ec1e <tcp_input+0x9c2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ec14:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ec16:	b9f3      	cbnz	r3, 800ec56 <tcp_input+0x9fa>
          recv_acked = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	4a2a      	ldr	r2, [pc, #168]	@ (800ecc4 <tcp_input+0xa68>)
 800ec1c:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f7ff f842 	bl	800dca8 <tcp_input_delayed_close>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	f47f acb4 	bne.w	800e592 <tcp_input+0x336>
        if (recv_data != NULL) {
 800ec2a:	f8d9 3000 	ldr.w	r3, [r9]
 800ec2e:	b333      	cbz	r3, 800ec7e <tcp_input+0xa22>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ec30:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ec32:	b133      	cbz	r3, 800ec42 <tcp_input+0x9e6>
 800ec34:	4b20      	ldr	r3, [pc, #128]	@ (800ecb8 <tcp_input+0xa5c>)
 800ec36:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ec3a:	4928      	ldr	r1, [pc, #160]	@ (800ecdc <tcp_input+0xa80>)
 800ec3c:	4820      	ldr	r0, [pc, #128]	@ (800ecc0 <tcp_input+0xa64>)
 800ec3e:	f006 ffa5 	bl	8015b8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ec42:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800ec44:	f8d9 2000 	ldr.w	r2, [r9]
          if (pcb->flags & TF_RXCLOSED) {
 800ec48:	f013 0310 	ands.w	r3, r3, #16
 800ec4c:	d009      	beq.n	800ec62 <tcp_input+0xa06>
            pbuf_free(recv_data);
 800ec4e:	4610      	mov	r0, r2
 800ec50:	f7fd fcbe 	bl	800c5d0 <pbuf_free>
 800ec54:	e6d6      	b.n	800ea04 <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ec56:	4621      	mov	r1, r4
 800ec58:	6920      	ldr	r0, [r4, #16]
 800ec5a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800ec5c:	300d      	adds	r0, #13
 800ec5e:	d1db      	bne.n	800ec18 <tcp_input+0x9bc>
 800ec60:	e497      	b.n	800e592 <tcp_input+0x336>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ec62:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800ec66:	b306      	cbz	r6, 800ecaa <tcp_input+0xa4e>
 800ec68:	4621      	mov	r1, r4
 800ec6a:	6920      	ldr	r0, [r4, #16]
 800ec6c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800ec6e:	f110 0f0d 	cmn.w	r0, #13
 800ec72:	f43f ac8e 	beq.w	800e592 <tcp_input+0x336>
          if (err != ERR_OK) {
 800ec76:	b110      	cbz	r0, 800ec7e <tcp_input+0xa22>
            pcb->refused_data = recv_data;
 800ec78:	f8d9 3000 	ldr.w	r3, [r9]
 800ec7c:	6763      	str	r3, [r4, #116]	@ 0x74
        if (recv_flags & TF_GOT_FIN) {
 800ec7e:	f898 3000 	ldrb.w	r3, [r8]
 800ec82:	069a      	lsls	r2, r3, #26
 800ec84:	d505      	bpl.n	800ec92 <tcp_input+0xa36>
          if (pcb->refused_data != NULL) {
 800ec86:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ec88:	b353      	cbz	r3, 800ece0 <tcp_input+0xa84>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec8a:	7b5a      	ldrb	r2, [r3, #13]
 800ec8c:	f042 0220 	orr.w	r2, r2, #32
 800ec90:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800ec92:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800ec94:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800ec96:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec98:	f7ff f806 	bl	800dca8 <tcp_input_delayed_close>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f47f ac78 	bne.w	800e592 <tcp_input+0x336>
        tcp_output(pcb);
 800eca2:	4620      	mov	r0, r4
 800eca4:	f000 ff7e 	bl	800fba4 <tcp_output>
 800eca8:	e473      	b.n	800e592 <tcp_input+0x336>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ecaa:	4633      	mov	r3, r6
 800ecac:	4621      	mov	r1, r4
 800ecae:	4630      	mov	r0, r6
 800ecb0:	f7fe fc88 	bl	800d5c4 <tcp_recv_null>
 800ecb4:	e7db      	b.n	800ec6e <tcp_input+0xa12>
 800ecb6:	bf00      	nop
 800ecb8:	08017d7f 	.word	0x08017d7f
 800ecbc:	08018033 	.word	0x08018033
 800ecc0:	080169d3 	.word	0x080169d3
 800ecc4:	20010f88 	.word	0x20010f88
 800ecc8:	20010f86 	.word	0x20010f86
 800eccc:	2000d178 	.word	0x2000d178
 800ecd0:	20010f85 	.word	0x20010f85
 800ecd4:	20010f66 	.word	0x20010f66
 800ecd8:	20010f68 	.word	0x20010f68
 800ecdc:	08018051 	.word	0x08018051
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ece0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800ece2:	f640 3268 	movw	r2, #2920	@ 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800ece6:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ecea:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800ecec:	bf1c      	itt	ne
 800ecee:	3301      	addne	r3, #1
 800ecf0:	8523      	strhne	r3, [r4, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ecf2:	2e00      	cmp	r6, #0
 800ecf4:	d0cd      	beq.n	800ec92 <tcp_input+0xa36>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	6920      	ldr	r0, [r4, #16]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800ed00:	300d      	adds	r0, #13
 800ed02:	d1c6      	bne.n	800ec92 <tcp_input+0xa36>
 800ed04:	e445      	b.n	800e592 <tcp_input+0x336>
      if (prev != NULL) {
 800ed06:	f1b9 0f00 	cmp.w	r9, #0
 800ed0a:	f47f ac00 	bne.w	800e50e <tcp_input+0x2b2>
 800ed0e:	e40e      	b.n	800e52e <tcp_input+0x2d2>
      if (prev != NULL) {
 800ed10:	b13c      	cbz	r4, 800ed22 <tcp_input+0xac6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ed12:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ed16:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ed18:	4b0f      	ldr	r3, [pc, #60]	@ (800ed58 <tcp_input+0xafc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ed1a:	f8c9 200c 	str.w	r2, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ed1e:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800ed22:	4b0e      	ldr	r3, [pc, #56]	@ (800ed5c <tcp_input+0xb00>)
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	075c      	lsls	r4, r3, #29
 800ed28:	f53f ab80 	bmi.w	800e42c <tcp_input+0x1d0>
  if (flags & TCP_ACK) {
 800ed2c:	f013 0410 	ands.w	r4, r3, #16
 800ed30:	f43f acb3 	beq.w	800e69a <tcp_input+0x43e>
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed34:	4b0a      	ldr	r3, [pc, #40]	@ (800ed60 <tcp_input+0xb04>)
 800ed36:	f8db 2000 	ldr.w	r2, [fp]
 800ed3a:	881c      	ldrh	r4, [r3, #0]
 800ed3c:	880b      	ldrh	r3, [r1, #0]
 800ed3e:	4422      	add	r2, r4
 800ed40:	9302      	str	r3, [sp, #8]
 800ed42:	884b      	ldrh	r3, [r1, #2]
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	4b07      	ldr	r3, [pc, #28]	@ (800ed64 <tcp_input+0xb08>)
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	f8da 1000 	ldr.w	r1, [sl]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed50:	f000 fed8 	bl	800fb04 <tcp_rst_netif>
 800ed54:	f7ff bb6a 	b.w	800e42c <tcp_input+0x1d0>
 800ed58:	20010f70 	.word	0x20010f70
 800ed5c:	20010f85 	.word	0x20010f85
 800ed60:	20010f86 	.word	0x20010f86
 800ed64:	2000d178 	.word	0x2000d178

0800ed68 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ed68:	4a02      	ldr	r2, [pc, #8]	@ (800ed74 <tcp_trigger_input_pcb_close+0xc>)
 800ed6a:	7813      	ldrb	r3, [r2, #0]
 800ed6c:	f043 0310 	orr.w	r3, r3, #16
 800ed70:	7013      	strb	r3, [r2, #0]
}
 800ed72:	4770      	bx	lr
 800ed74:	20010f84 	.word	0x20010f84

0800ed78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ed78:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	b930      	cbnz	r0, 800ed8c <tcp_output_segment_busy+0x14>
 800ed7e:	4b06      	ldr	r3, [pc, #24]	@ (800ed98 <tcp_output_segment_busy+0x20>)
 800ed80:	f240 529e 	movw	r2, #1438	@ 0x59e
 800ed84:	4905      	ldr	r1, [pc, #20]	@ (800ed9c <tcp_output_segment_busy+0x24>)
 800ed86:	4806      	ldr	r0, [pc, #24]	@ (800eda0 <tcp_output_segment_busy+0x28>)
 800ed88:	f006 ff00 	bl	8015b8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ed8c:	6863      	ldr	r3, [r4, #4]
 800ed8e:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800ed90:	3801      	subs	r0, #1
 800ed92:	bf18      	it	ne
 800ed94:	2001      	movne	r0, #1
 800ed96:	bd10      	pop	{r4, pc}
 800ed98:	0801806b 	.word	0x0801806b
 800ed9c:	0801808c 	.word	0x0801808c
 800eda0:	080169d3 	.word	0x080169d3

0800eda4 <tcp_pbuf_prealloc>:
{
 800eda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edac:	4607      	mov	r7, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	4615      	mov	r5, r2
 800edb2:	461e      	mov	r6, r3
 800edb4:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800edb8:	f1b8 0f00 	cmp.w	r8, #0
 800edbc:	d105      	bne.n	800edca <tcp_pbuf_prealloc+0x26>
 800edbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ee34 <tcp_pbuf_prealloc+0x90>)
 800edc0:	22ec      	movs	r2, #236	@ 0xec
 800edc2:	491d      	ldr	r1, [pc, #116]	@ (800ee38 <tcp_pbuf_prealloc+0x94>)
 800edc4:	481d      	ldr	r0, [pc, #116]	@ (800ee3c <tcp_pbuf_prealloc+0x98>)
 800edc6:	f006 fee1 	bl	8015b8c <iprintf>
  if (length < max_length) {
 800edca:	42ac      	cmp	r4, r5
 800edcc:	d230      	bcs.n	800ee30 <tcp_pbuf_prealloc+0x8c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800edce:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800edd2:	079a      	lsls	r2, r3, #30
 800edd4:	d40c      	bmi.n	800edf0 <tcp_pbuf_prealloc+0x4c>
 800edd6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800edda:	065b      	lsls	r3, r3, #25
 800eddc:	d428      	bmi.n	800ee30 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
 800edde:	f1b9 0f00 	cmp.w	r9, #0
 800ede2:	d005      	beq.n	800edf0 <tcp_pbuf_prealloc+0x4c>
         (!first_seg ||
 800ede4:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800ede8:	b913      	cbnz	r3, 800edf0 <tcp_pbuf_prealloc+0x4c>
          pcb->unsent != NULL ||
 800edea:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800edee:	b1fb      	cbz	r3, 800ee30 <tcp_pbuf_prealloc+0x8c>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800edf0:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 800edf4:	f021 0103 	bic.w	r1, r1, #3
 800edf8:	42a9      	cmp	r1, r5
 800edfa:	bf28      	it	cs
 800edfc:	4629      	movcs	r1, r5
 800edfe:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ee00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ee04:	4638      	mov	r0, r7
 800ee06:	f7fd fc4d 	bl	800c6a4 <pbuf_alloc>
  if (p == NULL) {
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	b168      	cbz	r0, 800ee2a <tcp_pbuf_prealloc+0x86>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ee0e:	6803      	ldr	r3, [r0, #0]
 800ee10:	b133      	cbz	r3, 800ee20 <tcp_pbuf_prealloc+0x7c>
 800ee12:	4b08      	ldr	r3, [pc, #32]	@ (800ee34 <tcp_pbuf_prealloc+0x90>)
 800ee14:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800ee18:	4909      	ldr	r1, [pc, #36]	@ (800ee40 <tcp_pbuf_prealloc+0x9c>)
 800ee1a:	4808      	ldr	r0, [pc, #32]	@ (800ee3c <tcp_pbuf_prealloc+0x98>)
 800ee1c:	f006 feb6 	bl	8015b8c <iprintf>
  *oversize = p->len - length;
 800ee20:	896b      	ldrh	r3, [r5, #10]
 800ee22:	1b1b      	subs	r3, r3, r4
 800ee24:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800ee26:	812c      	strh	r4, [r5, #8]
 800ee28:	816c      	strh	r4, [r5, #10]
}
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800ee30:	4621      	mov	r1, r4
 800ee32:	e7e5      	b.n	800ee00 <tcp_pbuf_prealloc+0x5c>
 800ee34:	0801806b 	.word	0x0801806b
 800ee38:	080180b1 	.word	0x080180b1
 800ee3c:	080169d3 	.word	0x080169d3
 800ee40:	080180d0 	.word	0x080180d0

0800ee44 <tcp_create_segment>:
{
 800ee44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee48:	460e      	mov	r6, r1
 800ee4a:	4690      	mov	r8, r2
 800ee4c:	4699      	mov	r9, r3
 800ee4e:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ee52:	4607      	mov	r7, r0
 800ee54:	b928      	cbnz	r0, 800ee62 <tcp_create_segment+0x1e>
 800ee56:	4b2d      	ldr	r3, [pc, #180]	@ (800ef0c <tcp_create_segment+0xc8>)
 800ee58:	22a6      	movs	r2, #166	@ 0xa6
 800ee5a:	492d      	ldr	r1, [pc, #180]	@ (800ef10 <tcp_create_segment+0xcc>)
 800ee5c:	482d      	ldr	r0, [pc, #180]	@ (800ef14 <tcp_create_segment+0xd0>)
 800ee5e:	f006 fe95 	bl	8015b8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ee62:	b92e      	cbnz	r6, 800ee70 <tcp_create_segment+0x2c>
 800ee64:	4b29      	ldr	r3, [pc, #164]	@ (800ef0c <tcp_create_segment+0xc8>)
 800ee66:	22a7      	movs	r2, #167	@ 0xa7
 800ee68:	492b      	ldr	r1, [pc, #172]	@ (800ef18 <tcp_create_segment+0xd4>)
 800ee6a:	482a      	ldr	r0, [pc, #168]	@ (800ef14 <tcp_create_segment+0xd0>)
 800ee6c:	f006 fe8e 	bl	8015b8c <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee70:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ee74:	2003      	movs	r0, #3
 800ee76:	f7fd f991 	bl	800c19c <memp_malloc>
 800ee7a:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee7c:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ee80:	b930      	cbnz	r0, 800ee90 <tcp_create_segment+0x4c>
    pbuf_free(p);
 800ee82:	4630      	mov	r0, r6
 800ee84:	f7fd fba4 	bl	800c5d0 <pbuf_free>
    return NULL;
 800ee88:	2400      	movs	r4, #0
}
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800ee90:	2300      	movs	r3, #0
  seg->flags = optflags;
 800ee92:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->p = p;
 800ee96:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ee9a:	8933      	ldrh	r3, [r6, #8]
 800ee9c:	42ab      	cmp	r3, r5
 800ee9e:	d205      	bcs.n	800eeac <tcp_create_segment+0x68>
 800eea0:	4b1a      	ldr	r3, [pc, #104]	@ (800ef0c <tcp_create_segment+0xc8>)
 800eea2:	22b3      	movs	r2, #179	@ 0xb3
 800eea4:	491d      	ldr	r1, [pc, #116]	@ (800ef1c <tcp_create_segment+0xd8>)
 800eea6:	481b      	ldr	r0, [pc, #108]	@ (800ef14 <tcp_create_segment+0xd0>)
 800eea8:	f006 fe70 	bl	8015b8c <iprintf>
  seg->len = p->tot_len - optlen;
 800eeac:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eeae:	4630      	mov	r0, r6
 800eeb0:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800eeb2:	1b5b      	subs	r3, r3, r5
 800eeb4:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eeb6:	f7fd fb5c 	bl	800c572 <pbuf_add_header>
 800eeba:	4606      	mov	r6, r0
 800eebc:	b118      	cbz	r0, 800eec6 <tcp_create_segment+0x82>
    tcp_seg_free(seg);
 800eebe:	4620      	mov	r0, r4
 800eec0:	f7fd ffb4 	bl	800ce2c <tcp_seg_free>
    return NULL;
 800eec4:	e7e0      	b.n	800ee88 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eec6:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eec8:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eeca:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eecc:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eed0:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eed4:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eed8:	f7fc fe22 	bl	800bb20 <lwip_htons>
 800eedc:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eee0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800eee4:	8b38      	ldrh	r0, [r7, #24]
 800eee6:	f7fc fe1b 	bl	800bb20 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eeea:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eeec:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eef0:	4648      	mov	r0, r9
 800eef2:	f7fc fe18 	bl	800bb26 <lwip_htonl>
 800eef6:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eef8:	ea48 0005 	orr.w	r0, r8, r5
 800eefc:	68e7      	ldr	r7, [r4, #12]
 800eefe:	f7fc fe0f 	bl	800bb20 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800ef02:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ef04:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800ef06:	749e      	strb	r6, [r3, #18]
 800ef08:	74de      	strb	r6, [r3, #19]
  return seg;
 800ef0a:	e7be      	b.n	800ee8a <tcp_create_segment+0x46>
 800ef0c:	0801806b 	.word	0x0801806b
 800ef10:	080180e4 	.word	0x080180e4
 800ef14:	080169d3 	.word	0x080169d3
 800ef18:	08018104 	.word	0x08018104
 800ef1c:	08018125 	.word	0x08018125

0800ef20 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 800ef20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ef24:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800ef28:	4604      	mov	r4, r0
 800ef2a:	460d      	mov	r5, r1
 800ef2c:	4616      	mov	r6, r2
 800ef2e:	461f      	mov	r7, r3
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800ef30:	f1b8 0f00 	cmp.w	r8, #0
 800ef34:	d106      	bne.n	800ef44 <tcp_output_control_segment_netif+0x24>
 800ef36:	4b0f      	ldr	r3, [pc, #60]	@ (800ef74 <tcp_output_control_segment_netif+0x54>)
 800ef38:	f240 72a1 	movw	r2, #1953	@ 0x7a1
 800ef3c:	490e      	ldr	r1, [pc, #56]	@ (800ef78 <tcp_output_control_segment_netif+0x58>)
 800ef3e:	480f      	ldr	r0, [pc, #60]	@ (800ef7c <tcp_output_control_segment_netif+0x5c>)
 800ef40:	f006 fe24 	bl	8015b8c <iprintf>
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800ef44:	b19c      	cbz	r4, 800ef6e <tcp_output_control_segment_netif+0x4e>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 800ef46:	7ae3      	ldrb	r3, [r4, #11]
    tos = pcb->tos;
 800ef48:	7aa4      	ldrb	r4, [r4, #10]
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
    tos = 0;
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ef4a:	2206      	movs	r2, #6
 800ef4c:	4631      	mov	r1, r6
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f8cd 8008 	str.w	r8, [sp, #8]
 800ef54:	e9cd 4200 	strd	r4, r2, [sp]
 800ef58:	463a      	mov	r2, r7
 800ef5a:	f002 f913 	bl	8011184 <ip4_output_if>
 800ef5e:	4604      	mov	r4, r0
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800ef60:	4628      	mov	r0, r5
 800ef62:	f7fd fb35 	bl	800c5d0 <pbuf_free>
  return err;
}
 800ef66:	4620      	mov	r0, r4
 800ef68:	b004      	add	sp, #16
 800ef6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ttl = TCP_TTL;
 800ef6e:	23ff      	movs	r3, #255	@ 0xff
 800ef70:	e7eb      	b.n	800ef4a <tcp_output_control_segment_netif+0x2a>
 800ef72:	bf00      	nop
 800ef74:	0801806b 	.word	0x0801806b
 800ef78:	0801813a 	.word	0x0801813a
 800ef7c:	080169d3 	.word	0x080169d3

0800ef80 <tcp_output_alloc_header_common.constprop.0>:
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ef80:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ef82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ef86:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ef88:	4606      	mov	r6, r0
 800ef8a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ef8c:	2022      	movs	r0, #34	@ 0x22
 800ef8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ef92:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ef94:	f7fd fb86 	bl	800c6a4 <pbuf_alloc>
  if (p != NULL) {
 800ef98:	4605      	mov	r5, r0
 800ef9a:	b348      	cbz	r0, 800eff0 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ef9c:	8943      	ldrh	r3, [r0, #10]
 800ef9e:	2b13      	cmp	r3, #19
 800efa0:	d806      	bhi.n	800efb0 <tcp_output_alloc_header_common.constprop.0+0x30>
 800efa2:	4b15      	ldr	r3, [pc, #84]	@ (800eff8 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800efa4:	f240 7227 	movw	r2, #1831	@ 0x727
 800efa8:	4914      	ldr	r1, [pc, #80]	@ (800effc <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800efaa:	4815      	ldr	r0, [pc, #84]	@ (800f000 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800efac:	f006 fdee 	bl	8015b8c <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 800efb0:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800efb2:	4640      	mov	r0, r8
 800efb4:	f7fc fdb4 	bl	800bb20 <lwip_htons>
 800efb8:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800efba:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800efbe:	f7fc fdaf 	bl	800bb20 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800efc2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800efc4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800efc6:	4630      	mov	r0, r6
 800efc8:	f7fc fdad 	bl	800bb26 <lwip_htonl>
 800efcc:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800efce:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800efd2:	f440 40a0 	orr.w	r0, r0, #20480	@ 0x5000
 800efd6:	f7fc fda3 	bl	800bb20 <lwip_htons>
 800efda:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800efdc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800efe0:	f7fc fd9e 	bl	800bb20 <lwip_htons>
    tcphdr->chksum = 0;
 800efe4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800efe6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800efe8:	7423      	strb	r3, [r4, #16]
 800efea:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800efec:	74a3      	strb	r3, [r4, #18]
 800efee:	74e3      	strb	r3, [r4, #19]
}
 800eff0:	4628      	mov	r0, r5
 800eff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff6:	bf00      	nop
 800eff8:	0801806b 	.word	0x0801806b
 800effc:	0801816b 	.word	0x0801816b
 800f000:	080169d3 	.word	0x080169d3

0800f004 <tcp_output_alloc_header.constprop.0>:
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800f004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f006:	460d      	mov	r5, r1
 800f008:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f00a:	4604      	mov	r4, r0
 800f00c:	b930      	cbnz	r0, 800f01c <tcp_output_alloc_header.constprop.0+0x18>
 800f00e:	4b0d      	ldr	r3, [pc, #52]	@ (800f044 <tcp_output_alloc_header.constprop.0+0x40>)
 800f010:	f240 7246 	movw	r2, #1862	@ 0x746
 800f014:	490c      	ldr	r1, [pc, #48]	@ (800f048 <tcp_output_alloc_header.constprop.0+0x44>)
 800f016:	480d      	ldr	r0, [pc, #52]	@ (800f04c <tcp_output_alloc_header.constprop.0+0x48>)
 800f018:	f006 fdb8 	bl	8015b8c <iprintf>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f01c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800f01e:	4632      	mov	r2, r6
 800f020:	4629      	mov	r1, r5
 800f022:	9302      	str	r3, [sp, #8]
 800f024:	2310      	movs	r3, #16
 800f026:	9301      	str	r3, [sp, #4]
 800f028:	8b23      	ldrh	r3, [r4, #24]
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	8ae3      	ldrh	r3, [r4, #22]
 800f02e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f030:	f7ff ffa6 	bl	800ef80 <tcp_output_alloc_header_common.constprop.0>
  if (p != NULL) {
 800f034:	b118      	cbz	r0, 800f03e <tcp_output_alloc_header.constprop.0+0x3a>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f036:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800f038:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f03a:	4413      	add	r3, r2
 800f03c:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800f03e:	b004      	add	sp, #16
 800f040:	bd70      	pop	{r4, r5, r6, pc}
 800f042:	bf00      	nop
 800f044:	0801806b 	.word	0x0801806b
 800f048:	08018199 	.word	0x08018199
 800f04c:	080169d3 	.word	0x080169d3

0800f050 <tcp_output_fill_options.constprop.0>:
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f050:	b930      	cbnz	r0, 800f060 <tcp_output_fill_options.constprop.0+0x10>
 800f052:	4b04      	ldr	r3, [pc, #16]	@ (800f064 <tcp_output_fill_options.constprop.0+0x14>)
 800f054:	f240 725a 	movw	r2, #1882	@ 0x75a
 800f058:	4903      	ldr	r1, [pc, #12]	@ (800f068 <tcp_output_fill_options.constprop.0+0x18>)
 800f05a:	4804      	ldr	r0, [pc, #16]	@ (800f06c <tcp_output_fill_options.constprop.0+0x1c>)
 800f05c:	f006 bd96 	b.w	8015b8c <iprintf>
}
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	0801806b 	.word	0x0801806b
 800f068:	080181be 	.word	0x080181be
 800f06c:	080169d3 	.word	0x080169d3

0800f070 <tcp_rst_common.isra.0>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
 800f070:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f072:	4605      	mov	r5, r0
 800f074:	460c      	mov	r4, r1
 800f076:	461e      	mov	r6, r3
{
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f078:	b932      	cbnz	r2, 800f088 <tcp_rst_common.isra.0+0x18>
 800f07a:	4b14      	ldr	r3, [pc, #80]	@ (800f0cc <tcp_rst_common.isra.0+0x5c>)
 800f07c:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f080:	4913      	ldr	r1, [pc, #76]	@ (800f0d0 <tcp_rst_common.isra.0+0x60>)
 800f082:	4814      	ldr	r0, [pc, #80]	@ (800f0d4 <tcp_rst_common.isra.0+0x64>)
 800f084:	f006 fd82 	bl	8015b8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f088:	b936      	cbnz	r6, 800f098 <tcp_rst_common.isra.0+0x28>
 800f08a:	4b10      	ldr	r3, [pc, #64]	@ (800f0cc <tcp_rst_common.isra.0+0x5c>)
 800f08c:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f090:	4911      	ldr	r1, [pc, #68]	@ (800f0d8 <tcp_rst_common.isra.0+0x68>)
 800f092:	4810      	ldr	r0, [pc, #64]	@ (800f0d4 <tcp_rst_common.isra.0+0x64>)
 800f094:	f006 fd7a 	bl	8015b8c <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f098:	4628      	mov	r0, r5
 800f09a:	f7fc fd44 	bl	800bb26 <lwip_htonl>
 800f09e:	2314      	movs	r3, #20
 800f0a0:	f646 010b 	movw	r1, #26635	@ 0x680b
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f0ac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f0b8:	f7ff ff62 	bl	800ef80 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f0bc:	4604      	mov	r4, r0
 800f0be:	b108      	cbz	r0, 800f0c4 <tcp_rst_common.isra.0+0x54>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800f0c0:	f7ff ffc6 	bl	800f050 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
}
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	b004      	add	sp, #16
 800f0c8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ca:	bf00      	nop
 800f0cc:	0801806b 	.word	0x0801806b
 800f0d0:	080181e4 	.word	0x080181e4
 800f0d4:	080169d3 	.word	0x080169d3
 800f0d8:	080181fe 	.word	0x080181fe

0800f0dc <tcp_output_control_segment>:
{
 800f0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4617      	mov	r7, r2
 800f0e2:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f0e4:	460d      	mov	r5, r1
 800f0e6:	b931      	cbnz	r1, 800f0f6 <tcp_output_control_segment+0x1a>
 800f0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800f128 <tcp_output_control_segment+0x4c>)
 800f0ea:	f240 728a 	movw	r2, #1930	@ 0x78a
 800f0ee:	490f      	ldr	r1, [pc, #60]	@ (800f12c <tcp_output_control_segment+0x50>)
 800f0f0:	480f      	ldr	r0, [pc, #60]	@ (800f130 <tcp_output_control_segment+0x54>)
 800f0f2:	f006 fd4b 	bl	8015b8c <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f0f6:	b15c      	cbz	r4, 800f110 <tcp_output_control_segment+0x34>
 800f0f8:	7a20      	ldrb	r0, [r4, #8]
 800f0fa:	b148      	cbz	r0, 800f110 <tcp_output_control_segment+0x34>
    return netif_get_by_index(pcb->netif_idx);
 800f0fc:	f7fd f9aa 	bl	800c454 <netif_get_by_index>
  if (netif == NULL) {
 800f100:	b950      	cbnz	r0, 800f118 <tcp_output_control_segment+0x3c>
    pbuf_free(p);
 800f102:	4628      	mov	r0, r5
 800f104:	f7fd fa64 	bl	800c5d0 <pbuf_free>
    return ERR_RTE;
 800f108:	f06f 0003 	mvn.w	r0, #3
}
 800f10c:	b003      	add	sp, #12
 800f10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800f110:	4630      	mov	r0, r6
 800f112:	f001 fed7 	bl	8010ec4 <ip4_route>
 800f116:	e7f3      	b.n	800f100 <tcp_output_control_segment+0x24>
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800f118:	9000      	str	r0, [sp, #0]
 800f11a:	4633      	mov	r3, r6
 800f11c:	463a      	mov	r2, r7
 800f11e:	4629      	mov	r1, r5
 800f120:	4620      	mov	r0, r4
 800f122:	f7ff fefd 	bl	800ef20 <tcp_output_control_segment_netif>
 800f126:	e7f1      	b.n	800f10c <tcp_output_control_segment+0x30>
 800f128:	0801806b 	.word	0x0801806b
 800f12c:	08018219 	.word	0x08018219
 800f130:	080169d3 	.word	0x080169d3

0800f134 <tcp_write>:
{
 800f134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f138:	b091      	sub	sp, #68	@ 0x44
 800f13a:	4692      	mov	sl, r2
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f13c:	4604      	mov	r4, r0
{
 800f13e:	930a      	str	r3, [sp, #40]	@ 0x28
  u16_t oversize = 0;
 800f140:	2300      	movs	r3, #0
{
 800f142:	9108      	str	r1, [sp, #32]
  u16_t oversize = 0;
 800f144:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f148:	2800      	cmp	r0, #0
 800f14a:	f000 8265 	beq.w	800f618 <tcp_write+0x4e4>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f14e:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800f150:	9307      	str	r3, [sp, #28]
 800f152:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 800f156:	9a07      	ldr	r2, [sp, #28]
 800f158:	085b      	lsrs	r3, r3, #1
 800f15a:	4293      	cmp	r3, r2
 800f15c:	bf28      	it	cs
 800f15e:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800f160:	2b00      	cmp	r3, #0
 800f162:	bf18      	it	ne
 800f164:	461a      	movne	r2, r3
 800f166:	9207      	str	r2, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f168:	2900      	cmp	r1, #0
 800f16a:	f000 8255 	beq.w	800f618 <tcp_write+0x4e4>
  if ((pcb->state != ESTABLISHED) &&
 800f16e:	7d03      	ldrb	r3, [r0, #20]
 800f170:	1e9a      	subs	r2, r3, #2
 800f172:	2a02      	cmp	r2, #2
 800f174:	d902      	bls.n	800f17c <tcp_write+0x48>
 800f176:	2b07      	cmp	r3, #7
 800f178:	f040 8251 	bne.w	800f61e <tcp_write+0x4ea>
  } else if (len == 0) {
 800f17c:	f1ba 0f00 	cmp.w	sl, #0
 800f180:	d01a      	beq.n	800f1b8 <tcp_write+0x84>
  if (len > pcb->snd_buf) {
 800f182:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800f186:	4553      	cmp	r3, sl
 800f188:	d206      	bcs.n	800f198 <tcp_write+0x64>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f18a:	8b63      	ldrh	r3, [r4, #26]
 800f18c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f190:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800f192:	f04f 30ff 	mov.w	r0, #4294967295
 800f196:	e22e      	b.n	800f5f6 <tcp_write+0x4c2>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f198:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 800f19c:	2a0f      	cmp	r2, #15
 800f19e:	d8f4      	bhi.n	800f18a <tcp_write+0x56>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f1a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800f1a2:	b302      	cbz	r2, 800f1e6 <tcp_write+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f1a4:	b943      	cbnz	r3, 800f1b8 <tcp_write+0x84>
 800f1a6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f1a8:	b933      	cbnz	r3, 800f1b8 <tcp_write+0x84>
 800f1aa:	4bae      	ldr	r3, [pc, #696]	@ (800f464 <tcp_write+0x330>)
 800f1ac:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800f1b0:	49ad      	ldr	r1, [pc, #692]	@ (800f468 <tcp_write+0x334>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f1b2:	48ae      	ldr	r0, [pc, #696]	@ (800f46c <tcp_write+0x338>)
 800f1b4:	f006 fcea 	bl	8015b8c <iprintf>
  queuelen = pcb->snd_queuelen;
 800f1b8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800f1bc:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800f1be:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800f1c0:	b9dd      	cbnz	r5, 800f1fa <tcp_write+0xc6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f1c2:	f8b4 7068 	ldrh.w	r7, [r4, #104]	@ 0x68
 800f1c6:	2f00      	cmp	r7, #0
 800f1c8:	f000 81b7 	beq.w	800f53a <tcp_write+0x406>
 800f1cc:	4ba5      	ldr	r3, [pc, #660]	@ (800f464 <tcp_write+0x330>)
 800f1ce:	f240 224d 	movw	r2, #589	@ 0x24d
 800f1d2:	49a7      	ldr	r1, [pc, #668]	@ (800f470 <tcp_write+0x33c>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f1d4:	46a8      	mov	r8, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f1d6:	48a5      	ldr	r0, [pc, #660]	@ (800f46c <tcp_write+0x338>)
  u16_t extendlen = 0;
 800f1d8:	46a9      	mov	r9, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f1da:	f006 fcd7 	bl	8015b8c <iprintf>
  u16_t oversize_used = 0;
 800f1de:	462e      	mov	r6, r5
  u16_t pos = 0; /* position in 'arg' data */
 800f1e0:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 800f1e2:	9505      	str	r5, [sp, #20]
 800f1e4:	e0a0      	b.n	800f328 <tcp_write+0x1f4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f1e6:	b913      	cbnz	r3, 800f1ee <tcp_write+0xba>
 800f1e8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d0e4      	beq.n	800f1b8 <tcp_write+0x84>
 800f1ee:	4b9d      	ldr	r3, [pc, #628]	@ (800f464 <tcp_write+0x330>)
 800f1f0:	f240 125b 	movw	r2, #347	@ 0x15b
 800f1f4:	499f      	ldr	r1, [pc, #636]	@ (800f474 <tcp_write+0x340>)
 800f1f6:	e7dc      	b.n	800f1b2 <tcp_write+0x7e>
         last_unsent = last_unsent->next);
 800f1f8:	9d05      	ldr	r5, [sp, #20]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f1fa:	682b      	ldr	r3, [r5, #0]
 800f1fc:	46a8      	mov	r8, r5
 800f1fe:	9305      	str	r3, [sp, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1f9      	bne.n	800f1f8 <tcp_write+0xc4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f204:	7aae      	ldrb	r6, [r5, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f206:	892b      	ldrh	r3, [r5, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f208:	00b6      	lsls	r6, r6, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f20a:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f20c:	f006 0604 	and.w	r6, r6, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f210:	4433      	add	r3, r6
 800f212:	429a      	cmp	r2, r3
 800f214:	da06      	bge.n	800f224 <tcp_write+0xf0>
 800f216:	4b93      	ldr	r3, [pc, #588]	@ (800f464 <tcp_write+0x330>)
 800f218:	f240 12e9 	movw	r2, #489	@ 0x1e9
 800f21c:	4996      	ldr	r1, [pc, #600]	@ (800f478 <tcp_write+0x344>)
 800f21e:	4893      	ldr	r0, [pc, #588]	@ (800f46c <tcp_write+0x338>)
 800f220:	f006 fcb4 	bl	8015b8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f224:	892f      	ldrh	r7, [r5, #8]
 800f226:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800f228:	f8b4 9068 	ldrh.w	r9, [r4, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f22c:	1bdf      	subs	r7, r3, r7
    oversize = pcb->unsent_oversize;
 800f22e:	f8ad 903e 	strh.w	r9, [sp, #62]	@ 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f232:	1bbf      	subs	r7, r7, r6
 800f234:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 800f236:	f1b9 0f00 	cmp.w	r9, #0
 800f23a:	d05a      	beq.n	800f2f2 <tcp_write+0x1be>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f23c:	45b9      	cmp	r9, r7
 800f23e:	d906      	bls.n	800f24e <tcp_write+0x11a>
 800f240:	4b88      	ldr	r3, [pc, #544]	@ (800f464 <tcp_write+0x330>)
 800f242:	f240 12fb 	movw	r2, #507	@ 0x1fb
 800f246:	498d      	ldr	r1, [pc, #564]	@ (800f47c <tcp_write+0x348>)
 800f248:	4888      	ldr	r0, [pc, #544]	@ (800f46c <tcp_write+0x338>)
 800f24a:	f006 fc9f 	bl	8015b8c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f24e:	45d1      	cmp	r9, sl
 800f250:	464e      	mov	r6, r9
 800f252:	bf28      	it	cs
 800f254:	4656      	movcs	r6, sl
 800f256:	42be      	cmp	r6, r7
 800f258:	bf28      	it	cs
 800f25a:	463e      	movcs	r6, r7
      oversize -= oversize_used;
 800f25c:	eba9 0906 	sub.w	r9, r9, r6
 800f260:	fa1f f389 	uxth.w	r3, r9
 800f264:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d137      	bne.n	800f2dc <tcp_write+0x1a8>
      space -= oversize_used;
 800f26c:	1bbf      	subs	r7, r7, r6
 800f26e:	b2bf      	uxth	r7, r7
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f270:	4556      	cmp	r6, sl
 800f272:	f080 815b 	bcs.w	800f52c <tcp_write+0x3f8>
 800f276:	2f00      	cmp	r7, #0
 800f278:	f000 815c 	beq.w	800f534 <tcp_write+0x400>
 800f27c:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800f280:	f1b9 0f00 	cmp.w	r9, #0
 800f284:	f000 8157 	beq.w	800f536 <tcp_write+0x402>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f288:	ebaa 0906 	sub.w	r9, sl, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f28e:	45b9      	cmp	r9, r7
 800f290:	bfa8      	it	ge
 800f292:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f294:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f296:	fa1f f589 	uxth.w	r5, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f29a:	d52d      	bpl.n	800f2f8 <tcp_write+0x1c4>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f29c:	2301      	movs	r3, #1
 800f29e:	463a      	mov	r2, r7
 800f2a0:	4629      	mov	r1, r5
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	9302      	str	r3, [sp, #8]
 800f2a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2a8:	e9cd 4300 	strd	r4, r3, [sp]
 800f2ac:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800f2b0:	f7ff fd78 	bl	800eda4 <tcp_pbuf_prealloc>
 800f2b4:	4683      	mov	fp, r0
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f000 81ab 	beq.w	800f612 <tcp_write+0x4de>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f2bc:	9b08      	ldr	r3, [sp, #32]
 800f2be:	462a      	mov	r2, r5
 800f2c0:	6840      	ldr	r0, [r0, #4]
 800f2c2:	1999      	adds	r1, r3, r6
 800f2c4:	f006 fe6d 	bl	8015fa2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800f2c8:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800f2ca:	f7fd fac5 	bl	800c858 <pbuf_clen>
 800f2ce:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800f2d0:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800f2d4:	4403      	add	r3, r0
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	9306      	str	r3, [sp, #24]
 800f2da:	e020      	b.n	800f31e <tcp_write+0x1ea>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f2dc:	45b2      	cmp	sl, r6
 800f2de:	f000 8131 	beq.w	800f544 <tcp_write+0x410>
 800f2e2:	4b60      	ldr	r3, [pc, #384]	@ (800f464 <tcp_write+0x330>)
 800f2e4:	f240 2203 	movw	r2, #515	@ 0x203
 800f2e8:	4965      	ldr	r1, [pc, #404]	@ (800f480 <tcp_write+0x34c>)
 800f2ea:	4860      	ldr	r0, [pc, #384]	@ (800f46c <tcp_write+0x338>)
 800f2ec:	f006 fc4e 	bl	8015b8c <iprintf>
 800f2f0:	e7bc      	b.n	800f26c <tcp_write+0x138>
  u16_t pos = 0; /* position in 'arg' data */
 800f2f2:	464d      	mov	r5, r9
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f2f4:	464e      	mov	r6, r9
 800f2f6:	e7bb      	b.n	800f270 <tcp_write+0x13c>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f2f8:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f2fc:	465b      	mov	r3, fp
 800f2fe:	f8db b000 	ldr.w	fp, [fp]
 800f302:	f1bb 0f00 	cmp.w	fp, #0
 800f306:	d1f9      	bne.n	800f2fc <tcp_write+0x1c8>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f308:	7b1a      	ldrb	r2, [r3, #12]
 800f30a:	2a3f      	cmp	r2, #63	@ 0x3f
 800f30c:	d81d      	bhi.n	800f34a <tcp_write+0x216>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f30e:	895a      	ldrh	r2, [r3, #10]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f314:	9a08      	ldr	r2, [sp, #32]
 800f316:	429a      	cmp	r2, r3
 800f318:	d117      	bne.n	800f34a <tcp_write+0x216>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f31a:	b976      	cbnz	r6, 800f33a <tcp_write+0x206>
          extendlen = seglen;
 800f31c:	46a9      	mov	r9, r5
      pos += seglen;
 800f31e:	1977      	adds	r7, r6, r5
      seg = last_unsent;
 800f320:	4645      	mov	r5, r8
      pos += seglen;
 800f322:	f8cd b014 	str.w	fp, [sp, #20]
 800f326:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f32a:	f04f 0b00 	mov.w	fp, #0
 800f32e:	f003 0301 	and.w	r3, r3, #1
 800f332:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 800f336:	930c      	str	r3, [sp, #48]	@ 0x30
 800f338:	e0c9      	b.n	800f4ce <tcp_write+0x39a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f33a:	4b4a      	ldr	r3, [pc, #296]	@ (800f464 <tcp_write+0x330>)
 800f33c:	f44f 720d 	mov.w	r2, #564	@ 0x234
 800f340:	4950      	ldr	r1, [pc, #320]	@ (800f484 <tcp_write+0x350>)
 800f342:	484a      	ldr	r0, [pc, #296]	@ (800f46c <tcp_write+0x338>)
 800f344:	f006 fc22 	bl	8015b8c <iprintf>
 800f348:	e7e8      	b.n	800f31c <tcp_write+0x1e8>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f34a:	2201      	movs	r2, #1
 800f34c:	4629      	mov	r1, r5
 800f34e:	2000      	movs	r0, #0
 800f350:	f7fd f9a8 	bl	800c6a4 <pbuf_alloc>
 800f354:	4683      	mov	fp, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	f000 815b 	beq.w	800f612 <tcp_write+0x4de>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f35c:	9b08      	ldr	r3, [sp, #32]
 800f35e:	4433      	add	r3, r6
 800f360:	6043      	str	r3, [r0, #4]
 800f362:	e7b2      	b.n	800f2ca <tcp_write+0x196>
    u16_t left = len - pos;
 800f364:	ebaa 0307 	sub.w	r3, sl, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800f368:	9a07      	ldr	r2, [sp, #28]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	4293      	cmp	r3, r2
 800f36e:	bf28      	it	cs
 800f370:	4613      	movcs	r3, r2
 800f372:	b29b      	uxth	r3, r3
 800f374:	9309      	str	r3, [sp, #36]	@ 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f378:	b35b      	cbz	r3, 800f3d2 <tcp_write+0x29e>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f37a:	fabb f38b 	clz	r3, fp
 800f37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f380:	2036      	movs	r0, #54	@ 0x36
 800f382:	095b      	lsrs	r3, r3, #5
 800f384:	9302      	str	r3, [sp, #8]
 800f386:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f388:	e9cd 4300 	strd	r4, r3, [sp]
 800f38c:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800f390:	f7ff fd08 	bl	800eda4 <tcp_pbuf_prealloc>
 800f394:	4605      	mov	r5, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	d03b      	beq.n	800f412 <tcp_write+0x2de>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f39a:	8943      	ldrh	r3, [r0, #10]
 800f39c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d206      	bcs.n	800f3b0 <tcp_write+0x27c>
 800f3a2:	4b30      	ldr	r3, [pc, #192]	@ (800f464 <tcp_write+0x330>)
 800f3a4:	f240 2269 	movw	r2, #617	@ 0x269
 800f3a8:	4937      	ldr	r1, [pc, #220]	@ (800f488 <tcp_write+0x354>)
 800f3aa:	4830      	ldr	r0, [pc, #192]	@ (800f46c <tcp_write+0x338>)
 800f3ac:	f006 fbee 	bl	8015b8c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f3b0:	6868      	ldr	r0, [r5, #4]
 800f3b2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800f3b6:	19d9      	adds	r1, r3, r7
 800f3b8:	f006 fdf3 	bl	8015fa2 <memcpy>
    queuelen += pbuf_clen(p);
 800f3bc:	4628      	mov	r0, r5
 800f3be:	f7fd fa4b 	bl	800c858 <pbuf_clen>
 800f3c2:	9b06      	ldr	r3, [sp, #24]
 800f3c4:	4403      	add	r3, r0
 800f3c6:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f3c8:	2b10      	cmp	r3, #16
    queuelen += pbuf_clen(p);
 800f3ca:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f3cc:	d962      	bls.n	800f494 <tcp_write+0x360>
      pbuf_free(p);
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	e01d      	b.n	800f40e <tcp_write+0x2da>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f3d2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800f3d6:	b133      	cbz	r3, 800f3e6 <tcp_write+0x2b2>
 800f3d8:	4b22      	ldr	r3, [pc, #136]	@ (800f464 <tcp_write+0x330>)
 800f3da:	f44f 721d 	mov.w	r2, #628	@ 0x274
 800f3de:	492b      	ldr	r1, [pc, #172]	@ (800f48c <tcp_write+0x358>)
 800f3e0:	4822      	ldr	r0, [pc, #136]	@ (800f46c <tcp_write+0x338>)
 800f3e2:	f006 fbd3 	bl	8015b8c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3ea:	2036      	movs	r0, #54	@ 0x36
 800f3ec:	f7fd f95a 	bl	800c6a4 <pbuf_alloc>
 800f3f0:	b178      	cbz	r0, 800f412 <tcp_write+0x2de>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f3f2:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f3f4:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f3f6:	900d      	str	r0, [sp, #52]	@ 0x34
 800f3f8:	443a      	add	r2, r7
 800f3fa:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f3fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f400:	2036      	movs	r0, #54	@ 0x36
 800f402:	f7fd f94f 	bl	800c6a4 <pbuf_alloc>
 800f406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f408:	4605      	mov	r5, r0
 800f40a:	bb30      	cbnz	r0, 800f45a <tcp_write+0x326>
        pbuf_free(p2);
 800f40c:	4618      	mov	r0, r3
      pbuf_free(p);
 800f40e:	f7fd f8df 	bl	800c5d0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f412:	8b63      	ldrh	r3, [r4, #26]
 800f414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f418:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800f41a:	9b05      	ldr	r3, [sp, #20]
 800f41c:	b113      	cbz	r3, 800f424 <tcp_write+0x2f0>
    pbuf_free(concat_p);
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fd f8d6 	bl	800c5d0 <pbuf_free>
  if (queue != NULL) {
 800f424:	f1bb 0f00 	cmp.w	fp, #0
 800f428:	d002      	beq.n	800f430 <tcp_write+0x2fc>
    tcp_segs_free(queue);
 800f42a:	4658      	mov	r0, fp
 800f42c:	f7fd fd0c 	bl	800ce48 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800f430:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800f434:	2b00      	cmp	r3, #0
 800f436:	f43f aeac 	beq.w	800f192 <tcp_write+0x5e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f43a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f47f aea8 	bne.w	800f192 <tcp_write+0x5e>
 800f442:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f444:	2b00      	cmp	r3, #0
 800f446:	f47f aea4 	bne.w	800f192 <tcp_write+0x5e>
 800f44a:	4b06      	ldr	r3, [pc, #24]	@ (800f464 <tcp_write+0x330>)
 800f44c:	f240 322a 	movw	r2, #810	@ 0x32a
 800f450:	490f      	ldr	r1, [pc, #60]	@ (800f490 <tcp_write+0x35c>)
 800f452:	4806      	ldr	r0, [pc, #24]	@ (800f46c <tcp_write+0x338>)
 800f454:	f006 fb9a 	bl	8015b8c <iprintf>
 800f458:	e69b      	b.n	800f192 <tcp_write+0x5e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800f45a:	4619      	mov	r1, r3
 800f45c:	f7fd fa20 	bl	800c8a0 <pbuf_cat>
 800f460:	e7ac      	b.n	800f3bc <tcp_write+0x288>
 800f462:	bf00      	nop
 800f464:	0801806b 	.word	0x0801806b
 800f468:	08018242 	.word	0x08018242
 800f46c:	080169d3 	.word	0x080169d3
 800f470:	0801832c 	.word	0x0801832c
 800f474:	0801827c 	.word	0x0801827c
 800f478:	080182ae 	.word	0x080182ae
 800f47c:	080182c5 	.word	0x080182c5
 800f480:	080182e5 	.word	0x080182e5
 800f484:	08018303 	.word	0x08018303
 800f488:	0801835b 	.word	0x0801835b
 800f48c:	08018399 	.word	0x08018399
 800f490:	08018425 	.word	0x08018425
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f494:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800f496:	2200      	movs	r2, #0
 800f498:	4629      	mov	r1, r5
 800f49a:	4620      	mov	r0, r4
 800f49c:	443b      	add	r3, r7
 800f49e:	9200      	str	r2, [sp, #0]
 800f4a0:	f7ff fcd0 	bl	800ee44 <tcp_create_segment>
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d0b3      	beq.n	800f412 <tcp_write+0x2de>
    if (queue == NULL) {
 800f4aa:	f1bb 0f00 	cmp.w	fp, #0
 800f4ae:	d03b      	beq.n	800f528 <tcp_write+0x3f4>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f4b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4b2:	b933      	cbnz	r3, 800f4c2 <tcp_write+0x38e>
 800f4b4:	4b5b      	ldr	r3, [pc, #364]	@ (800f624 <tcp_write+0x4f0>)
 800f4b6:	f240 22ae 	movw	r2, #686	@ 0x2ae
 800f4ba:	495b      	ldr	r1, [pc, #364]	@ (800f628 <tcp_write+0x4f4>)
 800f4bc:	485b      	ldr	r0, [pc, #364]	@ (800f62c <tcp_write+0x4f8>)
 800f4be:	f006 fb65 	bl	8015b8c <iprintf>
      prev_seg->next = seg;
 800f4c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4c4:	601d      	str	r5, [r3, #0]
    pos += seglen;
 800f4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    prev_seg = seg;
 800f4c8:	950b      	str	r5, [sp, #44]	@ 0x2c
    pos += seglen;
 800f4ca:	443b      	add	r3, r7
 800f4cc:	b29f      	uxth	r7, r3
  while (pos < len) {
 800f4ce:	4557      	cmp	r7, sl
 800f4d0:	f4ff af48 	bcc.w	800f364 <tcp_write+0x230>
  if (oversize_used > 0) {
 800f4d4:	b146      	cbz	r6, 800f4e8 <tcp_write+0x3b4>
    for (p = last_unsent->p; p; p = p->next) {
 800f4d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f4da:	2f00      	cmp	r7, #0
 800f4dc:	d136      	bne.n	800f54c <tcp_write+0x418>
    last_unsent->len += oversize_used;
 800f4de:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800f4e2:	441e      	add	r6, r3
 800f4e4:	f8a8 6008 	strh.w	r6, [r8, #8]
  pcb->unsent_oversize = oversize;
 800f4e8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800f4ec:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (concat_p != NULL) {
 800f4f0:	9b05      	ldr	r3, [sp, #20]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d03b      	beq.n	800f56e <tcp_write+0x43a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f4f6:	f1b8 0f00 	cmp.w	r8, #0
 800f4fa:	d106      	bne.n	800f50a <tcp_write+0x3d6>
 800f4fc:	4b49      	ldr	r3, [pc, #292]	@ (800f624 <tcp_write+0x4f0>)
 800f4fe:	f240 22e3 	movw	r2, #739	@ 0x2e3
 800f502:	494b      	ldr	r1, [pc, #300]	@ (800f630 <tcp_write+0x4fc>)
 800f504:	4849      	ldr	r0, [pc, #292]	@ (800f62c <tcp_write+0x4f8>)
 800f506:	f006 fb41 	bl	8015b8c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800f50a:	9905      	ldr	r1, [sp, #20]
 800f50c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f510:	f7fd f9c6 	bl	800c8a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f514:	9a05      	ldr	r2, [sp, #20]
 800f516:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800f51a:	8912      	ldrh	r2, [r2, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800f522:	f8c8 b000 	str.w	fp, [r8]
 800f526:	e04a      	b.n	800f5be <tcp_write+0x48a>
      queue = seg;
 800f528:	4683      	mov	fp, r0
 800f52a:	e7cc      	b.n	800f4c6 <tcp_write+0x392>
 800f52c:	4637      	mov	r7, r6
  u16_t extendlen = 0;
 800f52e:	f04f 0900 	mov.w	r9, #0
 800f532:	e6f9      	b.n	800f328 <tcp_write+0x1f4>
 800f534:	46b9      	mov	r9, r7
 800f536:	4637      	mov	r7, r6
 800f538:	e6f6      	b.n	800f328 <tcp_write+0x1f4>
 800f53a:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800f53c:	463e      	mov	r6, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f53e:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800f540:	9705      	str	r7, [sp, #20]
 800f542:	e6f1      	b.n	800f328 <tcp_write+0x1f4>
 800f544:	f04f 0b00 	mov.w	fp, #0
  u16_t extendlen = 0;
 800f548:	46d9      	mov	r9, fp
 800f54a:	e7c3      	b.n	800f4d4 <tcp_write+0x3a0>
      p->tot_len += oversize_used;
 800f54c:	893b      	ldrh	r3, [r7, #8]
 800f54e:	4433      	add	r3, r6
 800f550:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	b94b      	cbnz	r3, 800f56a <tcp_write+0x436>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4632      	mov	r2, r6
 800f55a:	8978      	ldrh	r0, [r7, #10]
 800f55c:	9908      	ldr	r1, [sp, #32]
 800f55e:	4418      	add	r0, r3
 800f560:	f006 fd1f 	bl	8015fa2 <memcpy>
        p->len += oversize_used;
 800f564:	897b      	ldrh	r3, [r7, #10]
 800f566:	4433      	add	r3, r6
 800f568:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f56a:	683f      	ldr	r7, [r7, #0]
 800f56c:	e7b5      	b.n	800f4da <tcp_write+0x3a6>
  } else if (extendlen > 0) {
 800f56e:	f1b9 0f00 	cmp.w	r9, #0
 800f572:	d01f      	beq.n	800f5b4 <tcp_write+0x480>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f574:	f1b8 0f00 	cmp.w	r8, #0
 800f578:	d002      	beq.n	800f580 <tcp_write+0x44c>
 800f57a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f57e:	b933      	cbnz	r3, 800f58e <tcp_write+0x45a>
 800f580:	4b28      	ldr	r3, [pc, #160]	@ (800f624 <tcp_write+0x4f0>)
 800f582:	f240 22e9 	movw	r2, #745	@ 0x2e9
 800f586:	492b      	ldr	r1, [pc, #172]	@ (800f634 <tcp_write+0x500>)
 800f588:	4828      	ldr	r0, [pc, #160]	@ (800f62c <tcp_write+0x4f8>)
 800f58a:	f006 faff 	bl	8015b8c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f58e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800f592:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f594:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800f596:	444a      	add	r2, r9
 800f598:	b292      	uxth	r2, r2
 800f59a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f59c:	b941      	cbnz	r1, 800f5b0 <tcp_write+0x47c>
    p->len += extendlen;
 800f59e:	895a      	ldrh	r2, [r3, #10]
 800f5a0:	444a      	add	r2, r9
 800f5a2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f5a4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800f5a8:	4499      	add	r9, r3
 800f5aa:	f8a8 9008 	strh.w	r9, [r8, #8]
  if (last_unsent == NULL) {
 800f5ae:	e7b8      	b.n	800f522 <tcp_write+0x3ee>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	e7ee      	b.n	800f592 <tcp_write+0x45e>
  if (last_unsent == NULL) {
 800f5b4:	f1b8 0f00 	cmp.w	r8, #0
 800f5b8:	d1b3      	bne.n	800f522 <tcp_write+0x3ee>
    pcb->unsent = queue;
 800f5ba:	f8c4 b06c 	str.w	fp, [r4, #108]	@ 0x6c
  pcb->snd_lbb += len;
 800f5be:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800f5c0:	4453      	add	r3, sl
 800f5c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800f5c4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800f5c8:	eba3 030a 	sub.w	r3, r3, sl
 800f5cc:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800f5d0:	9b06      	ldr	r3, [sp, #24]
 800f5d2:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800f5d6:	b153      	cbz	r3, 800f5ee <tcp_write+0x4ba>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f5d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f5da:	b943      	cbnz	r3, 800f5ee <tcp_write+0x4ba>
 800f5dc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f5de:	b933      	cbnz	r3, 800f5ee <tcp_write+0x4ba>
 800f5e0:	4b10      	ldr	r3, [pc, #64]	@ (800f624 <tcp_write+0x4f0>)
 800f5e2:	f240 3215 	movw	r2, #789	@ 0x315
 800f5e6:	4914      	ldr	r1, [pc, #80]	@ (800f638 <tcp_write+0x504>)
 800f5e8:	4810      	ldr	r0, [pc, #64]	@ (800f62c <tcp_write+0x4f8>)
 800f5ea:	f006 facf 	bl	8015b8c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f5ee:	b10d      	cbz	r5, 800f5f4 <tcp_write+0x4c0>
 800f5f0:	68eb      	ldr	r3, [r5, #12]
 800f5f2:	b91b      	cbnz	r3, 800f5fc <tcp_write+0x4c8>
  return ERR_OK;
 800f5f4:	2000      	movs	r0, #0
}
 800f5f6:	b011      	add	sp, #68	@ 0x44
 800f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f5fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5fe:	0792      	lsls	r2, r2, #30
 800f600:	d4f8      	bmi.n	800f5f4 <tcp_write+0x4c0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f602:	899c      	ldrh	r4, [r3, #12]
 800f604:	2008      	movs	r0, #8
 800f606:	f7fc fa8b 	bl	800bb20 <lwip_htons>
 800f60a:	68eb      	ldr	r3, [r5, #12]
 800f60c:	4304      	orrs	r4, r0
 800f60e:	819c      	strh	r4, [r3, #12]
 800f610:	e7f0      	b.n	800f5f4 <tcp_write+0x4c0>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f612:	f04f 0b00 	mov.w	fp, #0
 800f616:	e6fc      	b.n	800f412 <tcp_write+0x2de>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f618:	f06f 000f 	mvn.w	r0, #15
 800f61c:	e7eb      	b.n	800f5f6 <tcp_write+0x4c2>
    return err;
 800f61e:	f06f 000a 	mvn.w	r0, #10
 800f622:	e7e8      	b.n	800f5f6 <tcp_write+0x4c2>
 800f624:	0801806b 	.word	0x0801806b
 800f628:	080183a7 	.word	0x080183a7
 800f62c:	080169d3 	.word	0x080169d3
 800f630:	080183b8 	.word	0x080183b8
 800f634:	080183f0 	.word	0x080183f0
 800f638:	08018425 	.word	0x08018425

0800f63c <tcp_split_unsent_seg>:
{
 800f63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f640:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f642:	4606      	mov	r6, r0
 800f644:	b930      	cbnz	r0, 800f654 <tcp_split_unsent_seg+0x18>
 800f646:	4b5d      	ldr	r3, [pc, #372]	@ (800f7bc <tcp_split_unsent_seg+0x180>)
 800f648:	f240 324e 	movw	r2, #846	@ 0x34e
 800f64c:	495c      	ldr	r1, [pc, #368]	@ (800f7c0 <tcp_split_unsent_seg+0x184>)
 800f64e:	485d      	ldr	r0, [pc, #372]	@ (800f7c4 <tcp_split_unsent_seg+0x188>)
 800f650:	f006 fa9c 	bl	8015b8c <iprintf>
  useg = pcb->unsent;
 800f654:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800f656:	2c00      	cmp	r4, #0
 800f658:	f000 80ac 	beq.w	800f7b4 <tcp_split_unsent_seg+0x178>
  if (split == 0) {
 800f65c:	b95d      	cbnz	r5, 800f676 <tcp_split_unsent_seg+0x3a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f65e:	4b57      	ldr	r3, [pc, #348]	@ (800f7bc <tcp_split_unsent_seg+0x180>)
 800f660:	f240 3256 	movw	r2, #854	@ 0x356
 800f664:	4958      	ldr	r1, [pc, #352]	@ (800f7c8 <tcp_split_unsent_seg+0x18c>)
 800f666:	4857      	ldr	r0, [pc, #348]	@ (800f7c4 <tcp_split_unsent_seg+0x188>)
 800f668:	f006 fa90 	bl	8015b8c <iprintf>
    return ERR_VAL;
 800f66c:	f06f 0005 	mvn.w	r0, #5
}
 800f670:	b003      	add	sp, #12
 800f672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800f676:	8923      	ldrh	r3, [r4, #8]
 800f678:	42ab      	cmp	r3, r5
 800f67a:	f240 8096 	bls.w	800f7aa <tcp_split_unsent_seg+0x16e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f67e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800f680:	42ab      	cmp	r3, r5
 800f682:	d20f      	bcs.n	800f6a4 <tcp_split_unsent_seg+0x68>
 800f684:	4b4d      	ldr	r3, [pc, #308]	@ (800f7bc <tcp_split_unsent_seg+0x180>)
 800f686:	f240 325e 	movw	r2, #862	@ 0x35e
 800f68a:	4950      	ldr	r1, [pc, #320]	@ (800f7cc <tcp_split_unsent_seg+0x190>)
 800f68c:	484d      	ldr	r0, [pc, #308]	@ (800f7c4 <tcp_split_unsent_seg+0x188>)
 800f68e:	f006 fa7d 	bl	8015b8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f692:	8923      	ldrh	r3, [r4, #8]
 800f694:	b933      	cbnz	r3, 800f6a4 <tcp_split_unsent_seg+0x68>
 800f696:	4b49      	ldr	r3, [pc, #292]	@ (800f7bc <tcp_split_unsent_seg+0x180>)
 800f698:	f240 325f 	movw	r2, #863	@ 0x35f
 800f69c:	494c      	ldr	r1, [pc, #304]	@ (800f7d0 <tcp_split_unsent_seg+0x194>)
 800f69e:	4849      	ldr	r0, [pc, #292]	@ (800f7c4 <tcp_split_unsent_seg+0x188>)
 800f6a0:	f006 fa74 	bl	8015b8c <iprintf>
  optflags = useg->flags;
 800f6a4:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f6a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
  remainder = useg->len - split;
 800f6ac:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f6b0:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f6b2:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800f6b6:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f6ba:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800f6be:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f6c2:	fa17 f181 	uxtah	r1, r7, r1
 800f6c6:	b289      	uxth	r1, r1
 800f6c8:	f7fc ffec 	bl	800c6a4 <pbuf_alloc>
  if (p == NULL) {
 800f6cc:	4681      	mov	r9, r0
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d070      	beq.n	800f7b4 <tcp_split_unsent_seg+0x178>
  offset = useg->p->tot_len - useg->len + split;
 800f6d2:	6860      	ldr	r0, [r4, #4]
 800f6d4:	8922      	ldrh	r2, [r4, #8]
 800f6d6:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f6d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800f6dc:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f6de:	4642      	mov	r2, r8
 800f6e0:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800f6e2:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	f7fd f999 	bl	800ca1c <pbuf_copy_partial>
 800f6ea:	4540      	cmp	r0, r8
 800f6ec:	d15f      	bne.n	800f7ae <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f6ee:	68e3      	ldr	r3, [r4, #12]
 800f6f0:	8998      	ldrh	r0, [r3, #12]
 800f6f2:	f7fc fa15 	bl	800bb20 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800f6f6:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f6fa:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800f6fc:	bf16      	itet	ne
 800f6fe:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f702:	f007 073f 	andeq.w	r7, r7, #63	@ 0x3f
    split_flags &= ~TCP_PSH;
 800f706:	f007 0737 	andne.w	r7, r7, #55	@ 0x37
  if (split_flags & TCP_FIN) {
 800f70a:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f70c:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800f70e:	bf48      	it	mi
 800f710:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f714:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800f716:	bf48      	it	mi
 800f718:	f007 07fe 	andmi.w	r7, r7, #254	@ 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f71c:	f7fc fa03 	bl	800bb26 <lwip_htonl>
 800f720:	4642      	mov	r2, r8
 800f722:	182b      	adds	r3, r5, r0
 800f724:	4649      	mov	r1, r9
 800f726:	4630      	mov	r0, r6
 800f728:	f8cd b000 	str.w	fp, [sp]
 800f72c:	f7ff fb8a 	bl	800ee44 <tcp_create_segment>
  if (seg == NULL) {
 800f730:	4680      	mov	r8, r0
 800f732:	2800      	cmp	r0, #0
 800f734:	d03e      	beq.n	800f7b4 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f736:	6860      	ldr	r0, [r4, #4]
 800f738:	eba5 050a 	sub.w	r5, r5, sl
 800f73c:	f7fd f88c 	bl	800c858 <pbuf_clen>
 800f740:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800f744:	fa1f f985 	uxth.w	r9, r5
 800f748:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f74a:	6860      	ldr	r0, [r4, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f74c:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f750:	8903      	ldrh	r3, [r0, #8]
 800f752:	fa13 f585 	uxtah	r5, r3, r5
 800f756:	b2a9      	uxth	r1, r5
 800f758:	f7fd f81c 	bl	800c794 <pbuf_realloc>
  useg->len -= remainder;
 800f75c:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f75e:	4638      	mov	r0, r7
  useg->len -= remainder;
 800f760:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f762:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800f764:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f768:	899d      	ldrh	r5, [r3, #12]
 800f76a:	f7fc f9d9 	bl	800bb20 <lwip_htons>
 800f76e:	68e3      	ldr	r3, [r4, #12]
 800f770:	4305      	orrs	r5, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f772:	6860      	ldr	r0, [r4, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f774:	819d      	strh	r5, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f776:	f7fd f86f 	bl	800c858 <pbuf_clen>
 800f77a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800f77e:	4418      	add	r0, r3
 800f780:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f784:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f788:	f7fd f866 	bl	800c858 <pbuf_clen>
 800f78c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800f790:	4418      	add	r0, r3
  seg->next = useg->next;
 800f792:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f794:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800f798:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800f79c:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800f7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7a4:	b90b      	cbnz	r3, 800f7aa <tcp_split_unsent_seg+0x16e>
    pcb->unsent_oversize = 0;
 800f7a6:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
    return ERR_OK;
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	e760      	b.n	800f670 <tcp_split_unsent_seg+0x34>
    pbuf_free(p);
 800f7ae:	4648      	mov	r0, r9
 800f7b0:	f7fc ff0e 	bl	800c5d0 <pbuf_free>
    return ERR_MEM;
 800f7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b8:	e75a      	b.n	800f670 <tcp_split_unsent_seg+0x34>
 800f7ba:	bf00      	nop
 800f7bc:	0801806b 	.word	0x0801806b
 800f7c0:	08018443 	.word	0x08018443
 800f7c4:	080169d3 	.word	0x080169d3
 800f7c8:	08018465 	.word	0x08018465
 800f7cc:	08018487 	.word	0x08018487
 800f7d0:	08018494 	.word	0x08018494

0800f7d4 <tcp_enqueue_flags>:
{
 800f7d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f7d8:	f011 0803 	ands.w	r8, r1, #3
{
 800f7dc:	4604      	mov	r4, r0
 800f7de:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f7e0:	d106      	bne.n	800f7f0 <tcp_enqueue_flags+0x1c>
 800f7e2:	4b3e      	ldr	r3, [pc, #248]	@ (800f8dc <tcp_enqueue_flags+0x108>)
 800f7e4:	f240 4213 	movw	r2, #1043	@ 0x413
 800f7e8:	493d      	ldr	r1, [pc, #244]	@ (800f8e0 <tcp_enqueue_flags+0x10c>)
 800f7ea:	483e      	ldr	r0, [pc, #248]	@ (800f8e4 <tcp_enqueue_flags+0x110>)
 800f7ec:	f006 f9ce 	bl	8015b8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f7f0:	b934      	cbnz	r4, 800f800 <tcp_enqueue_flags+0x2c>
 800f7f2:	4b3a      	ldr	r3, [pc, #232]	@ (800f8dc <tcp_enqueue_flags+0x108>)
 800f7f4:	f240 4215 	movw	r2, #1045	@ 0x415
 800f7f8:	493b      	ldr	r1, [pc, #236]	@ (800f8e8 <tcp_enqueue_flags+0x114>)
 800f7fa:	483a      	ldr	r0, [pc, #232]	@ (800f8e4 <tcp_enqueue_flags+0x110>)
 800f7fc:	f006 f9c6 	bl	8015b8c <iprintf>
  if (flags & TCP_SYN) {
 800f800:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f804:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f808:	2036      	movs	r0, #54	@ 0x36
 800f80a:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800f80e:	4649      	mov	r1, r9
 800f810:	f7fc ff48 	bl	800c6a4 <pbuf_alloc>
 800f814:	4605      	mov	r5, r0
 800f816:	b940      	cbnz	r0, 800f82a <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f818:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800f81a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f822:	8363      	strh	r3, [r4, #26]
}
 800f824:	b003      	add	sp, #12
 800f826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f82a:	8943      	ldrh	r3, [r0, #10]
 800f82c:	454b      	cmp	r3, r9
 800f82e:	d206      	bcs.n	800f83e <tcp_enqueue_flags+0x6a>
 800f830:	4b2a      	ldr	r3, [pc, #168]	@ (800f8dc <tcp_enqueue_flags+0x108>)
 800f832:	f240 423d 	movw	r2, #1085	@ 0x43d
 800f836:	492d      	ldr	r1, [pc, #180]	@ (800f8ec <tcp_enqueue_flags+0x118>)
 800f838:	482a      	ldr	r0, [pc, #168]	@ (800f8e4 <tcp_enqueue_flags+0x110>)
 800f83a:	f006 f9a7 	bl	8015b8c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f83e:	4629      	mov	r1, r5
 800f840:	9700      	str	r7, [sp, #0]
 800f842:	4632      	mov	r2, r6
 800f844:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800f846:	4620      	mov	r0, r4
 800f848:	f7ff fafc 	bl	800ee44 <tcp_create_segment>
 800f84c:	4605      	mov	r5, r0
 800f84e:	2800      	cmp	r0, #0
 800f850:	d0e2      	beq.n	800f818 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f852:	68c3      	ldr	r3, [r0, #12]
 800f854:	079a      	lsls	r2, r3, #30
 800f856:	d006      	beq.n	800f866 <tcp_enqueue_flags+0x92>
 800f858:	4b20      	ldr	r3, [pc, #128]	@ (800f8dc <tcp_enqueue_flags+0x108>)
 800f85a:	f240 4246 	movw	r2, #1094	@ 0x446
 800f85e:	4924      	ldr	r1, [pc, #144]	@ (800f8f0 <tcp_enqueue_flags+0x11c>)
 800f860:	4820      	ldr	r0, [pc, #128]	@ (800f8e4 <tcp_enqueue_flags+0x110>)
 800f862:	f006 f993 	bl	8015b8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f866:	892b      	ldrh	r3, [r5, #8]
 800f868:	b133      	cbz	r3, 800f878 <tcp_enqueue_flags+0xa4>
 800f86a:	4b1c      	ldr	r3, [pc, #112]	@ (800f8dc <tcp_enqueue_flags+0x108>)
 800f86c:	f240 4247 	movw	r2, #1095	@ 0x447
 800f870:	4920      	ldr	r1, [pc, #128]	@ (800f8f4 <tcp_enqueue_flags+0x120>)
 800f872:	481c      	ldr	r0, [pc, #112]	@ (800f8e4 <tcp_enqueue_flags+0x110>)
 800f874:	f006 f98a 	bl	8015b8c <iprintf>
  if (pcb->unsent == NULL) {
 800f878:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f87a:	b9db      	cbnz	r3, 800f8b4 <tcp_enqueue_flags+0xe0>
    pcb->unsent = seg;
 800f87c:	66e5      	str	r5, [r4, #108]	@ 0x6c
  pcb->unsent_oversize = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f884:	f1b8 0f00 	cmp.w	r8, #0
 800f888:	d008      	beq.n	800f89c <tcp_enqueue_flags+0xc8>
    pcb->snd_lbb++;
 800f88a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800f88c:	3301      	adds	r3, #1
 800f88e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800f890:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 800f892:	bf42      	ittt	mi
 800f894:	8b63      	ldrhmi	r3, [r4, #26]
 800f896:	f043 0320 	orrmi.w	r3, r3, #32
 800f89a:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f89c:	6868      	ldr	r0, [r5, #4]
 800f89e:	f7fc ffdb 	bl	800c858 <pbuf_clen>
 800f8a2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800f8a6:	4418      	add	r0, r3
 800f8a8:	b280      	uxth	r0, r0
 800f8aa:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800f8ae:	b938      	cbnz	r0, 800f8c0 <tcp_enqueue_flags+0xec>
  return ERR_OK;
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	e7b7      	b.n	800f824 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d1fb      	bne.n	800f8b4 <tcp_enqueue_flags+0xe0>
    useg->next = seg;
 800f8bc:	6015      	str	r5, [r2, #0]
 800f8be:	e7de      	b.n	800f87e <tcp_enqueue_flags+0xaa>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f8c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1f4      	bne.n	800f8b0 <tcp_enqueue_flags+0xdc>
 800f8c6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1f1      	bne.n	800f8b0 <tcp_enqueue_flags+0xdc>
 800f8cc:	4b03      	ldr	r3, [pc, #12]	@ (800f8dc <tcp_enqueue_flags+0x108>)
 800f8ce:	f240 4269 	movw	r2, #1129	@ 0x469
 800f8d2:	4909      	ldr	r1, [pc, #36]	@ (800f8f8 <tcp_enqueue_flags+0x124>)
 800f8d4:	4803      	ldr	r0, [pc, #12]	@ (800f8e4 <tcp_enqueue_flags+0x110>)
 800f8d6:	f006 f959 	bl	8015b8c <iprintf>
 800f8da:	e7e9      	b.n	800f8b0 <tcp_enqueue_flags+0xdc>
 800f8dc:	0801806b 	.word	0x0801806b
 800f8e0:	080184a2 	.word	0x080184a2
 800f8e4:	080169d3 	.word	0x080169d3
 800f8e8:	080184f7 	.word	0x080184f7
 800f8ec:	08018516 	.word	0x08018516
 800f8f0:	0801854f 	.word	0x0801854f
 800f8f4:	08018567 	.word	0x08018567
 800f8f8:	08018591 	.word	0x08018591

0800f8fc <tcp_send_fin>:
{
 800f8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f8fe:	4604      	mov	r4, r0
 800f900:	b930      	cbnz	r0, 800f910 <tcp_send_fin+0x14>
 800f902:	4b13      	ldr	r3, [pc, #76]	@ (800f950 <tcp_send_fin+0x54>)
 800f904:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800f908:	4912      	ldr	r1, [pc, #72]	@ (800f954 <tcp_send_fin+0x58>)
 800f90a:	4813      	ldr	r0, [pc, #76]	@ (800f958 <tcp_send_fin+0x5c>)
 800f90c:	f006 f93e 	bl	8015b8c <iprintf>
  if (pcb->unsent != NULL) {
 800f910:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800f912:	b14d      	cbz	r5, 800f928 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f914:	462f      	mov	r7, r5
 800f916:	682d      	ldr	r5, [r5, #0]
 800f918:	2d00      	cmp	r5, #0
 800f91a:	d1fb      	bne.n	800f914 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	8998      	ldrh	r0, [r3, #12]
 800f920:	f7fc f8fe 	bl	800bb20 <lwip_htons>
 800f924:	0743      	lsls	r3, r0, #29
 800f926:	d005      	beq.n	800f934 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f928:	4620      	mov	r0, r4
 800f92a:	2101      	movs	r1, #1
}
 800f92c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f930:	f7ff bf50 	b.w	800f7d4 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2001      	movs	r0, #1
 800f938:	899e      	ldrh	r6, [r3, #12]
 800f93a:	f7fc f8f1 	bl	800bb20 <lwip_htons>
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	4306      	orrs	r6, r0
}
 800f942:	4628      	mov	r0, r5
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f944:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f946:	8b63      	ldrh	r3, [r4, #26]
 800f948:	f043 0320 	orr.w	r3, r3, #32
 800f94c:	8363      	strh	r3, [r4, #26]
}
 800f94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f950:	0801806b 	.word	0x0801806b
 800f954:	080185b9 	.word	0x080185b9
 800f958:	080169d3 	.word	0x080169d3

0800f95c <tcp_rexmit_rto_prepare>:
{
 800f95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f960:	4604      	mov	r4, r0
 800f962:	b930      	cbnz	r0, 800f972 <tcp_rexmit_rto_prepare+0x16>
 800f964:	4b1c      	ldr	r3, [pc, #112]	@ (800f9d8 <tcp_rexmit_rto_prepare+0x7c>)
 800f966:	f240 6267 	movw	r2, #1639	@ 0x667
 800f96a:	491c      	ldr	r1, [pc, #112]	@ (800f9dc <tcp_rexmit_rto_prepare+0x80>)
 800f96c:	481c      	ldr	r0, [pc, #112]	@ (800f9e0 <tcp_rexmit_rto_prepare+0x84>)
 800f96e:	f006 f90d 	bl	8015b8c <iprintf>
  if (pcb->unacked == NULL) {
 800f972:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 800f974:	b945      	cbnz	r5, 800f988 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800f976:	f06f 0005 	mvn.w	r0, #5
}
 800f97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800f97e:	f7ff f9fb 	bl	800ed78 <tcp_output_segment_busy>
 800f982:	2800      	cmp	r0, #0
 800f984:	d1f7      	bne.n	800f976 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f986:	682d      	ldr	r5, [r5, #0]
 800f988:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800f98a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1f6      	bne.n	800f97e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800f990:	f7ff f9f2 	bl	800ed78 <tcp_output_segment_busy>
 800f994:	4606      	mov	r6, r0
 800f996:	2800      	cmp	r0, #0
 800f998:	d1ed      	bne.n	800f976 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800f99a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f99c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800f99e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  pcb->unacked = NULL;
 800f9a0:	e9c4 301b 	strd	r3, r0, [r4, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800f9a4:	8b63      	ldrh	r3, [r4, #26]
 800f9a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f9aa:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f9ac:	68eb      	ldr	r3, [r5, #12]
 800f9ae:	6858      	ldr	r0, [r3, #4]
 800f9b0:	f7fc f8b9 	bl	800bb26 <lwip_htonl>
 800f9b4:	68eb      	ldr	r3, [r5, #12]
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800f9bc:	8998      	ldrh	r0, [r3, #12]
 800f9be:	f7fc f8af 	bl	800bb20 <lwip_htons>
 800f9c2:	f010 0303 	ands.w	r3, r0, #3
 800f9c6:	4447      	add	r7, r8
  return ERR_OK;
 800f9c8:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f9ca:	bf18      	it	ne
 800f9cc:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800f9ce:	6366      	str	r6, [r4, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f9d0:	443b      	add	r3, r7
 800f9d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
  return ERR_OK;
 800f9d4:	e7d1      	b.n	800f97a <tcp_rexmit_rto_prepare+0x1e>
 800f9d6:	bf00      	nop
 800f9d8:	0801806b 	.word	0x0801806b
 800f9dc:	080185d3 	.word	0x080185d3
 800f9e0:	080169d3 	.word	0x080169d3

0800f9e4 <tcp_rexmit>:
{
 800f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	b930      	cbnz	r0, 800f9f8 <tcp_rexmit+0x14>
 800f9ea:	4b1b      	ldr	r3, [pc, #108]	@ (800fa58 <tcp_rexmit+0x74>)
 800f9ec:	f240 62c5 	movw	r2, #1733	@ 0x6c5
 800f9f0:	491a      	ldr	r1, [pc, #104]	@ (800fa5c <tcp_rexmit+0x78>)
 800f9f2:	481b      	ldr	r0, [pc, #108]	@ (800fa60 <tcp_rexmit+0x7c>)
 800f9f4:	f006 f8ca 	bl	8015b8c <iprintf>
  if (pcb->unacked == NULL) {
 800f9f8:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 800f9fa:	b915      	cbnz	r5, 800fa02 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800f9fc:	f06f 0005 	mvn.w	r0, #5
}
 800fa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800fa02:	4628      	mov	r0, r5
 800fa04:	f7ff f9b8 	bl	800ed78 <tcp_output_segment_busy>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d1f7      	bne.n	800f9fc <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800fa0c:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800fa0e:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
  pcb->unacked = seg->next;
 800fa12:	6723      	str	r3, [r4, #112]	@ 0x70
  while (*cur_seg &&
 800fa14:	6833      	ldr	r3, [r6, #0]
 800fa16:	b983      	cbnz	r3, 800fa3a <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800fa18:	6833      	ldr	r3, [r6, #0]
 800fa1a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800fa1c:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800fa1e:	682b      	ldr	r3, [r5, #0]
 800fa20:	b90b      	cbnz	r3, 800fa26 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800fa22:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (pcb->nrtx < 0xFF) {
 800fa26:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  pcb->rttest = 0;
 800fa2a:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800fa2c:	2bff      	cmp	r3, #255	@ 0xff
  pcb->rttest = 0;
 800fa2e:	6360      	str	r0, [r4, #52]	@ 0x34
    ++pcb->nrtx;
 800fa30:	bf1c      	itt	ne
 800fa32:	3301      	addne	r3, #1
 800fa34:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
  return ERR_OK;
 800fa38:	e7e2      	b.n	800fa00 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	6858      	ldr	r0, [r3, #4]
 800fa3e:	f7fc f872 	bl	800bb26 <lwip_htonl>
 800fa42:	68eb      	ldr	r3, [r5, #12]
 800fa44:	4607      	mov	r7, r0
 800fa46:	6858      	ldr	r0, [r3, #4]
 800fa48:	f7fc f86d 	bl	800bb26 <lwip_htonl>
 800fa4c:	1a3f      	subs	r7, r7, r0
  while (*cur_seg &&
 800fa4e:	2f00      	cmp	r7, #0
 800fa50:	dae2      	bge.n	800fa18 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800fa52:	6836      	ldr	r6, [r6, #0]
 800fa54:	e7de      	b.n	800fa14 <tcp_rexmit+0x30>
 800fa56:	bf00      	nop
 800fa58:	0801806b 	.word	0x0801806b
 800fa5c:	080185f7 	.word	0x080185f7
 800fa60:	080169d3 	.word	0x080169d3

0800fa64 <tcp_rexmit_fast>:
{
 800fa64:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fa66:	4604      	mov	r4, r0
 800fa68:	b930      	cbnz	r0, 800fa78 <tcp_rexmit_fast+0x14>
 800fa6a:	4b15      	ldr	r3, [pc, #84]	@ (800fac0 <tcp_rexmit_fast+0x5c>)
 800fa6c:	f240 62fd 	movw	r2, #1789	@ 0x6fd
 800fa70:	4914      	ldr	r1, [pc, #80]	@ (800fac4 <tcp_rexmit_fast+0x60>)
 800fa72:	4815      	ldr	r0, [pc, #84]	@ (800fac8 <tcp_rexmit_fast+0x64>)
 800fa74:	f006 f88a 	bl	8015b8c <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fa78:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa7a:	b1fb      	cbz	r3, 800fabc <tcp_rexmit_fast+0x58>
 800fa7c:	8b63      	ldrh	r3, [r4, #26]
 800fa7e:	075b      	lsls	r3, r3, #29
 800fa80:	d41c      	bmi.n	800fabc <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fa82:	4620      	mov	r0, r4
 800fa84:	f7ff ffae 	bl	800f9e4 <tcp_rexmit>
 800fa88:	b9c0      	cbnz	r0, 800fabc <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fa8a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800fa8e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      pcb->rtime = 0;
 800fa92:	8620      	strh	r0, [r4, #48]	@ 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fa94:	4299      	cmp	r1, r3
 800fa96:	bf28      	it	cs
 800fa98:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fa9a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fa9c:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fa9e:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800faa0:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800faa4:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800faa6:	bf88      	it	hi
 800faa8:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800faaa:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800faac:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fab0:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fab4:	8b63      	ldrh	r3, [r4, #26]
 800fab6:	f043 0304 	orr.w	r3, r3, #4
 800faba:	8363      	strh	r3, [r4, #26]
}
 800fabc:	bd38      	pop	{r3, r4, r5, pc}
 800fabe:	bf00      	nop
 800fac0:	0801806b 	.word	0x0801806b
 800fac4:	0801860f 	.word	0x0801860f
 800fac8:	080169d3 	.word	0x080169d3

0800facc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800facc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800face:	9e06      	ldr	r6, [sp, #24]
 800fad0:	461c      	mov	r4, r3
 800fad2:	4605      	mov	r5, r0
 800fad4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800fad8:	4608      	mov	r0, r1
 800fada:	4611      	mov	r1, r2
 800fadc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800fae0:	e9cd 3200 	strd	r3, r2, [sp]
 800fae4:	4633      	mov	r3, r6
 800fae6:	4622      	mov	r2, r4
 800fae8:	f7ff fac2 	bl	800f070 <tcp_rst_common.isra.0>
  if (p != NULL) {
 800faec:	4601      	mov	r1, r0
 800faee:	b138      	cbz	r0, 800fb00 <tcp_rst+0x34>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800faf0:	4633      	mov	r3, r6
 800faf2:	4622      	mov	r2, r4
 800faf4:	4628      	mov	r0, r5
  }
}
 800faf6:	b002      	add	sp, #8
 800faf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fafc:	f7ff baee 	b.w	800f0dc <tcp_output_control_segment>
}
 800fb00:	b002      	add	sp, #8
 800fb02:	bd70      	pop	{r4, r5, r6, pc}

0800fb04 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800fb04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb06:	4605      	mov	r5, r0
 800fb08:	461c      	mov	r4, r3
 800fb0a:	4608      	mov	r0, r1
 800fb0c:	9e06      	ldr	r6, [sp, #24]
 800fb0e:	4611      	mov	r1, r2
 800fb10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800fb14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  if (netif) {
 800fb18:	b185      	cbz	r5, 800fb3c <tcp_rst_netif+0x38>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800fb1a:	e9cd 3200 	strd	r3, r2, [sp]
 800fb1e:	4633      	mov	r3, r6
 800fb20:	4622      	mov	r2, r4
 800fb22:	f7ff faa5 	bl	800f070 <tcp_rst_common.isra.0>
    if (p != NULL) {
 800fb26:	4601      	mov	r1, r0
 800fb28:	b140      	cbz	r0, 800fb3c <tcp_rst_netif+0x38>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800fb2a:	4633      	mov	r3, r6
 800fb2c:	4622      	mov	r2, r4
 800fb2e:	2000      	movs	r0, #0
 800fb30:	9506      	str	r5, [sp, #24]
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800fb32:	b002      	add	sp, #8
 800fb34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800fb38:	f7ff b9f2 	b.w	800ef20 <tcp_output_control_segment_netif>
}
 800fb3c:	b002      	add	sp, #8
 800fb3e:	bd70      	pop	{r4, r5, r6, pc}

0800fb40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fb40:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fb42:	4604      	mov	r4, r0
 800fb44:	b930      	cbnz	r0, 800fb54 <tcp_send_empty_ack+0x14>
 800fb46:	4b14      	ldr	r3, [pc, #80]	@ (800fb98 <tcp_send_empty_ack+0x58>)
 800fb48:	f44f 6203 	mov.w	r2, #2096	@ 0x830
 800fb4c:	4913      	ldr	r1, [pc, #76]	@ (800fb9c <tcp_send_empty_ack+0x5c>)
 800fb4e:	4814      	ldr	r0, [pc, #80]	@ (800fba0 <tcp_send_empty_ack+0x60>)
 800fb50:	f006 f81c 	bl	8015b8c <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fb54:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800fb56:	f7fb ffe6 	bl	800bb26 <lwip_htonl>
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7ff fa50 	bl	800f004 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800fb64:	4605      	mov	r5, r0
 800fb66:	b930      	cbnz	r0, 800fb76 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb68:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fb6a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb6e:	f043 0303 	orr.w	r3, r3, #3
 800fb72:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800fb74:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fb76:	f7ff fa6b 	bl	800f050 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb7a:	1d23      	adds	r3, r4, #4
 800fb7c:	4622      	mov	r2, r4
 800fb7e:	4629      	mov	r1, r5
 800fb80:	4620      	mov	r0, r4
 800fb82:	f7ff faab 	bl	800f0dc <tcp_output_control_segment>
  if (err != ERR_OK) {
 800fb86:	8b63      	ldrh	r3, [r4, #26]
 800fb88:	b118      	cbz	r0, 800fb92 <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb8a:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	e7ef      	b.n	800fb72 <tcp_send_empty_ack+0x32>
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	e7fa      	b.n	800fb8e <tcp_send_empty_ack+0x4e>
 800fb98:	0801806b 	.word	0x0801806b
 800fb9c:	0801862c 	.word	0x0801862c
 800fba0:	080169d3 	.word	0x080169d3

0800fba4 <tcp_output>:
{
 800fba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fba8:	4604      	mov	r4, r0
{
 800fbaa:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fbac:	b930      	cbnz	r0, 800fbbc <tcp_output+0x18>
 800fbae:	4b8e      	ldr	r3, [pc, #568]	@ (800fde8 <tcp_output+0x244>)
 800fbb0:	f240 42e5 	movw	r2, #1253	@ 0x4e5
 800fbb4:	498d      	ldr	r1, [pc, #564]	@ (800fdec <tcp_output+0x248>)
 800fbb6:	488e      	ldr	r0, [pc, #568]	@ (800fdf0 <tcp_output+0x24c>)
 800fbb8:	f005 ffe8 	bl	8015b8c <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fbbc:	7d23      	ldrb	r3, [r4, #20]
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d106      	bne.n	800fbd0 <tcp_output+0x2c>
 800fbc2:	4b89      	ldr	r3, [pc, #548]	@ (800fde8 <tcp_output+0x244>)
 800fbc4:	f240 42e7 	movw	r2, #1255	@ 0x4e7
 800fbc8:	498a      	ldr	r1, [pc, #552]	@ (800fdf4 <tcp_output+0x250>)
 800fbca:	4889      	ldr	r0, [pc, #548]	@ (800fdf0 <tcp_output+0x24c>)
 800fbcc:	f005 ffde 	bl	8015b8c <iprintf>
  if (tcp_input_pcb == pcb) {
 800fbd0:	4b89      	ldr	r3, [pc, #548]	@ (800fdf8 <tcp_output+0x254>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	42a3      	cmp	r3, r4
 800fbd6:	f000 816f 	beq.w	800feb8 <tcp_output+0x314>
  seg = pcb->unsent;
 800fbda:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fbdc:	f8b4 8048 	ldrh.w	r8, [r4, #72]	@ 0x48
 800fbe0:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800fbe4:	b94d      	cbnz	r5, 800fbfa <tcp_output+0x56>
    if (pcb->flags & TF_ACK_NOW) {
 800fbe6:	8b63      	ldrh	r3, [r4, #26]
 800fbe8:	0798      	lsls	r0, r3, #30
 800fbea:	f140 8161 	bpl.w	800feb0 <tcp_output+0x30c>
      return tcp_send_empty_ack(pcb);
 800fbee:	4620      	mov	r0, r4
}
 800fbf0:	b007      	add	sp, #28
 800fbf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800fbf6:	f7ff bfa3 	b.w	800fb40 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fbfa:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fbfc:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fc00:	b340      	cbz	r0, 800fc54 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800fc02:	f7fc fc27 	bl	800c454 <netif_get_by_index>
    return ip_route(src, dst);
 800fc06:	4607      	mov	r7, r0
  if (netif == NULL) {
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	f000 816e 	beq.w	800feea <tcp_output+0x346>
  if (ip_addr_isany(&pcb->local_ip)) {
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	b90b      	cbnz	r3, 800fc16 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fc12:	6843      	ldr	r3, [r0, #4]
 800fc14:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fc16:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fc18:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fc1a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fc1c:	bf28      	it	cs
 800fc1e:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fc20:	f7fb ff81 	bl	800bb26 <lwip_htonl>
 800fc24:	892b      	ldrh	r3, [r5, #8]
 800fc26:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800fc28:	1a9b      	subs	r3, r3, r2
 800fc2a:	4403      	add	r3, r0
 800fc2c:	4543      	cmp	r3, r8
 800fc2e:	d915      	bls.n	800fc5c <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fc30:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800fc34:	4543      	cmp	r3, r8
 800fc36:	d1d6      	bne.n	800fbe6 <tcp_output+0x42>
 800fc38:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1d3      	bne.n	800fbe6 <tcp_output+0x42>
 800fc3e:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1cf      	bne.n	800fbe6 <tcp_output+0x42>
      pcb->persist_cnt = 0;
 800fc46:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800fc4a:	f884 3096 	strb.w	r3, [r4, #150]	@ 0x96
      pcb->persist_cnt = 0;
 800fc4e:	f8a4 2094 	strh.w	r2, [r4, #148]	@ 0x94
 800fc52:	e7c8      	b.n	800fbe6 <tcp_output+0x42>
    return ip_route(src, dst);
 800fc54:	4648      	mov	r0, r9
 800fc56:	f001 f935 	bl	8010ec4 <ip4_route>
 800fc5a:	e7d4      	b.n	800fc06 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800fc5c:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800fc5e:	6f26      	ldr	r6, [r4, #112]	@ 0x70
  pcb->persist_backoff = 0;
 800fc60:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
  if (useg != NULL) {
 800fc64:	b126      	cbz	r6, 800fc70 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800fc66:	4633      	mov	r3, r6
 800fc68:	6836      	ldr	r6, [r6, #0]
 800fc6a:	2e00      	cmp	r6, #0
 800fc6c:	d1fb      	bne.n	800fc66 <tcp_output+0xc2>
 800fc6e:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800fc70:	f8df a174 	ldr.w	sl, [pc, #372]	@ 800fde8 <tcp_output+0x244>
 800fc74:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800fdf0 <tcp_output+0x24c>
 800fc78:	e0dc      	b.n	800fe34 <tcp_output+0x290>
    if (pcb->state != SYN_SENT) {
 800fc7a:	7d23      	ldrb	r3, [r4, #20]
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	d009      	beq.n	800fc94 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fc80:	68eb      	ldr	r3, [r5, #12]
 800fc82:	2010      	movs	r0, #16
 800fc84:	899b      	ldrh	r3, [r3, #12]
 800fc86:	9304      	str	r3, [sp, #16]
 800fc88:	f7fb ff4a 	bl	800bb20 <lwip_htons>
 800fc8c:	9b04      	ldr	r3, [sp, #16]
 800fc8e:	68ea      	ldr	r2, [r5, #12]
 800fc90:	4303      	orrs	r3, r0
 800fc92:	8193      	strh	r3, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800fc94:	4628      	mov	r0, r5
 800fc96:	f7ff f86f 	bl	800ed78 <tcp_output_segment_busy>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	d170      	bne.n	800fd80 <tcp_output+0x1dc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fc9e:	68eb      	ldr	r3, [r5, #12]
 800fca0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fca2:	9304      	str	r3, [sp, #16]
 800fca4:	f7fb ff3f 	bl	800bb26 <lwip_htonl>
 800fca8:	9b04      	ldr	r3, [sp, #16]
 800fcaa:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fcac:	68eb      	ldr	r3, [r5, #12]
 800fcae:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800fcb0:	9304      	str	r3, [sp, #16]
 800fcb2:	f7fb ff35 	bl	800bb20 <lwip_htons>
 800fcb6:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fcb8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fcba:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fcbc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fcbe:	4413      	add	r3, r2
 800fcc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fcc2:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fcc4:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fcc6:	07d2      	lsls	r2, r2, #31
 800fcc8:	d44a      	bmi.n	800fd60 <tcp_output+0x1bc>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fcca:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800fcce:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800fcd2:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800fcd4:	bfbc      	itt	lt
 800fcd6:	2300      	movlt	r3, #0
 800fcd8:	8623      	strhlt	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800fcda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fcdc:	b94b      	cbnz	r3, 800fcf2 <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800fcde:	4947      	ldr	r1, [pc, #284]	@ (800fdfc <tcp_output+0x258>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fce0:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800fce2:	6809      	ldr	r1, [r1, #0]
 800fce4:	9204      	str	r2, [sp, #16]
 800fce6:	6361      	str	r1, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fce8:	6858      	ldr	r0, [r3, #4]
 800fcea:	f7fb ff1c 	bl	800bb26 <lwip_htonl>
 800fcee:	9a04      	ldr	r2, [sp, #16]
 800fcf0:	63a0      	str	r0, [r4, #56]	@ 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fcf2:	6869      	ldr	r1, [r5, #4]
 800fcf4:	68eb      	ldr	r3, [r5, #12]
 800fcf6:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800fcf8:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fcfc:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800fcfe:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fd00:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800fd02:	ebac 0c00 	sub.w	ip, ip, r0
 800fd06:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800fd0a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800fd0e:	ebac 0000 	sub.w	r0, ip, r0
 800fd12:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800fd14:	2100      	movs	r1, #0
 800fd16:	7419      	strb	r1, [r3, #16]
 800fd18:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fd1a:	7aa9      	ldrb	r1, [r5, #10]
 800fd1c:	f011 0f01 	tst.w	r1, #1
 800fd20:	bf0c      	ite	eq
 800fd22:	2114      	moveq	r1, #20
 800fd24:	2118      	movne	r1, #24
 800fd26:	440b      	add	r3, r1
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d006      	beq.n	800fd3a <tcp_output+0x196>
 800fd2c:	4653      	mov	r3, sl
 800fd2e:	f44f 62c4 	mov.w	r2, #1568	@ 0x620
 800fd32:	4933      	ldr	r1, [pc, #204]	@ (800fe00 <tcp_output+0x25c>)
 800fd34:	4658      	mov	r0, fp
 800fd36:	f005 ff29 	bl	8015b8c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fd3a:	2306      	movs	r3, #6
 800fd3c:	9702      	str	r7, [sp, #8]
 800fd3e:	464a      	mov	r2, r9
 800fd40:	4621      	mov	r1, r4
 800fd42:	9301      	str	r3, [sp, #4]
 800fd44:	7aa3      	ldrb	r3, [r4, #10]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	7ae3      	ldrb	r3, [r4, #11]
 800fd4a:	6868      	ldr	r0, [r5, #4]
 800fd4c:	f001 fa1a 	bl	8011184 <ip4_output_if>
    if (err != ERR_OK) {
 800fd50:	b1b0      	cbz	r0, 800fd80 <tcp_output+0x1dc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd52:	8b63      	ldrh	r3, [r4, #26]
 800fd54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd58:	8363      	strh	r3, [r4, #26]
}
 800fd5a:	b007      	add	sp, #28
 800fd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fd60:	464a      	mov	r2, r9
 800fd62:	4639      	mov	r1, r7
 800fd64:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800fd68:	9304      	str	r3, [sp, #16]
 800fd6a:	f7fd fe79 	bl	800da60 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fd6e:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800fd72:	f7fb fed8 	bl	800bb26 <lwip_htonl>
 800fd76:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800fd78:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fd7c:	6158      	str	r0, [r3, #20]
    opts += 1;
 800fd7e:	e7a6      	b.n	800fcce <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800fd84:	7d23      	ldrb	r3, [r4, #20]
 800fd86:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd88:	bf1e      	ittt	ne
 800fd8a:	8b63      	ldrhne	r3, [r4, #26]
 800fd8c:	f023 0303 	bicne.w	r3, r3, #3
 800fd90:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd92:	68eb      	ldr	r3, [r5, #12]
 800fd94:	6858      	ldr	r0, [r3, #4]
 800fd96:	f7fb fec6 	bl	800bb26 <lwip_htonl>
 800fd9a:	8929      	ldrh	r1, [r5, #8]
 800fd9c:	68eb      	ldr	r3, [r5, #12]
 800fd9e:	9104      	str	r1, [sp, #16]
 800fda0:	9005      	str	r0, [sp, #20]
 800fda2:	8998      	ldrh	r0, [r3, #12]
 800fda4:	f7fb febc 	bl	800bb20 <lwip_htons>
 800fda8:	f010 0303 	ands.w	r3, r0, #3
 800fdac:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800fdb0:	bf18      	it	ne
 800fdb2:	2301      	movne	r3, #1
 800fdb4:	440a      	add	r2, r1
 800fdb6:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fdb8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800fdba:	1ad2      	subs	r2, r2, r3
 800fdbc:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800fdbe:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800fdc0:	bfb8      	it	lt
 800fdc2:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800fdc4:	892b      	ldrh	r3, [r5, #8]
 800fdc6:	9304      	str	r3, [sp, #16]
 800fdc8:	8990      	ldrh	r0, [r2, #12]
 800fdca:	f7fb fea9 	bl	800bb20 <lwip_htons>
 800fdce:	0783      	lsls	r3, r0, #30
 800fdd0:	d103      	bne.n	800fdda <tcp_output+0x236>
 800fdd2:	9b04      	ldr	r3, [sp, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f000 8084 	beq.w	800fee2 <tcp_output+0x33e>
      seg->next = NULL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800fdde:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fde0:	b983      	cbnz	r3, 800fe04 <tcp_output+0x260>
        pcb->unacked = seg;
 800fde2:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 800fde4:	462e      	mov	r6, r5
 800fde6:	e022      	b.n	800fe2e <tcp_output+0x28a>
 800fde8:	0801806b 	.word	0x0801806b
 800fdec:	0801864c 	.word	0x0801864c
 800fdf0:	080169d3 	.word	0x080169d3
 800fdf4:	08018664 	.word	0x08018664
 800fdf8:	20010f7c 	.word	0x20010f7c
 800fdfc:	20010f78 	.word	0x20010f78
 800fe00:	080186a1 	.word	0x080186a1
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fe04:	68eb      	ldr	r3, [r5, #12]
 800fe06:	6858      	ldr	r0, [r3, #4]
 800fe08:	f7fb fe8d 	bl	800bb26 <lwip_htonl>
 800fe0c:	68f2      	ldr	r2, [r6, #12]
 800fe0e:	9004      	str	r0, [sp, #16]
 800fe10:	6850      	ldr	r0, [r2, #4]
 800fe12:	f7fb fe88 	bl	800bb26 <lwip_htonl>
 800fe16:	9b04      	ldr	r3, [sp, #16]
 800fe18:	1a1b      	subs	r3, r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	da5f      	bge.n	800fede <tcp_output+0x33a>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fe1e:	f104 0370 	add.w	r3, r4, #112	@ 0x70
          while (*cur_seg &&
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	2a00      	cmp	r2, #0
 800fe26:	d149      	bne.n	800febc <tcp_output+0x318>
          seg->next = (*cur_seg);
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800fe2c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800fe2e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800fe30:	2d00      	cmp	r5, #0
 800fe32:	d03a      	beq.n	800feaa <tcp_output+0x306>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fe34:	68eb      	ldr	r3, [r5, #12]
 800fe36:	6858      	ldr	r0, [r3, #4]
 800fe38:	f7fb fe75 	bl	800bb26 <lwip_htonl>
 800fe3c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fe3e:	1ac0      	subs	r0, r0, r3
 800fe40:	892b      	ldrh	r3, [r5, #8]
 800fe42:	4418      	add	r0, r3
  while (seg != NULL &&
 800fe44:	4540      	cmp	r0, r8
 800fe46:	d82e      	bhi.n	800fea6 <tcp_output+0x302>
    LWIP_ASSERT("RST not expected here!",
 800fe48:	68eb      	ldr	r3, [r5, #12]
 800fe4a:	8998      	ldrh	r0, [r3, #12]
 800fe4c:	f7fb fe68 	bl	800bb20 <lwip_htons>
 800fe50:	0741      	lsls	r1, r0, #29
 800fe52:	d506      	bpl.n	800fe62 <tcp_output+0x2be>
 800fe54:	4653      	mov	r3, sl
 800fe56:	f240 523a 	movw	r2, #1338	@ 0x53a
 800fe5a:	4925      	ldr	r1, [pc, #148]	@ (800fef0 <tcp_output+0x34c>)
 800fe5c:	4658      	mov	r0, fp
 800fe5e:	f005 fe95 	bl	8015b8c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fe62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f43f af08 	beq.w	800fc7a <tcp_output+0xd6>
 800fe6a:	8b62      	ldrh	r2, [r4, #26]
 800fe6c:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800fe70:	f47f af03 	bne.w	800fc7a <tcp_output+0xd6>
 800fe74:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800fe76:	b143      	cbz	r3, 800fe8a <tcp_output+0x2e6>
 800fe78:	6819      	ldr	r1, [r3, #0]
 800fe7a:	2900      	cmp	r1, #0
 800fe7c:	f47f aefd 	bne.w	800fc7a <tcp_output+0xd6>
 800fe80:	8919      	ldrh	r1, [r3, #8]
 800fe82:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fe84:	4299      	cmp	r1, r3
 800fe86:	f4bf aef8 	bcs.w	800fc7a <tcp_output+0xd6>
 800fe8a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f43f aef3 	beq.w	800fc7a <tcp_output+0xd6>
 800fe94:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800fe98:	2b0f      	cmp	r3, #15
 800fe9a:	f63f aeee 	bhi.w	800fc7a <tcp_output+0xd6>
 800fe9e:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 800fea2:	f47f aeea 	bne.w	800fc7a <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800fea6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800fea8:	b913      	cbnz	r3, 800feb0 <tcp_output+0x30c>
    pcb->unsent_oversize = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800feb0:	8b63      	ldrh	r3, [r4, #26]
 800feb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800feb6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800feb8:	2000      	movs	r0, #0
 800feba:	e74e      	b.n	800fd5a <tcp_output+0x1b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800febc:	68d2      	ldr	r2, [r2, #12]
 800febe:	9305      	str	r3, [sp, #20]
 800fec0:	6850      	ldr	r0, [r2, #4]
 800fec2:	f7fb fe30 	bl	800bb26 <lwip_htonl>
 800fec6:	68e9      	ldr	r1, [r5, #12]
 800fec8:	9004      	str	r0, [sp, #16]
 800feca:	6848      	ldr	r0, [r1, #4]
 800fecc:	f7fb fe2b 	bl	800bb26 <lwip_htonl>
 800fed0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800fed2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fed4:	1a12      	subs	r2, r2, r0
          while (*cur_seg &&
 800fed6:	2a00      	cmp	r2, #0
 800fed8:	daa6      	bge.n	800fe28 <tcp_output+0x284>
            cur_seg = &((*cur_seg)->next );
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	e7a1      	b.n	800fe22 <tcp_output+0x27e>
          useg->next = seg;
 800fede:	6035      	str	r5, [r6, #0]
          useg = useg->next;
 800fee0:	e780      	b.n	800fde4 <tcp_output+0x240>
      tcp_seg_free(seg);
 800fee2:	4628      	mov	r0, r5
 800fee4:	f7fc ffa2 	bl	800ce2c <tcp_seg_free>
 800fee8:	e7a1      	b.n	800fe2e <tcp_output+0x28a>
    return ERR_RTE;
 800feea:	f06f 0003 	mvn.w	r0, #3
 800feee:	e734      	b.n	800fd5a <tcp_output+0x1b6>
 800fef0:	0801868a 	.word	0x0801868a

0800fef4 <tcp_rexmit_rto_commit>:
{
 800fef4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fef6:	4604      	mov	r4, r0
 800fef8:	b930      	cbnz	r0, 800ff08 <tcp_rexmit_rto_commit+0x14>
 800fefa:	4b09      	ldr	r3, [pc, #36]	@ (800ff20 <tcp_rexmit_rto_commit+0x2c>)
 800fefc:	f240 629c 	movw	r2, #1692	@ 0x69c
 800ff00:	4908      	ldr	r1, [pc, #32]	@ (800ff24 <tcp_rexmit_rto_commit+0x30>)
 800ff02:	4809      	ldr	r0, [pc, #36]	@ (800ff28 <tcp_rexmit_rto_commit+0x34>)
 800ff04:	f005 fe42 	bl	8015b8c <iprintf>
  if (pcb->nrtx < 0xFF) {
 800ff08:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800ff0c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800ff0e:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->nrtx;
 800ff10:	bf1c      	itt	ne
 800ff12:	3301      	addne	r3, #1
 800ff14:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
}
 800ff18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ff1c:	f7ff be42 	b.w	800fba4 <tcp_output>
 800ff20:	0801806b 	.word	0x0801806b
 800ff24:	080186b4 	.word	0x080186b4
 800ff28:	080169d3 	.word	0x080169d3

0800ff2c <tcp_rexmit_rto>:
{
 800ff2c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ff2e:	4604      	mov	r4, r0
 800ff30:	b930      	cbnz	r0, 800ff40 <tcp_rexmit_rto+0x14>
 800ff32:	4b08      	ldr	r3, [pc, #32]	@ (800ff54 <tcp_rexmit_rto+0x28>)
 800ff34:	f240 62b1 	movw	r2, #1713	@ 0x6b1
 800ff38:	4907      	ldr	r1, [pc, #28]	@ (800ff58 <tcp_rexmit_rto+0x2c>)
 800ff3a:	4808      	ldr	r0, [pc, #32]	@ (800ff5c <tcp_rexmit_rto+0x30>)
 800ff3c:	f005 fe26 	bl	8015b8c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ff40:	4620      	mov	r0, r4
 800ff42:	f7ff fd0b 	bl	800f95c <tcp_rexmit_rto_prepare>
 800ff46:	b920      	cbnz	r0, 800ff52 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800ff48:	4620      	mov	r0, r4
}
 800ff4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800ff4e:	f7ff bfd1 	b.w	800fef4 <tcp_rexmit_rto_commit>
}
 800ff52:	bd10      	pop	{r4, pc}
 800ff54:	0801806b 	.word	0x0801806b
 800ff58:	080186d7 	.word	0x080186d7
 800ff5c:	080169d3 	.word	0x080169d3

0800ff60 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ff60:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ff62:	4604      	mov	r4, r0
 800ff64:	b930      	cbnz	r0, 800ff74 <tcp_keepalive+0x14>
 800ff66:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa4 <tcp_keepalive+0x44>)
 800ff68:	f640 026a 	movw	r2, #2154	@ 0x86a
 800ff6c:	490e      	ldr	r1, [pc, #56]	@ (800ffa8 <tcp_keepalive+0x48>)
 800ff6e:	480f      	ldr	r0, [pc, #60]	@ (800ffac <tcp_keepalive+0x4c>)
 800ff70:	f005 fe0c 	bl	8015b8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ff74:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800ff76:	3801      	subs	r0, #1
 800ff78:	f7fb fdd5 	bl	800bb26 <lwip_htonl>
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	4602      	mov	r2, r0
 800ff80:	4620      	mov	r0, r4
 800ff82:	f7ff f83f 	bl	800f004 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ff86:	4605      	mov	r5, r0
 800ff88:	b148      	cbz	r0, 800ff9e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800ff8a:	f7ff f861 	bl	800f050 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff8e:	1d23      	adds	r3, r4, #4
 800ff90:	4622      	mov	r2, r4
 800ff92:	4629      	mov	r1, r5
 800ff94:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ff96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff9a:	f7ff b89f 	b.w	800f0dc <tcp_output_control_segment>
}
 800ff9e:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	0801806b 	.word	0x0801806b
 800ffa8:	080186f3 	.word	0x080186f3
 800ffac:	080169d3 	.word	0x080169d3

0800ffb0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ffb4:	4606      	mov	r6, r0
 800ffb6:	b930      	cbnz	r0, 800ffc6 <tcp_zero_window_probe+0x16>
 800ffb8:	4b2c      	ldr	r3, [pc, #176]	@ (801006c <tcp_zero_window_probe+0xbc>)
 800ffba:	f640 0295 	movw	r2, #2197	@ 0x895
 800ffbe:	492c      	ldr	r1, [pc, #176]	@ (8010070 <tcp_zero_window_probe+0xc0>)
 800ffc0:	482c      	ldr	r0, [pc, #176]	@ (8010074 <tcp_zero_window_probe+0xc4>)
 800ffc2:	f005 fde3 	bl	8015b8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ffc6:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (seg == NULL) {
 800ffc8:	2d00      	cmp	r5, #0
 800ffca:	d049      	beq.n	8010060 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ffcc:	f896 3096 	ldrb.w	r3, [r6, #150]	@ 0x96
 800ffd0:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->persist_probe;
 800ffd2:	bf1c      	itt	ne
 800ffd4:	3301      	addne	r3, #1
 800ffd6:	f886 3096 	strbne.w	r3, [r6, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ffda:	68eb      	ldr	r3, [r5, #12]
 800ffdc:	8998      	ldrh	r0, [r3, #12]
 800ffde:	f7fb fd9f 	bl	800bb20 <lwip_htons>
 800ffe2:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ffe6:	68eb      	ldr	r3, [r5, #12]
 800ffe8:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ffea:	bf18      	it	ne
 800ffec:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ffee:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fff0:	bf1c      	itt	ne
 800fff2:	fab4 f484 	clzne	r4, r4
 800fff6:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fff8:	f084 0101 	eor.w	r1, r4, #1
 800fffc:	f7ff f802 	bl	800f004 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8010000:	4607      	mov	r7, r0
 8010002:	b380      	cbz	r0, 8010066 <tcp_zero_window_probe+0xb6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010004:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8010008:	b1fc      	cbz	r4, 801004a <tcp_zero_window_probe+0x9a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801000a:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 801000e:	2011      	movs	r0, #17
 8010010:	f7fb fd86 	bl	800bb20 <lwip_htons>
 8010014:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
 8010018:	b2a4      	uxth	r4, r4
 801001a:	4320      	orrs	r0, r4
 801001c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010020:	68eb      	ldr	r3, [r5, #12]
 8010022:	6858      	ldr	r0, [r3, #4]
 8010024:	f7fb fd7f 	bl	800bb26 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010028:	6d33      	ldr	r3, [r6, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801002a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801002c:	1a1b      	subs	r3, r3, r0
 801002e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8010030:	bfb8      	it	lt
 8010032:	6530      	strlt	r0, [r6, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8010034:	4638      	mov	r0, r7
 8010036:	f7ff f80b 	bl	800f050 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801003a:	1d33      	adds	r3, r6, #4
 801003c:	4632      	mov	r2, r6
 801003e:	4639      	mov	r1, r7
 8010040:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010046:	f7ff b849 	b.w	800f0dc <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801004a:	6868      	ldr	r0, [r5, #4]
 801004c:	f108 0114 	add.w	r1, r8, #20
 8010050:	892a      	ldrh	r2, [r5, #8]
 8010052:	8903      	ldrh	r3, [r0, #8]
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	2201      	movs	r2, #1
 8010058:	b29b      	uxth	r3, r3
 801005a:	f7fc fcdf 	bl	800ca1c <pbuf_copy_partial>
 801005e:	e7df      	b.n	8010020 <tcp_zero_window_probe+0x70>
    return ERR_OK;
 8010060:	4628      	mov	r0, r5
}
 8010062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8010066:	f04f 30ff 	mov.w	r0, #4294967295
 801006a:	e7fa      	b.n	8010062 <tcp_zero_window_probe+0xb2>
 801006c:	0801806b 	.word	0x0801806b
 8010070:	0801870e 	.word	0x0801870e
 8010074:	080169d3 	.word	0x080169d3

08010078 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801007c:	200a      	movs	r0, #10
{
 801007e:	460e      	mov	r6, r1
 8010080:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010082:	f7fc f88b 	bl	800c19c <memp_malloc>
  if (timeout == NULL) {
 8010086:	b938      	cbnz	r0, 8010098 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010088:	4b10      	ldr	r3, [pc, #64]	@ (80100cc <sys_timeout_abs+0x54>)
 801008a:	22be      	movs	r2, #190	@ 0xbe
 801008c:	4910      	ldr	r1, [pc, #64]	@ (80100d0 <sys_timeout_abs+0x58>)
 801008e:	4811      	ldr	r0, [pc, #68]	@ (80100d4 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 8010090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010094:	f005 bd7a 	b.w	8015b8c <iprintf>
  timeout->next = NULL;
 8010098:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 801009a:	4a0f      	ldr	r2, [pc, #60]	@ (80100d8 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 801009c:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 801009e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 80100a0:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 80100a2:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 80100a6:	b90b      	cbnz	r3, 80100ac <sys_timeout_abs+0x34>
    next_timeout = timeout;
 80100a8:	6010      	str	r0, [r2, #0]
}
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80100ac:	6859      	ldr	r1, [r3, #4]
 80100ae:	1a61      	subs	r1, r4, r1
 80100b0:	2900      	cmp	r1, #0
 80100b2:	da01      	bge.n	80100b8 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 80100b4:	6003      	str	r3, [r0, #0]
 80100b6:	e7f7      	b.n	80100a8 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80100b8:	4619      	mov	r1, r3
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	b11b      	cbz	r3, 80100c6 <sys_timeout_abs+0x4e>
 80100be:	685a      	ldr	r2, [r3, #4]
 80100c0:	1aa2      	subs	r2, r4, r2
 80100c2:	2a00      	cmp	r2, #0
 80100c4:	daf8      	bge.n	80100b8 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 80100c6:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 80100c8:	6008      	str	r0, [r1, #0]
        break;
 80100ca:	e7ee      	b.n	80100aa <sys_timeout_abs+0x32>
 80100cc:	08018731 	.word	0x08018731
 80100d0:	08018753 	.word	0x08018753
 80100d4:	080169d3 	.word	0x080169d3
 80100d8:	20010fbc 	.word	0x20010fbc

080100dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80100dc:	b570      	push	{r4, r5, r6, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80100de:	6843      	ldr	r3, [r0, #4]
{
 80100e0:	4604      	mov	r4, r0
  cyclic->handler();
 80100e2:	4798      	blx	r3

  now = sys_now();
 80100e4:	f001 fd09 	bl	8011afa <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 80100e8:	4b07      	ldr	r3, [pc, #28]	@ (8010108 <lwip_cyclic_timer+0x2c>)
  now = sys_now();
 80100ea:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 80100ec:	6826      	ldr	r6, [r4, #0]
 80100ee:	6818      	ldr	r0, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80100f0:	4622      	mov	r2, r4
 80100f2:	4906      	ldr	r1, [pc, #24]	@ (801010c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 80100f4:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80100f6:	1b43      	subs	r3, r0, r5
 80100f8:	2b00      	cmp	r3, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80100fa:	bfb8      	it	lt
 80100fc:	1970      	addlt	r0, r6, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80100fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010102:	f7ff bfb9 	b.w	8010078 <sys_timeout_abs>
 8010106:	bf00      	nop
 8010108:	20010fb8 	.word	0x20010fb8
 801010c:	080100dd 	.word	0x080100dd

08010110 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010110:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
{
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	4604      	mov	r4, r0
 8010118:	460d      	mov	r5, r1
 801011a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801011c:	d306      	bcc.n	801012c <sys_timeout+0x1c>
 801011e:	4b08      	ldr	r3, [pc, #32]	@ (8010140 <sys_timeout+0x30>)
 8010120:	f240 1229 	movw	r2, #297	@ 0x129
 8010124:	4907      	ldr	r1, [pc, #28]	@ (8010144 <sys_timeout+0x34>)
 8010126:	4808      	ldr	r0, [pc, #32]	@ (8010148 <sys_timeout+0x38>)
 8010128:	f005 fd30 	bl	8015b8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 801012c:	f001 fce5 	bl	8011afa <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010130:	4632      	mov	r2, r6
 8010132:	4629      	mov	r1, r5
 8010134:	4420      	add	r0, r4
#endif
}
 8010136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801013a:	f7ff bf9d 	b.w	8010078 <sys_timeout_abs>
 801013e:	bf00      	nop
 8010140:	08018731 	.word	0x08018731
 8010144:	08018790 	.word	0x08018790
 8010148:	080169d3 	.word	0x080169d3

0801014c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801014c:	4b08      	ldr	r3, [pc, #32]	@ (8010170 <tcp_timer_needed+0x24>)
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	b962      	cbnz	r2, 801016c <tcp_timer_needed+0x20>
 8010152:	4a08      	ldr	r2, [pc, #32]	@ (8010174 <tcp_timer_needed+0x28>)
 8010154:	6812      	ldr	r2, [r2, #0]
 8010156:	b912      	cbnz	r2, 801015e <tcp_timer_needed+0x12>
 8010158:	4a07      	ldr	r2, [pc, #28]	@ (8010178 <tcp_timer_needed+0x2c>)
 801015a:	6812      	ldr	r2, [r2, #0]
 801015c:	b132      	cbz	r2, 801016c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801015e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010160:	4906      	ldr	r1, [pc, #24]	@ (801017c <tcp_timer_needed+0x30>)
 8010162:	20fa      	movs	r0, #250	@ 0xfa
    tcpip_tcp_timer_active = 1;
 8010164:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010166:	2200      	movs	r2, #0
 8010168:	f7ff bfd2 	b.w	8010110 <sys_timeout>
}
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	20010fb4 	.word	0x20010fb4
 8010174:	20010f6c 	.word	0x20010f6c
 8010178:	20010f68 	.word	0x20010f68
 801017c:	08010181 	.word	0x08010181

08010180 <tcpip_tcp_timer>:
{
 8010180:	b508      	push	{r3, lr}
  tcp_tmr();
 8010182:	f7fd faad 	bl	800d6e0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010186:	4b08      	ldr	r3, [pc, #32]	@ (80101a8 <tcpip_tcp_timer+0x28>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	b913      	cbnz	r3, 8010192 <tcpip_tcp_timer+0x12>
 801018c:	4b07      	ldr	r3, [pc, #28]	@ (80101ac <tcpip_tcp_timer+0x2c>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	b133      	cbz	r3, 80101a0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010192:	2200      	movs	r2, #0
 8010194:	4906      	ldr	r1, [pc, #24]	@ (80101b0 <tcpip_tcp_timer+0x30>)
 8010196:	20fa      	movs	r0, #250	@ 0xfa
}
 8010198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801019c:	f7ff bfb8 	b.w	8010110 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80101a0:	4a04      	ldr	r2, [pc, #16]	@ (80101b4 <tcpip_tcp_timer+0x34>)
 80101a2:	6013      	str	r3, [r2, #0]
}
 80101a4:	bd08      	pop	{r3, pc}
 80101a6:	bf00      	nop
 80101a8:	20010f6c 	.word	0x20010f6c
 80101ac:	20010f68 	.word	0x20010f68
 80101b0:	08010181 	.word	0x08010181
 80101b4:	20010fb4 	.word	0x20010fb4

080101b8 <sys_timeouts_init>:
{
 80101b8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80101ba:	4d08      	ldr	r5, [pc, #32]	@ (80101dc <sys_timeouts_init+0x24>)
 80101bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80101c0:	4c07      	ldr	r4, [pc, #28]	@ (80101e0 <sys_timeouts_init+0x28>)
 80101c2:	462a      	mov	r2, r5
 80101c4:	4621      	mov	r1, r4
 80101c6:	f7ff ffa3 	bl	8010110 <sys_timeout>
 80101ca:	f105 0208 	add.w	r2, r5, #8
 80101ce:	4621      	mov	r1, r4
 80101d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
}
 80101d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80101d8:	f7ff bf9a 	b.w	8010110 <sys_timeout>
 80101dc:	0808f8e8 	.word	0x0808f8e8
 80101e0:	080100dd 	.word	0x080100dd

080101e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80101e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80101e8:	f001 fc87 	bl	8011afa <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80101ec:	4e0c      	ldr	r6, [pc, #48]	@ (8010220 <sys_check_timeouts+0x3c>)
  now = sys_now();
 80101ee:	4604      	mov	r4, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 80101f0:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8010224 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 80101f4:	6831      	ldr	r1, [r6, #0]
    if (tmptimeout == NULL) {
 80101f6:	b189      	cbz	r1, 801021c <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80101f8:	684b      	ldr	r3, [r1, #4]
 80101fa:	1ae2      	subs	r2, r4, r3
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	db0d      	blt.n	801021c <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 8010200:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010202:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 8010204:	f8c8 3000 	str.w	r3, [r8]
    next_timeout = tmptimeout->next;
 8010208:	6032      	str	r2, [r6, #0]
    arg = tmptimeout->arg;
 801020a:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801020e:	f7fb ffe3 	bl	800c1d8 <memp_free>
    if (handler != NULL) {
 8010212:	2d00      	cmp	r5, #0
 8010214:	d0ee      	beq.n	80101f4 <sys_check_timeouts+0x10>
      handler(arg);
 8010216:	4638      	mov	r0, r7
 8010218:	47a8      	blx	r5
 801021a:	e7eb      	b.n	80101f4 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801021c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010220:	20010fbc 	.word	0x20010fbc
 8010224:	20010fb8 	.word	0x20010fb8

08010228 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010228:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801022a:	4c07      	ldr	r4, [pc, #28]	@ (8010248 <sys_timeouts_sleeptime+0x20>)
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	b13b      	cbz	r3, 8010240 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8010230:	f001 fc63 	bl	8011afa <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010234:	6823      	ldr	r3, [r4, #0]
 8010236:	685b      	ldr	r3, [r3, #4]
    return 0;
 8010238:	1a18      	subs	r0, r3, r0
 801023a:	bf48      	it	mi
 801023c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801023e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010240:	f04f 30ff 	mov.w	r0, #4294967295
 8010244:	e7fb      	b.n	801023e <sys_timeouts_sleeptime+0x16>
 8010246:	bf00      	nop
 8010248:	20010fbc 	.word	0x20010fbc

0801024c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801024c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801024e:	f005 fb9d 	bl	801598c <rand>
 8010252:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8010256:	4b02      	ldr	r3, [pc, #8]	@ (8010260 <udp_init+0x14>)
 8010258:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 801025c:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 801025e:	bd08      	pop	{r3, pc}
 8010260:	2000005a 	.word	0x2000005a

08010264 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010268:	4688      	mov	r8, r1
 801026a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801026c:	4605      	mov	r5, r0
 801026e:	b928      	cbnz	r0, 801027c <udp_input+0x18>
 8010270:	4b5e      	ldr	r3, [pc, #376]	@ (80103ec <udp_input+0x188>)
 8010272:	22cf      	movs	r2, #207	@ 0xcf
 8010274:	495e      	ldr	r1, [pc, #376]	@ (80103f0 <udp_input+0x18c>)
 8010276:	485f      	ldr	r0, [pc, #380]	@ (80103f4 <udp_input+0x190>)
 8010278:	f005 fc88 	bl	8015b8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801027c:	f1b8 0f00 	cmp.w	r8, #0
 8010280:	d105      	bne.n	801028e <udp_input+0x2a>
 8010282:	4b5a      	ldr	r3, [pc, #360]	@ (80103ec <udp_input+0x188>)
 8010284:	22d0      	movs	r2, #208	@ 0xd0
 8010286:	495c      	ldr	r1, [pc, #368]	@ (80103f8 <udp_input+0x194>)
 8010288:	485a      	ldr	r0, [pc, #360]	@ (80103f4 <udp_input+0x190>)
 801028a:	f005 fc7f 	bl	8015b8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801028e:	896b      	ldrh	r3, [r5, #10]
 8010290:	2b07      	cmp	r3, #7
 8010292:	d805      	bhi.n	80102a0 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010294:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010296:	b005      	add	sp, #20
 8010298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801029c:	f7fc b998 	b.w	800c5d0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80102a0:	4f56      	ldr	r7, [pc, #344]	@ (80103fc <udp_input+0x198>)
  uncon_pcb = NULL;
 80102a2:	2600      	movs	r6, #0
  udphdr = (struct udp_hdr *)p->payload;
 80102a4:	686c      	ldr	r4, [r5, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80102a6:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 80102a8:	46b2      	mov	sl, r6
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80102aa:	6978      	ldr	r0, [r7, #20]
 80102ac:	f000 ff7b 	bl	80111a6 <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102b0:	f8df b158 	ldr.w	fp, [pc, #344]	@ 801040c <udp_input+0x1a8>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80102b4:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 80102b6:	8820      	ldrh	r0, [r4, #0]
 80102b8:	f7fb fc32 	bl	800bb20 <lwip_htons>
 80102bc:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 80102be:	8860      	ldrh	r0, [r4, #2]
 80102c0:	f7fb fc2e 	bl	800bb20 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102c4:	f8db 4000 	ldr.w	r4, [fp]
  dest = lwip_ntohs(udphdr->dest);
 80102c8:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ca:	b93c      	cbnz	r4, 80102dc <udp_input+0x78>
  if (pcb != NULL) {
 80102cc:	2e00      	cmp	r6, #0
 80102ce:	d148      	bne.n	8010362 <udp_input+0xfe>
  if (for_us) {
 80102d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d043      	beq.n	8010362 <udp_input+0xfe>
 80102da:	e7db      	b.n	8010294 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 80102dc:	8a63      	ldrh	r3, [r4, #18]
 80102de:	9a03      	ldr	r2, [sp, #12]
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d150      	bne.n	8010386 <udp_input+0x122>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80102e4:	f1b8 0f00 	cmp.w	r8, #0
 80102e8:	d105      	bne.n	80102f6 <udp_input+0x92>
 80102ea:	4b40      	ldr	r3, [pc, #256]	@ (80103ec <udp_input+0x188>)
 80102ec:	2288      	movs	r2, #136	@ 0x88
 80102ee:	4944      	ldr	r1, [pc, #272]	@ (8010400 <udp_input+0x19c>)
 80102f0:	4840      	ldr	r0, [pc, #256]	@ (80103f4 <udp_input+0x190>)
 80102f2:	f005 fc4b 	bl	8015b8c <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102f6:	7a22      	ldrb	r2, [r4, #8]
 80102f8:	b132      	cbz	r2, 8010308 <udp_input+0xa4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010300:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010302:	b2db      	uxtb	r3, r3
 8010304:	429a      	cmp	r2, r3
 8010306:	d13e      	bne.n	8010386 <udp_input+0x122>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010308:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801030a:	f1b9 0f00 	cmp.w	r9, #0
 801030e:	d035      	beq.n	801037c <udp_input+0x118>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010310:	b13b      	cbz	r3, 8010322 <udp_input+0xbe>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010312:	697a      	ldr	r2, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010314:	1c51      	adds	r1, r2, #1
 8010316:	d004      	beq.n	8010322 <udp_input+0xbe>
            ip4_addr_net_eq(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010318:	405a      	eors	r2, r3
 801031a:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801031e:	420a      	tst	r2, r1
 8010320:	d131      	bne.n	8010386 <udp_input+0x122>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010322:	7c22      	ldrb	r2, [r4, #16]
 8010324:	0752      	lsls	r2, r2, #29
 8010326:	d40f      	bmi.n	8010348 <udp_input+0xe4>
        if (uncon_pcb == NULL) {
 8010328:	2e00      	cmp	r6, #0
 801032a:	d02f      	beq.n	801038c <udp_input+0x128>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801032c:	f1b9 0f00 	cmp.w	r9, #0
 8010330:	d00a      	beq.n	8010348 <udp_input+0xe4>
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	3201      	adds	r2, #1
 8010336:	d107      	bne.n	8010348 <udp_input+0xe4>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_eq(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010338:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801033c:	6831      	ldr	r1, [r6, #0]
 801033e:	4291      	cmp	r1, r2
 8010340:	d002      	beq.n	8010348 <udp_input+0xe4>
          uncon_pcb = pcb;
 8010342:	429a      	cmp	r2, r3
 8010344:	bf08      	it	eq
 8010346:	4626      	moveq	r6, r4
      if ((pcb->remote_port == src) &&
 8010348:	8aa3      	ldrh	r3, [r4, #20]
 801034a:	9a02      	ldr	r2, [sp, #8]
 801034c:	4293      	cmp	r3, r2
 801034e:	d11a      	bne.n	8010386 <udp_input+0x122>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010350:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8010352:	b113      	cbz	r3, 801035a <udp_input+0xf6>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010354:	693a      	ldr	r2, [r7, #16]
 8010356:	4293      	cmp	r3, r2
 8010358:	d115      	bne.n	8010386 <udp_input+0x122>
        if (prev != NULL) {
 801035a:	f1ba 0f00 	cmp.w	sl, #0
 801035e:	d117      	bne.n	8010390 <udp_input+0x12c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010360:	4626      	mov	r6, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010362:	2108      	movs	r1, #8
 8010364:	4628      	mov	r0, r5
 8010366:	f7fc f907 	bl	800c578 <pbuf_remove_header>
 801036a:	b1d0      	cbz	r0, 80103a2 <udp_input+0x13e>
      LWIP_ASSERT("pbuf_remove_header failed", 0);
 801036c:	4b1f      	ldr	r3, [pc, #124]	@ (80103ec <udp_input+0x188>)
 801036e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010372:	4924      	ldr	r1, [pc, #144]	@ (8010404 <udp_input+0x1a0>)
 8010374:	481f      	ldr	r0, [pc, #124]	@ (80103f4 <udp_input+0x190>)
 8010376:	f005 fc09 	bl	8015b8c <iprintf>
 801037a:	e78b      	b.n	8010294 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 801037c:	2b00      	cmp	r3, #0
 801037e:	d0d0      	beq.n	8010322 <udp_input+0xbe>
 8010380:	697a      	ldr	r2, [r7, #20]
 8010382:	4293      	cmp	r3, r2
 8010384:	d0cd      	beq.n	8010322 <udp_input+0xbe>
    prev = pcb;
 8010386:	46a2      	mov	sl, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010388:	68e4      	ldr	r4, [r4, #12]
 801038a:	e79e      	b.n	80102ca <udp_input+0x66>
          uncon_pcb = pcb;
 801038c:	4626      	mov	r6, r4
 801038e:	e7db      	b.n	8010348 <udp_input+0xe4>
          prev->next = pcb->next;
 8010390:	68e3      	ldr	r3, [r4, #12]
 8010392:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 8010396:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 801039a:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 801039e:	60e3      	str	r3, [r4, #12]
  if (pcb != NULL) {
 80103a0:	e7de      	b.n	8010360 <udp_input+0xfc>
    if (pcb != NULL) {
 80103a2:	b16e      	cbz	r6, 80103c0 <udp_input+0x15c>
      if (pcb->recv != NULL) {
 80103a4:	69b4      	ldr	r4, [r6, #24]
 80103a6:	2c00      	cmp	r4, #0
 80103a8:	f43f af74 	beq.w	8010294 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80103ac:	9b02      	ldr	r3, [sp, #8]
 80103ae:	462a      	mov	r2, r5
 80103b0:	4631      	mov	r1, r6
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	4b14      	ldr	r3, [pc, #80]	@ (8010408 <udp_input+0x1a4>)
 80103b6:	69f0      	ldr	r0, [r6, #28]
 80103b8:	47a0      	blx	r4
}
 80103ba:	b005      	add	sp, #20
 80103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80103c0:	f1b9 0f00 	cmp.w	r9, #0
 80103c4:	f47f af66 	bne.w	8010294 <udp_input+0x30>
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103ce:	2be0      	cmp	r3, #224	@ 0xe0
 80103d0:	f43f af60 	beq.w	8010294 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80103d4:	89b9      	ldrh	r1, [r7, #12]
 80103d6:	4628      	mov	r0, r5
 80103d8:	3108      	adds	r1, #8
 80103da:	b209      	sxth	r1, r1
 80103dc:	f7fc f8f0 	bl	800c5c0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80103e0:	2103      	movs	r1, #3
 80103e2:	4628      	mov	r0, r5
 80103e4:	f000 fd4c 	bl	8010e80 <icmp_dest_unreach>
 80103e8:	e754      	b.n	8010294 <udp_input+0x30>
 80103ea:	bf00      	nop
 80103ec:	080187c6 	.word	0x080187c6
 80103f0:	080187e3 	.word	0x080187e3
 80103f4:	080169d3 	.word	0x080169d3
 80103f8:	080187fb 	.word	0x080187fb
 80103fc:	2000d168 	.word	0x2000d168
 8010400:	08018814 	.word	0x08018814
 8010404:	08017448 	.word	0x08017448
 8010408:	2000d178 	.word	0x2000d178
 801040c:	20010fc0 	.word	0x20010fc0

08010410 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8010410:	4b2c      	ldr	r3, [pc, #176]	@ (80104c4 <udp_bind+0xb4>)
{
 8010412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8010416:	2900      	cmp	r1, #0
 8010418:	bf14      	ite	ne
 801041a:	460f      	movne	r7, r1
 801041c:	461f      	moveq	r7, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801041e:	2800      	cmp	r0, #0
 8010420:	d04d      	beq.n	80104be <udp_bind+0xae>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010422:	4e29      	ldr	r6, [pc, #164]	@ (80104c8 <udp_bind+0xb8>)
 8010424:	6834      	ldr	r4, [r6, #0]
 8010426:	4621      	mov	r1, r4
 8010428:	b959      	cbnz	r1, 8010442 <udp_bind+0x32>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801042a:	b182      	cbz	r2, 801044e <udp_bind+0x3e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801042c:	683d      	ldr	r5, [r7, #0]
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801042e:	4623      	mov	r3, r4
 8010430:	2b00      	cmp	r3, #0
 8010432:	d130      	bne.n	8010496 <udp_bind+0x86>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010434:	683b      	ldr	r3, [r7, #0]

  pcb->local_port = port;
 8010436:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010438:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801043a:	2900      	cmp	r1, #0
 801043c:	d03c      	beq.n	80104b8 <udp_bind+0xa8>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801043e:	2000      	movs	r0, #0
 8010440:	e025      	b.n	801048e <udp_bind+0x7e>
    if (pcb == ipcb) {
 8010442:	4281      	cmp	r1, r0
 8010444:	d001      	beq.n	801044a <udp_bind+0x3a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010446:	68c9      	ldr	r1, [r1, #12]
 8010448:	e7ee      	b.n	8010428 <udp_bind+0x18>
      rebind = 1;
 801044a:	2101      	movs	r1, #1
 801044c:	e7ed      	b.n	801042a <udp_bind+0x1a>
 801044e:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 80104cc <udp_bind+0xbc>
  if (port == 0) {
 8010452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010456:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 801045a:	f8bc 3000 	ldrh.w	r3, [ip]
 801045e:	4573      	cmp	r3, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010460:	4625      	mov	r5, r4
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010462:	bf16      	itet	ne
 8010464:	3301      	addne	r3, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010466:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801046a:	b29b      	uxthne	r3, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801046c:	b90d      	cbnz	r5, 8010472 <udp_bind+0x62>
  return udp_port;
 801046e:	461a      	mov	r2, r3
 8010470:	e007      	b.n	8010482 <udp_bind+0x72>
    if (pcb->local_port == udp_port) {
 8010472:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 8010476:	4598      	cmp	r8, r3
 8010478:	d10b      	bne.n	8010492 <udp_bind+0x82>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801047a:	3a01      	subs	r2, #1
 801047c:	b292      	uxth	r2, r2
 801047e:	2a00      	cmp	r2, #0
 8010480:	d1ed      	bne.n	801045e <udp_bind+0x4e>
 8010482:	f8ac 3000 	strh.w	r3, [ip]
    if (port == 0) {
 8010486:	2a00      	cmp	r2, #0
 8010488:	d1d4      	bne.n	8010434 <udp_bind+0x24>
      return ERR_USE;
 801048a:	f06f 0007 	mvn.w	r0, #7
}
 801048e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010492:	68ed      	ldr	r5, [r5, #12]
 8010494:	e7ea      	b.n	801046c <udp_bind+0x5c>
      if (pcb != ipcb) {
 8010496:	4283      	cmp	r3, r0
 8010498:	d00c      	beq.n	80104b4 <udp_bind+0xa4>
          if ((ipcb->local_port == port) &&
 801049a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801049e:	4594      	cmp	ip, r2
 80104a0:	d108      	bne.n	80104b4 <udp_bind+0xa4>
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 80104a2:	f8d3 c000 	ldr.w	ip, [r3]
          if ((ipcb->local_port == port) &&
 80104a6:	45ac      	cmp	ip, r5
 80104a8:	d0ef      	beq.n	801048a <udp_bind+0x7a>
              ip_addr_isany(ipaddr) ||
 80104aa:	2d00      	cmp	r5, #0
 80104ac:	d0ed      	beq.n	801048a <udp_bind+0x7a>
              ip_addr_isany(&ipcb->local_ip))) ||
 80104ae:	f1bc 0f00 	cmp.w	ip, #0
 80104b2:	d0ea      	beq.n	801048a <udp_bind+0x7a>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	e7bb      	b.n	8010430 <udp_bind+0x20>
    pcb->next = udp_pcbs;
 80104b8:	60c4      	str	r4, [r0, #12]
    udp_pcbs = pcb;
 80104ba:	6030      	str	r0, [r6, #0]
 80104bc:	e7bf      	b.n	801043e <udp_bind+0x2e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80104be:	f06f 000f 	mvn.w	r0, #15
 80104c2:	e7e4      	b.n	801048e <udp_bind+0x7e>
 80104c4:	0808f8f8 	.word	0x0808f8f8
 80104c8:	20010fc0 	.word	0x20010fc0
 80104cc:	2000005a 	.word	0x2000005a

080104d0 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80104d0:	b108      	cbz	r0, 80104d6 <udp_recv+0x6>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 80104d2:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 80104d6:	4770      	bx	lr

080104d8 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80104d8:	4601      	mov	r1, r0
 80104da:	b198      	cbz	r0, 8010504 <udp_remove+0x2c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80104dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010508 <udp_remove+0x30>)
 80104de:	6813      	ldr	r3, [r2, #0]
 80104e0:	4283      	cmp	r3, r0
 80104e2:	d104      	bne.n	80104ee <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80104e4:	68c3      	ldr	r3, [r0, #12]
 80104e6:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80104e8:	2000      	movs	r0, #0
 80104ea:	f7fb be75 	b.w	800c1d8 <memp_free>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d0fa      	beq.n	80104e8 <udp_remove+0x10>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80104f2:	461a      	mov	r2, r3
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d0f6      	beq.n	80104e8 <udp_remove+0x10>
 80104fa:	428b      	cmp	r3, r1
 80104fc:	d1f9      	bne.n	80104f2 <udp_remove+0x1a>
        pcb2->next = pcb->next;
 80104fe:	68cb      	ldr	r3, [r1, #12]
 8010500:	60d3      	str	r3, [r2, #12]
        break;
 8010502:	e7f1      	b.n	80104e8 <udp_remove+0x10>
}
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	20010fc0 	.word	0x20010fc0

0801050c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801050c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801050e:	2000      	movs	r0, #0
 8010510:	f7fb fe44 	bl	800c19c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010514:	4604      	mov	r4, r0
 8010516:	b128      	cbz	r0, 8010524 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010518:	2220      	movs	r2, #32
 801051a:	2100      	movs	r1, #0
 801051c:	f005 fca8 	bl	8015e70 <memset>
    pcb->ttl = UDP_TTL;
 8010520:	23ff      	movs	r3, #255	@ 0xff
 8010522:	72e3      	strb	r3, [r4, #11]
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb_tci_init(pcb);
  }
  return pcb;
}
 8010524:	4620      	mov	r0, r4
 8010526:	bd10      	pop	{r4, pc}

08010528 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8010528:	f7ff bff0 	b.w	801050c <udp_new>

0801052c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801052c:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801052e:	b138      	cbz	r0, 8010540 <udp_netif_ip_addr_changed+0x14>
 8010530:	6803      	ldr	r3, [r0, #0]
 8010532:	b12b      	cbz	r3, 8010540 <udp_netif_ip_addr_changed+0x14>
 8010534:	b121      	cbz	r1, 8010540 <udp_netif_ip_addr_changed+0x14>
 8010536:	680b      	ldr	r3, [r1, #0]
 8010538:	b113      	cbz	r3, 8010540 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801053a:	4b06      	ldr	r3, [pc, #24]	@ (8010554 <udp_netif_ip_addr_changed+0x28>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	b903      	cbnz	r3, 8010542 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8010540:	bd10      	pop	{r4, pc}
      if (ip_addr_eq(&upcb->local_ip, old_addr)) {
 8010542:	681c      	ldr	r4, [r3, #0]
 8010544:	6802      	ldr	r2, [r0, #0]
 8010546:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010548:	bf04      	itt	eq
 801054a:	680a      	ldreq	r2, [r1, #0]
 801054c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	e7f5      	b.n	801053e <udp_netif_ip_addr_changed+0x12>
 8010552:	bf00      	nop
 8010554:	20010fc0 	.word	0x20010fc0

08010558 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010558:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801055a:	2618      	movs	r6, #24
 801055c:	4c07      	ldr	r4, [pc, #28]	@ (801057c <etharp_free_entry+0x24>)
{
 801055e:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8010560:	4346      	muls	r6, r0
 8010562:	59a0      	ldr	r0, [r4, r6]
 8010564:	b118      	cbz	r0, 801056e <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010566:	f7fc f833 	bl	800c5d0 <pbuf_free>
    arp_table[i].q = NULL;
 801056a:	2300      	movs	r3, #0
 801056c:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801056e:	2318      	movs	r3, #24
 8010570:	fb03 4405 	mla	r4, r3, r5, r4
 8010574:	2300      	movs	r3, #0
 8010576:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	bf00      	nop
 801057c:	20010fc8 	.word	0x20010fc8

08010580 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010584:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010586:	f04f 0e0a 	mov.w	lr, #10
{
 801058a:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801058c:	4699      	mov	r9, r3
 801058e:	469b      	mov	fp, r3
 8010590:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8010592:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010594:	4677      	mov	r7, lr
 8010596:	46f0      	mov	r8, lr
{
 8010598:	e9cd 2100 	strd	r2, r1, [sp]
 801059c:	4a3a      	ldr	r2, [pc, #232]	@ (8010688 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801059e:	2c0a      	cmp	r4, #10
 80105a0:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 80105a2:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80105a6:	d11a      	bne.n	80105de <etharp_find_entry+0x5e>
 80105a8:	f1ba 0f00 	cmp.w	sl, #0
 80105ac:	d05e      	beq.n	801066c <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_eq(ipaddr, &arp_table[i].ipaddr)
 80105ae:	b155      	cbz	r5, 80105c6 <etharp_find_entry+0x46>
 80105b0:	6829      	ldr	r1, [r5, #0]
 80105b2:	6856      	ldr	r6, [r2, #4]
 80105b4:	42b1      	cmp	r1, r6
 80105b6:	d106      	bne.n	80105c6 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80105b8:	9900      	ldr	r1, [sp, #0]
 80105ba:	2900      	cmp	r1, #0
 80105bc:	d049      	beq.n	8010652 <etharp_find_entry+0xd2>
 80105be:	6891      	ldr	r1, [r2, #8]
 80105c0:	9e00      	ldr	r6, [sp, #0]
 80105c2:	42b1      	cmp	r1, r6
 80105c4:	d045      	beq.n	8010652 <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80105c6:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 80105ca:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 80105cc:	d149      	bne.n	8010662 <etharp_find_entry+0xe2>
        if (arp_table[i].q != NULL) {
 80105ce:	6816      	ldr	r6, [r2, #0]
 80105d0:	2e00      	cmp	r6, #0
 80105d2:	d041      	beq.n	8010658 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 80105d4:	458c      	cmp	ip, r1
 80105d6:	d805      	bhi.n	80105e4 <etharp_find_entry+0x64>
            old_queue = i;
            age_queue = arp_table[i].ctime;
 80105d8:	468c      	mov	ip, r1
            old_queue = i;
 80105da:	4686      	mov	lr, r0
 80105dc:	e002      	b.n	80105e4 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 80105de:	f1ba 0f00 	cmp.w	sl, #0
 80105e2:	d1e4      	bne.n	80105ae <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105e4:	3301      	adds	r3, #1
 80105e6:	3218      	adds	r2, #24
 80105e8:	2b0a      	cmp	r3, #10
 80105ea:	d1d8      	bne.n	801059e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80105ec:	9b01      	ldr	r3, [sp, #4]
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d146      	bne.n	8010680 <etharp_find_entry+0x100>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80105f2:	2c09      	cmp	r4, #9
 80105f4:	dd12      	ble.n	801061c <etharp_find_entry+0x9c>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80105f6:	2f09      	cmp	r7, #9
 80105f8:	dc3a      	bgt.n	8010670 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80105fa:	2318      	movs	r3, #24
 80105fc:	4a22      	ldr	r2, [pc, #136]	@ (8010688 <etharp_find_entry+0x108>)
 80105fe:	437b      	muls	r3, r7
 8010600:	58d3      	ldr	r3, [r2, r3]
 8010602:	b133      	cbz	r3, 8010612 <etharp_find_entry+0x92>
 8010604:	4b21      	ldr	r3, [pc, #132]	@ (801068c <etharp_find_entry+0x10c>)
 8010606:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801060a:	4921      	ldr	r1, [pc, #132]	@ (8010690 <etharp_find_entry+0x110>)
 801060c:	4821      	ldr	r0, [pc, #132]	@ (8010694 <etharp_find_entry+0x114>)
 801060e:	f005 fabd 	bl	8015b8c <iprintf>
            old_stable = i;
 8010612:	46b8      	mov	r8, r7
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8010614:	4644      	mov	r4, r8
 8010616:	4640      	mov	r0, r8
 8010618:	f7ff ff9e 	bl	8010558 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801061c:	4f1a      	ldr	r7, [pc, #104]	@ (8010688 <etharp_find_entry+0x108>)
 801061e:	2318      	movs	r3, #24
 8010620:	fb03 7304 	mla	r3, r3, r4, r7
 8010624:	7d1b      	ldrb	r3, [r3, #20]
 8010626:	b133      	cbz	r3, 8010636 <etharp_find_entry+0xb6>
 8010628:	4b18      	ldr	r3, [pc, #96]	@ (801068c <etharp_find_entry+0x10c>)
 801062a:	f240 1285 	movw	r2, #389	@ 0x185
 801062e:	491a      	ldr	r1, [pc, #104]	@ (8010698 <etharp_find_entry+0x118>)
 8010630:	4818      	ldr	r0, [pc, #96]	@ (8010694 <etharp_find_entry+0x114>)
 8010632:	f005 faab 	bl	8015b8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010636:	b125      	cbz	r5, 8010642 <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010638:	2318      	movs	r3, #24
 801063a:	682a      	ldr	r2, [r5, #0]
 801063c:	fb03 7304 	mla	r3, r3, r4, r7
 8010640:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8010642:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010644:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8010646:	fb03 7704 	mla	r7, r3, r4, r7
 801064a:	2300      	movs	r3, #0
 801064c:	827b      	strh	r3, [r7, #18]
  arp_table[i].netif = netif;
 801064e:	9b00      	ldr	r3, [sp, #0]
 8010650:	60bb      	str	r3, [r7, #8]
}
 8010652:	b003      	add	sp, #12
 8010654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8010658:	458b      	cmp	fp, r1
 801065a:	d8c3      	bhi.n	80105e4 <etharp_find_entry+0x64>
            age_pending = arp_table[i].ctime;
 801065c:	468b      	mov	fp, r1
            old_pending = i;
 801065e:	4680      	mov	r8, r0
 8010660:	e7c0      	b.n	80105e4 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8010662:	4589      	cmp	r9, r1
 8010664:	d8be      	bhi.n	80105e4 <etharp_find_entry+0x64>
            age_stable = arp_table[i].ctime;
 8010666:	4689      	mov	r9, r1
            old_stable = i;
 8010668:	4607      	mov	r7, r0
 801066a:	e7bb      	b.n	80105e4 <etharp_find_entry+0x64>
      empty = i;
 801066c:	4604      	mov	r4, r0
 801066e:	e7b9      	b.n	80105e4 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010670:	f1b8 0f09 	cmp.w	r8, #9
 8010674:	ddce      	ble.n	8010614 <etharp_find_entry+0x94>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010676:	f1be 0f09 	cmp.w	lr, #9
 801067a:	dc01      	bgt.n	8010680 <etharp_find_entry+0x100>
      i = old_queue;
 801067c:	46f0      	mov	r8, lr
 801067e:	e7c9      	b.n	8010614 <etharp_find_entry+0x94>
    return (s16_t)ERR_MEM;
 8010680:	f04f 30ff 	mov.w	r0, #4294967295
 8010684:	e7e5      	b.n	8010652 <etharp_find_entry+0xd2>
 8010686:	bf00      	nop
 8010688:	20010fc8 	.word	0x20010fc8
 801068c:	08018839 	.word	0x08018839
 8010690:	0801885e 	.word	0x0801885e
 8010694:	080169d3 	.word	0x080169d3
 8010698:	08018875 	.word	0x08018875

0801069c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801069c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80106a0:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 80106a4:	4688      	mov	r8, r1
 80106a6:	4691      	mov	r9, r2
 80106a8:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80106aa:	4607      	mov	r7, r0
 80106ac:	b930      	cbnz	r0, 80106bc <etharp_raw+0x20>
 80106ae:	4b2d      	ldr	r3, [pc, #180]	@ (8010764 <etharp_raw+0xc8>)
 80106b0:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 80106b4:	492c      	ldr	r1, [pc, #176]	@ (8010768 <etharp_raw+0xcc>)
 80106b6:	482d      	ldr	r0, [pc, #180]	@ (801076c <etharp_raw+0xd0>)
 80106b8:	f005 fa68 	bl	8015b8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80106bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80106c0:	211c      	movs	r1, #28
 80106c2:	200e      	movs	r0, #14
 80106c4:	f7fb ffee 	bl	800c6a4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80106c8:	4605      	mov	r5, r0
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d047      	beq.n	801075e <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80106ce:	8943      	ldrh	r3, [r0, #10]
 80106d0:	2b1b      	cmp	r3, #27
 80106d2:	d806      	bhi.n	80106e2 <etharp_raw+0x46>
 80106d4:	4b23      	ldr	r3, [pc, #140]	@ (8010764 <etharp_raw+0xc8>)
 80106d6:	f240 426b 	movw	r2, #1131	@ 0x46b
 80106da:	4925      	ldr	r1, [pc, #148]	@ (8010770 <etharp_raw+0xd4>)
 80106dc:	4823      	ldr	r0, [pc, #140]	@ (801076c <etharp_raw+0xd0>)
 80106de:	f005 fa55 	bl	8015b8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80106e2:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80106e4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80106e8:	f7fb fa1a 	bl	800bb20 <lwip_htons>
 80106ec:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80106ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80106f2:	2b06      	cmp	r3, #6
 80106f4:	d006      	beq.n	8010704 <etharp_raw+0x68>
 80106f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010764 <etharp_raw+0xc8>)
 80106f8:	f240 4272 	movw	r2, #1138	@ 0x472
 80106fc:	491d      	ldr	r1, [pc, #116]	@ (8010774 <etharp_raw+0xd8>)
 80106fe:	481b      	ldr	r0, [pc, #108]	@ (801076c <etharp_raw+0xd0>)
 8010700:	f005 fa44 	bl	8015b8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010704:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010706:	4642      	mov	r2, r8
 8010708:	4629      	mov	r1, r5
 801070a:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801070c:	60a3      	str	r3, [r4, #8]
 801070e:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010710:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010712:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010714:	f8da 3000 	ldr.w	r3, [sl]
 8010718:	f8c4 3012 	str.w	r3, [r4, #18]
 801071c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8010720:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801072a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801072c:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801072e:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010730:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010732:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010734:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010736:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010738:	2308      	movs	r3, #8
 801073a:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 801073c:	2306      	movs	r3, #6
 801073e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010740:	2304      	movs	r3, #4
 8010742:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010744:	f640 0306 	movw	r3, #2054	@ 0x806
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	464b      	mov	r3, r9
 801074c:	f001 f99c 	bl	8011a88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010750:	4628      	mov	r0, r5
 8010752:	f7fb ff3d 	bl	800c5d0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8010756:	4630      	mov	r0, r6
}
 8010758:	b002      	add	sp, #8
 801075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 801075e:	f04f 30ff 	mov.w	r0, #4294967295
 8010762:	e7f9      	b.n	8010758 <etharp_raw+0xbc>
 8010764:	08018839 	.word	0x08018839
 8010768:	080169c5 	.word	0x080169c5
 801076c:	080169d3 	.word	0x080169d3
 8010770:	0801889e 	.word	0x0801889e
 8010774:	080188cf 	.word	0x080188cf

08010778 <etharp_cleanup_netif>:
{
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	4606      	mov	r6, r0
 801077c:	4d07      	ldr	r5, [pc, #28]	@ (801079c <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801077e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010780:	7d2b      	ldrb	r3, [r5, #20]
 8010782:	b12b      	cbz	r3, 8010790 <etharp_cleanup_netif+0x18>
 8010784:	68ab      	ldr	r3, [r5, #8]
 8010786:	42b3      	cmp	r3, r6
 8010788:	d102      	bne.n	8010790 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 801078a:	4620      	mov	r0, r4
 801078c:	f7ff fee4 	bl	8010558 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010790:	3401      	adds	r4, #1
 8010792:	3518      	adds	r5, #24
 8010794:	2c0a      	cmp	r4, #10
 8010796:	d1f3      	bne.n	8010780 <etharp_cleanup_netif+0x8>
}
 8010798:	bd70      	pop	{r4, r5, r6, pc}
 801079a:	bf00      	nop
 801079c:	20010fc8 	.word	0x20010fc8

080107a0 <etharp_input>:
{
 80107a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a4:	4607      	mov	r7, r0
 80107a6:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80107a8:	460c      	mov	r4, r1
 80107aa:	2900      	cmp	r1, #0
 80107ac:	f000 8093 	beq.w	80108d6 <etharp_input+0x136>
  hdr = (struct etharp_hdr *)p->payload;
 80107b0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80107b2:	882b      	ldrh	r3, [r5, #0]
 80107b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107b8:	d108      	bne.n	80107cc <etharp_input+0x2c>
 80107ba:	792b      	ldrb	r3, [r5, #4]
 80107bc:	2b06      	cmp	r3, #6
 80107be:	d105      	bne.n	80107cc <etharp_input+0x2c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80107c0:	796b      	ldrb	r3, [r5, #5]
 80107c2:	2b04      	cmp	r3, #4
 80107c4:	d102      	bne.n	80107cc <etharp_input+0x2c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80107c6:	886b      	ldrh	r3, [r5, #2]
 80107c8:	2b08      	cmp	r3, #8
 80107ca:	d005      	beq.n	80107d8 <etharp_input+0x38>
  pbuf_free(p);
 80107cc:	4638      	mov	r0, r7
}
 80107ce:	b009      	add	sp, #36	@ 0x24
 80107d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80107d4:	f7fb befc 	b.w	800c5d0 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80107d8:	f8d5 600e 	ldr.w	r6, [r5, #14]
 80107dc:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80107e0:	684b      	ldr	r3, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80107e2:	69aa      	ldr	r2, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80107e4:	9607      	str	r6, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80107e6:	b92b      	cbnz	r3, 80107f4 <etharp_input+0x54>
    from_us = 0;
 80107e8:	469a      	mov	sl, r3
 80107ea:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80107ee:	f04f 0b02 	mov.w	fp, #2
 80107f2:	e009      	b.n	8010808 <etharp_input+0x68>
    from_us = (u8_t)ip4_addr_eq(&sipaddr, netif_ip4_addr(netif));
 80107f4:	1b99      	subs	r1, r3, r6
 80107f6:	f1d1 0a00 	rsbs	sl, r1, #0
 80107fa:	eb4a 0a01 	adc.w	sl, sl, r1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80107fe:	4293      	cmp	r3, r2
 8010800:	d1f3      	bne.n	80107ea <etharp_input+0x4a>
 8010802:	f04f 0901 	mov.w	r9, #1
 8010806:	46cb      	mov	fp, r9
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010808:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801080c:	2b06      	cmp	r3, #6
 801080e:	d006      	beq.n	801081e <etharp_input+0x7e>
 8010810:	4b32      	ldr	r3, [pc, #200]	@ (80108dc <etharp_input+0x13c>)
 8010812:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010816:	4932      	ldr	r1, [pc, #200]	@ (80108e0 <etharp_input+0x140>)
 8010818:	4832      	ldr	r0, [pc, #200]	@ (80108e4 <etharp_input+0x144>)
 801081a:	f005 f9b7 	bl	8015b8c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 801081e:	2e00      	cmp	r6, #0
 8010820:	d040      	beq.n	80108a4 <etharp_input+0x104>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010822:	4621      	mov	r1, r4
 8010824:	4630      	mov	r0, r6
 8010826:	f000 fcbe 	bl	80111a6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801082a:	9005      	str	r0, [sp, #20]
 801082c:	2800      	cmp	r0, #0
 801082e:	d139      	bne.n	80108a4 <etharp_input+0x104>
      ip4_addr_ismulticast(ipaddr)) {
 8010830:	f006 06f0 	and.w	r6, r6, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010834:	2ee0      	cmp	r6, #224	@ 0xe0
 8010836:	d035      	beq.n	80108a4 <etharp_input+0x104>
  i = etharp_find_entry(ipaddr, flags, netif);
 8010838:	4622      	mov	r2, r4
 801083a:	4659      	mov	r1, fp
 801083c:	a807      	add	r0, sp, #28
 801083e:	f7ff fe9f 	bl	8010580 <etharp_find_entry>
  if (i < 0) {
 8010842:	1e02      	subs	r2, r0, #0
 8010844:	db2e      	blt.n	80108a4 <etharp_input+0x104>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010846:	2018      	movs	r0, #24
 8010848:	4e27      	ldr	r6, [pc, #156]	@ (80108e8 <etharp_input+0x148>)
 801084a:	f04f 0e02 	mov.w	lr, #2
  arp_table[i].ctime = 0;
 801084e:	9b05      	ldr	r3, [sp, #20]
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010850:	fb00 f102 	mul.w	r1, r0, r2
 8010854:	eb06 0c01 	add.w	ip, r6, r1
 8010858:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801085c:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8010860:	f8cc 4008 	str.w	r4, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010864:	fb12 e200 	smlabb	r2, r2, r0, lr
 8010868:	f8d8 0000 	ldr.w	r0, [r8]
 801086c:	eb02 0e06 	add.w	lr, r2, r6
 8010870:	50b0      	str	r0, [r6, r2]
 8010872:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8010876:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 801087a:	f856 b001 	ldr.w	fp, [r6, r1]
  arp_table[i].ctime = 0;
 801087e:	f8ac 3012 	strh.w	r3, [ip, #18]
  if (arp_table[i].q != NULL) {
 8010882:	f1bb 0f00 	cmp.w	fp, #0
 8010886:	d00d      	beq.n	80108a4 <etharp_input+0x104>
    arp_table[i].q = NULL;
 8010888:	5073      	str	r3, [r6, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801088a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801088e:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 8010892:	4659      	mov	r1, fp
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	4620      	mov	r0, r4
 8010898:	4643      	mov	r3, r8
 801089a:	f001 f8f5 	bl	8011a88 <ethernet_output>
    pbuf_free(p);
 801089e:	4658      	mov	r0, fp
 80108a0:	f7fb fe96 	bl	800c5d0 <pbuf_free>
  switch (hdr->opcode) {
 80108a4:	88eb      	ldrh	r3, [r5, #6]
 80108a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108aa:	d18f      	bne.n	80107cc <etharp_input+0x2c>
      if (for_us && !from_us) {
 80108ac:	f1b9 0f00 	cmp.w	r9, #0
 80108b0:	d08c      	beq.n	80107cc <etharp_input+0x2c>
 80108b2:	f1ba 0f00 	cmp.w	sl, #0
 80108b6:	d189      	bne.n	80107cc <etharp_input+0x2c>
        etharp_raw(netif,
 80108b8:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80108ba:	f104 0326 	add.w	r3, r4, #38	@ 0x26
        etharp_raw(netif,
 80108be:	4620      	mov	r0, r4
 80108c0:	9203      	str	r2, [sp, #12]
 80108c2:	aa07      	add	r2, sp, #28
 80108c4:	4619      	mov	r1, r3
 80108c6:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80108ca:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 80108cc:	9200      	str	r2, [sp, #0]
 80108ce:	4642      	mov	r2, r8
 80108d0:	f7ff fee4 	bl	801069c <etharp_raw>
 80108d4:	e77a      	b.n	80107cc <etharp_input+0x2c>
}
 80108d6:	b009      	add	sp, #36	@ 0x24
 80108d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108dc:	08018839 	.word	0x08018839
 80108e0:	0801892f 	.word	0x0801892f
 80108e4:	080169d3 	.word	0x080169d3
 80108e8:	20010fc8 	.word	0x20010fc8

080108ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80108ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108ee:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80108f0:	2401      	movs	r4, #1
 80108f2:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80108f6:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80108f8:	e9cd 1402 	strd	r1, r4, [sp, #8]
 80108fc:	4904      	ldr	r1, [pc, #16]	@ (8010910 <etharp_request+0x24>)
 80108fe:	9200      	str	r2, [sp, #0]
 8010900:	9101      	str	r1, [sp, #4]
 8010902:	4619      	mov	r1, r3
 8010904:	4a03      	ldr	r2, [pc, #12]	@ (8010914 <etharp_request+0x28>)
 8010906:	f7ff fec9 	bl	801069c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 801090a:	b004      	add	sp, #16
 801090c:	bd10      	pop	{r4, pc}
 801090e:	bf00      	nop
 8010910:	0808f8fc 	.word	0x0808f8fc
 8010914:	0808f902 	.word	0x0808f902

08010918 <etharp_tmr>:
{
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	4c12      	ldr	r4, [pc, #72]	@ (8010964 <etharp_tmr+0x4c>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801091c:	2500      	movs	r5, #0
    u8_t state = arp_table[i].state;
 801091e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8010920:	b16a      	cbz	r2, 801093e <etharp_tmr+0x26>
      arp_table[i].ctime++;
 8010922:	8a63      	ldrh	r3, [r4, #18]
 8010924:	3301      	adds	r3, #1
 8010926:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010928:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 801092c:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801092e:	d203      	bcs.n	8010938 <etharp_tmr+0x20>
 8010930:	2a01      	cmp	r2, #1
 8010932:	d109      	bne.n	8010948 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010934:	2b04      	cmp	r3, #4
 8010936:	d90c      	bls.n	8010952 <etharp_tmr+0x3a>
        etharp_free_entry(i);
 8010938:	4628      	mov	r0, r5
 801093a:	f7ff fe0d 	bl	8010558 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801093e:	3501      	adds	r5, #1
 8010940:	3418      	adds	r4, #24
 8010942:	2d0a      	cmp	r5, #10
 8010944:	d1eb      	bne.n	801091e <etharp_tmr+0x6>
}
 8010946:	bd38      	pop	{r3, r4, r5, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010948:	2a03      	cmp	r2, #3
 801094a:	d107      	bne.n	801095c <etharp_tmr+0x44>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801094c:	2304      	movs	r3, #4
        arp_table[i].state = ETHARP_STATE_STABLE;
 801094e:	7523      	strb	r3, [r4, #20]
 8010950:	e7f5      	b.n	801093e <etharp_tmr+0x26>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010952:	1d21      	adds	r1, r4, #4
 8010954:	68a0      	ldr	r0, [r4, #8]
 8010956:	f7ff ffc9 	bl	80108ec <etharp_request>
 801095a:	e7f0      	b.n	801093e <etharp_tmr+0x26>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801095c:	2a04      	cmp	r2, #4
 801095e:	d1ee      	bne.n	801093e <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010960:	2302      	movs	r3, #2
 8010962:	e7f4      	b.n	801094e <etharp_tmr+0x36>
 8010964:	20010fc8 	.word	0x20010fc8

08010968 <etharp_output_to_arp_index>:
{
 8010968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801096c:	4f24      	ldr	r7, [pc, #144]	@ (8010a00 <etharp_output_to_arp_index+0x98>)
 801096e:	2318      	movs	r3, #24
{
 8010970:	4606      	mov	r6, r0
 8010972:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010974:	fb03 7302 	mla	r3, r3, r2, r7
{
 8010978:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801097a:	7d1b      	ldrb	r3, [r3, #20]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d806      	bhi.n	801098e <etharp_output_to_arp_index+0x26>
 8010980:	4b20      	ldr	r3, [pc, #128]	@ (8010a04 <etharp_output_to_arp_index+0x9c>)
 8010982:	f240 22ef 	movw	r2, #751	@ 0x2ef
 8010986:	4920      	ldr	r1, [pc, #128]	@ (8010a08 <etharp_output_to_arp_index+0xa0>)
 8010988:	4820      	ldr	r0, [pc, #128]	@ (8010a0c <etharp_output_to_arp_index+0xa4>)
 801098a:	f005 f8ff 	bl	8015b8c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801098e:	2318      	movs	r3, #24
 8010990:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8010994:	f106 0a26 	add.w	sl, r6, #38	@ 0x26
 8010998:	fb03 7404 	mla	r4, r3, r4, r7
 801099c:	00ed      	lsls	r5, r5, #3
 801099e:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109a0:	f105 080c 	add.w	r8, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80109a4:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109a6:	44b8      	add	r8, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80109a8:	d10b      	bne.n	80109c2 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80109aa:	8a63      	ldrh	r3, [r4, #18]
 80109ac:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80109b0:	d913      	bls.n	80109da <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80109b2:	1d29      	adds	r1, r5, #4
 80109b4:	4630      	mov	r0, r6
 80109b6:	4439      	add	r1, r7
 80109b8:	f7ff ff98 	bl	80108ec <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109bc:	b908      	cbnz	r0, 80109c2 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80109be:	2303      	movs	r3, #3
 80109c0:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80109c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80109c6:	4652      	mov	r2, sl
 80109c8:	4649      	mov	r1, r9
 80109ca:	4630      	mov	r0, r6
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	4643      	mov	r3, r8
 80109d0:	f001 f85a 	bl	8011a88 <ethernet_output>
}
 80109d4:	b004      	add	sp, #16
 80109d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80109da:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80109de:	d3f0      	bcc.n	80109c2 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109e0:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109e2:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109e4:	4642      	mov	r2, r8
 80109e6:	4651      	mov	r1, sl
 80109e8:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109ea:	442f      	add	r7, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109ec:	4b08      	ldr	r3, [pc, #32]	@ (8010a10 <etharp_output_to_arp_index+0xa8>)
 80109ee:	4630      	mov	r0, r6
 80109f0:	9702      	str	r7, [sp, #8]
 80109f2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80109f4:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	4653      	mov	r3, sl
 80109fa:	f7ff fe4f 	bl	801069c <etharp_raw>
 80109fe:	e7dd      	b.n	80109bc <etharp_output_to_arp_index+0x54>
 8010a00:	20010fc8 	.word	0x20010fc8
 8010a04:	08018839 	.word	0x08018839
 8010a08:	08018953 	.word	0x08018953
 8010a0c:	080169d3 	.word	0x080169d3
 8010a10:	0808f8fc 	.word	0x0808f8fc

08010a14 <etharp_query>:
{
 8010a14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a18:	4688      	mov	r8, r1
 8010a1a:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a1c:	4601      	mov	r1, r0
{
 8010a1e:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a20:	f8d8 0000 	ldr.w	r0, [r8]
 8010a24:	f000 fbbf 	bl	80111a6 <ip4_addr_isbroadcast_u32>
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	d17a      	bne.n	8010b22 <etharp_query+0x10e>
      ip4_addr_ismulticast(ipaddr) ||
 8010a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8010a30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a34:	2ae0      	cmp	r2, #224	@ 0xe0
 8010a36:	d074      	beq.n	8010b22 <etharp_query+0x10e>
      ip4_addr_isany(ipaddr)) {
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d072      	beq.n	8010b22 <etharp_query+0x10e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010a3c:	4632      	mov	r2, r6
 8010a3e:	2101      	movs	r1, #1
 8010a40:	4640      	mov	r0, r8
 8010a42:	f7ff fd9d 	bl	8010580 <etharp_find_entry>
  if (i_err < 0) {
 8010a46:	1e04      	subs	r4, r0, #0
 8010a48:	da03      	bge.n	8010a52 <etharp_query+0x3e>
    return (err_t)i_err;
 8010a4a:	b260      	sxtb	r0, r4
}
 8010a4c:	b002      	add	sp, #8
 8010a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010a52:	b2a3      	uxth	r3, r4
 8010a54:	2b7e      	cmp	r3, #126	@ 0x7e
 8010a56:	d906      	bls.n	8010a66 <etharp_query+0x52>
 8010a58:	4b3c      	ldr	r3, [pc, #240]	@ (8010b4c <etharp_query+0x138>)
 8010a5a:	f240 32c2 	movw	r2, #962	@ 0x3c2
 8010a5e:	493c      	ldr	r1, [pc, #240]	@ (8010b50 <etharp_query+0x13c>)
 8010a60:	483c      	ldr	r0, [pc, #240]	@ (8010b54 <etharp_query+0x140>)
 8010a62:	f005 f893 	bl	8015b8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010a66:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010a68:	4f3b      	ldr	r7, [pc, #236]	@ (8010b58 <etharp_query+0x144>)
 8010a6a:	2318      	movs	r3, #24
 8010a6c:	fb03 7304 	mla	r3, r3, r4, r7
 8010a70:	7d1a      	ldrb	r2, [r3, #20]
 8010a72:	2a00      	cmp	r2, #0
 8010a74:	d158      	bne.n	8010b28 <etharp_query+0x114>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010a76:	f04f 0901 	mov.w	r9, #1
    arp_table[i].netif = netif;
 8010a7a:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010a7c:	f883 9014 	strb.w	r9, [r3, #20]
    result = etharp_request(netif, ipaddr);
 8010a80:	4641      	mov	r1, r8
 8010a82:	4630      	mov	r0, r6
 8010a84:	f7ff ff32 	bl	80108ec <etharp_request>
    if (result != ERR_OK) {
 8010a88:	b948      	cbnz	r0, 8010a9e <etharp_query+0x8a>
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 8010a8a:	2318      	movs	r3, #24
 8010a8c:	fb03 7304 	mla	r3, r3, r4, r7
 8010a90:	7d1a      	ldrb	r2, [r3, #20]
 8010a92:	2a01      	cmp	r2, #1
 8010a94:	d103      	bne.n	8010a9e <etharp_query+0x8a>
 8010a96:	f1b9 0f00 	cmp.w	r9, #0
 8010a9a:	d100      	bne.n	8010a9e <etharp_query+0x8a>
        arp_table[i].ctime = 0;
 8010a9c:	8258      	strh	r0, [r3, #18]
    if (q == NULL) {
 8010a9e:	2d00      	cmp	r5, #0
 8010aa0:	d0d4      	beq.n	8010a4c <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010aa2:	2318      	movs	r3, #24
 8010aa4:	fb03 7204 	mla	r2, r3, r4, r7
 8010aa8:	7d12      	ldrb	r2, [r2, #20]
 8010aaa:	2a01      	cmp	r2, #1
 8010aac:	d910      	bls.n	8010ad0 <etharp_query+0xbc>
    ETHARP_SET_ADDRHINT(netif, i);
 8010aae:	4a2b      	ldr	r2, [pc, #172]	@ (8010b5c <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010ab0:	fb03 7304 	mla	r3, r3, r4, r7
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 8010ab8:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010abe:	330c      	adds	r3, #12
 8010ac0:	9200      	str	r2, [sp, #0]
 8010ac2:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8010ac6:	f000 ffdf 	bl	8011a88 <ethernet_output>
 8010aca:	e7bf      	b.n	8010a4c <etharp_query+0x38>
  int is_new_entry = 0;
 8010acc:	46a9      	mov	r9, r5
 8010ace:	e7d7      	b.n	8010a80 <etharp_query+0x6c>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010ad0:	d1bc      	bne.n	8010a4c <etharp_query+0x38>
    p = q;
 8010ad2:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == NULL));
 8010ad4:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8010b4c <etharp_query+0x138>
 8010ad8:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8010b60 <etharp_query+0x14c>
 8010adc:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8010b54 <etharp_query+0x140>
 8010ae0:	8972      	ldrh	r2, [r6, #10]
 8010ae2:	8933      	ldrh	r3, [r6, #8]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d108      	bne.n	8010afa <etharp_query+0xe6>
 8010ae8:	6833      	ldr	r3, [r6, #0]
 8010aea:	b133      	cbz	r3, 8010afa <etharp_query+0xe6>
 8010aec:	4643      	mov	r3, r8
 8010aee:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8010af2:	4649      	mov	r1, r9
 8010af4:	4650      	mov	r0, sl
 8010af6:	f005 f849 	bl	8015b8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010afa:	7b33      	ldrb	r3, [r6, #12]
 8010afc:	065b      	lsls	r3, r3, #25
 8010afe:	d418      	bmi.n	8010b32 <etharp_query+0x11e>
      p = p->next;
 8010b00:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8010b02:	2e00      	cmp	r6, #0
 8010b04:	d1ec      	bne.n	8010ae0 <etharp_query+0xcc>
      pbuf_ref(p);
 8010b06:	4628      	mov	r0, r5
 8010b08:	f7fb feae 	bl	800c868 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8010b0c:	2618      	movs	r6, #24
 8010b0e:	fb06 f304 	mul.w	r3, r6, r4
 8010b12:	58f8      	ldr	r0, [r7, r3]
 8010b14:	b108      	cbz	r0, 8010b1a <etharp_query+0x106>
        pbuf_free(arp_table[i].q);
 8010b16:	f7fb fd5b 	bl	800c5d0 <pbuf_free>
      arp_table[i].q = p;
 8010b1a:	4366      	muls	r6, r4
      result = ERR_OK;
 8010b1c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8010b1e:	51bd      	str	r5, [r7, r6]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8010b20:	e794      	b.n	8010a4c <etharp_query+0x38>
    return ERR_ARG;
 8010b22:	f06f 000f 	mvn.w	r0, #15
 8010b26:	e791      	b.n	8010a4c <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8010b28:	2d00      	cmp	r5, #0
 8010b2a:	d0cf      	beq.n	8010acc <etharp_query+0xb8>
  err_t result = ERR_MEM;
 8010b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b30:	e7b7      	b.n	8010aa2 <etharp_query+0x8e>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010b32:	462a      	mov	r2, r5
 8010b34:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8010b38:	200e      	movs	r0, #14
 8010b3a:	f7fb ff9f 	bl	800ca7c <pbuf_clone>
    if (p != NULL) {
 8010b3e:	4605      	mov	r5, r0
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d1e3      	bne.n	8010b0c <etharp_query+0xf8>
      result = ERR_MEM;
 8010b44:	f04f 30ff 	mov.w	r0, #4294967295
 8010b48:	e780      	b.n	8010a4c <etharp_query+0x38>
 8010b4a:	bf00      	nop
 8010b4c:	08018839 	.word	0x08018839
 8010b50:	08018983 	.word	0x08018983
 8010b54:	080169d3 	.word	0x080169d3
 8010b58:	20010fc8 	.word	0x20010fc8
 8010b5c:	20010fc4 	.word	0x20010fc4
 8010b60:	08018991 	.word	0x08018991

08010b64 <etharp_output>:
{
 8010b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b66:	460e      	mov	r6, r1
 8010b68:	b085      	sub	sp, #20
 8010b6a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	b930      	cbnz	r0, 8010b7e <etharp_output+0x1a>
 8010b70:	4b42      	ldr	r3, [pc, #264]	@ (8010c7c <etharp_output+0x118>)
 8010b72:	f240 321f 	movw	r2, #799	@ 0x31f
 8010b76:	4942      	ldr	r1, [pc, #264]	@ (8010c80 <etharp_output+0x11c>)
 8010b78:	4842      	ldr	r0, [pc, #264]	@ (8010c84 <etharp_output+0x120>)
 8010b7a:	f005 f807 	bl	8015b8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b7e:	b936      	cbnz	r6, 8010b8e <etharp_output+0x2a>
 8010b80:	4b3e      	ldr	r3, [pc, #248]	@ (8010c7c <etharp_output+0x118>)
 8010b82:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010b86:	4940      	ldr	r1, [pc, #256]	@ (8010c88 <etharp_output+0x124>)
 8010b88:	483e      	ldr	r0, [pc, #248]	@ (8010c84 <etharp_output+0x120>)
 8010b8a:	f004 ffff 	bl	8015b8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010b8e:	b935      	cbnz	r5, 8010b9e <etharp_output+0x3a>
 8010b90:	4b3a      	ldr	r3, [pc, #232]	@ (8010c7c <etharp_output+0x118>)
 8010b92:	f240 3221 	movw	r2, #801	@ 0x321
 8010b96:	493d      	ldr	r1, [pc, #244]	@ (8010c8c <etharp_output+0x128>)
 8010b98:	483a      	ldr	r0, [pc, #232]	@ (8010c84 <etharp_output+0x120>)
 8010b9a:	f004 fff7 	bl	8015b8c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010b9e:	4621      	mov	r1, r4
 8010ba0:	6828      	ldr	r0, [r5, #0]
 8010ba2:	f000 fb00 	bl	80111a6 <ip4_addr_isbroadcast_u32>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d162      	bne.n	8010c70 <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010baa:	682b      	ldr	r3, [r5, #0]
 8010bac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8010bb0:	2ae0      	cmp	r2, #224	@ 0xe0
 8010bb2:	d11c      	bne.n	8010bee <etharp_output+0x8a>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010bba:	235e      	movs	r3, #94	@ 0x5e
 8010bbc:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010bc0:	786b      	ldrb	r3, [r5, #1]
 8010bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010bc6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010bca:	78ab      	ldrb	r3, [r5, #2]
 8010bcc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010bd0:	78eb      	ldrb	r3, [r5, #3]
 8010bd2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8010bd6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4620      	mov	r0, r4
 8010be0:	9200      	str	r2, [sp, #0]
 8010be2:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 8010be6:	f000 ff4f 	bl	8011a88 <ethernet_output>
}
 8010bea:	b005      	add	sp, #20
 8010bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010bee:	6862      	ldr	r2, [r4, #4]
 8010bf0:	68a1      	ldr	r1, [r4, #8]
 8010bf2:	405a      	eors	r2, r3
 8010bf4:	420a      	tst	r2, r1
 8010bf6:	d009      	beq.n	8010c0c <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8010bf8:	b29b      	uxth	r3, r3
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010bfa:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d004      	beq.n	8010c0c <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010c02:	68e3      	ldr	r3, [r4, #12]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d035      	beq.n	8010c74 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 8010c08:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c0c:	4920      	ldr	r1, [pc, #128]	@ (8010c90 <etharp_output+0x12c>)
 8010c0e:	2018      	movs	r0, #24
 8010c10:	4b20      	ldr	r3, [pc, #128]	@ (8010c94 <etharp_output+0x130>)
 8010c12:	780a      	ldrb	r2, [r1, #0]
 8010c14:	fb00 3302 	mla	r3, r0, r2, r3
 8010c18:	7d18      	ldrb	r0, [r3, #20]
 8010c1a:	2801      	cmp	r0, #1
 8010c1c:	d90d      	bls.n	8010c3a <etharp_output+0xd6>
 8010c1e:	6898      	ldr	r0, [r3, #8]
 8010c20:	42a0      	cmp	r0, r4
 8010c22:	d10a      	bne.n	8010c3a <etharp_output+0xd6>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010c24:	6828      	ldr	r0, [r5, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	4298      	cmp	r0, r3
 8010c2a:	d106      	bne.n	8010c3a <etharp_output+0xd6>
        return etharp_output_to_arp_index(netif, q, i);
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4620      	mov	r0, r4
}
 8010c30:	b005      	add	sp, #20
 8010c32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8010c36:	f7ff be97 	b.w	8010968 <etharp_output_to_arp_index>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c3a:	4b16      	ldr	r3, [pc, #88]	@ (8010c94 <etharp_output+0x130>)
{
 8010c3c:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c3e:	7d18      	ldrb	r0, [r3, #20]
 8010c40:	2801      	cmp	r0, #1
 8010c42:	d909      	bls.n	8010c58 <etharp_output+0xf4>
 8010c44:	6898      	ldr	r0, [r3, #8]
 8010c46:	42a0      	cmp	r0, r4
 8010c48:	d106      	bne.n	8010c58 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8010c4a:	682f      	ldr	r7, [r5, #0]
 8010c4c:	6858      	ldr	r0, [r3, #4]
 8010c4e:	4287      	cmp	r7, r0
 8010c50:	d102      	bne.n	8010c58 <etharp_output+0xf4>
 8010c52:	b2d2      	uxtb	r2, r2
        ETHARP_SET_ADDRHINT(netif, i);
 8010c54:	700a      	strb	r2, [r1, #0]
 8010c56:	e7e9      	b.n	8010c2c <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c58:	3201      	adds	r2, #1
 8010c5a:	3318      	adds	r3, #24
 8010c5c:	2a0a      	cmp	r2, #10
 8010c5e:	d1ee      	bne.n	8010c3e <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 8010c60:	4632      	mov	r2, r6
 8010c62:	4629      	mov	r1, r5
 8010c64:	4620      	mov	r0, r4
}
 8010c66:	b005      	add	sp, #20
 8010c68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 8010c6c:	f7ff bed2 	b.w	8010a14 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 8010c70:	4b09      	ldr	r3, [pc, #36]	@ (8010c98 <etharp_output+0x134>)
 8010c72:	e7b1      	b.n	8010bd8 <etharp_output+0x74>
            return ERR_RTE;
 8010c74:	f06f 0003 	mvn.w	r0, #3
 8010c78:	e7b7      	b.n	8010bea <etharp_output+0x86>
 8010c7a:	bf00      	nop
 8010c7c:	08018839 	.word	0x08018839
 8010c80:	080169c5 	.word	0x080169c5
 8010c84:	080169d3 	.word	0x080169d3
 8010c88:	0801782c 	.word	0x0801782c
 8010c8c:	08018910 	.word	0x08018910
 8010c90:	20010fc4 	.word	0x20010fc4
 8010c94:	20010fc8 	.word	0x20010fc8
 8010c98:	0808f902 	.word	0x0808f902

08010c9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
  if (p->tot_len < response_pkt_len) {
 8010ca0:	f8b0 8008 	ldrh.w	r8, [r0, #8]
{
 8010ca4:	b087      	sub	sp, #28
 8010ca6:	4607      	mov	r7, r0
 8010ca8:	468a      	mov	sl, r1
  if (p->tot_len < response_pkt_len) {
 8010caa:	f1b8 0f1c 	cmp.w	r8, #28
{
 8010cae:	4691      	mov	r9, r2
    response_pkt_len = p->tot_len;
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 8010cb0:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8010cb4:	f44f 7220 	mov.w	r2, #640	@ 0x280
  if (p->tot_len < response_pkt_len) {
 8010cb8:	bf28      	it	cs
 8010cba:	f04f 081c 	movcs.w	r8, #28
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 8010cbe:	f108 0508 	add.w	r5, r8, #8
 8010cc2:	b2ad      	uxth	r5, r5
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	f7fb fced 	bl	800c6a4 <pbuf_alloc>
  if (q == NULL) {
 8010cca:	4604      	mov	r4, r0
 8010ccc:	b388      	cbz	r0, 8010d32 <icmp_send_response+0x96>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010cce:	8943      	ldrh	r3, [r0, #10]
 8010cd0:	42ab      	cmp	r3, r5
 8010cd2:	d206      	bcs.n	8010ce2 <icmp_send_response+0x46>
 8010cd4:	4b18      	ldr	r3, [pc, #96]	@ (8010d38 <icmp_send_response+0x9c>)
 8010cd6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8010cda:	4918      	ldr	r1, [pc, #96]	@ (8010d3c <icmp_send_response+0xa0>)
 8010cdc:	4818      	ldr	r0, [pc, #96]	@ (8010d40 <icmp_send_response+0xa4>)
 8010cde:	f004 ff55 	bl	8015b8c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8010ce2:	6866      	ldr	r6, [r4, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->data = 0;
 8010ce4:	2500      	movs	r5, #0
  iphdr = (struct ip_hdr *)p->payload;
 8010ce6:	f8d7 b004 	ldr.w	fp, [r7, #4]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8010cea:	2308      	movs	r3, #8
 8010cec:	4642      	mov	r2, r8
 8010cee:	4639      	mov	r1, r7
 8010cf0:	4620      	mov	r0, r4
  icmphdr->type = type;
 8010cf2:	f886 a000 	strb.w	sl, [r6]
  icmphdr->code = code;
 8010cf6:	f886 9001 	strb.w	r9, [r6, #1]
  icmphdr->data = 0;
 8010cfa:	7135      	strb	r5, [r6, #4]
 8010cfc:	7175      	strb	r5, [r6, #5]
 8010cfe:	71b5      	strb	r5, [r6, #6]
 8010d00:	71f5      	strb	r5, [r6, #7]
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8010d02:	f7fb fe07 	bl	800c914 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010d06:	f8db 300c 	ldr.w	r3, [fp, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010d0a:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8010d0c:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8010d0e:	f000 f8d9 	bl	8010ec4 <ip4_route>
#endif
  if (netif != NULL) {
 8010d12:	b158      	cbz	r0, 8010d2c <icmp_send_response+0x90>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010d14:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8010d16:	70b5      	strb	r5, [r6, #2]
 8010d18:	70f5      	strb	r5, [r6, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010d1a:	aa05      	add	r2, sp, #20
 8010d1c:	9002      	str	r0, [sp, #8]
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4620      	mov	r0, r4
 8010d22:	e9cd 5300 	strd	r5, r3, [sp]
 8010d26:	23ff      	movs	r3, #255	@ 0xff
 8010d28:	f000 fa2c 	bl	8011184 <ip4_output_if>
  }
  pbuf_free(q);
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f7fb fc4f 	bl	800c5d0 <pbuf_free>
}
 8010d32:	b007      	add	sp, #28
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d38:	080189ab 	.word	0x080189ab
 8010d3c:	080189ce 	.word	0x080189ce
 8010d40:	080169d3 	.word	0x080169d3

08010d44 <icmp_input>:
{
 8010d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8010d48:	4f47      	ldr	r7, [pc, #284]	@ (8010e68 <icmp_input+0x124>)
{
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8010d50:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8010d54:	f899 5000 	ldrb.w	r5, [r9]
 8010d58:	f005 050f 	and.w	r5, r5, #15
 8010d5c:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8010d5e:	2d13      	cmp	r5, #19
 8010d60:	d916      	bls.n	8010d90 <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 8010d62:	8943      	ldrh	r3, [r0, #10]
 8010d64:	2b03      	cmp	r3, #3
 8010d66:	d913      	bls.n	8010d90 <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 8010d68:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	2b08      	cmp	r3, #8
 8010d6e:	d10f      	bne.n	8010d90 <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010d70:	6978      	ldr	r0, [r7, #20]
 8010d72:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8010d76:	2be0      	cmp	r3, #224	@ 0xe0
 8010d78:	d00a      	beq.n	8010d90 <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010d7a:	6839      	ldr	r1, [r7, #0]
 8010d7c:	f000 fa13 	bl	80111a6 <ip4_addr_isbroadcast_u32>
 8010d80:	b930      	cbnz	r0, 8010d90 <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010d82:	8923      	ldrh	r3, [r4, #8]
 8010d84:	2b07      	cmp	r3, #7
 8010d86:	d903      	bls.n	8010d90 <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f7fa fef9 	bl	800bb80 <inet_chksum_pbuf>
 8010d8e:	b128      	cbz	r0, 8010d9c <icmp_input+0x58>
  pbuf_free(p);
 8010d90:	4620      	mov	r0, r4
}
 8010d92:	b005      	add	sp, #20
 8010d94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8010d98:	f7fb bc1a 	b.w	800c5d0 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010d9c:	f105 060e 	add.w	r6, r5, #14
 8010da0:	4620      	mov	r0, r4
 8010da2:	4631      	mov	r1, r6
 8010da4:	f7fb fbe5 	bl	800c572 <pbuf_add_header>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d04f      	beq.n	8010e4c <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010dac:	8923      	ldrh	r3, [r4, #8]
 8010dae:	18e9      	adds	r1, r5, r3
 8010db0:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8010db2:	428b      	cmp	r3, r1
 8010db4:	d8ec      	bhi.n	8010d90 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010db6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010dba:	200e      	movs	r0, #14
 8010dbc:	f7fb fc72 	bl	800c6a4 <pbuf_alloc>
        if (r == NULL) {
 8010dc0:	4606      	mov	r6, r0
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d0e4      	beq.n	8010d90 <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010dc6:	8942      	ldrh	r2, [r0, #10]
 8010dc8:	f105 0308 	add.w	r3, r5, #8
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d203      	bcs.n	8010dd8 <icmp_input+0x94>
          pbuf_free(r);
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f7fb fbfd 	bl	800c5d0 <pbuf_free>
          goto icmperr;
 8010dd6:	e7db      	b.n	8010d90 <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8010dd8:	4649      	mov	r1, r9
 8010dda:	462a      	mov	r2, r5
 8010ddc:	6840      	ldr	r0, [r0, #4]
 8010dde:	f005 f8e0 	bl	8015fa2 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8010de2:	4629      	mov	r1, r5
 8010de4:	4630      	mov	r0, r6
 8010de6:	f7fb fbc7 	bl	800c578 <pbuf_remove_header>
 8010dea:	b130      	cbz	r0, 8010dfa <icmp_input+0xb6>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 8010dec:	4b1f      	ldr	r3, [pc, #124]	@ (8010e6c <icmp_input+0x128>)
 8010dee:	22b6      	movs	r2, #182	@ 0xb6
 8010df0:	491f      	ldr	r1, [pc, #124]	@ (8010e70 <icmp_input+0x12c>)
 8010df2:	4820      	ldr	r0, [pc, #128]	@ (8010e74 <icmp_input+0x130>)
 8010df4:	f004 feca 	bl	8015b8c <iprintf>
          pbuf_free(r);
 8010df8:	e7ea      	b.n	8010dd0 <icmp_input+0x8c>
        if (pbuf_copy(r, p) != ERR_OK) {
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7fb fe05 	bl	800ca0c <pbuf_copy>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d1e4      	bne.n	8010dd0 <icmp_input+0x8c>
        pbuf_free(p);
 8010e06:	4620      	mov	r0, r4
        p = r;
 8010e08:	4634      	mov	r4, r6
        pbuf_free(p);
 8010e0a:	f7fb fbe1 	bl	800c5d0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8010e0e:	4629      	mov	r1, r5
 8010e10:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010e12:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8010e14:	f7fb fbad 	bl	800c572 <pbuf_add_header>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d1b8      	bne.n	8010d90 <icmp_input+0x4c>
        ip4_addr_copy(iphdr->src, *src);
 8010e1e:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010e20:	2101      	movs	r1, #1
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010e22:	6860      	ldr	r0, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8010e24:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	6103      	str	r3, [r0, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010e2a:	23ff      	movs	r3, #255	@ 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010e2c:	7032      	strb	r2, [r6, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 8010e2e:	73e2      	strb	r2, [r4, #15]
        iecho->chksum = 0;
 8010e30:	70b2      	strb	r2, [r6, #2]
 8010e32:	70f2      	strb	r2, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010e34:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010e36:	7282      	strb	r2, [r0, #10]
 8010e38:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f8cd 8008 	str.w	r8, [sp, #8]
 8010e40:	e9cd 2100 	strd	r2, r1, [sp]
 8010e44:	490c      	ldr	r1, [pc, #48]	@ (8010e78 <icmp_input+0x134>)
 8010e46:	f000 f99d 	bl	8011184 <ip4_output_if>
  pbuf_free(p);
 8010e4a:	e7a1      	b.n	8010d90 <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f7fb fb92 	bl	800c578 <pbuf_remove_header>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d0da      	beq.n	8010e0e <icmp_input+0xca>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 8010e58:	4b04      	ldr	r3, [pc, #16]	@ (8010e6c <icmp_input+0x128>)
 8010e5a:	22c7      	movs	r2, #199	@ 0xc7
 8010e5c:	4907      	ldr	r1, [pc, #28]	@ (8010e7c <icmp_input+0x138>)
 8010e5e:	4805      	ldr	r0, [pc, #20]	@ (8010e74 <icmp_input+0x130>)
 8010e60:	f004 fe94 	bl	8015b8c <iprintf>
          goto icmperr;
 8010e64:	e794      	b.n	8010d90 <icmp_input+0x4c>
 8010e66:	bf00      	nop
 8010e68:	2000d168 	.word	0x2000d168
 8010e6c:	080189ab 	.word	0x080189ab
 8010e70:	080189fa 	.word	0x080189fa
 8010e74:	080169d3 	.word	0x080169d3
 8010e78:	2000d17c 	.word	0x2000d17c
 8010e7c:	08018a2e 	.word	0x08018a2e

08010e80 <icmp_dest_unreach>:
{
 8010e80:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8010e82:	2103      	movs	r1, #3
 8010e84:	f7ff bf0a 	b.w	8010c9c <icmp_send_response>

08010e88 <icmp_time_exceeded>:
{
 8010e88:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8010e8a:	210b      	movs	r1, #11
 8010e8c:	f7ff bf06 	b.w	8010c9c <icmp_send_response>

08010e90 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010e90:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010e92:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
{
 8010e96:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010e98:	f013 0001 	ands.w	r0, r3, #1
 8010e9c:	d00a      	beq.n	8010eb4 <ip4_input_accept+0x24>
 8010e9e:	684b      	ldr	r3, [r1, #4]
 8010ea0:	b14b      	cbz	r3, 8010eb6 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010ea2:	4a07      	ldr	r2, [pc, #28]	@ (8010ec0 <ip4_input_accept+0x30>)
 8010ea4:	6950      	ldr	r0, [r2, #20]
 8010ea6:	4283      	cmp	r3, r0
 8010ea8:	d007      	beq.n	8010eba <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010eaa:	f000 f97c 	bl	80111a6 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010eae:	3800      	subs	r0, #0
 8010eb0:	bf18      	it	ne
 8010eb2:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8010eb4:	bd08      	pop	{r3, pc}
  return 0;
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	e7fc      	b.n	8010eb4 <ip4_input_accept+0x24>
      return 1;
 8010eba:	2001      	movs	r0, #1
 8010ebc:	e7fa      	b.n	8010eb4 <ip4_input_accept+0x24>
 8010ebe:	bf00      	nop
 8010ec0:	2000d168 	.word	0x2000d168

08010ec4 <ip4_route>:
  NETIF_FOREACH(netif) {
 8010ec4:	4b14      	ldr	r3, [pc, #80]	@ (8010f18 <ip4_route+0x54>)
{
 8010ec6:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8010ec8:	6818      	ldr	r0, [r3, #0]
{
 8010eca:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8010ecc:	b978      	cbnz	r0, 8010eee <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010ece:	4b13      	ldr	r3, [pc, #76]	@ (8010f1c <ip4_route+0x58>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	b15b      	cbz	r3, 8010eec <ip4_route+0x28>
 8010ed4:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 8010ed8:	f001 0105 	and.w	r1, r1, #5
 8010edc:	2905      	cmp	r1, #5
 8010ede:	d105      	bne.n	8010eec <ip4_route+0x28>
 8010ee0:	6859      	ldr	r1, [r3, #4]
 8010ee2:	b119      	cbz	r1, 8010eec <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010ee4:	7812      	ldrb	r2, [r2, #0]
  return netif_default;
 8010ee6:	2a7f      	cmp	r2, #127	@ 0x7f
 8010ee8:	bf18      	it	ne
 8010eea:	4618      	movne	r0, r3
}
 8010eec:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010eee:	f890 102d 	ldrb.w	r1, [r0, #45]	@ 0x2d
 8010ef2:	07cd      	lsls	r5, r1, #31
 8010ef4:	d50d      	bpl.n	8010f12 <ip4_route+0x4e>
 8010ef6:	074c      	lsls	r4, r1, #29
 8010ef8:	d50b      	bpl.n	8010f12 <ip4_route+0x4e>
 8010efa:	6843      	ldr	r3, [r0, #4]
 8010efc:	b14b      	cbz	r3, 8010f12 <ip4_route+0x4e>
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010efe:	6814      	ldr	r4, [r2, #0]
 8010f00:	6885      	ldr	r5, [r0, #8]
 8010f02:	4063      	eors	r3, r4
 8010f04:	422b      	tst	r3, r5
 8010f06:	d0f1      	beq.n	8010eec <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8010f08:	078b      	lsls	r3, r1, #30
 8010f0a:	d402      	bmi.n	8010f12 <ip4_route+0x4e>
 8010f0c:	68c3      	ldr	r3, [r0, #12]
 8010f0e:	429c      	cmp	r4, r3
 8010f10:	d0ec      	beq.n	8010eec <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8010f12:	6800      	ldr	r0, [r0, #0]
 8010f14:	e7da      	b.n	8010ecc <ip4_route+0x8>
 8010f16:	bf00      	nop
 8010f18:	20010f60 	.word	0x20010f60
 8010f1c:	20010f5c 	.word	0x20010f5c

08010f20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010f24:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 8010f28:	4604      	mov	r4, r0
 8010f2a:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8010f2c:	f899 8000 	ldrb.w	r8, [r9]
 8010f30:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8010f34:	2b04      	cmp	r3, #4
 8010f36:	d005      	beq.n	8010f44 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f7fb fb49 	bl	800c5d0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8010f3e:	2000      	movs	r0, #0
 8010f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010f44:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010f48:	f008 080f 	and.w	r8, r8, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010f4c:	f7fa fde8 	bl	800bb20 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8010f50:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010f52:	ea4f 0888 	mov.w	r8, r8, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010f56:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 8010f58:	4283      	cmp	r3, r0
 8010f5a:	d903      	bls.n	8010f64 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8010f5c:	4601      	mov	r1, r0
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7fb fc18 	bl	800c794 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010f64:	8963      	ldrh	r3, [r4, #10]
 8010f66:	4543      	cmp	r3, r8
 8010f68:	d3e6      	bcc.n	8010f38 <ip4_input+0x18>
 8010f6a:	8923      	ldrh	r3, [r4, #8]
 8010f6c:	42ab      	cmp	r3, r5
 8010f6e:	d3e3      	bcc.n	8010f38 <ip4_input+0x18>
 8010f70:	f1b8 0f13 	cmp.w	r8, #19
 8010f74:	d9e0      	bls.n	8010f38 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010f76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f7a:	4d42      	ldr	r5, [pc, #264]	@ (8011084 <ip4_input+0x164>)
 8010f7c:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010f82:	f8d9 200c 	ldr.w	r2, [r9, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f86:	2be0      	cmp	r3, #224	@ 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010f88:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f8a:	d14d      	bne.n	8011028 <ip4_input+0x108>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010f8c:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 8010f90:	07db      	lsls	r3, r3, #31
 8010f92:	d554      	bpl.n	801103e <ip4_input+0x11e>
 8010f94:	6873      	ldr	r3, [r6, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d051      	beq.n	801103e <ip4_input+0x11e>
      netif = inp;
 8010f9a:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010f9c:	4631      	mov	r1, r6
 8010f9e:	6928      	ldr	r0, [r5, #16]
 8010fa0:	f000 f901 	bl	80111a6 <ip4_addr_isbroadcast_u32>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d1c7      	bne.n	8010f38 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010fa8:	692b      	ldr	r3, [r5, #16]
 8010faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010fae:	2be0      	cmp	r3, #224	@ 0xe0
 8010fb0:	d0c2      	beq.n	8010f38 <ip4_input+0x18>
  if (netif == NULL) {
 8010fb2:	2f00      	cmp	r7, #0
 8010fb4:	d0c0      	beq.n	8010f38 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010fb6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8010fba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010fbe:	b13b      	cbz	r3, 8010fd0 <ip4_input+0xb0>
    p = ip4_reass(p);
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 fa5f 	bl	8011484 <ip4_reass>
    if (p == NULL) {
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d0b8      	beq.n	8010f3e <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 8010fcc:	f8d0 9004 	ldr.w	r9, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8010fd0:	f8c5 9008 	str.w	r9, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010fd4:	4641      	mov	r1, r8
 8010fd6:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8010fd8:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010fdc:	f899 3000 	ldrb.w	r3, [r9]
 8010fe0:	f003 030f 	and.w	r3, r3, #15
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010fe8:	f7fb fac6 	bl	800c578 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8010fec:	f899 3009 	ldrb.w	r3, [r9, #9]
 8010ff0:	2b06      	cmp	r3, #6
 8010ff2:	d03c      	beq.n	801106e <ip4_input+0x14e>
 8010ff4:	2b11      	cmp	r3, #17
 8010ff6:	d02e      	beq.n	8011056 <ip4_input+0x136>
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d03d      	beq.n	8011078 <ip4_input+0x158>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	6968      	ldr	r0, [r5, #20]
 8011000:	f000 f8d1 	bl	80111a6 <ip4_addr_isbroadcast_u32>
 8011004:	b960      	cbnz	r0, 8011020 <ip4_input+0x100>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011006:	696b      	ldr	r3, [r5, #20]
 8011008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801100c:	2be0      	cmp	r3, #224	@ 0xe0
 801100e:	d007      	beq.n	8011020 <ip4_input+0x100>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011010:	4641      	mov	r1, r8
 8011012:	4620      	mov	r0, r4
 8011014:	f7fb fad4 	bl	800c5c0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011018:	2102      	movs	r1, #2
 801101a:	4620      	mov	r0, r4
 801101c:	f7ff ff30 	bl	8010e80 <icmp_dest_unreach>
        pbuf_free(p);
 8011020:	4620      	mov	r0, r4
 8011022:	f7fb fad5 	bl	800c5d0 <pbuf_free>
        break;
 8011026:	e01a      	b.n	801105e <ip4_input+0x13e>
    if (ip4_input_accept(inp)) {
 8011028:	4630      	mov	r0, r6
 801102a:	f7ff ff31 	bl	8010e90 <ip4_input_accept>
 801102e:	2800      	cmp	r0, #0
 8011030:	d1b3      	bne.n	8010f9a <ip4_input+0x7a>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011032:	7d2b      	ldrb	r3, [r5, #20]
 8011034:	2b7f      	cmp	r3, #127	@ 0x7f
 8011036:	d002      	beq.n	801103e <ip4_input+0x11e>
        NETIF_FOREACH(netif) {
 8011038:	4b13      	ldr	r3, [pc, #76]	@ (8011088 <ip4_input+0x168>)
 801103a:	681f      	ldr	r7, [r3, #0]
 801103c:	b90f      	cbnz	r7, 8011042 <ip4_input+0x122>
      netif = NULL;
 801103e:	2700      	movs	r7, #0
 8011040:	e7ac      	b.n	8010f9c <ip4_input+0x7c>
          if (netif == inp) {
 8011042:	42b7      	cmp	r7, r6
 8011044:	d101      	bne.n	801104a <ip4_input+0x12a>
        NETIF_FOREACH(netif) {
 8011046:	683f      	ldr	r7, [r7, #0]
 8011048:	e7f8      	b.n	801103c <ip4_input+0x11c>
          if (ip4_input_accept(netif)) {
 801104a:	4638      	mov	r0, r7
 801104c:	f7ff ff20 	bl	8010e90 <ip4_input_accept>
 8011050:	2800      	cmp	r0, #0
 8011052:	d0f8      	beq.n	8011046 <ip4_input+0x126>
 8011054:	e7a2      	b.n	8010f9c <ip4_input+0x7c>
        udp_input(p, inp);
 8011056:	4631      	mov	r1, r6
 8011058:	4620      	mov	r0, r4
 801105a:	f7ff f903 	bl	8010264 <udp_input>
  ip_data.current_netif = NULL;
 801105e:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8011060:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8011064:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011066:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011068:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 801106c:	e767      	b.n	8010f3e <ip4_input+0x1e>
        tcp_input(p, inp);
 801106e:	4631      	mov	r1, r6
 8011070:	4620      	mov	r0, r4
 8011072:	f7fd f8f3 	bl	800e25c <tcp_input>
        break;
 8011076:	e7f2      	b.n	801105e <ip4_input+0x13e>
        icmp_input(p, inp);
 8011078:	4631      	mov	r1, r6
 801107a:	4620      	mov	r0, r4
 801107c:	f7ff fe62 	bl	8010d44 <icmp_input>
        break;
 8011080:	e7ed      	b.n	801105e <ip4_input+0x13e>
 8011082:	bf00      	nop
 8011084:	2000d168 	.word	0x2000d168
 8011088:	20010f60 	.word	0x20010f60

0801108c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801108c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011090:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011092:	7b83      	ldrb	r3, [r0, #14]
{
 8011094:	4604      	mov	r4, r0
 8011096:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011098:	2b01      	cmp	r3, #1
{
 801109a:	4616      	mov	r6, r2
 801109c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801109e:	d006      	beq.n	80110ae <ip4_output_if_src+0x22>
 80110a0:	4b32      	ldr	r3, [pc, #200]	@ (801116c <ip4_output_if_src+0xe0>)
 80110a2:	f240 3276 	movw	r2, #886	@ 0x376
 80110a6:	4932      	ldr	r1, [pc, #200]	@ (8011170 <ip4_output_if_src+0xe4>)
 80110a8:	4832      	ldr	r0, [pc, #200]	@ (8011174 <ip4_output_if_src+0xe8>)
 80110aa:	f004 fd6f 	bl	8015b8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80110ae:	2e00      	cmp	r6, #0
 80110b0:	d04e      	beq.n	8011150 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80110b2:	2114      	movs	r1, #20
 80110b4:	4620      	mov	r0, r4
 80110b6:	f7fb fa5c 	bl	800c572 <pbuf_add_header>
 80110ba:	b120      	cbz	r0, 80110c6 <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80110bc:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80110c0:	b002      	add	sp, #8
 80110c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80110c6:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80110c8:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80110ca:	2b13      	cmp	r3, #19
 80110cc:	d806      	bhi.n	80110dc <ip4_output_if_src+0x50>
 80110ce:	4b27      	ldr	r3, [pc, #156]	@ (801116c <ip4_output_if_src+0xe0>)
 80110d0:	f240 32aa 	movw	r2, #938	@ 0x3aa
 80110d4:	4928      	ldr	r1, [pc, #160]	@ (8011178 <ip4_output_if_src+0xec>)
 80110d6:	4827      	ldr	r0, [pc, #156]	@ (8011174 <ip4_output_if_src+0xe8>)
 80110d8:	f004 fd58 	bl	8015b8c <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80110dc:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80110e0:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 80110e4:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 80110e8:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80110ea:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80110ec:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8011180 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 80110f0:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80110f2:	2345      	movs	r3, #69	@ 0x45
 80110f4:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 80110f6:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80110fa:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80110fc:	8920      	ldrh	r0, [r4, #8]
 80110fe:	f7fa fd0f 	bl	800bb20 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8011102:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011106:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8011108:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801110c:	f8ba 0000 	ldrh.w	r0, [sl]
 8011110:	f7fa fd06 	bl	800bb20 <lwip_htons>
    ++ip_id;
 8011114:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011118:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 801111a:	3301      	adds	r3, #1
 801111c:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8011120:	f1b9 0f00 	cmp.w	r9, #0
 8011124:	d111      	bne.n	801114a <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011126:	4b15      	ldr	r3, [pc, #84]	@ (801117c <ip4_output_if_src+0xf0>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 801112c:	f885 800a 	strb.w	r8, [r5, #10]
 8011130:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011134:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011136:	b19b      	cbz	r3, 8011160 <ip4_output_if_src+0xd4>
 8011138:	8922      	ldrh	r2, [r4, #8]
 801113a:	429a      	cmp	r2, r3
 801113c:	d910      	bls.n	8011160 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 801113e:	4632      	mov	r2, r6
 8011140:	4639      	mov	r1, r7
 8011142:	4620      	mov	r0, r4
 8011144:	f000 fb6e 	bl	8011824 <ip4_frag>
 8011148:	e7ba      	b.n	80110c0 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 801114a:	f8d9 3000 	ldr.w	r3, [r9]
 801114e:	e7ec      	b.n	801112a <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 8011150:	8963      	ldrh	r3, [r4, #10]
 8011152:	2b13      	cmp	r3, #19
 8011154:	d9b2      	bls.n	80110bc <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011156:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8011158:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 801115e:	e7e9      	b.n	8011134 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	4632      	mov	r2, r6
 8011164:	4621      	mov	r1, r4
 8011166:	4638      	mov	r0, r7
 8011168:	4798      	blx	r3
 801116a:	e7a9      	b.n	80110c0 <ip4_output_if_src+0x34>
 801116c:	08018a5f 	.word	0x08018a5f
 8011170:	08018a81 	.word	0x08018a81
 8011174:	080169d3 	.word	0x080169d3
 8011178:	08018a8d 	.word	0x08018a8d
 801117c:	0808f8f8 	.word	0x0808f8f8
 8011180:	200110b8 	.word	0x200110b8

08011184 <ip4_output_if>:
{
 8011184:	b4f0      	push	{r4, r5, r6, r7}
 8011186:	9c06      	ldr	r4, [sp, #24]
 8011188:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801118c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011190:	b11a      	cbz	r2, 801119a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8011192:	b109      	cbz	r1, 8011198 <ip4_output_if+0x14>
 8011194:	680f      	ldr	r7, [r1, #0]
 8011196:	b907      	cbnz	r7, 801119a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8011198:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801119a:	9504      	str	r5, [sp, #16]
 801119c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 80111a0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80111a2:	f7ff bf73 	b.w	801108c <ip4_output_if_src>

080111a6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80111a6:	1e43      	subs	r3, r0, #1
{
 80111a8:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 80111aa:	3303      	adds	r3, #3
 80111ac:	d812      	bhi.n	80111d4 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80111ae:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 80111b2:	f013 0002 	ands.w	r0, r3, #2
 80111b6:	d010      	beq.n	80111da <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80111b8:	684b      	ldr	r3, [r1, #4]
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d00c      	beq.n	80111d8 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80111be:	6889      	ldr	r1, [r1, #8]
 80111c0:	4053      	eors	r3, r2
 80111c2:	420b      	tst	r3, r1
 80111c4:	d108      	bne.n	80111d8 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80111c6:	43cb      	mvns	r3, r1
 80111c8:	ea22 0201 	bic.w	r2, r2, r1
 80111cc:	1ad3      	subs	r3, r2, r3
 80111ce:	4258      	negs	r0, r3
 80111d0:	4158      	adcs	r0, r3
 80111d2:	4770      	bx	lr
    return 1;
 80111d4:	2001      	movs	r0, #1
 80111d6:	4770      	bx	lr
    return 0;
 80111d8:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 80111da:	4770      	bx	lr

080111dc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80111dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 80111e0:	6803      	ldr	r3, [r0, #0]
  int len = 0;
 80111e2:	2000      	movs	r0, #0
 80111e4:	f10d 0c04 	add.w	ip, sp, #4

  rp = buf;
 80111e8:	460e      	mov	r6, r1
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 80111ea:	4604      	mov	r4, r0
    i = 0;
 80111ec:	4680      	mov	r8, r0
    do {
      rem = *ap % (u8_t)10;
 80111ee:	f04f 0e0a 	mov.w	lr, #10
  s_addr = ip4_addr_get_u32(addr);
 80111f2:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 80111f4:	f81c 7b01 	ldrb.w	r7, [ip], #1
    i = 0;
 80111f8:	2500      	movs	r5, #0
      rem = *ap % (u8_t)10;
 80111fa:	46ba      	mov	sl, r7
 80111fc:	fbb7 f3fe 	udiv	r3, r7, lr
 8011200:	fb0e 7913 	mls	r9, lr, r3, r7
      *ap /= (u8_t)10;
 8011204:	b2df      	uxtb	r7, r3
      inv[i++] = (char)('0' + rem);
 8011206:	462b      	mov	r3, r5
    } while (*ap);
 8011208:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 801120c:	f105 0501 	add.w	r5, r5, #1
 8011210:	f109 0930 	add.w	r9, r9, #48	@ 0x30
 8011214:	f103 0b08 	add.w	fp, r3, #8
 8011218:	b2ed      	uxtb	r5, r5
 801121a:	44eb      	add	fp, sp
 801121c:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 8011220:	d8eb      	bhi.n	80111fa <ip4addr_ntoa_r+0x1e>
 8011222:	4607      	mov	r7, r0
 8011224:	4635      	mov	r5, r6
 8011226:	f80c 8c01 	strb.w	r8, [ip, #-1]
    while (i--) {
 801122a:	2bff      	cmp	r3, #255	@ 0xff
      if (len++ >= buflen) {
 801122c:	f100 0001 	add.w	r0, r0, #1
    while (i--) {
 8011230:	d10f      	bne.n	8011252 <ip4addr_ntoa_r+0x76>
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
 8011232:	4297      	cmp	r7, r2
 8011234:	da1a      	bge.n	801126c <ip4addr_ntoa_r+0x90>
  for (n = 0; n < 4; n++) {
 8011236:	3401      	adds	r4, #1
      return NULL;
    }
    *rp++ = '.';
 8011238:	462e      	mov	r6, r5
 801123a:	232e      	movs	r3, #46	@ 0x2e
  for (n = 0; n < 4; n++) {
 801123c:	b2e4      	uxtb	r4, r4
    *rp++ = '.';
 801123e:	f806 3b01 	strb.w	r3, [r6], #1
  for (n = 0; n < 4; n++) {
 8011242:	2c04      	cmp	r4, #4
 8011244:	d1d6      	bne.n	80111f4 <ip4addr_ntoa_r+0x18>
    ap++;
  }
  *--rp = 0;
 8011246:	2300      	movs	r3, #0
  return buf;
 8011248:	4608      	mov	r0, r1
  *--rp = 0;
 801124a:	702b      	strb	r3, [r5, #0]
}
 801124c:	b003      	add	sp, #12
 801124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 8011252:	1e5e      	subs	r6, r3, #1
 8011254:	4297      	cmp	r7, r2
 8011256:	b2f6      	uxtb	r6, r6
 8011258:	da08      	bge.n	801126c <ip4addr_ntoa_r+0x90>
      *rp++ = inv[i];
 801125a:	3308      	adds	r3, #8
      if (len++ >= buflen) {
 801125c:	4607      	mov	r7, r0
      *rp++ = inv[i];
 801125e:	446b      	add	r3, sp
 8011260:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8011264:	f805 3b01 	strb.w	r3, [r5], #1
 8011268:	4633      	mov	r3, r6
 801126a:	e7de      	b.n	801122a <ip4addr_ntoa_r+0x4e>
        return NULL;
 801126c:	2000      	movs	r0, #0
 801126e:	e7ed      	b.n	801124c <ip4addr_ntoa_r+0x70>

08011270 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8011270:	2210      	movs	r2, #16
 8011272:	4901      	ldr	r1, [pc, #4]	@ (8011278 <ip4addr_ntoa+0x8>)
 8011274:	f7ff bfb2 	b.w	80111dc <ip4addr_ntoa_r>
 8011278:	200110ba 	.word	0x200110ba

0801127c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801127c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801127e:	4b0c      	ldr	r3, [pc, #48]	@ (80112b0 <ip_reass_dequeue_datagram+0x34>)
{
 8011280:	4604      	mov	r4, r0
 8011282:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	4282      	cmp	r2, r0
 8011288:	d107      	bne.n	801129a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801128a:	6802      	ldr	r2, [r0, #0]
 801128c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801128e:	4621      	mov	r1, r4
 8011290:	2004      	movs	r0, #4
}
 8011292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8011296:	f7fa bf9f 	b.w	800c1d8 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801129a:	b931      	cbnz	r1, 80112aa <ip_reass_dequeue_datagram+0x2e>
 801129c:	4b05      	ldr	r3, [pc, #20]	@ (80112b4 <ip_reass_dequeue_datagram+0x38>)
 801129e:	f240 1245 	movw	r2, #325	@ 0x145
 80112a2:	4905      	ldr	r1, [pc, #20]	@ (80112b8 <ip_reass_dequeue_datagram+0x3c>)
 80112a4:	4805      	ldr	r0, [pc, #20]	@ (80112bc <ip_reass_dequeue_datagram+0x40>)
 80112a6:	f004 fc71 	bl	8015b8c <iprintf>
    prev->next = ipr->next;
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	602b      	str	r3, [r5, #0]
 80112ae:	e7ee      	b.n	801128e <ip_reass_dequeue_datagram+0x12>
 80112b0:	200110cc 	.word	0x200110cc
 80112b4:	08018aba 	.word	0x08018aba
 80112b8:	08018ae1 	.word	0x08018ae1
 80112bc:	080169d3 	.word	0x080169d3

080112c0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80112c0:	4281      	cmp	r1, r0
{
 80112c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c6:	4604      	mov	r4, r0
 80112c8:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80112ca:	d105      	bne.n	80112d8 <ip_reass_free_complete_datagram+0x18>
 80112cc:	4b2f      	ldr	r3, [pc, #188]	@ (801138c <ip_reass_free_complete_datagram+0xcc>)
 80112ce:	22ab      	movs	r2, #171	@ 0xab
 80112d0:	492f      	ldr	r1, [pc, #188]	@ (8011390 <ip_reass_free_complete_datagram+0xd0>)
 80112d2:	4830      	ldr	r0, [pc, #192]	@ (8011394 <ip_reass_free_complete_datagram+0xd4>)
 80112d4:	f004 fc5a 	bl	8015b8c <iprintf>
  if (prev != NULL) {
 80112d8:	b146      	cbz	r6, 80112ec <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80112da:	6833      	ldr	r3, [r6, #0]
 80112dc:	42a3      	cmp	r3, r4
 80112de:	d005      	beq.n	80112ec <ip_reass_free_complete_datagram+0x2c>
 80112e0:	4b2a      	ldr	r3, [pc, #168]	@ (801138c <ip_reass_free_complete_datagram+0xcc>)
 80112e2:	22ad      	movs	r2, #173	@ 0xad
 80112e4:	492c      	ldr	r1, [pc, #176]	@ (8011398 <ip_reass_free_complete_datagram+0xd8>)
 80112e6:	482b      	ldr	r0, [pc, #172]	@ (8011394 <ip_reass_free_complete_datagram+0xd4>)
 80112e8:	f004 fc50 	bl	8015b8c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80112ec:	6867      	ldr	r7, [r4, #4]
 80112ee:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 80112f0:	889a      	ldrh	r2, [r3, #4]
 80112f2:	bb92      	cbnz	r2, 801135a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80112f4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80112f6:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 80112fa:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80112fc:	f104 0208 	add.w	r2, r4, #8
 8011300:	f852 0b04 	ldr.w	r0, [r2], #4
 8011304:	428a      	cmp	r2, r1
 8011306:	f843 0b04 	str.w	r0, [r3], #4
 801130a:	d1f9      	bne.n	8011300 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801130c:	2101      	movs	r1, #1
 801130e:	4638      	mov	r0, r7
 8011310:	f7ff fdba 	bl	8010e88 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011314:	4638      	mov	r0, r7
 8011316:	f7fb fa9f 	bl	800c858 <pbuf_clen>
 801131a:	4605      	mov	r5, r0
    pbuf_free(p);
 801131c:	4638      	mov	r0, r7
 801131e:	f7fb f957 	bl	800c5d0 <pbuf_free>
  p = ipr->p;
 8011322:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011324:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 801138c <ip_reass_free_complete_datagram+0xcc>
 8011328:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80113a4 <ip_reass_free_complete_datagram+0xe4>
 801132c:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8011394 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8011330:	b9af      	cbnz	r7, 801135e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8011332:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011334:	4c19      	ldr	r4, [pc, #100]	@ (801139c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8011336:	4631      	mov	r1, r6
 8011338:	f7ff ffa0 	bl	801127c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801133c:	8823      	ldrh	r3, [r4, #0]
 801133e:	42ab      	cmp	r3, r5
 8011340:	d205      	bcs.n	801134e <ip_reass_free_complete_datagram+0x8e>
 8011342:	4b12      	ldr	r3, [pc, #72]	@ (801138c <ip_reass_free_complete_datagram+0xcc>)
 8011344:	22d2      	movs	r2, #210	@ 0xd2
 8011346:	4916      	ldr	r1, [pc, #88]	@ (80113a0 <ip_reass_free_complete_datagram+0xe0>)
 8011348:	4812      	ldr	r0, [pc, #72]	@ (8011394 <ip_reass_free_complete_datagram+0xd4>)
 801134a:	f004 fc1f 	bl	8015b8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801134e:	8823      	ldrh	r3, [r4, #0]
}
 8011350:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011352:	1b5b      	subs	r3, r3, r5
 8011354:	8023      	strh	r3, [r4, #0]
}
 8011356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 801135a:	2500      	movs	r5, #0
 801135c:	e7e1      	b.n	8011322 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 801135e:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8011360:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8011362:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8011366:	f7fb fa77 	bl	800c858 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801136a:	4405      	add	r5, r0
 801136c:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8011370:	db05      	blt.n	801137e <ip_reass_free_complete_datagram+0xbe>
 8011372:	4643      	mov	r3, r8
 8011374:	22cc      	movs	r2, #204	@ 0xcc
 8011376:	4649      	mov	r1, r9
 8011378:	4650      	mov	r0, sl
 801137a:	f004 fc07 	bl	8015b8c <iprintf>
    pbuf_free(pcur);
 801137e:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011380:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8011382:	465f      	mov	r7, fp
    pbuf_free(pcur);
 8011384:	f7fb f924 	bl	800c5d0 <pbuf_free>
 8011388:	e7d2      	b.n	8011330 <ip_reass_free_complete_datagram+0x70>
 801138a:	bf00      	nop
 801138c:	08018aba 	.word	0x08018aba
 8011390:	08018afa 	.word	0x08018afa
 8011394:	080169d3 	.word	0x080169d3
 8011398:	08018b06 	.word	0x08018b06
 801139c:	200110ca 	.word	0x200110ca
 80113a0:	08018b35 	.word	0x08018b35
 80113a4:	08018b18 	.word	0x08018b18

080113a8 <ip_reass_remove_oldest_datagram>:
{
 80113a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ac:	4605      	mov	r5, r0
 80113ae:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80113b0:	2600      	movs	r6, #0
    r = reassdatagrams;
 80113b2:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8011420 <ip_reass_remove_oldest_datagram+0x78>
 80113b6:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 80113ba:	b373      	cbz	r3, 801141a <ip_reass_remove_oldest_datagram+0x72>
 80113bc:	2400      	movs	r4, #0
 80113be:	4621      	mov	r1, r4
 80113c0:	46a4      	mov	ip, r4
 80113c2:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80113c4:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80113c8:	695a      	ldr	r2, [r3, #20]
 80113ca:	4572      	cmp	r2, lr
 80113cc:	d109      	bne.n	80113e2 <ip_reass_remove_oldest_datagram+0x3a>
 80113ce:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80113d2:	699a      	ldr	r2, [r3, #24]
 80113d4:	4572      	cmp	r2, lr
 80113d6:	d104      	bne.n	80113e2 <ip_reass_remove_oldest_datagram+0x3a>
 80113d8:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80113dc:	88aa      	ldrh	r2, [r5, #4]
 80113de:	4596      	cmp	lr, r2
 80113e0:	d008      	beq.n	80113f4 <ip_reass_remove_oldest_datagram+0x4c>
        other_datagrams++;
 80113e2:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80113e4:	b1b0      	cbz	r0, 8011414 <ip_reass_remove_oldest_datagram+0x6c>
        } else if (r->timer <= oldest->timer) {
 80113e6:	7fc2      	ldrb	r2, [r0, #31]
 80113e8:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest = r;
 80113ec:	4596      	cmp	lr, r2
 80113ee:	bf9c      	itt	ls
 80113f0:	4661      	movls	r1, ip
 80113f2:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80113f4:	681a      	ldr	r2, [r3, #0]
        prev = r;
 80113f6:	469c      	mov	ip, r3
      if (r->next != NULL) {
 80113f8:	b952      	cbnz	r2, 8011410 <ip_reass_remove_oldest_datagram+0x68>
    if (oldest != NULL) {
 80113fa:	b110      	cbz	r0, 8011402 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80113fc:	f7ff ff60 	bl	80112c0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8011400:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011402:	42be      	cmp	r6, r7
 8011404:	da01      	bge.n	801140a <ip_reass_remove_oldest_datagram+0x62>
 8011406:	2c01      	cmp	r4, #1
 8011408:	dcd5      	bgt.n	80113b6 <ip_reass_remove_oldest_datagram+0xe>
}
 801140a:	4630      	mov	r0, r6
 801140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011410:	4613      	mov	r3, r2
 8011412:	e7d7      	b.n	80113c4 <ip_reass_remove_oldest_datagram+0x1c>
          oldest_prev = prev;
 8011414:	4661      	mov	r1, ip
          oldest = r;
 8011416:	4618      	mov	r0, r3
 8011418:	e7ec      	b.n	80113f4 <ip_reass_remove_oldest_datagram+0x4c>
 801141a:	461c      	mov	r4, r3
 801141c:	e7f1      	b.n	8011402 <ip_reass_remove_oldest_datagram+0x5a>
 801141e:	bf00      	nop
 8011420:	200110cc 	.word	0x200110cc

08011424 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011424:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011426:	4604      	mov	r4, r0
 8011428:	b930      	cbnz	r0, 8011438 <ipfrag_free_pbuf_custom+0x14>
 801142a:	4b08      	ldr	r3, [pc, #32]	@ (801144c <ipfrag_free_pbuf_custom+0x28>)
 801142c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011430:	4907      	ldr	r1, [pc, #28]	@ (8011450 <ipfrag_free_pbuf_custom+0x2c>)
 8011432:	4808      	ldr	r0, [pc, #32]	@ (8011454 <ipfrag_free_pbuf_custom+0x30>)
 8011434:	f004 fbaa 	bl	8015b8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8011438:	6960      	ldr	r0, [r4, #20]
 801143a:	b108      	cbz	r0, 8011440 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 801143c:	f7fb f8c8 	bl	800c5d0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8011440:	4621      	mov	r1, r4
 8011442:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8011444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8011448:	f7fa bec6 	b.w	800c1d8 <memp_free>
 801144c:	08018aba 	.word	0x08018aba
 8011450:	08018b57 	.word	0x08018b57
 8011454:	080169d3 	.word	0x080169d3

08011458 <ip_reass_tmr>:
{
 8011458:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801145a:	4b09      	ldr	r3, [pc, #36]	@ (8011480 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 801145c:	2400      	movs	r4, #0
  r = reassdatagrams;
 801145e:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8011460:	b900      	cbnz	r0, 8011464 <ip_reass_tmr+0xc>
}
 8011462:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8011464:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8011466:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8011468:	b123      	cbz	r3, 8011474 <ip_reass_tmr+0x1c>
      r->timer--;
 801146a:	3b01      	subs	r3, #1
 801146c:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 801146e:	4604      	mov	r4, r0
 8011470:	4628      	mov	r0, r5
 8011472:	e7f5      	b.n	8011460 <ip_reass_tmr+0x8>
 8011474:	4621      	mov	r1, r4
 8011476:	f7ff ff23 	bl	80112c0 <ip_reass_free_complete_datagram>
 801147a:	4620      	mov	r0, r4
 801147c:	e7f7      	b.n	801146e <ip_reass_tmr+0x16>
 801147e:	bf00      	nop
 8011480:	200110cc 	.word	0x200110cc

08011484 <ip4_reass>:
{
 8011484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8011488:	6845      	ldr	r5, [r0, #4]
{
 801148a:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801148c:	782b      	ldrb	r3, [r5, #0]
 801148e:	f003 030f 	and.w	r3, r3, #15
 8011492:	2b05      	cmp	r3, #5
 8011494:	f040 80a6 	bne.w	80115e4 <ip4_reass+0x160>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011498:	88e8      	ldrh	r0, [r5, #6]
 801149a:	f7fa fb41 	bl	800bb20 <lwip_htons>
 801149e:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80114a0:	8868      	ldrh	r0, [r5, #2]
 80114a2:	f7fa fb3d 	bl	800bb20 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80114a6:	782b      	ldrb	r3, [r5, #0]
 80114a8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80114ac:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80114b0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80114b4:	f0c0 8096 	bcc.w	80115e4 <ip4_reass+0x160>
  len = (u16_t)(len - hlen);
 80114b8:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80114ba:	4cb6      	ldr	r4, [pc, #728]	@ (8011794 <ip4_reass+0x310>)
  clen = pbuf_clen(p);
 80114bc:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 80114be:	b29b      	uxth	r3, r3
 80114c0:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80114c2:	f7fb f9c9 	bl	800c858 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80114c6:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 80114c8:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80114ca:	4403      	add	r3, r0
 80114cc:	2b0a      	cmp	r3, #10
 80114ce:	dc7f      	bgt.n	80115d0 <ip4_reass+0x14c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80114d0:	4eb1      	ldr	r6, [pc, #708]	@ (8011798 <ip4_reass+0x314>)
 80114d2:	6834      	ldr	r4, [r6, #0]
 80114d4:	2c00      	cmp	r4, #0
 80114d6:	f040 808a 	bne.w	80115ee <ip4_reass+0x16a>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80114da:	2004      	movs	r0, #4
 80114dc:	f7fa fe5e 	bl	800c19c <memp_malloc>
  if (ipr == NULL) {
 80114e0:	4604      	mov	r4, r0
 80114e2:	b958      	cbnz	r0, 80114fc <ip4_reass+0x78>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80114e4:	4651      	mov	r1, sl
 80114e6:	4628      	mov	r0, r5
 80114e8:	f7ff ff5e 	bl	80113a8 <ip_reass_remove_oldest_datagram>
 80114ec:	4582      	cmp	sl, r0
 80114ee:	dc79      	bgt.n	80115e4 <ip4_reass+0x160>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80114f0:	2004      	movs	r0, #4
 80114f2:	f7fa fe53 	bl	800c19c <memp_malloc>
    if (ipr == NULL)
 80114f6:	4604      	mov	r4, r0
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d073      	beq.n	80115e4 <ip4_reass+0x160>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80114fc:	221c      	movs	r2, #28
 80114fe:	2100      	movs	r1, #0
 8011500:	1d20      	adds	r0, r4, #4
 8011502:	f004 fcb5 	bl	8015e70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011506:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011508:	f104 0208 	add.w	r2, r4, #8
 801150c:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8011510:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8011512:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8011514:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8011516:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011518:	462b      	mov	r3, r5
 801151a:	f853 0b04 	ldr.w	r0, [r3], #4
 801151e:	428b      	cmp	r3, r1
 8011520:	f842 0b04 	str.w	r0, [r2], #4
 8011524:	d1f9      	bne.n	801151a <ip4_reass+0x96>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011526:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801152a:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 801152e:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011532:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8011536:	d10a      	bne.n	801154e <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8011538:	9b01      	ldr	r3, [sp, #4]
 801153a:	18fb      	adds	r3, r7, r3
 801153c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801153e:	429f      	cmp	r7, r3
 8011540:	f200 8154 	bhi.w	80117ec <ip4_reass+0x368>
 8011544:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011548:	4293      	cmp	r3, r2
 801154a:	f200 814f 	bhi.w	80117ec <ip4_reass+0x368>
  fraghdr = (struct ip_hdr *)new_p->payload;
 801154e:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011552:	8868      	ldrh	r0, [r5, #2]
 8011554:	f7fa fae4 	bl	800bb20 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8011558:	782b      	ldrb	r3, [r5, #0]
 801155a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801155e:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8011562:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011566:	f0c0 8141 	bcc.w	80117ec <ip4_reass+0x368>
  len = (u16_t)(len - hlen);
 801156a:	1a80      	subs	r0, r0, r2
 801156c:	fa1f f980 	uxth.w	r9, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011570:	88e8      	ldrh	r0, [r5, #6]
 8011572:	f7fa fad5 	bl	800bb20 <lwip_htons>
 8011576:	f3c0 030c 	ubfx	r3, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801157a:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 801157e:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011580:	00db      	lsls	r3, r3, #3
  iprh->next_pbuf = NULL;
 8011582:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8011584:	eb09 0003 	add.w	r0, r9, r3
  iprh->next_pbuf = NULL;
 8011588:	7075      	strb	r5, [r6, #1]
 801158a:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 801158c:	fa1f fc80 	uxth.w	ip, r0
  iprh->next_pbuf = NULL;
 8011590:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8011592:	80b3      	strh	r3, [r6, #4]
  if (iprh->end < offset) {
 8011594:	4563      	cmp	r3, ip
  iprh->end = (u16_t)(offset + len);
 8011596:	80f0      	strh	r0, [r6, #6]
  if (iprh->end < offset) {
 8011598:	f200 8128 	bhi.w	80117ec <ip4_reass+0x368>
  for (q = ipr->p; q != NULL;) {
 801159c:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 80115a0:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 80115a4:	4670      	mov	r0, lr
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d14a      	bne.n	8011640 <ip4_reass+0x1bc>
    if (iprh_prev != NULL) {
 80115aa:	2d00      	cmp	r5, #0
 80115ac:	f000 80e7 	beq.w	801177e <ip4_reass+0x2fa>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80115b0:	88ea      	ldrh	r2, [r5, #6]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d906      	bls.n	80115c4 <ip4_reass+0x140>
 80115b6:	4b79      	ldr	r3, [pc, #484]	@ (801179c <ip4_reass+0x318>)
 80115b8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80115bc:	4978      	ldr	r1, [pc, #480]	@ (80117a0 <ip4_reass+0x31c>)
 80115be:	4879      	ldr	r0, [pc, #484]	@ (80117a4 <ip4_reass+0x320>)
 80115c0:	f004 fae4 	bl	8015b8c <iprintf>
      if (iprh_prev->end != iprh->start) {
 80115c4:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 80115c6:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 80115ca:	88b3      	ldrh	r3, [r6, #4]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	e04a      	b.n	8011666 <ip4_reass+0x1e2>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80115d0:	4601      	mov	r1, r0
 80115d2:	4628      	mov	r0, r5
 80115d4:	f7ff fee8 	bl	80113a8 <ip_reass_remove_oldest_datagram>
 80115d8:	b120      	cbz	r0, 80115e4 <ip4_reass+0x160>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80115da:	8823      	ldrh	r3, [r4, #0]
 80115dc:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80115de:	2b0a      	cmp	r3, #10
 80115e0:	f77f af76 	ble.w	80114d0 <ip4_reass+0x4c>
  pbuf_free(p);
 80115e4:	4640      	mov	r0, r8
 80115e6:	f7fa fff3 	bl	800c5d0 <pbuf_free>
  return NULL;
 80115ea:	2700      	movs	r7, #0
 80115ec:	e0b1      	b.n	8011752 <ip4_reass+0x2ce>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80115ee:	68eb      	ldr	r3, [r5, #12]
 80115f0:	6962      	ldr	r2, [r4, #20]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d107      	bne.n	8011606 <ip4_reass+0x182>
 80115f6:	692b      	ldr	r3, [r5, #16]
 80115f8:	69a2      	ldr	r2, [r4, #24]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d103      	bne.n	8011606 <ip4_reass+0x182>
 80115fe:	89a2      	ldrh	r2, [r4, #12]
 8011600:	88ab      	ldrh	r3, [r5, #4]
 8011602:	429a      	cmp	r2, r3
 8011604:	d001      	beq.n	801160a <ip4_reass+0x186>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011606:	6824      	ldr	r4, [r4, #0]
 8011608:	e764      	b.n	80114d4 <ip4_reass+0x50>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801160a:	88e8      	ldrh	r0, [r5, #6]
 801160c:	f7fa fa88 	bl	800bb20 <lwip_htons>
 8011610:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011614:	2800      	cmp	r0, #0
 8011616:	d186      	bne.n	8011526 <ip4_reass+0xa2>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011618:	89e0      	ldrh	r0, [r4, #14]
 801161a:	f7fa fa81 	bl	800bb20 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801161e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011622:	2800      	cmp	r0, #0
 8011624:	f43f af7f 	beq.w	8011526 <ip4_reass+0xa2>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011628:	462b      	mov	r3, r5
 801162a:	f104 0208 	add.w	r2, r4, #8
 801162e:	f105 0114 	add.w	r1, r5, #20
 8011632:	f853 0b04 	ldr.w	r0, [r3], #4
 8011636:	428b      	cmp	r3, r1
 8011638:	f842 0b04 	str.w	r0, [r2], #4
 801163c:	d1f9      	bne.n	8011632 <ip4_reass+0x1ae>
 801163e:	e772      	b.n	8011526 <ip4_reass+0xa2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011640:	6842      	ldr	r2, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 8011642:	8891      	ldrh	r1, [r2, #4]
 8011644:	428b      	cmp	r3, r1
 8011646:	f080 808d 	bcs.w	8011764 <ip4_reass+0x2e0>
      iprh->next_pbuf = q;
 801164a:	6030      	str	r0, [r6, #0]
      if (iprh_prev != NULL) {
 801164c:	2d00      	cmp	r5, #0
 801164e:	f000 8084 	beq.w	801175a <ip4_reass+0x2d6>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011652:	88ea      	ldrh	r2, [r5, #6]
 8011654:	4293      	cmp	r3, r2
 8011656:	f0c0 80c9 	bcc.w	80117ec <ip4_reass+0x368>
 801165a:	458c      	cmp	ip, r1
 801165c:	f200 80c6 	bhi.w	80117ec <ip4_reass+0x368>
        if (iprh_prev->end != iprh->start) {
 8011660:	4293      	cmp	r3, r2
        iprh_prev->next_pbuf = new_p;
 8011662:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8011666:	d001      	beq.n	801166c <ip4_reass+0x1e8>
          valid = 0;
 8011668:	f04f 0900 	mov.w	r9, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801166c:	f1bb 0f00 	cmp.w	fp, #0
 8011670:	d004      	beq.n	801167c <ip4_reass+0x1f8>
 8011672:	7fa3      	ldrb	r3, [r4, #30]
 8011674:	f013 0301 	ands.w	r3, r3, #1
 8011678:	f000 80a6 	beq.w	80117c8 <ip4_reass+0x344>
    if (valid) {
 801167c:	f1b9 0f00 	cmp.w	r9, #0
 8011680:	d01e      	beq.n	80116c0 <ip4_reass+0x23c>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011682:	6863      	ldr	r3, [r4, #4]
 8011684:	2b00      	cmp	r3, #0
 8011686:	f000 809f 	beq.w	80117c8 <ip4_reass+0x344>
 801168a:	6859      	ldr	r1, [r3, #4]
 801168c:	888b      	ldrh	r3, [r1, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	f040 809a 	bne.w	80117c8 <ip4_reass+0x344>
        q = iprh->next_pbuf;
 8011694:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8011696:	2b00      	cmp	r3, #0
 8011698:	f040 808e 	bne.w	80117b8 <ip4_reass+0x334>
          LWIP_ASSERT("sanity check",
 801169c:	42b1      	cmp	r1, r6
 801169e:	d106      	bne.n	80116ae <ip4_reass+0x22a>
 80116a0:	4b3e      	ldr	r3, [pc, #248]	@ (801179c <ip4_reass+0x318>)
 80116a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80116a6:	4940      	ldr	r1, [pc, #256]	@ (80117a8 <ip4_reass+0x324>)
 80116a8:	483e      	ldr	r0, [pc, #248]	@ (80117a4 <ip4_reass+0x320>)
 80116aa:	f004 fa6f 	bl	8015b8c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80116ae:	6833      	ldr	r3, [r6, #0]
 80116b0:	b133      	cbz	r3, 80116c0 <ip4_reass+0x23c>
 80116b2:	4b3a      	ldr	r3, [pc, #232]	@ (801179c <ip4_reass+0x318>)
 80116b4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80116b8:	493c      	ldr	r1, [pc, #240]	@ (80117ac <ip4_reass+0x328>)
 80116ba:	483a      	ldr	r0, [pc, #232]	@ (80117a4 <ip4_reass+0x320>)
 80116bc:	f004 fa66 	bl	8015b8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80116c0:	4e34      	ldr	r6, [pc, #208]	@ (8011794 <ip4_reass+0x310>)
 80116c2:	8833      	ldrh	r3, [r6, #0]
 80116c4:	4453      	add	r3, sl
 80116c6:	8033      	strh	r3, [r6, #0]
  if (is_last) {
 80116c8:	f1bb 0f00 	cmp.w	fp, #0
 80116cc:	d106      	bne.n	80116dc <ip4_reass+0x258>
    u16_t datagram_len = (u16_t)(offset + len);
 80116ce:	9b01      	ldr	r3, [sp, #4]
 80116d0:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80116d2:	7fa3      	ldrb	r3, [r4, #30]
 80116d4:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80116d8:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80116da:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80116dc:	f1b9 0f01 	cmp.w	r9, #1
 80116e0:	d183      	bne.n	80115ea <ip4_reass+0x166>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80116e2:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80116e4:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80116e8:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80116ea:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80116ec:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80116f0:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80116f2:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80116f4:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80116f6:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80116f8:	f853 cb04 	ldr.w	ip, [r3], #4
 80116fc:	428b      	cmp	r3, r1
 80116fe:	f842 cb04 	str.w	ip, [r2], #4
 8011702:	d1f9      	bne.n	80116f8 <ip4_reass+0x274>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011704:	f7fa fa0c 	bl	800bb20 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8011708:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801170a:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801170c:	71bb      	strb	r3, [r7, #6]
 801170e:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011710:	72bb      	strb	r3, [r7, #10]
 8011712:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8011714:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8011716:	2d00      	cmp	r5, #0
 8011718:	d159      	bne.n	80117ce <ip4_reass+0x34a>
    if (ipr == reassdatagrams) {
 801171a:	4b1f      	ldr	r3, [pc, #124]	@ (8011798 <ip4_reass+0x314>)
 801171c:	681b      	ldr	r3, [r3, #0]
        if (ipr_prev->next == ipr) {
 801171e:	42a3      	cmp	r3, r4
 8011720:	d002      	beq.n	8011728 <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011722:	461d      	mov	r5, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	d15f      	bne.n	80117e8 <ip4_reass+0x364>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011728:	4620      	mov	r0, r4
 801172a:	4629      	mov	r1, r5
 801172c:	f7ff fda6 	bl	801127c <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8011730:	4638      	mov	r0, r7
 8011732:	f7fb f891 	bl	800c858 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011736:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(p);
 8011738:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801173a:	4283      	cmp	r3, r0
 801173c:	d206      	bcs.n	801174c <ip4_reass+0x2c8>
 801173e:	4b17      	ldr	r3, [pc, #92]	@ (801179c <ip4_reass+0x318>)
 8011740:	f240 229b 	movw	r2, #667	@ 0x29b
 8011744:	491a      	ldr	r1, [pc, #104]	@ (80117b0 <ip4_reass+0x32c>)
 8011746:	4817      	ldr	r0, [pc, #92]	@ (80117a4 <ip4_reass+0x320>)
 8011748:	f004 fa20 	bl	8015b8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801174c:	8833      	ldrh	r3, [r6, #0]
 801174e:	1b1b      	subs	r3, r3, r4
 8011750:	8033      	strh	r3, [r6, #0]
}
 8011752:	4638      	mov	r0, r7
 8011754:	b003      	add	sp, #12
 8011756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 801175a:	458c      	cmp	ip, r1
 801175c:	d846      	bhi.n	80117ec <ip4_reass+0x368>
      ipr->p = new_p;
 801175e:	f8c4 8004 	str.w	r8, [r4, #4]
 8011762:	e783      	b.n	801166c <ip4_reass+0x1e8>
    } else if (iprh->start == iprh_tmp->start) {
 8011764:	d042      	beq.n	80117ec <ip4_reass+0x368>
    } else if (iprh->start < iprh_tmp->end) {
 8011766:	88d0      	ldrh	r0, [r2, #6]
 8011768:	4298      	cmp	r0, r3
 801176a:	d83f      	bhi.n	80117ec <ip4_reass+0x368>
      if (iprh_prev != NULL) {
 801176c:	b125      	cbz	r5, 8011778 <ip4_reass+0x2f4>
        if (iprh_prev->end != iprh_tmp->start) {
 801176e:	88e8      	ldrh	r0, [r5, #6]
          valid = 0;
 8011770:	4288      	cmp	r0, r1
 8011772:	bf18      	it	ne
 8011774:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 8011778:	6810      	ldr	r0, [r2, #0]
    iprh_prev = iprh_tmp;
 801177a:	4615      	mov	r5, r2
 801177c:	e713      	b.n	80115a6 <ip4_reass+0x122>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801177e:	f1be 0f00 	cmp.w	lr, #0
 8011782:	d0ec      	beq.n	801175e <ip4_reass+0x2da>
 8011784:	4b05      	ldr	r3, [pc, #20]	@ (801179c <ip4_reass+0x318>)
 8011786:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801178a:	490a      	ldr	r1, [pc, #40]	@ (80117b4 <ip4_reass+0x330>)
 801178c:	4805      	ldr	r0, [pc, #20]	@ (80117a4 <ip4_reass+0x320>)
 801178e:	f004 f9fd 	bl	8015b8c <iprintf>
 8011792:	e7e4      	b.n	801175e <ip4_reass+0x2da>
 8011794:	200110ca 	.word	0x200110ca
 8011798:	200110cc 	.word	0x200110cc
 801179c:	08018aba 	.word	0x08018aba
 80117a0:	08018b63 	.word	0x08018b63
 80117a4:	080169d3 	.word	0x080169d3
 80117a8:	08018bb8 	.word	0x08018bb8
 80117ac:	08018bc5 	.word	0x08018bc5
 80117b0:	08018be7 	.word	0x08018be7
 80117b4:	08018b81 	.word	0x08018b81
          iprh = (struct ip_reass_helper *)q->payload;
 80117b8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80117ba:	88f0      	ldrh	r0, [r6, #6]
 80117bc:	8893      	ldrh	r3, [r2, #4]
 80117be:	4298      	cmp	r0, r3
 80117c0:	d102      	bne.n	80117c8 <ip4_reass+0x344>
          q = iprh->next_pbuf;
 80117c2:	6813      	ldr	r3, [r2, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 80117c4:	4616      	mov	r6, r2
 80117c6:	e766      	b.n	8011696 <ip4_reass+0x212>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80117c8:	f04f 0900 	mov.w	r9, #0
 80117cc:	e778      	b.n	80116c0 <ip4_reass+0x23c>
      iprh = (struct ip_reass_helper *)r->payload;
 80117ce:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80117d2:	2114      	movs	r1, #20
 80117d4:	4628      	mov	r0, r5
 80117d6:	f7fa fecf 	bl	800c578 <pbuf_remove_header>
      pbuf_cat(p, r);
 80117da:	4629      	mov	r1, r5
 80117dc:	4638      	mov	r0, r7
 80117de:	f7fb f85f 	bl	800c8a0 <pbuf_cat>
      r = iprh->next_pbuf;
 80117e2:	f8d8 5000 	ldr.w	r5, [r8]
 80117e6:	e796      	b.n	8011716 <ip4_reass+0x292>
        if (ipr_prev->next == ipr) {
 80117e8:	682b      	ldr	r3, [r5, #0]
 80117ea:	e798      	b.n	801171e <ip4_reass+0x29a>
  if (ipr->p == NULL) {
 80117ec:	6863      	ldr	r3, [r4, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f47f aef8 	bne.w	80115e4 <ip4_reass+0x160>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80117f4:	4b07      	ldr	r3, [pc, #28]	@ (8011814 <ip4_reass+0x390>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	42a3      	cmp	r3, r4
 80117fa:	d006      	beq.n	801180a <ip4_reass+0x386>
 80117fc:	4b06      	ldr	r3, [pc, #24]	@ (8011818 <ip4_reass+0x394>)
 80117fe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011802:	4906      	ldr	r1, [pc, #24]	@ (801181c <ip4_reass+0x398>)
 8011804:	4806      	ldr	r0, [pc, #24]	@ (8011820 <ip4_reass+0x39c>)
 8011806:	f004 f9c1 	bl	8015b8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801180a:	2100      	movs	r1, #0
 801180c:	4620      	mov	r0, r4
 801180e:	f7ff fd35 	bl	801127c <ip_reass_dequeue_datagram>
 8011812:	e6e7      	b.n	80115e4 <ip4_reass+0x160>
 8011814:	200110cc 	.word	0x200110cc
 8011818:	08018aba 	.word	0x08018aba
 801181c:	08018c02 	.word	0x08018c02
 8011820:	080169d3 	.word	0x080169d3

08011824 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011828:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 801182a:	b08d      	sub	sp, #52	@ 0x34
 801182c:	4605      	mov	r5, r0
 801182e:	4689      	mov	r9, r1
 8011830:	9209      	str	r2, [sp, #36]	@ 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011832:	f1b3 0214 	subs.w	r2, r3, #20
 8011836:	bf48      	it	mi
 8011838:	f1a3 020d 	submi.w	r2, r3, #13
 801183c:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8011840:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011842:	6843      	ldr	r3, [r0, #4]
 8011844:	9303      	str	r3, [sp, #12]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	f003 030f 	and.w	r3, r3, #15
 801184c:	2b05      	cmp	r3, #5
 801184e:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8011852:	f040 80bb 	bne.w	80119cc <ip4_frag+0x1a8>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011856:	8943      	ldrh	r3, [r0, #10]
 8011858:	2b13      	cmp	r3, #19
 801185a:	f240 80b7 	bls.w	80119cc <ip4_frag+0x1a8>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801185e:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 8011860:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011862:	88d8      	ldrh	r0, [r3, #6]
 8011864:	f7fa f95c 	bl	800bb20 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8011868:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 801186c:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 801186e:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 8011870:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8011874:	3c14      	subs	r4, #20
 8011876:	9308      	str	r3, [sp, #32]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011878:	9b06      	ldr	r3, [sp, #24]
  left = (u16_t)(p->tot_len - IP_HLEN);
 801187a:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	b29b      	uxth	r3, r3
 8011880:	9307      	str	r3, [sp, #28]
  while (left) {
 8011882:	b90c      	cbnz	r4, 8011888 <ip4_frag+0x64>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011884:	4620      	mov	r0, r4
 8011886:	e062      	b.n	801194e <ip4_frag+0x12a>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011888:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801188a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801188e:	2114      	movs	r1, #20
 8011890:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011892:	42a3      	cmp	r3, r4
 8011894:	bf28      	it	cs
 8011896:	4623      	movcs	r3, r4
 8011898:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801189a:	f7fa ff03 	bl	800c6a4 <pbuf_alloc>
    if (rambuf == NULL) {
 801189e:	4680      	mov	r8, r0
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d052      	beq.n	801194a <ip4_frag+0x126>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80118a4:	8943      	ldrh	r3, [r0, #10]
 80118a6:	2b13      	cmp	r3, #19
 80118a8:	d806      	bhi.n	80118b8 <ip4_frag+0x94>
 80118aa:	4b4a      	ldr	r3, [pc, #296]	@ (80119d4 <ip4_frag+0x1b0>)
 80118ac:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80118b0:	4949      	ldr	r1, [pc, #292]	@ (80119d8 <ip4_frag+0x1b4>)
 80118b2:	484a      	ldr	r0, [pc, #296]	@ (80119dc <ip4_frag+0x1b8>)
 80118b4:	f004 f96a 	bl	8015b8c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80118b8:	9b03      	ldr	r3, [sp, #12]
 80118ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80118be:	4619      	mov	r1, r3
 80118c0:	3114      	adds	r1, #20
 80118c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80118c6:	428b      	cmp	r3, r1
 80118c8:	f842 0b04 	str.w	r0, [r2], #4
 80118cc:	d1f9      	bne.n	80118c2 <ip4_frag+0x9e>
    while (left_to_copy) {
 80118ce:	9b04      	ldr	r3, [sp, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80118d0:	f8d8 b004 	ldr.w	fp, [r8, #4]
    while (left_to_copy) {
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d163      	bne.n	80119a0 <ip4_frag+0x17c>
    tmp = (IP_OFFMASK & (ofo));
 80118d8:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 80118da:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 80118dc:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80118e0:	f8b9 3024 	ldrh.w	r3, [r9, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 80118e4:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 80118e6:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80118e8:	42a3      	cmp	r3, r4
 80118ea:	dd01      	ble.n	80118f0 <ip4_frag+0xcc>
 80118ec:	9b08      	ldr	r3, [sp, #32]
 80118ee:	b10b      	cbz	r3, 80118f4 <ip4_frag+0xd0>
      tmp = tmp | IP_MF;
 80118f0:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80118f4:	f7fa f914 	bl	800bb20 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80118f8:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80118fa:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80118fe:	f103 0014 	add.w	r0, r3, #20
 8011902:	b280      	uxth	r0, r0
 8011904:	f7fa f90c 	bl	800bb20 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8011908:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 801190a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801190c:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801190e:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8011912:	4648      	mov	r0, r9
    IPH_CHKSUM_SET(iphdr, 0);
 8011914:	f88b 300a 	strb.w	r3, [fp, #10]
 8011918:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 801191c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011920:	4798      	blx	r3
    pbuf_free(rambuf);
 8011922:	4640      	mov	r0, r8
 8011924:	f7fa fe54 	bl	800c5d0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011928:	9b04      	ldr	r3, [sp, #16]
 801192a:	1ae3      	subs	r3, r4, r3
 801192c:	b29c      	uxth	r4, r3
    ofo = (u16_t)(ofo + nfb);
 801192e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8011932:	4413      	add	r3, r2
 8011934:	b29b      	uxth	r3, r3
 8011936:	9305      	str	r3, [sp, #20]
 8011938:	e7a3      	b.n	8011882 <ip4_frag+0x5e>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801193a:	2005      	movs	r0, #5
 801193c:	f7fa fc2e 	bl	800c19c <memp_malloc>
      if (pcr == NULL) {
 8011940:	4603      	mov	r3, r0
 8011942:	b938      	cbnz	r0, 8011954 <ip4_frag+0x130>
        pbuf_free(rambuf);
 8011944:	4640      	mov	r0, r8
 8011946:	f7fa fe43 	bl	800c5d0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801194a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801194e:	b00d      	add	sp, #52	@ 0x34
 8011950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011954:	9601      	str	r6, [sp, #4]
 8011956:	4631      	mov	r1, r6
 8011958:	686a      	ldr	r2, [r5, #4]
 801195a:	900a      	str	r0, [sp, #40]	@ 0x28
 801195c:	2000      	movs	r0, #0
 801195e:	443a      	add	r2, r7
 8011960:	9200      	str	r2, [sp, #0]
 8011962:	2241      	movs	r2, #65	@ 0x41
 8011964:	f7fa fdec 	bl	800c540 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8011968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801196a:	b920      	cbnz	r0, 8011976 <ip4_frag+0x152>
  memp_free(MEMP_FRAG_PBUF, p);
 801196c:	4619      	mov	r1, r3
 801196e:	2005      	movs	r0, #5
 8011970:	f7fa fc32 	bl	800c1d8 <memp_free>
 8011974:	e7e6      	b.n	8011944 <ip4_frag+0x120>
 8011976:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801197a:	ebaa 0a06 	sub.w	sl, sl, r6
      pbuf_ref(p);
 801197e:	4628      	mov	r0, r5
 8011980:	f7fa ff72 	bl	800c868 <pbuf_ref>
      pcr->original = p;
 8011984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011986:	4a16      	ldr	r2, [pc, #88]	@ (80119e0 <ip4_frag+0x1bc>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011988:	fa1f fa8a 	uxth.w	sl, sl
      pbuf_cat(rambuf, newpbuf);
 801198c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801198e:	4640      	mov	r0, r8
      pcr->original = p;
 8011990:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011992:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8011994:	f7fa ff84 	bl	800c8a0 <pbuf_cat>
      if (left_to_copy) {
 8011998:	f1ba 0f00 	cmp.w	sl, #0
 801199c:	d113      	bne.n	80119c6 <ip4_frag+0x1a2>
 801199e:	e79b      	b.n	80118d8 <ip4_frag+0xb4>
 80119a0:	f8dd a010 	ldr.w	sl, [sp, #16]
      u16_t plen = (u16_t)(p->len - poff);
 80119a4:	896b      	ldrh	r3, [r5, #10]
 80119a6:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80119a8:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 80119aa:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80119ac:	d206      	bcs.n	80119bc <ip4_frag+0x198>
 80119ae:	4b09      	ldr	r3, [pc, #36]	@ (80119d4 <ip4_frag+0x1b0>)
 80119b0:	f240 322d 	movw	r2, #813	@ 0x32d
 80119b4:	490b      	ldr	r1, [pc, #44]	@ (80119e4 <ip4_frag+0x1c0>)
 80119b6:	4809      	ldr	r0, [pc, #36]	@ (80119dc <ip4_frag+0x1b8>)
 80119b8:	f004 f8e8 	bl	8015b8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80119bc:	4556      	cmp	r6, sl
 80119be:	bf28      	it	cs
 80119c0:	4656      	movcs	r6, sl
      if (!newpbuflen) {
 80119c2:	2e00      	cmp	r6, #0
 80119c4:	d1b9      	bne.n	801193a <ip4_frag+0x116>
        p = p->next;
 80119c6:	682d      	ldr	r5, [r5, #0]
 80119c8:	2700      	movs	r7, #0
 80119ca:	e7eb      	b.n	80119a4 <ip4_frag+0x180>
    return ERR_VAL;
 80119cc:	f06f 0005 	mvn.w	r0, #5
 80119d0:	e7bd      	b.n	801194e <ip4_frag+0x12a>
 80119d2:	bf00      	nop
 80119d4:	08018aba 	.word	0x08018aba
 80119d8:	08018c22 	.word	0x08018c22
 80119dc:	080169d3 	.word	0x080169d3
 80119e0:	08011425 	.word	0x08011425
 80119e4:	08018c42 	.word	0x08018c42

080119e8 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80119e8:	8943      	ldrh	r3, [r0, #10]
 80119ea:	2b0e      	cmp	r3, #14
{
 80119ec:	b570      	push	{r4, r5, r6, lr}
 80119ee:	4604      	mov	r4, r0
 80119f0:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 80119f2:	d91a      	bls.n	8011a2a <ethernet_input+0x42>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80119f4:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (p->if_idx == NETIF_NO_INDEX) {
 80119f6:	7be3      	ldrb	r3, [r4, #15]
  type = ethhdr->type;
 80119f8:	8986      	ldrh	r6, [r0, #12]
  if (p->if_idx == NETIF_NO_INDEX) {
 80119fa:	b91b      	cbnz	r3, 8011a04 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 80119fc:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 8011a00:	3301      	adds	r3, #1
 8011a02:	73e3      	strb	r3, [r4, #15]
  }

  if (ethhdr->dest.addr[0] & 1) {
 8011a04:	7803      	ldrb	r3, [r0, #0]
 8011a06:	07d9      	lsls	r1, r3, #31
 8011a08:	d50a      	bpl.n	8011a20 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d111      	bne.n	8011a32 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011a0e:	7843      	ldrb	r3, [r0, #1]
 8011a10:	b933      	cbnz	r3, 8011a20 <ethernet_input+0x38>
 8011a12:	7883      	ldrb	r3, [r0, #2]
 8011a14:	2b5e      	cmp	r3, #94	@ 0x5e
 8011a16:	d103      	bne.n	8011a20 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011a18:	7b63      	ldrb	r3, [r4, #13]
 8011a1a:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011a1e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8011a20:	2e08      	cmp	r6, #8
 8011a22:	d010      	beq.n	8011a46 <ethernet_input+0x5e>
 8011a24:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 8011a28:	d01d      	beq.n	8011a66 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f7fa fdd0 	bl	800c5d0 <pbuf_free>
  return ERR_OK;
 8011a30:	e017      	b.n	8011a62 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011a32:	2206      	movs	r2, #6
 8011a34:	4913      	ldr	r1, [pc, #76]	@ (8011a84 <ethernet_input+0x9c>)
 8011a36:	f004 f9f1 	bl	8015e1c <memcmp>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	d1f0      	bne.n	8011a20 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 8011a3e:	7b63      	ldrb	r3, [r4, #13]
 8011a40:	f043 0308 	orr.w	r3, r3, #8
 8011a44:	e7eb      	b.n	8011a1e <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011a46:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8011a4a:	071a      	lsls	r2, r3, #28
 8011a4c:	d5ed      	bpl.n	8011a2a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011a4e:	210e      	movs	r1, #14
 8011a50:	4620      	mov	r0, r4
 8011a52:	f7fa fd91 	bl	800c578 <pbuf_remove_header>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d1e7      	bne.n	8011a2a <ethernet_input+0x42>
        ip4_input(p, netif);
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7ff fa5f 	bl	8010f20 <ip4_input>
}
 8011a62:	2000      	movs	r0, #0
 8011a64:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011a66:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8011a6a:	071b      	lsls	r3, r3, #28
 8011a6c:	d5dd      	bpl.n	8011a2a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011a6e:	210e      	movs	r1, #14
 8011a70:	4620      	mov	r0, r4
 8011a72:	f7fa fd81 	bl	800c578 <pbuf_remove_header>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d1d7      	bne.n	8011a2a <ethernet_input+0x42>
        etharp_input(p, netif);
 8011a7a:	4629      	mov	r1, r5
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f7fe fe8f 	bl	80107a0 <etharp_input>
      break;
 8011a82:	e7ee      	b.n	8011a62 <ethernet_input+0x7a>
 8011a84:	0808f902 	.word	0x0808f902

08011a88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8c:	460d      	mov	r5, r1
 8011a8e:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011a90:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8011a94:	4616      	mov	r6, r2
 8011a96:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8011a98:	f7fa f842 	bl	800bb20 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && (defined(LWIP_HOOK_VLAN_SET) || LWIP_VLAN_PCP) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011a9c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8011a9e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	f7fa fd66 	bl	800c572 <pbuf_add_header>
 8011aa6:	b9e0      	cbnz	r0, 8011ae2 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011aa8:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8011aaa:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	600b      	str	r3, [r1, #0]
 8011ab2:	88bb      	ldrh	r3, [r7, #4]
 8011ab4:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011ab6:	6833      	ldr	r3, [r6, #0]
 8011ab8:	f8c1 3006 	str.w	r3, [r1, #6]
 8011abc:	88b3      	ldrh	r3, [r6, #4]
 8011abe:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011ac0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011ac4:	2b06      	cmp	r3, #6
 8011ac6:	d006      	beq.n	8011ad6 <ethernet_output+0x4e>
 8011ac8:	4b08      	ldr	r3, [pc, #32]	@ (8011aec <ethernet_output+0x64>)
 8011aca:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8011ace:	4908      	ldr	r1, [pc, #32]	@ (8011af0 <ethernet_output+0x68>)
 8011ad0:	4808      	ldr	r0, [pc, #32]	@ (8011af4 <ethernet_output+0x6c>)
 8011ad2:	f004 f85b 	bl	8015b8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011ad6:	69a3      	ldr	r3, [r4, #24]
 8011ad8:	4629      	mov	r1, r5
 8011ada:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8011adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8011ae0:	4718      	bx	r3
}
 8011ae2:	f06f 0001 	mvn.w	r0, #1
 8011ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aea:	bf00      	nop
 8011aec:	08018c51 	.word	0x08018c51
 8011af0:	08018c74 	.word	0x08018c74
 8011af4:	080169d3 	.word	0x080169d3

08011af8 <sys_init>:
  /* initialize sys_arch_protect global mutex */
  sys_arch_protect_mutex = xSemaphoreCreateRecursiveMutex();
  LWIP_ASSERT("failed to create sys_arch_protect mutex",
    sys_arch_protect_mutex != NULL);
#endif /* SYS_LIGHTWEIGHT_PROT && LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
}
 8011af8:	4770      	bx	lr

08011afa <sys_now>:
#error This port requires 32 bit ticks or timer overflow will fail
#endif

#if LWIP_FREERTOS_SYS_NOW_FROM_FREERTOS
u32_t
sys_now(void)
 8011afa:	f7f7 b95b 	b.w	8008db4 <xTaskGetTickCount>

08011afe <sys_arch_protect>:

#if SYS_LIGHTWEIGHT_PROT

sys_prot_t
sys_arch_protect(void)
{
 8011afe:	b508      	push	{r3, lr}
  LWIP_ASSERT("sys_arch_protect_mutex != NULL", sys_arch_protect_mutex != NULL);

  ret = xSemaphoreTakeRecursive(sys_arch_protect_mutex, portMAX_DELAY);
  LWIP_ASSERT("sys_arch_protect failed to take the mutex", ret == pdTRUE);
#else /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  taskENTER_CRITICAL();
 8011b00:	f7f8 f838 	bl	8009b74 <vPortEnterCritical>
    return ret;
  }
#else
  return 1;
#endif
}
 8011b04:	2001      	movs	r0, #1
 8011b06:	bd08      	pop	{r3, pc}

08011b08 <sys_arch_unprotect>:
  LWIP_ASSERT("sys_arch_protect_mutex != NULL", sys_arch_protect_mutex != NULL);

  ret = xSemaphoreGiveRecursive(sys_arch_protect_mutex);
  LWIP_ASSERT("sys_arch_unprotect failed to give the mutex", ret == pdTRUE);
#else /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  taskEXIT_CRITICAL();
 8011b08:	f7f8 b858 	b.w	8009bbc <vPortExitCritical>

08011b0c <sys_mutex_new>:
#if !LWIP_COMPAT_MUTEX

/* Create a new mutex*/
err_t
sys_mutex_new(sys_mutex_t *mutex)
{
 8011b0c:	b510      	push	{r4, lr}
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 8011b0e:	4604      	mov	r4, r0
 8011b10:	b928      	cbnz	r0, 8011b1e <sys_mutex_new+0x12>
 8011b12:	4b07      	ldr	r3, [pc, #28]	@ (8011b30 <sys_mutex_new+0x24>)
 8011b14:	22cc      	movs	r2, #204	@ 0xcc
 8011b16:	4907      	ldr	r1, [pc, #28]	@ (8011b34 <sys_mutex_new+0x28>)
 8011b18:	4807      	ldr	r0, [pc, #28]	@ (8011b38 <sys_mutex_new+0x2c>)
 8011b1a:	f004 f837 	bl	8015b8c <iprintf>

  mutex->mut = xSemaphoreCreateRecursiveMutex();
 8011b1e:	2004      	movs	r0, #4
 8011b20:	f7f6 fbfc 	bl	800831c <xQueueCreateMutex>
 8011b24:	6020      	str	r0, [r4, #0]
  if(mutex->mut == NULL) {
 8011b26:	fab0 f080 	clz	r0, r0
 8011b2a:	0940      	lsrs	r0, r0, #5
    SYS_STATS_INC(mutex.err);
    return ERR_MEM;
  }
  SYS_STATS_INC_USED(mutex);
  return ERR_OK;
}
 8011b2c:	4240      	negs	r0, r0
 8011b2e:	bd10      	pop	{r4, pc}
 8011b30:	08018ca5 	.word	0x08018ca5
 8011b34:	08018cc8 	.word	0x08018cc8
 8011b38:	080169d3 	.word	0x080169d3

08011b3c <sys_mutex_lock>:

void
sys_mutex_lock(sys_mutex_t *mutex)
{
 8011b3c:	b510      	push	{r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 8011b3e:	4604      	mov	r4, r0
 8011b40:	b928      	cbnz	r0, 8011b4e <sys_mutex_lock+0x12>
 8011b42:	4b0f      	ldr	r3, [pc, #60]	@ (8011b80 <sys_mutex_lock+0x44>)
 8011b44:	22db      	movs	r2, #219	@ 0xdb
 8011b46:	490f      	ldr	r1, [pc, #60]	@ (8011b84 <sys_mutex_lock+0x48>)
 8011b48:	480f      	ldr	r0, [pc, #60]	@ (8011b88 <sys_mutex_lock+0x4c>)
 8011b4a:	f004 f81f 	bl	8015b8c <iprintf>
  LWIP_ASSERT("mutex->mut != NULL", mutex->mut != NULL);
 8011b4e:	6823      	ldr	r3, [r4, #0]
 8011b50:	b92b      	cbnz	r3, 8011b5e <sys_mutex_lock+0x22>
 8011b52:	4b0b      	ldr	r3, [pc, #44]	@ (8011b80 <sys_mutex_lock+0x44>)
 8011b54:	22dc      	movs	r2, #220	@ 0xdc
 8011b56:	490d      	ldr	r1, [pc, #52]	@ (8011b8c <sys_mutex_lock+0x50>)
 8011b58:	480b      	ldr	r0, [pc, #44]	@ (8011b88 <sys_mutex_lock+0x4c>)
 8011b5a:	f004 f817 	bl	8015b8c <iprintf>

  ret = xSemaphoreTakeRecursive(mutex->mut, portMAX_DELAY);
 8011b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8011b62:	6820      	ldr	r0, [r4, #0]
 8011b64:	f7f6 fe4b 	bl	80087fe <xQueueTakeMutexRecursive>
  LWIP_ASSERT("failed to take the mutex", ret == pdTRUE);
 8011b68:	2801      	cmp	r0, #1
 8011b6a:	d007      	beq.n	8011b7c <sys_mutex_lock+0x40>
 8011b6c:	4b04      	ldr	r3, [pc, #16]	@ (8011b80 <sys_mutex_lock+0x44>)
 8011b6e:	22df      	movs	r2, #223	@ 0xdf
 8011b70:	4907      	ldr	r1, [pc, #28]	@ (8011b90 <sys_mutex_lock+0x54>)
 8011b72:	4805      	ldr	r0, [pc, #20]	@ (8011b88 <sys_mutex_lock+0x4c>)
}
 8011b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("failed to take the mutex", ret == pdTRUE);
 8011b78:	f004 b808 	b.w	8015b8c <iprintf>
}
 8011b7c:	bd10      	pop	{r4, pc}
 8011b7e:	bf00      	nop
 8011b80:	08018ca5 	.word	0x08018ca5
 8011b84:	08018cc8 	.word	0x08018cc8
 8011b88:	080169d3 	.word	0x080169d3
 8011b8c:	08018cd6 	.word	0x08018cd6
 8011b90:	08018ce9 	.word	0x08018ce9

08011b94 <sys_mutex_unlock>:

void
sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011b94:	b510      	push	{r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 8011b96:	4604      	mov	r4, r0
 8011b98:	b928      	cbnz	r0, 8011ba6 <sys_mutex_unlock+0x12>
 8011b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8011bd4 <sys_mutex_unlock+0x40>)
 8011b9c:	22e6      	movs	r2, #230	@ 0xe6
 8011b9e:	490e      	ldr	r1, [pc, #56]	@ (8011bd8 <sys_mutex_unlock+0x44>)
 8011ba0:	480e      	ldr	r0, [pc, #56]	@ (8011bdc <sys_mutex_unlock+0x48>)
 8011ba2:	f003 fff3 	bl	8015b8c <iprintf>
  LWIP_ASSERT("mutex->mut != NULL", mutex->mut != NULL);
 8011ba6:	6823      	ldr	r3, [r4, #0]
 8011ba8:	b92b      	cbnz	r3, 8011bb6 <sys_mutex_unlock+0x22>
 8011baa:	4b0a      	ldr	r3, [pc, #40]	@ (8011bd4 <sys_mutex_unlock+0x40>)
 8011bac:	22e7      	movs	r2, #231	@ 0xe7
 8011bae:	490c      	ldr	r1, [pc, #48]	@ (8011be0 <sys_mutex_unlock+0x4c>)
 8011bb0:	480a      	ldr	r0, [pc, #40]	@ (8011bdc <sys_mutex_unlock+0x48>)
 8011bb2:	f003 ffeb 	bl	8015b8c <iprintf>

  ret = xSemaphoreGiveRecursive(mutex->mut);
 8011bb6:	6820      	ldr	r0, [r4, #0]
 8011bb8:	f7f6 fbc2 	bl	8008340 <xQueueGiveMutexRecursive>
  LWIP_ASSERT("failed to give the mutex", ret == pdTRUE);
 8011bbc:	2801      	cmp	r0, #1
 8011bbe:	d007      	beq.n	8011bd0 <sys_mutex_unlock+0x3c>
 8011bc0:	4b04      	ldr	r3, [pc, #16]	@ (8011bd4 <sys_mutex_unlock+0x40>)
 8011bc2:	22ea      	movs	r2, #234	@ 0xea
 8011bc4:	4907      	ldr	r1, [pc, #28]	@ (8011be4 <sys_mutex_unlock+0x50>)
 8011bc6:	4805      	ldr	r0, [pc, #20]	@ (8011bdc <sys_mutex_unlock+0x48>)
}
 8011bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("failed to give the mutex", ret == pdTRUE);
 8011bcc:	f003 bfde 	b.w	8015b8c <iprintf>
}
 8011bd0:	bd10      	pop	{r4, pc}
 8011bd2:	bf00      	nop
 8011bd4:	08018ca5 	.word	0x08018ca5
 8011bd8:	08018cc8 	.word	0x08018cc8
 8011bdc:	080169d3 	.word	0x080169d3
 8011be0:	08018cd6 	.word	0x08018cd6
 8011be4:	08018d02 	.word	0x08018d02

08011be8 <sys_sem_new>:

#endif /* !LWIP_COMPAT_MUTEX */

err_t
sys_sem_new(sys_sem_t *sem, u8_t initial_count)
{
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	460c      	mov	r4, r1
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8011bec:	4605      	mov	r5, r0
 8011bee:	b928      	cbnz	r0, 8011bfc <sys_sem_new+0x14>
 8011bf0:	4b15      	ldr	r3, [pc, #84]	@ (8011c48 <sys_sem_new+0x60>)
 8011bf2:	22fd      	movs	r2, #253	@ 0xfd
 8011bf4:	4915      	ldr	r1, [pc, #84]	@ (8011c4c <sys_sem_new+0x64>)
 8011bf6:	4816      	ldr	r0, [pc, #88]	@ (8011c50 <sys_sem_new+0x68>)
 8011bf8:	f003 ffc8 	bl	8015b8c <iprintf>
  LWIP_ASSERT("initial_count invalid (not 0 or 1)",
 8011bfc:	2c01      	cmp	r4, #1
 8011bfe:	d905      	bls.n	8011c0c <sys_sem_new+0x24>
 8011c00:	4b11      	ldr	r3, [pc, #68]	@ (8011c48 <sys_sem_new+0x60>)
 8011c02:	22fe      	movs	r2, #254	@ 0xfe
 8011c04:	4913      	ldr	r1, [pc, #76]	@ (8011c54 <sys_sem_new+0x6c>)
 8011c06:	4812      	ldr	r0, [pc, #72]	@ (8011c50 <sys_sem_new+0x68>)
 8011c08:	f003 ffc0 	bl	8015b8c <iprintf>
    (initial_count == 0) || (initial_count == 1));

  sem->sem = xSemaphoreCreateBinary();
 8011c0c:	2203      	movs	r2, #3
 8011c0e:	2100      	movs	r1, #0
 8011c10:	2001      	movs	r0, #1
 8011c12:	f7f6 fa9d 	bl	8008150 <xQueueGenericCreate>
 8011c16:	6028      	str	r0, [r5, #0]
  if(sem->sem == NULL) {
 8011c18:	b190      	cbz	r0, 8011c40 <sys_sem_new+0x58>
    SYS_STATS_INC(sem.err);
    return ERR_MEM;
  }
  SYS_STATS_INC_USED(sem);

  if(initial_count == 1) {
 8011c1a:	2c01      	cmp	r4, #1
 8011c1c:	d001      	beq.n	8011c22 <sys_sem_new+0x3a>
    BaseType_t ret = xSemaphoreGive(sem->sem);
    LWIP_ASSERT("sys_sem_new: initial give failed", ret == pdTRUE);
  }
  return ERR_OK;
 8011c1e:	2000      	movs	r0, #0
}
 8011c20:	bd38      	pop	{r3, r4, r5, pc}
    BaseType_t ret = xSemaphoreGive(sem->sem);
 8011c22:	2300      	movs	r3, #0
 8011c24:	461a      	mov	r2, r3
 8011c26:	4619      	mov	r1, r3
 8011c28:	f7f6 fabe 	bl	80081a8 <xQueueGenericSend>
    LWIP_ASSERT("sys_sem_new: initial give failed", ret == pdTRUE);
 8011c2c:	2801      	cmp	r0, #1
 8011c2e:	d0f6      	beq.n	8011c1e <sys_sem_new+0x36>
 8011c30:	4b05      	ldr	r3, [pc, #20]	@ (8011c48 <sys_sem_new+0x60>)
 8011c32:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8011c36:	4908      	ldr	r1, [pc, #32]	@ (8011c58 <sys_sem_new+0x70>)
 8011c38:	4805      	ldr	r0, [pc, #20]	@ (8011c50 <sys_sem_new+0x68>)
 8011c3a:	f003 ffa7 	bl	8015b8c <iprintf>
 8011c3e:	e7ee      	b.n	8011c1e <sys_sem_new+0x36>
    return ERR_MEM;
 8011c40:	f04f 30ff 	mov.w	r0, #4294967295
 8011c44:	e7ec      	b.n	8011c20 <sys_sem_new+0x38>
 8011c46:	bf00      	nop
 8011c48:	08018ca5 	.word	0x08018ca5
 8011c4c:	08018d64 	.word	0x08018d64
 8011c50:	080169d3 	.word	0x080169d3
 8011c54:	08018d1b 	.word	0x08018d1b
 8011c58:	08018d3e 	.word	0x08018d3e

08011c5c <sys_sem_signal>:

void
sys_sem_signal(sys_sem_t *sem)
{
 8011c5c:	b510      	push	{r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8011c5e:	4604      	mov	r4, r0
 8011c60:	b930      	cbnz	r0, 8011c70 <sys_sem_signal+0x14>
 8011c62:	4b11      	ldr	r3, [pc, #68]	@ (8011ca8 <sys_sem_signal+0x4c>)
 8011c64:	f240 1213 	movw	r2, #275	@ 0x113
 8011c68:	4910      	ldr	r1, [pc, #64]	@ (8011cac <sys_sem_signal+0x50>)
 8011c6a:	4811      	ldr	r0, [pc, #68]	@ (8011cb0 <sys_sem_signal+0x54>)
 8011c6c:	f003 ff8e 	bl	8015b8c <iprintf>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 8011c70:	6823      	ldr	r3, [r4, #0]
 8011c72:	b933      	cbnz	r3, 8011c82 <sys_sem_signal+0x26>
 8011c74:	4b0c      	ldr	r3, [pc, #48]	@ (8011ca8 <sys_sem_signal+0x4c>)
 8011c76:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8011c7a:	490e      	ldr	r1, [pc, #56]	@ (8011cb4 <sys_sem_signal+0x58>)
 8011c7c:	480c      	ldr	r0, [pc, #48]	@ (8011cb0 <sys_sem_signal+0x54>)
 8011c7e:	f003 ff85 	bl	8015b8c <iprintf>

  ret = xSemaphoreGive(sem->sem);
 8011c82:	2300      	movs	r3, #0
 8011c84:	6820      	ldr	r0, [r4, #0]
 8011c86:	461a      	mov	r2, r3
 8011c88:	4619      	mov	r1, r3
 8011c8a:	f7f6 fa8d 	bl	80081a8 <xQueueGenericSend>
  /* queue full is OK, this is a signal only... */
  LWIP_ASSERT("sys_sem_signal: sane return value",
 8011c8e:	2801      	cmp	r0, #1
 8011c90:	d908      	bls.n	8011ca4 <sys_sem_signal+0x48>
 8011c92:	4b05      	ldr	r3, [pc, #20]	@ (8011ca8 <sys_sem_signal+0x4c>)
 8011c94:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011c98:	4907      	ldr	r1, [pc, #28]	@ (8011cb8 <sys_sem_signal+0x5c>)
 8011c9a:	4805      	ldr	r0, [pc, #20]	@ (8011cb0 <sys_sem_signal+0x54>)
    (ret == pdTRUE) || (ret == errQUEUE_FULL));
}
 8011c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("sys_sem_signal: sane return value",
 8011ca0:	f003 bf74 	b.w	8015b8c <iprintf>
}
 8011ca4:	bd10      	pop	{r4, pc}
 8011ca6:	bf00      	nop
 8011ca8:	08018ca5 	.word	0x08018ca5
 8011cac:	08018d64 	.word	0x08018d64
 8011cb0:	080169d3 	.word	0x080169d3
 8011cb4:	08018d5f 	.word	0x08018d5f
 8011cb8:	08018d70 	.word	0x08018d70

08011cbc <sys_arch_sem_wait>:

u32_t
sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout_ms)
{
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	460d      	mov	r5, r1
  BaseType_t ret;
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	b930      	cbnz	r0, 8011cd2 <sys_arch_sem_wait+0x16>
 8011cc4:	4b16      	ldr	r3, [pc, #88]	@ (8011d20 <sys_arch_sem_wait+0x64>)
 8011cc6:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8011cca:	4916      	ldr	r1, [pc, #88]	@ (8011d24 <sys_arch_sem_wait+0x68>)
 8011ccc:	4816      	ldr	r0, [pc, #88]	@ (8011d28 <sys_arch_sem_wait+0x6c>)
 8011cce:	f003 ff5d 	bl	8015b8c <iprintf>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 8011cd2:	6823      	ldr	r3, [r4, #0]
 8011cd4:	b933      	cbnz	r3, 8011ce4 <sys_arch_sem_wait+0x28>
 8011cd6:	4b12      	ldr	r3, [pc, #72]	@ (8011d20 <sys_arch_sem_wait+0x64>)
 8011cd8:	f240 1221 	movw	r2, #289	@ 0x121
 8011cdc:	4913      	ldr	r1, [pc, #76]	@ (8011d2c <sys_arch_sem_wait+0x70>)
 8011cde:	4812      	ldr	r0, [pc, #72]	@ (8011d28 <sys_arch_sem_wait+0x6c>)
 8011ce0:	f003 ff54 	bl	8015b8c <iprintf>

  if(!timeout_ms) {
    /* wait infinite */
    ret = xSemaphoreTake(sem->sem, portMAX_DELAY);
 8011ce4:	6820      	ldr	r0, [r4, #0]
  if(!timeout_ms) {
 8011ce6:	b975      	cbnz	r5, 8011d06 <sys_arch_sem_wait+0x4a>
    ret = xSemaphoreTake(sem->sem, portMAX_DELAY);
 8011ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8011cec:	f7f6 fccd 	bl	800868a <xQueueSemaphoreTake>
    LWIP_ASSERT("taking semaphore failed", ret == pdTRUE);
 8011cf0:	2801      	cmp	r0, #1
 8011cf2:	d006      	beq.n	8011d02 <sys_arch_sem_wait+0x46>
 8011cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8011d20 <sys_arch_sem_wait+0x64>)
 8011cf6:	f44f 7293 	mov.w	r2, #294	@ 0x126
 8011cfa:	490d      	ldr	r1, [pc, #52]	@ (8011d30 <sys_arch_sem_wait+0x74>)
 8011cfc:	480a      	ldr	r0, [pc, #40]	@ (8011d28 <sys_arch_sem_wait+0x6c>)
 8011cfe:	f003 ff45 	bl	8015b8c <iprintf>
  }

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 8011d02:	2001      	movs	r0, #1
}
 8011d04:	bd38      	pop	{r3, r4, r5, pc}
    ret = xSemaphoreTake(sem->sem, timeout_ticks);
 8011d06:	4629      	mov	r1, r5
 8011d08:	f7f6 fcbf 	bl	800868a <xQueueSemaphoreTake>
    if (ret == errQUEUE_EMPTY) {
 8011d0c:	b128      	cbz	r0, 8011d1a <sys_arch_sem_wait+0x5e>
    LWIP_ASSERT("taking semaphore failed", ret == pdTRUE);
 8011d0e:	2801      	cmp	r0, #1
 8011d10:	d0f7      	beq.n	8011d02 <sys_arch_sem_wait+0x46>
 8011d12:	4b03      	ldr	r3, [pc, #12]	@ (8011d20 <sys_arch_sem_wait+0x64>)
 8011d14:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011d18:	e7ef      	b.n	8011cfa <sys_arch_sem_wait+0x3e>
      return SYS_ARCH_TIMEOUT;
 8011d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d1e:	e7f1      	b.n	8011d04 <sys_arch_sem_wait+0x48>
 8011d20:	08018ca5 	.word	0x08018ca5
 8011d24:	08018d64 	.word	0x08018d64
 8011d28:	080169d3 	.word	0x080169d3
 8011d2c:	08018d5f 	.word	0x08018d5f
 8011d30:	08018d92 	.word	0x08018d92

08011d34 <sys_sem_free>:

void
sys_sem_free(sys_sem_t *sem)
{
 8011d34:	b510      	push	{r4, lr}
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8011d36:	4604      	mov	r4, r0
 8011d38:	b930      	cbnz	r0, 8011d48 <sys_sem_free+0x14>
 8011d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8011d68 <sys_sem_free+0x34>)
 8011d3c:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8011d40:	490a      	ldr	r1, [pc, #40]	@ (8011d6c <sys_sem_free+0x38>)
 8011d42:	480b      	ldr	r0, [pc, #44]	@ (8011d70 <sys_sem_free+0x3c>)
 8011d44:	f003 ff22 	bl	8015b8c <iprintf>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	b933      	cbnz	r3, 8011d5a <sys_sem_free+0x26>
 8011d4c:	4b06      	ldr	r3, [pc, #24]	@ (8011d68 <sys_sem_free+0x34>)
 8011d4e:	f240 123b 	movw	r2, #315	@ 0x13b
 8011d52:	4908      	ldr	r1, [pc, #32]	@ (8011d74 <sys_sem_free+0x40>)
 8011d54:	4806      	ldr	r0, [pc, #24]	@ (8011d70 <sys_sem_free+0x3c>)
 8011d56:	f003 ff19 	bl	8015b8c <iprintf>

  SYS_STATS_DEC(sem.used);
  vSemaphoreDelete(sem->sem);
 8011d5a:	6820      	ldr	r0, [r4, #0]
 8011d5c:	f7f6 fdd4 	bl	8008908 <vQueueDelete>
  sem->sem = NULL;
 8011d60:	2300      	movs	r3, #0
 8011d62:	6023      	str	r3, [r4, #0]
}
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	bf00      	nop
 8011d68:	08018ca5 	.word	0x08018ca5
 8011d6c:	08018d64 	.word	0x08018d64
 8011d70:	080169d3 	.word	0x080169d3
 8011d74:	08018d5f 	.word	0x08018d5f

08011d78 <sys_mbox_new>:

err_t
sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	460d      	mov	r5, r1
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	b930      	cbnz	r0, 8011d8e <sys_mbox_new+0x16>
 8011d80:	4b0d      	ldr	r3, [pc, #52]	@ (8011db8 <sys_mbox_new+0x40>)
 8011d82:	f240 1245 	movw	r2, #325	@ 0x145
 8011d86:	490d      	ldr	r1, [pc, #52]	@ (8011dbc <sys_mbox_new+0x44>)
 8011d88:	480d      	ldr	r0, [pc, #52]	@ (8011dc0 <sys_mbox_new+0x48>)
 8011d8a:	f003 feff 	bl	8015b8c <iprintf>
  LWIP_ASSERT("size > 0", size > 0);
 8011d8e:	2d00      	cmp	r5, #0
 8011d90:	dc06      	bgt.n	8011da0 <sys_mbox_new+0x28>
 8011d92:	4b09      	ldr	r3, [pc, #36]	@ (8011db8 <sys_mbox_new+0x40>)
 8011d94:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 8011d98:	490a      	ldr	r1, [pc, #40]	@ (8011dc4 <sys_mbox_new+0x4c>)
 8011d9a:	4809      	ldr	r0, [pc, #36]	@ (8011dc0 <sys_mbox_new+0x48>)
 8011d9c:	f003 fef6 	bl	8015b8c <iprintf>

  mbox->mbx = xQueueCreate((UBaseType_t)size, sizeof(void *));
 8011da0:	2200      	movs	r2, #0
 8011da2:	2104      	movs	r1, #4
 8011da4:	4628      	mov	r0, r5
 8011da6:	f7f6 f9d3 	bl	8008150 <xQueueGenericCreate>
 8011daa:	6020      	str	r0, [r4, #0]
  if(mbox->mbx == NULL) {
 8011dac:	fab0 f080 	clz	r0, r0
 8011db0:	0940      	lsrs	r0, r0, #5
    SYS_STATS_INC(mbox.err);
    return ERR_MEM;
  }
  SYS_STATS_INC_USED(mbox);
  return ERR_OK;
}
 8011db2:	4240      	negs	r0, r0
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	bf00      	nop
 8011db8:	08018ca5 	.word	0x08018ca5
 8011dbc:	08018daa 	.word	0x08018daa
 8011dc0:	080169d3 	.word	0x080169d3
 8011dc4:	08018db7 	.word	0x08018db7

08011dc8 <sys_mbox_trypost>:
  LWIP_ASSERT("mbox post failed", ret == pdTRUE);
}

err_t
sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011dc8:	b513      	push	{r0, r1, r4, lr}
  BaseType_t ret;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8011dca:	4604      	mov	r4, r0
{
 8011dcc:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8011dce:	b930      	cbnz	r0, 8011dde <sys_mbox_trypost+0x16>
 8011dd0:	4b12      	ldr	r3, [pc, #72]	@ (8011e1c <sys_mbox_trypost+0x54>)
 8011dd2:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8011dd6:	4912      	ldr	r1, [pc, #72]	@ (8011e20 <sys_mbox_trypost+0x58>)
 8011dd8:	4812      	ldr	r0, [pc, #72]	@ (8011e24 <sys_mbox_trypost+0x5c>)
 8011dda:	f003 fed7 	bl	8015b8c <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8011dde:	6823      	ldr	r3, [r4, #0]
 8011de0:	b933      	cbnz	r3, 8011df0 <sys_mbox_trypost+0x28>
 8011de2:	4b0e      	ldr	r3, [pc, #56]	@ (8011e1c <sys_mbox_trypost+0x54>)
 8011de4:	f240 1261 	movw	r2, #353	@ 0x161
 8011de8:	490f      	ldr	r1, [pc, #60]	@ (8011e28 <sys_mbox_trypost+0x60>)
 8011dea:	480e      	ldr	r0, [pc, #56]	@ (8011e24 <sys_mbox_trypost+0x5c>)
 8011dec:	f003 fece 	bl	8015b8c <iprintf>

  ret = xQueueSendToBack(mbox->mbx, &msg, 0);
 8011df0:	2300      	movs	r3, #0
 8011df2:	a901      	add	r1, sp, #4
 8011df4:	6820      	ldr	r0, [r4, #0]
 8011df6:	461a      	mov	r2, r3
 8011df8:	f7f6 f9d6 	bl	80081a8 <xQueueGenericSend>
  if (ret == pdTRUE) {
 8011dfc:	2801      	cmp	r0, #1
 8011dfe:	d00b      	beq.n	8011e18 <sys_mbox_trypost+0x50>
    return ERR_OK;
  } else {
    LWIP_ASSERT("mbox trypost failed", ret == errQUEUE_FULL);
 8011e00:	b130      	cbz	r0, 8011e10 <sys_mbox_trypost+0x48>
 8011e02:	4b06      	ldr	r3, [pc, #24]	@ (8011e1c <sys_mbox_trypost+0x54>)
 8011e04:	f240 1267 	movw	r2, #359	@ 0x167
 8011e08:	4908      	ldr	r1, [pc, #32]	@ (8011e2c <sys_mbox_trypost+0x64>)
 8011e0a:	4806      	ldr	r0, [pc, #24]	@ (8011e24 <sys_mbox_trypost+0x5c>)
 8011e0c:	f003 febe 	bl	8015b8c <iprintf>
    SYS_STATS_INC(mbox.err);
    return ERR_MEM;
 8011e10:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8011e14:	b002      	add	sp, #8
 8011e16:	bd10      	pop	{r4, pc}
    return ERR_OK;
 8011e18:	2000      	movs	r0, #0
 8011e1a:	e7fb      	b.n	8011e14 <sys_mbox_trypost+0x4c>
 8011e1c:	08018ca5 	.word	0x08018ca5
 8011e20:	08018daa 	.word	0x08018daa
 8011e24:	080169d3 	.word	0x080169d3
 8011e28:	08018dc0 	.word	0x08018dc0
 8011e2c:	08018de3 	.word	0x08018de3

08011e30 <sys_arch_mbox_fetch>:
  }
}

u32_t
sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout_ms)
{
 8011e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e32:	460c      	mov	r4, r1
 8011e34:	4616      	mov	r6, r2
  BaseType_t ret;
  void *msg_dummy;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8011e36:	4605      	mov	r5, r0
 8011e38:	b930      	cbnz	r0, 8011e48 <sys_arch_mbox_fetch+0x18>
 8011e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8011ea4 <sys_arch_mbox_fetch+0x74>)
 8011e3c:	f240 1287 	movw	r2, #391	@ 0x187
 8011e40:	4919      	ldr	r1, [pc, #100]	@ (8011ea8 <sys_arch_mbox_fetch+0x78>)
 8011e42:	481a      	ldr	r0, [pc, #104]	@ (8011eac <sys_arch_mbox_fetch+0x7c>)
 8011e44:	f003 fea2 	bl	8015b8c <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8011e48:	682b      	ldr	r3, [r5, #0]
 8011e4a:	b933      	cbnz	r3, 8011e5a <sys_arch_mbox_fetch+0x2a>
 8011e4c:	4b15      	ldr	r3, [pc, #84]	@ (8011ea4 <sys_arch_mbox_fetch+0x74>)
 8011e4e:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8011e52:	4917      	ldr	r1, [pc, #92]	@ (8011eb0 <sys_arch_mbox_fetch+0x80>)
 8011e54:	4815      	ldr	r0, [pc, #84]	@ (8011eac <sys_arch_mbox_fetch+0x7c>)
 8011e56:	f003 fe99 	bl	8015b8c <iprintf>

  if (!msg) {
 8011e5a:	b904      	cbnz	r4, 8011e5e <sys_arch_mbox_fetch+0x2e>
    msg = &msg_dummy;
 8011e5c:	ac01      	add	r4, sp, #4
  }

  if (!timeout_ms) {
    /* wait infinite */
    ret = xQueueReceive(mbox->mbx, &(*msg), portMAX_DELAY);
 8011e5e:	6828      	ldr	r0, [r5, #0]
  if (!timeout_ms) {
 8011e60:	b986      	cbnz	r6, 8011e84 <sys_arch_mbox_fetch+0x54>
    ret = xQueueReceive(mbox->mbx, &(*msg), portMAX_DELAY);
 8011e62:	f04f 32ff 	mov.w	r2, #4294967295
 8011e66:	4621      	mov	r1, r4
 8011e68:	f7f6 fb6b 	bl	8008542 <xQueueReceive>
    LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8011e6c:	2801      	cmp	r0, #1
 8011e6e:	d006      	beq.n	8011e7e <sys_arch_mbox_fetch+0x4e>
 8011e70:	4b0c      	ldr	r3, [pc, #48]	@ (8011ea4 <sys_arch_mbox_fetch+0x74>)
 8011e72:	f240 1291 	movw	r2, #401	@ 0x191
 8011e76:	490f      	ldr	r1, [pc, #60]	@ (8011eb4 <sys_arch_mbox_fetch+0x84>)
 8011e78:	480c      	ldr	r0, [pc, #48]	@ (8011eac <sys_arch_mbox_fetch+0x7c>)
 8011e7a:	f003 fe87 	bl	8015b8c <iprintf>
  }

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 8011e7e:	2001      	movs	r0, #1
}
 8011e80:	b002      	add	sp, #8
 8011e82:	bd70      	pop	{r4, r5, r6, pc}
    ret = xQueueReceive(mbox->mbx, &(*msg), timeout_ticks);
 8011e84:	4632      	mov	r2, r6
 8011e86:	4621      	mov	r1, r4
 8011e88:	f7f6 fb5b 	bl	8008542 <xQueueReceive>
    if (ret == errQUEUE_EMPTY) {
 8011e8c:	b918      	cbnz	r0, 8011e96 <sys_arch_mbox_fetch+0x66>
      *msg = NULL;
 8011e8e:	6020      	str	r0, [r4, #0]
      return SYS_ARCH_TIMEOUT;
 8011e90:	f04f 30ff 	mov.w	r0, #4294967295
 8011e94:	e7f4      	b.n	8011e80 <sys_arch_mbox_fetch+0x50>
    LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8011e96:	2801      	cmp	r0, #1
 8011e98:	d0f1      	beq.n	8011e7e <sys_arch_mbox_fetch+0x4e>
 8011e9a:	4b02      	ldr	r3, [pc, #8]	@ (8011ea4 <sys_arch_mbox_fetch+0x74>)
 8011e9c:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 8011ea0:	e7e9      	b.n	8011e76 <sys_arch_mbox_fetch+0x46>
 8011ea2:	bf00      	nop
 8011ea4:	08018ca5 	.word	0x08018ca5
 8011ea8:	08018daa 	.word	0x08018daa
 8011eac:	080169d3 	.word	0x080169d3
 8011eb0:	08018dc0 	.word	0x08018dc0
 8011eb4:	08018df7 	.word	0x08018df7

08011eb8 <sys_arch_mbox_tryfetch>:

u32_t
sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8011eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011eba:	460c      	mov	r4, r1
  BaseType_t ret;
  void *msg_dummy;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	b930      	cbnz	r0, 8011ece <sys_arch_mbox_tryfetch+0x16>
 8011ec0:	4b14      	ldr	r3, [pc, #80]	@ (8011f14 <sys_arch_mbox_tryfetch+0x5c>)
 8011ec2:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
 8011ec6:	4914      	ldr	r1, [pc, #80]	@ (8011f18 <sys_arch_mbox_tryfetch+0x60>)
 8011ec8:	4814      	ldr	r0, [pc, #80]	@ (8011f1c <sys_arch_mbox_tryfetch+0x64>)
 8011eca:	f003 fe5f 	bl	8015b8c <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8011ece:	682b      	ldr	r3, [r5, #0]
 8011ed0:	b933      	cbnz	r3, 8011ee0 <sys_arch_mbox_tryfetch+0x28>
 8011ed2:	4b10      	ldr	r3, [pc, #64]	@ (8011f14 <sys_arch_mbox_tryfetch+0x5c>)
 8011ed4:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011ed8:	4911      	ldr	r1, [pc, #68]	@ (8011f20 <sys_arch_mbox_tryfetch+0x68>)
 8011eda:	4810      	ldr	r0, [pc, #64]	@ (8011f1c <sys_arch_mbox_tryfetch+0x64>)
 8011edc:	f003 fe56 	bl	8015b8c <iprintf>

  if (!msg) {
 8011ee0:	b904      	cbnz	r4, 8011ee4 <sys_arch_mbox_tryfetch+0x2c>
    msg = &msg_dummy;
 8011ee2:	ac01      	add	r4, sp, #4
  }

  ret = xQueueReceive(mbox->mbx, &(*msg), 0);
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	4621      	mov	r1, r4
 8011ee8:	6828      	ldr	r0, [r5, #0]
 8011eea:	f7f6 fb2a 	bl	8008542 <xQueueReceive>
  if (ret == errQUEUE_EMPTY) {
 8011eee:	b920      	cbnz	r0, 8011efa <sys_arch_mbox_tryfetch+0x42>
    *msg = NULL;
 8011ef0:	6020      	str	r0, [r4, #0]
    return SYS_MBOX_EMPTY;
 8011ef2:	f04f 30ff 	mov.w	r0, #4294967295
  }
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);

  return 0;
}
 8011ef6:	b003      	add	sp, #12
 8011ef8:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8011efa:	2801      	cmp	r0, #1
 8011efc:	d101      	bne.n	8011f02 <sys_arch_mbox_tryfetch+0x4a>
  return 0;
 8011efe:	2000      	movs	r0, #0
 8011f00:	e7f9      	b.n	8011ef6 <sys_arch_mbox_tryfetch+0x3e>
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8011f02:	4b04      	ldr	r3, [pc, #16]	@ (8011f14 <sys_arch_mbox_tryfetch+0x5c>)
 8011f04:	f44f 72da 	mov.w	r2, #436	@ 0x1b4
 8011f08:	4906      	ldr	r1, [pc, #24]	@ (8011f24 <sys_arch_mbox_tryfetch+0x6c>)
 8011f0a:	4804      	ldr	r0, [pc, #16]	@ (8011f1c <sys_arch_mbox_tryfetch+0x64>)
 8011f0c:	f003 fe3e 	bl	8015b8c <iprintf>
 8011f10:	e7f5      	b.n	8011efe <sys_arch_mbox_tryfetch+0x46>
 8011f12:	bf00      	nop
 8011f14:	08018ca5 	.word	0x08018ca5
 8011f18:	08018daa 	.word	0x08018daa
 8011f1c:	080169d3 	.word	0x080169d3
 8011f20:	08018dc0 	.word	0x08018dc0
 8011f24:	08018df7 	.word	0x08018df7

08011f28 <sys_mbox_free>:

void
sys_mbox_free(sys_mbox_t *mbox)
{
 8011f28:	b510      	push	{r4, lr}
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	b930      	cbnz	r0, 8011f3c <sys_mbox_free+0x14>
 8011f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8011f58 <sys_mbox_free+0x30>)
 8011f30:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 8011f34:	4909      	ldr	r1, [pc, #36]	@ (8011f5c <sys_mbox_free+0x34>)
 8011f36:	480a      	ldr	r0, [pc, #40]	@ (8011f60 <sys_mbox_free+0x38>)
 8011f38:	f003 fe28 	bl	8015b8c <iprintf>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8011f3c:	6823      	ldr	r3, [r4, #0]
 8011f3e:	b933      	cbnz	r3, 8011f4e <sys_mbox_free+0x26>
 8011f40:	4b05      	ldr	r3, [pc, #20]	@ (8011f58 <sys_mbox_free+0x30>)
 8011f42:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011f46:	4907      	ldr	r1, [pc, #28]	@ (8011f64 <sys_mbox_free+0x3c>)
 8011f48:	4805      	ldr	r0, [pc, #20]	@ (8011f60 <sys_mbox_free+0x38>)
 8011f4a:	f003 fe1f 	bl	8015b8c <iprintf>
      SYS_STATS_INC(mbox.err);
    }
  }
#endif

  vQueueDelete(mbox->mbx);
 8011f4e:	6820      	ldr	r0, [r4, #0]

  SYS_STATS_DEC(mbox.used);
}
 8011f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  vQueueDelete(mbox->mbx);
 8011f54:	f7f6 bcd8 	b.w	8008908 <vQueueDelete>
 8011f58:	08018ca5 	.word	0x08018ca5
 8011f5c:	08018daa 	.word	0x08018daa
 8011f60:	080169d3 	.word	0x080169d3
 8011f64:	08018dc0 	.word	0x08018dc0

08011f68 <sys_thread_new>:

sys_thread_t
sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio)
{
 8011f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t rtos_task;
  BaseType_t ret;
  sys_thread_t lwip_thread;
  size_t rtos_stacksize;

  LWIP_ASSERT("invalid stacksize", stacksize > 0);
 8011f6a:	1e1c      	subs	r4, r3, #0
{
 8011f6c:	b085      	sub	sp, #20
 8011f6e:	4606      	mov	r6, r0
 8011f70:	460d      	mov	r5, r1
 8011f72:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid stacksize", stacksize > 0);
 8011f74:	dc06      	bgt.n	8011f84 <sys_thread_new+0x1c>
 8011f76:	4b0f      	ldr	r3, [pc, #60]	@ (8011fb4 <sys_thread_new+0x4c>)
 8011f78:	f240 12d7 	movw	r2, #471	@ 0x1d7
 8011f7c:	490e      	ldr	r1, [pc, #56]	@ (8011fb8 <sys_thread_new+0x50>)
 8011f7e:	480f      	ldr	r0, [pc, #60]	@ (8011fbc <sys_thread_new+0x54>)
 8011f80:	f003 fe04 	bl	8015b8c <iprintf>
  rtos_stacksize = (size_t)stacksize / sizeof(StackType_t);
#endif

  /* lwIP's lwip_thread_fn matches FreeRTOS' TaskFunction_t, so we can pass the
     thread function without adaption here. */
  ret = xTaskCreate(thread, name, (configSTACK_DEPTH_TYPE)rtos_stacksize, arg, prio, &rtos_task);
 8011f84:	ab03      	add	r3, sp, #12
 8011f86:	f3c4 028f 	ubfx	r2, r4, #2, #16
 8011f8a:	4631      	mov	r1, r6
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	9301      	str	r3, [sp, #4]
 8011f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f92:	9300      	str	r3, [sp, #0]
 8011f94:	463b      	mov	r3, r7
 8011f96:	f7f6 fd77 	bl	8008a88 <xTaskCreate>
  LWIP_ASSERT("task creation failed", ret == pdTRUE);
 8011f9a:	2801      	cmp	r0, #1
 8011f9c:	d006      	beq.n	8011fac <sys_thread_new+0x44>
 8011f9e:	4b05      	ldr	r3, [pc, #20]	@ (8011fb4 <sys_thread_new+0x4c>)
 8011fa0:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8011fa4:	4906      	ldr	r1, [pc, #24]	@ (8011fc0 <sys_thread_new+0x58>)
 8011fa6:	4805      	ldr	r0, [pc, #20]	@ (8011fbc <sys_thread_new+0x54>)
 8011fa8:	f003 fdf0 	bl	8015b8c <iprintf>

  lwip_thread.thread_handle = rtos_task;
  return lwip_thread;
}
 8011fac:	9803      	ldr	r0, [sp, #12]
 8011fae:	b005      	add	sp, #20
 8011fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	08018ca5 	.word	0x08018ca5
 8011fb8:	08018e09 	.word	0x08018e09
 8011fbc:	080169d3 	.word	0x080169d3
 8011fc0:	08018e1b 	.word	0x08018e1b

08011fc4 <io_task>:
  io_queue = xQueueCreate(1, sizeof(io_ops_t));
  xTaskCreate(io_task, "io", IO_STACK_SIZE, NULL, 2, NULL);
#endif
}

static void io_task(void *params) {
 8011fc4:	b570      	push	{r4, r5, r6, lr}
  (void) params;
  io_ops_t io_ops;
  while (1) {
    if (xQueueReceive(io_queue, &io_ops, portMAX_DELAY)) {
 8011fc6:	4d12      	ldr	r5, [pc, #72]	@ (8012010 <io_task+0x4c>)
static void io_task(void *params) {
 8011fc8:	b086      	sub	sp, #24
      uint8_t* addr = (uint8_t*) (uintptr_t) (msc_disk[io_ops.lba] + io_ops.offset);
 8011fca:	4e12      	ldr	r6, [pc, #72]	@ (8012014 <io_task+0x50>)
    if (xQueueReceive(io_queue, &io_ops, portMAX_DELAY)) {
 8011fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd0:	a901      	add	r1, sp, #4
 8011fd2:	6828      	ldr	r0, [r5, #0]
 8011fd4:	f7f6 fab5 	bl	8008542 <xQueueReceive>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d0f7      	beq.n	8011fcc <io_task+0x8>
      uint8_t* addr = (uint8_t*) (uintptr_t) (msc_disk[io_ops.lba] + io_ops.offset);
 8011fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      int32_t nbytes = io_ops.bufsize;
      if (io_ops.is_read) {
        memcpy(io_ops.buffer, addr, io_ops.bufsize);
 8011fe0:	e9dd 0404 	ldrd	r0, r4, [sp, #16]
      uint8_t* addr = (uint8_t*) (uintptr_t) (msc_disk[io_ops.lba] + io_ops.offset);
 8011fe4:	eb03 2342 	add.w	r3, r3, r2, lsl #9
      if (io_ops.is_read) {
 8011fe8:	f89d 2005 	ldrb.w	r2, [sp, #5]
      uint8_t* addr = (uint8_t*) (uintptr_t) (msc_disk[io_ops.lba] + io_ops.offset);
 8011fec:	4433      	add	r3, r6
      if (io_ops.is_read) {
 8011fee:	b15a      	cbz	r2, 8012008 <io_task+0x44>
        memcpy(io_ops.buffer, addr, io_ops.bufsize);
 8011ff0:	4622      	mov	r2, r4
 8011ff2:	4619      	mov	r1, r3
      } else {
#ifndef CFG_EXAMPLE_MSC_READONLY
        memcpy((uint8_t*) addr, io_ops.buffer, io_ops.bufsize);
 8011ff4:	f003 ffd5 	bl	8015fa2 <memcpy>
#else
        nbytes = -1; // failed to write
#endif
      }

      tusb_time_delay_ms_api(CFG_EXAMPLE_MSC_IO_DELAY_MS);
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	f003 fb44 	bl	8015686 <tusb_time_delay_ms_api>
      tud_msc_async_io_done(nbytes, false);
 8011ffe:	2100      	movs	r1, #0
 8012000:	4620      	mov	r0, r4
 8012002:	f000 ff25 	bl	8012e50 <tud_msc_async_io_done>
 8012006:	e7e1      	b.n	8011fcc <io_task+0x8>
        memcpy((uint8_t*) addr, io_ops.buffer, io_ops.bufsize);
 8012008:	4601      	mov	r1, r0
 801200a:	4622      	mov	r2, r4
 801200c:	4618      	mov	r0, r3
 801200e:	e7f1      	b.n	8011ff4 <io_task+0x30>
 8012010:	200110d4 	.word	0x200110d4
 8012014:	2000005c 	.word	0x2000005c

08012018 <msc_disk_init>:
void msc_disk_init() {
 8012018:	b507      	push	{r0, r1, r2, lr}
  io_queue = xQueueCreate(1, sizeof(io_ops_t));
 801201a:	2200      	movs	r2, #0
 801201c:	2114      	movs	r1, #20
 801201e:	2001      	movs	r0, #1
 8012020:	f7f6 f896 	bl	8008150 <xQueueGenericCreate>
 8012024:	4b06      	ldr	r3, [pc, #24]	@ (8012040 <msc_disk_init+0x28>)
  xTaskCreate(io_task, "io", IO_STACK_SIZE, NULL, 2, NULL);
 8012026:	2202      	movs	r2, #2
 8012028:	4906      	ldr	r1, [pc, #24]	@ (8012044 <msc_disk_init+0x2c>)
  io_queue = xQueueCreate(1, sizeof(io_ops_t));
 801202a:	6018      	str	r0, [r3, #0]
  xTaskCreate(io_task, "io", IO_STACK_SIZE, NULL, 2, NULL);
 801202c:	2300      	movs	r3, #0
 801202e:	4806      	ldr	r0, [pc, #24]	@ (8012048 <msc_disk_init+0x30>)
 8012030:	e9cd 2300 	strd	r2, r3, [sp]
 8012034:	2280      	movs	r2, #128	@ 0x80
 8012036:	f7f6 fd27 	bl	8008a88 <xTaskCreate>
}
 801203a:	b003      	add	sp, #12
 801203c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012040:	200110d4 	.word	0x200110d4
 8012044:	08018e30 	.word	0x08018e30
 8012048:	08011fc5 	.word	0x08011fc5

0801204c <tud_msc_inquiry2_cb>:
#endif

// Invoked when received SCSI_CMD_INQUIRY, v2 with full inquiry response
// Some inquiry_resp's fields are already filled with default values, application can update them
// Return length of inquiry response, typically sizeof(scsi_inquiry_resp_t) (36 bytes), can be longer if included vendor data.
uint32_t tud_msc_inquiry2_cb(uint8_t lun, scsi_inquiry_resp_t* inquiry_resp, uint32_t bufsize) {
 801204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801204e:	460b      	mov	r3, r1
 8012050:	b089      	sub	sp, #36	@ 0x24
  (void) lun;
  (void) bufsize;
  const char vid[] = "TinyUSB";
 8012052:	4918      	ldr	r1, [pc, #96]	@ (80120b4 <tud_msc_inquiry2_cb+0x68>)
 8012054:	aa02      	add	r2, sp, #8
  const char pid[] = "Mass Storage";
 8012056:	ad04      	add	r5, sp, #16
  const char vid[] = "TinyUSB";
 8012058:	6808      	ldr	r0, [r1, #0]
 801205a:	6849      	ldr	r1, [r1, #4]
 801205c:	462c      	mov	r4, r5
 801205e:	c203      	stmia	r2!, {r0, r1}
  const char pid[] = "Mass Storage";
 8012060:	4a15      	ldr	r2, [pc, #84]	@ (80120b8 <tud_msc_inquiry2_cb+0x6c>)
 8012062:	f102 0708 	add.w	r7, r2, #8
 8012066:	6810      	ldr	r0, [r2, #0]
 8012068:	3208      	adds	r2, #8
 801206a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801206e:	462e      	mov	r6, r5
 8012070:	42ba      	cmp	r2, r7
 8012072:	c603      	stmia	r6!, {r0, r1}
 8012074:	4635      	mov	r5, r6
 8012076:	d1f6      	bne.n	8012066 <tud_msc_inquiry2_cb+0x1a>
 8012078:	6810      	ldr	r0, [r2, #0]
 801207a:	7912      	ldrb	r2, [r2, #4]
 801207c:	6030      	str	r0, [r6, #0]
 801207e:	7132      	strb	r2, [r6, #4]
  const char rev[] = "1.0";
 8012080:	4a0e      	ldr	r2, [pc, #56]	@ (80120bc <tud_msc_inquiry2_cb+0x70>)

  memcpy(inquiry_resp->vendor_id, vid, strlen(vid));
 8012082:	9802      	ldr	r0, [sp, #8]
  const char rev[] = "1.0";
 8012084:	9201      	str	r2, [sp, #4]
  memcpy(inquiry_resp->vendor_id, vid, strlen(vid));
 8012086:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801208a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801208e:	739a      	strb	r2, [r3, #14]
  memcpy(inquiry_resp->product_id, pid, strlen(pid));
 8012090:	4622      	mov	r2, r4
  memcpy(inquiry_resp->vendor_id, vid, strlen(vid));
 8012092:	6098      	str	r0, [r3, #8]
 8012094:	8199      	strh	r1, [r3, #12]
  memcpy(inquiry_resp->product_id, pid, strlen(pid));
 8012096:	ca03      	ldmia	r2!, {r0, r1}
 8012098:	6118      	str	r0, [r3, #16]
 801209a:	6810      	ldr	r0, [r2, #0]
 801209c:	6159      	str	r1, [r3, #20]
  memcpy(inquiry_resp->product_rev, rev, strlen(rev));
 801209e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  memcpy(inquiry_resp->product_id, pid, strlen(pid));
 80120a6:	6198      	str	r0, [r3, #24]

  return sizeof(scsi_inquiry_resp_t); // 36 bytes
}
 80120a8:	2024      	movs	r0, #36	@ 0x24
  memcpy(inquiry_resp->product_rev, rev, strlen(rev));
 80120aa:	8419      	strh	r1, [r3, #32]
 80120ac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80120b0:	b009      	add	sp, #36	@ 0x24
 80120b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120b4:	08018e33 	.word	0x08018e33
 80120b8:	08018e3b 	.word	0x08018e3b
 80120bc:	00302e31 	.word	0x00302e31

080120c0 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun) {
 80120c0:	b508      	push	{r3, lr}
  (void) lun;

  // RAM disk is ready until ejected
  if (ejected) {
 80120c2:	4b06      	ldr	r3, [pc, #24]	@ (80120dc <tud_msc_test_unit_ready_cb+0x1c>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	b133      	cbz	r3, 80120d6 <tud_msc_test_unit_ready_cb+0x16>
    // Additional Sense 3A-00 is NOT_FOUND
    tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3a, 0x00);
 80120c8:	2300      	movs	r3, #0
 80120ca:	223a      	movs	r2, #58	@ 0x3a
 80120cc:	2102      	movs	r1, #2
 80120ce:	f000 feb3 	bl	8012e38 <tud_msc_set_sense>
    return false;
 80120d2:	2000      	movs	r0, #0
  }

  return true;
}
 80120d4:	bd08      	pop	{r3, pc}
  return true;
 80120d6:	2001      	movs	r0, #1
 80120d8:	e7fc      	b.n	80120d4 <tud_msc_test_unit_ready_cb+0x14>
 80120da:	bf00      	nop
 80120dc:	200110d0 	.word	0x200110d0

080120e0 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
  (void) lun;
  *block_count = DISK_BLOCK_NUM;
 80120e0:	2310      	movs	r3, #16
 80120e2:	600b      	str	r3, [r1, #0]
  *block_size  = DISK_BLOCK_SIZE;
 80120e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80120e8:	8013      	strh	r3, [r2, #0]
}
 80120ea:	4770      	bx	lr

080120ec <tud_msc_start_stop_cb>:
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject) {
  (void) lun;
  (void) power_condition;

  if (load_eject) {
 80120ec:	b11b      	cbz	r3, 80120f6 <tud_msc_start_stop_cb+0xa>
    if (start) {
 80120ee:	b912      	cbnz	r2, 80120f6 <tud_msc_start_stop_cb+0xa>
      // load disk storage
    } else {
      // unload disk storage
      ejected = true;
 80120f0:	4b02      	ldr	r3, [pc, #8]	@ (80120fc <tud_msc_start_stop_cb+0x10>)
 80120f2:	2201      	movs	r2, #1
 80120f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return true;
}
 80120f6:	2001      	movs	r0, #1
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop
 80120fc:	200110d0 	.word	0x200110d0

08012100 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 8012100:	b530      	push	{r4, r5, lr}
  (void) lun;

  // out of ramdisk
  if (lba >= DISK_BLOCK_NUM) {
 8012102:	290f      	cmp	r1, #15
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 8012104:	b087      	sub	sp, #28
 8012106:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (lba >= DISK_BLOCK_NUM) {
 8012108:	d822      	bhi.n	8012150 <tud_msc_read10_cb+0x50>
    return TUD_MSC_RET_ERROR;
  }

  // Check for overflow of offset + bufsize
  if (lba * DISK_BLOCK_SIZE + offset + bufsize > DISK_BLOCK_NUM * DISK_BLOCK_SIZE) {
 801210a:	1954      	adds	r4, r2, r5
 801210c:	eb04 2441 	add.w	r4, r4, r1, lsl #9
 8012110:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8012114:	d81c      	bhi.n	8012150 <tud_msc_read10_cb+0x50>
    return TUD_MSC_RET_ERROR;
  }

  #if CFG_EXAMPLE_MSC_ASYNC_IO
  io_ops_t io_ops = {.is_read = true, .lun = lun, .lba = lba, .offset = offset, .buffer = buffer, .bufsize = bufsize};
 8012116:	f88d 0004 	strb.w	r0, [sp, #4]
 801211a:	2001      	movs	r0, #1
 801211c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8012120:	f88d 0005 	strb.w	r0, [sp, #5]

  // Send IO operation to IO task
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 8012124:	2300      	movs	r3, #0
 8012126:	480d      	ldr	r0, [pc, #52]	@ (801215c <tud_msc_read10_cb+0x5c>)
  io_ops_t io_ops = {.is_read = true, .lun = lun, .lba = lba, .offset = offset, .buffer = buffer, .bufsize = bufsize};
 8012128:	e9cd 1202 	strd	r1, r2, [sp, #8]
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 801212c:	6800      	ldr	r0, [r0, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	a901      	add	r1, sp, #4
 8012132:	f7f6 f839 	bl	80081a8 <xQueueGenericSend>
 8012136:	2801      	cmp	r0, #1
 8012138:	d00d      	beq.n	8012156 <tud_msc_read10_cb+0x56>
 801213a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801213e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012142:	07db      	lsls	r3, r3, #31
 8012144:	d402      	bmi.n	801214c <tud_msc_read10_cb+0x4c>
 8012146:	2000      	movs	r0, #0
  #else
  uint8_t const *addr = msc_disk[lba] + offset;
  memcpy(buffer, addr, bufsize);
  return bufsize;
  #endif
}
 8012148:	b007      	add	sp, #28
 801214a:	bd30      	pop	{r4, r5, pc}
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 801214c:	be00      	bkpt	0x0000
 801214e:	e7fa      	b.n	8012146 <tud_msc_read10_cb+0x46>
    return TUD_MSC_RET_ERROR;
 8012150:	f04f 30ff 	mov.w	r0, #4294967295
 8012154:	e7f8      	b.n	8012148 <tud_msc_read10_cb+0x48>
  return TUD_MSC_RET_ASYNC;
 8012156:	f06f 0001 	mvn.w	r0, #1
 801215a:	e7f5      	b.n	8012148 <tud_msc_read10_cb+0x48>
 801215c:	200110d4 	.word	0x200110d4

08012160 <tud_msc_is_writable_cb>:
  #ifdef CFG_EXAMPLE_MSC_READONLY
  return false;
  #else
  return true;
  #endif
}
 8012160:	2001      	movs	r0, #1
 8012162:	4770      	bx	lr

08012164 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 8012164:	b530      	push	{r4, r5, lr}
  // out of ramdisk
  if (lba >= DISK_BLOCK_NUM) {
 8012166:	290f      	cmp	r1, #15
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 8012168:	b087      	sub	sp, #28
 801216a:	461c      	mov	r4, r3
 801216c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (lba >= DISK_BLOCK_NUM) {
 801216e:	d821      	bhi.n	80121b4 <tud_msc_write10_cb+0x50>
    return TUD_MSC_RET_ERROR;
  }

  // Check for overflow of offset + bufsize
  if (lba * DISK_BLOCK_SIZE + offset + bufsize > DISK_BLOCK_NUM * DISK_BLOCK_SIZE) {
 8012170:	1953      	adds	r3, r2, r5
 8012172:	eb03 2341 	add.w	r3, r3, r1, lsl #9
 8012176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801217a:	d81b      	bhi.n	80121b4 <tud_msc_write10_cb+0x50>
  (void) buffer;
  return bufsize;
  #endif

  #if CFG_EXAMPLE_MSC_ASYNC_IO
  io_ops_t io_ops = {.is_read = false, .lun = lun, .lba = lba, .offset = offset, .buffer = buffer, .bufsize = bufsize};
 801217c:	2300      	movs	r3, #0
 801217e:	f88d 0004 	strb.w	r0, [sp, #4]

  // Send IO operation to IO task
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 8012182:	480f      	ldr	r0, [pc, #60]	@ (80121c0 <tud_msc_write10_cb+0x5c>)
  io_ops_t io_ops = {.is_read = false, .lun = lun, .lba = lba, .offset = offset, .buffer = buffer, .bufsize = bufsize};
 8012184:	f88d 3005 	strb.w	r3, [sp, #5]
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 8012188:	6800      	ldr	r0, [r0, #0]
  io_ops_t io_ops = {.is_read = false, .lun = lun, .lba = lba, .offset = offset, .buffer = buffer, .bufsize = bufsize};
 801218a:	e9cd 1202 	strd	r1, r2, [sp, #8]
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 801218e:	461a      	mov	r2, r3
 8012190:	a901      	add	r1, sp, #4
  io_ops_t io_ops = {.is_read = false, .lun = lun, .lba = lba, .offset = offset, .buffer = buffer, .bufsize = bufsize};
 8012192:	e9cd 4504 	strd	r4, r5, [sp, #16]
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 8012196:	f7f6 f807 	bl	80081a8 <xQueueGenericSend>
 801219a:	2801      	cmp	r0, #1
 801219c:	d00d      	beq.n	80121ba <tud_msc_write10_cb+0x56>
 801219e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80121a2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80121a6:	07db      	lsls	r3, r3, #31
 80121a8:	d402      	bmi.n	80121b0 <tud_msc_write10_cb+0x4c>
 80121aa:	2000      	movs	r0, #0
  memcpy(addr, buffer, bufsize);
  tusb_time_delay_ms_api(CFG_EXAMPLE_MSC_IO_DELAY_MS);

  return bufsize;
  #endif
}
 80121ac:	b007      	add	sp, #28
 80121ae:	bd30      	pop	{r4, r5, pc}
  TU_ASSERT(xQueueSend(io_queue, &io_ops, 0) == pdPASS);
 80121b0:	be00      	bkpt	0x0000
 80121b2:	e7fa      	b.n	80121aa <tud_msc_write10_cb+0x46>
    return TUD_MSC_RET_ERROR;
 80121b4:	f04f 30ff 	mov.w	r0, #4294967295
 80121b8:	e7f8      	b.n	80121ac <tud_msc_write10_cb+0x48>
  return TUD_MSC_RET_ASYNC;
 80121ba:	f06f 0001 	mvn.w	r0, #1
 80121be:	e7f5      	b.n	80121ac <tud_msc_write10_cb+0x48>
 80121c0:	200110d4 	.word	0x200110d4

080121c4 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize) {
 80121c4:	b508      	push	{r3, lr}
  bool in_xfer = true;

  switch (scsi_cmd[0]) {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 80121c6:	2220      	movs	r2, #32
 80121c8:	2300      	movs	r3, #0
 80121ca:	2105      	movs	r1, #5
 80121cc:	f000 fe34 	bl	8012e38 <tud_msc_set_sense>
      // SCSI output
    }
  }

  return (int32_t) resplen;
}
 80121d0:	f04f 30ff 	mov.w	r0, #4294967295
 80121d4:	bd08      	pop	{r3, pc}
	...

080121d8 <usb_device_task>:
  (void) param;

  // init device stack on configured roothub port
  // This should be called after scheduler/kernel is started.
  // Otherwise it could cause kernel issue since USB IRQ handler does use RTOS queue API.
  tusb_rhport_init_t dev_init = {
 80121d8:	4b0b      	ldr	r3, [pc, #44]	@ (8012208 <usb_device_task+0x30>)
 80121da:	881b      	ldrh	r3, [r3, #0]
{
 80121dc:	b507      	push	{r0, r1, r2, lr}
    .role = TUSB_ROLE_DEVICE,
    .speed = TUSB_SPEED_AUTO
  };
  tusb_init(BOARD_TUD_RHPORT, &dev_init);
 80121de:	2000      	movs	r0, #0
 80121e0:	a901      	add	r1, sp, #4
  tusb_rhport_init_t dev_init = {
 80121e2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tusb_init(BOARD_TUD_RHPORT, &dev_init);
 80121e6:	f003 fa55 	bl	8015694 <tusb_rhport_init>

  if (board_init_after_tusb) {
 80121ea:	4b08      	ldr	r3, [pc, #32]	@ (801220c <usb_device_task+0x34>)
 80121ec:	b10b      	cbz	r3, 80121f2 <usb_device_task+0x1a>
    board_init_after_tusb();
 80121ee:	f3af 8000 	nop.w
  }

  msc_disk_init();
 80121f2:	f7ff ff11 	bl	8012018 <msc_disk_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80121f6:	2100      	movs	r1, #0
 80121f8:	f04f 30ff 	mov.w	r0, #4294967295
 80121fc:	f001 ff40 	bl	8014080 <tud_task_ext>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 8012200:	2000      	movs	r0, #0
 8012202:	f000 fa8b 	bl	801271c <tud_cdc_n_write_flush>
  // RTOS forever loop
  while (1) {
 8012206:	e7f6      	b.n	80121f6 <usb_device_task+0x1e>
 8012208:	0801698c 	.word	0x0801698c
 801220c:	00000000 	.word	0x00000000

08012210 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
void cdc_task(void *params)
{
 8012210:	b570      	push	{r4, r5, r6, lr}

      // Press on-board button to send Uart status notification
      static uint32_t btn_prev = 0;
      static cdc_notify_uart_state_t uart_state = { .value = 0 };
      const uint32_t btn = board_button_read();
      if (!btn_prev && btn) {
 8012212:	4d15      	ldr	r5, [pc, #84]	@ (8012268 <cdc_task+0x58>)
{
 8012214:	b090      	sub	sp, #64	@ 0x40
        uart_state.dsr ^= 1;
 8012216:	4e15      	ldr	r6, [pc, #84]	@ (801226c <cdc_task+0x5c>)
  return tud_cdc_n_available(0);
 8012218:	2000      	movs	r0, #0
 801221a:	f000 fa5b 	bl	80126d4 <tud_cdc_n_available>
      while (tud_cdc_available()) {
 801221e:	b9b8      	cbnz	r0, 8012250 <cdc_task+0x40>
  return tud_cdc_n_write_flush(0);
 8012220:	f000 fa7c 	bl	801271c <tud_cdc_n_write_flush>
      const uint32_t btn = board_button_read();
 8012224:	f000 f9c8 	bl	80125b8 <board_button_read>
 8012228:	4604      	mov	r4, r0
      if (!btn_prev && btn) {
 801222a:	6828      	ldr	r0, [r5, #0]
 801222c:	b958      	cbnz	r0, 8012246 <cdc_task+0x36>
 801222e:	b154      	cbz	r4, 8012246 <cdc_task+0x36>
        uart_state.dsr ^= 1;
 8012230:	7833      	ldrb	r3, [r6, #0]
 return tud_cdc_n_notify_uart_state(0, state);
 8012232:	490e      	ldr	r1, [pc, #56]	@ (801226c <cdc_task+0x5c>)
 8012234:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8012238:	f082 0201 	eor.w	r2, r2, #1
 801223c:	f362 0341 	bfi	r3, r2, #1, #1
 8012240:	7033      	strb	r3, [r6, #0]
 8012242:	f000 fa11 	bl	8012668 <tud_cdc_n_notify_uart_state>
      }
      btn_prev = btn;
    }

    // For ESP32-Sx this delay is essential to allow idle how to run and reset watchdog
    vTaskDelay(1);
 8012246:	2001      	movs	r0, #1
      btn_prev = btn;
 8012248:	602c      	str	r4, [r5, #0]
    vTaskDelay(1);
 801224a:	f7f6 ff15 	bl	8009078 <vTaskDelay>
    {
 801224e:	e7e3      	b.n	8012218 <cdc_task+0x8>
  return tud_cdc_n_read(0, buffer, bufsize);
 8012250:	4669      	mov	r1, sp
 8012252:	2240      	movs	r2, #64	@ 0x40
 8012254:	2000      	movs	r0, #0
 8012256:	f000 fa49 	bl	80126ec <tud_cdc_n_read>
  return tud_cdc_n_write(0, buffer, bufsize);
 801225a:	4669      	mov	r1, sp
  return tud_cdc_n_read(0, buffer, bufsize);
 801225c:	4602      	mov	r2, r0
  return tud_cdc_n_write(0, buffer, bufsize);
 801225e:	2000      	movs	r0, #0
 8012260:	f000 faa0 	bl	80127a4 <tud_cdc_n_write>
 8012264:	e7d8      	b.n	8012218 <cdc_task+0x8>
 8012266:	bf00      	nop
 8012268:	200110e4 	.word	0x200110e4
 801226c:	200110e0 	.word	0x200110e0

08012270 <led_blinking_task>:
  static uint32_t start_ms = 0;
  static bool led_state = false;

  while (1) {
    // Blink every interval ms
    vTaskDelay(blink_interval_ms / portTICK_PERIOD_MS);
 8012270:	4e09      	ldr	r6, [pc, #36]	@ (8012298 <led_blinking_task+0x28>)
    start_ms += blink_interval_ms;
 8012272:	4d0a      	ldr	r5, [pc, #40]	@ (801229c <led_blinking_task+0x2c>)

    board_led_write(led_state);
 8012274:	4c0a      	ldr	r4, [pc, #40]	@ (80122a0 <led_blinking_task+0x30>)
void led_blinking_task(void* param) {
 8012276:	b508      	push	{r3, lr}
    vTaskDelay(blink_interval_ms / portTICK_PERIOD_MS);
 8012278:	6830      	ldr	r0, [r6, #0]
 801227a:	f7f6 fefd 	bl	8009078 <vTaskDelay>
    start_ms += blink_interval_ms;
 801227e:	682b      	ldr	r3, [r5, #0]
 8012280:	6832      	ldr	r2, [r6, #0]
    board_led_write(led_state);
 8012282:	7820      	ldrb	r0, [r4, #0]
    start_ms += blink_interval_ms;
 8012284:	4413      	add	r3, r2
 8012286:	602b      	str	r3, [r5, #0]
    board_led_write(led_state);
 8012288:	f000 f98a 	bl	80125a0 <board_led_write>
    led_state = 1 - led_state; // toggle
 801228c:	7823      	ldrb	r3, [r4, #0]
 801228e:	f083 0301 	eor.w	r3, r3, #1
 8012292:	7023      	strb	r3, [r4, #0]
  while (1) {
 8012294:	e7f0      	b.n	8012278 <led_blinking_task+0x8>
 8012296:	bf00      	nop
 8012298:	2000205c 	.word	0x2000205c
 801229c:	200110dc 	.word	0x200110dc
 80122a0:	200110d8 	.word	0x200110d8

080122a4 <usb_main>:
{
 80122a4:	b513      	push	{r0, r1, r4, lr}
  board_init();
 80122a6:	f000 f90f 	bl	80124c8 <board_init>
  xTaskCreate(led_blinking_task, "blinky", BLINKY_STACK_SIZE, NULL, 1, NULL);
 80122aa:	2400      	movs	r4, #0
 80122ac:	2301      	movs	r3, #1
 80122ae:	2280      	movs	r2, #128	@ 0x80
 80122b0:	490d      	ldr	r1, [pc, #52]	@ (80122e8 <usb_main+0x44>)
 80122b2:	480e      	ldr	r0, [pc, #56]	@ (80122ec <usb_main+0x48>)
 80122b4:	e9cd 3400 	strd	r3, r4, [sp]
 80122b8:	4623      	mov	r3, r4
 80122ba:	f7f6 fbe5 	bl	8008a88 <xTaskCreate>
  xTaskCreate(usb_device_task, "usbd", USBD_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, NULL);
 80122be:	2304      	movs	r3, #4
 80122c0:	22c0      	movs	r2, #192	@ 0xc0
 80122c2:	490b      	ldr	r1, [pc, #44]	@ (80122f0 <usb_main+0x4c>)
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	4623      	mov	r3, r4
 80122c8:	9401      	str	r4, [sp, #4]
 80122ca:	480a      	ldr	r0, [pc, #40]	@ (80122f4 <usb_main+0x50>)
 80122cc:	f7f6 fbdc 	bl	8008a88 <xTaskCreate>
  xTaskCreate(cdc_task, "cdc", CDC_STACK_SIZE, NULL, configMAX_PRIORITIES - 2, NULL);
 80122d0:	2303      	movs	r3, #3
 80122d2:	2280      	movs	r2, #128	@ 0x80
 80122d4:	4908      	ldr	r1, [pc, #32]	@ (80122f8 <usb_main+0x54>)
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	4623      	mov	r3, r4
 80122da:	9401      	str	r4, [sp, #4]
 80122dc:	4807      	ldr	r0, [pc, #28]	@ (80122fc <usb_main+0x58>)
 80122de:	f7f6 fbd3 	bl	8008a88 <xTaskCreate>
}
 80122e2:	b002      	add	sp, #8
 80122e4:	bd10      	pop	{r4, pc}
 80122e6:	bf00      	nop
 80122e8:	08018e48 	.word	0x08018e48
 80122ec:	08012271 	.word	0x08012271
 80122f0:	08018e4f 	.word	0x08018e4f
 80122f4:	080121d9 	.word	0x080121d9
 80122f8:	08018e54 	.word	0x08018e54
 80122fc:	08012211 	.word	0x08012211

08012300 <tud_mount_cb>:
  blink_interval_ms = BLINK_MOUNTED;
 8012300:	4b02      	ldr	r3, [pc, #8]	@ (801230c <tud_mount_cb+0xc>)
 8012302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012306:	601a      	str	r2, [r3, #0]
}
 8012308:	4770      	bx	lr
 801230a:	bf00      	nop
 801230c:	2000205c 	.word	0x2000205c

08012310 <tud_umount_cb>:
  blink_interval_ms = BLINK_NOT_MOUNTED;
 8012310:	4b01      	ldr	r3, [pc, #4]	@ (8012318 <tud_umount_cb+0x8>)
 8012312:	22fa      	movs	r2, #250	@ 0xfa
 8012314:	601a      	str	r2, [r3, #0]
}
 8012316:	4770      	bx	lr
 8012318:	2000205c 	.word	0x2000205c

0801231c <tud_suspend_cb>:
  blink_interval_ms = BLINK_SUSPENDED;
 801231c:	4b02      	ldr	r3, [pc, #8]	@ (8012328 <tud_suspend_cb+0xc>)
 801231e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8012322:	601a      	str	r2, [r3, #0]
}
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop
 8012328:	2000205c 	.word	0x2000205c

0801232c <tud_resume_cb>:
{
 801232c:	b508      	push	{r3, lr}
  blink_interval_ms = tud_mounted() ? BLINK_MOUNTED : BLINK_NOT_MOUNTED;
 801232e:	f001 fb81 	bl	8013a34 <tud_mounted>
 8012332:	2800      	cmp	r0, #0
 8012334:	4b03      	ldr	r3, [pc, #12]	@ (8012344 <tud_resume_cb+0x18>)
 8012336:	bf0c      	ite	eq
 8012338:	22fa      	moveq	r2, #250	@ 0xfa
 801233a:	f44f 727a 	movne.w	r2, #1000	@ 0x3e8
 801233e:	601a      	str	r2, [r3, #0]
}
 8012340:	bd08      	pop	{r3, pc}
 8012342:	bf00      	nop
 8012344:	2000205c 	.word	0x2000205c

08012348 <tud_cdc_line_state_cb>:
}
 8012348:	4770      	bx	lr

0801234a <tud_cdc_rx_cb>:
}
 801234a:	4770      	bx	lr

0801234c <tud_descriptor_device_cb>:

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
  return (uint8_t const *) &desc_device;
}
 801234c:	4800      	ldr	r0, [pc, #0]	@ (8012350 <tud_descriptor_device_cb+0x4>)
 801234e:	4770      	bx	lr
 8012350:	0808f96c 	.word	0x0808f96c

08012354 <tud_descriptor_configuration_cb>:
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
#endif
}
 8012354:	4800      	ldr	r0, [pc, #0]	@ (8012358 <tud_descriptor_configuration_cb+0x4>)
 8012356:	4770      	bx	lr
 8012358:	0808f90a 	.word	0x0808f90a

0801235c <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 801235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012360:	b088      	sub	sp, #32
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 8012362:	b1b8      	cbz	r0, 8012394 <tud_descriptor_string_cb+0x38>
 8012364:	2803      	cmp	r0, #3
 8012366:	d024      	beq.n	80123b2 <tud_descriptor_string_cb+0x56>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) { return NULL; }
 8012368:	2805      	cmp	r0, #5
 801236a:	d86a      	bhi.n	8012442 <tud_descriptor_string_cb+0xe6>

      const char *str = string_desc_arr[index];
 801236c:	4b36      	ldr	r3, [pc, #216]	@ (8012448 <tud_descriptor_string_cb+0xec>)
 801236e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]

      // Cap at max char
      chr_count = strlen(str);
 8012372:	4620      	mov	r0, r4
 8012374:	f7ed ff64 	bl	8000240 <strlen>
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
      if ( chr_count > max_count ) { chr_count = max_count; }
 8012378:	2820      	cmp	r0, #32
 801237a:	4603      	mov	r3, r0
 801237c:	4a33      	ldr	r2, [pc, #204]	@ (801244c <tud_descriptor_string_cb+0xf0>)
 801237e:	bf28      	it	cs
 8012380:	2320      	movcs	r3, #32

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8012382:	4620      	mov	r0, r4
 8012384:	18e1      	adds	r1, r4, r3
 8012386:	4281      	cmp	r1, r0
 8012388:	d00a      	beq.n	80123a0 <tud_descriptor_string_cb+0x44>
        _desc_str[1 + i] = str[i];
 801238a:	f810 4b01 	ldrb.w	r4, [r0], #1
 801238e:	f822 4f02 	strh.w	r4, [r2, #2]!
      for ( size_t i = 0; i < chr_count; i++ ) {
 8012392:	e7f8      	b.n	8012386 <tud_descriptor_string_cb+0x2a>
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8012394:	4b2c      	ldr	r3, [pc, #176]	@ (8012448 <tud_descriptor_string_cb+0xec>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	881a      	ldrh	r2, [r3, #0]
 801239a:	4b2c      	ldr	r3, [pc, #176]	@ (801244c <tud_descriptor_string_cb+0xf0>)
 801239c:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 801239e:	2301      	movs	r3, #1
      }
      break;
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 80123a0:	3301      	adds	r3, #1
 80123a2:	482a      	ldr	r0, [pc, #168]	@ (801244c <tud_descriptor_string_cb+0xf0>)
 80123a4:	005b      	lsls	r3, r3, #1
 80123a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80123aa:	8003      	strh	r3, [r0, #0]
  return _desc_str;
}
 80123ac:	b008      	add	sp, #32
 80123ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static inline size_t board_usb_get_serial(uint16_t desc_str1[], size_t max_chars) {
  uint8_t uid[16] TU_ATTR_ALIGNED(4);
  size_t uid_len;

  // TODO work with make, but not working with esp32s3 cmake
  if ( board_get_unique_id ) {
 80123b2:	4b27      	ldr	r3, [pc, #156]	@ (8012450 <tud_descriptor_string_cb+0xf4>)
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d03b      	beq.n	8012430 <tud_descriptor_string_cb+0xd4>
    uid_len = board_get_unique_id(uid, sizeof(uid));
 80123b8:	2110      	movs	r1, #16
 80123ba:	4668      	mov	r0, sp
 80123bc:	f000 f904 	bl	80125c8 <board_get_unique_id>
 80123c0:	4603      	mov	r3, r0
    uid32[0] = 0x67452301;
    uid32[1] = 0xEFCDAB89;
    uid_len = 8;
  }

  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 80123c2:	2b10      	cmp	r3, #16
 80123c4:	466c      	mov	r4, sp
 80123c6:	4e21      	ldr	r6, [pc, #132]	@ (801244c <tud_descriptor_string_cb+0xf0>)

  for ( size_t i = 0; i < uid_len; i++ ) {
 80123c8:	f04f 0e00 	mov.w	lr, #0
  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 80123cc:	bf28      	it	cs
 80123ce:	2310      	movcs	r3, #16
  for ( size_t i = 0; i < uid_len; i++ ) {
 80123d0:	4573      	cmp	r3, lr
 80123d2:	d034      	beq.n	801243e <tud_descriptor_string_cb+0xe2>
    for ( size_t j = 0; j < 2; j++ ) {
      const char nibble_to_hex[16] = {
 80123d4:	4a1f      	ldr	r2, [pc, #124]	@ (8012454 <tud_descriptor_string_cb+0xf8>)
 80123d6:	af04      	add	r7, sp, #16
 80123d8:	f102 0810 	add.w	r8, r2, #16
 80123dc:	463d      	mov	r5, r7
 80123de:	6810      	ldr	r0, [r2, #0]
 80123e0:	3208      	adds	r2, #8
 80123e2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80123e6:	46bc      	mov	ip, r7
 80123e8:	4542      	cmp	r2, r8
 80123ea:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80123ee:	4667      	mov	r7, ip
 80123f0:	d1f5      	bne.n	80123de <tud_descriptor_string_cb+0x82>
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
      };
      uint8_t const nibble = (uid[i] >> (j * 4)) & 0xf;
 80123f2:	f814 7b01 	ldrb.w	r7, [r4], #1
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 80123f6:	f007 020f 	and.w	r2, r7, #15
 80123fa:	3220      	adds	r2, #32
 80123fc:	446a      	add	r2, sp
 80123fe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012402:	80b2      	strh	r2, [r6, #4]
      const char nibble_to_hex[16] = {
 8012404:	4a13      	ldr	r2, [pc, #76]	@ (8012454 <tud_descriptor_string_cb+0xf8>)
 8012406:	6810      	ldr	r0, [r2, #0]
 8012408:	3208      	adds	r2, #8
 801240a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801240e:	46ac      	mov	ip, r5
 8012410:	4542      	cmp	r2, r8
 8012412:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012416:	4665      	mov	r5, ip
 8012418:	d1f5      	bne.n	8012406 <tud_descriptor_string_cb+0xaa>
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 801241a:	aa08      	add	r2, sp, #32
  for ( size_t i = 0; i < uid_len; i++ ) {
 801241c:	f10e 0e01 	add.w	lr, lr, #1
 8012420:	3604      	adds	r6, #4
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8012422:	eb02 1717 	add.w	r7, r2, r7, lsr #4
 8012426:	f817 2c10 	ldrb.w	r2, [r7, #-16]
 801242a:	f826 2c02 	strh.w	r2, [r6, #-2]
  for ( size_t i = 0; i < uid_len; i++ ) {
 801242e:	e7cf      	b.n	80123d0 <tud_descriptor_string_cb+0x74>
    uid32[0] = 0x67452301;
 8012430:	4b09      	ldr	r3, [pc, #36]	@ (8012458 <tud_descriptor_string_cb+0xfc>)
 8012432:	9300      	str	r3, [sp, #0]
    uid32[1] = 0xEFCDAB89;
 8012434:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8012438:	9301      	str	r3, [sp, #4]
    uid_len = 8;
 801243a:	2308      	movs	r3, #8
 801243c:	e7c1      	b.n	80123c2 <tud_descriptor_string_cb+0x66>
    }
  }

  return 2 * uid_len;
 801243e:	005b      	lsls	r3, r3, #1
      break;
 8012440:	e7ae      	b.n	80123a0 <tud_descriptor_string_cb+0x44>
      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) { return NULL; }
 8012442:	2000      	movs	r0, #0
 8012444:	e7b2      	b.n	80123ac <tud_descriptor_string_cb+0x50>
 8012446:	bf00      	nop
 8012448:	20002060 	.word	0x20002060
 801244c:	200110e8 	.word	0x200110e8
 8012450:	080125c9 	.word	0x080125c9
 8012454:	08018e58 	.word	0x08018e58
 8012458:	67452301 	.word	0x67452301

0801245c <_read>:
int sys_write (int fhdl, const char *buf, size_t count) {
  (void) fhdl;
  return board_uart_write(buf, (int) count);
}
*/
int sys_read (int fhdl, char *buf, size_t count) {
 801245c:	4608      	mov	r0, r1
  (void) fhdl;
  int rd = board_uart_read((uint8_t*) buf, (int) count);
 801245e:	4611      	mov	r1, r2
int sys_read (int fhdl, char *buf, size_t count) {
 8012460:	b508      	push	{r3, lr}
  int rd = board_uart_read((uint8_t*) buf, (int) count);
 8012462:	f000 f8bf 	bl	80125e4 <board_uart_read>
  return (rd > 0) ? rd : -1;
 8012466:	2800      	cmp	r0, #0
}
 8012468:	bfd8      	it	le
 801246a:	f04f 30ff 	movle.w	r0, #4294967295
 801246e:	bd08      	pop	{r3, pc}

08012470 <vApplicationMallocFailedHook>:
 8012470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012474:	b672      	cpsid	i
 8012476:	f383 8811 	msr	BASEPRI, r3
 801247a:	f3bf 8f6f 	isb	sy
 801247e:	f3bf 8f4f 	dsb	sy
 8012482:	b662      	cpsie	i
#include "FreeRTOS.h"
#include "task.h"

void vApplicationMallocFailedHook(void) {
  taskDISABLE_INTERRUPTS();
  TU_ASSERT(false, );
 8012484:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012488:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 801248c:	07db      	lsls	r3, r3, #31
 801248e:	d500      	bpl.n	8012492 <vApplicationMallocFailedHook+0x22>
 8012490:	be00      	bkpt	0x0000
}
 8012492:	4770      	bx	lr

08012494 <vApplicationStackOverflowHook>:
 8012494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012498:	b672      	cpsid	i
 801249a:	f383 8811 	msr	BASEPRI, r3
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	b662      	cpsie	i
void vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName) {
  (void) pxTask;
  (void) pcTaskName;

  taskDISABLE_INTERRUPTS();
  TU_ASSERT(false, );
 80124a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80124ac:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80124b0:	07db      	lsls	r3, r3, #31
 80124b2:	d500      	bpl.n	80124b6 <vApplicationStackOverflowHook+0x22>
 80124b4:	be00      	bkpt	0x0000
}
 80124b6:	4770      	bx	lr

080124b8 <OTG_FS_IRQHandler>:

//--------------------------------------------------------------------+
// Forward USB interrupt events to TinyUSB IRQ Handler
//--------------------------------------------------------------------+
void OTG_FS_IRQHandler(void) {
  tusb_int_handler(0, true);
 80124b8:	2101      	movs	r1, #1
 80124ba:	2000      	movs	r0, #0
 80124bc:	f003 b906 	b.w	80156cc <tusb_int_handler>

080124c0 <OTG_HS_IRQHandler>:
}

// Despite being call USB2_OTG
// OTG_HS is marked as RHPort1 by TinyUSB to be consistent across stm32 port
void OTG_HS_IRQHandler(void) {
  tusb_int_handler(1, true);
 80124c0:	2101      	movs	r1, #1
 80124c2:	4608      	mov	r0, r1
 80124c4:	f003 b902 	b.w	80156cc <tusb_int_handler>

080124c8 <board_init>:
  // 1ms tick timer
  SysTick_Config(SystemCoreClock / 1000);

#elif CFG_TUSB_OS == OPT_OS_FREERTOS
  // Explicitly disable systick to prevent its ISR runs before scheduler start
  SysTick->CTRL &= ~1U;
 80124c8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
{
 80124cc:	b508      	push	{r3, lr}
  SysTick->CTRL &= ~1U;
 80124ce:	6913      	ldr	r3, [r2, #16]
 80124d0:	f023 0301 	bic.w	r3, r3, #1
 80124d4:	6113      	str	r3, [r2, #16]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80124d6:	2250      	movs	r2, #80	@ 0x50
 80124d8:	4b2e      	ldr	r3, [pc, #184]	@ (8012594 <board_init+0xcc>)
 80124da:	f883 2343 	strb.w	r2, [r3, #835]	@ 0x343
#endif

#ifdef UART_DEV
  HAL_UART_Init(&UartHandle);
#endif
  MX_USART2_UART_Init();
 80124de:	f7ee fadf 	bl	8000aa0 <MX_USART2_UART_Init>
  PA12   ------> USB_DP D+   OTG_FS_DP
  PG6    ------> USB_PowerSwitchOn
  PG7    ------> USB_OverCurrent
  */
  //Enables the clock for GPIOA
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 80124e2:	4a2d      	ldr	r2, [pc, #180]	@ (8012598 <board_init+0xd0>)
 80124e4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80124e6:	f043 0301 	orr.w	r3, r3, #1
 80124ea:	6313      	str	r3, [r2, #48]	@ 0x30
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOGEN);
 80124ec:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80124ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124f2:	6313      	str	r3, [r2, #48]	@ 0x30

  //------------- rhport0: OTG_FS -------------//
  //Configures USB pins (in GPIOA) to work in alternate function mode.
  //Sets alternate function 10 for : PA11 (-) otg_fs_dm , and PA12 (+) otg_fs_dp.
  GPIOA->MODER &= ~((0x3 << 24) | (0x3 << 22));
 80124f4:	4b29      	ldr	r3, [pc, #164]	@ (801259c <board_init+0xd4>)
 80124f6:	6819      	ldr	r1, [r3, #0]
 80124f8:	f021 7170 	bic.w	r1, r1, #62914560	@ 0x3c00000
 80124fc:	6019      	str	r1, [r3, #0]
  GPIOA->MODER |= ((0x2 << 24) | (0x2 << 22)); //复用功能模式
 80124fe:	6819      	ldr	r1, [r3, #0]
 8012500:	f041 7120 	orr.w	r1, r1, #41943040	@ 0x2800000
 8012504:	6019      	str	r1, [r3, #0]
  GPIOA->AFR[1] &= 0xfff00fff;
 8012506:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012508:	f421 217f 	bic.w	r1, r1, #1044480	@ 0xff000
 801250c:	6259      	str	r1, [r3, #36]	@ 0x24
  GPIOA->AFR[1] |= 0x000aa000;  //AFR12[3:0] = AFR11[3:0] = af10(0xa)
 801250e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012510:	f441 212a 	orr.w	r1, r1, #696320	@ 0xaa000
 8012514:	6259      	str	r1, [r3, #36]	@ 0x24
  GPIOA->OTYPER &= ~((0x1 << 12) | (0x1 << 11)); // 复位状态 推挽输出
 8012516:	6859      	ldr	r1, [r3, #4]
 8012518:	f421 51c0 	bic.w	r1, r1, #6144	@ 0x1800
 801251c:	6059      	str	r1, [r3, #4]
  GPIOA->OSPEEDR |= ((0x3 << 24) | (0x3 << 22)); // IO速度 高速
 801251e:	6899      	ldr	r1, [r3, #8]
 8012520:	f041 7170 	orr.w	r1, r1, #62914560	@ 0x3c00000
 8012524:	6099      	str	r1, [r3, #8]
  GPIOA->PUPDR &= ~((0x3 << 24) | (0x3 << 22)); // 无上下拉
 8012526:	68d9      	ldr	r1, [r3, #12]
 8012528:	f021 7170 	bic.w	r1, r1, #62914560	@ 0x3c00000
 801252c:	60d9      	str	r1, [r3, #12]
  //GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  //GPIO_InitStruct.Pull = GPIO_PULLUP;
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  /* This for ID line debug  PA10 (id) otg_fs_id*/
  GPIOA->MODER &= 0xffcfffff;
 801252e:	6819      	ldr	r1, [r3, #0]
 8012530:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8012534:	6019      	str	r1, [r3, #0]
  GPIOA->MODER |= 0x00200000;  //复用功能
 8012536:	6819      	ldr	r1, [r3, #0]
 8012538:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 801253c:	6019      	str	r1, [r3, #0]
  GPIOA->AFR[1] &= 0xfffff0ff;
 801253e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012540:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8012544:	6259      	str	r1, [r3, #36]	@ 0x24
  GPIOA->AFR[1] |= 0x00000a00;  //AFR10[3:0] = af10(0xa)
 8012546:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012548:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
 801254c:	6259      	str	r1, [r3, #36]	@ 0x24
  GPIOA->OTYPER |= (0x1 << 10); // 开漏输出类型
 801254e:	6859      	ldr	r1, [r3, #4]
 8012550:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8012554:	6059      	str	r1, [r3, #4]
  GPIOA->OSPEEDR |= (0x3 << 20); // IO速度 高速
 8012556:	6899      	ldr	r1, [r3, #8]
 8012558:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801255c:	6099      	str	r1, [r3, #8]
  GPIOA->PUPDR &= ~(0x3 << 20);
 801255e:	68d9      	ldr	r1, [r3, #12]
 8012560:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8012564:	60d9      	str	r1, [r3, #12]
  GPIOA->PUPDR |= ~(0x1 << 20); //上拉
 8012566:	68d9      	ldr	r1, [r3, #12]
 8012568:	f461 1180 	orn	r1, r1, #1048576	@ 0x100000
 801256c:	60d9      	str	r1, [r3, #12]
#pragma GCC diagnostic ignored "-Wshadow"
#endif

  /* Enable USB FS Clocks */
  //__HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;
 801256e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8012570:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012574:	6351      	str	r1, [r2, #52]	@ 0x34
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8012576:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8012578:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801257c:	6451      	str	r1, [r2, #68]	@ 0x44
  /* Configure VBUS Pin */
  //GPIO_InitStruct.Pin = GPIO_PIN_9;
  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  //GPIO_InitStruct.Pull = GPIO_NOPULL;
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  GPIOA->MODER &= 0xfff3ffff;  //输入模式
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8012584:	601a      	str	r2, [r3, #0]

  // Enable VBUS sense (B device) via pin PA9
  USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012586:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801258a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801258c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012590:	6393      	str	r3, [r2, #56]	@ 0x38
  USB_OTG_FS->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
  USB_OTG_FS->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
#endif // vbus sense


}
 8012592:	bd08      	pop	{r3, pc}
 8012594:	e000e100 	.word	0xe000e100
 8012598:	40023800 	.word	0x40023800
 801259c:	40020000 	.word	0x40020000

080125a0 <board_led_write>:
//--------------------------------------------------------------------+

void board_led_write(bool state)
{
#ifdef PINID_LED
  if(state != 0)
 80125a0:	4b04      	ldr	r3, [pc, #16]	@ (80125b4 <board_led_write+0x14>)
 80125a2:	b118      	cbz	r0, 80125ac <board_led_write+0xc>
  {
    GPIOB->BSRR = (0x1UL << 14);
 80125a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  }else{
    GPIOB->BSRR = ((0x1UL << 14) << 16);
 80125a8:	619a      	str	r2, [r3, #24]
  }
#else
  (void) state;
#endif
}
 80125aa:	4770      	bx	lr
    GPIOB->BSRR = ((0x1UL << 14) << 16);
 80125ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80125b0:	e7fa      	b.n	80125a8 <board_led_write+0x8>
 80125b2:	bf00      	nop
 80125b4:	40020400 	.word	0x40020400

080125b8 <board_button_read>:

uint32_t board_button_read(void)
{
#ifdef PINID_BUTTON
  uint32_t ret;
  ret = GPIOC->IDR & (0x1UL << 13U);
 80125b8:	4b02      	ldr	r3, [pc, #8]	@ (80125c4 <board_button_read+0xc>)
 80125ba:	6918      	ldr	r0, [r3, #16]
  ret = (ret >> 13);
  return ret;
#else
  return 0;
#endif
}
 80125bc:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	40020800 	.word	0x40020800

080125c8 <board_get_unique_id>:
  (void) max_len;
  volatile uint32_t * stm32_uuid = (volatile uint32_t *) UID_BASE;
  uint32_t* id32 = (uint32_t*) (uintptr_t) id;
  uint8_t const len = 12;

  id32[0] = stm32_uuid[0];
 80125c8:	4b05      	ldr	r3, [pc, #20]	@ (80125e0 <board_get_unique_id+0x18>)
 80125ca:	f8d3 2420 	ldr.w	r2, [r3, #1056]	@ 0x420
 80125ce:	6002      	str	r2, [r0, #0]
  id32[1] = stm32_uuid[1];
 80125d0:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 80125d4:	6042      	str	r2, [r0, #4]
  id32[2] = stm32_uuid[2];
 80125d6:	f8d3 3428 	ldr.w	r3, [r3, #1064]	@ 0x428
 80125da:	6083      	str	r3, [r0, #8]

  return len;
}
 80125dc:	200c      	movs	r0, #12
 80125de:	4770      	bx	lr
 80125e0:	1ff0f000 	.word	0x1ff0f000

080125e4 <board_uart_read>:
int board_uart_read(uint8_t *buf, int len)
{
  (void) buf;
  (void) len;
  return 0;
}
 80125e4:	2000      	movs	r0, #0
 80125e6:	4770      	bx	lr

080125e8 <_prep_out_transaction.isra.0>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 80125e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125ec:	4604      	mov	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 80125ee:	f001 fa21 	bl	8013a34 <tud_mounted>
 80125f2:	b390      	cbz	r0, 801265a <_prep_out_transaction.isra.0+0x72>
 80125f4:	f001 fa26 	bl	8013a44 <tud_suspended>
 80125f8:	4607      	mov	r7, r0
 80125fa:	bb70      	cbnz	r0, 801265a <_prep_out_transaction.isra.0+0x72>
  const uint8_t rhport = 0;
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 80125fc:	25bc      	movs	r5, #188	@ 0xbc
 80125fe:	4e18      	ldr	r6, [pc, #96]	@ (8012660 <_prep_out_transaction.isra.0+0x78>)
 8012600:	fb05 f804 	mul.w	r8, r5, r4
 8012604:	eb06 0908 	add.w	r9, r6, r8
 8012608:	f899 3003 	ldrb.w	r3, [r9, #3]
 801260c:	b32b      	cbz	r3, 801265a <_prep_out_transaction.isra.0+0x72>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 801260e:	464d      	mov	r5, r9
 8012610:	3510      	adds	r5, #16
 8012612:	4628      	mov	r0, r5
 8012614:	f001 f944 	bl	80138a0 <tu_fifo_remaining>

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8012618:	283f      	cmp	r0, #63	@ 0x3f
 801261a:	d91e      	bls.n	801265a <_prep_out_transaction.isra.0+0x72>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(p_cdc->rhport, p_cdc->ep_out));
 801261c:	f899 1003 	ldrb.w	r1, [r9, #3]
 8012620:	f816 0008 	ldrb.w	r0, [r6, r8]
 8012624:	f001 fc86 	bl	8013f34 <usbd_edpt_claim>
 8012628:	b1b8      	cbz	r0, 801265a <_prep_out_transaction.isra.0+0x72>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 801262a:	4628      	mov	r0, r5
 801262c:	f001 f938 	bl	80138a0 <tu_fifo_remaining>

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8012630:	283f      	cmp	r0, #63	@ 0x3f
 8012632:	f899 1003 	ldrb.w	r1, [r9, #3]
 8012636:	d90a      	bls.n	801264e <_prep_out_transaction.isra.0+0x66>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8012638:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 801263c:	4a09      	ldr	r2, [pc, #36]	@ (8012664 <_prep_out_transaction.isra.0+0x7c>)
 801263e:	4638      	mov	r0, r7
 8012640:	2340      	movs	r3, #64	@ 0x40
 8012642:	eb02 1204 	add.w	r2, r2, r4, lsl #4
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_out);
    return false;
  }
}
 8012646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 801264a:	f001 bc93 	b.w	8013f74 <usbd_edpt_xfer>
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_out);
 801264e:	f816 0008 	ldrb.w	r0, [r6, r8]
}
 8012652:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_out);
 8012656:	f001 bc7d 	b.w	8013f54 <usbd_edpt_release>
}
 801265a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801265e:	bf00      	nop
 8012660:	200111bc 	.word	0x200111bc
 8012664:	2001112c 	.word	0x2001112c

08012668 <tud_cdc_n_notify_uart_state>:
void tud_cdc_n_get_line_coding(uint8_t itf, cdc_line_coding_t* coding) {
  (*coding) = _cdcd_itf[itf].line_coding;
}

#if CFG_TUD_CDC_NOTIFY
bool tud_cdc_n_notify_uart_state (uint8_t itf, const cdc_notify_uart_state_t *state) {
 8012668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266c:	4605      	mov	r5, r0
 801266e:	4688      	mov	r8, r1
 8012670:	f001 f9e0 	bl	8013a34 <tud_mounted>
 8012674:	b338      	cbz	r0, 80126c6 <tud_cdc_n_notify_uart_state+0x5e>
 8012676:	f001 f9e5 	bl	8013a44 <tud_suspended>
 801267a:	bb20      	cbnz	r0, 80126c6 <tud_cdc_n_notify_uart_state+0x5e>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
  TU_VERIFY(tud_ready() && p_cdc->ep_notify != 0);
 801267c:	24bc      	movs	r4, #188	@ 0xbc
 801267e:	4e13      	ldr	r6, [pc, #76]	@ (80126cc <tud_cdc_n_notify_uart_state+0x64>)
 8012680:	436c      	muls	r4, r5
 8012682:	1937      	adds	r7, r6, r4
 8012684:	7939      	ldrb	r1, [r7, #4]
 8012686:	b1f1      	cbz	r1, 80126c6 <tud_cdc_n_notify_uart_state+0x5e>
  TU_VERIFY(usbd_edpt_claim(p_cdc->rhport, p_cdc->ep_notify));
 8012688:	5d30      	ldrb	r0, [r6, r4]
 801268a:	f001 fc53 	bl	8013f34 <usbd_edpt_claim>
 801268e:	b1d0      	cbz	r0, 80126c6 <tud_cdc_n_notify_uart_state+0x5e>

  cdc_notify_msg_t* notify_msg = &p_epbuf->epnotify;
  notify_msg->request.bmRequestType = CDC_REQ_TYPE_NOTIF;
 8012690:	2190      	movs	r1, #144	@ 0x90
 8012692:	4a0f      	ldr	r2, [pc, #60]	@ (80126d0 <tud_cdc_n_notify_uart_state+0x68>)
 8012694:	f242 00a1 	movw	r0, #8353	@ 0x20a1
 8012698:	fb01 2305 	mla	r3, r1, r5, r2
  notify_msg->request.wValue = 0;
  notify_msg->request.wIndex = p_cdc->itf_num;
  notify_msg->request.wLength = sizeof(cdc_notify_uart_state_t);
  notify_msg->serial_state = *state;

  return usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_notify, (uint8_t *)notify_msg, 8 + sizeof(cdc_notify_uart_state_t));
 801269c:	7939      	ldrb	r1, [r7, #4]
  notify_msg->request.bmRequestType = CDC_REQ_TYPE_NOTIF;
 801269e:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  cdc_notify_msg_t* notify_msg = &p_epbuf->epnotify;
 80126a2:	461a      	mov	r2, r3
  notify_msg->request.wIndex = p_cdc->itf_num;
 80126a4:	7878      	ldrb	r0, [r7, #1]
  return usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_notify, (uint8_t *)notify_msg, 8 + sizeof(cdc_notify_uart_state_t));
 80126a6:	3280      	adds	r2, #128	@ 0x80
  notify_msg->request.wIndex = p_cdc->itf_num;
 80126a8:	f8a3 0084 	strh.w	r0, [r3, #132]	@ 0x84
  notify_msg->request.wLength = sizeof(cdc_notify_uart_state_t);
 80126ac:	2002      	movs	r0, #2
 80126ae:	f8a3 0086 	strh.w	r0, [r3, #134]	@ 0x86
  notify_msg->serial_state = *state;
 80126b2:	f8b8 0000 	ldrh.w	r0, [r8]
 80126b6:	f8a3 0088 	strh.w	r0, [r3, #136]	@ 0x88
  return usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_notify, (uint8_t *)notify_msg, 8 + sizeof(cdc_notify_uart_state_t));
 80126ba:	230a      	movs	r3, #10
 80126bc:	5d30      	ldrb	r0, [r6, r4]
}
 80126be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_notify, (uint8_t *)notify_msg, 8 + sizeof(cdc_notify_uart_state_t));
 80126c2:	f001 bc57 	b.w	8013f74 <usbd_edpt_xfer>
}
 80126c6:	2000      	movs	r0, #0
 80126c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126cc:	200111bc 	.word	0x200111bc
 80126d0:	2001112c 	.word	0x2001112c

080126d4 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80126d4:	22bc      	movs	r2, #188	@ 0xbc
uint32_t tud_cdc_n_available(uint8_t itf) {
 80126d6:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80126d8:	2310      	movs	r3, #16
 80126da:	fb02 3300 	mla	r3, r2, r0, r3
 80126de:	4802      	ldr	r0, [pc, #8]	@ (80126e8 <tud_cdc_n_available+0x14>)
 80126e0:	4418      	add	r0, r3
 80126e2:	f001 f8c4 	bl	801386e <tu_fifo_count>
}
 80126e6:	bd08      	pop	{r3, pc}
 80126e8:	200111bc 	.word	0x200111bc

080126ec <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 80126ec:	b538      	push	{r3, r4, r5, lr}
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80126ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 80126f2:	4604      	mov	r4, r0
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80126f4:	2010      	movs	r0, #16
 80126f6:	429a      	cmp	r2, r3
 80126f8:	bf28      	it	cs
 80126fa:	461a      	movcs	r2, r3
 80126fc:	23bc      	movs	r3, #188	@ 0xbc
 80126fe:	fb13 0304 	smlabb	r3, r3, r4, r0
 8012702:	4805      	ldr	r0, [pc, #20]	@ (8012718 <tud_cdc_n_read+0x2c>)
 8012704:	b292      	uxth	r2, r2
 8012706:	4418      	add	r0, r3
 8012708:	f001 f8dc 	bl	80138c4 <tu_fifo_read_n>
 801270c:	4605      	mov	r5, r0
  _prep_out_transaction(itf);
 801270e:	4620      	mov	r0, r4
 8012710:	f7ff ff6a 	bl	80125e8 <_prep_out_transaction.isra.0>
  return num_read;
}
 8012714:	4628      	mov	r0, r5
 8012716:	bd38      	pop	{r3, r4, r5, pc}
 8012718:	200111bc 	.word	0x200111bc

0801271c <tud_cdc_n_write_flush>:
  }

  return wr_count;
}

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 801271c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012720:	4681      	mov	r9, r0
 8012722:	f001 f987 	bl	8013a34 <tud_mounted>
 8012726:	b388      	cbz	r0, 801278c <tud_cdc_n_write_flush+0x70>
 8012728:	f001 f98c 	bl	8013a44 <tud_suspended>
 801272c:	bb70      	cbnz	r0, 801278c <tud_cdc_n_write_flush+0x70>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
  TU_VERIFY(tud_ready(), 0); // Skip if usb is not ready yet

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 801272e:	26bc      	movs	r6, #188	@ 0xbc
 8012730:	2424      	movs	r4, #36	@ 0x24
 8012732:	4f1a      	ldr	r7, [pc, #104]	@ (801279c <tud_cdc_n_write_flush+0x80>)
 8012734:	fb16 4409 	smlabb	r4, r6, r9, r4
 8012738:	443c      	add	r4, r7
 801273a:	4620      	mov	r0, r4
 801273c:	f001 f897 	bl	801386e <tu_fifo_count>
 8012740:	b320      	cbz	r0, 801278c <tud_cdc_n_write_flush+0x70>
    return 0;
  }

  TU_VERIFY(usbd_edpt_claim(p_cdc->rhport, p_cdc->ep_in), 0); // Claim the endpoint
 8012742:	fb06 f609 	mul.w	r6, r6, r9
 8012746:	eb07 0806 	add.w	r8, r7, r6
 801274a:	5db8      	ldrb	r0, [r7, r6]
 801274c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012750:	f001 fbf0 	bl	8013f34 <usbd_edpt_claim>
 8012754:	b1d0      	cbz	r0, 801278c <tud_cdc_n_write_flush+0x70>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8012756:	2240      	movs	r2, #64	@ 0x40
 8012758:	2590      	movs	r5, #144	@ 0x90
 801275a:	4b11      	ldr	r3, [pc, #68]	@ (80127a0 <tud_cdc_n_write_flush+0x84>)
 801275c:	4620      	mov	r0, r4
 801275e:	fb15 2509 	smlabb	r5, r5, r9, r2
 8012762:	441d      	add	r5, r3
 8012764:	4629      	mov	r1, r5
 8012766:	f001 f8ad 	bl	80138c4 <tu_fifo_read_n>

  if (count) {
 801276a:	4604      	mov	r4, r0
 801276c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012770:	5db8      	ldrb	r0, [r7, r6]
 8012772:	b184      	cbz	r4, 8012796 <tud_cdc_n_write_flush+0x7a>
    TU_ASSERT(usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8012774:	4623      	mov	r3, r4
 8012776:	462a      	mov	r2, r5
 8012778:	f001 fbfc 	bl	8013f74 <usbd_edpt_xfer>
 801277c:	b948      	cbnz	r0, 8012792 <tud_cdc_n_write_flush+0x76>
 801277e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012782:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012786:	07db      	lsls	r3, r3, #31
 8012788:	d500      	bpl.n	801278c <tud_cdc_n_write_flush+0x70>
 801278a:	be00      	bkpt	0x0000
  TU_VERIFY(tud_ready(), 0); // Skip if usb is not ready yet
 801278c:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_in);
    return 0;
  }
}
 801278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return count;
 8012792:	4620      	mov	r0, r4
 8012794:	e7fb      	b.n	801278e <tud_cdc_n_write_flush+0x72>
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_in);
 8012796:	f001 fbdd 	bl	8013f54 <usbd_edpt_release>
    return 0;
 801279a:	e7f7      	b.n	801278c <tud_cdc_n_write_flush+0x70>
 801279c:	200111bc 	.word	0x200111bc
 80127a0:	2001112c 	.word	0x2001112c

080127a4 <tud_cdc_n_write>:
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 80127a4:	b570      	push	{r4, r5, r6, lr}
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80127a6:	2324      	movs	r3, #36	@ 0x24
 80127a8:	24bc      	movs	r4, #188	@ 0xbc
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 80127aa:	4605      	mov	r5, r0
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80127ac:	fb14 3400 	smlabb	r4, r4, r0, r3
 80127b0:	4b0a      	ldr	r3, [pc, #40]	@ (80127dc <tud_cdc_n_write+0x38>)
 80127b2:	441c      	add	r4, r3
 80127b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80127b8:	429a      	cmp	r2, r3
 80127ba:	4620      	mov	r0, r4
 80127bc:	bf28      	it	cs
 80127be:	461a      	movcs	r2, r3
 80127c0:	b292      	uxth	r2, r2
 80127c2:	f001 f885 	bl	80138d0 <tu_fifo_write_n>
 80127c6:	4606      	mov	r6, r0
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 80127c8:	4620      	mov	r0, r4
 80127ca:	f001 f850 	bl	801386e <tu_fifo_count>
 80127ce:	283f      	cmp	r0, #63	@ 0x3f
 80127d0:	d902      	bls.n	80127d8 <tud_cdc_n_write+0x34>
    tud_cdc_n_write_flush(itf);
 80127d2:	4628      	mov	r0, r5
 80127d4:	f7ff ffa2 	bl	801271c <tud_cdc_n_write_flush>
}
 80127d8:	4630      	mov	r0, r6
 80127da:	bd70      	pop	{r4, r5, r6, pc}
 80127dc:	200111bc 	.word	0x200111bc

080127e0 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80127e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80127e2:	4c1d      	ldr	r4, [pc, #116]	@ (8012858 <cdcd_init+0x78>)
 80127e4:	22bc      	movs	r2, #188	@ 0xbc
 80127e6:	2100      	movs	r1, #0
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80127e8:	2600      	movs	r6, #0
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80127ea:	4620      	mov	r0, r4
 80127ec:	f003 fb40 	bl	8015e70 <memset>
    p_cdc->wanted_char = (char) -1;
 80127f0:	23ff      	movs	r3, #255	@ 0xff
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80127f2:	2240      	movs	r2, #64	@ 0x40
 80127f4:	f104 0138 	add.w	r1, r4, #56	@ 0x38
    p_cdc->wanted_char = (char) -1;
 80127f8:	71a3      	strb	r3, [r4, #6]
    p_cdc->line_coding.bit_rate = 115200;
 80127fa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80127fe:	f104 0010 	add.w	r0, r4, #16
    p_cdc->line_coding.bit_rate = 115200;
 8012802:	60a3      	str	r3, [r4, #8]
    p_cdc->line_coding.data_bits = 8;
 8012804:	2308      	movs	r3, #8
 8012806:	73a3      	strb	r3, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8012808:	2301      	movs	r3, #1
 801280a:	9600      	str	r6, [sp, #0]
 801280c:	f000 fffd 	bl	801380a <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8012810:	4b12      	ldr	r3, [pc, #72]	@ (801285c <cdcd_init+0x7c>)
 8012812:	2240      	movs	r2, #64	@ 0x40
 8012814:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801281e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8012822:	9300      	str	r3, [sp, #0]
 8012824:	2301      	movs	r3, #1
 8012826:	f000 fff0 	bl	801380a <tu_fifo_config>
TU_ATTR_ALWAYS_INLINE static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t *mdef) {
#if configSUPPORT_STATIC_ALLOCATION
  return xSemaphoreCreateMutexStatic(mdef);
#else
  (void) mdef;
  return xSemaphoreCreateMutex();
 801282a:	2001      	movs	r0, #1
 801282c:	f7f5 fd76 	bl	800831c <xQueueCreateMutex>
 8012830:	4605      	mov	r5, r0
 8012832:	2001      	movs	r0, #1
 8012834:	f7f5 fd72 	bl	800831c <xQueueCreateMutex>

    #if OSAL_MUTEX_REQUIRED
    osal_mutex_t mutex_rd = osal_mutex_create(&p_cdc->rx_ff_mutex);
    osal_mutex_t mutex_wr = osal_mutex_create(&p_cdc->tx_ff_mutex);
    TU_ASSERT(mutex_rd != NULL && mutex_wr != NULL, );
 8012838:	b105      	cbz	r5, 801283c <cdcd_init+0x5c>
 801283a:	b940      	cbnz	r0, 801284e <cdcd_init+0x6e>
 801283c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012840:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012844:	07db      	lsls	r3, r3, #31
 8012846:	d500      	bpl.n	801284a <cdcd_init+0x6a>
 8012848:	be00      	bkpt	0x0000

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 801284a:	b002      	add	sp, #8
 801284c:	bd70      	pop	{r4, r5, r6, pc}

#if OSAL_MUTEX_REQUIRED
TU_ATTR_ALWAYS_INLINE static inline
void tu_fifo_config_mutex(tu_fifo_t *f, osal_mutex_t wr_mutex, osal_mutex_t rd_mutex) {
  f->mutex_wr = wr_mutex;
  f->mutex_rd = rd_mutex;
 801284e:	e9c4 6507 	strd	r6, r5, [r4, #28]
 8012852:	e9c4 060c 	strd	r0, r6, [r4, #48]	@ 0x30
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8012856:	e7f8      	b.n	801284a <cdcd_init+0x6a>
 8012858:	200111bc 	.word	0x200111bc
 801285c:	20002078 	.word	0x20002078

08012860 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8012860:	b538      	push	{r3, r4, r5, lr}
  #if OSAL_MUTEX_REQUIRED
  for(uint8_t i=0; i<CFG_TUD_CDC; i++) {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
    osal_mutex_t mutex_rd = p_cdc->rx_ff.mutex_rd;
 8012862:	4c09      	ldr	r4, [pc, #36]	@ (8012888 <cdcd_deinit+0x28>)
 8012864:	6a20      	ldr	r0, [r4, #32]
    osal_mutex_t mutex_wr = p_cdc->tx_ff.mutex_wr;
 8012866:	6b25      	ldr	r5, [r4, #48]	@ 0x30

    if (mutex_rd) {
 8012868:	b120      	cbz	r0, 8012874 <cdcd_deinit+0x14>
#endif
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_delete(osal_mutex_t mutex_hdl) {
  vSemaphoreDelete(mutex_hdl);
 801286a:	f7f6 f84d 	bl	8008908 <vQueueDelete>
  f->mutex_wr = wr_mutex;
 801286e:	2300      	movs	r3, #0
  f->mutex_rd = rd_mutex;
 8012870:	e9c4 3307 	strd	r3, r3, [r4, #28]
      osal_mutex_delete(mutex_rd);
      tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, NULL);
    }

    if (mutex_wr) {
 8012874:	b12d      	cbz	r5, 8012882 <cdcd_deinit+0x22>
 8012876:	4628      	mov	r0, r5
 8012878:	f7f6 f846 	bl	8008908 <vQueueDelete>
  f->mutex_wr = wr_mutex;
 801287c:	2300      	movs	r3, #0
  f->mutex_rd = rd_mutex;
 801287e:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
    }
  }
  #endif

  return true;
}
 8012882:	2001      	movs	r0, #1
 8012884:	bd38      	pop	{r3, r4, r5, pc}
 8012886:	bf00      	nop
 8012888:	200111bc 	.word	0x200111bc

0801288c <cdcd_reset>:
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 801288c:	2300      	movs	r3, #0
 801288e:	480c      	ldr	r0, [pc, #48]	@ (80128c0 <cdcd_reset+0x34>)
void cdcd_reset(uint8_t rhport) {
 8012890:	b510      	push	{r4, lr}
    if (!_cdcd_cfg.rx_persistent) {
 8012892:	4c0c      	ldr	r4, [pc, #48]	@ (80128c4 <cdcd_reset+0x38>)
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8012894:	6003      	str	r3, [r0, #0]
 8012896:	8083      	strh	r3, [r0, #4]
    if (!_cdcd_cfg.rx_persistent) {
 8012898:	7823      	ldrb	r3, [r4, #0]
 801289a:	07da      	lsls	r2, r3, #31
 801289c:	d402      	bmi.n	80128a4 <cdcd_reset+0x18>
      tu_fifo_clear(&p_cdc->rx_ff);
 801289e:	3010      	adds	r0, #16
 80128a0:	f001 f822 	bl	80138e8 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 80128a4:	7823      	ldrb	r3, [r4, #0]
 80128a6:	079b      	lsls	r3, r3, #30
 80128a8:	d402      	bmi.n	80128b0 <cdcd_reset+0x24>
      tu_fifo_clear(&p_cdc->tx_ff);
 80128aa:	4807      	ldr	r0, [pc, #28]	@ (80128c8 <cdcd_reset+0x3c>)
 80128ac:	f001 f81c 	bl	80138e8 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80128b0:	7821      	ldrb	r1, [r4, #0]
 80128b2:	4805      	ldr	r0, [pc, #20]	@ (80128c8 <cdcd_reset+0x3c>)
 80128b4:	f3c1 0180 	ubfx	r1, r1, #2, #1
  }
}
 80128b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80128bc:	f001 b834 	b.w	8013928 <tu_fifo_set_overwritable>
 80128c0:	200111bc 	.word	0x200111bc
 80128c4:	20002078 	.word	0x20002078
 80128c8:	200111e0 	.word	0x200111e0

080128cc <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 80128cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 80128ce:	794b      	ldrb	r3, [r1, #5]
uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 80128d0:	4607      	mov	r7, r0
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 80128d2:	2b02      	cmp	r3, #2
 80128d4:	d13d      	bne.n	8012952 <cdcd_open+0x86>
 80128d6:	798b      	ldrb	r3, [r1, #6]
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d13a      	bne.n	8012952 <cdcd_open+0x86>
  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
    p_cdc = &_cdcd_itf[cdc_id];
    if (p_cdc->ep_in == 0) {
 80128dc:	4e22      	ldr	r6, [pc, #136]	@ (8012968 <cdcd_open+0x9c>)
 80128de:	78b3      	ldrb	r3, [r6, #2]
 80128e0:	bb83      	cbnz	r3, 8012944 <cdcd_open+0x78>
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);

  //------------- Control Interface -------------//
  p_cdc->rhport = rhport;
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 80128e2:	788b      	ldrb	r3, [r1, #2]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80128e4:	2509      	movs	r5, #9
  p_cdc->rhport = rhport;
 80128e6:	7030      	strb	r0, [r6, #0]
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 80128e8:	7073      	strb	r3, [r6, #1]
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 80128ea:	780b      	ldrb	r3, [r1, #0]
 80128ec:	18cc      	adds	r4, r1, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80128ee:	7863      	ldrb	r3, [r4, #1]
  const uint8_t* p_desc = tu_desc_next(itf_desc);

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80128f0:	2b24      	cmp	r3, #36	@ 0x24
 80128f2:	d120      	bne.n	8012936 <cdcd_open+0x6a>
 80128f4:	4295      	cmp	r5, r2
 80128f6:	d919      	bls.n	801292c <cdcd_open+0x60>
    drv_len += tu_desc_len(p_desc);
    p_desc = tu_desc_next(p_desc);
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80128f8:	7863      	ldrb	r3, [r4, #1]
 80128fa:	2b04      	cmp	r3, #4
 80128fc:	d112      	bne.n	8012924 <cdcd_open+0x58>
 80128fe:	7963      	ldrb	r3, [r4, #5]
 8012900:	2b0a      	cmp	r3, #10
 8012902:	d10f      	bne.n	8012924 <cdcd_open+0x58>
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
    p_desc = tu_desc_next(p_desc);

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8012904:	4b19      	ldr	r3, [pc, #100]	@ (801296c <cdcd_open+0xa0>)
 8012906:	4638      	mov	r0, r7
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8012908:	7826      	ldrb	r6, [r4, #0]
 801290a:	9301      	str	r3, [sp, #4]
 801290c:	3301      	adds	r3, #1
 801290e:	19a1      	adds	r1, r4, r6
 8012910:	9300      	str	r3, [sp, #0]
 8012912:	2302      	movs	r3, #2
 8012914:	461a      	mov	r2, r3
 8012916:	f001 fadf 	bl	8013ed8 <usbd_open_edpt_pair>
 801291a:	b198      	cbz	r0, 8012944 <cdcd_open+0x78>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 801291c:	350e      	adds	r5, #14
 801291e:	fa16 f585 	uxtah	r5, r6, r5
 8012922:	b2ad      	uxth	r5, r5
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8012924:	2000      	movs	r0, #0
 8012926:	f7ff fe5f 	bl	80125e8 <_prep_out_transaction.isra.0>

  return drv_len;
 801292a:	e013      	b.n	8012954 <cdcd_open+0x88>
 801292c:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 801292e:	441d      	add	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012930:	441c      	add	r4, r3
 8012932:	b2ad      	uxth	r5, r5
 8012934:	e7db      	b.n	80128ee <cdcd_open+0x22>
  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8012936:	2b05      	cmp	r3, #5
 8012938:	d1de      	bne.n	80128f8 <cdcd_open+0x2c>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 801293a:	4621      	mov	r1, r4
 801293c:	4638      	mov	r0, r7
 801293e:	f001 faa7 	bl	8013e90 <usbd_edpt_open>
 8012942:	b950      	cbnz	r0, 801295a <cdcd_open+0x8e>
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8012944:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012948:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 801294c:	07db      	lsls	r3, r3, #31
 801294e:	d500      	bpl.n	8012952 <cdcd_open+0x86>
 8012950:	be00      	bkpt	0x0000
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8012952:	2500      	movs	r5, #0
}
 8012954:	4628      	mov	r0, r5
 8012956:	b003      	add	sp, #12
 8012958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cdc->ep_notify = desc_ep->bEndpointAddress;
 801295a:	78a3      	ldrb	r3, [r4, #2]
 801295c:	7133      	strb	r3, [r6, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 801295e:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 8012960:	441d      	add	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012962:	441c      	add	r4, r3
 8012964:	b2ad      	uxth	r5, r5
 8012966:	e7c7      	b.n	80128f8 <cdcd_open+0x2c>
 8012968:	200111bc 	.word	0x200111bc
 801296c:	200111be 	.word	0x200111be

08012970 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8012970:	460b      	mov	r3, r1
 8012972:	4611      	mov	r1, r2
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8012974:	7812      	ldrb	r2, [r2, #0]
 8012976:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801297a:	2a20      	cmp	r2, #32
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 801297c:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 801297e:	d14c      	bne.n	8012a1a <cdcd_control_xfer_cb+0xaa>
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
    p_cdc = &_cdcd_itf[itf];
    if (p_cdc->itf_num == request->wIndex) {
 8012980:	4e27      	ldr	r6, [pc, #156]	@ (8012a20 <cdcd_control_xfer_cb+0xb0>)
 8012982:	888a      	ldrh	r2, [r1, #4]
 8012984:	7874      	ldrb	r4, [r6, #1]
 8012986:	4294      	cmp	r4, r2
 8012988:	d147      	bne.n	8012a1a <cdcd_control_xfer_cb+0xaa>
      break;
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);

  switch (request->bRequest) {
 801298a:	784a      	ldrb	r2, [r1, #1]
 801298c:	3a20      	subs	r2, #32
 801298e:	2a03      	cmp	r2, #3
 8012990:	d843      	bhi.n	8012a1a <cdcd_control_xfer_cb+0xaa>
 8012992:	e8df f002 	tbb	[pc, r2]
 8012996:	1402      	.short	0x1402
 8012998:	3617      	.short	0x3617
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 801299a:	2b01      	cmp	r3, #1
 801299c:	d105      	bne.n	80129aa <cdcd_control_xfer_cb+0x3a>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 801299e:	2307      	movs	r3, #7
 80129a0:	4a20      	ldr	r2, [pc, #128]	@ (8012a24 <cdcd_control_xfer_cb+0xb4>)
 80129a2:	f001 ff05 	bl	80147b0 <tud_control_xfer>

    default:
      return false; // stall unsupported request
  }

  return true;
 80129a6:	2001      	movs	r0, #1
}
 80129a8:	bd70      	pop	{r4, r5, r6, pc}
      } else if (stage == CONTROL_STAGE_ACK) {
 80129aa:	2b03      	cmp	r3, #3
 80129ac:	d1fb      	bne.n	80129a6 <cdcd_control_xfer_cb+0x36>
        if (tud_cdc_line_coding_cb) {
 80129ae:	4b1e      	ldr	r3, [pc, #120]	@ (8012a28 <cdcd_control_xfer_cb+0xb8>)
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d0f8      	beq.n	80129a6 <cdcd_control_xfer_cb+0x36>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80129b4:	491b      	ldr	r1, [pc, #108]	@ (8012a24 <cdcd_control_xfer_cb+0xb4>)
 80129b6:	2000      	movs	r0, #0
 80129b8:	f3af 8000 	nop.w
 80129bc:	e7f3      	b.n	80129a6 <cdcd_control_xfer_cb+0x36>
      if (stage == CONTROL_STAGE_SETUP) {
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d1f1      	bne.n	80129a6 <cdcd_control_xfer_cb+0x36>
 80129c2:	e7ec      	b.n	801299e <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP) {
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d102      	bne.n	80129ce <cdcd_control_xfer_cb+0x5e>
        tud_control_status(rhport, request);
 80129c8:	f001 fee0 	bl	801478c <tud_control_status>
 80129cc:	e7eb      	b.n	80129a6 <cdcd_control_xfer_cb+0x36>
      } else if (stage == CONTROL_STAGE_ACK) {
 80129ce:	2b03      	cmp	r3, #3
 80129d0:	d1e9      	bne.n	80129a6 <cdcd_control_xfer_cb+0x36>
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 80129d2:	4b16      	ldr	r3, [pc, #88]	@ (8012a2c <cdcd_control_xfer_cb+0xbc>)
        bool const dtr = tu_bit_test(request->wValue, 0);
 80129d4:	884c      	ldrh	r4, [r1, #2]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 80129d6:	7819      	ldrb	r1, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80129d8:	f004 0501 	and.w	r5, r4, #1
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 80129dc:	4814      	ldr	r0, [pc, #80]	@ (8012a30 <cdcd_control_xfer_cb+0xc0>)
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 80129de:	f011 0104 	ands.w	r1, r1, #4
        p_cdc->line_state = (uint8_t) request->wValue;
 80129e2:	7174      	strb	r4, [r6, #5]
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80129e4:	bf18      	it	ne
 80129e6:	f085 0101 	eorne.w	r1, r5, #1
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 80129ea:	f000 ff9d 	bl	8013928 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 80129ee:	4b11      	ldr	r3, [pc, #68]	@ (8012a34 <cdcd_control_xfer_cb+0xc4>)
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d0d8      	beq.n	80129a6 <cdcd_control_xfer_cb+0x36>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80129f4:	f3c4 0240 	ubfx	r2, r4, #1, #1
 80129f8:	4629      	mov	r1, r5
 80129fa:	2000      	movs	r0, #0
 80129fc:	f7ff fca4 	bl	8012348 <tud_cdc_line_state_cb>
 8012a00:	e7d1      	b.n	80129a6 <cdcd_control_xfer_cb+0x36>
      if (stage == CONTROL_STAGE_SETUP) {
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d0e0      	beq.n	80129c8 <cdcd_control_xfer_cb+0x58>
      } else if (stage == CONTROL_STAGE_ACK) {
 8012a06:	2b03      	cmp	r3, #3
 8012a08:	d1cd      	bne.n	80129a6 <cdcd_control_xfer_cb+0x36>
        if (tud_cdc_send_break_cb) {
 8012a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8012a38 <cdcd_control_xfer_cb+0xc8>)
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d0ca      	beq.n	80129a6 <cdcd_control_xfer_cb+0x36>
          tud_cdc_send_break_cb(itf, request->wValue);
 8012a10:	8849      	ldrh	r1, [r1, #2]
 8012a12:	2000      	movs	r0, #0
 8012a14:	f3af 8000 	nop.w
 8012a18:	e7c5      	b.n	80129a6 <cdcd_control_xfer_cb+0x36>
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	e7c4      	b.n	80129a8 <cdcd_control_xfer_cb+0x38>
 8012a1e:	bf00      	nop
 8012a20:	200111bc 	.word	0x200111bc
 8012a24:	200111c4 	.word	0x200111c4
 8012a28:	00000000 	.word	0x00000000
 8012a2c:	20002078 	.word	0x20002078
 8012a30:	200111e0 	.word	0x200111e0
 8012a34:	08012349 	.word	0x08012349
 8012a38:	00000000 	.word	0x00000000

08012a3c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8012a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
    p_cdc = &_cdcd_itf[itf];
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in) || (ep_addr == p_cdc->ep_notify)) {
 8012a40:	4c38      	ldr	r4, [pc, #224]	@ (8012b24 <cdcd_xfer_cb+0xe8>)
bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8012a42:	461d      	mov	r5, r3
 8012a44:	4680      	mov	r8, r0
 8012a46:	460e      	mov	r6, r1
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in) || (ep_addr == p_cdc->ep_notify)) {
 8012a48:	78e3      	ldrb	r3, [r4, #3]
 8012a4a:	428b      	cmp	r3, r1
 8012a4c:	d136      	bne.n	8012abc <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8012a4e:	4f36      	ldr	r7, [pc, #216]	@ (8012b28 <cdcd_xfer_cb+0xec>)
 8012a50:	b2aa      	uxth	r2, r5
 8012a52:	f104 0010 	add.w	r0, r4, #16
 8012a56:	4639      	mov	r1, r7
 8012a58:	f000 ff3a 	bl	80138d0 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8012a5c:	4b33      	ldr	r3, [pc, #204]	@ (8012b2c <cdcd_xfer_cb+0xf0>)
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d13c      	bne.n	8012adc <cdcd_xfer_cb+0xa0>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8012a62:	4b33      	ldr	r3, [pc, #204]	@ (8012b30 <cdcd_xfer_cb+0xf4>)
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d150      	bne.n	8012b0a <cdcd_xfer_cb+0xce>
      tud_cdc_rx_cb(itf);
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8012a68:	2000      	movs	r0, #0
 8012a6a:	f7ff fdbd 	bl	80125e8 <_prep_out_transaction.isra.0>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8012a6e:	78a3      	ldrb	r3, [r4, #2]
 8012a70:	42b3      	cmp	r3, r6
 8012a72:	d11c      	bne.n	8012aae <cdcd_xfer_cb+0x72>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8012a74:	4b2f      	ldr	r3, [pc, #188]	@ (8012b34 <cdcd_xfer_cb+0xf8>)
 8012a76:	b113      	cbz	r3, 8012a7e <cdcd_xfer_cb+0x42>
      tud_cdc_tx_complete_cb(itf);
 8012a78:	2000      	movs	r0, #0
 8012a7a:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8012a7e:	2000      	movs	r0, #0
 8012a80:	f7ff fe4c 	bl	801271c <tud_cdc_n_write_flush>
 8012a84:	b998      	cbnz	r0, 8012aae <cdcd_xfer_cb+0x72>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8012a86:	482c      	ldr	r0, [pc, #176]	@ (8012b38 <cdcd_xfer_cb+0xfc>)
 8012a88:	f000 fef1 	bl	801386e <tu_fifo_count>
 8012a8c:	b978      	cbnz	r0, 8012aae <cdcd_xfer_cb+0x72>
 8012a8e:	b175      	cbz	r5, 8012aae <cdcd_xfer_cb+0x72>
 8012a90:	f015 053f 	ands.w	r5, r5, #63	@ 0x3f
 8012a94:	d10b      	bne.n	8012aae <cdcd_xfer_cb+0x72>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8012a96:	78a1      	ldrb	r1, [r4, #2]
 8012a98:	4640      	mov	r0, r8
 8012a9a:	f001 fa4b 	bl	8013f34 <usbd_edpt_claim>
 8012a9e:	b130      	cbz	r0, 8012aae <cdcd_xfer_cb+0x72>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8012aa0:	462b      	mov	r3, r5
 8012aa2:	462a      	mov	r2, r5
 8012aa4:	78a1      	ldrb	r1, [r4, #2]
 8012aa6:	4640      	mov	r0, r8
 8012aa8:	f001 fa64 	bl	8013f74 <usbd_edpt_xfer>
 8012aac:	b160      	cbz	r0, 8012ac8 <cdcd_xfer_cb+0x8c>
      }
    }
  }

  // Sent notification to host
  if (ep_addr == p_cdc->ep_notify) {
 8012aae:	7923      	ldrb	r3, [r4, #4]
 8012ab0:	42b3      	cmp	r3, r6
 8012ab2:	d101      	bne.n	8012ab8 <cdcd_xfer_cb+0x7c>
    if (tud_cdc_notify_complete_cb) {
 8012ab4:	4b21      	ldr	r3, [pc, #132]	@ (8012b3c <cdcd_xfer_cb+0x100>)
 8012ab6:	bb83      	cbnz	r3, 8012b1a <cdcd_xfer_cb+0xde>
      tud_cdc_notify_complete_cb(itf);
    }
  }

  return true;
 8012ab8:	2001      	movs	r0, #1
 8012aba:	e00d      	b.n	8012ad8 <cdcd_xfer_cb+0x9c>
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in) || (ep_addr == p_cdc->ep_notify)) {
 8012abc:	78a3      	ldrb	r3, [r4, #2]
 8012abe:	428b      	cmp	r3, r1
 8012ac0:	d0d5      	beq.n	8012a6e <cdcd_xfer_cb+0x32>
 8012ac2:	7923      	ldrb	r3, [r4, #4]
 8012ac4:	428b      	cmp	r3, r1
 8012ac6:	d0d2      	beq.n	8012a6e <cdcd_xfer_cb+0x32>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8012ac8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012acc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012ad0:	07db      	lsls	r3, r3, #31
 8012ad2:	d500      	bpl.n	8012ad6 <cdcd_xfer_cb+0x9a>
 8012ad4:	be00      	bkpt	0x0000
  TU_ASSERT(itf < CFG_TUD_CDC);
 8012ad6:	2000      	movs	r0, #0
}
 8012ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8012adc:	79a3      	ldrb	r3, [r4, #6]
 8012ade:	2bff      	cmp	r3, #255	@ 0xff
 8012ae0:	d0bf      	beq.n	8012a62 <cdcd_xfer_cb+0x26>
 8012ae2:	eb07 0905 	add.w	r9, r7, r5
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8012ae6:	f104 0a10 	add.w	sl, r4, #16
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8012aea:	45b9      	cmp	r9, r7
 8012aec:	d0b9      	beq.n	8012a62 <cdcd_xfer_cb+0x26>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8012aee:	f817 3b01 	ldrb.w	r3, [r7], #1
 8012af2:	79a2      	ldrb	r2, [r4, #6]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d1f8      	bne.n	8012aea <cdcd_xfer_cb+0xae>
 8012af8:	4650      	mov	r0, sl
 8012afa:	f000 fec9 	bl	8013890 <tu_fifo_empty>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	d1f3      	bne.n	8012aea <cdcd_xfer_cb+0xae>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8012b02:	79a1      	ldrb	r1, [r4, #6]
 8012b04:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8012b08:	e7ef      	b.n	8012aea <cdcd_xfer_cb+0xae>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8012b0a:	480d      	ldr	r0, [pc, #52]	@ (8012b40 <cdcd_xfer_cb+0x104>)
 8012b0c:	f000 fec0 	bl	8013890 <tu_fifo_empty>
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d1a9      	bne.n	8012a68 <cdcd_xfer_cb+0x2c>
      tud_cdc_rx_cb(itf);
 8012b14:	f7ff fc19 	bl	801234a <tud_cdc_rx_cb>
 8012b18:	e7a6      	b.n	8012a68 <cdcd_xfer_cb+0x2c>
      tud_cdc_notify_complete_cb(itf);
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	f3af 8000 	nop.w
 8012b20:	e7ca      	b.n	8012ab8 <cdcd_xfer_cb+0x7c>
 8012b22:	bf00      	nop
 8012b24:	200111bc 	.word	0x200111bc
 8012b28:	2001112c 	.word	0x2001112c
 8012b2c:	00000000 	.word	0x00000000
 8012b30:	0801234b 	.word	0x0801234b
 8012b34:	00000000 	.word	0x00000000
 8012b38:	200111e0 	.word	0x200111e0
 8012b3c:	00000000 	.word	0x00000000
 8012b40:	200111cc 	.word	0x200111cc

08012b44 <fail_scsi_op.constprop.0>:
}

static void fail_scsi_op(mscd_interface_t* p_msc, uint8_t status) {
  msc_cbw_t const * p_cbw = &p_msc->cbw;
  msc_csw_t       * p_csw = &p_msc->csw;
  uint8_t rhport = p_msc->rhport;
 8012b44:	4b12      	ldr	r3, [pc, #72]	@ (8012b90 <fail_scsi_op.constprop.0+0x4c>)
static void fail_scsi_op(mscd_interface_t* p_msc, uint8_t status) {
 8012b46:	4602      	mov	r2, r0
 8012b48:	b410      	push	{r4}

  p_csw->status       = status;
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8012b4a:	6899      	ldr	r1, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 8012b4c:	2402      	movs	r4, #2
  p_csw->status       = status;
 8012b4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8012b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  p_msc->stage        = MSC_STAGE_STATUS;
 8012b54:	f883 4038 	strb.w	r4, [r3, #56]	@ 0x38
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8012b58:	1a8a      	subs	r2, r1, r2

  // failed but sense key is not set: default to Illegal Request
  if (p_msc->sense_key == 0) {
 8012b5a:	f893 4039 	ldrb.w	r4, [r3, #57]	@ 0x39
  uint8_t rhport = p_msc->rhport;
 8012b5e:	7fd8      	ldrb	r0, [r3, #31]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8012b60:	629a      	str	r2, [r3, #40]	@ 0x28
  if (p_msc->sense_key == 0) {
 8012b62:	b924      	cbnz	r4, 8012b6e <fail_scsi_op.constprop.0+0x2a>
//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier) {
  (void) lun;
  _mscd_itf.sense_key           = sense_key;
 8012b64:	2405      	movs	r4, #5
 8012b66:	f883 4039 	strb.w	r4, [r3, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 8012b6a:	2420      	movs	r4, #32
 8012b6c:	875c      	strh	r4, [r3, #58]	@ 0x3a
  if (p_cbw->total_bytes && p_csw->data_residue) {
 8012b6e:	b159      	cbz	r1, 8012b88 <fail_scsi_op.constprop.0+0x44>
 8012b70:	b152      	cbz	r2, 8012b88 <fail_scsi_op.constprop.0+0x44>
  return tu_bit_test(dir, 7);
 8012b72:	7b1a      	ldrb	r2, [r3, #12]
}
 8012b74:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (is_data_in(p_cbw->dir)) {
 8012b78:	09d2      	lsrs	r2, r2, #7
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8012b7a:	bf14      	ite	ne
 8012b7c:	f893 102e 	ldrbne.w	r1, [r3, #46]	@ 0x2e
      usbd_edpt_stall(rhport, p_msc->ep_out);
 8012b80:	f893 102f 	ldrbeq.w	r1, [r3, #47]	@ 0x2f
 8012b84:	f001 ba32 	b.w	8013fec <usbd_edpt_stall>
}
 8012b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b8c:	4770      	bx	lr
 8012b8e:	bf00      	nop
 8012b90:	20011478 	.word	0x20011478

08012b94 <proc_write10_cmd.constprop.0>:

static void proc_write10_cmd(mscd_interface_t* p_msc) {
  msc_cbw_t const* p_cbw = &p_msc->cbw;
  bool writable = true;

  if (tud_msc_is_writable_cb) {
 8012b94:	4b14      	ldr	r3, [pc, #80]	@ (8012be8 <proc_write10_cmd.constprop.0+0x54>)
static void proc_write10_cmd(mscd_interface_t* p_msc) {
 8012b96:	b510      	push	{r4, lr}
 8012b98:	4c14      	ldr	r4, [pc, #80]	@ (8012bec <proc_write10_cmd.constprop.0+0x58>)
  if (tud_msc_is_writable_cb) {
 8012b9a:	b16b      	cbz	r3, 8012bb8 <proc_write10_cmd.constprop.0+0x24>
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 8012b9c:	7b60      	ldrb	r0, [r4, #13]
 8012b9e:	f7ff fadf 	bl	8012160 <tud_msc_is_writable_cb>
  }

  if (!writable) {
 8012ba2:	b948      	cbnz	r0, 8012bb8 <proc_write10_cmd.constprop.0+0x24>
  _mscd_itf.sense_key           = sense_key;
 8012ba4:	2307      	movs	r3, #7
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
    fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8012ba6:	2001      	movs	r0, #1
  _mscd_itf.sense_key           = sense_key;
 8012ba8:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 8012bac:	2327      	movs	r3, #39	@ 0x27
 8012bae:	8763      	strh	r3, [r4, #58]	@ 0x3a

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t)tu_min32(CFG_TUD_MSC_EP_BUFSIZE, p_cbw->total_bytes - p_msc->xferred_len);
  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT(usbd_edpt_xfer(p_msc->rhport, p_msc->ep_out, _mscd_epbuf.buf, nbytes),);
}
 8012bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8012bb4:	f7ff bfc6 	b.w	8012b44 <fail_scsi_op.constprop.0>
  uint16_t nbytes = (uint16_t)tu_min32(CFG_TUD_MSC_EP_BUFSIZE, p_cbw->total_bytes - p_msc->xferred_len);
 8012bb8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012bba:	68a3      	ldr	r3, [r4, #8]
  TU_ASSERT(usbd_edpt_xfer(p_msc->rhport, p_msc->ep_out, _mscd_epbuf.buf, nbytes),);
 8012bbc:	f894 102f 	ldrb.w	r1, [r4, #47]	@ 0x2f
  uint16_t nbytes = (uint16_t)tu_min32(CFG_TUD_MSC_EP_BUFSIZE, p_cbw->total_bytes - p_msc->xferred_len);
 8012bc0:	1a9b      	subs	r3, r3, r2
  TU_ASSERT(usbd_edpt_xfer(p_msc->rhport, p_msc->ep_out, _mscd_epbuf.buf, nbytes),);
 8012bc2:	7fe0      	ldrb	r0, [r4, #31]
 8012bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8012bf0 <proc_write10_cmd.constprop.0+0x5c>)
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8012bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012bca:	bf28      	it	cs
 8012bcc:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	f001 f9cf 	bl	8013f74 <usbd_edpt_xfer>
 8012bd6:	b930      	cbnz	r0, 8012be6 <proc_write10_cmd.constprop.0+0x52>
 8012bd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012bdc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012be0:	07db      	lsls	r3, r3, #31
 8012be2:	d500      	bpl.n	8012be6 <proc_write10_cmd.constprop.0+0x52>
 8012be4:	be00      	bkpt	0x0000
}
 8012be6:	bd10      	pop	{r4, pc}
 8012be8:	08012161 	.word	0x08012161
 8012bec:	20011478 	.word	0x20011478
 8012bf0:	20011278 	.word	0x20011278

08012bf4 <proc_write_io_data.constprop.0>:
    proc_write_io_data(p_msc, xferred_bytes, nbytes);
  }
}

static void proc_write_io_data(mscd_interface_t* p_msc, uint32_t xferred_bytes, int32_t nbytes) {
  if (nbytes < 0) {
 8012bf4:	2900      	cmp	r1, #0
static void proc_write_io_data(mscd_interface_t* p_msc, uint32_t xferred_bytes, int32_t nbytes) {
 8012bf6:	b530      	push	{r4, r5, lr}
 8012bf8:	b085      	sub	sp, #20
  if (nbytes < 0) {
 8012bfa:	da0d      	bge.n	8012c18 <proc_write_io_data.constprop.0+0x24>
    // nbytes is status
    switch (nbytes) {
 8012bfc:	3101      	adds	r1, #1
 8012bfe:	d126      	bne.n	8012c4e <proc_write_io_data.constprop.0+0x5a>
  _mscd_itf.sense_key           = sense_key;
 8012c00:	4b1b      	ldr	r3, [pc, #108]	@ (8012c70 <proc_write_io_data.constprop.0+0x7c>)
 8012c02:	2202      	movs	r2, #2
      case TUD_MSC_RET_ERROR:
        // IO error -> failed this scsi op
        TU_LOG_DRV("  IO write() failed\r\n");
        set_sense_medium_not_present(p_msc->cbw.lun);
        fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8012c04:	2001      	movs	r0, #1
  _mscd_itf.sense_key           = sense_key;
 8012c06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 8012c0a:	223a      	movs	r2, #58	@ 0x3a
 8012c0c:	875a      	strh	r2, [r3, #58]	@ 0x3a
        // prepare to receive more data from host
        proc_write10_cmd(p_msc);
      }
    }
  }
}
 8012c0e:	b005      	add	sp, #20
 8012c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8012c14:	f7ff bf96 	b.w	8012b44 <fail_scsi_op.constprop.0>
    if ((uint32_t)nbytes < xferred_bytes) {
 8012c18:	4288      	cmp	r0, r1
 8012c1a:	4d15      	ldr	r5, [pc, #84]	@ (8012c70 <proc_write_io_data.constprop.0+0x7c>)
 8012c1c:	d919      	bls.n	8012c52 <proc_write_io_data.constprop.0+0x5e>
      const uint32_t left_over = xferred_bytes - (uint32_t)nbytes;
 8012c1e:	1a44      	subs	r4, r0, r1
      if (nbytes > 0) {
 8012c20:	b121      	cbz	r1, 8012c2c <proc_write_io_data.constprop.0+0x38>
        memmove(_mscd_epbuf.buf, _mscd_epbuf.buf + nbytes, left_over);
 8012c22:	4814      	ldr	r0, [pc, #80]	@ (8012c74 <proc_write_io_data.constprop.0+0x80>)
 8012c24:	4622      	mov	r2, r4
 8012c26:	4401      	add	r1, r0
 8012c28:	f003 f908 	bl	8015e3c <memmove>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8012c2c:	7fea      	ldrb	r2, [r5, #31]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;
 8012c2e:	2100      	movs	r1, #0
      dcd_event_xfer_complete(p_msc->rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 8012c30:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
  dcd_event_handler(&event, in_isr);
 8012c34:	a801      	add	r0, sp, #4
  event.rhport = rhport;
 8012c36:	f88d 2004 	strb.w	r2, [sp, #4]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8012c3a:	2207      	movs	r2, #7
  event.xfer_complete.ep_addr = ep_addr;
 8012c3c:	f88d 3008 	strb.w	r3, [sp, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8012c40:	f88d 2005 	strb.w	r2, [sp, #5]
  event.xfer_complete.len     = xferred_bytes;
 8012c44:	9403      	str	r4, [sp, #12]
  event.xfer_complete.result  = result;
 8012c46:	f88d 1009 	strb.w	r1, [sp, #9]
  dcd_event_handler(&event, in_isr);
 8012c4a:	f000 ff85 	bl	8013b58 <dcd_event_handler>
}
 8012c4e:	b005      	add	sp, #20
 8012c50:	bd30      	pop	{r4, r5, pc}
      p_msc->xferred_len += xferred_bytes;
 8012c52:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012c54:	4418      	add	r0, r3
      if (p_msc->xferred_len >= p_msc->total_len) {
 8012c56:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012c58:	4298      	cmp	r0, r3
      p_msc->xferred_len += xferred_bytes;
 8012c5a:	6368      	str	r0, [r5, #52]	@ 0x34
      if (p_msc->xferred_len >= p_msc->total_len) {
 8012c5c:	d303      	bcc.n	8012c66 <proc_write_io_data.constprop.0+0x72>
        p_msc->stage = MSC_STAGE_STATUS;
 8012c5e:	2302      	movs	r3, #2
 8012c60:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8012c64:	e7f3      	b.n	8012c4e <proc_write_io_data.constprop.0+0x5a>
}
 8012c66:	b005      	add	sp, #20
 8012c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        proc_write10_cmd(p_msc);
 8012c6c:	f7ff bf92 	b.w	8012b94 <proc_write10_cmd.constprop.0>
 8012c70:	20011478 	.word	0x20011478
 8012c74:	20011278 	.word	0x20011278

08012c78 <proc_read_io_data.constprop.0>:
static void proc_read_io_data(mscd_interface_t* p_msc, int32_t nbytes) {
 8012c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c7a:	4601      	mov	r1, r0
  const uint8_t rhport = p_msc->rhport;
 8012c7c:	4c19      	ldr	r4, [pc, #100]	@ (8012ce4 <proc_read_io_data.constprop.0+0x6c>)
  if (nbytes > 0) {
 8012c7e:	2900      	cmp	r1, #0
  const uint8_t rhport = p_msc->rhport;
 8012c80:	7fe0      	ldrb	r0, [r4, #31]
  if (nbytes > 0) {
 8012c82:	dd0f      	ble.n	8012ca4 <proc_read_io_data.constprop.0+0x2c>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_epbuf.buf, (uint16_t) nbytes),);
 8012c84:	b28b      	uxth	r3, r1
 8012c86:	4a18      	ldr	r2, [pc, #96]	@ (8012ce8 <proc_read_io_data.constprop.0+0x70>)
 8012c88:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 8012c8c:	f001 f972 	bl	8013f74 <usbd_edpt_xfer>
 8012c90:	b930      	cbnz	r0, 8012ca0 <proc_read_io_data.constprop.0+0x28>
 8012c92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012c96:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012c9a:	07da      	lsls	r2, r3, #31
 8012c9c:	d500      	bpl.n	8012ca0 <proc_read_io_data.constprop.0+0x28>
 8012c9e:	be00      	bkpt	0x0000
}
 8012ca0:	b004      	add	sp, #16
 8012ca2:	bd10      	pop	{r4, pc}
    switch (nbytes) {
 8012ca4:	1c4b      	adds	r3, r1, #1
 8012ca6:	d011      	beq.n	8012ccc <proc_read_io_data.constprop.0+0x54>
 8012ca8:	2900      	cmp	r1, #0
 8012caa:	d1f9      	bne.n	8012ca0 <proc_read_io_data.constprop.0+0x28>
        dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8012cac:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8012cb0:	2207      	movs	r2, #7
  event.rhport = rhport;
 8012cb2:	f88d 0004 	strb.w	r0, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8012cb6:	a801      	add	r0, sp, #4
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8012cb8:	f88d 2005 	strb.w	r2, [sp, #5]
  event.xfer_complete.ep_addr = ep_addr;
 8012cbc:	f88d 3008 	strb.w	r3, [sp, #8]
  event.xfer_complete.len     = xferred_bytes;
 8012cc0:	9103      	str	r1, [sp, #12]
  event.xfer_complete.result  = result;
 8012cc2:	f88d 1009 	strb.w	r1, [sp, #9]
  dcd_event_handler(&event, in_isr);
 8012cc6:	f000 ff47 	bl	8013b58 <dcd_event_handler>
}
 8012cca:	e7e9      	b.n	8012ca0 <proc_read_io_data.constprop.0+0x28>
  _mscd_itf.sense_key           = sense_key;
 8012ccc:	2302      	movs	r3, #2
        fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8012cce:	2001      	movs	r0, #1
  _mscd_itf.sense_key           = sense_key;
 8012cd0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 8012cd4:	233a      	movs	r3, #58	@ 0x3a
 8012cd6:	8763      	strh	r3, [r4, #58]	@ 0x3a
}
 8012cd8:	b004      	add	sp, #16
 8012cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8012cde:	f7ff bf31 	b.w	8012b44 <fail_scsi_op.constprop.0>
 8012ce2:	bf00      	nop
 8012ce4:	20011478 	.word	0x20011478
 8012ce8:	20011278 	.word	0x20011278

08012cec <proc_read10_cmd.constprop.0>:
static void proc_read10_cmd(mscd_interface_t* p_msc) {
 8012cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return *((uint16_t const *) mem);
 8012cee:	4c16      	ldr	r4, [pc, #88]	@ (8012d48 <proc_read10_cmd.constprop.0+0x5c>)
 8012cf0:	8ae2      	ldrh	r2, [r4, #22]
  return (uint16_t) (cbw->total_bytes / block_count);
 8012cf2:	68a3      	ldr	r3, [r4, #8]
  if (block_count == 0) {
 8012cf4:	b122      	cbz	r2, 8012d00 <proc_read10_cmd.constprop.0+0x14>
  return tu_ntohs(block_count);
 8012cf6:	ba52      	rev16	r2, r2
 8012cf8:	b292      	uxth	r2, r2
  return (uint16_t) (cbw->total_bytes / block_count);
 8012cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8012cfe:	b292      	uxth	r2, r2
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8012d00:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  p_msc->pending_io = 1;
 8012d02:	2501      	movs	r5, #1
  return *((uint32_t const *) mem);
 8012d04:	f8d4 1011 	ldr.w	r1, [r4, #17]
  int32_t nbytes = (int32_t)tu_min32(CFG_TUD_MSC_EP_BUFSIZE, p_cbw->total_bytes - p_msc->xferred_len);
 8012d08:	1a1b      	subs	r3, r3, r0
  p_msc->pending_io = 1;
 8012d0a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  return tu_ntohl(lba); // lba is in Big Endian
 8012d0e:	ba09      	rev	r1, r1
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8012d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8012d14:	fbb0 f5f2 	udiv	r5, r0, r2
 8012d18:	bf28      	it	cs
 8012d1a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_epbuf.buf, (uint32_t)nbytes);
 8012d1e:	fb02 0215 	mls	r2, r2, r5, r0
 8012d22:	4429      	add	r1, r5
 8012d24:	9300      	str	r3, [sp, #0]
 8012d26:	4b09      	ldr	r3, [pc, #36]	@ (8012d4c <proc_read10_cmd.constprop.0+0x60>)
 8012d28:	7b60      	ldrb	r0, [r4, #13]
 8012d2a:	f7ff f9e9 	bl	8012100 <tud_msc_read10_cb>
  if (nbytes != TUD_MSC_RET_ASYNC) {
 8012d2e:	1c83      	adds	r3, r0, #2
 8012d30:	d007      	beq.n	8012d42 <proc_read10_cmd.constprop.0+0x56>
    p_msc->pending_io = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8012d38:	b003      	add	sp, #12
 8012d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    proc_read_io_data(p_msc, nbytes);
 8012d3e:	f7ff bf9b 	b.w	8012c78 <proc_read_io_data.constprop.0>
}
 8012d42:	b003      	add	sp, #12
 8012d44:	bd30      	pop	{r4, r5, pc}
 8012d46:	bf00      	nop
 8012d48:	20011478 	.word	0x20011478
 8012d4c:	20011278 	.word	0x20011278

08012d50 <prepare_cbw.constprop.0>:
  uint8_t rhport = p_msc->rhport;
 8012d50:	4805      	ldr	r0, [pc, #20]	@ (8012d68 <prepare_cbw.constprop.0+0x18>)
  p_msc->stage = MSC_STAGE_CMD;
 8012d52:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out,  _mscd_epbuf.buf, sizeof(msc_cbw_t));
 8012d54:	4a05      	ldr	r2, [pc, #20]	@ (8012d6c <prepare_cbw.constprop.0+0x1c>)
  p_msc->stage = MSC_STAGE_CMD;
 8012d56:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  return usbd_edpt_xfer(rhport, p_msc->ep_out,  _mscd_epbuf.buf, sizeof(msc_cbw_t));
 8012d5a:	231f      	movs	r3, #31
 8012d5c:	f890 102f 	ldrb.w	r1, [r0, #47]	@ 0x2f
 8012d60:	7fc0      	ldrb	r0, [r0, #31]
 8012d62:	f001 b907 	b.w	8013f74 <usbd_edpt_xfer>
 8012d66:	bf00      	nop
 8012d68:	20011478 	.word	0x20011478
 8012d6c:	20011278 	.word	0x20011278

08012d70 <send_csw.constprop.0>:
static inline bool send_csw(mscd_interface_t* p_msc) {
 8012d70:	b470      	push	{r4, r5, r6}
  uint8_t rhport = p_msc->rhport;
 8012d72:	4c0b      	ldr	r4, [pc, #44]	@ (8012da0 <send_csw.constprop.0+0x30>)
  memcpy(_mscd_epbuf.buf, &p_msc->csw, sizeof(msc_csw_t));
 8012d74:	4e0b      	ldr	r6, [pc, #44]	@ (8012da4 <send_csw.constprop.0+0x34>)
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8012d76:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012d78:	68a3      	ldr	r3, [r4, #8]
  memcpy(_mscd_epbuf.buf, &p_msc->csw, sizeof(msc_csw_t));
 8012d7a:	4635      	mov	r5, r6
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8012d7c:	1a9b      	subs	r3, r3, r2
 8012d7e:	62a3      	str	r3, [r4, #40]	@ 0x28
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8012d80:	2303      	movs	r3, #3
 8012d82:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  memcpy(_mscd_epbuf.buf, &p_msc->csw, sizeof(msc_csw_t));
 8012d86:	f104 0320 	add.w	r3, r4, #32
 8012d8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d8c:	c507      	stmia	r5!, {r0, r1, r2}
  return usbd_edpt_xfer(rhport, p_msc->ep_in , _mscd_epbuf.buf, sizeof(msc_csw_t));
 8012d8e:	4632      	mov	r2, r6
  memcpy(_mscd_epbuf.buf, &p_msc->csw, sizeof(msc_csw_t));
 8012d90:	702b      	strb	r3, [r5, #0]
  return usbd_edpt_xfer(rhport, p_msc->ep_in , _mscd_epbuf.buf, sizeof(msc_csw_t));
 8012d92:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 8012d96:	230d      	movs	r3, #13
 8012d98:	7fe0      	ldrb	r0, [r4, #31]
}
 8012d9a:	bc70      	pop	{r4, r5, r6}
  return usbd_edpt_xfer(rhport, p_msc->ep_in , _mscd_epbuf.buf, sizeof(msc_csw_t));
 8012d9c:	f001 b8ea 	b.w	8013f74 <usbd_edpt_xfer>
 8012da0:	20011478 	.word	0x20011478
 8012da4:	20011278 	.word	0x20011278

08012da8 <proc_stage_status.constprop.0>:
static bool proc_stage_status(mscd_interface_t *p_msc) {
 8012da8:	b538      	push	{r3, r4, r5, lr}
  uint8_t rhport = p_msc->rhport;
 8012daa:	4c11      	ldr	r4, [pc, #68]	@ (8012df0 <proc_stage_status.constprop.0+0x48>)
 8012dac:	7fe5      	ldrb	r5, [r4, #31]
  if (!usbd_edpt_stalled(rhport, p_msc->ep_in)) {
 8012dae:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 8012db2:	4628      	mov	r0, r5
 8012db4:	f001 f956 	bl	8014064 <usbd_edpt_stalled>
 8012db8:	b958      	cbnz	r0, 8012dd2 <proc_stage_status.constprop.0+0x2a>
    if ((p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir)) {
 8012dba:	68a2      	ldr	r2, [r4, #8]
 8012dbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d909      	bls.n	8012dd6 <proc_stage_status.constprop.0+0x2e>
  return tu_bit_test(dir, 7);
 8012dc2:	7b23      	ldrb	r3, [r4, #12]
    if ((p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir)) {
 8012dc4:	09db      	lsrs	r3, r3, #7
 8012dc6:	d006      	beq.n	8012dd6 <proc_stage_status.constprop.0+0x2e>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8012dc8:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 8012dcc:	4628      	mov	r0, r5
 8012dce:	f001 f90d 	bl	8013fec <usbd_edpt_stall>
  return true;
 8012dd2:	2001      	movs	r0, #1
}
 8012dd4:	bd38      	pop	{r3, r4, r5, pc}
      TU_ASSERT(send_csw(p_msc));
 8012dd6:	f7ff ffcb 	bl	8012d70 <send_csw.constprop.0>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d1f9      	bne.n	8012dd2 <proc_stage_status.constprop.0+0x2a>
 8012dde:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012de2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012de6:	07db      	lsls	r3, r3, #31
 8012de8:	d5f4      	bpl.n	8012dd4 <proc_stage_status.constprop.0+0x2c>
 8012dea:	be00      	bkpt	0x0000
 8012dec:	e7f2      	b.n	8012dd4 <proc_stage_status.constprop.0+0x2c>
 8012dee:	bf00      	nop
 8012df0:	20011478 	.word	0x20011478

08012df4 <proc_async_io_done>:
static void proc_async_io_done(void *bytes_io) {
 8012df4:	b510      	push	{r4, lr}
  TU_VERIFY(p_msc->pending_io, );
 8012df6:	4c0e      	ldr	r4, [pc, #56]	@ (8012e30 <proc_async_io_done+0x3c>)
static void proc_async_io_done(void *bytes_io) {
 8012df8:	4601      	mov	r1, r0
  TU_VERIFY(p_msc->pending_io, );
 8012dfa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8012dfe:	b1ab      	cbz	r3, 8012e2c <proc_async_io_done+0x38>
  const uint8_t cmd = p_msc->cbw.command[0];
 8012e00:	7be3      	ldrb	r3, [r4, #15]
  p_msc->pending_io = 0;
 8012e02:	2200      	movs	r2, #0
  switch (cmd) {
 8012e04:	2b28      	cmp	r3, #40	@ 0x28
  p_msc->pending_io = 0;
 8012e06:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  switch (cmd) {
 8012e0a:	d009      	beq.n	8012e20 <proc_async_io_done+0x2c>
 8012e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e0e:	d00a      	beq.n	8012e26 <proc_async_io_done+0x32>
  if (p_msc->stage == MSC_STAGE_STATUS) {
 8012e10:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d109      	bne.n	8012e2c <proc_async_io_done+0x38>
}
 8012e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    proc_stage_status(p_msc);
 8012e1c:	f7ff bfc4 	b.w	8012da8 <proc_stage_status.constprop.0>
      proc_read_io_data(p_msc, nbytes);
 8012e20:	f7ff ff2a 	bl	8012c78 <proc_read_io_data.constprop.0>
      break;
 8012e24:	e7f4      	b.n	8012e10 <proc_async_io_done+0x1c>
      proc_write_io_data(p_msc, (uint32_t) nbytes, nbytes);
 8012e26:	f7ff fee5 	bl	8012bf4 <proc_write_io_data.constprop.0>
      break;
 8012e2a:	e7f1      	b.n	8012e10 <proc_async_io_done+0x1c>
}
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	20011478 	.word	0x20011478

08012e34 <tud_msc_inquiry_cb>:
}
 8012e34:	4770      	bx	lr
	...

08012e38 <tud_msc_set_sense>:
  _mscd_itf.sense_key           = sense_key;
 8012e38:	4804      	ldr	r0, [pc, #16]	@ (8012e4c <tud_msc_set_sense+0x14>)
 8012e3a:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 8012e3e:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8012e42:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
}
 8012e46:	2001      	movs	r0, #1
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	20011478 	.word	0x20011478

08012e50 <tud_msc_async_io_done>:
bool tud_msc_async_io_done(int32_t bytes_io, bool in_isr) {
 8012e50:	b508      	push	{r3, lr}
  TU_VERIFY(_mscd_itf.pending_io);
 8012e52:	4b08      	ldr	r3, [pc, #32]	@ (8012e74 <tud_msc_async_io_done+0x24>)
bool tud_msc_async_io_done(int32_t bytes_io, bool in_isr) {
 8012e54:	460a      	mov	r2, r1
  TU_VERIFY(_mscd_itf.pending_io);
 8012e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012e5a:	b14b      	cbz	r3, 8012e70 <tud_msc_async_io_done+0x20>
    bytes_io = TUD_MSC_RET_ERROR; // 0 is treated as error, no reason to call this with BUSY here
 8012e5c:	2800      	cmp	r0, #0
  usbd_defer_func(proc_async_io_done, (void *) (intptr_t) bytes_io, in_isr);
 8012e5e:	bf14      	ite	ne
 8012e60:	4601      	movne	r1, r0
 8012e62:	f04f 31ff 	moveq.w	r1, #4294967295
 8012e66:	4804      	ldr	r0, [pc, #16]	@ (8012e78 <tud_msc_async_io_done+0x28>)
 8012e68:	f000 ffd8 	bl	8013e1c <usbd_defer_func>
  return true;
 8012e6c:	2001      	movs	r0, #1
}
 8012e6e:	bd08      	pop	{r3, pc}
  TU_VERIFY(_mscd_itf.pending_io);
 8012e70:	4618      	mov	r0, r3
 8012e72:	e7fc      	b.n	8012e6e <tud_msc_async_io_done+0x1e>
 8012e74:	20011478 	.word	0x20011478
 8012e78:	08012df5 	.word	0x08012df5

08012e7c <mscd_init>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8012e7c:	2240      	movs	r2, #64	@ 0x40
 8012e7e:	2100      	movs	r1, #0
 8012e80:	4801      	ldr	r0, [pc, #4]	@ (8012e88 <mscd_init+0xc>)
 8012e82:	f002 bff5 	b.w	8015e70 <memset>
 8012e86:	bf00      	nop
 8012e88:	20011478 	.word	0x20011478

08012e8c <mscd_reset>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8012e8c:	2240      	movs	r2, #64	@ 0x40
 8012e8e:	2100      	movs	r1, #0
 8012e90:	4801      	ldr	r0, [pc, #4]	@ (8012e98 <mscd_reset+0xc>)
 8012e92:	f002 bfed 	b.w	8015e70 <memset>
 8012e96:	bf00      	nop
 8012e98:	20011478 	.word	0x20011478

08012e9c <mscd_open>:
uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len) {
 8012e9c:	b513      	push	{r0, r1, r4, lr}
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8012e9e:	794b      	ldrb	r3, [r1, #5]
 8012ea0:	2b08      	cmp	r3, #8
 8012ea2:	d10e      	bne.n	8012ec2 <mscd_open+0x26>
 8012ea4:	798b      	ldrb	r3, [r1, #6]
 8012ea6:	2b06      	cmp	r3, #6
 8012ea8:	d10b      	bne.n	8012ec2 <mscd_open+0x26>
 8012eaa:	79cb      	ldrb	r3, [r1, #7]
 8012eac:	2b50      	cmp	r3, #80	@ 0x50
 8012eae:	d108      	bne.n	8012ec2 <mscd_open+0x26>
  TU_ASSERT(max_len >= drv_len, 0); // Max length must be at least 1 interface + 2 endpoints
 8012eb0:	2a16      	cmp	r2, #22
 8012eb2:	d809      	bhi.n	8012ec8 <mscd_open+0x2c>
 8012eb4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012eb8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012ebc:	07da      	lsls	r2, r3, #31
 8012ebe:	d500      	bpl.n	8012ec2 <mscd_open+0x26>
 8012ec0:	be00      	bkpt	0x0000
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8012ec2:	2000      	movs	r0, #0
}
 8012ec4:	b002      	add	sp, #8
 8012ec6:	bd10      	pop	{r4, pc}
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8012ec8:	788a      	ldrb	r2, [r1, #2]
 8012eca:	4b0f      	ldr	r3, [pc, #60]	@ (8012f08 <mscd_open+0x6c>)
 8012ecc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  TU_ASSERT(usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0);
 8012ed0:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
  p_msc->rhport = rhport;
 8012ed4:	77d8      	strb	r0, [r3, #31]
  TU_ASSERT(usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0);
 8012ed6:	332f      	adds	r3, #47	@ 0x2f
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012ed8:	780c      	ldrb	r4, [r1, #0]
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	2302      	movs	r3, #2
 8012ede:	9201      	str	r2, [sp, #4]
 8012ee0:	4421      	add	r1, r4
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	f000 fff8 	bl	8013ed8 <usbd_open_edpt_pair>
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	d0e3      	beq.n	8012eb4 <mscd_open+0x18>
  TU_ASSERT(prepare_cbw(p_msc), drv_len);
 8012eec:	f7ff ff30 	bl	8012d50 <prepare_cbw.constprop.0>
 8012ef0:	b928      	cbnz	r0, 8012efe <mscd_open+0x62>
 8012ef2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012ef6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012efa:	07db      	lsls	r3, r3, #31
 8012efc:	d401      	bmi.n	8012f02 <mscd_open+0x66>
 8012efe:	2017      	movs	r0, #23
 8012f00:	e7e0      	b.n	8012ec4 <mscd_open+0x28>
 8012f02:	be00      	bkpt	0x0000
 8012f04:	e7fb      	b.n	8012efe <mscd_open+0x62>
 8012f06:	bf00      	nop
 8012f08:	20011478 	.word	0x20011478

08012f0c <mscd_control_xfer_cb>:
  if (stage != CONTROL_STAGE_SETUP) {
 8012f0c:	2901      	cmp	r1, #1
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request) {
 8012f0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f10:	4605      	mov	r5, r0
 8012f12:	4614      	mov	r4, r2
  if (stage != CONTROL_STAGE_SETUP) {
 8012f14:	d002      	beq.n	8012f1c <mscd_control_xfer_cb+0x10>
    return true; // nothing to do with DATA & ACK stage
 8012f16:	2001      	movs	r0, #1
}
 8012f18:	b003      	add	sp, #12
 8012f1a:	bd30      	pop	{r4, r5, pc}
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8012f1c:	7813      	ldrb	r3, [r2, #0]
 8012f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012f22:	2a02      	cmp	r2, #2
 8012f24:	d136      	bne.n	8012f94 <mscd_control_xfer_cb+0x88>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8012f26:	7862      	ldrb	r2, [r4, #1]
 8012f28:	2a01      	cmp	r2, #1
 8012f2a:	d133      	bne.n	8012f94 <mscd_control_xfer_cb+0x88>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8012f2c:	8862      	ldrh	r2, [r4, #2]
 8012f2e:	bb8a      	cbnz	r2, 8012f94 <mscd_control_xfer_cb+0x88>
    if (p_msc->stage == MSC_STAGE_NEED_RESET) {
 8012f30:	4933      	ldr	r1, [pc, #204]	@ (8013000 <mscd_control_xfer_cb+0xf4>)
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 8012f32:	88a3      	ldrh	r3, [r4, #4]
    if (p_msc->stage == MSC_STAGE_NEED_RESET) {
 8012f34:	f891 2038 	ldrb.w	r2, [r1, #56]	@ 0x38
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2a04      	cmp	r2, #4
 8012f3c:	d103      	bne.n	8012f46 <mscd_control_xfer_cb+0x3a>
      usbd_edpt_stall(rhport, ep_addr);
 8012f3e:	4619      	mov	r1, r3
 8012f40:	f001 f854 	bl	8013fec <usbd_edpt_stall>
 8012f44:	e7e7      	b.n	8012f16 <mscd_control_xfer_cb+0xa>
      if (ep_addr == p_msc->ep_in) {
 8012f46:	f891 402e 	ldrb.w	r4, [r1, #46]	@ 0x2e
 8012f4a:	429c      	cmp	r4, r3
 8012f4c:	d10e      	bne.n	8012f6c <mscd_control_xfer_cb+0x60>
        if (p_msc->stage == MSC_STAGE_STATUS) {
 8012f4e:	2a02      	cmp	r2, #2
 8012f50:	d1e1      	bne.n	8012f16 <mscd_control_xfer_cb+0xa>
          TU_ASSERT(send_csw(p_msc));
 8012f52:	f7ff ff0d 	bl	8012d70 <send_csw.constprop.0>
            TU_ASSERT(prepare_cbw(p_msc));
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d1dd      	bne.n	8012f16 <mscd_control_xfer_cb+0xa>
 8012f5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012f5e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8012f62:	07db      	lsls	r3, r3, #31
 8012f64:	d500      	bpl.n	8012f68 <mscd_control_xfer_cb+0x5c>
 8012f66:	be00      	bkpt	0x0000
          TU_ASSERT(send_csw(p_msc));
 8012f68:	2000      	movs	r0, #0
 8012f6a:	e7d5      	b.n	8012f18 <mscd_control_xfer_cb+0xc>
      } else if (ep_addr == p_msc->ep_out) {
 8012f6c:	f891 402f 	ldrb.w	r4, [r1, #47]	@ 0x2f
 8012f70:	429c      	cmp	r4, r3
 8012f72:	d1d0      	bne.n	8012f16 <mscd_control_xfer_cb+0xa>
        if (p_msc->stage == MSC_STAGE_CMD) {
 8012f74:	2a00      	cmp	r2, #0
 8012f76:	d1ce      	bne.n	8012f16 <mscd_control_xfer_cb+0xa>
bool usbd_edpt_iso_activate(uint8_t rhport,  tusb_desc_endpoint_t const * p_endpoint_desc);

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr) {
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8012f78:	4621      	mov	r1, r4
 8012f7a:	f001 f829 	bl	8013fd0 <usbd_edpt_busy>
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d1c9      	bne.n	8012f16 <mscd_control_xfer_cb+0xa>
 8012f82:	4621      	mov	r1, r4
 8012f84:	4628      	mov	r0, r5
 8012f86:	f001 f86d 	bl	8014064 <usbd_edpt_stalled>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	d1c3      	bne.n	8012f16 <mscd_control_xfer_cb+0xa>
            TU_ASSERT(prepare_cbw(p_msc));
 8012f8e:	f7ff fedf 	bl	8012d50 <prepare_cbw.constprop.0>
 8012f92:	e7e0      	b.n	8012f56 <mscd_control_xfer_cb+0x4a>
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8012f94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012f98:	2b20      	cmp	r3, #32
 8012f9a:	d1e5      	bne.n	8012f68 <mscd_control_xfer_cb+0x5c>
  switch ( request->bRequest ) {
 8012f9c:	7863      	ldrb	r3, [r4, #1]
 8012f9e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012fa0:	d010      	beq.n	8012fc4 <mscd_control_xfer_cb+0xb8>
 8012fa2:	2bff      	cmp	r3, #255	@ 0xff
 8012fa4:	d1e0      	bne.n	8012f68 <mscd_control_xfer_cb+0x5c>
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8012fa6:	8863      	ldrh	r3, [r4, #2]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d1dd      	bne.n	8012f68 <mscd_control_xfer_cb+0x5c>
 8012fac:	88e3      	ldrh	r3, [r4, #6]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d1da      	bne.n	8012f68 <mscd_control_xfer_cb+0x5c>
  p_msc->total_len   = 0;
 8012fb2:	4a13      	ldr	r2, [pc, #76]	@ (8013000 <mscd_control_xfer_cb+0xf4>)
      tud_control_status(rhport, request);
 8012fb4:	4621      	mov	r1, r4
 8012fb6:	4628      	mov	r0, r5
  p_msc->stage       = MSC_STAGE_CMD;
 8012fb8:	6393      	str	r3, [r2, #56]	@ 0x38
  p_msc->xferred_len = 0;
 8012fba:	e9c2 330c 	strd	r3, r3, [r2, #48]	@ 0x30
      tud_control_status(rhport, request);
 8012fbe:	f001 fbe5 	bl	801478c <tud_control_status>
    break;
 8012fc2:	e7a8      	b.n	8012f16 <mscd_control_xfer_cb+0xa>
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 8012fc4:	8863      	ldrh	r3, [r4, #2]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1ce      	bne.n	8012f68 <mscd_control_xfer_cb+0x5c>
 8012fca:	88e3      	ldrh	r3, [r4, #6]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d1cb      	bne.n	8012f68 <mscd_control_xfer_cb+0x5c>
      uint8_t maxlun = 1;
 8012fd0:	f88d 3007 	strb.w	r3, [sp, #7]
      if (tud_msc_get_maxlun_cb) {
 8012fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8013004 <mscd_control_xfer_cb+0xf8>)
 8012fd6:	b11b      	cbz	r3, 8012fe0 <mscd_control_xfer_cb+0xd4>
        maxlun = tud_msc_get_maxlun_cb();
 8012fd8:	f3af 8000 	nop.w
 8012fdc:	f88d 0007 	strb.w	r0, [sp, #7]
      TU_VERIFY(maxlun);
 8012fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d0bf      	beq.n	8012f68 <mscd_control_xfer_cb+0x5c>
      maxlun--; // MAX LUN is minus 1 by specs
 8012fe8:	3b01      	subs	r3, #1
      tud_control_xfer(rhport, request, &maxlun, 1);
 8012fea:	f10d 0207 	add.w	r2, sp, #7
 8012fee:	4621      	mov	r1, r4
 8012ff0:	4628      	mov	r0, r5
      maxlun--; // MAX LUN is minus 1 by specs
 8012ff2:	f88d 3007 	strb.w	r3, [sp, #7]
      tud_control_xfer(rhport, request, &maxlun, 1);
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	f001 fbda 	bl	80147b0 <tud_control_xfer>
      break;
 8012ffc:	e78b      	b.n	8012f16 <mscd_control_xfer_cb+0xa>
 8012ffe:	bf00      	nop
 8013000:	20011478 	.word	0x20011478
 8013004:	00000000 	.word	0x00000000

08013008 <mscd_xfer_cb>:
bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes) {
 8013008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (p_msc->stage) {
 801300c:	4cb2      	ldr	r4, [pc, #712]	@ (80132d8 <mscd_xfer_cb+0x2d0>)
bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes) {
 801300e:	b08a      	sub	sp, #40	@ 0x28
 8013010:	4606      	mov	r6, r0
 8013012:	468c      	mov	ip, r1
  switch (p_msc->stage) {
 8013014:	f894 a038 	ldrb.w	sl, [r4, #56]	@ 0x38
bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes) {
 8013018:	461d      	mov	r5, r3
  switch (p_msc->stage) {
 801301a:	f1ba 0f01 	cmp.w	sl, #1
 801301e:	f000 81aa 	beq.w	8013376 <mscd_xfer_cb+0x36e>
 8013022:	f1ba 0f03 	cmp.w	sl, #3
 8013026:	f000 81ff 	beq.w	8013428 <mscd_xfer_cb+0x420>
 801302a:	f1ba 0f00 	cmp.w	sl, #0
 801302e:	d146      	bne.n	80130be <mscd_xfer_cb+0xb6>
      if (ep_addr != p_msc->ep_out) {
 8013030:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8013034:	428b      	cmp	r3, r1
 8013036:	d003      	beq.n	8013040 <mscd_xfer_cb+0x38>
        return true;
 8013038:	2001      	movs	r0, #1
}
 801303a:	b00a      	add	sp, #40	@ 0x28
 801303c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return *((uint32_t const *) mem);
 8013040:	f8df 82a0 	ldr.w	r8, [pc, #672]	@ 80132e4 <mscd_xfer_cb+0x2dc>
      if (!(xferred_bytes == sizeof(msc_cbw_t) && signature == MSC_CBW_SIGNATURE)) {
 8013044:	2d1f      	cmp	r5, #31
 8013046:	f8d8 2000 	ldr.w	r2, [r8]
 801304a:	46c1      	mov	r9, r8
 801304c:	d102      	bne.n	8013054 <mscd_xfer_cb+0x4c>
 801304e:	4ba3      	ldr	r3, [pc, #652]	@ (80132dc <mscd_xfer_cb+0x2d4>)
 8013050:	429a      	cmp	r2, r3
 8013052:	d00e      	beq.n	8013072 <mscd_xfer_cb+0x6a>
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8013054:	2304      	movs	r3, #4
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8013056:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 801305a:	4630      	mov	r0, r6
        p_msc->stage = MSC_STAGE_NEED_RESET;
 801305c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8013060:	f000 ffc4 	bl	8013fec <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 8013064:	f894 102f 	ldrb.w	r1, [r4, #47]	@ 0x2f
 8013068:	4630      	mov	r0, r6
 801306a:	f000 ffbf 	bl	8013fec <usbd_edpt_stall>
        return false;
 801306e:	2000      	movs	r0, #0
 8013070:	e7e3      	b.n	801303a <mscd_xfer_cb+0x32>
      memcpy(p_cbw, _mscd_epbuf.buf, sizeof(msc_cbw_t));
 8013072:	4647      	mov	r7, r8
 8013074:	4625      	mov	r5, r4
 8013076:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801307a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801307e:	c507      	stmia	r5!, {r0, r1, r2}
 8013080:	f825 3b02 	strh.w	r3, [r5], #2
 8013084:	0c1b      	lsrs	r3, r3, #16
      if ((SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0])) {
 8013086:	7be2      	ldrb	r2, [r4, #15]
      memcpy(p_cbw, _mscd_epbuf.buf, sizeof(msc_cbw_t));
 8013088:	702b      	strb	r3, [r5, #0]
      p_csw->signature    = MSC_CSW_SIGNATURE;
 801308a:	4b95      	ldr	r3, [pc, #596]	@ (80132e0 <mscd_xfer_cb+0x2d8>)
      if ((SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0])) {
 801308c:	f002 01fd 	and.w	r1, r2, #253	@ 0xfd
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 8013090:	f884 a02c 	strb.w	sl, [r4, #44]	@ 0x2c
      p_csw->signature    = MSC_CSW_SIGNATURE;
 8013094:	6223      	str	r3, [r4, #32]
      if ((SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0])) {
 8013096:	2928      	cmp	r1, #40	@ 0x28
      p_csw->tag          = p_cbw->tag;
 8013098:	6863      	ldr	r3, [r4, #4]
      p_csw->data_residue = 0;
 801309a:	e9c4 3a09 	strd	r3, sl, [r4, #36]	@ 0x24
      p_msc->stage = MSC_STAGE_DATA;
 801309e:	f04f 0301 	mov.w	r3, #1
 80130a2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      p_msc->total_len = p_cbw->total_bytes;
 80130a6:	68a3      	ldr	r3, [r4, #8]
      p_msc->xferred_len = 0;
 80130a8:	e9c4 3a0c 	strd	r3, sl, [r4, #48]	@ 0x30
      if ((SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0])) {
 80130ac:	d127      	bne.n	80130fe <mscd_xfer_cb+0xf6>
  return *((uint16_t const *) mem);
 80130ae:	8ae1      	ldrh	r1, [r4, #22]
  if (cbw->total_bytes == 0) {
 80130b0:	b973      	cbnz	r3, 80130d0 <mscd_xfer_cb+0xc8>
    if (block_count) {
 80130b2:	2900      	cmp	r1, #0
 80130b4:	f000 8159 	beq.w	801336a <mscd_xfer_cb+0x362>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80130b8:	2002      	movs	r0, #2
          fail_scsi_op(p_msc, status);
 80130ba:	f7ff fd43 	bl	8012b44 <fail_scsi_op.constprop.0>
  if (p_msc->stage == MSC_STAGE_STATUS) {
 80130be:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80130c2:	2b02      	cmp	r3, #2
 80130c4:	d1b8      	bne.n	8013038 <mscd_xfer_cb+0x30>
    TU_ASSERT(proc_stage_status(p_msc));
 80130c6:	f7ff fe6f 	bl	8012da8 <proc_stage_status.constprop.0>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	d1b4      	bne.n	8013038 <mscd_xfer_cb+0x30>
 80130ce:	e155      	b.n	801337c <mscd_xfer_cb+0x374>
  return tu_bit_test(dir, 7);
 80130d0:	7b20      	ldrb	r0, [r4, #12]
    if (SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir)) {
 80130d2:	2a28      	cmp	r2, #40	@ 0x28
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80130d4:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 80130d8:	d10b      	bne.n	80130f2 <mscd_xfer_cb+0xea>
 80130da:	2800      	cmp	r0, #0
 80130dc:	d0ec      	beq.n	80130b8 <mscd_xfer_cb+0xb0>
    } else if (0 == block_count) {
 80130de:	b1a9      	cbz	r1, 801310c <mscd_xfer_cb+0x104>
  return tu_ntohs(block_count);
 80130e0:	ba49      	rev16	r1, r1
 80130e2:	b289      	uxth	r1, r1
    } else if (cbw->total_bytes / block_count == 0) {
 80130e4:	428b      	cmp	r3, r1
 80130e6:	d3e7      	bcc.n	80130b8 <mscd_xfer_cb+0xb0>
          if (SCSI_CMD_READ_10 == p_cbw->command[0]) {
 80130e8:	2a28      	cmp	r2, #40	@ 0x28
 80130ea:	d105      	bne.n	80130f8 <mscd_xfer_cb+0xf0>
            proc_read10_cmd(p_msc);
 80130ec:	f7ff fdfe 	bl	8012cec <proc_read10_cmd.constprop.0>
 80130f0:	e7e5      	b.n	80130be <mscd_xfer_cb+0xb6>
    } else if (SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir)) {
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d0f3      	beq.n	80130de <mscd_xfer_cb+0xd6>
 80130f6:	e7df      	b.n	80130b8 <mscd_xfer_cb+0xb0>
            proc_write10_cmd(p_msc);
 80130f8:	f7ff fd4c 	bl	8012b94 <proc_write10_cmd.constprop.0>
 80130fc:	e7df      	b.n	80130be <mscd_xfer_cb+0xb6>
        if ((p_cbw->total_bytes > 0) && !is_data_in(p_cbw->dir)) {
 80130fe:	b183      	cbz	r3, 8013122 <mscd_xfer_cb+0x11a>
  return tu_bit_test(dir, 7);
 8013100:	7b21      	ldrb	r1, [r4, #12]
        if ((p_cbw->total_bytes > 0) && !is_data_in(p_cbw->dir)) {
 8013102:	09c9      	lsrs	r1, r1, #7
 8013104:	d10d      	bne.n	8013122 <mscd_xfer_cb+0x11a>
          if (p_cbw->total_bytes > CFG_TUD_MSC_EP_BUFSIZE) {
 8013106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801310a:	d901      	bls.n	8013110 <mscd_xfer_cb+0x108>
      status = MSC_CSW_STATUS_FAILED;
 801310c:	2001      	movs	r0, #1
 801310e:	e7d4      	b.n	80130ba <mscd_xfer_cb+0xb2>
            TU_ASSERT(usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_epbuf.buf, (uint16_t) p_msc->total_len));
 8013110:	b29b      	uxth	r3, r3
 8013112:	4a74      	ldr	r2, [pc, #464]	@ (80132e4 <mscd_xfer_cb+0x2dc>)
 8013114:	4661      	mov	r1, ip
              TU_ASSERT(usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_epbuf.buf, (uint16_t) p_msc->total_len));
 8013116:	4630      	mov	r0, r6
 8013118:	f000 ff2c 	bl	8013f74 <usbd_edpt_xfer>
        TU_ASSERT(prepare_cbw(p_msc));
 801311c:	2800      	cmp	r0, #0
 801311e:	d1ce      	bne.n	80130be <mscd_xfer_cb+0xb6>
 8013120:	e12c      	b.n	801337c <mscd_xfer_cb+0x374>
  switch (scsi_cmd[0]) {
 8013122:	2a25      	cmp	r2, #37	@ 0x25
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, CFG_TUD_MSC_EP_BUFSIZE);
 8013124:	7b67      	ldrb	r7, [r4, #13]
  switch (scsi_cmd[0]) {
 8013126:	d808      	bhi.n	801313a <mscd_xfer_cb+0x132>
 8013128:	2a19      	cmp	r2, #25
 801312a:	d814      	bhi.n	8013156 <mscd_xfer_cb+0x14e>
 801312c:	2a03      	cmp	r2, #3
 801312e:	f000 80e7 	beq.w	8013300 <mscd_xfer_cb+0x2f8>
 8013132:	2a12      	cmp	r2, #18
 8013134:	f000 8098 	beq.w	8013268 <mscd_xfer_cb+0x260>
 8013138:	b362      	cbz	r2, 8013194 <mscd_xfer_cb+0x18c>
          if ((resplen < 0) && (p_msc->sense_key == 0)) {
 801313a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1e4      	bne.n	801310c <mscd_xfer_cb+0x104>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, (uint16_t)p_msc->total_len);
 8013142:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013144:	4a67      	ldr	r2, [pc, #412]	@ (80132e4 <mscd_xfer_cb+0x2dc>)
 8013146:	4968      	ldr	r1, [pc, #416]	@ (80132e8 <mscd_xfer_cb+0x2e0>)
 8013148:	7b60      	ldrb	r0, [r4, #13]
 801314a:	f7ff f83b 	bl	80121c4 <tud_msc_scsi_cb>
          if (resplen < 0) {
 801314e:	2800      	cmp	r0, #0
 8013150:	f280 8104 	bge.w	801335c <mscd_xfer_cb+0x354>
 8013154:	e7da      	b.n	801310c <mscd_xfer_cb+0x104>
  switch (scsi_cmd[0]) {
 8013156:	3a1a      	subs	r2, #26
 8013158:	2a0b      	cmp	r2, #11
 801315a:	d8ee      	bhi.n	801313a <mscd_xfer_cb+0x132>
 801315c:	a301      	add	r3, pc, #4	@ (adr r3, 8013164 <mscd_xfer_cb+0x15c>)
 801315e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8013162:	bf00      	nop
 8013164:	080132a5 	.word	0x080132a5
 8013168:	080131b5 	.word	0x080131b5
 801316c:	0801313b 	.word	0x0801313b
 8013170:	0801313b 	.word	0x0801313b
 8013174:	080131d1 	.word	0x080131d1
 8013178:	0801313b 	.word	0x0801313b
 801317c:	0801313b 	.word	0x0801313b
 8013180:	0801313b 	.word	0x0801313b
 8013184:	0801313b 	.word	0x0801313b
 8013188:	08013223 	.word	0x08013223
 801318c:	0801313b 	.word	0x0801313b
 8013190:	080131e5 	.word	0x080131e5
      if (!tud_msc_test_unit_ready_cb(lun)) {
 8013194:	4638      	mov	r0, r7
 8013196:	f7fe ff93 	bl	80120c0 <tud_msc_test_unit_ready_cb>
        if (!tud_msc_prevent_allow_medium_removal_cb(lun, prevent_allow->prohibit_removal, prevent_allow->control)) {
 801319a:	2800      	cmp	r0, #0
 801319c:	f040 80e1 	bne.w	8013362 <mscd_xfer_cb+0x35a>
        if (p_msc->sense_key == 0) {
 80131a0:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1c8      	bne.n	801313a <mscd_xfer_cb+0x132>
  _mscd_itf.sense_key           = sense_key;
 80131a8:	2302      	movs	r3, #2
 80131aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 80131ae:	233a      	movs	r3, #58	@ 0x3a
 80131b0:	8763      	strh	r3, [r4, #58]	@ 0x3a
          if ((resplen < 0) && (p_msc->sense_key == 0)) {
 80131b2:	e7c2      	b.n	801313a <mscd_xfer_cb+0x132>
      if (tud_msc_start_stop_cb) {
 80131b4:	4b4d      	ldr	r3, [pc, #308]	@ (80132ec <mscd_xfer_cb+0x2e4>)
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	f000 80d3 	beq.w	8013362 <mscd_xfer_cb+0x35a>
        if (!tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject)) {
 80131bc:	7ce1      	ldrb	r1, [r4, #19]
 80131be:	4638      	mov	r0, r7
 80131c0:	f3c1 0340 	ubfx	r3, r1, #1, #1
 80131c4:	f001 0201 	and.w	r2, r1, #1
 80131c8:	0909      	lsrs	r1, r1, #4
 80131ca:	f7fe ff8f 	bl	80120ec <tud_msc_start_stop_cb>
 80131ce:	e7e4      	b.n	801319a <mscd_xfer_cb+0x192>
      if (tud_msc_prevent_allow_medium_removal_cb) {
 80131d0:	4b47      	ldr	r3, [pc, #284]	@ (80132f0 <mscd_xfer_cb+0x2e8>)
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 80c5 	beq.w	8013362 <mscd_xfer_cb+0x35a>
        if (!tud_msc_prevent_allow_medium_removal_cb(lun, prevent_allow->prohibit_removal, prevent_allow->control)) {
 80131d8:	7d22      	ldrb	r2, [r4, #20]
 80131da:	4638      	mov	r0, r7
 80131dc:	7ce1      	ldrb	r1, [r4, #19]
 80131de:	f3af 8000 	nop.w
 80131e2:	e7da      	b.n	801319a <mscd_xfer_cb+0x192>
      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 80131e4:	aa04      	add	r2, sp, #16
 80131e6:	a905      	add	r1, sp, #20
 80131e8:	4638      	mov	r0, r7
 80131ea:	f7fe ff79 	bl	80120e0 <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0) {
 80131ee:	9b05      	ldr	r3, [sp, #20]
      block_size = (uint32_t)block_size_u16;
 80131f0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      if (block_count == 0 || block_size == 0) {
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d0d3      	beq.n	80131a0 <mscd_xfer_cb+0x198>
 80131f8:	2a00      	cmp	r2, #0
 80131fa:	d0d1      	beq.n	80131a0 <mscd_xfer_cb+0x198>
        read_capa10.last_lba = tu_htonl(block_count-1);
 80131fc:	3b01      	subs	r3, #1
        read_capa10.block_size = tu_htonl(block_size);
 80131fe:	ba12      	rev	r2, r2
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, CFG_TUD_MSC_EP_BUFSIZE);
 8013200:	2008      	movs	r0, #8
        read_capa10.last_lba = tu_htonl(block_count-1);
 8013202:	ba1b      	rev	r3, r3
  memcpy(dest, src, count);
 8013204:	e9c8 3200 	strd	r3, r2, [r8]
            if (p_cbw->total_bytes == 0) {
 8013208:	68a3      	ldr	r3, [r4, #8]
 801320a:	2b00      	cmp	r3, #0
 801320c:	f43f af7e 	beq.w	801310c <mscd_xfer_cb+0x104>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8013210:	4283      	cmp	r3, r0
              TU_ASSERT(usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_epbuf.buf, (uint16_t) p_msc->total_len));
 8013212:	4a34      	ldr	r2, [pc, #208]	@ (80132e4 <mscd_xfer_cb+0x2dc>)
 8013214:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 8013218:	bf28      	it	cs
 801321a:	4603      	movcs	r3, r0
              p_msc->total_len = tu_min32((uint32_t)resplen, p_cbw->total_bytes);
 801321c:	6323      	str	r3, [r4, #48]	@ 0x30
              TU_ASSERT(usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_epbuf.buf, (uint16_t) p_msc->total_len));
 801321e:	b29b      	uxth	r3, r3
 8013220:	e779      	b.n	8013116 <mscd_xfer_cb+0x10e>
      scsi_read_format_capacity_data_t read_fmt_capa = {
 8013222:	2300      	movs	r3, #0
 8013224:	ad05      	add	r5, sp, #20
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8013226:	f10d 020e 	add.w	r2, sp, #14
 801322a:	a904      	add	r1, sp, #16
      scsi_read_format_capacity_data_t read_fmt_capa = {
 801322c:	9305      	str	r3, [sp, #20]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 801322e:	4638      	mov	r0, r7
      scsi_read_format_capacity_data_t read_fmt_capa = {
 8013230:	e9c5 3301 	strd	r3, r3, [r5, #4]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8013234:	f7fe ff54 	bl	80120e0 <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0) {
 8013238:	9a04      	ldr	r2, [sp, #16]
 801323a:	2a00      	cmp	r2, #0
 801323c:	d0b0      	beq.n	80131a0 <mscd_xfer_cb+0x198>
 801323e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d0ac      	beq.n	80131a0 <mscd_xfer_cb+0x198>
        read_fmt_capa.block_num = tu_htonl(block_count);
 8013246:	ba12      	rev	r2, r2
  memcpy(dest, src, count);
 8013248:	2108      	movs	r1, #8
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 801324a:	ba5b      	rev16	r3, r3
 801324c:	9206      	str	r2, [sp, #24]
 801324e:	2202      	movs	r2, #2
 8013250:	f88d 1017 	strb.w	r1, [sp, #23]
 8013254:	f88d 201c 	strb.w	r2, [sp, #28]
 8013258:	f8ad 301e 	strh.w	r3, [sp, #30]
 801325c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013260:	e889 0007 	stmia.w	r9, {r0, r1, r2}
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, CFG_TUD_MSC_EP_BUFSIZE);
 8013264:	200c      	movs	r0, #12
 8013266:	e7cf      	b.n	8013208 <mscd_xfer_cb+0x200>
      tu_memclr(inquiry_rsp, sizeof(scsi_inquiry_resp_t));
 8013268:	2224      	movs	r2, #36	@ 0x24
 801326a:	2100      	movs	r1, #0
 801326c:	481d      	ldr	r0, [pc, #116]	@ (80132e4 <mscd_xfer_cb+0x2dc>)
 801326e:	f002 fdff 	bl	8015e70 <memset>
      inquiry_rsp->is_removable = 1;
 8013272:	4b20      	ldr	r3, [pc, #128]	@ (80132f4 <mscd_xfer_cb+0x2ec>)
      resplen = (int32_t) tud_msc_inquiry2_cb(lun, inquiry_rsp, bufsize);
 8013274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013278:	491a      	ldr	r1, [pc, #104]	@ (80132e4 <mscd_xfer_cb+0x2dc>)
      inquiry_rsp->is_removable = 1;
 801327a:	f8c8 3000 	str.w	r3, [r8]
      inquiry_rsp->additional_length = sizeof(scsi_inquiry_resp_t) - 5;
 801327e:	231f      	movs	r3, #31
      resplen = (int32_t) tud_msc_inquiry2_cb(lun, inquiry_rsp, bufsize);
 8013280:	4638      	mov	r0, r7
      inquiry_rsp->additional_length = sizeof(scsi_inquiry_resp_t) - 5;
 8013282:	f888 3004 	strb.w	r3, [r8, #4]
      resplen = (int32_t) tud_msc_inquiry2_cb(lun, inquiry_rsp, bufsize);
 8013286:	f7fe fee1 	bl	801204c <tud_msc_inquiry2_cb>
      if (resplen == 0) {
 801328a:	2800      	cmp	r0, #0
 801328c:	f040 80f0 	bne.w	8013470 <mscd_xfer_cb+0x468>
        tud_msc_inquiry_cb(lun, inquiry_rsp->vendor_id, inquiry_rsp->product_id, inquiry_rsp->product_rev);
 8013290:	4b19      	ldr	r3, [pc, #100]	@ (80132f8 <mscd_xfer_cb+0x2f0>)
 8013292:	4638      	mov	r0, r7
 8013294:	f1a3 0210 	sub.w	r2, r3, #16
 8013298:	f1a3 0118 	sub.w	r1, r3, #24
 801329c:	f7ff fdca 	bl	8012e34 <tud_msc_inquiry_cb>
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, CFG_TUD_MSC_EP_BUFSIZE);
 80132a0:	2024      	movs	r0, #36	@ 0x24
 80132a2:	e7b1      	b.n	8013208 <mscd_xfer_cb+0x200>
      scsi_mode_sense6_resp_t mode_resp = {
 80132a4:	9b05      	ldr	r3, [sp, #20]
 80132a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80132aa:	f043 0303 	orr.w	r3, r3, #3
 80132ae:	9305      	str	r3, [sp, #20]
      if (tud_msc_is_writable_cb) {
 80132b0:	4b12      	ldr	r3, [pc, #72]	@ (80132fc <mscd_xfer_cb+0x2f4>)
 80132b2:	b17b      	cbz	r3, 80132d4 <mscd_xfer_cb+0x2cc>
        writable = tud_msc_is_writable_cb(lun);
 80132b4:	4638      	mov	r0, r7
 80132b6:	f7fe ff53 	bl	8012160 <tud_msc_is_writable_cb>
      mode_resp.write_protected = !writable;
 80132ba:	f080 0001 	eor.w	r0, r0, #1
 80132be:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80132c2:	f360 13c7 	bfi	r3, r0, #7, #1
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, CFG_TUD_MSC_EP_BUFSIZE);
 80132c6:	2004      	movs	r0, #4
      mode_resp.write_protected = !writable;
 80132c8:	f88d 3016 	strb.w	r3, [sp, #22]
 80132cc:	9b05      	ldr	r3, [sp, #20]
 80132ce:	f8c8 3000 	str.w	r3, [r8]
          } else if (resplen == 0) {
 80132d2:	e799      	b.n	8013208 <mscd_xfer_cb+0x200>
      bool writable = true;
 80132d4:	2001      	movs	r0, #1
 80132d6:	e7f0      	b.n	80132ba <mscd_xfer_cb+0x2b2>
 80132d8:	20011478 	.word	0x20011478
 80132dc:	43425355 	.word	0x43425355
 80132e0:	53425355 	.word	0x53425355
 80132e4:	20011278 	.word	0x20011278
 80132e8:	20011487 	.word	0x20011487
 80132ec:	080120ed 	.word	0x080120ed
 80132f0:	00000000 	.word	0x00000000
 80132f4:	02028000 	.word	0x02028000
 80132f8:	20011298 	.word	0x20011298
 80132fc:	08012161 	.word	0x08012161
      sense_rsp.sense_key = (uint8_t)(p_msc->sense_key & 0x0F);
 8013300:	f894 5039 	ldrb.w	r5, [r4, #57]	@ 0x39
      scsi_sense_fixed_resp_t sense_rsp = {
 8013304:	2212      	movs	r2, #18
 8013306:	2100      	movs	r1, #0
 8013308:	a805      	add	r0, sp, #20
      sense_rsp.sense_key = (uint8_t)(p_msc->sense_key & 0x0F);
 801330a:	f005 050f 	and.w	r5, r5, #15
      sense_rsp.add_sense_code = p_msc->add_sense_code;
 801330e:	f8b4 803a 	ldrh.w	r8, [r4, #58]	@ 0x3a
      scsi_sense_fixed_resp_t sense_rsp = {
 8013312:	f002 fdad 	bl	8015e70 <memset>
 8013316:	23f0      	movs	r3, #240	@ 0xf0
 8013318:	f88d 5016 	strb.w	r5, [sp, #22]
 801331c:	ad05      	add	r5, sp, #20
 801331e:	f88d 3014 	strb.w	r3, [sp, #20]
 8013322:	230a      	movs	r3, #10
 8013324:	f8ad 8020 	strh.w	r8, [sp, #32]
 8013328:	f88d 301b 	strb.w	r3, [sp, #27]
 801332c:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 801347c <mscd_xfer_cb+0x474>
 8013330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013336:	682b      	ldr	r3, [r5, #0]
 8013338:	f8ac 3000 	strh.w	r3, [ip]
      if (tud_msc_request_sense_cb) {
 801333c:	4b4e      	ldr	r3, [pc, #312]	@ (8013478 <mscd_xfer_cb+0x470>)
 801333e:	b1c3      	cbz	r3, 8013372 <mscd_xfer_cb+0x36a>
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t)bufsize);
 8013340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013344:	f1ac 0110 	sub.w	r1, ip, #16
 8013348:	4638      	mov	r0, r7
 801334a:	f3af 8000 	nop.w
  _mscd_itf.sense_key           = sense_key;
 801334e:	2300      	movs	r3, #0
          if ((resplen < 0) && (p_msc->sense_key == 0)) {
 8013350:	4298      	cmp	r0, r3
  _mscd_itf.sense_key           = sense_key;
 8013352:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  _mscd_itf.add_sense_code      = add_sense_code;
 8013356:	8763      	strh	r3, [r4, #58]	@ 0x3a
          if ((resplen < 0) && (p_msc->sense_key == 0)) {
 8013358:	f6ff aeef 	blt.w	801313a <mscd_xfer_cb+0x132>
          } else if (resplen == 0) {
 801335c:	2800      	cmp	r0, #0
 801335e:	f47f af53 	bne.w	8013208 <mscd_xfer_cb+0x200>
            if (p_cbw->total_bytes) {
 8013362:	68a3      	ldr	r3, [r4, #8]
 8013364:	2b00      	cmp	r3, #0
 8013366:	f47f aed1 	bne.w	801310c <mscd_xfer_cb+0x104>
          p_msc->stage = MSC_STAGE_STATUS;
 801336a:	2302      	movs	r3, #2
 801336c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8013370:	e6a5      	b.n	80130be <mscd_xfer_cb+0xb6>
      resplen = sizeof(sense_rsp);
 8013372:	2012      	movs	r0, #18
 8013374:	e7eb      	b.n	801334e <mscd_xfer_cb+0x346>
      TU_ASSERT(xferred_bytes <= CFG_TUD_MSC_EP_BUFSIZE); // sanity check to avoid buffer overflow
 8013376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801337a:	d908      	bls.n	801338e <mscd_xfer_cb+0x386>
 801337c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013380:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013384:	07d9      	lsls	r1, r3, #31
 8013386:	f57f ae72 	bpl.w	801306e <mscd_xfer_cb+0x66>
 801338a:	be00      	bkpt	0x0000
 801338c:	e66f      	b.n	801306e <mscd_xfer_cb+0x66>
      if (SCSI_CMD_READ_10 == p_cbw->command[0]) {
 801338e:	7be3      	ldrb	r3, [r4, #15]
        p_msc->xferred_len += xferred_bytes;
 8013390:	6b60      	ldr	r0, [r4, #52]	@ 0x34
      if (SCSI_CMD_READ_10 == p_cbw->command[0]) {
 8013392:	2b28      	cmp	r3, #40	@ 0x28
 8013394:	d105      	bne.n	80133a2 <mscd_xfer_cb+0x39a>
        p_msc->xferred_len += xferred_bytes;
 8013396:	4428      	add	r0, r5
        if ( p_msc->xferred_len >= p_msc->total_len ) {
 8013398:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801339a:	4298      	cmp	r0, r3
        p_msc->xferred_len += xferred_bytes;
 801339c:	6360      	str	r0, [r4, #52]	@ 0x34
        if ( p_msc->xferred_len >= p_msc->total_len ) {
 801339e:	d2e4      	bcs.n	801336a <mscd_xfer_cb+0x362>
 80133a0:	e6a4      	b.n	80130ec <mscd_xfer_cb+0xe4>
      } else if (SCSI_CMD_WRITE_10 == p_cbw->command[0]) {
 80133a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80133a4:	d122      	bne.n	80133ec <mscd_xfer_cb+0x3e4>
  return *((uint16_t const *) mem);
 80133a6:	8ae2      	ldrh	r2, [r4, #22]
  if (block_count == 0) {
 80133a8:	b12a      	cbz	r2, 80133b6 <mscd_xfer_cb+0x3ae>
  return tu_ntohs(block_count);
 80133aa:	ba52      	rev16	r2, r2
  return (uint16_t) (cbw->total_bytes / block_count);
 80133ac:	68a3      	ldr	r3, [r4, #8]
  return tu_ntohs(block_count);
 80133ae:	b292      	uxth	r2, r2
  return (uint16_t) (cbw->total_bytes / block_count);
 80133b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80133b4:	b29a      	uxth	r2, r3
  return *((uint32_t const *) mem);
 80133b6:	f8d4 1011 	ldr.w	r1, [r4, #17]
  p_msc->pending_io = 1;
 80133ba:	2301      	movs	r3, #1
  uint32_t const offset = p_msc->xferred_len % block_sz;
 80133bc:	fbb0 f6f2 	udiv	r6, r0, r2
  return tu_ntohl(lba); // lba is in Big Endian
 80133c0:	ba09      	rev	r1, r1
  int32_t nbytes =  tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_epbuf.buf, xferred_bytes);
 80133c2:	fb02 0216 	mls	r2, r2, r6, r0
  p_msc->pending_io = 1;
 80133c6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  int32_t nbytes =  tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_epbuf.buf, xferred_bytes);
 80133ca:	4431      	add	r1, r6
 80133cc:	9500      	str	r5, [sp, #0]
 80133ce:	4b2b      	ldr	r3, [pc, #172]	@ (801347c <mscd_xfer_cb+0x474>)
 80133d0:	7b60      	ldrb	r0, [r4, #13]
 80133d2:	f7fe fec7 	bl	8012164 <tud_msc_write10_cb>
  if (nbytes != TUD_MSC_RET_ASYNC) {
 80133d6:	1c82      	adds	r2, r0, #2
  int32_t nbytes =  tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_epbuf.buf, xferred_bytes);
 80133d8:	4601      	mov	r1, r0
  if (nbytes != TUD_MSC_RET_ASYNC) {
 80133da:	f43f ae70 	beq.w	80130be <mscd_xfer_cb+0xb6>
    p_msc->pending_io = 0;
 80133de:	2300      	movs	r3, #0
    proc_write_io_data(p_msc, xferred_bytes, nbytes);
 80133e0:	4628      	mov	r0, r5
    p_msc->pending_io = 0;
 80133e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    proc_write_io_data(p_msc, xferred_bytes, nbytes);
 80133e6:	f7ff fc05 	bl	8012bf4 <proc_write_io_data.constprop.0>
 80133ea:	e668      	b.n	80130be <mscd_xfer_cb+0xb6>
  return tu_bit_test(dir, 7);
 80133ec:	7b23      	ldrb	r3, [r4, #12]
        p_msc->xferred_len += xferred_bytes;
 80133ee:	4428      	add	r0, r5
        if ( !is_data_in(p_cbw->dir) ) {
 80133f0:	09db      	lsrs	r3, r3, #7
        p_msc->xferred_len += xferred_bytes;
 80133f2:	6360      	str	r0, [r4, #52]	@ 0x34
        if ( !is_data_in(p_cbw->dir) ) {
 80133f4:	d10b      	bne.n	801340e <mscd_xfer_cb+0x406>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_epbuf.buf, (uint16_t) p_msc->total_len);
 80133f6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80133f8:	f104 010f 	add.w	r1, r4, #15
 80133fc:	4a1f      	ldr	r2, [pc, #124]	@ (801347c <mscd_xfer_cb+0x474>)
 80133fe:	7b60      	ldrb	r0, [r4, #13]
 8013400:	f7fe fee0 	bl	80121c4 <tud_msc_scsi_cb>
          if ( cb_result < 0 ) {
 8013404:	2800      	cmp	r0, #0
 8013406:	da02      	bge.n	801340e <mscd_xfer_cb+0x406>
            fail_scsi_op(p_msc, MSC_CSW_STATUS_FAILED);
 8013408:	4650      	mov	r0, sl
 801340a:	f7ff fb9b 	bl	8012b44 <fail_scsi_op.constprop.0>
        if ( p_msc->xferred_len >= p_msc->total_len ) {
 801340e:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 8013412:	429a      	cmp	r2, r3
 8013414:	d2a9      	bcs.n	801336a <mscd_xfer_cb+0x362>
          TU_BREAKPOINT();
 8013416:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801341a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 801341e:	07db      	lsls	r3, r3, #31
 8013420:	f57f ae4d 	bpl.w	80130be <mscd_xfer_cb+0xb6>
 8013424:	be00      	bkpt	0x0000
 8013426:	e64a      	b.n	80130be <mscd_xfer_cb+0xb6>
      if ((ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t))) {
 8013428:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801342c:	428b      	cmp	r3, r1
 801342e:	f47f ae46 	bne.w	80130be <mscd_xfer_cb+0xb6>
 8013432:	2d0d      	cmp	r5, #13
 8013434:	f47f ae43 	bne.w	80130be <mscd_xfer_cb+0xb6>
        switch (p_cbw->command[0]) {
 8013438:	7be3      	ldrb	r3, [r4, #15]
 801343a:	2b28      	cmp	r3, #40	@ 0x28
 801343c:	d009      	beq.n	8013452 <mscd_xfer_cb+0x44a>
 801343e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013440:	d00f      	beq.n	8013462 <mscd_xfer_cb+0x45a>
            if (tud_msc_scsi_complete_cb) {
 8013442:	4b0f      	ldr	r3, [pc, #60]	@ (8013480 <mscd_xfer_cb+0x478>)
 8013444:	b153      	cbz	r3, 801345c <mscd_xfer_cb+0x454>
              tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8013446:	f104 010f 	add.w	r1, r4, #15
 801344a:	7b60      	ldrb	r0, [r4, #13]
 801344c:	f3af 8000 	nop.w
 8013450:	e004      	b.n	801345c <mscd_xfer_cb+0x454>
            if (tud_msc_read10_complete_cb) {
 8013452:	4b0c      	ldr	r3, [pc, #48]	@ (8013484 <mscd_xfer_cb+0x47c>)
 8013454:	b113      	cbz	r3, 801345c <mscd_xfer_cb+0x454>
              tud_msc_read10_complete_cb(p_cbw->lun);
 8013456:	7b60      	ldrb	r0, [r4, #13]
 8013458:	f3af 8000 	nop.w
        TU_ASSERT(prepare_cbw(p_msc));
 801345c:	f7ff fc78 	bl	8012d50 <prepare_cbw.constprop.0>
 8013460:	e65c      	b.n	801311c <mscd_xfer_cb+0x114>
            if (tud_msc_write10_complete_cb) {
 8013462:	4b09      	ldr	r3, [pc, #36]	@ (8013488 <mscd_xfer_cb+0x480>)
 8013464:	2b00      	cmp	r3, #0
 8013466:	d0f9      	beq.n	801345c <mscd_xfer_cb+0x454>
              tud_msc_write10_complete_cb(p_cbw->lun);
 8013468:	7b60      	ldrb	r0, [r4, #13]
 801346a:	f3af 8000 	nop.w
 801346e:	e7f5      	b.n	801345c <mscd_xfer_cb+0x454>
          if ((resplen < 0) && (p_msc->sense_key == 0)) {
 8013470:	f6ff ae63 	blt.w	801313a <mscd_xfer_cb+0x132>
 8013474:	e6c8      	b.n	8013208 <mscd_xfer_cb+0x200>
 8013476:	bf00      	nop
 8013478:	00000000 	.word	0x00000000
 801347c:	20011278 	.word	0x20011278
	...

0801348c <advance_index>:
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 801348c:	440a      	add	r2, r1
 801348e:	0040      	lsls	r0, r0, #1
 8013490:	b292      	uxth	r2, r2
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8013492:	4291      	cmp	r1, r2
 8013494:	d801      	bhi.n	801349a <advance_index+0xe>
 8013496:	4282      	cmp	r2, r0
 8013498:	db01      	blt.n	801349e <advance_index+0x12>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 801349a:	1a12      	subs	r2, r2, r0
 801349c:	b292      	uxth	r2, r2
  }

  return new_idx;
}
 801349e:	4610      	mov	r0, r2
 80134a0:	4770      	bx	lr

080134a2 <_ff_pull_const_addr>:
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80134a2:	0893      	lsrs	r3, r2, #2
{
 80134a4:	b513      	push	{r0, r1, r4, lr}
 80134a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80134aa:	4604      	mov	r4, r0
  while(full_words--)
 80134ac:	4299      	cmp	r1, r3
 80134ae:	d10b      	bne.n	80134c8 <_ff_pull_const_addr+0x26>
  if ( bytes_rem )
 80134b0:	f012 0203 	ands.w	r2, r2, #3
 80134b4:	d006      	beq.n	80134c4 <_ff_pull_const_addr+0x22>
    uint32_t tmp32 = 0;
 80134b6:	2300      	movs	r3, #0
    memcpy(&tmp32, ff_buf, bytes_rem);
 80134b8:	a801      	add	r0, sp, #4
    uint32_t tmp32 = 0;
 80134ba:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80134bc:	f002 fd71 	bl	8015fa2 <memcpy>
    *reg_tx = tmp32;
 80134c0:	9b01      	ldr	r3, [sp, #4]
 80134c2:	6023      	str	r3, [r4, #0]
}
 80134c4:	b002      	add	sp, #8
 80134c6:	bd10      	pop	{r4, pc}
 80134c8:	f851 0b04 	ldr.w	r0, [r1], #4
    *reg_tx = tu_unaligned_read32(ff_buf);
 80134cc:	6020      	str	r0, [r4, #0]
    ff_buf += 4;
 80134ce:	e7ed      	b.n	80134ac <_ff_pull_const_addr+0xa>

080134d0 <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80134d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 80134d8:	4680      	mov	r8, r0
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80134da:	8885      	ldrh	r5, [r0, #4]
{
 80134dc:	460f      	mov	r7, r1
    return (uint16_t) (wr_idx - rd_idx);
 80134de:	1b1e      	subs	r6, r3, r4
  if (wr_idx >= rd_idx)
 80134e0:	42a3      	cmp	r3, r4
    return (uint16_t) (wr_idx - rd_idx);
 80134e2:	b2b6      	uxth	r6, r6
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80134e4:	bf3c      	itt	cc
 80134e6:	eb06 0645 	addcc.w	r6, r6, r5, lsl #1
 80134ea:	b2b6      	uxthcc	r6, r6

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80134ec:	b366      	cbz	r6, 8013548 <_tu_fifo_peek_n+0x78>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80134ee:	42b5      	cmp	r5, r6
 80134f0:	d206      	bcs.n	8013500 <_tu_fifo_peek_n+0x30>
  if ( wr_idx >= f->depth )
 80134f2:	429d      	cmp	r5, r3
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
    cnt = f->depth;
 80134f4:	462e      	mov	r6, r5
    rd_idx = wr_idx - f->depth;
 80134f6:	bf94      	ite	ls
 80134f8:	1b5b      	subls	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 80134fa:	195b      	addhi	r3, r3, r5
 80134fc:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 80134fe:	8144      	strh	r4, [r0, #10]
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8013500:	4296      	cmp	r6, r2
 8013502:	bf28      	it	cs
 8013504:	4616      	movcs	r6, r2
  while ( idx >= depth ) idx -= depth;
 8013506:	42a5      	cmp	r5, r4
 8013508:	d922      	bls.n	8013550 <_tu_fifo_peek_n+0x80>
  uint16_t const lin_count = f->depth - rd_ptr;
 801350a:	1b29      	subs	r1, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 801350c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8013510:	1b75      	subs	r5, r6, r5
  switch (copy_mode)
 8013512:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
  uint16_t lin_bytes = lin_count * f->item_size;
 8013516:	f3c2 030e 	ubfx	r3, r2, #0, #15
  uint16_t const lin_count = f->depth - rd_ptr;
 801351a:	b289      	uxth	r1, r1
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 801351c:	4425      	add	r5, r4
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 801351e:	f8d8 a000 	ldr.w	sl, [r8]
  uint16_t lin_bytes = lin_count * f->item_size;
 8013522:	fb11 f903 	smulbb	r9, r1, r3
  switch (copy_mode)
 8013526:	2801      	cmp	r0, #1
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8013528:	fb15 f503 	smulbb	r5, r5, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 801352c:	461a      	mov	r2, r3
 801352e:	fa1f f989 	uxth.w	r9, r9
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8013532:	fb03 a404 	mla	r4, r3, r4, sl
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8013536:	b2ad      	uxth	r5, r5
  switch (copy_mode)
 8013538:	d018      	beq.n	801356c <_tu_fifo_peek_n+0x9c>
      if ( n <= lin_count )
 801353a:	428e      	cmp	r6, r1
 801353c:	d80b      	bhi.n	8013556 <_tu_fifo_peek_n+0x86>
        memcpy(app_buf, ff_buf, n*f->item_size);
 801353e:	4372      	muls	r2, r6
 8013540:	4621      	mov	r1, r4
 8013542:	4638      	mov	r0, r7
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8013544:	f002 fd2d 	bl	8015fa2 <memcpy>

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);

  return n;
}
 8013548:	4630      	mov	r0, r6
 801354a:	b003      	add	sp, #12
 801354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ( idx >= depth ) idx -= depth;
 8013550:	1b64      	subs	r4, r4, r5
 8013552:	b2a4      	uxth	r4, r4
 8013554:	e7d7      	b.n	8013506 <_tu_fifo_peek_n+0x36>
        memcpy(app_buf, ff_buf, lin_bytes);
 8013556:	464a      	mov	r2, r9
 8013558:	4621      	mov	r1, r4
 801355a:	4638      	mov	r0, r7
 801355c:	f002 fd21 	bl	8015fa2 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8013560:	462a      	mov	r2, r5
 8013562:	f8d8 1000 	ldr.w	r1, [r8]
 8013566:	eb07 0009 	add.w	r0, r7, r9
 801356a:	e7eb      	b.n	8013544 <_tu_fifo_peek_n+0x74>
      if ( n <= lin_count )
 801356c:	428e      	cmp	r6, r1
 801356e:	d807      	bhi.n	8013580 <_tu_fifo_peek_n+0xb0>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8013570:	fb16 f203 	smulbb	r2, r6, r3
 8013574:	4621      	mov	r1, r4
 8013576:	b292      	uxth	r2, r2
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8013578:	4638      	mov	r0, r7
 801357a:	f7ff ff92 	bl	80134a2 <_ff_pull_const_addr>
 801357e:	e7e3      	b.n	8013548 <_tu_fifo_peek_n+0x78>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8013580:	f029 0803 	bic.w	r8, r9, #3
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8013584:	4621      	mov	r1, r4
 8013586:	4638      	mov	r0, r7
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8013588:	fa1f f888 	uxth.w	r8, r8
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 801358c:	4642      	mov	r2, r8
 801358e:	f7ff ff88 	bl	80134a2 <_ff_pull_const_addr>
        if (rem > 0)
 8013592:	f019 0903 	ands.w	r9, r9, #3
 8013596:	d01d      	beq.n	80135d4 <_tu_fifo_peek_n+0x104>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8013598:	f1c9 0b04 	rsb	fp, r9, #4
          while(rem--) *dst_u8++ = *ff_buf++;
 801359c:	f109 39ff 	add.w	r9, r9, #4294967295
          uint32_t tmp32=0;
 80135a0:	2300      	movs	r3, #0
          while(rem--) *dst_u8++ = *ff_buf++;
 80135a2:	eb04 0108 	add.w	r1, r4, r8
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80135a6:	fa1f fb8b 	uxth.w	fp, fp
 80135aa:	a801      	add	r0, sp, #4
 80135ac:	fa5f f989 	uxtb.w	r9, r9
          uint32_t tmp32=0;
 80135b0:	9301      	str	r3, [sp, #4]
 80135b2:	45ab      	cmp	fp, r5
          while(rem--) *dst_u8++ = *ff_buf++;
 80135b4:	f109 0201 	add.w	r2, r9, #1
 80135b8:	bf28      	it	cs
 80135ba:	46ab      	movcs	fp, r5
 80135bc:	f002 fcf1 	bl	8015fa2 <memcpy>
 80135c0:	ab01      	add	r3, sp, #4
          wrap_bytes -= remrem;
 80135c2:	eba5 050b 	sub.w	r5, r5, fp
 80135c6:	44d3      	add	fp, sl
 80135c8:	444b      	add	r3, r9
 80135ca:	b2ad      	uxth	r5, r5
          while(remrem--) *dst_u8++ = *ff_buf++;
 80135cc:	45d3      	cmp	fp, sl
 80135ce:	d106      	bne.n	80135de <_tu_fifo_peek_n+0x10e>
          *reg_tx = tmp32;
 80135d0:	9b01      	ldr	r3, [sp, #4]
 80135d2:	603b      	str	r3, [r7, #0]
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80135d4:	2d00      	cmp	r5, #0
 80135d6:	d0b7      	beq.n	8013548 <_tu_fifo_peek_n+0x78>
 80135d8:	462a      	mov	r2, r5
 80135da:	4651      	mov	r1, sl
 80135dc:	e7cc      	b.n	8013578 <_tu_fifo_peek_n+0xa8>
          while(remrem--) *dst_u8++ = *ff_buf++;
 80135de:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80135e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80135e6:	e7f1      	b.n	80135cc <_tu_fifo_peek_n+0xfc>

080135e8 <_tu_fifo_read_n>:

  return n;
}

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80135e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135ea:	4604      	mov	r4, r0
  _ff_lock(f->mutex_rd);
 80135ec:	6900      	ldr	r0, [r0, #16]
{
 80135ee:	460d      	mov	r5, r1
 80135f0:	4616      	mov	r6, r2
 80135f2:	461f      	mov	r7, r3
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80135f4:	b118      	cbz	r0, 80135fe <_tu_fifo_read_n+0x16>
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 80135f6:	f04f 31ff 	mov.w	r1, #4294967295
 80135fa:	f7f5 f846 	bl	800868a <xQueueSemaphoreTake>

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80135fe:	8923      	ldrh	r3, [r4, #8]
 8013600:	4629      	mov	r1, r5
 8013602:	8962      	ldrh	r2, [r4, #10]
 8013604:	4620      	mov	r0, r4
 8013606:	b29b      	uxth	r3, r3
 8013608:	b292      	uxth	r2, r2
 801360a:	e9cd 2700 	strd	r2, r7, [sp]
 801360e:	4632      	mov	r2, r6
 8013610:	f7ff ff5e 	bl	80134d0 <_tu_fifo_peek_n>

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8013614:	8961      	ldrh	r1, [r4, #10]
 8013616:	4602      	mov	r2, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8013618:	4605      	mov	r5, r0
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 801361a:	b289      	uxth	r1, r1
 801361c:	88a0      	ldrh	r0, [r4, #4]
 801361e:	f7ff ff35 	bl	801348c <advance_index>
 8013622:	8160      	strh	r0, [r4, #10]

  _ff_unlock(f->mutex_rd);
 8013624:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_unlock(mutex);
 8013626:	b120      	cbz	r0, 8013632 <_tu_fifo_read_n+0x4a>
TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_lock(osal_mutex_t mutex_hdl, uint32_t msec) {
  return osal_semaphore_wait(mutex_hdl, msec);
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl) {
  return xSemaphoreGive(mutex_hdl);
 8013628:	2300      	movs	r3, #0
 801362a:	461a      	mov	r2, r3
 801362c:	4619      	mov	r1, r3
 801362e:	f7f4 fdbb 	bl	80081a8 <xQueueGenericSend>
  return n;
}
 8013632:	4628      	mov	r0, r5
 8013634:	b003      	add	sp, #12
 8013636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013638 <_ff_push_const_addr>:
  while(full_words--)
 8013638:	0893      	lsrs	r3, r2, #2
 801363a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 801363e:	b513      	push	{r0, r1, r4, lr}
  while(full_words--)
 8013640:	4298      	cmp	r0, r3
 8013642:	d109      	bne.n	8013658 <_ff_push_const_addr+0x20>
  if ( bytes_rem )
 8013644:	f012 0203 	ands.w	r2, r2, #3
 8013648:	d004      	beq.n	8013654 <_ff_push_const_addr+0x1c>
    uint32_t tmp32 = *reg_rx;
 801364a:	680b      	ldr	r3, [r1, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 801364c:	a901      	add	r1, sp, #4
    uint32_t tmp32 = *reg_rx;
 801364e:	9301      	str	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8013650:	f002 fca7 	bl	8015fa2 <memcpy>
}
 8013654:	b002      	add	sp, #8
 8013656:	bd10      	pop	{r4, pc}
    tu_unaligned_write32(ff_buf, *reg_rx);
 8013658:	680c      	ldr	r4, [r1, #0]
  *((uint32_t *) mem) = value;
 801365a:	f840 4b04 	str.w	r4, [r0], #4
    ff_buf += 4;
 801365e:	e7ef      	b.n	8013640 <_ff_push_const_addr+0x8>

08013660 <_tu_fifo_write_n.part.0>:
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	4680      	mov	r8, r0
  _ff_lock(f->mutex_wr);
 8013666:	68c0      	ldr	r0, [r0, #12]
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8013668:	b085      	sub	sp, #20
 801366a:	4689      	mov	r9, r1
 801366c:	4616      	mov	r6, r2
 801366e:	469a      	mov	sl, r3
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8013670:	b118      	cbz	r0, 801367a <_tu_fifo_write_n.part.0+0x1a>
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 8013672:	f04f 31ff 	mov.w	r1, #4294967295
 8013676:	f7f5 f808 	bl	800868a <xQueueSemaphoreTake>
  if ( !f->overwritable )
 801367a:	f898 3007 	ldrb.w	r3, [r8, #7]
  uint16_t wr_idx = f->wr_idx;
 801367e:	f8b8 0008 	ldrh.w	r0, [r8, #8]
  if ( !f->overwritable )
 8013682:	09db      	lsrs	r3, r3, #7
  uint16_t rd_idx = f->rd_idx;
 8013684:	f8b8 500a 	ldrh.w	r5, [r8, #10]
  uint16_t wr_idx = f->wr_idx;
 8013688:	b280      	uxth	r0, r0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 801368a:	f8b8 4004 	ldrh.w	r4, [r8, #4]
  uint16_t rd_idx = f->rd_idx;
 801368e:	b2ad      	uxth	r5, r5
  if ( !f->overwritable )
 8013690:	d111      	bne.n	80136b6 <_tu_fifo_write_n.part.0+0x56>
  if (wr_idx >= rd_idx)
 8013692:	42a8      	cmp	r0, r5
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8013694:	bf36      	itet	cc
 8013696:	ebc5 0544 	rsbcc	r5, r5, r4, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 801369a:	1b45      	subcs	r5, r0, r5
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 801369c:	182d      	addcc	r5, r5, r0
 801369e:	b2ad      	uxth	r5, r5
  return (depth > count) ? (depth - count) : 0;
 80136a0:	42a5      	cmp	r5, r4
 80136a2:	f080 80b0 	bcs.w	8013806 <_tu_fifo_write_n.part.0+0x1a6>
 80136a6:	1b65      	subs	r5, r4, r5
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80136a8:	b2ad      	uxth	r5, r5
 80136aa:	42b5      	cmp	r5, r6
 80136ac:	bf28      	it	cs
 80136ae:	4635      	movcs	r5, r6
 80136b0:	b2ae      	uxth	r6, r5
  uint16_t wr_idx = f->wr_idx;
 80136b2:	4605      	mov	r5, r0
 80136b4:	e00d      	b.n	80136d2 <_tu_fifo_write_n.part.0+0x72>
    if ( n >= f->depth )
 80136b6:	42a6      	cmp	r6, r4
 80136b8:	d342      	bcc.n	8013740 <_tu_fifo_write_n.part.0+0xe0>
      if ( copy_mode == TU_FIFO_COPY_INC )
 80136ba:	f1ba 0f00 	cmp.w	sl, #0
 80136be:	d106      	bne.n	80136ce <_tu_fifo_write_n.part.0+0x6e>
        buf8 += (n - f->depth) * f->item_size;
 80136c0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80136c4:	1b36      	subs	r6, r6, r4
 80136c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80136ca:	fb03 9906 	mla	r9, r3, r6, r9
  if (n)
 80136ce:	b35c      	cbz	r4, 8013728 <_tu_fifo_write_n.part.0+0xc8>
 80136d0:	4626      	mov	r6, r4
  while ( idx >= depth ) idx -= depth;
 80136d2:	462b      	mov	r3, r5
 80136d4:	42a3      	cmp	r3, r4
 80136d6:	d245      	bcs.n	8013764 <_tu_fifo_write_n.part.0+0x104>
  uint16_t const lin_count = f->depth - wr_ptr;
 80136d8:	eba4 0c03 	sub.w	ip, r4, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 80136dc:	f8b8 2006 	ldrh.w	r2, [r8, #6]
  uint16_t const wrap_count = n - lin_count;
 80136e0:	1b34      	subs	r4, r6, r4
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80136e2:	f8d8 0000 	ldr.w	r0, [r8]
  uint16_t lin_bytes = lin_count * f->item_size;
 80136e6:	f3c2 010e 	ubfx	r1, r2, #0, #15
  uint16_t const lin_count = f->depth - wr_ptr;
 80136ea:	fa1f fc8c 	uxth.w	ip, ip
  uint16_t const wrap_count = n - lin_count;
 80136ee:	441c      	add	r4, r3
  switch (copy_mode)
 80136f0:	f1ba 0f01 	cmp.w	sl, #1
  uint16_t lin_bytes = lin_count * f->item_size;
 80136f4:	fb1c f701 	smulbb	r7, ip, r1
 80136f8:	460a      	mov	r2, r1
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80136fa:	fb14 f401 	smulbb	r4, r4, r1
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80136fe:	fb01 0b03 	mla	fp, r1, r3, r0
  uint16_t lin_bytes = lin_count * f->item_size;
 8013702:	b2bf      	uxth	r7, r7
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8013704:	b2a4      	uxth	r4, r4
  switch (copy_mode)
 8013706:	d03b      	beq.n	8013780 <_tu_fifo_write_n.part.0+0x120>
      if(n <= lin_count)
 8013708:	45b4      	cmp	ip, r6
 801370a:	d32e      	bcc.n	801376a <_tu_fifo_write_n.part.0+0x10a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 801370c:	4372      	muls	r2, r6
 801370e:	4649      	mov	r1, r9
 8013710:	4658      	mov	r0, fp
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8013712:	f002 fc46 	bl	8015fa2 <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8013716:	4634      	mov	r4, r6
 8013718:	4632      	mov	r2, r6
 801371a:	4629      	mov	r1, r5
 801371c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8013720:	f7ff feb4 	bl	801348c <advance_index>
 8013724:	f8a8 0008 	strh.w	r0, [r8, #8]
  _ff_unlock(f->mutex_wr);
 8013728:	f8d8 000c 	ldr.w	r0, [r8, #12]
  if (mutex) osal_mutex_unlock(mutex);
 801372c:	b120      	cbz	r0, 8013738 <_tu_fifo_write_n.part.0+0xd8>
  return xSemaphoreGive(mutex_hdl);
 801372e:	2300      	movs	r3, #0
 8013730:	461a      	mov	r2, r3
 8013732:	4619      	mov	r1, r3
 8013734:	f7f4 fd38 	bl	80081a8 <xQueueGenericSend>
}
 8013738:	4620      	mov	r0, r4
 801373a:	b005      	add	sp, #20
 801373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (wr_idx >= rd_idx)
 8013740:	42a8      	cmp	r0, r5
 8013742:	ea4f 0244 	mov.w	r2, r4, lsl #1
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8013746:	bf36      	itet	cc
 8013748:	1b53      	subcc	r3, r2, r5
    return (uint16_t) (wr_idx - rd_idx);
 801374a:	1b43      	subcs	r3, r0, r5
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 801374c:	181b      	addcc	r3, r3, r0
 801374e:	b29b      	uxth	r3, r3
      if (overflowable_count + n >= 2*f->depth)
 8013750:	4433      	add	r3, r6
 8013752:	4293      	cmp	r3, r2
 8013754:	dbad      	blt.n	80136b2 <_tu_fifo_write_n.part.0+0x52>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8013756:	1ba2      	subs	r2, r4, r6
 8013758:	4629      	mov	r1, r5
 801375a:	4620      	mov	r0, r4
 801375c:	b292      	uxth	r2, r2
 801375e:	f7ff fe95 	bl	801348c <advance_index>
 8013762:	e7a6      	b.n	80136b2 <_tu_fifo_write_n.part.0+0x52>
  while ( idx >= depth ) idx -= depth;
 8013764:	1b1b      	subs	r3, r3, r4
 8013766:	b29b      	uxth	r3, r3
 8013768:	e7b4      	b.n	80136d4 <_tu_fifo_write_n.part.0+0x74>
        memcpy(ff_buf, app_buf, lin_bytes);
 801376a:	463a      	mov	r2, r7
 801376c:	4649      	mov	r1, r9
 801376e:	4658      	mov	r0, fp
 8013770:	f002 fc17 	bl	8015fa2 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8013774:	4622      	mov	r2, r4
 8013776:	eb09 0107 	add.w	r1, r9, r7
 801377a:	f8d8 0000 	ldr.w	r0, [r8]
 801377e:	e7c8      	b.n	8013712 <_tu_fifo_write_n.part.0+0xb2>
      if(n <= lin_count)
 8013780:	45b4      	cmp	ip, r6
 8013782:	d307      	bcc.n	8013794 <_tu_fifo_write_n.part.0+0x134>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8013784:	fb11 f206 	smulbb	r2, r1, r6
 8013788:	4658      	mov	r0, fp
 801378a:	4649      	mov	r1, r9
 801378c:	b292      	uxth	r2, r2
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 801378e:	f7ff ff53 	bl	8013638 <_ff_push_const_addr>
 8013792:	e7c0      	b.n	8013716 <_tu_fifo_write_n.part.0+0xb6>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8013794:	f027 0a03 	bic.w	sl, r7, #3
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8013798:	4649      	mov	r1, r9
 801379a:	4658      	mov	r0, fp
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 801379c:	fa1f fa8a 	uxth.w	sl, sl
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80137a0:	4652      	mov	r2, sl
 80137a2:	f7ff ff49 	bl	8013638 <_ff_push_const_addr>
        if (rem > 0)
 80137a6:	f017 0703 	ands.w	r7, r7, #3
 80137aa:	d029      	beq.n	8013800 <_tu_fifo_write_n.part.0+0x1a0>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80137ac:	f1c7 0304 	rsb	r3, r7, #4
          while(rem--) *ff_buf++ = *src_u8++;
 80137b0:	3f01      	subs	r7, #1
          uint32_t tmp32 = *rx_fifo;
 80137b2:	f8d9 2000 	ldr.w	r2, [r9]
          while(rem--) *ff_buf++ = *src_u8++;
 80137b6:	a903      	add	r1, sp, #12
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	eb0b 000a 	add.w	r0, fp, sl
 80137be:	b2ff      	uxtb	r7, r7
          uint32_t tmp32 = *rx_fifo;
 80137c0:	9203      	str	r2, [sp, #12]
 80137c2:	42a3      	cmp	r3, r4
          while(rem--) *ff_buf++ = *src_u8++;
 80137c4:	f107 0701 	add.w	r7, r7, #1
 80137c8:	bf28      	it	cs
 80137ca:	4623      	movcs	r3, r4
 80137cc:	463a      	mov	r2, r7
          wrap_bytes -= remrem;
 80137ce:	1ae4      	subs	r4, r4, r3
 80137d0:	9301      	str	r3, [sp, #4]
          while(rem--) *ff_buf++ = *src_u8++;
 80137d2:	f002 fbe6 	bl	8015fa2 <memcpy>
 80137d6:	ab03      	add	r3, sp, #12
          ff_buf = f->buffer;
 80137d8:	f8d8 0000 	ldr.w	r0, [r8]
          wrap_bytes -= remrem;
 80137dc:	b2a4      	uxth	r4, r4
          while(rem--) *ff_buf++ = *src_u8++;
 80137de:	19da      	adds	r2, r3, r7
          while(remrem--) *ff_buf++ = *src_u8++;
 80137e0:	9b01      	ldr	r3, [sp, #4]
 80137e2:	1e41      	subs	r1, r0, #1
 80137e4:	18d7      	adds	r7, r2, r3
 80137e6:	4297      	cmp	r7, r2
 80137e8:	d105      	bne.n	80137f6 <_tu_fifo_write_n.part.0+0x196>
 80137ea:	4418      	add	r0, r3
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80137ec:	2c00      	cmp	r4, #0
 80137ee:	d092      	beq.n	8013716 <_tu_fifo_write_n.part.0+0xb6>
 80137f0:	4622      	mov	r2, r4
 80137f2:	4649      	mov	r1, r9
 80137f4:	e7cb      	b.n	801378e <_tu_fifo_write_n.part.0+0x12e>
          while(remrem--) *ff_buf++ = *src_u8++;
 80137f6:	f812 cb01 	ldrb.w	ip, [r2], #1
 80137fa:	f801 cf01 	strb.w	ip, [r1, #1]!
 80137fe:	e7f2      	b.n	80137e6 <_tu_fifo_write_n.part.0+0x186>
          ff_buf = f->buffer; // wrap around to beginning
 8013800:	f8d8 0000 	ldr.w	r0, [r8]
 8013804:	e7f2      	b.n	80137ec <_tu_fifo_write_n.part.0+0x18c>
 8013806:	2400      	movs	r4, #0
 8013808:	e78e      	b.n	8013728 <_tu_fifo_write_n.part.0+0xc8>

0801380a <tu_fifo_config>:
  if (depth > 0x8000) return false;
 801380a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
{
 801380e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013810:	4604      	mov	r4, r0
 8013812:	460f      	mov	r7, r1
 8013814:	4616      	mov	r6, r2
 8013816:	461d      	mov	r5, r3
  if (depth > 0x8000) return false;
 8013818:	d827      	bhi.n	801386a <tu_fifo_config+0x60>
  _ff_lock(f->mutex_wr);
 801381a:	68c0      	ldr	r0, [r0, #12]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 801381c:	b118      	cbz	r0, 8013826 <tu_fifo_config+0x1c>
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 801381e:	f04f 31ff 	mov.w	r1, #4294967295
 8013822:	f7f4 ff32 	bl	800868a <xQueueSemaphoreTake>
  _ff_lock(f->mutex_rd);
 8013826:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8013828:	b118      	cbz	r0, 8013832 <tu_fifo_config+0x28>
 801382a:	f04f 31ff 	mov.w	r1, #4294967295
 801382e:	f7f4 ff2c 	bl	800868a <xQueueSemaphoreTake>
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8013832:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013836:	f3c5 050e 	ubfx	r5, r5, #0, #15
  _ff_unlock(f->mutex_wr);
 801383a:	68e0      	ldr	r0, [r4, #12]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 801383c:	ea45 35c3 	orr.w	r5, r5, r3, lsl #15
  f->rd_idx       = 0;
 8013840:	2300      	movs	r3, #0
  f->buffer       = (uint8_t*) buffer;
 8013842:	6027      	str	r7, [r4, #0]
  f->rd_idx       = 0;
 8013844:	8163      	strh	r3, [r4, #10]
  f->depth        = depth;
 8013846:	80a6      	strh	r6, [r4, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8013848:	80e5      	strh	r5, [r4, #6]
  f->wr_idx       = 0;
 801384a:	8123      	strh	r3, [r4, #8]
  if (mutex) osal_mutex_unlock(mutex);
 801384c:	b118      	cbz	r0, 8013856 <tu_fifo_config+0x4c>
  return xSemaphoreGive(mutex_hdl);
 801384e:	461a      	mov	r2, r3
 8013850:	4619      	mov	r1, r3
 8013852:	f7f4 fca9 	bl	80081a8 <xQueueGenericSend>
  _ff_unlock(f->mutex_rd);
 8013856:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_unlock(mutex);
 8013858:	b908      	cbnz	r0, 801385e <tu_fifo_config+0x54>
  return true;
 801385a:	2001      	movs	r0, #1
}
 801385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801385e:	2300      	movs	r3, #0
 8013860:	461a      	mov	r2, r3
 8013862:	4619      	mov	r1, r3
 8013864:	f7f4 fca0 	bl	80081a8 <xQueueGenericSend>
 8013868:	e7f7      	b.n	801385a <tu_fifo_config+0x50>
  if (depth > 0x8000) return false;
 801386a:	2000      	movs	r0, #0
 801386c:	e7f6      	b.n	801385c <tu_fifo_config+0x52>

0801386e <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 801386e:	4602      	mov	r2, r0
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8013870:	8880      	ldrh	r0, [r0, #4]
 8013872:	8913      	ldrh	r3, [r2, #8]
 8013874:	8952      	ldrh	r2, [r2, #10]
 8013876:	b29b      	uxth	r3, r3
 8013878:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 801387a:	4293      	cmp	r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 801387c:	bf36      	itet	cc
 801387e:	ebc2 0240 	rsbcc	r2, r2, r0, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8013882:	1a9b      	subcs	r3, r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8013884:	189b      	addcc	r3, r3, r2
 8013886:	b29b      	uxth	r3, r3
}
 8013888:	4298      	cmp	r0, r3
 801388a:	bf28      	it	cs
 801388c:	4618      	movcs	r0, r3
 801388e:	4770      	bx	lr

08013890 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 8013890:	8902      	ldrh	r2, [r0, #8]
 8013892:	8943      	ldrh	r3, [r0, #10]
 8013894:	b292      	uxth	r2, r2
 8013896:	b29b      	uxth	r3, r3
}
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	4258      	negs	r0, r3
 801389c:	4158      	adcs	r0, r3
 801389e:	4770      	bx	lr

080138a0 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80138a0:	8903      	ldrh	r3, [r0, #8]
 80138a2:	8941      	ldrh	r1, [r0, #10]
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	8882      	ldrh	r2, [r0, #4]
 80138a8:	b289      	uxth	r1, r1
  if (wr_idx >= rd_idx)
 80138aa:	428b      	cmp	r3, r1
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80138ac:	bf36      	itet	cc
 80138ae:	ebc1 0142 	rsbcc	r1, r1, r2, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 80138b2:	1a5b      	subcs	r3, r3, r1
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80138b4:	185b      	addcc	r3, r3, r1
 80138b6:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 80138b8:	429a      	cmp	r2, r3
 80138ba:	bf86      	itte	hi
 80138bc:	1ad0      	subhi	r0, r2, r3
 80138be:	b280      	uxthhi	r0, r0
 80138c0:	2000      	movls	r0, #0
}
 80138c2:	4770      	bx	lr

080138c4 <tu_fifo_read_n>:
    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80138c4:	2300      	movs	r3, #0
 80138c6:	f7ff be8f 	b.w	80135e8 <_tu_fifo_read_n>

080138ca <tu_fifo_read_n_const_addr_full_words>:
    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80138ca:	2301      	movs	r3, #1
 80138cc:	f7ff be8c 	b.w	80135e8 <_tu_fifo_read_n>

080138d0 <tu_fifo_write_n>:
  if ( n == 0 ) return 0;
 80138d0:	b112      	cbz	r2, 80138d8 <tu_fifo_write_n+0x8>
 80138d2:	2300      	movs	r3, #0
 80138d4:	f7ff bec4 	b.w	8013660 <_tu_fifo_write_n.part.0>
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 80138d8:	4610      	mov	r0, r2
 80138da:	4770      	bx	lr

080138dc <tu_fifo_write_n_const_addr_full_words>:
  if ( n == 0 ) return 0;
 80138dc:	b112      	cbz	r2, 80138e4 <tu_fifo_write_n_const_addr_full_words+0x8>
 80138de:	2301      	movs	r3, #1
 80138e0:	f7ff bebe 	b.w	8013660 <_tu_fifo_write_n.part.0>
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 80138e4:	4610      	mov	r0, r2
 80138e6:	4770      	bx	lr

080138e8 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80138e8:	b510      	push	{r4, lr}
 80138ea:	4604      	mov	r4, r0
  _ff_lock(f->mutex_wr);
 80138ec:	68c0      	ldr	r0, [r0, #12]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80138ee:	b118      	cbz	r0, 80138f8 <tu_fifo_clear+0x10>
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 80138f0:	f04f 31ff 	mov.w	r1, #4294967295
 80138f4:	f7f4 fec9 	bl	800868a <xQueueSemaphoreTake>
  _ff_lock(f->mutex_rd);
 80138f8:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80138fa:	b118      	cbz	r0, 8013904 <tu_fifo_clear+0x1c>
 80138fc:	f04f 31ff 	mov.w	r1, #4294967295
 8013900:	f7f4 fec3 	bl	800868a <xQueueSemaphoreTake>

  f->rd_idx = 0;
 8013904:	2300      	movs	r3, #0
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
 8013906:	68e0      	ldr	r0, [r4, #12]
  f->rd_idx = 0;
 8013908:	8163      	strh	r3, [r4, #10]
  f->wr_idx = 0;
 801390a:	8123      	strh	r3, [r4, #8]
  if (mutex) osal_mutex_unlock(mutex);
 801390c:	b118      	cbz	r0, 8013916 <tu_fifo_clear+0x2e>
  return xSemaphoreGive(mutex_hdl);
 801390e:	461a      	mov	r2, r3
 8013910:	4619      	mov	r1, r3
 8013912:	f7f4 fc49 	bl	80081a8 <xQueueGenericSend>
  _ff_unlock(f->mutex_rd);
 8013916:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_unlock(mutex);
 8013918:	b120      	cbz	r0, 8013924 <tu_fifo_clear+0x3c>
 801391a:	2300      	movs	r3, #0
 801391c:	461a      	mov	r2, r3
 801391e:	4619      	mov	r1, r3
 8013920:	f7f4 fc42 	bl	80081a8 <xQueueGenericSend>
  return true;
}
 8013924:	2001      	movs	r0, #1
 8013926:	bd10      	pop	{r4, pc}

08013928 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8013928:	b538      	push	{r3, r4, r5, lr}
  if (f->overwritable == overwritable) {
 801392a:	79c3      	ldrb	r3, [r0, #7]
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 801392c:	4604      	mov	r4, r0
 801392e:	460d      	mov	r5, r1
  if (f->overwritable == overwritable) {
 8013930:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
 8013934:	d01d      	beq.n	8013972 <tu_fifo_set_overwritable+0x4a>
    return true;
  }

  _ff_lock(f->mutex_wr);
 8013936:	68c0      	ldr	r0, [r0, #12]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8013938:	b118      	cbz	r0, 8013942 <tu_fifo_set_overwritable+0x1a>
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 801393a:	f04f 31ff 	mov.w	r1, #4294967295
 801393e:	f7f4 fea4 	bl	800868a <xQueueSemaphoreTake>
  _ff_lock(f->mutex_rd);
 8013942:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8013944:	b118      	cbz	r0, 801394e <tu_fifo_set_overwritable+0x26>
 8013946:	f04f 31ff 	mov.w	r1, #4294967295
 801394a:	f7f4 fe9e 	bl	800868a <xQueueSemaphoreTake>

  f->overwritable = overwritable;
 801394e:	79e3      	ldrb	r3, [r4, #7]

  _ff_unlock(f->mutex_wr);
 8013950:	68e0      	ldr	r0, [r4, #12]
  f->overwritable = overwritable;
 8013952:	f365 13c7 	bfi	r3, r5, #7, #1
 8013956:	71e3      	strb	r3, [r4, #7]
  if (mutex) osal_mutex_unlock(mutex);
 8013958:	b120      	cbz	r0, 8013964 <tu_fifo_set_overwritable+0x3c>
  return xSemaphoreGive(mutex_hdl);
 801395a:	2300      	movs	r3, #0
 801395c:	461a      	mov	r2, r3
 801395e:	4619      	mov	r1, r3
 8013960:	f7f4 fc22 	bl	80081a8 <xQueueGenericSend>
  _ff_unlock(f->mutex_rd);
 8013964:	6920      	ldr	r0, [r4, #16]
  if (mutex) osal_mutex_unlock(mutex);
 8013966:	b120      	cbz	r0, 8013972 <tu_fifo_set_overwritable+0x4a>
 8013968:	2300      	movs	r3, #0
 801396a:	461a      	mov	r2, r3
 801396c:	4619      	mov	r1, r3
 801396e:	f7f4 fc1b 	bl	80081a8 <xQueueGenericSend>

  return true;
}
 8013972:	2001      	movs	r0, #1
 8013974:	bd38      	pop	{r3, r4, r5, pc}

08013976 <tud_vendor_control_xfer_cb>:
}

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
  (void) rhport; (void) stage; (void) request;
  return false;
}
 8013976:	2000      	movs	r0, #0
 8013978:	4770      	bx	lr
	...

0801397c <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	4605      	mov	r5, r0
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8013982:	2400      	movs	r4, #0
 8013984:	4e1a      	ldr	r6, [pc, #104]	@ (80139f0 <configuration_reset+0x74>)
    driver = &_usbd_driver[drvid - _app_driver_count];
 8013986:	4f1b      	ldr	r7, [pc, #108]	@ (80139f4 <configuration_reset+0x78>)
    driver = &_app_driver[drvid];
 8013988:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8013a04 <configuration_reset+0x88>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 801398c:	7831      	ldrb	r1, [r6, #0]
 801398e:	b2e3      	uxtb	r3, r4
 8013990:	1c8a      	adds	r2, r1, #2
 8013992:	b2d2      	uxtb	r2, r2
 8013994:	429a      	cmp	r2, r3
 8013996:	d810      	bhi.n	80139ba <configuration_reset+0x3e>
    usbd_class_driver_t const* driver = get_driver(i);
    TU_ASSERT(driver,);
    driver->reset(rhport);
  }

  tu_varclr(&_usbd_dev);
 8013998:	2238      	movs	r2, #56	@ 0x38
 801399a:	2100      	movs	r1, #0
 801399c:	4816      	ldr	r0, [pc, #88]	@ (80139f8 <configuration_reset+0x7c>)
 801399e:	f002 fa67 	bl	8015e70 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80139a2:	2210      	movs	r2, #16
 80139a4:	21ff      	movs	r1, #255	@ 0xff
 80139a6:	4815      	ldr	r0, [pc, #84]	@ (80139fc <configuration_reset+0x80>)
 80139a8:	f002 fa62 	bl	8015e70 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80139ac:	2212      	movs	r2, #18
 80139ae:	21ff      	movs	r1, #255	@ 0xff
 80139b0:	4813      	ldr	r0, [pc, #76]	@ (8013a00 <configuration_reset+0x84>)
}
 80139b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80139b6:	f002 ba5b 	b.w	8015e70 <memset>
  if (drvid < _app_driver_count) {
 80139ba:	4299      	cmp	r1, r3
 80139bc:	f04f 0224 	mov.w	r2, #36	@ 0x24
 80139c0:	d90d      	bls.n	80139de <configuration_reset+0x62>
    driver = &_app_driver[drvid];
 80139c2:	f8d8 1000 	ldr.w	r1, [r8]
 80139c6:	fb02 1303 	mla	r3, r2, r3, r1
    TU_ASSERT(driver,);
 80139ca:	b95b      	cbnz	r3, 80139e4 <configuration_reset+0x68>
 80139cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80139d0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80139d4:	07db      	lsls	r3, r3, #31
 80139d6:	d500      	bpl.n	80139da <configuration_reset+0x5e>
 80139d8:	be00      	bkpt	0x0000
}
 80139da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    driver = &_usbd_driver[drvid - _app_driver_count];
 80139de:	1a5b      	subs	r3, r3, r1
 80139e0:	fb02 7303 	mla	r3, r2, r3, r7
    driver->reset(rhport);
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	4628      	mov	r0, r5
 80139e8:	3401      	adds	r4, #1
 80139ea:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80139ec:	e7ce      	b.n	801398c <configuration_reset+0x10>
 80139ee:	bf00      	nop
 80139f0:	20011580 	.word	0x20011580
 80139f4:	0808f980 	.word	0x0808f980
 80139f8:	20011589 	.word	0x20011589
 80139fc:	2001158d 	.word	0x2001158d
 8013a00:	2001159d 	.word	0x2001159d
 8013a04:	20011584 	.word	0x20011584

08013a08 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8013a08:	b570      	push	{r4, r5, r6, lr}
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	4616      	mov	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8013a10:	6948      	ldr	r0, [r1, #20]
 8013a12:	f000 feff 	bl	8014814 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8013a16:	6963      	ldr	r3, [r4, #20]
 8013a18:	4632      	mov	r2, r6
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	2101      	movs	r1, #1
}
 8013a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8013a22:	4718      	bx	r3

08013a24 <tud_event_hook_cb>:
}
 8013a24:	4770      	bx	lr

08013a26 <tud_sof_cb>:
}
 8013a26:	4770      	bx	lr

08013a28 <tud_descriptor_bos_cb>:
}
 8013a28:	2000      	movs	r0, #0
 8013a2a:	4770      	bx	lr

08013a2c <tud_descriptor_device_qualifier_cb>:
TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	4770      	bx	lr

08013a30 <tud_descriptor_other_speed_configuration_cb>:
}
 8013a30:	2000      	movs	r0, #0
 8013a32:	4770      	bx	lr

08013a34 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 8013a34:	4b02      	ldr	r3, [pc, #8]	@ (8013a40 <tud_mounted+0xc>)
 8013a36:	7858      	ldrb	r0, [r3, #1]
}
 8013a38:	3800      	subs	r0, #0
 8013a3a:	bf18      	it	ne
 8013a3c:	2001      	movne	r0, #1
 8013a3e:	4770      	bx	lr
 8013a40:	20011589 	.word	0x20011589

08013a44 <tud_suspended>:
  return _usbd_dev.suspended;
 8013a44:	4b02      	ldr	r3, [pc, #8]	@ (8013a50 <tud_suspended+0xc>)
 8013a46:	7818      	ldrb	r0, [r3, #0]
}
 8013a48:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop
 8013a50:	20011589 	.word	0x20011589

08013a54 <tud_rhport_init>:
bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8013a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8013a58:	4f35      	ldr	r7, [pc, #212]	@ (8013b30 <tud_rhport_init+0xdc>)
bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	460d      	mov	r5, r1
  if (tud_inited()) {
 8013a5e:	783b      	ldrb	r3, [r7, #0]
 8013a60:	2bff      	cmp	r3, #255	@ 0xff
 8013a62:	d147      	bne.n	8013af4 <tud_rhport_init+0xa0>
  TU_ASSERT(rh_init);
 8013a64:	b949      	cbnz	r1, 8013a7a <tud_rhport_init+0x26>
  TU_ASSERT(_usbd_mutex);
 8013a66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013a6a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013a6e:	07db      	lsls	r3, r3, #31
 8013a70:	d500      	bpl.n	8013a74 <tud_rhport_init+0x20>
 8013a72:	be00      	bkpt	0x0000
  TU_ASSERT(rh_init);
 8013a74:	2000      	movs	r0, #0
}
 8013a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tu_varclr(&_usbd_dev);
 8013a7a:	2238      	movs	r2, #56	@ 0x38
 8013a7c:	2100      	movs	r1, #0
 8013a7e:	482d      	ldr	r0, [pc, #180]	@ (8013b34 <tud_rhport_init+0xe0>)
  _usbd_queued_setup = 0;
 8013a80:	2600      	movs	r6, #0
  tu_varclr(&_usbd_dev);
 8013a82:	f002 f9f5 	bl	8015e70 <memset>
  _usbd_queued_setup = 0;
 8013a86:	4b2c      	ldr	r3, [pc, #176]	@ (8013b38 <tud_rhport_init+0xe4>)
  return xSemaphoreCreateMutex();
 8013a88:	2001      	movs	r0, #1
 8013a8a:	701e      	strb	r6, [r3, #0]
 8013a8c:	f7f4 fc46 	bl	800831c <xQueueCreateMutex>
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
 8013a90:	4b2a      	ldr	r3, [pc, #168]	@ (8013b3c <tud_rhport_init+0xe8>)
 8013a92:	6018      	str	r0, [r3, #0]
  TU_ASSERT(_usbd_mutex);
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d0e6      	beq.n	8013a66 <tud_rhport_init+0x12>
  osal_queue_t q;

#if configSUPPORT_STATIC_ALLOCATION
  q = xQueueCreateStatic(qdef->depth, qdef->item_sz, (uint8_t*) qdef->buf, &qdef->sq);
#else
  q = xQueueCreate(qdef->depth, qdef->item_sz);
 8013a98:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8013b50 <tud_rhport_init+0xfc>
 8013a9c:	4632      	mov	r2, r6
 8013a9e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8013aa2:	f8b8 0000 	ldrh.w	r0, [r8]
 8013aa6:	f7f4 fb53 	bl	8008150 <xQueueGenericCreate>
#endif

#if defined(configQUEUE_REGISTRY_SIZE) && (configQUEUE_REGISTRY_SIZE>0)
  vQueueAddToRegistry(q, qdef->name);
 8013aaa:	f8d8 1008 	ldr.w	r1, [r8, #8]
  q = xQueueCreate(qdef->depth, qdef->item_sz);
 8013aae:	4606      	mov	r6, r0
  vQueueAddToRegistry(q, qdef->name);
 8013ab0:	f7f4 fede 	bl	8008870 <vQueueAddToRegistry>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8013ab4:	4b22      	ldr	r3, [pc, #136]	@ (8013b40 <tud_rhport_init+0xec>)
 8013ab6:	601e      	str	r6, [r3, #0]
  TU_ASSERT(_usbd_q);
 8013ab8:	2e00      	cmp	r6, #0
 8013aba:	d0d4      	beq.n	8013a66 <tud_rhport_init+0x12>
  if (usbd_app_driver_get_cb) {
 8013abc:	4b21      	ldr	r3, [pc, #132]	@ (8013b44 <tud_rhport_init+0xf0>)
 8013abe:	4e22      	ldr	r6, [pc, #136]	@ (8013b48 <tud_rhport_init+0xf4>)
 8013ac0:	b9d3      	cbnz	r3, 8013af8 <tud_rhport_init+0xa4>
bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8013ac2:	f04f 0800 	mov.w	r8, #0
 8013ac6:	f04f 0924 	mov.w	r9, #36	@ 0x24
    driver = &_usbd_driver[drvid - _app_driver_count];
 8013aca:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8013b54 <tud_rhport_init+0x100>
    driver = &_app_driver[drvid];
 8013ace:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8013b4c <tud_rhport_init+0xf8>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8013ad2:	7831      	ldrb	r1, [r6, #0]
 8013ad4:	fa5f f388 	uxtb.w	r3, r8
 8013ad8:	1c8a      	adds	r2, r1, #2
 8013ada:	b2d2      	uxtb	r2, r2
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d814      	bhi.n	8013b0a <tud_rhport_init+0xb6>
  TU_ASSERT(dcd_init(rhport, rh_init));
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	4620      	mov	r0, r4
  _usbd_rhport = rhport;
 8013ae4:	703c      	strb	r4, [r7, #0]
  TU_ASSERT(dcd_init(rhport, rh_init));
 8013ae6:	f001 f9b1 	bl	8014e4c <dcd_init>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	d0bb      	beq.n	8013a66 <tud_rhport_init+0x12>
  dcd_int_enable(rhport);
 8013aee:	4620      	mov	r0, r4
 8013af0:	f001 f976 	bl	8014de0 <dcd_int_enable>
    return true; // skip if already initialized
 8013af4:	2001      	movs	r0, #1
 8013af6:	e7be      	b.n	8013a76 <tud_rhport_init+0x22>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8013af8:	4630      	mov	r0, r6
 8013afa:	f3af 8000 	nop.w
 8013afe:	4b13      	ldr	r3, [pc, #76]	@ (8013b4c <tud_rhport_init+0xf8>)
 8013b00:	6018      	str	r0, [r3, #0]
    TU_ASSERT(_app_driver_count + BUILTIN_DRIVER_COUNT <= UINT8_MAX);
 8013b02:	7833      	ldrb	r3, [r6, #0]
 8013b04:	2bfd      	cmp	r3, #253	@ 0xfd
 8013b06:	d9dc      	bls.n	8013ac2 <tud_rhport_init+0x6e>
 8013b08:	e7ad      	b.n	8013a66 <tud_rhport_init+0x12>
  if (drvid < _app_driver_count) {
 8013b0a:	4299      	cmp	r1, r3
 8013b0c:	d90c      	bls.n	8013b28 <tud_rhport_init+0xd4>
    driver = &_app_driver[drvid];
 8013b0e:	f8db 2000 	ldr.w	r2, [fp]
 8013b12:	fb09 2303 	mla	r3, r9, r3, r2
    TU_ASSERT(driver && driver->init);
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d0a5      	beq.n	8013a66 <tud_rhport_init+0x12>
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	f108 0801 	add.w	r8, r8, #1
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d0a0      	beq.n	8013a66 <tud_rhport_init+0x12>
    driver->init();
 8013b24:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8013b26:	e7d4      	b.n	8013ad2 <tud_rhport_init+0x7e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8013b28:	1a5b      	subs	r3, r3, r1
 8013b2a:	fb09 a303 	mla	r3, r9, r3, sl
    TU_ASSERT(driver && driver->init);
 8013b2e:	e7f4      	b.n	8013b1a <tud_rhport_init+0xc6>
 8013b30:	20002088 	.word	0x20002088
 8013b34:	20011589 	.word	0x20011589
 8013b38:	20011588 	.word	0x20011588
 8013b3c:	200114b8 	.word	0x200114b8
 8013b40:	200114bc 	.word	0x200114bc
 8013b44:	00000000 	.word	0x00000000
 8013b48:	20011580 	.word	0x20011580
 8013b4c:	20011584 	.word	0x20011584
 8013b50:	2000207c 	.word	0x2000207c
 8013b54:	0808f980 	.word	0x0808f980

08013b58 <dcd_event_handler>:
}

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8013b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool send = false;
  switch (event->event_id) {
 8013b5c:	7843      	ldrb	r3, [r0, #1]
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8013b5e:	b085      	sub	sp, #20
 8013b60:	4604      	mov	r4, r0
 8013b62:	460e      	mov	r6, r1
  switch (event->event_id) {
 8013b64:	3b02      	subs	r3, #2
 8013b66:	2b05      	cmp	r3, #5
 8013b68:	d816      	bhi.n	8013b98 <dcd_event_handler+0x40>
 8013b6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013b6e:	0006      	.short	0x0006
 8013b70:	002a0082 	.word	0x002a0082
 8013b74:	00e40033 	.word	0x00e40033
 8013b78:	00e9      	.short	0x00e9
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8013b7a:	4b9e      	ldr	r3, [pc, #632]	@ (8013df4 <dcd_event_handler+0x29c>)
      _usbd_dev.addressed = 0;
      _usbd_dev.cfg_num = 0;
 8013b7c:	2100      	movs	r1, #0
      _usbd_dev.connected = 0;
 8013b7e:	781a      	ldrb	r2, [r3, #0]
 8013b80:	f022 0201 	bic.w	r2, r2, #1
 8013b84:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed = 0;
 8013b86:	781a      	ldrb	r2, [r3, #0]
 8013b88:	f022 0202 	bic.w	r2, r2, #2
 8013b8c:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num = 0;
 8013b8e:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended = 0;
 8013b90:	781a      	ldrb	r2, [r3, #0]
 8013b92:	f361 0282 	bfi	r2, r1, #2, #1
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
        _usbd_dev.suspended = 1;
 8013b96:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013b98:	4b97      	ldr	r3, [pc, #604]	@ (8013df8 <dcd_event_handler+0x2a0>)
 8013b9a:	6818      	ldr	r0, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  return xQueueReceive(qhdl, data, _osal_ms2tick(msec));
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const *data, bool in_isr) {
  if (!in_isr) {
 8013b9c:	2e00      	cmp	r6, #0
 8013b9e:	f040 8113 	bne.w	8013dc8 <dcd_event_handler+0x270>
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8013ba2:	4633      	mov	r3, r6
 8013ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ba8:	4621      	mov	r1, r4
 8013baa:	f7f4 fafd 	bl	80081a8 <xQueueGenericSend>
  } else {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    return res != 0;
 8013bae:	3800      	subs	r0, #0
 8013bb0:	bf18      	it	ne
 8013bb2:	2001      	movne	r0, #1
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	f000 8099 	beq.w	8013cec <dcd_event_handler+0x194>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8013bba:	4632      	mov	r2, r6
 8013bbc:	7861      	ldrb	r1, [r4, #1]
 8013bbe:	7820      	ldrb	r0, [r4, #0]
 8013bc0:	e0b6      	b.n	8013d30 <dcd_event_handler+0x1d8>
      if (_usbd_dev.connected) {
 8013bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8013df4 <dcd_event_handler+0x29c>)
 8013bc4:	781a      	ldrb	r2, [r3, #0]
 8013bc6:	07d7      	lsls	r7, r2, #31
 8013bc8:	f140 8097 	bpl.w	8013cfa <dcd_event_handler+0x1a2>
        _usbd_dev.suspended = 1;
 8013bcc:	781a      	ldrb	r2, [r3, #0]
 8013bce:	f042 0204 	orr.w	r2, r2, #4
 8013bd2:	e7e0      	b.n	8013b96 <dcd_event_handler+0x3e>
      }
      break;

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8013bd4:	4a87      	ldr	r2, [pc, #540]	@ (8013df4 <dcd_event_handler+0x29c>)
 8013bd6:	7813      	ldrb	r3, [r2, #0]
 8013bd8:	07dd      	lsls	r5, r3, #31
 8013bda:	f140 808e 	bpl.w	8013cfa <dcd_event_handler+0x1a2>
        _usbd_dev.suspended = 0;
 8013bde:	7813      	ldrb	r3, [r2, #0]
 8013be0:	f023 0304 	bic.w	r3, r3, #4
        queue_event(&event_sof, in_isr);
      }
      break;

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8013be4:	7013      	strb	r3, [r2, #0]
    default:
      send = true;
      break;
  }

  if (send) {
 8013be6:	e7d7      	b.n	8013b98 <dcd_event_handler+0x40>
  if (drvid < _app_driver_count) {
 8013be8:	4298      	cmp	r0, r3
 8013bea:	f04f 0124 	mov.w	r1, #36	@ 0x24
 8013bee:	d936      	bls.n	8013c5e <dcd_event_handler+0x106>
    driver = &_app_driver[drvid];
 8013bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8013bf4:	fb01 2303 	mla	r3, r1, r3, r2
        if (driver && driver->sof) {
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d133      	bne.n	8013c64 <dcd_event_handler+0x10c>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8013bfc:	3501      	adds	r5, #1
 8013bfe:	7838      	ldrb	r0, [r7, #0]
 8013c00:	b2eb      	uxtb	r3, r5
 8013c02:	1c82      	adds	r2, r0, #2
 8013c04:	b2d2      	uxtb	r2, r2
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d8ee      	bhi.n	8013be8 <dcd_event_handler+0x90>
      if (_usbd_dev.suspended) {
 8013c0a:	4d7a      	ldr	r5, [pc, #488]	@ (8013df4 <dcd_event_handler+0x29c>)
 8013c0c:	782b      	ldrb	r3, [r5, #0]
 8013c0e:	0758      	lsls	r0, r3, #29
 8013c10:	d550      	bpl.n	8013cb4 <dcd_event_handler+0x15c>
        _usbd_dev.suspended = 0;
 8013c12:	782b      	ldrb	r3, [r5, #0]
 8013c14:	f023 0304 	bic.w	r3, r3, #4
 8013c18:	702b      	strb	r3, [r5, #0]
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	7822      	ldrb	r2, [r4, #0]
 8013c1e:	f8cd 3006 	str.w	r3, [sp, #6]
 8013c22:	f88d 2004 	strb.w	r2, [sp, #4]
 8013c26:	2205      	movs	r2, #5
 8013c28:	f8cd 300a 	str.w	r3, [sp, #10]
 8013c2c:	f88d 2005 	strb.w	r2, [sp, #5]
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013c30:	4a71      	ldr	r2, [pc, #452]	@ (8013df8 <dcd_event_handler+0x2a0>)
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8013c32:	f8ad 300e 	strh.w	r3, [sp, #14]
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013c36:	6810      	ldr	r0, [r2, #0]
  if (!in_isr) {
 8013c38:	bb16      	cbnz	r6, 8013c80 <dcd_event_handler+0x128>
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8013c3a:	4633      	mov	r3, r6
 8013c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c40:	a901      	add	r1, sp, #4
 8013c42:	f7f4 fab1 	bl	80081a8 <xQueueGenericSend>
    return res != 0;
 8013c46:	3800      	subs	r0, #0
 8013c48:	bf18      	it	ne
 8013c4a:	2001      	movne	r0, #1
 8013c4c:	b358      	cbz	r0, 8013ca6 <dcd_event_handler+0x14e>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8013c4e:	4632      	mov	r2, r6
 8013c50:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013c54:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8013c58:	f7ff fee4 	bl	8013a24 <tud_event_hook_cb>
  return true;
 8013c5c:	e02a      	b.n	8013cb4 <dcd_event_handler+0x15c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8013c5e:	1a1b      	subs	r3, r3, r0
 8013c60:	fb01 8303 	mla	r3, r1, r3, r8
        if (driver && driver->sof) {
 8013c64:	6a1b      	ldr	r3, [r3, #32]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d0c8      	beq.n	8013bfc <dcd_event_handler+0xa4>
          driver->sof(event->rhport, event->sof.frame_count);
 8013c6a:	6861      	ldr	r1, [r4, #4]
 8013c6c:	7820      	ldrb	r0, [r4, #0]
 8013c6e:	4798      	blx	r3
 8013c70:	e7c4      	b.n	8013bfc <dcd_event_handler+0xa4>
  switch (event->event_id) {
 8013c72:	2500      	movs	r5, #0
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8013c74:	4f61      	ldr	r7, [pc, #388]	@ (8013dfc <dcd_event_handler+0x2a4>)
    driver = &_usbd_driver[drvid - _app_driver_count];
 8013c76:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 8013e08 <dcd_event_handler+0x2b0>
    driver = &_app_driver[drvid];
 8013c7a:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8013e04 <dcd_event_handler+0x2ac>
 8013c7e:	e7be      	b.n	8013bfe <dcd_event_handler+0xa6>
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013c80:	466a      	mov	r2, sp
 8013c82:	a901      	add	r1, sp, #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013c84:	9300      	str	r3, [sp, #0]
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013c86:	f7f4 fb7c 	bl	8008382 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013c8a:	9b00      	ldr	r3, [sp, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d0da      	beq.n	8013c46 <dcd_event_handler+0xee>
 8013c90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	f3bf 8f6f 	isb	sy
 8013ca4:	e7cf      	b.n	8013c46 <dcd_event_handler+0xee>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013ca6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013caa:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013cae:	07d9      	lsls	r1, r3, #31
 8013cb0:	d500      	bpl.n	8013cb4 <dcd_event_handler+0x15c>
 8013cb2:	be00      	bkpt	0x0000
      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8013cb4:	78eb      	ldrb	r3, [r5, #3]
 8013cb6:	07da      	lsls	r2, r3, #31
 8013cb8:	d51f      	bpl.n	8013cfa <dcd_event_handler+0x1a2>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8013cba:	7822      	ldrb	r2, [r4, #0]
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	f88d 2004 	strb.w	r2, [sp, #4]
 8013cc2:	2203      	movs	r2, #3
 8013cc4:	f8cd 3006 	str.w	r3, [sp, #6]
 8013cc8:	f88d 2005 	strb.w	r2, [sp, #5]
 8013ccc:	6862      	ldr	r2, [r4, #4]
 8013cce:	f8cd 300a 	str.w	r3, [sp, #10]
 8013cd2:	9202      	str	r2, [sp, #8]
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013cd4:	4a48      	ldr	r2, [pc, #288]	@ (8013df8 <dcd_event_handler+0x2a0>)
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8013cd6:	f8ad 300e 	strh.w	r3, [sp, #14]
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013cda:	6810      	ldr	r0, [r2, #0]
  if (!in_isr) {
 8013cdc:	b986      	cbnz	r6, 8013d00 <dcd_event_handler+0x1a8>
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8013cde:	4633      	mov	r3, r6
 8013ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce4:	a901      	add	r1, sp, #4
 8013ce6:	f7f4 fa5f 	bl	80081a8 <xQueueGenericSend>
 8013cea:	b9e0      	cbnz	r0, 8013d26 <dcd_event_handler+0x1ce>
 8013cec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013cf0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013cf4:	07db      	lsls	r3, r3, #31
 8013cf6:	d500      	bpl.n	8013cfa <dcd_event_handler+0x1a2>
 8013cf8:	be00      	bkpt	0x0000
    queue_event(event, in_isr);
  }
}
 8013cfa:	b005      	add	sp, #20
 8013cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013d00:	466a      	mov	r2, sp
 8013d02:	a901      	add	r1, sp, #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013d04:	9300      	str	r3, [sp, #0]
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013d06:	f7f4 fb3c 	bl	8008382 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013d0a:	9b00      	ldr	r3, [sp, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d0ec      	beq.n	8013cea <dcd_event_handler+0x192>
 8013d10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013d1c:	f3bf 8f4f 	dsb	sy
 8013d20:	f3bf 8f6f 	isb	sy
    return res != 0;
 8013d24:	e7e1      	b.n	8013cea <dcd_event_handler+0x192>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8013d26:	4632      	mov	r2, r6
 8013d28:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013d2c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8013d30:	f7ff fe78 	bl	8013a24 <tud_event_hook_cb>
}
 8013d34:	e7e1      	b.n	8013cfa <dcd_event_handler+0x1a2>
      _usbd_queued_setup++;
 8013d36:	4a32      	ldr	r2, [pc, #200]	@ (8013e00 <dcd_event_handler+0x2a8>)
 8013d38:	7813      	ldrb	r3, [r2, #0]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	e751      	b.n	8013be4 <dcd_event_handler+0x8c>
      uint8_t const ep_addr = event->xfer_complete.ep_addr;
 8013d40:	7901      	ldrb	r1, [r0, #4]
      if(epnum > 0) {
 8013d42:	f011 037f 	ands.w	r3, r1, #127	@ 0x7f
 8013d46:	f43f af27 	beq.w	8013b98 <dcd_event_handler+0x40>
        usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8013d4a:	4d2a      	ldr	r5, [pc, #168]	@ (8013df4 <dcd_event_handler+0x29c>)
 8013d4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  if (drvid < _app_driver_count) {
 8013d50:	4a2a      	ldr	r2, [pc, #168]	@ (8013dfc <dcd_event_handler+0x2a4>)
        usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8013d52:	09c8      	lsrs	r0, r1, #7
 8013d54:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  if (drvid < _app_driver_count) {
 8013d58:	7812      	ldrb	r2, [r2, #0]
        usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8013d5a:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8013d5e:	7d1b      	ldrb	r3, [r3, #20]
  if (drvid < _app_driver_count) {
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d226      	bcs.n	8013db2 <dcd_event_handler+0x25a>
    driver = &_app_driver[drvid];
 8013d64:	4a27      	ldr	r2, [pc, #156]	@ (8013e04 <dcd_event_handler+0x2ac>)
 8013d66:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8013d6a:	6812      	ldr	r2, [r2, #0]
        if (driver && driver->xfer_isr) {
 8013d6c:	eb12 0383 	adds.w	r3, r2, r3, lsl #2
 8013d70:	f43f af12 	beq.w	8013b98 <dcd_event_handler+0x40>
 8013d74:	69df      	ldr	r7, [r3, #28]
 8013d76:	2f00      	cmp	r7, #0
 8013d78:	f43f af0e 	beq.w	8013b98 <dcd_event_handler+0x40>
          _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8013d7c:	4465      	add	r5, ip
          send = !driver->xfer_isr(event->rhport, ep_addr, (xfer_result_t) event->xfer_complete.result, event->xfer_complete.len);
 8013d7e:	7962      	ldrb	r2, [r4, #5]
          _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8013d80:	4405      	add	r5, r0
 8013d82:	f895 3026 	ldrb.w	r3, [r5, #38]	@ 0x26
 8013d86:	3520      	adds	r5, #32
 8013d88:	f023 0301 	bic.w	r3, r3, #1
 8013d8c:	71ab      	strb	r3, [r5, #6]
          _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8013d8e:	79ab      	ldrb	r3, [r5, #6]
 8013d90:	f023 0304 	bic.w	r3, r3, #4
 8013d94:	71ab      	strb	r3, [r5, #6]
          send = !driver->xfer_isr(event->rhport, ep_addr, (xfer_result_t) event->xfer_complete.result, event->xfer_complete.len);
 8013d96:	68a3      	ldr	r3, [r4, #8]
 8013d98:	7820      	ldrb	r0, [r4, #0]
 8013d9a:	47b8      	blx	r7
          if (send) {
 8013d9c:	2800      	cmp	r0, #0
 8013d9e:	d1ac      	bne.n	8013cfa <dcd_event_handler+0x1a2>
            _usbd_dev.ep_status[epnum][ep_dir].busy = 1;
 8013da0:	79ab      	ldrb	r3, [r5, #6]
 8013da2:	f043 0301 	orr.w	r3, r3, #1
 8013da6:	71ab      	strb	r3, [r5, #6]
            _usbd_dev.ep_status[epnum][ep_dir].claimed = 1;
 8013da8:	79ab      	ldrb	r3, [r5, #6]
 8013daa:	f043 0304 	orr.w	r3, r3, #4
 8013dae:	71ab      	strb	r3, [r5, #6]
  if (send) {
 8013db0:	e6f2      	b.n	8013b98 <dcd_event_handler+0x40>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8013db2:	1c97      	adds	r7, r2, #2
 8013db4:	b2ff      	uxtb	r7, r7
 8013db6:	42bb      	cmp	r3, r7
 8013db8:	f4bf aeee 	bcs.w	8013b98 <dcd_event_handler+0x40>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8013dbc:	1a9b      	subs	r3, r3, r2
 8013dbe:	2724      	movs	r7, #36	@ 0x24
 8013dc0:	4a11      	ldr	r2, [pc, #68]	@ (8013e08 <dcd_event_handler+0x2b0>)
 8013dc2:	fb07 2303 	mla	r3, r7, r3, r2
        if (driver && driver->xfer_isr) {
 8013dc6:	e7d5      	b.n	8013d74 <dcd_event_handler+0x21c>
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013dc8:	2300      	movs	r3, #0
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013dca:	aa01      	add	r2, sp, #4
 8013dcc:	4621      	mov	r1, r4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013dce:	9301      	str	r3, [sp, #4]
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013dd0:	f7f4 fad7 	bl	8008382 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013dd4:	9b01      	ldr	r3, [sp, #4]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	f43f aee9 	beq.w	8013bae <dcd_event_handler+0x56>
 8013ddc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013de4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013de8:	f3bf 8f4f 	dsb	sy
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	e6dd      	b.n	8013bae <dcd_event_handler+0x56>
 8013df2:	bf00      	nop
 8013df4:	20011589 	.word	0x20011589
 8013df8:	200114bc 	.word	0x200114bc
 8013dfc:	20011580 	.word	0x20011580
 8013e00:	20011588 	.word	0x20011588
 8013e04:	20011584 	.word	0x20011584
 8013e08:	0808f980 	.word	0x0808f980

08013e0c <usbd_spin_lock>:
  if (in_isr) {
 8013e0c:	b908      	cbnz	r0, 8013e12 <usbd_spin_lock+0x6>
    taskENTER_CRITICAL();
 8013e0e:	f7f5 beb1 	b.w	8009b74 <vPortEnterCritical>
  }
}

void usbd_spin_lock(bool in_isr) {
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8013e12:	4770      	bx	lr

08013e14 <usbd_spin_unlock>:
  if (in_isr) {
 8013e14:	b908      	cbnz	r0, 8013e1a <usbd_spin_unlock+0x6>
    taskEXIT_CRITICAL();
 8013e16:	f7f5 bed1 	b.w	8009bbc <vPortExitCritical>
void usbd_spin_unlock(bool in_isr) {
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8013e1a:	4770      	bx	lr

08013e1c <usbd_defer_func>:

  return true;
}

// Helper to defer an isr function
void usbd_defer_func(osal_task_func_t func, void* param, bool in_isr) {
 8013e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  dcd_event_t event = {
 8013e1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  if (!in_isr) {
 8013e22:	4614      	mov	r4, r2
      .rhport   = 0,
      .event_id = USBD_EVENT_FUNC_CALL,
  };
  event.func_call.func  = func;
  event.func_call.param = param;
 8013e24:	9103      	str	r1, [sp, #12]
  event.func_call.func  = func;
 8013e26:	e9cd 3001 	strd	r3, r0, [sp, #4]
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013e2a:	4b18      	ldr	r3, [pc, #96]	@ (8013e8c <usbd_defer_func+0x70>)
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	b972      	cbnz	r2, 8013e4e <usbd_defer_func+0x32>
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8013e30:	4613      	mov	r3, r2
 8013e32:	a901      	add	r1, sp, #4
 8013e34:	f04f 32ff 	mov.w	r2, #4294967295
 8013e38:	f7f4 f9b6 	bl	80081a8 <xQueueGenericSend>
 8013e3c:	b9e8      	cbnz	r0, 8013e7a <usbd_defer_func+0x5e>
 8013e3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013e42:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013e46:	07db      	lsls	r3, r3, #31
 8013e48:	d415      	bmi.n	8013e76 <usbd_defer_func+0x5a>

  queue_event(&event, in_isr);
}
 8013e4a:	b004      	add	sp, #16
 8013e4c:	bd10      	pop	{r4, pc}
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013e4e:	2300      	movs	r3, #0
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013e50:	466a      	mov	r2, sp
 8013e52:	a901      	add	r1, sp, #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013e54:	9300      	str	r3, [sp, #0]
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013e56:	f7f4 fa94 	bl	8008382 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013e5a:	9b00      	ldr	r3, [sp, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d0ed      	beq.n	8013e3c <usbd_defer_func+0x20>
 8013e60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e68:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013e6c:	f3bf 8f4f 	dsb	sy
 8013e70:	f3bf 8f6f 	isb	sy
    return res != 0;
 8013e74:	e7e2      	b.n	8013e3c <usbd_defer_func+0x20>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8013e76:	be00      	bkpt	0x0000
 8013e78:	e7e7      	b.n	8013e4a <usbd_defer_func+0x2e>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8013e7a:	4622      	mov	r2, r4
 8013e7c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013e80:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8013e84:	f7ff fdce 	bl	8013a24 <tud_event_hook_cb>
}
 8013e88:	e7df      	b.n	8013e4a <usbd_defer_func+0x2e>
 8013e8a:	bf00      	nop
 8013e8c:	200114bc 	.word	0x200114bc

08013e90 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8013e90:	b538      	push	{r3, r4, r5, lr}
  rhport = _usbd_rhport;
 8013e92:	4b0f      	ldr	r3, [pc, #60]	@ (8013ed0 <usbd_edpt_open+0x40>)
bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8013e94:	460c      	mov	r4, r1
  rhport = _usbd_rhport;
 8013e96:	781d      	ldrb	r5, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
}

// Get Endpoint number from address
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_number(uint8_t addr) {
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8013e98:	788b      	ldrb	r3, [r1, #2]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8013e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e9e:	2b08      	cmp	r3, #8
 8013ea0:	d908      	bls.n	8013eb4 <usbd_edpt_open+0x24>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8013ea2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013ea6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013eaa:	07db      	lsls	r3, r3, #31
 8013eac:	d500      	bpl.n	8013eb0 <usbd_edpt_open+0x20>
 8013eae:	be00      	bkpt	0x0000

  return dcd_edpt_open(rhport, desc_ep);
}
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8013eb4:	4b07      	ldr	r3, [pc, #28]	@ (8013ed4 <usbd_edpt_open+0x44>)
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	4620      	mov	r0, r4
 8013eba:	7899      	ldrb	r1, [r3, #2]
 8013ebc:	f001 fc5a 	bl	8015774 <tu_edpt_validate>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	d0ee      	beq.n	8013ea2 <usbd_edpt_open+0x12>
  return dcd_edpt_open(rhport, desc_ep);
 8013ec4:	4621      	mov	r1, r4
 8013ec6:	4628      	mov	r0, r5
}
 8013ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8013ecc:	f001 b82e 	b.w	8014f2c <dcd_edpt_open>
 8013ed0:	20002088 	.word	0x20002088
 8013ed4:	20011589 	.word	0x20011589

08013ed8 <usbd_open_edpt_pair>:
{
 8013ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013edc:	4681      	mov	r9, r0
 8013ede:	460c      	mov	r4, r1
 8013ee0:	4690      	mov	r8, r2
 8013ee2:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
 8013ee4:	2500      	movs	r5, #0
{
 8013ee6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
  for(int i=0; i<ep_count; i++)
 8013eea:	45a8      	cmp	r8, r5
 8013eec:	dc01      	bgt.n	8013ef2 <usbd_open_edpt_pair+0x1a>
  return true;
 8013eee:	2001      	movs	r0, #1
 8013ef0:	e00a      	b.n	8013f08 <usbd_open_edpt_pair+0x30>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8013ef2:	7863      	ldrb	r3, [r4, #1]
 8013ef4:	2b05      	cmp	r3, #5
 8013ef6:	d009      	beq.n	8013f0c <usbd_open_edpt_pair+0x34>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8013ef8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013efc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013f00:	07db      	lsls	r3, r3, #31
 8013f02:	d500      	bpl.n	8013f06 <usbd_open_edpt_pair+0x2e>
 8013f04:	be00      	bkpt	0x0000
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8013f06:	2000      	movs	r0, #0
}
 8013f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8013f0c:	78e3      	ldrb	r3, [r4, #3]
 8013f0e:	f003 0303 	and.w	r3, r3, #3
 8013f12:	4553      	cmp	r3, sl
 8013f14:	d1f0      	bne.n	8013ef8 <usbd_open_edpt_pair+0x20>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8013f16:	4621      	mov	r1, r4
 8013f18:	4648      	mov	r0, r9
 8013f1a:	f7ff ffb9 	bl	8013e90 <usbd_edpt_open>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d0ea      	beq.n	8013ef8 <usbd_open_edpt_pair+0x20>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8013f22:	78a3      	ldrb	r3, [r4, #2]
  for(int i=0; i<ep_count; i++)
 8013f24:	3501      	adds	r5, #1
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8013f26:	09da      	lsrs	r2, r3, #7
      (*ep_in) = desc_ep->bEndpointAddress;
 8013f28:	bf14      	ite	ne
 8013f2a:	703b      	strbne	r3, [r7, #0]
      (*ep_out) = desc_ep->bEndpointAddress;
 8013f2c:	7033      	strbeq	r3, [r6, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8013f2e:	7823      	ldrb	r3, [r4, #0]
 8013f30:	441c      	add	r4, r3
  for(int i=0; i<ep_count; i++)
 8013f32:	e7da      	b.n	8013eea <usbd_open_edpt_pair+0x12>

08013f34 <usbd_edpt_claim>:
  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir = tu_edpt_dir(ep_addr);
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8013f34:	09cb      	lsrs	r3, r1, #7
 8013f36:	f001 027f 	and.w	r2, r1, #127	@ 0x7f

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8013f3a:	4804      	ldr	r0, [pc, #16]	@ (8013f4c <usbd_edpt_claim+0x18>)
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8013f3c:	3326      	adds	r3, #38	@ 0x26
 8013f3e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8013f42:	4a03      	ldr	r2, [pc, #12]	@ (8013f50 <usbd_edpt_claim+0x1c>)
 8013f44:	4418      	add	r0, r3
 8013f46:	6811      	ldr	r1, [r2, #0]
 8013f48:	f001 bbcc 	b.w	80156e4 <tu_edpt_claim>
 8013f4c:	20011589 	.word	0x20011589
 8013f50:	200114b8 	.word	0x200114b8

08013f54 <usbd_edpt_release>:
bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir = tu_edpt_dir(ep_addr);
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8013f54:	09cb      	lsrs	r3, r1, #7
 8013f56:	f001 027f 	and.w	r2, r1, #127	@ 0x7f

  return tu_edpt_release(ep_state, _usbd_mutex);
 8013f5a:	4804      	ldr	r0, [pc, #16]	@ (8013f6c <usbd_edpt_release+0x18>)
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8013f5c:	3326      	adds	r3, #38	@ 0x26
 8013f5e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 8013f62:	4a03      	ldr	r2, [pc, #12]	@ (8013f70 <usbd_edpt_release+0x1c>)
 8013f64:	4418      	add	r0, r3
 8013f66:	6811      	ldr	r1, [r2, #0]
 8013f68:	f001 bbe5 	b.w	8015736 <tu_edpt_release>
 8013f6c:	20011589 	.word	0x20011589
 8013f70:	200114b8 	.word	0x200114b8

08013f74 <usbd_edpt_xfer>:
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8013f74:	b570      	push	{r4, r5, r6, lr}
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8013f76:	f001 067f 	and.w	r6, r1, #127	@ 0x7f
 8013f7a:	4c13      	ldr	r4, [pc, #76]	@ (8013fc8 <usbd_edpt_xfer+0x54>)
  rhport = _usbd_rhport;
 8013f7c:	4813      	ldr	r0, [pc, #76]	@ (8013fcc <usbd_edpt_xfer+0x58>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8013f7e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
  rhport = _usbd_rhport;
 8013f82:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8013f84:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 8013f88:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 8013f8c:	3420      	adds	r4, #32
 8013f8e:	07ed      	lsls	r5, r5, #31
 8013f90:	d508      	bpl.n	8013fa4 <usbd_edpt_xfer+0x30>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8013f92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013f96:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8013f9a:	07db      	lsls	r3, r3, #31
 8013f9c:	d500      	bpl.n	8013fa0 <usbd_edpt_xfer+0x2c>
 8013f9e:	be00      	bkpt	0x0000
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8013fa0:	2000      	movs	r0, #0
    return false;
  }
}
 8013fa2:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8013fa4:	79a5      	ldrb	r5, [r4, #6]
 8013fa6:	f045 0501 	orr.w	r5, r5, #1
 8013faa:	71a5      	strb	r5, [r4, #6]
  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8013fac:	f001 f828 	bl	8015000 <dcd_edpt_xfer>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d1f6      	bne.n	8013fa2 <usbd_edpt_xfer+0x2e>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8013fb4:	79a2      	ldrb	r2, [r4, #6]
 8013fb6:	f360 0200 	bfi	r2, r0, #0, #1
 8013fba:	71a2      	strb	r2, [r4, #6]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8013fbc:	79a2      	ldrb	r2, [r4, #6]
 8013fbe:	f360 0282 	bfi	r2, r0, #2, #1
 8013fc2:	71a2      	strb	r2, [r4, #6]
 8013fc4:	e7e5      	b.n	8013f92 <usbd_edpt_xfer+0x1e>
 8013fc6:	bf00      	nop
 8013fc8:	20011589 	.word	0x20011589
 8013fcc:	20002088 	.word	0x20002088

08013fd0 <usbd_edpt_busy>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
 8013fd0:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
 8013fd4:	4b04      	ldr	r3, [pc, #16]	@ (8013fe8 <usbd_edpt_busy+0x18>)
 8013fd6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013fda:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8013fde:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
}
 8013fe2:	f000 0001 	and.w	r0, r0, #1
 8013fe6:	4770      	bx	lr
 8013fe8:	20011589 	.word	0x20011589

08013fec <usbd_edpt_stall>:
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8013fec:	4b0c      	ldr	r3, [pc, #48]	@ (8014020 <usbd_edpt_stall+0x34>)
void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8013fee:	b510      	push	{r4, lr}
 8013ff0:	460c      	mov	r4, r1
  dcd_edpt_stall(rhport, ep_addr);
 8013ff2:	7818      	ldrb	r0, [r3, #0]
 8013ff4:	f001 f84a 	bl	801508c <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8013ff8:	490a      	ldr	r1, [pc, #40]	@ (8014024 <usbd_edpt_stall+0x38>)
 8013ffa:	f004 037f 	and.w	r3, r4, #127	@ 0x7f
 8013ffe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8014002:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8014006:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801400a:	f043 0302 	orr.w	r3, r3, #2
 801400e:	f881 3026 	strb.w	r3, [r1, #38]	@ 0x26
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8014012:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8014016:	f043 0301 	orr.w	r3, r3, #1
 801401a:	f881 3026 	strb.w	r3, [r1, #38]	@ 0x26
}
 801401e:	bd10      	pop	{r4, pc}
 8014020:	20002088 	.word	0x20002088
 8014024:	20011589 	.word	0x20011589

08014028 <usbd_edpt_clear_stall>:
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8014028:	4b0c      	ldr	r3, [pc, #48]	@ (801405c <usbd_edpt_clear_stall+0x34>)
void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 801402a:	b510      	push	{r4, lr}
 801402c:	460c      	mov	r4, r1
  dcd_edpt_clear_stall(rhport, ep_addr);
 801402e:	7818      	ldrb	r0, [r3, #0]
 8014030:	f001 f83e 	bl	80150b0 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8014034:	490a      	ldr	r1, [pc, #40]	@ (8014060 <usbd_edpt_clear_stall+0x38>)
 8014036:	f004 037f 	and.w	r3, r4, #127	@ 0x7f
 801403a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801403e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8014042:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8014046:	f023 0302 	bic.w	r3, r3, #2
 801404a:	f881 3026 	strb.w	r3, [r1, #38]	@ 0x26
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 801404e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8014052:	f023 0301 	bic.w	r3, r3, #1
 8014056:	f881 3026 	strb.w	r3, [r1, #38]	@ 0x26
}
 801405a:	bd10      	pop	{r4, pc}
 801405c:	20002088 	.word	0x20002088
 8014060:	20011589 	.word	0x20011589

08014064 <usbd_edpt_stalled>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8014064:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
 8014068:	4b04      	ldr	r3, [pc, #16]	@ (801407c <usbd_edpt_stalled+0x18>)
 801406a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801406e:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8014072:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
}
 8014076:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801407a:	4770      	bx	lr
 801407c:	20011589 	.word	0x20011589

08014080 <tud_task_ext>:
  return _usbd_rhport != RHPORT_INVALID;
 8014080:	4bad      	ldr	r3, [pc, #692]	@ (8014338 <tud_task_ext+0x2b8>)
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8014082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!tud_inited()) return;
 8014086:	781b      	ldrb	r3, [r3, #0]
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8014088:	b08b      	sub	sp, #44	@ 0x2c
 801408a:	4683      	mov	fp, r0
  if (!tud_inited()) return;
 801408c:	2bff      	cmp	r3, #255	@ 0xff
 801408e:	d053      	beq.n	8014138 <tud_task_ext+0xb8>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 8014090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8014094:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 8014344 <tud_task_ext+0x2c4>
 8014098:	fb03 f200 	mul.w	r2, r3, r0
 801409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80140a0:	9202      	str	r2, [sp, #8]
 80140a2:	9305      	str	r3, [sp, #20]
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 80140a4:	4ba5      	ldr	r3, [pc, #660]	@ (801433c <tud_task_ext+0x2bc>)
  if (msec == OSAL_TIMEOUT_WAIT_FOREVER) { return portMAX_DELAY; }
 80140a6:	f1bb 3fff 	cmp.w	fp, #4294967295
 80140aa:	6818      	ldr	r0, [r3, #0]
 80140ac:	d01e      	beq.n	80140ec <tud_task_ext+0x6c>
  if (msec == 0) { return 0; }
 80140ae:	f1bb 0f00 	cmp.w	fp, #0
 80140b2:	d01b      	beq.n	80140ec <tud_task_ext+0x6c>
  uint32_t ticks = pdMS_TO_TICKS(msec);
 80140b4:	9b02      	ldr	r3, [sp, #8]
 80140b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80140ba:	9b05      	ldr	r3, [sp, #20]
 80140bc:	bf34      	ite	cc
 80140be:	2201      	movcc	r2, #1
 80140c0:	461a      	movcs	r2, r3
  return xQueueReceive(qhdl, data, _osal_ms2tick(msec));
 80140c2:	a907      	add	r1, sp, #28
 80140c4:	f7f4 fa3d 	bl	8008542 <xQueueReceive>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d035      	beq.n	8014138 <tud_task_ext+0xb8>
    switch (event.event_id) {
 80140cc:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80140d0:	3b01      	subs	r3, #1
 80140d2:	2b07      	cmp	r3, #7
 80140d4:	f200 8314 	bhi.w	8014700 <tud_task_ext+0x680>
 80140d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80140dc:	001b000a 	.word	0x001b000a
 80140e0:	02ee0309 	.word	0x02ee0309
 80140e4:	002402fa 	.word	0x002402fa
 80140e8:	030202a7 	.word	0x030202a7
  if (msec == 0) { return 0; }
 80140ec:	465a      	mov	r2, fp
 80140ee:	e7e8      	b.n	80140c2 <tud_task_ext+0x42>
  configuration_reset(rhport);
 80140f0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80140f4:	f7ff fc42 	bl	801397c <configuration_reset>
  usbd_control_reset();
 80140f8:	f000 fb84 	bl	8014804 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80140fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014100:	f889 3002 	strb.w	r3, [r9, #2]
  }
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_empty(osal_queue_t qhdl) {
  return uxQueueMessagesWaiting(qhdl) == 0;
 8014104:	4b8d      	ldr	r3, [pc, #564]	@ (801433c <tud_task_ext+0x2bc>)
 8014106:	6818      	ldr	r0, [r3, #0]
 8014108:	f7f4 fb9c 	bl	8008844 <uxQueueMessagesWaiting>
    if (osal_queue_empty(_usbd_q)) { return; }
 801410c:	2800      	cmp	r0, #0
 801410e:	d1c9      	bne.n	80140a4 <tud_task_ext+0x24>
 8014110:	e012      	b.n	8014138 <tud_task_ext+0xb8>
  configuration_reset(rhport);
 8014112:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014116:	f7ff fc31 	bl	801397c <configuration_reset>
  usbd_control_reset();
 801411a:	f000 fb73 	bl	8014804 <usbd_control_reset>
        tud_umount_cb();
 801411e:	f7fe f8f7 	bl	8012310 <tud_umount_cb>
        break;
 8014122:	e7ef      	b.n	8014104 <tud_task_ext+0x84>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8014124:	4a86      	ldr	r2, [pc, #536]	@ (8014340 <tud_task_ext+0x2c0>)
 8014126:	7813      	ldrb	r3, [r2, #0]
 8014128:	b94b      	cbnz	r3, 801413e <tud_task_ext+0xbe>
          TU_ASSERT(driver,);
 801412a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801412e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8014132:	07dc      	lsls	r4, r3, #31
 8014134:	d500      	bpl.n	8014138 <tud_task_ext+0xb8>
 8014136:	be00      	bkpt	0x0000
}
 8014138:	b00b      	add	sp, #44	@ 0x2c
 801413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_queued_setup--;
 801413e:	7813      	ldrb	r3, [r2, #0]
 8014140:	3b01      	subs	r3, #1
 8014142:	b2db      	uxtb	r3, r3
 8014144:	7013      	strb	r3, [r2, #0]
        if (_usbd_queued_setup) {
 8014146:	7813      	ldrb	r3, [r2, #0]
 8014148:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 801414c:	2b00      	cmp	r3, #0
 801414e:	d1d9      	bne.n	8014104 <tud_task_ext+0x84>
        _usbd_dev.connected = 1;
 8014150:	4c7c      	ldr	r4, [pc, #496]	@ (8014344 <tud_task_ext+0x2c4>)
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8014152:	f89d 501c 	ldrb.w	r5, [sp, #28]
        _usbd_dev.connected = 1;
 8014156:	7823      	ldrb	r3, [r4, #0]
 8014158:	f043 0301 	orr.w	r3, r3, #1
 801415c:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 801415e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8014162:	f360 0300 	bfi	r3, r0, #0, #1
 8014166:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 801416a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801416e:	f360 0382 	bfi	r3, r0, #2, #1
 8014172:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8014176:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 801417a:	f360 0300 	bfi	r3, r0, #0, #1
 801417e:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8014182:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8014186:	f360 0382 	bfi	r3, r0, #2, #1
 801418a:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
  usbd_control_set_complete_callback(NULL);
 801418e:	f000 fb41 	bl	8014814 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8014192:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014196:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 801419a:	2a60      	cmp	r2, #96	@ 0x60
 801419c:	d107      	bne.n	80141ae <tud_task_ext+0x12e>
      TU_BREAKPOINT();
 801419e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80141a2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80141a6:	07dd      	lsls	r5, r3, #31
 80141a8:	d52b      	bpl.n	8014202 <tud_task_ext+0x182>
 80141aa:	be00      	bkpt	0x0000
 80141ac:	e029      	b.n	8014202 <tud_task_ext+0x182>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80141ae:	2a40      	cmp	r2, #64	@ 0x40
 80141b0:	d10a      	bne.n	80141c8 <tud_task_ext+0x148>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80141b2:	4865      	ldr	r0, [pc, #404]	@ (8014348 <tud_task_ext+0x2c8>)
 80141b4:	f000 fb2e 	bl	8014814 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80141b8:	aa08      	add	r2, sp, #32
 80141ba:	2101      	movs	r1, #1
 80141bc:	4628      	mov	r0, r5
 80141be:	f7ff fbda 	bl	8013976 <tud_vendor_control_xfer_cb>
        if (!process_control_request(event.rhport, &event.setup_received)) {
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d19e      	bne.n	8014104 <tud_task_ext+0x84>
 80141c6:	e01c      	b.n	8014202 <tud_task_ext+0x182>
  switch ( p_request->bmRequestType_bit.recipient ) {
 80141c8:	f003 031f 	and.w	r3, r3, #31
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	f000 819c 	beq.w	801450a <tud_task_ext+0x48a>
 80141d2:	2b02      	cmp	r3, #2
 80141d4:	f000 81d4 	beq.w	8014580 <tud_task_ext+0x500>
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d1e0      	bne.n	801419e <tud_task_ext+0x11e>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 80141dc:	2a20      	cmp	r2, #32
 80141de:	d129      	bne.n	8014234 <tud_task_ext+0x1b4>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80141e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80141e4:	2b0f      	cmp	r3, #15
 80141e6:	d80c      	bhi.n	8014202 <tud_task_ext+0x182>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80141e8:	4423      	add	r3, r4
 80141ea:	7919      	ldrb	r1, [r3, #4]
  if (drvid < _app_driver_count) {
 80141ec:	4b57      	ldr	r3, [pc, #348]	@ (801434c <tud_task_ext+0x2cc>)
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	4299      	cmp	r1, r3
 80141f2:	d211      	bcs.n	8014218 <tud_task_ext+0x198>
    driver = &_app_driver[drvid];
 80141f4:	4b56      	ldr	r3, [pc, #344]	@ (8014350 <tud_task_ext+0x2d0>)
 80141f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80141fa:	681b      	ldr	r3, [r3, #0]
        TU_VERIFY(driver);
 80141fc:	eb13 0181 	adds.w	r1, r3, r1, lsl #2
 8014200:	d113      	bne.n	801422a <tud_task_ext+0x1aa>
          dcd_edpt_stall(event.rhport, 0);
 8014202:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014206:	2100      	movs	r1, #0
 8014208:	f000 ff40 	bl	801508c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 801420c:	2180      	movs	r1, #128	@ 0x80
 801420e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014212:	f000 ff3b 	bl	801508c <dcd_edpt_stall>
 8014216:	e775      	b.n	8014104 <tud_task_ext+0x84>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8014218:	1c9a      	adds	r2, r3, #2
 801421a:	b2d2      	uxtb	r2, r2
 801421c:	4291      	cmp	r1, r2
 801421e:	d2f0      	bcs.n	8014202 <tud_task_ext+0x182>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8014220:	1ac9      	subs	r1, r1, r3
 8014222:	2224      	movs	r2, #36	@ 0x24
 8014224:	4b4b      	ldr	r3, [pc, #300]	@ (8014354 <tud_task_ext+0x2d4>)
 8014226:	fb02 3101 	mla	r1, r2, r1, r3
        return invoke_class_control(rhport, driver, p_request);
 801422a:	aa08      	add	r2, sp, #32
        return invoke_class_control(rhport, driver, p_request);
 801422c:	4628      	mov	r0, r5
 801422e:	f7ff fbeb 	bl	8013a08 <invoke_class_control>
 8014232:	e7c6      	b.n	80141c2 <tud_task_ext+0x142>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8014234:	2a00      	cmp	r2, #0
 8014236:	d1b2      	bne.n	801419e <tud_task_ext+0x11e>
      switch ( p_request->bRequest ) {
 8014238:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 801423c:	2b09      	cmp	r3, #9
 801423e:	d8ae      	bhi.n	801419e <tud_task_ext+0x11e>
 8014240:	a201      	add	r2, pc, #4	@ (adr r2, 8014248 <tud_task_ext+0x1c8>)
 8014242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014246:	bf00      	nop
 8014248:	080144f5 	.word	0x080144f5
 801424c:	080144e3 	.word	0x080144e3
 8014250:	0801419f 	.word	0x0801419f
 8014254:	080144cf 	.word	0x080144cf
 8014258:	0801419f 	.word	0x0801419f
 801425c:	08014271 	.word	0x08014271
 8014260:	08014425 	.word	0x08014425
 8014264:	0801419f 	.word	0x0801419f
 8014268:	0801428b 	.word	0x0801428b
 801426c:	080142a1 	.word	0x080142a1
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8014270:	a808      	add	r0, sp, #32
 8014272:	f000 fad5 	bl	8014820 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8014276:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
 801427a:	4628      	mov	r0, r5
 801427c:	f000 feee 	bl	801505c <dcd_set_address>
          _usbd_dev.addressed = 1;
 8014280:	7823      	ldrb	r3, [r4, #0]
 8014282:	f043 0302 	orr.w	r3, r3, #2
 8014286:	7023      	strb	r3, [r4, #0]
        break;
 8014288:	e73c      	b.n	8014104 <tud_task_ext+0x84>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 801428a:	7863      	ldrb	r3, [r4, #1]
 801428c:	f88d 301a 	strb.w	r3, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8014290:	2301      	movs	r3, #1
            tud_control_xfer(rhport, p_request, &status, 2);
 8014292:	f10d 021a 	add.w	r2, sp, #26
 8014296:	a908      	add	r1, sp, #32
 8014298:	4628      	mov	r0, r5
 801429a:	f000 fa89 	bl	80147b0 <tud_control_xfer>
          break;
 801429e:	e731      	b.n	8014104 <tud_task_ext+0x84>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80142a0:	f89d 6022 	ldrb.w	r6, [sp, #34]	@ 0x22
          if (_usbd_dev.cfg_num != cfg_num) {
 80142a4:	7863      	ldrb	r3, [r4, #1]
 80142a6:	429e      	cmp	r6, r3
 80142a8:	d041      	beq.n	801432e <tud_task_ext+0x2ae>
            if ( _usbd_dev.cfg_num ) {
 80142aa:	7863      	ldrb	r3, [r4, #1]
 80142ac:	b15b      	cbz	r3, 80142c6 <tud_task_ext+0x246>
              dcd_sof_enable(rhport, false);
 80142ae:	2100      	movs	r1, #0
 80142b0:	4628      	mov	r0, r5
 80142b2:	f000 fe23 	bl	8014efc <dcd_sof_enable>
              dcd_edpt_close_all(rhport);
 80142b6:	4628      	mov	r0, r5
 80142b8:	f000 fe52 	bl	8014f60 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 80142bc:	78a7      	ldrb	r7, [r4, #2]
              configuration_reset(rhport);
 80142be:	4628      	mov	r0, r5
 80142c0:	f7ff fb5c 	bl	801397c <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 80142c4:	70a7      	strb	r7, [r4, #2]
            _usbd_dev.cfg_num = cfg_num;
 80142c6:	7066      	strb	r6, [r4, #1]
            if ( cfg_num ) {
 80142c8:	2e00      	cmp	r6, #0
 80142ca:	f000 80a8 	beq.w	801441e <tud_task_ext+0x39e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80142ce:	1e70      	subs	r0, r6, #1
 80142d0:	b2c0      	uxtb	r0, r0
 80142d2:	f7fe f83f 	bl	8012354 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80142d6:	b110      	cbz	r0, 80142de <tud_task_ext+0x25e>
 80142d8:	7843      	ldrb	r3, [r0, #1]
 80142da:	2b02      	cmp	r3, #2
 80142dc:	d010      	beq.n	8014300 <tud_task_ext+0x280>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80142de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80142e2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80142e6:	07db      	lsls	r3, r3, #31
 80142e8:	f100 8097 	bmi.w	801441a <tud_task_ext+0x39a>
                TU_BREAKPOINT();
 80142ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80142f0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80142f4:	07df      	lsls	r7, r3, #31
 80142f6:	d500      	bpl.n	80142fa <tud_task_ext+0x27a>
 80142f8:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80142fa:	2300      	movs	r3, #0
 80142fc:	7063      	strb	r3, [r4, #1]
                return false;
 80142fe:	e780      	b.n	8014202 <tud_task_ext+0x182>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8014300:	79c3      	ldrb	r3, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8014302:	f100 0609 	add.w	r6, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8014306:	f3c3 1280 	ubfx	r2, r3, #6, #1
 801430a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801430e:	011b      	lsls	r3, r3, #4
 8014310:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8014314:	7822      	ldrb	r2, [r4, #0]
 8014316:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 801431a:	4313      	orrs	r3, r2
 801431c:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 801431e:	8843      	ldrh	r3, [r0, #2]
 8014320:	18c3      	adds	r3, r0, r3
 8014322:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8014324:	9b03      	ldr	r3, [sp, #12]
 8014326:	42b3      	cmp	r3, r6
 8014328:	d816      	bhi.n	8014358 <tud_task_ext+0x2d8>
              tud_mount_cb();
 801432a:	f7fd ffe9 	bl	8012300 <tud_mount_cb>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 801432e:	a908      	add	r1, sp, #32
 8014330:	4628      	mov	r0, r5
 8014332:	f000 fa2b 	bl	801478c <tud_control_status>
 8014336:	e6e5      	b.n	8014104 <tud_task_ext+0x84>
 8014338:	20002088 	.word	0x20002088
 801433c:	200114bc 	.word	0x200114bc
 8014340:	20011588 	.word	0x20011588
 8014344:	20011589 	.word	0x20011589
 8014348:	08013977 	.word	0x08013977
 801434c:	20011580 	.word	0x20011580
 8014350:	20011584 	.word	0x20011584
 8014354:	0808f980 	.word	0x0808f980
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8014358:	7873      	ldrb	r3, [r6, #1]
 801435a:	2b0b      	cmp	r3, #11
  return desc8 + desc8[DESC_OFFSET_LEN];
 801435c:	bf09      	itett	eq
 801435e:	7833      	ldrbeq	r3, [r6, #0]
    uint8_t assoc_itf_count = 1;
 8014360:	f04f 0a01 	movne.w	sl, #1
      assoc_itf_count = desc_iad->bInterfaceCount;
 8014364:	f896 a003 	ldrbeq.w	sl, [r6, #3]
 8014368:	18f6      	addeq	r6, r6, r3
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 801436a:	7873      	ldrb	r3, [r6, #1]
 801436c:	2b04      	cmp	r3, #4
 801436e:	d1b6      	bne.n	80142de <tud_task_ext+0x25e>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8014370:	9b03      	ldr	r3, [sp, #12]
 8014372:	1b9b      	subs	r3, r3, r6
 8014374:	b29b      	uxth	r3, r3
 8014376:	9304      	str	r3, [sp, #16]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8014378:	2300      	movs	r3, #0
 801437a:	9301      	str	r3, [sp, #4]
 801437c:	4bb9      	ldr	r3, [pc, #740]	@ (8014664 <tud_task_ext+0x5e4>)
 801437e:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	1c9a      	adds	r2, r3, #2
 8014386:	b2d2      	uxtb	r2, r2
 8014388:	42ba      	cmp	r2, r7
 801438a:	d9a8      	bls.n	80142de <tud_task_ext+0x25e>
  if (drvid < _app_driver_count) {
 801438c:	42bb      	cmp	r3, r7
 801438e:	f04f 0824 	mov.w	r8, #36	@ 0x24
 8014392:	d92f      	bls.n	80143f4 <tud_task_ext+0x374>
    driver = &_app_driver[drvid];
 8014394:	4bb4      	ldr	r3, [pc, #720]	@ (8014668 <tud_task_ext+0x5e8>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	fb08 3807 	mla	r8, r8, r7, r3
      TU_ASSERT(driver);
 801439c:	f1b8 0f00 	cmp.w	r8, #0
 80143a0:	d09d      	beq.n	80142de <tud_task_ext+0x25e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80143a2:	9a04      	ldr	r2, [sp, #16]
 80143a4:	4631      	mov	r1, r6
 80143a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80143aa:	4628      	mov	r0, r5
 80143ac:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80143ae:	2808      	cmp	r0, #8
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80143b0:	4602      	mov	r2, r0
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80143b2:	d92f      	bls.n	8014414 <tud_task_ext+0x394>
 80143b4:	9b04      	ldr	r3, [sp, #16]
 80143b6:	4283      	cmp	r3, r0
 80143b8:	d32c      	bcc.n	8014414 <tud_task_ext+0x394>
        if ( assoc_itf_count == 1)
 80143ba:	f1ba 0f01 	cmp.w	sl, #1
 80143be:	d106      	bne.n	80143ce <tud_task_ext+0x34e>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80143c0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80143c4:	4ba9      	ldr	r3, [pc, #676]	@ (801466c <tud_task_ext+0x5ec>)
 80143c6:	4299      	cmp	r1, r3
 80143c8:	bf08      	it	eq
 80143ca:	f04f 0a02 	moveq.w	sl, #2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80143ce:	2100      	movs	r1, #0
 80143d0:	b2cb      	uxtb	r3, r1
 80143d2:	459a      	cmp	sl, r3
 80143d4:	d813      	bhi.n	80143fe <tud_task_ext+0x37e>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80143d6:	463b      	mov	r3, r7
 80143d8:	4631      	mov	r1, r6
 80143da:	48a5      	ldr	r0, [pc, #660]	@ (8014670 <tud_task_ext+0x5f0>)
 80143dc:	9201      	str	r2, [sp, #4]
 80143de:	f001 fa0d 	bl	80157fc <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80143e2:	4ba0      	ldr	r3, [pc, #640]	@ (8014664 <tud_task_ext+0x5e4>)
        p_desc += drv_len;
 80143e4:	9a01      	ldr	r2, [sp, #4]
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80143e6:	781b      	ldrb	r3, [r3, #0]
        p_desc += drv_len;
 80143e8:	4416      	add	r6, r2
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80143ea:	3302      	adds	r3, #2
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	42bb      	cmp	r3, r7
 80143f0:	d898      	bhi.n	8014324 <tud_task_ext+0x2a4>
 80143f2:	e774      	b.n	80142de <tud_task_ext+0x25e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80143f4:	1afb      	subs	r3, r7, r3
 80143f6:	4a9f      	ldr	r2, [pc, #636]	@ (8014674 <tud_task_ext+0x5f4>)
 80143f8:	fb08 2803 	mla	r8, r8, r3, r2
      TU_ASSERT(driver);
 80143fc:	e7d1      	b.n	80143a2 <tud_task_ext+0x322>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80143fe:	78b0      	ldrb	r0, [r6, #2]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8014400:	3101      	adds	r1, #1
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8014402:	4403      	add	r3, r0
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8014404:	fa54 f383 	uxtab	r3, r4, r3
 8014408:	7918      	ldrb	r0, [r3, #4]
 801440a:	28ff      	cmp	r0, #255	@ 0xff
 801440c:	f47f af67 	bne.w	80142de <tud_task_ext+0x25e>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8014410:	711f      	strb	r7, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8014412:	e7dd      	b.n	80143d0 <tud_task_ext+0x350>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8014414:	9b01      	ldr	r3, [sp, #4]
 8014416:	3301      	adds	r3, #1
 8014418:	e7af      	b.n	801437a <tud_task_ext+0x2fa>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 801441a:	be00      	bkpt	0x0000
 801441c:	e766      	b.n	80142ec <tud_task_ext+0x26c>
              tud_umount_cb();
 801441e:	f7fd ff77 	bl	8012310 <tud_umount_cb>
          tud_control_status(rhport, p_request);
 8014422:	e784      	b.n	801432e <tud_task_ext+0x2ae>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8014424:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8014428:	0a1a      	lsrs	r2, r3, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 801442a:	b2d8      	uxtb	r0, r3
  switch(desc_type)
 801442c:	1e53      	subs	r3, r2, #1
 801442e:	2b0e      	cmp	r3, #14
 8014430:	f63f aee7 	bhi.w	8014202 <tud_task_ext+0x182>
 8014434:	a101      	add	r1, pc, #4	@ (adr r1, 801443c <tud_task_ext+0x3bc>)
 8014436:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801443a:	bf00      	nop
 801443c:	08014479 	.word	0x08014479
 8014440:	0801449b 	.word	0x0801449b
 8014444:	080144b5 	.word	0x080144b5
 8014448:	08014203 	.word	0x08014203
 801444c:	08014203 	.word	0x08014203
 8014450:	080144c9 	.word	0x080144c9
 8014454:	0801449b 	.word	0x0801449b
 8014458:	08014203 	.word	0x08014203
 801445c:	08014203 	.word	0x08014203
 8014460:	08014203 	.word	0x08014203
 8014464:	08014203 	.word	0x08014203
 8014468:	08014203 	.word	0x08014203
 801446c:	08014203 	.word	0x08014203
 8014470:	08014203 	.word	0x08014203
 8014474:	08014491 	.word	0x08014491
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8014478:	f7fd ff68 	bl	801234c <tud_descriptor_device_cb>
      TU_ASSERT(desc_device);
 801447c:	4602      	mov	r2, r0
 801447e:	2800      	cmp	r0, #0
 8014480:	f43f ae8d 	beq.w	801419e <tud_task_ext+0x11e>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8014484:	2312      	movs	r3, #18
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8014486:	a908      	add	r1, sp, #32
 8014488:	4628      	mov	r0, r5
 801448a:	f000 f991 	bl	80147b0 <tud_control_xfer>
 801448e:	e698      	b.n	80141c2 <tud_task_ext+0x142>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8014490:	f7ff faca 	bl	8013a28 <tud_descriptor_bos_cb>
        TU_VERIFY(desc_config);
 8014494:	4602      	mov	r2, r0
 8014496:	b940      	cbnz	r0, 80144aa <tud_task_ext+0x42a>
 8014498:	e6b3      	b.n	8014202 <tud_task_ext+0x182>
      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 801449a:	2a02      	cmp	r2, #2
 801449c:	d107      	bne.n	80144ae <tud_task_ext+0x42e>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 801449e:	f7fd ff59 	bl	8012354 <tud_descriptor_configuration_cb>
        TU_ASSERT(desc_config);
 80144a2:	4602      	mov	r2, r0
 80144a4:	2800      	cmp	r0, #0
 80144a6:	f43f ae7a 	beq.w	801419e <tud_task_ext+0x11e>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80144aa:	8853      	ldrh	r3, [r2, #2]
 80144ac:	e7eb      	b.n	8014486 <tud_task_ext+0x406>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80144ae:	f7ff fabf 	bl	8013a30 <tud_descriptor_other_speed_configuration_cb>
 80144b2:	e7ef      	b.n	8014494 <tud_task_ext+0x414>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80144b4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80144b8:	f7fd ff50 	bl	801235c <tud_descriptor_string_cb>
      TU_VERIFY(desc_qualifier);
 80144bc:	4602      	mov	r2, r0
 80144be:	2800      	cmp	r0, #0
 80144c0:	f43f ae9f 	beq.w	8014202 <tud_task_ext+0x182>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80144c4:	7803      	ldrb	r3, [r0, #0]
 80144c6:	e7de      	b.n	8014486 <tud_task_ext+0x406>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80144c8:	f7ff fab0 	bl	8013a2c <tud_descriptor_device_qualifier_cb>
 80144cc:	e7f6      	b.n	80144bc <tud_task_ext+0x43c>
          switch(p_request->wValue) {
 80144ce:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	f47f ae95 	bne.w	8014202 <tud_task_ext+0x182>
              _usbd_dev.remote_wakeup_en = true;
 80144d8:	7823      	ldrb	r3, [r4, #0]
 80144da:	f043 0308 	orr.w	r3, r3, #8
          _usbd_dev.remote_wakeup_en = false;
 80144de:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80144e0:	e725      	b.n	801432e <tud_task_ext+0x2ae>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80144e2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	f47f ae8b 	bne.w	8014202 <tud_task_ext+0x182>
          _usbd_dev.remote_wakeup_en = false;
 80144ec:	7823      	ldrb	r3, [r4, #0]
 80144ee:	f023 0308 	bic.w	r3, r3, #8
 80144f2:	e7f4      	b.n	80144de <tud_task_ext+0x45e>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80144f4:	7823      	ldrb	r3, [r4, #0]
 80144f6:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80144fa:	089b      	lsrs	r3, r3, #2
 80144fc:	f003 0302 	and.w	r3, r3, #2
 8014500:	4313      	orrs	r3, r2
 8014502:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 8014506:	2302      	movs	r3, #2
 8014508:	e6c3      	b.n	8014292 <tud_task_ext+0x212>
 801450a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 801450e:	2b0f      	cmp	r3, #15
 8014510:	f63f ae77 	bhi.w	8014202 <tud_task_ext+0x182>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8014514:	4423      	add	r3, r4
 8014516:	7919      	ldrb	r1, [r3, #4]
  if (drvid < _app_driver_count) {
 8014518:	4b52      	ldr	r3, [pc, #328]	@ (8014664 <tud_task_ext+0x5e4>)
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	4299      	cmp	r1, r3
 801451e:	d224      	bcs.n	801456a <tud_task_ext+0x4ea>
    driver = &_app_driver[drvid];
 8014520:	4b51      	ldr	r3, [pc, #324]	@ (8014668 <tud_task_ext+0x5e8>)
 8014522:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014526:	681b      	ldr	r3, [r3, #0]
      TU_VERIFY(driver);
 8014528:	eb13 0181 	adds.w	r1, r3, r1, lsl #2
 801452c:	f43f ae69 	beq.w	8014202 <tud_task_ext+0x182>
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8014530:	aa08      	add	r2, sp, #32
 8014532:	4628      	mov	r0, r5
 8014534:	f7ff fa68 	bl	8013a08 <invoke_class_control>
 8014538:	2800      	cmp	r0, #0
 801453a:	f47f ade3 	bne.w	8014104 <tud_task_ext+0x84>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 801453e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014542:	f013 0460 	ands.w	r4, r3, #96	@ 0x60
 8014546:	f47f ae5c 	bne.w	8014202 <tud_task_ext+0x182>
        switch(p_request->bRequest) {
 801454a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 801454e:	3b0a      	subs	r3, #10
 8014550:	2b01      	cmp	r3, #1
 8014552:	f63f ae56 	bhi.w	8014202 <tud_task_ext+0x182>
            usbd_control_set_complete_callback(NULL);
 8014556:	f000 f95d 	bl	8014814 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 801455a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 801455e:	2b0a      	cmp	r3, #10
 8014560:	f47f aee5 	bne.w	801432e <tud_task_ext+0x2ae>
              uint8_t alternate = 0;
 8014564:	f88d 401a 	strb.w	r4, [sp, #26]
 8014568:	e692      	b.n	8014290 <tud_task_ext+0x210>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 801456a:	1c9a      	adds	r2, r3, #2
 801456c:	b2d2      	uxtb	r2, r2
 801456e:	4291      	cmp	r1, r2
 8014570:	f4bf ae47 	bcs.w	8014202 <tud_task_ext+0x182>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8014574:	1ac9      	subs	r1, r1, r3
 8014576:	2224      	movs	r2, #36	@ 0x24
 8014578:	4b3e      	ldr	r3, [pc, #248]	@ (8014674 <tud_task_ext+0x5f4>)
 801457a:	fb02 3101 	mla	r1, r2, r1, r3
      TU_VERIFY(driver);
 801457e:	e7d7      	b.n	8014530 <tud_task_ext+0x4b0>
 8014580:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8014584:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8014588:	2b08      	cmp	r3, #8
 801458a:	f63f ae08 	bhi.w	801419e <tud_task_ext+0x11e>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 801458e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  if (drvid < _app_driver_count) {
 8014592:	4834      	ldr	r0, [pc, #208]	@ (8014664 <tud_task_ext+0x5e4>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8014594:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
  if (drvid < _app_driver_count) {
 8014598:	7800      	ldrb	r0, [r0, #0]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 801459a:	7d1b      	ldrb	r3, [r3, #20]
  if (drvid < _app_driver_count) {
 801459c:	4283      	cmp	r3, r0
 801459e:	d215      	bcs.n	80145cc <tud_task_ext+0x54c>
    driver = &_app_driver[drvid];
 80145a0:	4831      	ldr	r0, [pc, #196]	@ (8014668 <tud_task_ext+0x5e8>)
 80145a2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80145a6:	6806      	ldr	r6, [r0, #0]
 80145a8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80145ac:	b9ea      	cbnz	r2, 80145ea <tud_task_ext+0x56a>
        switch ( p_request->bRequest ) {
 80145ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80145b2:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 80145b6:	2a01      	cmp	r2, #1
 80145b8:	d01b      	beq.n	80145f2 <tud_task_ext+0x572>
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	f47f adef 	bne.w	801419e <tud_task_ext+0x11e>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80145c0:	4628      	mov	r0, r5
 80145c2:	f7ff fd4f 	bl	8014064 <usbd_edpt_stalled>
 80145c6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80145ca:	e79c      	b.n	8014506 <tud_task_ext+0x486>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 80145cc:	1c86      	adds	r6, r0, #2
 80145ce:	b2f6      	uxtb	r6, r6
 80145d0:	42b3      	cmp	r3, r6
 80145d2:	f080 809e 	bcs.w	8014712 <tud_task_ext+0x692>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80145d6:	1a1b      	subs	r3, r3, r0
 80145d8:	4e26      	ldr	r6, [pc, #152]	@ (8014674 <tud_task_ext+0x5f4>)
 80145da:	2024      	movs	r0, #36	@ 0x24
 80145dc:	fb00 6603 	mla	r6, r0, r3, r6
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80145e0:	2a00      	cmp	r2, #0
 80145e2:	d0e4      	beq.n	80145ae <tud_task_ext+0x52e>
        return invoke_class_control(rhport, driver, p_request);
 80145e4:	aa08      	add	r2, sp, #32
 80145e6:	4631      	mov	r1, r6
 80145e8:	e620      	b.n	801422c <tud_task_ext+0x1ac>
        TU_VERIFY(driver);
 80145ea:	2e00      	cmp	r6, #0
 80145ec:	f43f ae09 	beq.w	8014202 <tud_task_ext+0x182>
 80145f0:	e7f8      	b.n	80145e4 <tud_task_ext+0x564>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80145f2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80145f6:	b922      	cbnz	r2, 8014602 <tud_task_ext+0x582>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80145f8:	2b01      	cmp	r3, #1
                usbd_edpt_clear_stall(rhport, ep_addr);
 80145fa:	4628      	mov	r0, r5
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80145fc:	d112      	bne.n	8014624 <tud_task_ext+0x5a4>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80145fe:	f7ff fd13 	bl	8014028 <usbd_edpt_clear_stall>
            if (driver) {
 8014602:	2e00      	cmp	r6, #0
 8014604:	f43f ad7e 	beq.w	8014104 <tud_task_ext+0x84>
              (void) invoke_class_control(rhport, driver, p_request);
 8014608:	4631      	mov	r1, r6
 801460a:	aa08      	add	r2, sp, #32
 801460c:	4628      	mov	r0, r5
 801460e:	f7ff f9fb 	bl	8013a08 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8014612:	2000      	movs	r0, #0
 8014614:	f000 f8fe 	bl	8014814 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8014618:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 801461c:	07de      	lsls	r6, r3, #31
 801461e:	f53f ad71 	bmi.w	8014104 <tud_task_ext+0x84>
 8014622:	e684      	b.n	801432e <tud_task_ext+0x2ae>
                usbd_edpt_stall(rhport, ep_addr);
 8014624:	f7ff fce2 	bl	8013fec <usbd_edpt_stall>
 8014628:	e7eb      	b.n	8014602 <tud_task_ext+0x582>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 801462a:	f89d 1020 	ldrb.w	r1, [sp, #32]
 801462e:	f001 047f 	and.w	r4, r1, #127	@ 0x7f
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8014632:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 8014636:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
 801463a:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 801463e:	f023 0301 	bic.w	r3, r3, #1
 8014642:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8014646:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 801464a:	f023 0304 	bic.w	r3, r3, #4
 801464e:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        if (0 == epnum) {
 8014652:	b98c      	cbnz	r4, 8014678 <tud_task_ext+0x5f8>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8014654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014656:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
 801465a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801465e:	f000 f8ed 	bl	801483c <usbd_control_xfer_cb>
 8014662:	e54f      	b.n	8014104 <tud_task_ext+0x84>
 8014664:	20011580 	.word	0x20011580
 8014668:	20011584 	.word	0x20011584
 801466c:	080128cd 	.word	0x080128cd
 8014670:	2001159d 	.word	0x2001159d
 8014674:	0808f980 	.word	0x0808f980
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8014678:	7d13      	ldrb	r3, [r2, #20]
  if (drvid < _app_driver_count) {
 801467a:	4a28      	ldr	r2, [pc, #160]	@ (801471c <tud_task_ext+0x69c>)
 801467c:	7812      	ldrb	r2, [r2, #0]
 801467e:	4293      	cmp	r3, r2
 8014680:	d20f      	bcs.n	80146a2 <tud_task_ext+0x622>
    driver = &_app_driver[drvid];
 8014682:	4a27      	ldr	r2, [pc, #156]	@ (8014720 <tud_task_ext+0x6a0>)
 8014684:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8014688:	6812      	ldr	r2, [r2, #0]
          TU_ASSERT(driver,);
 801468a:	eb12 0383 	adds.w	r3, r2, r3, lsl #2
 801468e:	f43f ad4c 	beq.w	801412a <tud_task_ext+0xaa>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8014692:	699c      	ldr	r4, [r3, #24]
 8014694:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
 8014698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801469a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801469e:	47a0      	blx	r4
 80146a0:	e530      	b.n	8014104 <tud_task_ext+0x84>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 80146a2:	1c90      	adds	r0, r2, #2
 80146a4:	b2c0      	uxtb	r0, r0
 80146a6:	4283      	cmp	r3, r0
 80146a8:	f4bf ad3f 	bcs.w	801412a <tud_task_ext+0xaa>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80146ac:	1a9b      	subs	r3, r3, r2
 80146ae:	2024      	movs	r0, #36	@ 0x24
 80146b0:	4a1c      	ldr	r2, [pc, #112]	@ (8014724 <tud_task_ext+0x6a4>)
 80146b2:	fb00 2303 	mla	r3, r0, r3, r2
          TU_ASSERT(driver,);
 80146b6:	e7ec      	b.n	8014692 <tud_task_ext+0x612>
        if (_usbd_dev.connected) {
 80146b8:	f899 3000 	ldrb.w	r3, [r9]
 80146bc:	07d8      	lsls	r0, r3, #31
 80146be:	f57f ad21 	bpl.w	8014104 <tud_task_ext+0x84>
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80146c2:	f899 0000 	ldrb.w	r0, [r9]
 80146c6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80146ca:	f7fd fe27 	bl	801231c <tud_suspend_cb>
 80146ce:	e519      	b.n	8014104 <tud_task_ext+0x84>
        if (_usbd_dev.connected) {
 80146d0:	f899 3000 	ldrb.w	r3, [r9]
 80146d4:	07d9      	lsls	r1, r3, #31
 80146d6:	f57f ad15 	bpl.w	8014104 <tud_task_ext+0x84>
          tud_resume_cb();
 80146da:	f7fd fe27 	bl	801232c <tud_resume_cb>
 80146de:	e511      	b.n	8014104 <tud_task_ext+0x84>
        if (event.func_call.func) {
 80146e0:	9b08      	ldr	r3, [sp, #32]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	f43f ad0e 	beq.w	8014104 <tud_task_ext+0x84>
          event.func_call.func(event.func_call.param);
 80146e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146ea:	4798      	blx	r3
 80146ec:	e50a      	b.n	8014104 <tud_task_ext+0x84>
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80146ee:	f899 3003 	ldrb.w	r3, [r9, #3]
 80146f2:	07da      	lsls	r2, r3, #31
 80146f4:	f57f ad06 	bpl.w	8014104 <tud_task_ext+0x84>
          tud_sof_cb(event.sof.frame_count);
 80146f8:	9808      	ldr	r0, [sp, #32]
 80146fa:	f7ff f994 	bl	8013a26 <tud_sof_cb>
 80146fe:	e501      	b.n	8014104 <tud_task_ext+0x84>
        TU_BREAKPOINT();
 8014700:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8014704:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8014708:	07db      	lsls	r3, r3, #31
 801470a:	f57f acfb 	bpl.w	8014104 <tud_task_ext+0x84>
 801470e:	be00      	bkpt	0x0000
 8014710:	e4f8      	b.n	8014104 <tud_task_ext+0x84>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8014712:	2a00      	cmp	r2, #0
 8014714:	f47f ad75 	bne.w	8014202 <tud_task_ext+0x182>
  usbd_class_driver_t const *driver = NULL;
 8014718:	2600      	movs	r6, #0
 801471a:	e748      	b.n	80145ae <tud_task_ext+0x52e>
 801471c:	20011580 	.word	0x20011580
 8014720:	20011584 	.word	0x20011584
 8014724:	0808f980 	.word	0x0808f980

08014728 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8014728:	4b12      	ldr	r3, [pc, #72]	@ (8014774 <data_stage_xact+0x4c>)
 801472a:	8999      	ldrh	r1, [r3, #12]
 801472c:	89da      	ldrh	r2, [r3, #14]
static bool data_stage_xact(uint8_t rhport) {
 801472e:	b570      	push	{r4, r5, r6, lr}
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8014730:	1a8c      	subs	r4, r1, r2
static bool data_stage_xact(uint8_t rhport) {
 8014732:	4605      	mov	r5, r0
  uint8_t ep_addr = EDPT_CTRL_OUT;

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8014734:	f993 0000 	ldrsb.w	r0, [r3]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8014738:	b2a4      	uxth	r4, r4
 801473a:	2c40      	cmp	r4, #64	@ 0x40
 801473c:	bf28      	it	cs
 801473e:	2440      	movcs	r4, #64	@ 0x40
 8014740:	2800      	cmp	r0, #0
 8014742:	da0e      	bge.n	8014762 <data_stage_xact+0x3a>
    ep_addr = EDPT_CTRL_IN;
    if (xact_len) {
 8014744:	4291      	cmp	r1, r2
 8014746:	d012      	beq.n	801476e <data_stage_xact+0x46>
  memcpy(dest, src, count);
 8014748:	6899      	ldr	r1, [r3, #8]
 801474a:	4622      	mov	r2, r4
 801474c:	480a      	ldr	r0, [pc, #40]	@ (8014778 <data_stage_xact+0x50>)
 801474e:	f001 fc28 	bl	8015fa2 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8014752:	2180      	movs	r1, #128	@ 0x80
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8014754:	4a08      	ldr	r2, [pc, #32]	@ (8014778 <data_stage_xact+0x50>)
 8014756:	4623      	mov	r3, r4
 8014758:	4628      	mov	r0, r5
}
 801475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 801475e:	f7ff bc09 	b.w	8013f74 <usbd_edpt_xfer>
 8014762:	4291      	cmp	r1, r2
 8014764:	f04f 0100 	mov.w	r1, #0
 8014768:	d1f4      	bne.n	8014754 <data_stage_xact+0x2c>
 801476a:	460a      	mov	r2, r1
 801476c:	e7f3      	b.n	8014756 <data_stage_xact+0x2e>
    ep_addr = EDPT_CTRL_IN;
 801476e:	2180      	movs	r1, #128	@ 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8014770:	2200      	movs	r2, #0
 8014772:	e7f0      	b.n	8014756 <data_stage_xact+0x2e>
 8014774:	20011604 	.word	0x20011604
 8014778:	200115c4 	.word	0x200115c4

0801477c <status_stage_xact.isra.0>:
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 801477c:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 801477e:	2300      	movs	r3, #0
 8014780:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014784:	461a      	mov	r2, r3
 8014786:	f7ff bbf5 	b.w	8013f74 <usbd_edpt_xfer>

0801478a <dcd_edpt0_status_complete>:
}
 801478a:	4770      	bx	lr

0801478c <tud_control_status>:
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 801478c:	b430      	push	{r4, r5}
  _ctrl_xfer.request = (*request);
 801478e:	4c07      	ldr	r4, [pc, #28]	@ (80147ac <tud_control_status+0x20>)
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8014790:	4605      	mov	r5, r0
 8014792:	460b      	mov	r3, r1
  _ctrl_xfer.request = (*request);
 8014794:	6808      	ldr	r0, [r1, #0]
 8014796:	4622      	mov	r2, r4
 8014798:	6849      	ldr	r1, [r1, #4]
 801479a:	c203      	stmia	r2!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 801479c:	2200      	movs	r2, #0
  return status_stage_xact(rhport, request);
 801479e:	4628      	mov	r0, r5
 80147a0:	7819      	ldrb	r1, [r3, #0]
  _ctrl_xfer.data_len = 0;
 80147a2:	e9c4 2202 	strd	r2, r2, [r4, #8]
}
 80147a6:	bc30      	pop	{r4, r5}
  return status_stage_xact(rhport, request);
 80147a8:	f7ff bfe8 	b.w	801477c <status_stage_xact.isra.0>
 80147ac:	20011604 	.word	0x20011604

080147b0 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  _ctrl_xfer.request = (*request);
 80147b2:	4e13      	ldr	r6, [pc, #76]	@ (8014800 <tud_control_xfer+0x50>)
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80147b4:	460c      	mov	r4, r1
 80147b6:	4605      	mov	r5, r0
  _ctrl_xfer.request = (*request);
 80147b8:	6808      	ldr	r0, [r1, #0]
 80147ba:	4637      	mov	r7, r6
 80147bc:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80147be:	60b2      	str	r2, [r6, #8]
  _ctrl_xfer.request = (*request);
 80147c0:	c703      	stmia	r7!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 80147c2:	2100      	movs	r1, #0
 80147c4:	81f1      	strh	r1, [r6, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80147c6:	88e1      	ldrh	r1, [r4, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80147c8:	428b      	cmp	r3, r1
 80147ca:	bf28      	it	cs
 80147cc:	460b      	movcs	r3, r1
 80147ce:	81b3      	strh	r3, [r6, #12]

  if (request->wLength > 0U) {
 80147d0:	b189      	cbz	r1, 80147f6 <tud_control_xfer+0x46>
    if (_ctrl_xfer.data_len > 0U) {
 80147d2:	b14b      	cbz	r3, 80147e8 <tud_control_xfer+0x38>
      TU_ASSERT(buffer);
 80147d4:	b942      	cbnz	r2, 80147e8 <tud_control_xfer+0x38>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80147d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80147da:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80147de:	07db      	lsls	r3, r3, #31
 80147e0:	d500      	bpl.n	80147e4 <tud_control_xfer+0x34>
 80147e2:	be00      	bkpt	0x0000
      TU_ASSERT(buffer);
 80147e4:	2000      	movs	r0, #0
 80147e6:	e005      	b.n	80147f4 <tud_control_xfer+0x44>
    TU_ASSERT(data_stage_xact(rhport));
 80147e8:	4628      	mov	r0, r5
 80147ea:	f7ff ff9d 	bl	8014728 <data_stage_xact>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d0f1      	beq.n	80147d6 <tud_control_xfer+0x26>
  }

  return true;
 80147f2:	2001      	movs	r0, #1
}
 80147f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TU_ASSERT(status_stage_xact(rhport, request));
 80147f6:	7821      	ldrb	r1, [r4, #0]
 80147f8:	4628      	mov	r0, r5
 80147fa:	f7ff ffbf 	bl	801477c <status_stage_xact.isra.0>
 80147fe:	e7f6      	b.n	80147ee <tud_control_xfer+0x3e>
 8014800:	20011604 	.word	0x20011604

08014804 <usbd_control_reset>:
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
  tu_varclr(&_ctrl_xfer);
 8014804:	2214      	movs	r2, #20
 8014806:	2100      	movs	r1, #0
 8014808:	4801      	ldr	r0, [pc, #4]	@ (8014810 <usbd_control_reset+0xc>)
 801480a:	f001 bb31 	b.w	8015e70 <memset>
 801480e:	bf00      	nop
 8014810:	20011604 	.word	0x20011604

08014814 <usbd_control_set_complete_callback>:
}

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
  _ctrl_xfer.complete_cb = fp;
 8014814:	4b01      	ldr	r3, [pc, #4]	@ (801481c <usbd_control_set_complete_callback+0x8>)
 8014816:	6118      	str	r0, [r3, #16]
}
 8014818:	4770      	bx	lr
 801481a:	bf00      	nop
 801481c:	20011604 	.word	0x20011604

08014820 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8014820:	b510      	push	{r4, lr}
 8014822:	4602      	mov	r2, r0
  _ctrl_xfer.request = (*request);
 8014824:	4c04      	ldr	r4, [pc, #16]	@ (8014838 <usbd_control_set_request+0x18>)
 8014826:	6800      	ldr	r0, [r0, #0]
 8014828:	6851      	ldr	r1, [r2, #4]
 801482a:	4623      	mov	r3, r4
 801482c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 801482e:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len = 0;
 8014830:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 8014834:	bd10      	pop	{r4, pc}
 8014836:	bf00      	nop
 8014838:	20011604 	.word	0x20011604

0801483c <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 801483c:	b570      	push	{r4, r5, r6, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 801483e:	4c28      	ldr	r4, [pc, #160]	@ (80148e0 <usbd_control_xfer_cb+0xa4>)
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8014840:	461e      	mov	r6, r3
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8014842:	09c9      	lsrs	r1, r1, #7
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8014844:	4605      	mov	r5, r0
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8014846:	7823      	ldrb	r3, [r4, #0]
 8014848:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
 801484c:	d013      	beq.n	8014876 <usbd_control_xfer_cb+0x3a>
    TU_ASSERT(0 == xferred_bytes);
 801484e:	b13e      	cbz	r6, 8014860 <usbd_control_xfer_cb+0x24>
 8014850:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8014854:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8014858:	07db      	lsls	r3, r3, #31
 801485a:	d43f      	bmi.n	80148dc <usbd_control_xfer_cb+0xa0>
 801485c:	2000      	movs	r0, #0
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
  }

  return true;
}
 801485e:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8014860:	4621      	mov	r1, r4
 8014862:	f7ff ff92 	bl	801478a <dcd_edpt0_status_complete>
    if (_ctrl_xfer.complete_cb) {
 8014866:	6923      	ldr	r3, [r4, #16]
 8014868:	b11b      	cbz	r3, 8014872 <usbd_control_xfer_cb+0x36>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 801486a:	4622      	mov	r2, r4
 801486c:	2103      	movs	r1, #3
 801486e:	4628      	mov	r0, r5
 8014870:	4798      	blx	r3
    return true;
 8014872:	2001      	movs	r0, #1
 8014874:	e7f3      	b.n	801485e <usbd_control_xfer_cb+0x22>
  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8014876:	f994 3000 	ldrsb.w	r3, [r4]
    TU_VERIFY(_ctrl_xfer.buffer);
 801487a:	68a0      	ldr	r0, [r4, #8]
  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 801487c:	2b00      	cmp	r3, #0
 801487e:	db05      	blt.n	801488c <usbd_control_xfer_cb+0x50>
    TU_VERIFY(_ctrl_xfer.buffer);
 8014880:	2800      	cmp	r0, #0
 8014882:	d0eb      	beq.n	801485c <usbd_control_xfer_cb+0x20>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8014884:	4632      	mov	r2, r6
 8014886:	4917      	ldr	r1, [pc, #92]	@ (80148e4 <usbd_control_xfer_cb+0xa8>)
 8014888:	f001 fb8b 	bl	8015fa2 <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 801488c:	89e3      	ldrh	r3, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 801488e:	68a2      	ldr	r2, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8014890:	4433      	add	r3, r6
  _ctrl_xfer.buffer += xferred_bytes;
 8014892:	4432      	add	r2, r6
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8014894:	b29b      	uxth	r3, r3
  _ctrl_xfer.buffer += xferred_bytes;
 8014896:	60a2      	str	r2, [r4, #8]
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8014898:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 801489a:	81e3      	strh	r3, [r4, #14]
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 801489c:	429a      	cmp	r2, r3
 801489e:	d001      	beq.n	80148a4 <usbd_control_xfer_cb+0x68>
 80148a0:	2e3f      	cmp	r6, #63	@ 0x3f
 80148a2:	d817      	bhi.n	80148d4 <usbd_control_xfer_cb+0x98>
    if (_ctrl_xfer.complete_cb) {
 80148a4:	6923      	ldr	r3, [r4, #16]
 80148a6:	b933      	cbnz	r3, 80148b6 <usbd_control_xfer_cb+0x7a>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 80148a8:	7821      	ldrb	r1, [r4, #0]
 80148aa:	4628      	mov	r0, r5
 80148ac:	f7ff ff66 	bl	801477c <status_stage_xact.isra.0>
    TU_ASSERT(data_stage_xact(rhport));
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d1de      	bne.n	8014872 <usbd_control_xfer_cb+0x36>
 80148b4:	e7cc      	b.n	8014850 <usbd_control_xfer_cb+0x14>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80148b6:	2102      	movs	r1, #2
 80148b8:	4a09      	ldr	r2, [pc, #36]	@ (80148e0 <usbd_control_xfer_cb+0xa4>)
 80148ba:	4628      	mov	r0, r5
 80148bc:	4798      	blx	r3
    if (is_ok) {
 80148be:	4601      	mov	r1, r0
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d1f1      	bne.n	80148a8 <usbd_control_xfer_cb+0x6c>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80148c4:	4628      	mov	r0, r5
 80148c6:	f000 fbe1 	bl	801508c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80148ca:	2180      	movs	r1, #128	@ 0x80
 80148cc:	4628      	mov	r0, r5
 80148ce:	f000 fbdd 	bl	801508c <dcd_edpt_stall>
 80148d2:	e7ce      	b.n	8014872 <usbd_control_xfer_cb+0x36>
    TU_ASSERT(data_stage_xact(rhport));
 80148d4:	4628      	mov	r0, r5
 80148d6:	f7ff ff27 	bl	8014728 <data_stage_xact>
 80148da:	e7e9      	b.n	80148b0 <usbd_control_xfer_cb+0x74>
 80148dc:	be00      	bkpt	0x0000
 80148de:	e7bd      	b.n	801485c <usbd_control_xfer_cb+0x20>
 80148e0:	20011604 	.word	0x20011604
 80148e4:	200115c4 	.word	0x200115c4

080148e8 <dfifo_alloc>:

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80148e8:	2801      	cmp	r0, #1

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 80148ea:	b570      	push	{r4, r5, r6, lr}
 80148ec:	bf98      	it	ls
 80148ee:	4603      	movls	r3, r0
    // user mis-configured, ignore and use first controller
    rhport = 0;
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80148f0:	4d24      	ldr	r5, [pc, #144]	@ (8014984 <dfifo_alloc+0x9c>)
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80148f2:	bf88      	it	hi
 80148f4:	2300      	movhi	r3, #0
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
  const uint8_t ep_count = dwc2_controller->ep_count;
 80148f6:	eb05 1000 	add.w	r0, r5, r0, lsl #4
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80148fa:	011b      	lsls	r3, r3, #4
 80148fc:	7a06      	ldrb	r6, [r0, #8]
 80148fe:	58ec      	ldr	r4, [r5, r3]
 8014900:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
  const uint8_t epnum = tu_edpt_number(ep_addr);
  const uint8_t dir = tu_edpt_dir(ep_addr);

  TU_ASSERT(epnum < ep_count);
 8014904:	42ae      	cmp	r6, r5
 8014906:	d808      	bhi.n	801491a <dfifo_alloc+0x32>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8014908:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801490c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8014910:	07d9      	lsls	r1, r3, #31
 8014912:	d500      	bpl.n	8014916 <dfifo_alloc+0x2e>
 8014914:	be00      	bkpt	0x0000
  TU_ASSERT(epnum < ep_count);
 8014916:	2000      	movs	r0, #0
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
    }
  }

  return true;
}
 8014918:	bd70      	pop	{r4, r5, r6, pc}
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 801491a:	1cd3      	adds	r3, r2, #3
  if (dir == TUSB_DIR_OUT) {
 801491c:	09c9      	lsrs	r1, r1, #7
  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 801491e:	ea4f 0393 	mov.w	r3, r3, lsr #2
  if (dir == TUSB_DIR_OUT) {
 8014922:	d10f      	bne.n	8014944 <dfifo_alloc+0x5c>
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8014924:	f3c3 030d 	ubfx	r3, r3, #0, #14
    if (dwc2->grxfsiz < new_sz) {
 8014928:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 801492a:	3308      	adds	r3, #8
 801492c:	4433      	add	r3, r6
 801492e:	005b      	lsls	r3, r3, #1
 8014930:	b29b      	uxth	r3, r3
    if (dwc2->grxfsiz < new_sz) {
 8014932:	429a      	cmp	r2, r3
 8014934:	d204      	bcs.n	8014940 <dfifo_alloc+0x58>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8014936:	4a14      	ldr	r2, [pc, #80]	@ (8014988 <dfifo_alloc+0xa0>)
 8014938:	8892      	ldrh	r2, [r2, #4]
 801493a:	429a      	cmp	r2, r3
 801493c:	d3e4      	bcc.n	8014908 <dfifo_alloc+0x20>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 801493e:	6263      	str	r3, [r4, #36]	@ 0x24
  return true;
 8014940:	2001      	movs	r0, #1
 8014942:	e7e9      	b.n	8014918 <dfifo_alloc+0x30>
    if(dwc2_controller->ep_in_count) {
 8014944:	7a40      	ldrb	r0, [r0, #9]
 8014946:	4910      	ldr	r1, [pc, #64]	@ (8014988 <dfifo_alloc+0xa0>)
 8014948:	b120      	cbz	r0, 8014954 <dfifo_alloc+0x6c>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 801494a:	798a      	ldrb	r2, [r1, #6]
 801494c:	4290      	cmp	r0, r2
 801494e:	d9db      	bls.n	8014908 <dfifo_alloc+0x20>
      _dcd_data.allocated_epin_count++;
 8014950:	3201      	adds	r2, #1
 8014952:	718a      	strb	r2, [r1, #6]
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8014954:	68a2      	ldr	r2, [r4, #8]
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8014956:	6a60      	ldr	r0, [r4, #36]	@ 0x24
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8014958:	0612      	lsls	r2, r2, #24
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 801495a:	888a      	ldrh	r2, [r1, #4]
      fifo_size *= 2;
 801495c:	bf5c      	itt	pl
 801495e:	005b      	lslpl	r3, r3, #1
 8014960:	b29b      	uxthpl	r3, r3
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8014962:	4418      	add	r0, r3
 8014964:	4282      	cmp	r2, r0
 8014966:	d3cf      	bcc.n	8014908 <dfifo_alloc+0x20>
    _dcd_data.dfifo_top -= fifo_size;
 8014968:	1ad2      	subs	r2, r2, r3
 801496a:	b292      	uxth	r2, r2
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 801496c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    _dcd_data.dfifo_top -= fifo_size;
 8014970:	808a      	strh	r2, [r1, #4]
    if (epnum == 0) {
 8014972:	b90d      	cbnz	r5, 8014978 <dfifo_alloc+0x90>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8014974:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014976:	e7e3      	b.n	8014940 <dfifo_alloc+0x58>
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8014978:	f105 023f 	add.w	r2, r5, #63	@ 0x3f
 801497c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8014980:	6063      	str	r3, [r4, #4]
 8014982:	e7dd      	b.n	8014940 <dfifo_alloc+0x58>
 8014984:	0808f9c8 	.word	0x0808f9c8
 8014988:	20011620 	.word	0x20011620

0801498c <dfifo_device_init>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801498c:	2801      	cmp	r0, #1
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801498e:	4b0c      	ldr	r3, [pc, #48]	@ (80149c0 <dfifo_device_init+0x34>)
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8014990:	bf94      	ite	ls
 8014992:	4601      	movls	r1, r0
 8014994:	2100      	movhi	r1, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014996:	0109      	lsls	r1, r1, #4
 8014998:	5859      	ldr	r1, [r3, r1]

static void dfifo_device_init(uint8_t rhport) {
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 801499a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 801499e:	7a1a      	ldrb	r2, [r3, #8]

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 80149a0:	68db      	ldr	r3, [r3, #12]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 80149a2:	3218      	adds	r2, #24
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 80149a4:	089b      	lsrs	r3, r3, #2
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 80149a6:	0052      	lsls	r2, r2, #1
 80149a8:	624a      	str	r2, [r1, #36]	@ 0x24
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80149aa:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 80149ac:	4a05      	ldr	r2, [pc, #20]	@ (80149c4 <dfifo_device_init+0x38>)
 80149ae:	8093      	strh	r3, [r2, #4]
  if (is_dma) {
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 80149b0:	041a      	lsls	r2, r3, #16
 80149b2:	fa12 f383 	uxtah	r3, r2, r3

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 80149b6:	2240      	movs	r2, #64	@ 0x40
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 80149b8:	65cb      	str	r3, [r1, #92]	@ 0x5c
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 80149ba:	2180      	movs	r1, #128	@ 0x80
 80149bc:	f7ff bf94 	b.w	80148e8 <dfifo_alloc>
 80149c0:	0808f9c8 	.word	0x0808f9c8
 80149c4:	20011620 	.word	0x20011620

080149c8 <edpt_activate>:
    rhport = 0;
 80149c8:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80149ca:	4b1a      	ldr	r3, [pc, #104]	@ (8014a34 <edpt_activate+0x6c>)
    rhport = 0;
 80149cc:	bf28      	it	cs
 80149ce:	2000      	movcs	r0, #0


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 80149d0:	b570      	push	{r4, r5, r6, lr}
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80149d2:	0100      	lsls	r0, r0, #4
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 80149d4:	788a      	ldrb	r2, [r1, #2]
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 80149d6:	4d18      	ldr	r5, [pc, #96]	@ (8014a38 <edpt_activate+0x70>)
 80149d8:	581c      	ldr	r4, [r3, r0]
 80149da:	f002 007f 	and.w	r0, r2, #127	@ 0x7f
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 80149de:	888b      	ldrh	r3, [r1, #4]
 80149e0:	0046      	lsls	r6, r0, #1
 80149e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80149e6:	eb06 16d2 	add.w	r6, r6, r2, lsr #7
 80149ea:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 80149ee:	816b      	strh	r3, [r5, #10]
  xfer->interval = p_endpoint_desc->bInterval;

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
  depctl.mps = xfer->max_size;
 80149f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
  xfer->interval = p_endpoint_desc->bInterval;
 80149f4:	798e      	ldrb	r6, [r1, #6]
  depctl.active = 1;
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 80149f6:	78c9      	ldrb	r1, [r1, #3]
  xfer->interval = p_endpoint_desc->bInterval;
 80149f8:	732e      	strb	r6, [r5, #12]
  depctl.mps = xfer->max_size;
 80149fa:	f001 0503 	and.w	r5, r1, #3
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 80149fe:	1e69      	subs	r1, r5, #1
  depctl.mps = xfer->max_size;
 8014a00:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8014a04:	bf18      	it	ne
 8014a06:	2101      	movne	r1, #1
    depctl.set_data0_iso_even = 1;
  }
  if (dir == TUSB_DIR_IN) {
 8014a08:	09d2      	lsrs	r2, r2, #7
  depctl.mps = xfer->max_size;
 8014a0a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    depctl.tx_fifo_num = epnum;
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8014a0e:	f082 0201 	eor.w	r2, r2, #1
    depctl.tx_fifo_num = epnum;
 8014a12:	bf18      	it	ne
 8014a14:	f360 5399 	bfine	r3, r0, #22, #4
  dep->ctl = depctl.value;
 8014a18:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8014a1c:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8014a20:	0152      	lsls	r2, r2, #5
 8014a22:	50a3      	str	r3, [r4, r2]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8014a24:	2301      	movs	r3, #1
 8014a26:	f8d4 281c 	ldr.w	r2, [r4, #2076]	@ 0x81c
 8014a2a:	4083      	lsls	r3, r0
 8014a2c:	4313      	orrs	r3, r2
 8014a2e:	f8c4 381c 	str.w	r3, [r4, #2076]	@ 0x81c
}
 8014a32:	bd70      	pop	{r4, r5, r6, pc}
 8014a34:	0808f9c8 	.word	0x0808f9c8
 8014a38:	20011628 	.word	0x20011628

08014a3c <edpt_disable>:
    rhport = 0;
 8014a3c:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8014b34 <edpt_disable+0xf8>)
    rhport = 0;
 8014a40:	bf28      	it	cs
 8014a42:	2000      	movcs	r0, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014a44:	0100      	lsls	r0, r0, #4

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8014a46:	b570      	push	{r4, r5, r6, lr}
 8014a48:	581b      	ldr	r3, [r3, r0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  const uint8_t epnum = tu_edpt_number(ep_addr);
  const uint8_t dir = tu_edpt_dir(ep_addr);
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];

  if (dir == TUSB_DIR_IN) {
 8014a4a:	09cc      	lsrs	r4, r1, #7
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8014a4c:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
 8014a50:	4601      	mov	r1, r0
 8014a52:	d03c      	beq.n	8014ace <edpt_disable+0x92>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8014a54:	b128      	cbz	r0, 8014a62 <edpt_disable+0x26>
 8014a56:	eb03 1440 	add.w	r4, r3, r0, lsl #5
 8014a5a:	f8d4 5900 	ldr.w	r5, [r4, #2304]	@ 0x900
 8014a5e:	2d00      	cmp	r5, #0
 8014a60:	db15      	blt.n	8014a8e <edpt_disable+0x52>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8014a62:	2a00      	cmp	r2, #0
 8014a64:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8014a68:	bf08      	it	eq
 8014a6a:	f04f 6200 	moveq.w	r2, #134217728	@ 0x8000000
 8014a6e:	f8d1 4900 	ldr.w	r4, [r1, #2304]	@ 0x900
 8014a72:	bf18      	it	ne
 8014a74:	f04f 6202 	movne.w	r2, #136314880	@ 0x8200000
 8014a78:	4322      	orrs	r2, r4
 8014a7a:	f8c1 2900 	str.w	r2, [r1, #2304]	@ 0x900
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8014a7e:	0180      	lsls	r0, r0, #6
 8014a80:	f040 0020 	orr.w	r0, r0, #32
 8014a84:	6118      	str	r0, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8014a86:	691a      	ldr	r2, [r3, #16]
 8014a88:	0690      	lsls	r0, r2, #26
 8014a8a:	d4fc      	bmi.n	8014a86 <edpt_disable+0x4a>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 8014a8c:	bd70      	pop	{r4, r5, r6, pc}
      dep->diepctl |= DIEPCTL_SNAK;
 8014a8e:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8014a92:	eb03 1640 	add.w	r6, r3, r0, lsl #5
      dep->diepctl |= DIEPCTL_SNAK;
 8014a96:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8014a9a:	f8c4 1900 	str.w	r1, [r4, #2304]	@ 0x900
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8014a9e:	0141      	lsls	r1, r0, #5
 8014aa0:	f8d6 5908 	ldr.w	r5, [r6, #2312]	@ 0x908
 8014aa4:	066d      	lsls	r5, r5, #25
 8014aa6:	d5fb      	bpl.n	8014aa0 <edpt_disable+0x64>
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8014aa8:	2a00      	cmp	r2, #0
 8014aaa:	f8d4 5900 	ldr.w	r5, [r4, #2304]	@ 0x900
 8014aae:	4a22      	ldr	r2, [pc, #136]	@ (8014b38 <edpt_disable+0xfc>)
 8014ab0:	bf08      	it	eq
 8014ab2:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8014ab6:	432a      	orrs	r2, r5
 8014ab8:	f8c4 2900 	str.w	r2, [r4, #2304]	@ 0x900
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8014abc:	185a      	adds	r2, r3, r1
 8014abe:	f8d2 1908 	ldr.w	r1, [r2, #2312]	@ 0x908
 8014ac2:	078c      	lsls	r4, r1, #30
 8014ac4:	d5fb      	bpl.n	8014abe <edpt_disable+0x82>
      dep->diepint = DIEPINT_EPDISD;
 8014ac6:	2102      	movs	r1, #2
 8014ac8:	f8c2 1908 	str.w	r1, [r2, #2312]	@ 0x908
 8014acc:	e7d7      	b.n	8014a7e <edpt_disable+0x42>
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8014ace:	b128      	cbz	r0, 8014adc <edpt_disable+0xa0>
 8014ad0:	eb03 1440 	add.w	r4, r3, r0, lsl #5
 8014ad4:	f8d4 5b00 	ldr.w	r5, [r4, #2816]	@ 0xb00
 8014ad8:	2d00      	cmp	r5, #0
 8014ada:	db08      	blt.n	8014aee <edpt_disable+0xb2>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8014adc:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8014ae0:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	@ 0xb00
 8014ae4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8014ae8:	f8c1 3b00 	str.w	r3, [r1, #2816]	@ 0xb00
 8014aec:	e7ce      	b.n	8014a8c <edpt_disable+0x50>
      dwc2->dctl |= DCTL_SGONAK;
 8014aee:	f8d3 1804 	ldr.w	r1, [r3, #2052]	@ 0x804
 8014af2:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8014af6:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8014afa:	6959      	ldr	r1, [r3, #20]
 8014afc:	0609      	lsls	r1, r1, #24
 8014afe:	d5fc      	bpl.n	8014afa <edpt_disable+0xbe>
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8014b00:	2a00      	cmp	r2, #0
 8014b02:	f8d4 1b00 	ldr.w	r1, [r4, #2816]	@ 0xb00
 8014b06:	4a0c      	ldr	r2, [pc, #48]	@ (8014b38 <edpt_disable+0xfc>)
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8014b08:	eb03 1040 	add.w	r0, r3, r0, lsl #5
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8014b0c:	bf08      	it	eq
 8014b0e:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8014b12:	430a      	orrs	r2, r1
 8014b14:	f8c4 2b00 	str.w	r2, [r4, #2816]	@ 0xb00
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8014b18:	f8d0 2b08 	ldr.w	r2, [r0, #2824]	@ 0xb08
 8014b1c:	0792      	lsls	r2, r2, #30
 8014b1e:	d5fb      	bpl.n	8014b18 <edpt_disable+0xdc>
      dep->doepint = DOEPINT_EPDISD;
 8014b20:	2202      	movs	r2, #2
 8014b22:	f8c0 2b08 	str.w	r2, [r0, #2824]	@ 0xb08
      dwc2->dctl |= DCTL_CGONAK;
 8014b26:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8014b2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014b2e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8014b32:	e7ab      	b.n	8014a8c <edpt_disable+0x50>
 8014b34:	0808f9c8 	.word	0x0808f9c8
 8014b38:	40200000 	.word	0x40200000

08014b3c <edpt_schedule_packets>:
    rhport = 0;
 8014b3c:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8014bf8 <edpt_schedule_packets+0xbc>)
    rhport = 0;
 8014b40:	bf28      	it	cs
 8014b42:	2000      	movcs	r0, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014b44:	0100      	lsls	r0, r0, #4

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8014b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b48:	581c      	ldr	r4, [r3, r0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8014b4a:	f082 0501 	eor.w	r5, r2, #1

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8014b4e:	4e2b      	ldr	r6, [pc, #172]	@ (8014bfc <edpt_schedule_packets+0xc0>)
 8014b50:	2900      	cmp	r1, #0
 8014b52:	d142      	bne.n	8014bda <edpt_schedule_packets+0x9e>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8014b54:	4f2a      	ldr	r7, [pc, #168]	@ (8014c00 <edpt_schedule_packets+0xc4>)
 8014b56:	eb06 1002 	add.w	r0, r6, r2, lsl #4
 8014b5a:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8014b5e:	8940      	ldrh	r0, [r0, #10]
 8014b60:	4298      	cmp	r0, r3
 8014b62:	bf28      	it	cs
 8014b64:	4618      	movcs	r0, r3
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8014b66:	1a1b      	subs	r3, r3, r0
 8014b68:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
    num_packets = 1;
 8014b6c:	2301      	movs	r3, #1

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
  deptsiz.xfer_size = total_bytes;
  deptsiz.packet_count = num_packets;
  dep->tsiz = deptsiz.value;
 8014b6e:	eb01 1705 	add.w	r7, r1, r5, lsl #4
  deptsiz.xfer_size = total_bytes;
 8014b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
  dep->tsiz = deptsiz.value;
 8014b76:	eb04 1747 	add.w	r7, r4, r7, lsl #5
  deptsiz.xfer_size = total_bytes;
 8014b7a:	ea40 43c3 	orr.w	r3, r0, r3, lsl #19
  dep->tsiz = deptsiz.value;
 8014b7e:	463d      	mov	r5, r7
 8014b80:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 8014b84:	f8d7 3900 	ldr.w	r3, [r7, #2304]	@ 0x900
 8014b88:	461f      	mov	r7, r3
  depctl.clear_nak = 1;
 8014b8a:	f3c3 6c07 	ubfx	ip, r3, #24, #8
  depctl.enable = 1;
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8014b8e:	f3c7 4707 	ubfx	r7, r7, #16, #8
  depctl.clear_nak = 1;
 8014b92:	f06c 0c7b 	orn	ip, ip, #123	@ 0x7b
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8014b96:	f007 070c 	and.w	r7, r7, #12
  depctl.clear_nak = 1;
 8014b9a:	f36c 631f 	bfi	r3, ip, #24, #8
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8014b9e:	2f04      	cmp	r7, #4
 8014ba0:	d10e      	bne.n	8014bc0 <edpt_schedule_packets+0x84>
 8014ba2:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 8014ba6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8014baa:	7b36      	ldrb	r6, [r6, #12]
 8014bac:	2e01      	cmp	r6, #1
 8014bae:	d107      	bne.n	8014bc0 <edpt_schedule_packets+0x84>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8014bb0:	f8d4 6808 	ldr.w	r6, [r4, #2056]	@ 0x808
    const uint32_t odd_now = dsts.frame_number & 1u;
    if (odd_now) {
 8014bb4:	05f6      	lsls	r6, r6, #23
      depctl.set_data0_iso_even = 1;
 8014bb6:	bf4c      	ite	mi
 8014bb8:	f043 5380 	orrmi.w	r3, r3, #268435456	@ 0x10000000
    } else {
      depctl.set_data1_iso_odd = 1;
 8014bbc:	f043 5300 	orrpl.w	r3, r3, #536870912	@ 0x20000000
    dep->diepctl = depctl.value; // enable endpoint
  } else {
    dep->diepctl = depctl.value; // enable endpoint

    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8014bc0:	2a01      	cmp	r2, #1
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8014bc2:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
    dep->diepctl = depctl.value; // enable endpoint
 8014bc4:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8014bc8:	d106      	bne.n	8014bd8 <edpt_schedule_packets+0x9c>
 8014bca:	b128      	cbz	r0, 8014bd8 <edpt_schedule_packets+0x9c>
      dwc2->diepempmsk |= (1 << epnum);
 8014bcc:	f8d4 3834 	ldr.w	r3, [r4, #2100]	@ 0x834
 8014bd0:	408a      	lsls	r2, r1
 8014bd2:	431a      	orrs	r2, r3
 8014bd4:	f8c4 2834 	str.w	r2, [r4, #2100]	@ 0x834
    }
  }
}
 8014bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    total_bytes = xfer->total_len;
 8014bda:	eb02 0341 	add.w	r3, r2, r1, lsl #1
 8014bde:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8014be2:	895f      	ldrh	r7, [r3, #10]
    total_bytes = xfer->total_len;
 8014be4:	8918      	ldrh	r0, [r3, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8014be6:	19c3      	adds	r3, r0, r7
 8014be8:	3b01      	subs	r3, #1
 8014bea:	fbb3 f3f7 	udiv	r3, r3, r7
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	bf38      	it	cc
 8014bf4:	2301      	movcc	r3, #1
 8014bf6:	e7ba      	b.n	8014b6e <edpt_schedule_packets+0x32>
 8014bf8:	0808f9c8 	.word	0x0808f9c8
 8014bfc:	20011628 	.word	0x20011628
 8014c00:	20011620 	.word	0x20011620

08014c04 <handle_ep_irq>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8014c04:	2801      	cmp	r0, #1
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014c06:	4a71      	ldr	r2, [pc, #452]	@ (8014dcc <handle_ep_irq+0x1c8>)
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8014c08:	bf94      	ite	ls
 8014c0a:	4603      	movls	r3, r0
 8014c0c:	2300      	movhi	r3, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014c0e:	011b      	lsls	r3, r3, #4
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8014c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c14:	58d5      	ldr	r5, [r2, r3]
 8014c16:	b08d      	sub	sp, #52	@ 0x34
 8014c18:	4607      	mov	r7, r0
 8014c1a:	4688      	mov	r8, r1
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8014c1c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8014c1e:	f505 5980 	add.w	r9, r5, #4096	@ 0x1000
 8014c22:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  const bool is_dma = dma_device_enabled(dwc2);
  const uint8_t ep_count = dwc2_ep_count(dwc2);
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8014c24:	2400      	movs	r4, #0
 8014c26:	4e6a      	ldr	r6, [pc, #424]	@ (8014dd0 <handle_ep_irq+0x1cc>)
  return ghwcfg2.num_dev_ep + 1;
 8014c28:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	9304      	str	r3, [sp, #16]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8014c30:	f081 0301 	eor.w	r3, r1, #1
 8014c34:	011a      	lsls	r2, r3, #4
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8014c36:	eb05 2343 	add.w	r3, r5, r3, lsl #9
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8014c3a:	b2d2      	uxtb	r2, r2
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8014c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8014c40:	9206      	str	r2, [sp, #24]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8014c42:	9303      	str	r3, [sp, #12]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8014c44:	9a06      	ldr	r2, [sp, #24]
 8014c46:	f8d5 3818 	ldr.w	r3, [r5, #2072]	@ 0x818
 8014c4a:	4422      	add	r2, r4
 8014c4c:	40d3      	lsrs	r3, r2
 8014c4e:	07da      	lsls	r2, r3, #31
 8014c50:	d54d      	bpl.n	8014cee <handle_ep_irq+0xea>
      dwc2_dep_t* epout = &ep_base[epnum];
 8014c52:	0163      	lsls	r3, r4, #5
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8014c54:	f1b8 0f01 	cmp.w	r8, #1
 8014c58:	fa5f fa84 	uxtb.w	sl, r4
      dwc2_dep_t* epout = &ep_base[epnum];
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	9b03      	ldr	r3, [sp, #12]
 8014c60:	eb03 1244 	add.w	r2, r3, r4, lsl #5
      intr.value = epout->intr;
 8014c64:	f8d2 b008 	ldr.w	fp, [r2, #8]
      epout->intr = intr.value; // Clear interrupt
 8014c68:	f8c2 b008 	str.w	fp, [r2, #8]
        if (dir == TUSB_DIR_IN) {
 8014c6c:	d179      	bne.n	8014d62 <handle_ep_irq+0x15e>
  if (diepint_bm.xfer_complete) {
 8014c6e:	f01b 0f01 	tst.w	fp, #1
 8014c72:	d00a      	beq.n	8014c8a <handle_ep_irq+0x86>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8014c74:	2c00      	cmp	r4, #0
 8014c76:	d145      	bne.n	8014d04 <handle_ep_irq+0x100>
 8014c78:	4a56      	ldr	r2, [pc, #344]	@ (8014dd4 <handle_ep_irq+0x1d0>)
 8014c7a:	8852      	ldrh	r2, [r2, #2]
 8014c7c:	2a00      	cmp	r2, #0
 8014c7e:	d041      	beq.n	8014d04 <handle_ep_irq+0x100>
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8014c80:	4642      	mov	r2, r8
 8014c82:	4621      	mov	r1, r4
 8014c84:	4638      	mov	r0, r7
 8014c86:	f7ff ff59 	bl	8014b3c <edpt_schedule_packets>
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8014c8a:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8014c8e:	d02e      	beq.n	8014cee <handle_ep_irq+0xea>
 8014c90:	2201      	movs	r2, #1
 8014c92:	f8d5 3834 	ldr.w	r3, [r5, #2100]	@ 0x834
 8014c96:	40a2      	lsls	r2, r4
 8014c98:	421a      	tst	r2, r3
 8014c9a:	9201      	str	r2, [sp, #4]
 8014c9c:	d027      	beq.n	8014cee <handle_ep_irq+0xea>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8014c9e:	0163      	lsls	r3, r4, #5
    for (uint16_t i = 0; i < remain_packets; i++) {
 8014ca0:	f04f 0b00 	mov.w	fp, #0
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8014ca4:	442b      	add	r3, r5
 8014ca6:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
    const uint16_t remain_packets = tsiz.packet_count;
 8014caa:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8014cae:	9305      	str	r3, [sp, #20]
      tsiz.value = epin->tsiz;
 8014cb0:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8014cb4:	9302      	str	r3, [sp, #8]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8014cb6:	fa1f f38b 	uxth.w	r3, fp
 8014cba:	9a05      	ldr	r2, [sp, #20]
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	d20f      	bcs.n	8014ce0 <handle_ep_irq+0xdc>
      tsiz.value = epin->tsiz;
 8014cc0:	9b02      	ldr	r3, [sp, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8014cc2:	8b72      	ldrh	r2, [r6, #26]
 8014cc4:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8014cc8:	4943      	ldr	r1, [pc, #268]	@ (8014dd8 <handle_ep_irq+0x1d4>)
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	bf28      	it	cs
 8014cd0:	4613      	movcs	r3, r2
 8014cd2:	9a02      	ldr	r2, [sp, #8]
 8014cd4:	f8d2 2918 	ldr.w	r2, [r2, #2328]	@ 0x918
 8014cd8:	ea01 0282 	and.w	r2, r1, r2, lsl #2
 8014cdc:	4293      	cmp	r3, r2
 8014cde:	d924      	bls.n	8014d2a <handle_ep_irq+0x126>
    tsiz.value = epin->tsiz;
 8014ce0:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8014ce4:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
    if (tsiz.xfer_size == 0) {
 8014ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014cec:	b38b      	cbz	r3, 8014d52 <handle_ep_irq+0x14e>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8014cee:	3401      	adds	r4, #1
 8014cf0:	9a04      	ldr	r2, [sp, #16]
 8014cf2:	3620      	adds	r6, #32
 8014cf4:	f509 5980 	add.w	r9, r9, #4096	@ 0x1000
 8014cf8:	b2e3      	uxtb	r3, r4
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d8a2      	bhi.n	8014c44 <handle_ep_irq+0x40>
        }
        #endif
      }
    }
  }
}
 8014cfe:	b00d      	add	sp, #52	@ 0x34
 8014d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8014d04:	2107      	movs	r1, #7
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8014d06:	8b32      	ldrh	r2, [r6, #24]
  dcd_event_handler(&event, in_isr);
 8014d08:	a809      	add	r0, sp, #36	@ 0x24
  event.rhport = rhport;
 8014d0a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8014d0e:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
 8014d12:	f06a 017f 	orn	r1, sl, #127	@ 0x7f
  event.xfer_complete.len     = xferred_bytes;
 8014d16:	920b      	str	r2, [sp, #44]	@ 0x2c
  event.xfer_complete.result  = result;
 8014d18:	2200      	movs	r2, #0
  event.xfer_complete.ep_addr = ep_addr;
 8014d1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
  dcd_event_handler(&event, in_isr);
 8014d1e:	2101      	movs	r1, #1
  event.xfer_complete.result  = result;
 8014d20:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  dcd_event_handler(&event, in_isr);
 8014d24:	f7fe ff18 	bl	8013b58 <dcd_event_handler>
}
 8014d28:	e7af      	b.n	8014c8a <handle_ep_irq+0x86>
      if (xfer->ff) {
 8014d2a:	6970      	ldr	r0, [r6, #20]
 8014d2c:	b130      	cbz	r0, 8014d3c <handle_ep_irq+0x138>
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8014d2e:	461a      	mov	r2, r3
 8014d30:	4649      	mov	r1, r9
 8014d32:	f7fe fdca 	bl	80138ca <tu_fifo_read_n_const_addr_full_words>
    for (uint16_t i = 0; i < remain_packets; i++) {
 8014d36:	f10b 0b01 	add.w	fp, fp, #1
 8014d3a:	e7bc      	b.n	8014cb6 <handle_ep_irq+0xb2>
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8014d3c:	6932      	ldr	r2, [r6, #16]
 8014d3e:	4651      	mov	r1, sl
 8014d40:	4628      	mov	r0, r5
 8014d42:	9307      	str	r3, [sp, #28]
 8014d44:	f000 fc82 	bl	801564c <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8014d48:	6932      	ldr	r2, [r6, #16]
 8014d4a:	9b07      	ldr	r3, [sp, #28]
 8014d4c:	441a      	add	r2, r3
 8014d4e:	6132      	str	r2, [r6, #16]
 8014d50:	e7f1      	b.n	8014d36 <handle_ep_irq+0x132>
      dwc2->diepempmsk &= ~(1 << epnum);
 8014d52:	f8d5 3834 	ldr.w	r3, [r5, #2100]	@ 0x834
 8014d56:	9a01      	ldr	r2, [sp, #4]
 8014d58:	ea23 0302 	bic.w	r3, r3, r2
 8014d5c:	f8c5 3834 	str.w	r3, [r5, #2100]	@ 0x834
 8014d60:	e7c5      	b.n	8014cee <handle_ep_irq+0xea>
  if (doepint_bm.setup_phase_done) {
 8014d62:	f01b 0f08 	tst.w	fp, #8
 8014d66:	fa5f f28b 	uxtb.w	r2, fp
 8014d6a:	d00f      	beq.n	8014d8c <handle_ep_irq+0x188>
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8014d6c:	2306      	movs	r3, #6
  event.rhport = rhport;
 8014d6e:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8014d72:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8014d76:	4b19      	ldr	r3, [pc, #100]	@ (8014ddc <handle_ep_irq+0x1d8>)
 8014d78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014d7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8014d7e:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8014d82:	2101      	movs	r1, #1
 8014d84:	a809      	add	r0, sp, #36	@ 0x24
 8014d86:	f7fe fee7 	bl	8013b58 <dcd_event_handler>
}
 8014d8a:	e7b0      	b.n	8014cee <handle_ep_irq+0xea>
  if (doepint_bm.xfer_complete) {
 8014d8c:	07d3      	lsls	r3, r2, #31
 8014d8e:	d5ae      	bpl.n	8014cee <handle_ep_irq+0xea>
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8014d90:	f42b 43ff 	bic.w	r3, fp, #32640	@ 0x7f80
 8014d94:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d1a7      	bne.n	8014cee <handle_ep_irq+0xea>
      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8014d9e:	b944      	cbnz	r4, 8014db2 <handle_ep_irq+0x1ae>
 8014da0:	4b0c      	ldr	r3, [pc, #48]	@ (8014dd4 <handle_ep_irq+0x1d0>)
 8014da2:	881b      	ldrh	r3, [r3, #0]
 8014da4:	b12b      	cbz	r3, 8014db2 <handle_ep_irq+0x1ae>
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8014da6:	4622      	mov	r2, r4
 8014da8:	4621      	mov	r1, r4
 8014daa:	4638      	mov	r0, r7
 8014dac:	f7ff fec6 	bl	8014b3c <edpt_schedule_packets>
 8014db0:	e79d      	b.n	8014cee <handle_ep_irq+0xea>
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8014db2:	8933      	ldrh	r3, [r6, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8014db4:	2207      	movs	r2, #7
  event.rhport = rhport;
 8014db6:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
  event.xfer_complete.len     = xferred_bytes;
 8014dba:	930b      	str	r3, [sp, #44]	@ 0x2c
  event.xfer_complete.result  = result;
 8014dbc:	2300      	movs	r3, #0
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8014dbe:	f88d 2025 	strb.w	r2, [sp, #37]	@ 0x25
  event.xfer_complete.ep_addr = ep_addr;
 8014dc2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
  event.xfer_complete.result  = result;
 8014dc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dca:	e7da      	b.n	8014d82 <handle_ep_irq+0x17e>
 8014dcc:	0808f9c8 	.word	0x0808f9c8
 8014dd0:	20011628 	.word	0x20011628
 8014dd4:	20011620 	.word	0x20011620
 8014dd8:	0003fffc 	.word	0x0003fffc
 8014ddc:	20011618 	.word	0x20011618

08014de0 <dcd_int_enable>:
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8014de0:	4b08      	ldr	r3, [pc, #32]	@ (8014e04 <dcd_int_enable+0x24>)
 8014de2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8014de6:	f993 3004 	ldrsb.w	r3, [r3, #4]
  if ((int32_t)(IRQn) >= 0)
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	db08      	blt.n	8014e00 <dcd_int_enable+0x20>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014dee:	0959      	lsrs	r1, r3, #5
 8014df0:	2201      	movs	r2, #1
 8014df2:	f003 031f 	and.w	r3, r3, #31
 8014df6:	fa02 f303 	lsl.w	r3, r2, r3
 8014dfa:	4a03      	ldr	r2, [pc, #12]	@ (8014e08 <dcd_int_enable+0x28>)
 8014dfc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	0808f9c8 	.word	0x0808f9c8
 8014e08:	e000e100 	.word	0xe000e100

08014e0c <dcd_connect>:
    rhport = 0;
 8014e0c:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014e0e:	4b06      	ldr	r3, [pc, #24]	@ (8014e28 <dcd_connect+0x1c>)
    rhport = 0;
 8014e10:	bf28      	it	cs
 8014e12:	2000      	movcs	r0, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014e14:	0100      	lsls	r0, r0, #4
 8014e16:	581a      	ldr	r2, [r3, r0]
  dwc2->dctl &= ~DCTL_SDIS;
 8014e18:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 8014e1c:	f023 0302 	bic.w	r3, r3, #2
 8014e20:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
}
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	0808f9c8 	.word	0x0808f9c8

08014e2c <dcd_disconnect>:
    rhport = 0;
 8014e2c:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014e2e:	4b06      	ldr	r3, [pc, #24]	@ (8014e48 <dcd_disconnect+0x1c>)
    rhport = 0;
 8014e30:	bf28      	it	cs
 8014e32:	2000      	movcs	r0, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014e34:	0100      	lsls	r0, r0, #4
 8014e36:	581a      	ldr	r2, [r3, r0]
  dwc2->dctl |= DCTL_SDIS;
 8014e38:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 8014e3c:	f043 0302 	orr.w	r3, r3, #2
 8014e40:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
}
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop
 8014e48:	0808f9c8 	.word	0x0808f9c8

08014e4c <dcd_init>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8014e4c:	2801      	cmp	r0, #1
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014e4e:	4a28      	ldr	r2, [pc, #160]	@ (8014ef0 <dcd_init+0xa4>)
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8014e50:	f04f 0101 	mov.w	r1, #1
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8014e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8014e56:	bf94      	ite	ls
 8014e58:	4603      	movls	r3, r0
 8014e5a:	2300      	movhi	r3, #0
  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8014e5c:	2600      	movs	r6, #0
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8014e5e:	4605      	mov	r5, r0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014e60:	011b      	lsls	r3, r3, #4
 8014e62:	58d4      	ldr	r4, [r2, r3]
  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8014e64:	4b23      	ldr	r3, [pc, #140]	@ (8014ef4 <dcd_init+0xa8>)
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8014e66:	4620      	mov	r0, r4
  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8014e68:	601e      	str	r6, [r3, #0]
 8014e6a:	605e      	str	r6, [r3, #4]
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8014e6c:	f000 fb10 	bl	8015490 <dwc2_core_is_highspeed>
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8014e70:	4632      	mov	r2, r6
 8014e72:	4601      	mov	r1, r0
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8014e74:	4607      	mov	r7, r0
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8014e76:	4628      	mov	r0, r5
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8014e78:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8014e7a:	f000 fb15 	bl	80154a8 <dwc2_core_init>
 8014e7e:	4606      	mov	r6, r0
 8014e80:	b940      	cbnz	r0, 8014e94 <dcd_init+0x48>
 8014e82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8014e86:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8014e8a:	07db      	lsls	r3, r3, #31
 8014e8c:	d500      	bpl.n	8014e90 <dcd_init+0x44>
 8014e8e:	be00      	bkpt	0x0000
}
 8014e90:	4630      	mov	r0, r6
 8014e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8014e94:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 8014e98:	f023 0303 	bic.w	r3, r3, #3
  if (is_highspeed) {
 8014e9c:	b32f      	cbz	r7, 8014eea <dcd_init+0x9e>
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8014e9e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8014ea0:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8014ea4:	2a80      	cmp	r2, #128	@ 0x80
 8014ea6:	d101      	bne.n	8014eac <dcd_init+0x60>
      dcfg |= DCFG_XCVRDLY;
 8014ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8014eac:	f043 0304 	orr.w	r3, r3, #4
  dcd_disconnect(rhport);
 8014eb0:	4628      	mov	r0, r5
  dwc2->dcfg = dcfg;
 8014eb2:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  dcd_disconnect(rhport);
 8014eb6:	f7ff ffb9 	bl	8014e2c <dcd_disconnect>
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8014eba:	68e3      	ldr	r3, [r4, #12]
  dcd_connect(rhport);
 8014ebc:	4628      	mov	r0, r5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8014ebe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014ec2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014ec6:	60e3      	str	r3, [r4, #12]
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8014ec8:	6823      	ldr	r3, [r4, #0]
 8014eca:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8014ece:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8014ed2:	6023      	str	r3, [r4, #0]
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8014ed4:	4b08      	ldr	r3, [pc, #32]	@ (8014ef8 <dcd_init+0xac>)
 8014ed6:	69a2      	ldr	r2, [r4, #24]
 8014ed8:	4313      	orrs	r3, r2
 8014eda:	61a3      	str	r3, [r4, #24]
  uint32_t gahbcfg = dwc2->gahbcfg;
 8014edc:	68a3      	ldr	r3, [r4, #8]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8014ede:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
  dwc2->gahbcfg = gahbcfg;
 8014ee2:	60a3      	str	r3, [r4, #8]
  dcd_connect(rhport);
 8014ee4:	f7ff ff92 	bl	8014e0c <dcd_connect>
  return true;
 8014ee8:	e7d2      	b.n	8014e90 <dcd_init+0x44>
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 8014eea:	f043 0303 	orr.w	r3, r3, #3
 8014eee:	e7dd      	b.n	8014eac <dcd_init+0x60>
 8014ef0:	0808f9c8 	.word	0x0808f9c8
 8014ef4:	20011620 	.word	0x20011620
 8014ef8:	80003004 	.word	0x80003004

08014efc <dcd_sof_enable>:
    rhport = 0;
 8014efc:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014efe:	4b09      	ldr	r3, [pc, #36]	@ (8014f24 <dcd_sof_enable+0x28>)
  _dcd_data.sof_en = en;
 8014f00:	4a09      	ldr	r2, [pc, #36]	@ (8014f28 <dcd_sof_enable+0x2c>)
    rhport = 0;
 8014f02:	bf28      	it	cs
 8014f04:	2000      	movcs	r0, #0
 8014f06:	71d1      	strb	r1, [r2, #7]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014f08:	0100      	lsls	r0, r0, #4
 8014f0a:	581b      	ldr	r3, [r3, r0]
  if (en) {
 8014f0c:	b131      	cbz	r1, 8014f1c <dcd_sof_enable+0x20>
    dwc2->gintsts = GINTSTS_SOF;
 8014f0e:	2208      	movs	r2, #8
 8014f10:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 8014f12:	699a      	ldr	r2, [r3, #24]
 8014f14:	f042 0208 	orr.w	r2, r2, #8
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 8014f18:	619a      	str	r2, [r3, #24]
}
 8014f1a:	4770      	bx	lr
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 8014f1c:	699a      	ldr	r2, [r3, #24]
 8014f1e:	f022 0208 	bic.w	r2, r2, #8
 8014f22:	e7f9      	b.n	8014f18 <dcd_sof_enable+0x1c>
 8014f24:	0808f9c8 	.word	0x0808f9c8
 8014f28:	20011620 	.word	0x20011620

08014f2c <dcd_edpt_open>:
bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8014f2c:	b570      	push	{r4, r5, r6, lr}
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8014f2e:	888a      	ldrh	r2, [r1, #4]
 8014f30:	460c      	mov	r4, r1
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8014f32:	7889      	ldrb	r1, [r1, #2]
bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8014f34:	4606      	mov	r6, r0
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8014f36:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8014f3a:	f7ff fcd5 	bl	80148e8 <dfifo_alloc>
 8014f3e:	4605      	mov	r5, r0
 8014f40:	b940      	cbnz	r0, 8014f54 <dcd_edpt_open+0x28>
 8014f42:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8014f46:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 8014f4a:	07db      	lsls	r3, r3, #31
 8014f4c:	d500      	bpl.n	8014f50 <dcd_edpt_open+0x24>
 8014f4e:	be00      	bkpt	0x0000
}
 8014f50:	4628      	mov	r0, r5
 8014f52:	bd70      	pop	{r4, r5, r6, pc}
  edpt_activate(rhport, desc_edpt);
 8014f54:	4621      	mov	r1, r4
 8014f56:	4630      	mov	r0, r6
 8014f58:	f7ff fd36 	bl	80149c8 <edpt_activate>
  return true;
 8014f5c:	e7f8      	b.n	8014f50 <dcd_edpt_open+0x24>
	...

08014f60 <dcd_edpt_close_all>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8014f60:	2801      	cmp	r0, #1
 8014f62:	bf94      	ite	ls
 8014f64:	4602      	movls	r2, r0
 8014f66:	2200      	movhi	r2, #0
void dcd_edpt_close_all(uint8_t rhport) {
 8014f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8014f6a:	0112      	lsls	r2, r2, #4
 8014f6c:	4b21      	ldr	r3, [pc, #132]	@ (8014ff4 <dcd_edpt_close_all+0x94>)
 8014f6e:	4604      	mov	r4, r0
 8014f70:	589d      	ldr	r5, [r3, r2]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8014f72:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  usbd_spin_lock(false);
 8014f76:	2000      	movs	r0, #0
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8014f78:	7a1f      	ldrb	r7, [r3, #8]
  usbd_spin_lock(false);
 8014f7a:	f7fe ff47 	bl	8013e0c <usbd_spin_lock>
  _dcd_data.allocated_epin_count = 0;
 8014f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8014ff8 <dcd_edpt_close_all+0x98>)
 8014f80:	2000      	movs	r0, #0
 8014f82:	4a1e      	ldr	r2, [pc, #120]	@ (8014ffc <dcd_edpt_close_all+0x9c>)
  for (uint8_t n = 1; n < ep_count; n++) {
 8014f84:	2101      	movs	r1, #1
  _dcd_data.allocated_epin_count = 0;
 8014f86:	7198      	strb	r0, [r3, #6]
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8014f88:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8014f8c:	f8c5 381c 	str.w	r3, [r5, #2076]	@ 0x81c
  for (uint8_t n = 1; n < ep_count; n++) {
 8014f90:	b2cb      	uxtb	r3, r1
 8014f92:	429f      	cmp	r7, r3
 8014f94:	d91a      	bls.n	8014fcc <dcd_edpt_close_all+0x6c>
      if (dep->ctl & EPCTL_EPENA) {
 8014f96:	eb05 1341 	add.w	r3, r5, r1, lsl #5
 8014f9a:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 8014f9e:	2e00      	cmp	r6, #0
 8014fa0:	da05      	bge.n	8014fae <dcd_edpt_close_all+0x4e>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 8014fa2:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 8014fa6:	f046 4690 	orr.w	r6, r6, #1207959552	@ 0x48000000
 8014faa:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
      if (dep->ctl & EPCTL_EPENA) {
 8014fae:	f8d3 6b00 	ldr.w	r6, [r3, #2816]	@ 0xb00
      xfer_status[n][1-d].max_size = 0;
 8014fb2:	8750      	strh	r0, [r2, #58]	@ 0x3a
      if (dep->ctl & EPCTL_EPENA) {
 8014fb4:	2e00      	cmp	r6, #0
 8014fb6:	da05      	bge.n	8014fc4 <dcd_edpt_close_all+0x64>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 8014fb8:	f8d3 6b00 	ldr.w	r6, [r3, #2816]	@ 0xb00
 8014fbc:	f046 4690 	orr.w	r6, r6, #1207959552	@ 0x48000000
 8014fc0:	f8c3 6b00 	str.w	r6, [r3, #2816]	@ 0xb00
      xfer_status[n][1-d].max_size = 0;
 8014fc4:	8550      	strh	r0, [r2, #42]	@ 0x2a
  for (uint8_t n = 1; n < ep_count; n++) {
 8014fc6:	3101      	adds	r1, #1
 8014fc8:	3220      	adds	r2, #32
 8014fca:	e7e1      	b.n	8014f90 <dcd_edpt_close_all+0x30>
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8014fcc:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8014fd0:	612b      	str	r3, [r5, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8014fd2:	692b      	ldr	r3, [r5, #16]
 8014fd4:	069b      	lsls	r3, r3, #26
 8014fd6:	d4fc      	bmi.n	8014fd2 <dcd_edpt_close_all+0x72>
}

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8014fd8:	2310      	movs	r3, #16
 8014fda:	612b      	str	r3, [r5, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8014fdc:	692e      	ldr	r6, [r5, #16]
 8014fde:	f016 0610 	ands.w	r6, r6, #16
 8014fe2:	d1fb      	bne.n	8014fdc <dcd_edpt_close_all+0x7c>
  dfifo_device_init(rhport); // re-init dfifo
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	f7ff fcd1 	bl	801498c <dfifo_device_init>
  usbd_spin_unlock(false);
 8014fea:	4630      	mov	r0, r6
}
 8014fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  usbd_spin_unlock(false);
 8014ff0:	f7fe bf10 	b.w	8013e14 <usbd_spin_unlock>
 8014ff4:	0808f9c8 	.word	0x0808f9c8
 8014ff8:	20011620 	.word	0x20011620
 8014ffc:	20011628 	.word	0x20011628

08015000 <dcd_edpt_xfer>:
bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8015000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8015004:	f001 097f 	and.w	r9, r1, #127	@ 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8015008:	09cc      	lsrs	r4, r1, #7
 801500a:	4680      	mov	r8, r0
  usbd_spin_lock(false);
 801500c:	2000      	movs	r0, #0
bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 801500e:	4692      	mov	sl, r2
 8015010:	461f      	mov	r7, r3
  if (xfer->max_size == 0) {
 8015012:	eb04 0549 	add.w	r5, r4, r9, lsl #1
  usbd_spin_lock(false);
 8015016:	f7fe fef9 	bl	8013e0c <usbd_spin_lock>
  if (xfer->max_size == 0) {
 801501a:	4b0e      	ldr	r3, [pc, #56]	@ (8015054 <dcd_edpt_xfer+0x54>)
 801501c:	012a      	lsls	r2, r5, #4
 801501e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8015022:	896e      	ldrh	r6, [r5, #10]
 8015024:	b186      	cbz	r6, 8015048 <dcd_edpt_xfer+0x48>
    xfer->buffer = buffer;
 8015026:	f843 a002 	str.w	sl, [r3, r2]
    xfer->ff = NULL;
 801502a:	2300      	movs	r3, #0
    xfer->total_len = total_bytes;
 801502c:	812f      	strh	r7, [r5, #8]
    xfer->ff = NULL;
 801502e:	606b      	str	r3, [r5, #4]
    if (epnum == 0) {
 8015030:	f1b9 0f00 	cmp.w	r9, #0
 8015034:	d102      	bne.n	801503c <dcd_edpt_xfer+0x3c>
      _dcd_data.ep0_pending[dir] = total_bytes;
 8015036:	4b08      	ldr	r3, [pc, #32]	@ (8015058 <dcd_edpt_xfer+0x58>)
 8015038:	f823 7014 	strh.w	r7, [r3, r4, lsl #1]
    ret = true;
 801503c:	2601      	movs	r6, #1
    edpt_schedule_packets(rhport, epnum, dir);
 801503e:	4622      	mov	r2, r4
 8015040:	4649      	mov	r1, r9
 8015042:	4640      	mov	r0, r8
 8015044:	f7ff fd7a 	bl	8014b3c <edpt_schedule_packets>
  usbd_spin_unlock(false);
 8015048:	2000      	movs	r0, #0
 801504a:	f7fe fee3 	bl	8013e14 <usbd_spin_unlock>
}
 801504e:	4630      	mov	r0, r6
 8015050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015054:	20011628 	.word	0x20011628
 8015058:	20011620 	.word	0x20011620

0801505c <dcd_set_address>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801505c:	2801      	cmp	r0, #1
void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 801505e:	4603      	mov	r3, r0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8015060:	4a09      	ldr	r2, [pc, #36]	@ (8015088 <dcd_set_address+0x2c>)
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8015062:	bf94      	ite	ls
 8015064:	4603      	movls	r3, r0
 8015066:	2300      	movhi	r3, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8015068:	011b      	lsls	r3, r3, #4
 801506a:	58d2      	ldr	r2, [r2, r3]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 801506c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 8015070:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015074:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8015078:	2180      	movs	r1, #128	@ 0x80
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 801507a:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 801507e:	2300      	movs	r3, #0
 8015080:	461a      	mov	r2, r3
 8015082:	f7ff bfbd 	b.w	8015000 <dcd_edpt_xfer>
 8015086:	bf00      	nop
 8015088:	0808f9c8 	.word	0x0808f9c8

0801508c <dcd_edpt_stall>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801508c:	2801      	cmp	r0, #1
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801508e:	4a07      	ldr	r2, [pc, #28]	@ (80150ac <dcd_edpt_stall+0x20>)
void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8015090:	b538      	push	{r3, r4, r5, lr}
 8015092:	4603      	mov	r3, r0
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8015094:	bf88      	it	hi
 8015096:	2300      	movhi	r3, #0
 8015098:	460c      	mov	r4, r1
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801509a:	011b      	lsls	r3, r3, #4
 801509c:	58d5      	ldr	r5, [r2, r3]
  edpt_disable(rhport, ep_addr, true);
 801509e:	2201      	movs	r2, #1
 80150a0:	f7ff fccc 	bl	8014a3c <edpt_disable>
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 80150a4:	0663      	lsls	r3, r4, #25
 80150a6:	d100      	bne.n	80150aa <dcd_edpt_stall+0x1e>
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80150a8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
}
 80150aa:	bd38      	pop	{r3, r4, r5, pc}
 80150ac:	0808f9c8 	.word	0x0808f9c8

080150b0 <dcd_edpt_clear_stall>:
    rhport = 0;
 80150b0:	2802      	cmp	r0, #2
 80150b2:	ea4f 13d1 	mov.w	r3, r1, lsr #7
 80150b6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80150ba:	f083 0301 	eor.w	r3, r3, #1
 80150be:	bf28      	it	cs
 80150c0:	2000      	movcs	r0, #0
  dep->ctl &= ~EPCTL_STALL;;
 80150c2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80150c6:	4b09      	ldr	r3, [pc, #36]	@ (80150ec <dcd_edpt_clear_stall+0x3c>)
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80150c8:	0100      	lsls	r0, r0, #4
 80150ca:	581b      	ldr	r3, [r3, r0]
 80150cc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80150d0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80150d4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80150d8:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 80150dc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80150e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80150e4:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	0808f9c8 	.word	0x0808f9c8

080150f0 <dcd_int_handler>:
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80150f0:	2801      	cmp	r0, #1
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80150f2:	4aae      	ldr	r2, [pc, #696]	@ (80153ac <dcd_int_handler+0x2bc>)
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80150f4:	bf94      	ite	ls
 80150f6:	4603      	movls	r3, r0
 80150f8:	2300      	movhi	r3, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80150fa:	011b      	lsls	r3, r3, #4
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 80150fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015100:	58d4      	ldr	r4, [r2, r3]
 8015102:	b085      	sub	sp, #20
 8015104:	4605      	mov	r5, r0
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
  const uint32_t gintmask = dwc2->gintmsk;
 8015106:	69a3      	ldr	r3, [r4, #24]
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8015108:	6966      	ldr	r6, [r4, #20]
 801510a:	401e      	ands	r6, r3

  if (gintsts & GINTSTS_USBRST) {
 801510c:	04f2      	lsls	r2, r6, #19
 801510e:	d56b      	bpl.n	80151e8 <dcd_int_handler+0xf8>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8015110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000

    usbd_spin_lock(true);
 8015114:	2001      	movs	r0, #1
    dwc2->gintsts = GINTSTS_USBRST;
 8015116:	6163      	str	r3, [r4, #20]
    usbd_spin_lock(true);
 8015118:	f7fe fe78 	bl	8013e0c <usbd_spin_lock>
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 801511c:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
  tu_memclr(xfer_status, sizeof(xfer_status));
 801511e:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8015122:	2100      	movs	r1, #0
  return ghwcfg2.num_dev_ep + 1;
 8015124:	f3c7 2783 	ubfx	r7, r7, #10, #4
  tu_memclr(xfer_status, sizeof(xfer_status));
 8015128:	48a1      	ldr	r0, [pc, #644]	@ (80153b0 <dcd_int_handler+0x2c0>)
 801512a:	f000 fea1 	bl	8015e70 <memset>
  _dcd_data.allocated_epin_count = 0;
 801512e:	2300      	movs	r3, #0
 8015130:	4aa0      	ldr	r2, [pc, #640]	@ (80153b4 <dcd_int_handler+0x2c4>)
  return ghwcfg2.num_dev_ep + 1;
 8015132:	3701      	adds	r7, #1
  _dcd_data.allocated_epin_count = 0;
 8015134:	80d3      	strh	r3, [r2, #6]
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8015136:	eb04 1143 	add.w	r1, r4, r3, lsl #5
  for (uint8_t n = 0; n < ep_count; n++) {
 801513a:	3301      	adds	r3, #1
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 801513c:	f8d1 2b00 	ldr.w	r2, [r1, #2816]	@ 0xb00
 8015140:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8015144:	f8c1 2b00 	str.w	r2, [r1, #2816]	@ 0xb00
  for (uint8_t n = 0; n < ep_count; n++) {
 8015148:	b2da      	uxtb	r2, r3
 801514a:	42ba      	cmp	r2, r7
 801514c:	d3f3      	bcc.n	8015136 <dcd_int_handler+0x46>
 801514e:	2300      	movs	r3, #0
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8015150:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8015154:	f8d2 1900 	ldr.w	r1, [r2, #2304]	@ 0x900
 8015158:	2900      	cmp	r1, #0
 801515a:	da05      	bge.n	8015168 <dcd_int_handler+0x78>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 801515c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	@ 0x900
 8015160:	f041 4190 	orr.w	r1, r1, #1207959552	@ 0x48000000
 8015164:	f8c2 1900 	str.w	r1, [r2, #2304]	@ 0x900
  for (uint8_t n = 0; n < ep_count; n++) {
 8015168:	3301      	adds	r3, #1
 801516a:	b2da      	uxtb	r2, r3
 801516c:	4297      	cmp	r7, r2
 801516e:	d8ef      	bhi.n	8015150 <dcd_int_handler+0x60>
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8015170:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8015174:	f8c4 381c 	str.w	r3, [r4, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8015178:	2309      	movs	r3, #9
 801517a:	f8c4 3814 	str.w	r3, [r4, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 801517e:	f8c4 3810 	str.w	r3, [r4, #2064]	@ 0x810
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8015182:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8015186:	6123      	str	r3, [r4, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8015188:	6923      	ldr	r3, [r4, #16]
 801518a:	069b      	lsls	r3, r3, #26
 801518c:	d4fc      	bmi.n	8015188 <dcd_int_handler+0x98>
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801518e:	2310      	movs	r3, #16
 8015190:	6123      	str	r3, [r4, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8015192:	6927      	ldr	r7, [r4, #16]
 8015194:	f017 0710 	ands.w	r7, r7, #16
 8015198:	d1fb      	bne.n	8015192 <dcd_int_handler+0xa2>
  dfifo_device_init(rhport);
 801519a:	4628      	mov	r0, r5
 801519c:	f7ff fbf6 	bl	801498c <dfifo_device_init>
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 80151a0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 80151a4:	2240      	movs	r2, #64	@ 0x40
    handle_bus_reset(rhport);
    usbd_spin_unlock(true);
 80151a6:	2001      	movs	r0, #1
  dcfg.address = 0;
 80151a8:	f367 130a 	bfi	r3, r7, #4, #7
  dwc2->dcfg = dcfg.value;
 80151ac:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 80151b0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80151b4:	f023 0303 	bic.w	r3, r3, #3
 80151b8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 80151bc:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	@ 0xb00
 80151c0:	f023 0303 	bic.w	r3, r3, #3
 80151c4:	f8c4 3b00 	str.w	r3, [r4, #2816]	@ 0xb00
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 80151c8:	4b79      	ldr	r3, [pc, #484]	@ (80153b0 <dcd_int_handler+0x2c0>)
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 80151ca:	835a      	strh	r2, [r3, #26]
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 80151cc:	815a      	strh	r2, [r3, #10]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80151ce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80151d0:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	@ 0xb10
 80151d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80151d8:	f8c4 3b10 	str.w	r3, [r4, #2832]	@ 0xb10
  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 80151dc:	69a3      	ldr	r3, [r4, #24]
 80151de:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80151e2:	61a3      	str	r3, [r4, #24]
    usbd_spin_unlock(true);
 80151e4:	f7fe fe16 	bl	8013e14 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 80151e8:	04b7      	lsls	r7, r6, #18
 80151ea:	d51b      	bpl.n	8015224 <dcd_int_handler+0x134>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 80151ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80151f0:	6163      	str	r3, [r4, #20]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 80151f2:	69a3      	ldr	r3, [r4, #24]
 80151f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80151f8:	61a3      	str	r3, [r4, #24]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 80151fa:	f8d4 2808 	ldr.w	r2, [r4, #2056]	@ 0x808
  switch (dsts.enum_speed) {
 80151fe:	f012 0f06 	tst.w	r2, #6
 8015202:	f3c2 0341 	ubfx	r3, r2, #1, #2
 8015206:	f000 8089 	beq.w	801531c <dcd_int_handler+0x22c>
 801520a:	1e98      	subs	r0, r3, #2
 801520c:	4243      	negs	r3, r0
 801520e:	4143      	adcs	r3, r0
  event.event_id = DCD_EVENT_BUS_RESET;
 8015210:	2101      	movs	r1, #1
  dcd_event_handler(&event, in_isr);
 8015212:	a801      	add	r0, sp, #4
  event.rhport = rhport;
 8015214:	f88d 5004 	strb.w	r5, [sp, #4]
  event.event_id = DCD_EVENT_BUS_RESET;
 8015218:	f88d 1005 	strb.w	r1, [sp, #5]
  event.bus_reset.speed = speed;
 801521c:	f88d 3008 	strb.w	r3, [sp, #8]
  dcd_event_handler(&event, in_isr);
 8015220:	f7fe fc9a 	bl	8013b58 <dcd_event_handler>
    handle_enum_done(rhport);
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8015224:	0531      	lsls	r1, r6, #20
 8015226:	d510      	bpl.n	801524a <dcd_int_handler+0x15a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8015228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  dcd_event_handler(&event, in_isr);
 801522c:	2101      	movs	r1, #1
 801522e:	6163      	str	r3, [r4, #20]
    dwc2->gintmsk &= ~GINTMSK_USBSUSPM;
 8015230:	69a3      	ldr	r3, [r4, #24]
 8015232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015236:	61a3      	str	r3, [r4, #24]
  event.event_id = eid;
 8015238:	2304      	movs	r3, #4
  event.rhport = rhport;
 801523a:	f88d 5004 	strb.w	r5, [sp, #4]
  dcd_event_handler(&event, in_isr);
 801523e:	eb0d 0003 	add.w	r0, sp, r3
  event.event_id = eid;
 8015242:	f88d 3005 	strb.w	r3, [sp, #5]
  dcd_event_handler(&event, in_isr);
 8015246:	f7fe fc87 	bl	8013b58 <dcd_event_handler>
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 801524a:	2e00      	cmp	r6, #0
 801524c:	da0f      	bge.n	801526e <dcd_int_handler+0x17e>
    dwc2->gintsts = GINTSTS_WKUINT;
 801524e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015252:	2101      	movs	r1, #1
 8015254:	a801      	add	r0, sp, #4
 8015256:	6163      	str	r3, [r4, #20]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 8015258:	69a3      	ldr	r3, [r4, #24]
 801525a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801525e:	61a3      	str	r3, [r4, #24]
  event.event_id = eid;
 8015260:	2305      	movs	r3, #5
  event.rhport = rhport;
 8015262:	f88d 5004 	strb.w	r5, [sp, #4]
  event.event_id = eid;
 8015266:	f88d 3005 	strb.w	r3, [sp, #5]
  dcd_event_handler(&event, in_isr);
 801526a:	f7fe fc75 	bl	8013b58 <dcd_event_handler>
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 801526e:	0772      	lsls	r2, r6, #29
 8015270:	d50c      	bpl.n	801528c <dcd_int_handler+0x19c>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8015272:	6867      	ldr	r7, [r4, #4]

    if (otg_int & GOTGINT_SEDET) {
 8015274:	077b      	lsls	r3, r7, #29
 8015276:	d508      	bpl.n	801528a <dcd_int_handler+0x19a>
  event.event_id = eid;
 8015278:	2302      	movs	r3, #2
  dcd_event_handler(&event, in_isr);
 801527a:	2101      	movs	r1, #1
 801527c:	a801      	add	r0, sp, #4
  event.rhport = rhport;
 801527e:	f88d 5004 	strb.w	r5, [sp, #4]
  event.event_id = eid;
 8015282:	f88d 3005 	strb.w	r3, [sp, #5]
  dcd_event_handler(&event, in_isr);
 8015286:	f7fe fc67 	bl	8013b58 <dcd_event_handler>
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 801528a:	6067      	str	r7, [r4, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 801528c:	0737      	lsls	r7, r6, #28
 801528e:	d51a      	bpl.n	80152c6 <dcd_int_handler+0x1d6>
    dwc2->gintsts = GINTSTS_SOF;
 8015290:	2308      	movs	r3, #8
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 8015292:	4a48      	ldr	r2, [pc, #288]	@ (80153b4 <dcd_int_handler+0x2c4>)
    dwc2->gintsts = GINTSTS_SOF;
 8015294:	6163      	str	r3, [r4, #20]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 8015296:	69a3      	ldr	r3, [r4, #24]
    if (!_dcd_data.sof_en) {
 8015298:	79d2      	ldrb	r2, [r2, #7]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 801529a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801529e:	61a3      	str	r3, [r4, #24]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 80152a0:	f8d4 3808 	ldr.w	r3, [r4, #2056]	@ 0x808
 80152a4:	f3c3 230d 	ubfx	r3, r3, #8, #14
    if (!_dcd_data.sof_en) {
 80152a8:	b91a      	cbnz	r2, 80152b2 <dcd_int_handler+0x1c2>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 80152aa:	69a2      	ldr	r2, [r4, #24]
 80152ac:	f022 0208 	bic.w	r2, r2, #8
 80152b0:	61a2      	str	r2, [r4, #24]

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
  event.event_id = DCD_EVENT_SOF;
 80152b2:	2203      	movs	r2, #3
  event.sof.frame_count = frame_count;
  dcd_event_handler(&event, in_isr);
 80152b4:	2101      	movs	r1, #1
 80152b6:	a801      	add	r0, sp, #4
  event.rhport = rhport;
 80152b8:	f88d 5004 	strb.w	r5, [sp, #4]
  event.event_id = DCD_EVENT_SOF;
 80152bc:	f88d 2005 	strb.w	r2, [sp, #5]
  event.sof.frame_count = frame_count;
 80152c0:	9302      	str	r3, [sp, #8]
  dcd_event_handler(&event, in_isr);
 80152c2:	f7fe fc49 	bl	8013b58 <dcd_event_handler>
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 80152c6:	06f0      	lsls	r0, r6, #27
 80152c8:	d519      	bpl.n	80152fe <dcd_int_handler+0x20e>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 80152ca:	69a3      	ldr	r3, [r4, #24]
      setup[0] = (*rx_fifo);
 80152cc:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 80153b8 <dcd_int_handler+0x2c8>
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 80152d0:	f023 0310 	bic.w	r3, r3, #16
        if (xfer->ff) {
 80152d4:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 80153b0 <dcd_int_handler+0x2c0>
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 80152d8:	61a3      	str	r3, [r4, #24]
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 80152da:	6a27      	ldr	r7, [r4, #32]
  switch (grxstsp.packet_status) {
 80152dc:	f3c7 4343 	ubfx	r3, r7, #17, #4
  const uint8_t epnum = grxstsp.ep_ch_num;
 80152e0:	f007 080f 	and.w	r8, r7, #15
  switch (grxstsp.packet_status) {
 80152e4:	2b04      	cmp	r3, #4
 80152e6:	d024      	beq.n	8015332 <dcd_int_handler+0x242>
 80152e8:	2b06      	cmp	r3, #6
 80152ea:	d019      	beq.n	8015320 <dcd_int_handler+0x230>
 80152ec:	2b02      	cmp	r3, #2
 80152ee:	d029      	beq.n	8015344 <dcd_int_handler+0x254>

    do {
      handle_rxflvl_irq(rhport); // read all packets
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 80152f0:	6963      	ldr	r3, [r4, #20]
 80152f2:	06d9      	lsls	r1, r3, #27
 80152f4:	d4f1      	bmi.n	80152da <dcd_int_handler+0x1ea>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80152f6:	69a3      	ldr	r3, [r4, #24]
 80152f8:	f043 0310 	orr.w	r3, r3, #16
 80152fc:	61a3      	str	r3, [r4, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 80152fe:	0332      	lsls	r2, r6, #12
 8015300:	d503      	bpl.n	801530a <dcd_int_handler+0x21a>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 8015302:	2100      	movs	r1, #0
 8015304:	4628      	mov	r0, r5
 8015306:	f7ff fc7d 	bl	8014c04 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 801530a:	0373      	lsls	r3, r6, #13
 801530c:	d54b      	bpl.n	80153a6 <dcd_int_handler+0x2b6>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 801530e:	2101      	movs	r1, #1
 8015310:	4628      	mov	r0, r5
  }
}
 8015312:	b005      	add	sp, #20
 8015314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    handle_ep_irq(rhport, TUSB_DIR_IN);
 8015318:	f7ff bc74 	b.w	8014c04 <handle_ep_irq>
      speed = TUSB_SPEED_HIGH;
 801531c:	2302      	movs	r3, #2
 801531e:	e777      	b.n	8015210 <dcd_int_handler+0x120>
      setup[0] = (*rx_fifo);
 8015320:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015324:	681a      	ldr	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8015326:	681b      	ldr	r3, [r3, #0]
      setup[0] = (*rx_fifo);
 8015328:	f8c9 2000 	str.w	r2, [r9]
      setup[1] = (*rx_fifo);
 801532c:	f8c9 3004 	str.w	r3, [r9, #4]
      break;
 8015330:	e7de      	b.n	80152f0 <dcd_int_handler+0x200>
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8015332:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 8015336:	f8d8 3b10 	ldr.w	r3, [r8, #2832]	@ 0xb10
 801533a:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801533e:	f8c8 3b10 	str.w	r3, [r8, #2832]	@ 0xb10
      break;
 8015342:	e7d5      	b.n	80152f0 <dcd_int_handler+0x200>
      const uint16_t byte_count = grxstsp.byte_count;
 8015344:	f3c7 170a 	ubfx	r7, r7, #4, #11
      if (byte_count) {
 8015348:	2f00      	cmp	r7, #0
 801534a:	d0d1      	beq.n	80152f0 <dcd_int_handler+0x200>
        if (xfer->ff) {
 801534c:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8015350:	463a      	mov	r2, r7
        if (xfer->ff) {
 8015352:	ea4f 1b48 	mov.w	fp, r8, lsl #5
 8015356:	6858      	ldr	r0, [r3, #4]
 8015358:	b1d0      	cbz	r0, 8015390 <dcd_int_handler+0x2a0>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 801535a:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 801535e:	f7fe fabd 	bl	80138dc <tu_fifo_write_n_const_addr_full_words>
        if (byte_count < xfer->max_size) {
 8015362:	eb0a 020b 	add.w	r2, sl, fp
 8015366:	8953      	ldrh	r3, [r2, #10]
 8015368:	42bb      	cmp	r3, r7
 801536a:	d9c1      	bls.n	80152f0 <dcd_int_handler+0x200>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 801536c:	44a3      	add	fp, r4
          xfer->total_len -= tsiz.xfer_size;
 801536e:	8913      	ldrh	r3, [r2, #8]
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8015370:	f8db 1b10 	ldr.w	r1, [fp, #2832]	@ 0xb10
          xfer->total_len -= tsiz.xfer_size;
 8015374:	1a5b      	subs	r3, r3, r1
 8015376:	b29b      	uxth	r3, r3
 8015378:	8113      	strh	r3, [r2, #8]
          if (epnum == 0) {
 801537a:	f1b8 0f00 	cmp.w	r8, #0
 801537e:	d1b7      	bne.n	80152f0 <dcd_int_handler+0x200>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8015380:	4a0c      	ldr	r2, [pc, #48]	@ (80153b4 <dcd_int_handler+0x2c4>)
 8015382:	8811      	ldrh	r1, [r2, #0]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8015384:	f8a2 8000 	strh.w	r8, [r2]
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8015388:	1a5b      	subs	r3, r3, r1
 801538a:	f8aa 3008 	strh.w	r3, [sl, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 801538e:	e7af      	b.n	80152f0 <dcd_int_handler+0x200>
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8015390:	f85a 100b 	ldr.w	r1, [sl, fp]
 8015394:	4620      	mov	r0, r4
 8015396:	f000 f93b 	bl	8015610 <dfifo_read_packet>
          xfer->buffer += byte_count;
 801539a:	f85a 300b 	ldr.w	r3, [sl, fp]
 801539e:	443b      	add	r3, r7
 80153a0:	f84a 300b 	str.w	r3, [sl, fp]
 80153a4:	e7dd      	b.n	8015362 <dcd_int_handler+0x272>
}
 80153a6:	b005      	add	sp, #20
 80153a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ac:	0808f9c8 	.word	0x0808f9c8
 80153b0:	20011628 	.word	0x20011628
 80153b4:	20011620 	.word	0x20011620
 80153b8:	20011618 	.word	0x20011618

080153bc <reset_core>:
//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 80153bc:	6903      	ldr	r3, [r0, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 80153be:	f244 2209 	movw	r2, #16905	@ 0x4209
  dwc2->grstctl |= GRSTCTL_CSRST;
 80153c2:	f043 0301 	orr.w	r3, r3, #1
 80153c6:	6103      	str	r3, [r0, #16]
  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 80153c8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	4293      	cmp	r3, r2
 80153ce:	d806      	bhi.n	80153de <reset_core+0x22>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 80153d0:	6903      	ldr	r3, [r0, #16]
 80153d2:	07da      	lsls	r2, r3, #31
 80153d4:	d4fc      	bmi.n	80153d0 <reset_core+0x14>
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 80153d6:	6903      	ldr	r3, [r0, #16]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	dafc      	bge.n	80153d6 <reset_core+0x1a>
}
 80153dc:	4770      	bx	lr
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 80153de:	6903      	ldr	r3, [r0, #16]
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	d5fc      	bpl.n	80153de <reset_core+0x22>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 80153e4:	6903      	ldr	r3, [r0, #16]
 80153e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80153ea:	f023 0301 	bic.w	r3, r3, #1
 80153ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80153f2:	6103      	str	r3, [r0, #16]
 80153f4:	e7ef      	b.n	80153d6 <reset_core+0x1a>
	...

080153f8 <dwc2_phy_update.part.0>:
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 80153f8:	4b1d      	ldr	r3, [pc, #116]	@ (8015470 <dwc2_phy_update.part.0+0x78>)
 80153fa:	4a1e      	ldr	r2, [pc, #120]	@ (8015474 <dwc2_phy_update.part.0+0x7c>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	4293      	cmp	r3, r2
 8015400:	d226      	bcs.n	8015450 <dwc2_phy_update.part.0+0x58>
      turnaround = 0x6u;
    } else if (SystemCoreClock >= 27500000u) {
 8015402:	4a1d      	ldr	r2, [pc, #116]	@ (8015478 <dwc2_phy_update.part.0+0x80>)
 8015404:	4293      	cmp	r3, r2
 8015406:	d825      	bhi.n	8015454 <dwc2_phy_update.part.0+0x5c>
      turnaround = 0x7u;
    } else if (SystemCoreClock >= 24000000u) {
 8015408:	4a1c      	ldr	r2, [pc, #112]	@ (801547c <dwc2_phy_update.part.0+0x84>)
 801540a:	4293      	cmp	r3, r2
 801540c:	d224      	bcs.n	8015458 <dwc2_phy_update.part.0+0x60>
      turnaround = 0x8u;
    } else if (SystemCoreClock >= 21800000u) {
 801540e:	4a1c      	ldr	r2, [pc, #112]	@ (8015480 <dwc2_phy_update.part.0+0x88>)
 8015410:	4293      	cmp	r3, r2
 8015412:	d823      	bhi.n	801545c <dwc2_phy_update.part.0+0x64>
      turnaround = 0x9u;
    }
    else if (SystemCoreClock >= 20000000u) {
 8015414:	f5a2 12db 	sub.w	r2, r2, #1794048	@ 0x1b6000
 8015418:	f5a2 52ba 	sub.w	r2, r2, #5952	@ 0x1740
 801541c:	4293      	cmp	r3, r2
 801541e:	d81f      	bhi.n	8015460 <dwc2_phy_update.part.0+0x68>
      turnaround = 0xAu;
    }
    else if (SystemCoreClock >= 18500000u) {
 8015420:	f5a2 12b7 	sub.w	r2, r2, #1499136	@ 0x16e000
 8015424:	f5a2 7258 	sub.w	r2, r2, #864	@ 0x360
 8015428:	4293      	cmp	r3, r2
 801542a:	d81b      	bhi.n	8015464 <dwc2_phy_update.part.0+0x6c>
      turnaround = 0xBu;
    }
    else if (SystemCoreClock >= 17200000u) {
 801542c:	4a15      	ldr	r2, [pc, #84]	@ (8015484 <dwc2_phy_update.part.0+0x8c>)
 801542e:	4293      	cmp	r3, r2
 8015430:	d21a      	bcs.n	8015468 <dwc2_phy_update.part.0+0x70>
      turnaround = 0xCu;
    }
    else if (SystemCoreClock >= 16000000u) {
 8015432:	4a15      	ldr	r2, [pc, #84]	@ (8015488 <dwc2_phy_update.part.0+0x90>)
 8015434:	4293      	cmp	r3, r2
 8015436:	d219      	bcs.n	801546c <dwc2_phy_update.part.0+0x74>
      turnaround = 0xDu;
    }
    else if (SystemCoreClock >= 15000000u) {
      turnaround = 0xEu;
 8015438:	4a14      	ldr	r2, [pc, #80]	@ (801548c <dwc2_phy_update.part.0+0x94>)
 801543a:	4293      	cmp	r3, r2
 801543c:	bf34      	ite	cc
 801543e:	230f      	movcc	r3, #15
 8015440:	230e      	movcs	r3, #14
    }
    else {
      turnaround = 0xFu;
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8015442:	68c2      	ldr	r2, [r0, #12]
 8015444:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8015448:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 801544c:	60c3      	str	r3, [r0, #12]
  }
}
 801544e:	4770      	bx	lr
      turnaround = 0x6u;
 8015450:	2306      	movs	r3, #6
 8015452:	e7f6      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0x7u;
 8015454:	2307      	movs	r3, #7
 8015456:	e7f4      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0x8u;
 8015458:	2308      	movs	r3, #8
 801545a:	e7f2      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0x9u;
 801545c:	2309      	movs	r3, #9
 801545e:	e7f0      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0xAu;
 8015460:	230a      	movs	r3, #10
 8015462:	e7ee      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0xBu;
 8015464:	230b      	movs	r3, #11
 8015466:	e7ec      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0xCu;
 8015468:	230c      	movs	r3, #12
 801546a:	e7ea      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
      turnaround = 0xDu;
 801546c:	230d      	movs	r3, #13
 801546e:	e7e8      	b.n	8015442 <dwc2_phy_update.part.0+0x4a>
 8015470:	20000014 	.word	0x20000014
 8015474:	01e84800 	.word	0x01e84800
 8015478:	01a39ddf 	.word	0x01a39ddf
 801547c:	016e3600 	.word	0x016e3600
 8015480:	014ca43f 	.word	0x014ca43f
 8015484:	01067380 	.word	0x01067380
 8015488:	00f42400 	.word	0x00f42400
 801548c:	00e4e1c0 	.word	0x00e4e1c0

08015490 <dwc2_core_is_highspeed>:
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 8015490:	2901      	cmp	r1, #1
 8015492:	d006      	beq.n	80154a2 <dwc2_core_is_highspeed+0x12>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8015494:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 8015496:	b2c0      	uxtb	r0, r0
 8015498:	283f      	cmp	r0, #63	@ 0x3f
 801549a:	bf94      	ite	ls
 801549c:	2000      	movls	r0, #0
 801549e:	2001      	movhi	r0, #1
 80154a0:	4770      	bx	lr
    return false;
 80154a2:	2000      	movs	r0, #0
}
 80154a4:	4770      	bx	lr
	...

080154a8 <dwc2_core_init>:
    rhport = 0;
 80154a8:	2802      	cmp	r0, #2
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80154aa:	4b54      	ldr	r3, [pc, #336]	@ (80155fc <dwc2_core_init+0x154>)
    rhport = 0;
 80154ac:	bf28      	it	cs
 80154ae:	2000      	movcs	r0, #0
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80154b0:	0100      	lsls	r0, r0, #4
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 80154b2:	b570      	push	{r4, r5, r6, lr}
 80154b4:	581c      	ldr	r4, [r3, r0]
 80154b6:	4615      	mov	r5, r2
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80154b8:	4a51      	ldr	r2, [pc, #324]	@ (8015600 <dwc2_core_init+0x158>)
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80154ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80154bc:	f36f 030f 	bfc	r3, #0, #16
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80154c0:	4293      	cmp	r3, r2
 80154c2:	d014      	beq.n	80154ee <dwc2_core_init+0x46>
 80154c4:	4a4f      	ldr	r2, [pc, #316]	@ (8015604 <dwc2_core_init+0x15c>)
 80154c6:	4293      	cmp	r3, r2
 80154c8:	d011      	beq.n	80154ee <dwc2_core_init+0x46>
 80154ca:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 80154ce:	4293      	cmp	r3, r2
 80154d0:	d00d      	beq.n	80154ee <dwc2_core_init+0x46>
 80154d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80154d6:	f8d3 2df0 	ldr.w	r2, [r3, #3568]	@ 0xdf0
 80154da:	07d1      	lsls	r1, r2, #31
 80154dc:	d500      	bpl.n	80154e0 <dwc2_core_init+0x38>
 80154de:	be00      	bkpt	0x0000
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 80154e0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80154e4:	07da      	lsls	r2, r3, #31
 80154e6:	d500      	bpl.n	80154ea <dwc2_core_init+0x42>
 80154e8:	be00      	bkpt	0x0000
 80154ea:	2000      	movs	r0, #0
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
  }

  return true;
}
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 80154ee:	68a3      	ldr	r3, [r4, #8]
 80154f0:	f023 0301 	bic.w	r3, r3, #1
 80154f4:	60a3      	str	r3, [r4, #8]
  if (is_highspeed) {
 80154f6:	2900      	cmp	r1, #0
 80154f8:	d061      	beq.n	80155be <dwc2_core_init+0x116>
  uint32_t gusbcfg = dwc2->gusbcfg;
 80154fa:	68e1      	ldr	r1, [r4, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80154fc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 80154fe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8015500:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 8015504:	2880      	cmp	r0, #128	@ 0x80
 8015506:	d14b      	bne.n	80155a0 <dwc2_core_init+0xf8>
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8015508:	f421 1168 	bic.w	r1, r1, #3801088	@ 0x3a0000
 801550c:	f021 01c8 	bic.w	r1, r1, #200	@ 0xc8
 8015510:	f041 0110 	orr.w	r1, r1, #16
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8015514:	f013 0fc0 	tst.w	r3, #192	@ 0xc0
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 8015518:	f3c3 1681 	ubfx	r6, r3, #6, #2
  dwc2->gusbcfg = gusbcfg;
 801551c:	60e1      	str	r1, [r4, #12]
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 801551e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8015520:	d149      	bne.n	80155b6 <dwc2_core_init+0x10e>
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8015522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015526:	63a3      	str	r3, [r4, #56]	@ 0x38
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 8015528:	4b37      	ldr	r3, [pc, #220]	@ (8015608 <dwc2_core_init+0x160>)
 801552a:	429c      	cmp	r4, r3
 801552c:	d104      	bne.n	8015538 <dwc2_core_init+0x90>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_OTGHSULPILPEN;
 801552e:	4a37      	ldr	r2, [pc, #220]	@ (801560c <dwc2_core_init+0x164>)
 8015530:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8015532:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015536:	6513      	str	r3, [r2, #80]	@ 0x50
  reset_core(dwc2);
 8015538:	4620      	mov	r0, r4
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801553a:	f421 5170 	bic.w	r1, r1, #15360	@ 0x3c00
  reset_core(dwc2);
 801553e:	f7ff ff3d 	bl	80153bc <reset_core>
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8015542:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015544:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8015548:	bf0c      	ite	eq
 801554a:	f44f 5310 	moveq.w	r3, #9216	@ 0x2400
 801554e:	f44f 53a0 	movne.w	r3, #5120	@ 0x1400
 8015552:	4319      	orrs	r1, r3
  dwc2->gusbcfg = gusbcfg;
 8015554:	60e1      	str	r1, [r4, #12]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8015556:	b90e      	cbnz	r6, 801555c <dwc2_core_init+0xb4>
 8015558:	f7ff ff4e 	bl	80153f8 <dwc2_phy_update.part.0>
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 801555c:	68e3      	ldr	r3, [r4, #12]
 801555e:	f043 0307 	orr.w	r3, r3, #7
 8015562:	60e3      	str	r3, [r4, #12]
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 8015564:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	@ 0xe00
 8015568:	f023 030f 	bic.w	r3, r3, #15
 801556c:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8015570:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8015574:	6123      	str	r3, [r4, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8015576:	6923      	ldr	r3, [r4, #16]
 8015578:	069b      	lsls	r3, r3, #26
 801557a:	d4fc      	bmi.n	8015576 <dwc2_core_init+0xce>
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801557c:	2310      	movs	r3, #16
 801557e:	6123      	str	r3, [r4, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8015580:	6923      	ldr	r3, [r4, #16]
 8015582:	f013 0310 	ands.w	r3, r3, #16
 8015586:	d1fb      	bne.n	8015580 <dwc2_core_init+0xd8>
  dwc2->gintsts = 0xFFFFFFFFU;
 8015588:	f04f 32ff 	mov.w	r2, #4294967295
 801558c:	6162      	str	r2, [r4, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 801558e:	6062      	str	r2, [r4, #4]
  dwc2->gintmsk = 0;
 8015590:	61a3      	str	r3, [r4, #24]
  if (is_dma) {
 8015592:	b36d      	cbz	r5, 80155f0 <dwc2_core_init+0x148>
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 8015594:	68a3      	ldr	r3, [r4, #8]
 8015596:	f043 0326 	orr.w	r3, r3, #38	@ 0x26
 801559a:	60a3      	str	r3, [r4, #8]
  return true;
 801559c:	2001      	movs	r0, #1
 801559e:	e7a5      	b.n	80154ec <dwc2_core_init+0x44>
    if (ghwcfg4.phy_data_width) {
 80155a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80155a4:	2a3f      	cmp	r2, #63	@ 0x3f
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 80155a6:	bf8a      	itet	hi
 80155a8:	f021 0150 	bichi.w	r1, r1, #80	@ 0x50
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 80155ac:	f021 0158 	bicls.w	r1, r1, #88	@ 0x58
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 80155b0:	f041 0108 	orrhi.w	r1, r1, #8
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 80155b4:	e7ae      	b.n	8015514 <dwc2_core_init+0x6c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 80155b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80155ba:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (hs_phy_type == GHWCFG2_HSPHY_UTMI || hs_phy_type == GHWCFG2_HSPHY_UTMI_ULPI) {
 80155bc:	e7bc      	b.n	8015538 <dwc2_core_init+0x90>
  uint32_t gusbcfg = dwc2->gusbcfg;
 80155be:	68e1      	ldr	r1, [r4, #12]
  gusbcfg |= GUSBCFG_PHYSEL;
 80155c0:	f041 0340 	orr.w	r3, r1, #64	@ 0x40
  dwc2->gusbcfg = gusbcfg;
 80155c4:	60e3      	str	r3, [r4, #12]
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80155c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80155c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80155cc:	63a3      	str	r3, [r4, #56]	@ 0x38
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 80155ce:	4b0e      	ldr	r3, [pc, #56]	@ (8015608 <dwc2_core_init+0x160>)
 80155d0:	429c      	cmp	r4, r3
 80155d2:	d104      	bne.n	80155de <dwc2_core_init+0x136>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_OTGHSULPILPEN;
 80155d4:	4a0d      	ldr	r2, [pc, #52]	@ (801560c <dwc2_core_init+0x164>)
 80155d6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80155d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80155dc:	6513      	str	r3, [r2, #80]	@ 0x50
  reset_core(dwc2);
 80155de:	f421 5170 	bic.w	r1, r1, #15360	@ 0x3c00
 80155e2:	4620      	mov	r0, r4
 80155e4:	f7ff feea 	bl	80153bc <reset_core>
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 80155e8:	f441 51a2 	orr.w	r1, r1, #5184	@ 0x1440
  dwc2->gusbcfg = gusbcfg;
 80155ec:	60e1      	str	r1, [r4, #12]
 80155ee:	e7b3      	b.n	8015558 <dwc2_core_init+0xb0>
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 80155f0:	69a3      	ldr	r3, [r4, #24]
 80155f2:	f043 0310 	orr.w	r3, r3, #16
 80155f6:	61a3      	str	r3, [r4, #24]
 80155f8:	e7d0      	b.n	801559c <dwc2_core_init+0xf4>
 80155fa:	bf00      	nop
 80155fc:	0808f9e8 	.word	0x0808f9e8
 8015600:	4f540000 	.word	0x4f540000
 8015604:	55310000 	.word	0x55310000
 8015608:	40040000 	.word	0x40040000
 801560c:	40023800 	.word	0x40023800

08015610 <dfifo_read_packet>:
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
  while (word_count--) {
 8015610:	0893      	lsrs	r3, r2, #2
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 8015612:	b530      	push	{r4, r5, lr}
 8015614:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    tu_unaligned_write32(dst, *rx_fifo);
 8015618:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  while (word_count--) {
 801561c:	4299      	cmp	r1, r3
 801561e:	d111      	bne.n	8015644 <dfifo_read_packet+0x34>
    dst += 4;
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 8015620:	b2d4      	uxtb	r4, r2
  if (bytes_rem != 0) {
 8015622:	f012 0203 	ands.w	r2, r2, #3
 8015626:	d00c      	beq.n	8015642 <dfifo_read_packet+0x32>
    const uint32_t tmp = *rx_fifo;
 8015628:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801562c:	6801      	ldr	r1, [r0, #0]
    dst[0] = tu_u32_byte0(tmp);
    if (bytes_rem > 1) {
 801562e:	07a0      	lsls	r0, r4, #30
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8015630:	bf48      	it	mi
 8015632:	0a08      	lsrmi	r0, r1, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8015634:	7019      	strb	r1, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8015636:	bf48      	it	mi
 8015638:	7058      	strbmi	r0, [r3, #1]
      dst[1] = tu_u32_byte1(tmp);
    }
    if (bytes_rem > 2) {
 801563a:	2a03      	cmp	r2, #3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 801563c:	bf04      	itt	eq
 801563e:	0c09      	lsreq	r1, r1, #16
 8015640:	7099      	strbeq	r1, [r3, #2]
      dst[2] = tu_u32_byte2(tmp);
    }
  }
}
 8015642:	bd30      	pop	{r4, r5, pc}
    tu_unaligned_write32(dst, *rx_fifo);
 8015644:	6825      	ldr	r5, [r4, #0]
  *((uint32_t *) mem) = value;
 8015646:	f841 5b04 	str.w	r5, [r1], #4
    dst += 4;
 801564a:	e7e7      	b.n	801561c <dfifo_read_packet+0xc>

0801564c <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 801564c:	3101      	adds	r1, #1
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 801564e:	b570      	push	{r4, r5, r6, lr}
 8015650:	089c      	lsrs	r4, r3, #2
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 8015652:	030d      	lsls	r5, r1, #12
 8015654:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8015658:	eb00 3101 	add.w	r1, r0, r1, lsl #12

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
  while (word_count--) {
 801565c:	42a2      	cmp	r2, r4
 801565e:	d10e      	bne.n	801567e <dfifo_write_packet+0x32>
    *tx_fifo = tu_unaligned_read32(src);
    src += 4;
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 8015660:	b2dc      	uxtb	r4, r3
  if (bytes_rem) {
 8015662:	f013 0303 	ands.w	r3, r3, #3
 8015666:	d009      	beq.n	801567c <dfifo_write_packet+0x30>
    uint32_t tmp_word = src[0];
    if (bytes_rem > 1) {
 8015668:	07a4      	lsls	r4, r4, #30
    uint32_t tmp_word = src[0];
 801566a:	7811      	ldrb	r1, [r2, #0]
    if (bytes_rem > 1) {
 801566c:	d505      	bpl.n	801567a <dfifo_write_packet+0x2e>
      tmp_word |= (src[1] << 8);
    }
    if (bytes_rem > 2) {
 801566e:	2b03      	cmp	r3, #3
      tmp_word |= (src[1] << 8);
 8015670:	8811      	ldrh	r1, [r2, #0]
      tmp_word |= (src[2] << 16);
 8015672:	bf04      	itt	eq
 8015674:	7893      	ldrbeq	r3, [r2, #2]
 8015676:	ea41 4103 	orreq.w	r1, r1, r3, lsl #16
    }

    *tx_fifo = tmp_word;
 801567a:	5141      	str	r1, [r0, r5]
  }
}
 801567c:	bd70      	pop	{r4, r5, r6, pc}
  return *((uint32_t const *) mem);
 801567e:	f852 6b04 	ldr.w	r6, [r2], #4
    *tx_fifo = tu_unaligned_read32(src);
 8015682:	600e      	str	r6, [r1, #0]
    src += 4;
 8015684:	e7ea      	b.n	801565c <dfifo_write_packet+0x10>

08015686 <tusb_time_delay_ms_api>:

  return ticks;
}

TU_ATTR_ALWAYS_INLINE static inline void osal_task_delay(uint32_t msec) {
  vTaskDelay(pdMS_TO_TICKS(msec));
 8015686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801568a:	4358      	muls	r0, r3
 801568c:	fbb0 f0f3 	udiv	r0, r0, r3
 8015690:	f7f3 bcf2 	b.w	8009078 <vTaskDelay>

08015694 <tusb_rhport_init>:
    return true;
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 8015694:	2801      	cmp	r0, #1
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8015696:	b510      	push	{r4, lr}
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 8015698:	d801      	bhi.n	801569e <tusb_rhport_init+0xa>
 801569a:	780a      	ldrb	r2, [r1, #0]
 801569c:	b942      	cbnz	r2, 80156b0 <tusb_rhport_init+0x1c>
  _tusb_rhport_role[rhport] = rh_init->role;

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 801569e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80156a2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80156a6:	07db      	lsls	r3, r3, #31
 80156a8:	d500      	bpl.n	80156ac <tusb_rhport_init+0x18>
 80156aa:	be00      	bkpt	0x0000
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 80156ac:	2000      	movs	r0, #0
 80156ae:	e004      	b.n	80156ba <tusb_rhport_init+0x26>
  _tusb_rhport_role[rhport] = rh_init->role;
 80156b0:	4c05      	ldr	r4, [pc, #20]	@ (80156c8 <tusb_rhport_init+0x34>)
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 80156b2:	2a01      	cmp	r2, #1
  _tusb_rhport_role[rhport] = rh_init->role;
 80156b4:	5422      	strb	r2, [r4, r0]
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 80156b6:	d001      	beq.n	80156bc <tusb_rhport_init+0x28>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 80156b8:	2001      	movs	r0, #1
}
 80156ba:	bd10      	pop	{r4, pc}
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 80156bc:	f7fe f9ca 	bl	8013a54 <tud_rhport_init>
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d1f9      	bne.n	80156b8 <tusb_rhport_init+0x24>
 80156c4:	e7eb      	b.n	801569e <tusb_rhport_init+0xa>
 80156c6:	bf00      	nop
 80156c8:	20011748 	.word	0x20011748

080156cc <tusb_int_handler>:

  return ret;
}

void tusb_int_handler(uint8_t rhport, bool in_isr) {
  TU_VERIFY(rhport < TUP_USBIP_CONTROLLER_NUM,);
 80156cc:	2801      	cmp	r0, #1
 80156ce:	d805      	bhi.n	80156dc <tusb_int_handler+0x10>

  #if CFG_TUD_ENABLED
  if (_tusb_rhport_role[rhport] == TUSB_ROLE_DEVICE) {
 80156d0:	4a03      	ldr	r2, [pc, #12]	@ (80156e0 <tusb_int_handler+0x14>)
 80156d2:	5c13      	ldrb	r3, [r2, r0]
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d101      	bne.n	80156dc <tusb_int_handler+0x10>
    (void) in_isr;
    dcd_int_handler(rhport);
 80156d8:	f7ff bd0a 	b.w	80150f0 <dcd_int_handler>
  #if CFG_TUH_ENABLED
  if (_tusb_rhport_role[rhport] == TUSB_ROLE_HOST) {
    hcd_int_handler(rhport, in_isr);
  }
  #endif
}
 80156dc:	4770      	bx	lr
 80156de:	bf00      	nop
 80156e0:	20011748 	.word	0x20011748

080156e4 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80156e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80156e6:	7804      	ldrb	r4, [r0, #0]
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80156e8:	4605      	mov	r5, r0
 80156ea:	460e      	mov	r6, r1
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80156ec:	f014 0401 	ands.w	r4, r4, #1
 80156f0:	d11f      	bne.n	8015732 <tu_edpt_claim+0x4e>
 80156f2:	7803      	ldrb	r3, [r0, #0]
 80156f4:	075a      	lsls	r2, r3, #29
 80156f6:	f3c3 0780 	ubfx	r7, r3, #2, #1
 80156fa:	d416      	bmi.n	801572a <tu_edpt_claim+0x46>
    return res != 0;
  }
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_semaphore_wait(osal_semaphore_t sem_hdl, uint32_t msec) {
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 80156fc:	f04f 31ff 	mov.w	r1, #4294967295
 8015700:	4630      	mov	r0, r6
 8015702:	f7f2 ffc2 	bl	800868a <xQueueSemaphoreTake>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8015706:	782c      	ldrb	r4, [r5, #0]
 8015708:	f014 0401 	ands.w	r4, r4, #1
 801570c:	d10f      	bne.n	801572e <tu_edpt_claim+0x4a>
 801570e:	782b      	ldrb	r3, [r5, #0]
 8015710:	075b      	lsls	r3, r3, #29
 8015712:	d404      	bmi.n	801571e <tu_edpt_claim+0x3a>
  if (available) {
    ep_state->claimed = 1;
 8015714:	782b      	ldrb	r3, [r5, #0]
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8015716:	2401      	movs	r4, #1
    ep_state->claimed = 1;
 8015718:	f043 0304 	orr.w	r3, r3, #4
 801571c:	702b      	strb	r3, [r5, #0]
TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_lock(osal_mutex_t mutex_hdl, uint32_t msec) {
  return osal_semaphore_wait(mutex_hdl, msec);
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl) {
  return xSemaphoreGive(mutex_hdl);
 801571e:	2300      	movs	r3, #0
 8015720:	4630      	mov	r0, r6
 8015722:	461a      	mov	r2, r3
 8015724:	4619      	mov	r1, r3
 8015726:	f7f2 fd3f 	bl	80081a8 <xQueueGenericSend>
  }

  (void) osal_mutex_unlock(mutex);
  return available;
}
 801572a:	4620      	mov	r0, r4
 801572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 801572e:	463c      	mov	r4, r7
 8015730:	e7f5      	b.n	801571e <tu_edpt_claim+0x3a>
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8015732:	2400      	movs	r4, #0
 8015734:	e7f9      	b.n	801572a <tu_edpt_claim+0x46>

08015736 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8015736:	b570      	push	{r4, r5, r6, lr}
 8015738:	460d      	mov	r5, r1
 801573a:	4604      	mov	r4, r0
  return xSemaphoreTake(sem_hdl, _osal_ms2tick(msec));
 801573c:	f04f 31ff 	mov.w	r1, #4294967295
 8015740:	4628      	mov	r0, r5
 8015742:	f7f2 ffa2 	bl	800868a <xQueueSemaphoreTake>
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8015746:	7823      	ldrb	r3, [r4, #0]
 8015748:	f3c3 0680 	ubfx	r6, r3, #2, #1
 801574c:	075b      	lsls	r3, r3, #29
 801574e:	d507      	bpl.n	8015760 <tu_edpt_release+0x2a>
 8015750:	7823      	ldrb	r3, [r4, #0]
 8015752:	f013 0201 	ands.w	r2, r3, #1
 8015756:	d10b      	bne.n	8015770 <tu_edpt_release+0x3a>
  if (ret) {
    ep_state->claimed = 0;
 8015758:	7823      	ldrb	r3, [r4, #0]
 801575a:	f362 0382 	bfi	r3, r2, #2, #1
 801575e:	7023      	strb	r3, [r4, #0]
  return xSemaphoreGive(mutex_hdl);
 8015760:	2300      	movs	r3, #0
 8015762:	4628      	mov	r0, r5
 8015764:	461a      	mov	r2, r3
 8015766:	4619      	mov	r1, r3
 8015768:	f7f2 fd1e 	bl	80081a8 <xQueueGenericSend>
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
}
 801576c:	4630      	mov	r0, r6
 801576e:	bd70      	pop	{r4, r5, r6, pc}
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8015770:	2600      	movs	r6, #0
 8015772:	e7f5      	b.n	8015760 <tu_edpt_release+0x2a>

08015774 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 8015774:	b530      	push	{r4, r5, lr}
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8015776:	78c4      	ldrb	r4, [r0, #3]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8015778:	8885      	ldrh	r5, [r0, #4]
 801577a:	f004 0403 	and.w	r4, r4, #3
 801577e:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8015782:	2c02      	cmp	r4, #2
 8015784:	d00c      	beq.n	80157a0 <tu_edpt_validate+0x2c>
 8015786:	2c03      	cmp	r4, #3
 8015788:	d031      	beq.n	80157ee <tu_edpt_validate+0x7a>
 801578a:	2c01      	cmp	r4, #1
 801578c:	d114      	bne.n	80157b8 <tu_edpt_validate+0x44>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 801578e:	2902      	cmp	r1, #2
 8015790:	f240 32ff 	movw	r2, #1023	@ 0x3ff
        }
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8015794:	bf08      	it	eq
 8015796:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 801579a:	429a      	cmp	r2, r3
 801579c:	d216      	bcs.n	80157cc <tu_edpt_validate+0x58>
 801579e:	e004      	b.n	80157aa <tu_edpt_validate+0x36>
      if (speed == TUSB_SPEED_HIGH) {
 80157a0:	2902      	cmp	r1, #2
 80157a2:	d10b      	bne.n	80157bc <tu_edpt_validate+0x48>
        TU_ASSERT(max_packet_size == 512);
 80157a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80157a8:	d010      	beq.n	80157cc <tu_edpt_validate+0x58>
 80157aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80157ae:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
 80157b2:	07da      	lsls	r2, r3, #31
 80157b4:	d500      	bpl.n	80157b8 <tu_edpt_validate+0x44>
 80157b6:	be00      	bkpt	0x0000
      TU_ASSERT(max_packet_size <= spec_size);
 80157b8:	2000      	movs	r0, #0
    default:
      return false;
  }

  return true;
}
 80157ba:	bd30      	pop	{r4, r5, pc}
        if (is_host && max_packet_size == 512) {
 80157bc:	b142      	cbz	r2, 80157d0 <tu_edpt_validate+0x5c>
 80157be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80157c2:	d105      	bne.n	80157d0 <tu_edpt_validate+0x5c>
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 80157c4:	2340      	movs	r3, #64	@ 0x40
 80157c6:	7103      	strb	r3, [r0, #4]
 80157c8:	2300      	movs	r3, #0
 80157ca:	7143      	strb	r3, [r0, #5]
  return true;
 80157cc:	2001      	movs	r0, #1
 80157ce:	e7f4      	b.n	80157ba <tu_edpt_validate+0x46>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 80157d0:	2b20      	cmp	r3, #32
 80157d2:	d80a      	bhi.n	80157ea <tu_edpt_validate+0x76>
 80157d4:	f415 6fff 	tst.w	r5, #2040	@ 0x7f8
 80157d8:	d0e7      	beq.n	80157aa <tu_edpt_validate+0x36>
 80157da:	3b08      	subs	r3, #8
 80157dc:	4a06      	ldr	r2, [pc, #24]	@ (80157f8 <tu_edpt_validate+0x84>)
 80157de:	b29b      	uxth	r3, r3
 80157e0:	fa22 f303 	lsr.w	r3, r2, r3
 80157e4:	07db      	lsls	r3, r3, #31
 80157e6:	d4f1      	bmi.n	80157cc <tu_edpt_validate+0x58>
 80157e8:	e7df      	b.n	80157aa <tu_edpt_validate+0x36>
 80157ea:	2b40      	cmp	r3, #64	@ 0x40
 80157ec:	e7dc      	b.n	80157a8 <tu_edpt_validate+0x34>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80157ee:	2902      	cmp	r1, #2
 80157f0:	bf18      	it	ne
 80157f2:	2240      	movne	r2, #64	@ 0x40
 80157f4:	e7ce      	b.n	8015794 <tu_edpt_validate+0x20>
 80157f6:	bf00      	nop
 80157f8:	01000101 	.word	0x01000101

080157fc <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 80157fc:	440a      	add	r2, r1
                         uint8_t driver_id) {
 80157fe:	b530      	push	{r4, r5, lr}

  while (p_desc < desc_end) {
 8015800:	4291      	cmp	r1, r2
 8015802:	d300      	bcc.n	8015806 <tu_edpt_bind_driver+0xa>
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    }
    p_desc = tu_desc_next(p_desc);
  }
}
 8015804:	bd30      	pop	{r4, r5, pc}
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8015806:	784c      	ldrb	r4, [r1, #1]
 8015808:	2c05      	cmp	r4, #5
 801580a:	d106      	bne.n	801581a <tu_edpt_bind_driver+0x1e>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 801580c:	788c      	ldrb	r4, [r1, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 801580e:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 8015812:	09e4      	lsrs	r4, r4, #7
 8015814:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015818:	552b      	strb	r3, [r5, r4]
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 801581a:	780c      	ldrb	r4, [r1, #0]
 801581c:	4421      	add	r1, r4
 801581e:	e7ef      	b.n	8015800 <tu_edpt_bind_driver+0x4>

08015820 <malloc>:
 8015820:	4b02      	ldr	r3, [pc, #8]	@ (801582c <malloc+0xc>)
 8015822:	4601      	mov	r1, r0
 8015824:	6818      	ldr	r0, [r3, #0]
 8015826:	f000 b825 	b.w	8015874 <_malloc_r>
 801582a:	bf00      	nop
 801582c:	20002098 	.word	0x20002098

08015830 <sbrk_aligned>:
 8015830:	b570      	push	{r4, r5, r6, lr}
 8015832:	4e0f      	ldr	r6, [pc, #60]	@ (8015870 <sbrk_aligned+0x40>)
 8015834:	460c      	mov	r4, r1
 8015836:	6831      	ldr	r1, [r6, #0]
 8015838:	4605      	mov	r5, r0
 801583a:	b911      	cbnz	r1, 8015842 <sbrk_aligned+0x12>
 801583c:	f000 fb62 	bl	8015f04 <_sbrk_r>
 8015840:	6030      	str	r0, [r6, #0]
 8015842:	4621      	mov	r1, r4
 8015844:	4628      	mov	r0, r5
 8015846:	f000 fb5d 	bl	8015f04 <_sbrk_r>
 801584a:	1c43      	adds	r3, r0, #1
 801584c:	d103      	bne.n	8015856 <sbrk_aligned+0x26>
 801584e:	f04f 34ff 	mov.w	r4, #4294967295
 8015852:	4620      	mov	r0, r4
 8015854:	bd70      	pop	{r4, r5, r6, pc}
 8015856:	1cc4      	adds	r4, r0, #3
 8015858:	f024 0403 	bic.w	r4, r4, #3
 801585c:	42a0      	cmp	r0, r4
 801585e:	d0f8      	beq.n	8015852 <sbrk_aligned+0x22>
 8015860:	1a21      	subs	r1, r4, r0
 8015862:	4628      	mov	r0, r5
 8015864:	f000 fb4e 	bl	8015f04 <_sbrk_r>
 8015868:	3001      	adds	r0, #1
 801586a:	d1f2      	bne.n	8015852 <sbrk_aligned+0x22>
 801586c:	e7ef      	b.n	801584e <sbrk_aligned+0x1e>
 801586e:	bf00      	nop
 8015870:	2001174c 	.word	0x2001174c

08015874 <_malloc_r>:
 8015874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015878:	1ccd      	adds	r5, r1, #3
 801587a:	f025 0503 	bic.w	r5, r5, #3
 801587e:	3508      	adds	r5, #8
 8015880:	2d0c      	cmp	r5, #12
 8015882:	bf38      	it	cc
 8015884:	250c      	movcc	r5, #12
 8015886:	2d00      	cmp	r5, #0
 8015888:	4606      	mov	r6, r0
 801588a:	db01      	blt.n	8015890 <_malloc_r+0x1c>
 801588c:	42a9      	cmp	r1, r5
 801588e:	d904      	bls.n	801589a <_malloc_r+0x26>
 8015890:	230c      	movs	r3, #12
 8015892:	6033      	str	r3, [r6, #0]
 8015894:	2000      	movs	r0, #0
 8015896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801589a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015970 <_malloc_r+0xfc>
 801589e:	f000 f869 	bl	8015974 <__malloc_lock>
 80158a2:	f8d8 3000 	ldr.w	r3, [r8]
 80158a6:	461c      	mov	r4, r3
 80158a8:	bb44      	cbnz	r4, 80158fc <_malloc_r+0x88>
 80158aa:	4629      	mov	r1, r5
 80158ac:	4630      	mov	r0, r6
 80158ae:	f7ff ffbf 	bl	8015830 <sbrk_aligned>
 80158b2:	1c43      	adds	r3, r0, #1
 80158b4:	4604      	mov	r4, r0
 80158b6:	d158      	bne.n	801596a <_malloc_r+0xf6>
 80158b8:	f8d8 4000 	ldr.w	r4, [r8]
 80158bc:	4627      	mov	r7, r4
 80158be:	2f00      	cmp	r7, #0
 80158c0:	d143      	bne.n	801594a <_malloc_r+0xd6>
 80158c2:	2c00      	cmp	r4, #0
 80158c4:	d04b      	beq.n	801595e <_malloc_r+0xea>
 80158c6:	6823      	ldr	r3, [r4, #0]
 80158c8:	4639      	mov	r1, r7
 80158ca:	4630      	mov	r0, r6
 80158cc:	eb04 0903 	add.w	r9, r4, r3
 80158d0:	f000 fb18 	bl	8015f04 <_sbrk_r>
 80158d4:	4581      	cmp	r9, r0
 80158d6:	d142      	bne.n	801595e <_malloc_r+0xea>
 80158d8:	6821      	ldr	r1, [r4, #0]
 80158da:	1a6d      	subs	r5, r5, r1
 80158dc:	4629      	mov	r1, r5
 80158de:	4630      	mov	r0, r6
 80158e0:	f7ff ffa6 	bl	8015830 <sbrk_aligned>
 80158e4:	3001      	adds	r0, #1
 80158e6:	d03a      	beq.n	801595e <_malloc_r+0xea>
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	442b      	add	r3, r5
 80158ec:	6023      	str	r3, [r4, #0]
 80158ee:	f8d8 3000 	ldr.w	r3, [r8]
 80158f2:	685a      	ldr	r2, [r3, #4]
 80158f4:	bb62      	cbnz	r2, 8015950 <_malloc_r+0xdc>
 80158f6:	f8c8 7000 	str.w	r7, [r8]
 80158fa:	e00f      	b.n	801591c <_malloc_r+0xa8>
 80158fc:	6822      	ldr	r2, [r4, #0]
 80158fe:	1b52      	subs	r2, r2, r5
 8015900:	d420      	bmi.n	8015944 <_malloc_r+0xd0>
 8015902:	2a0b      	cmp	r2, #11
 8015904:	d917      	bls.n	8015936 <_malloc_r+0xc2>
 8015906:	1961      	adds	r1, r4, r5
 8015908:	42a3      	cmp	r3, r4
 801590a:	6025      	str	r5, [r4, #0]
 801590c:	bf18      	it	ne
 801590e:	6059      	strne	r1, [r3, #4]
 8015910:	6863      	ldr	r3, [r4, #4]
 8015912:	bf08      	it	eq
 8015914:	f8c8 1000 	streq.w	r1, [r8]
 8015918:	5162      	str	r2, [r4, r5]
 801591a:	604b      	str	r3, [r1, #4]
 801591c:	4630      	mov	r0, r6
 801591e:	f000 f82f 	bl	8015980 <__malloc_unlock>
 8015922:	f104 000b 	add.w	r0, r4, #11
 8015926:	1d23      	adds	r3, r4, #4
 8015928:	f020 0007 	bic.w	r0, r0, #7
 801592c:	1ac2      	subs	r2, r0, r3
 801592e:	bf1c      	itt	ne
 8015930:	1a1b      	subne	r3, r3, r0
 8015932:	50a3      	strne	r3, [r4, r2]
 8015934:	e7af      	b.n	8015896 <_malloc_r+0x22>
 8015936:	6862      	ldr	r2, [r4, #4]
 8015938:	42a3      	cmp	r3, r4
 801593a:	bf0c      	ite	eq
 801593c:	f8c8 2000 	streq.w	r2, [r8]
 8015940:	605a      	strne	r2, [r3, #4]
 8015942:	e7eb      	b.n	801591c <_malloc_r+0xa8>
 8015944:	4623      	mov	r3, r4
 8015946:	6864      	ldr	r4, [r4, #4]
 8015948:	e7ae      	b.n	80158a8 <_malloc_r+0x34>
 801594a:	463c      	mov	r4, r7
 801594c:	687f      	ldr	r7, [r7, #4]
 801594e:	e7b6      	b.n	80158be <_malloc_r+0x4a>
 8015950:	461a      	mov	r2, r3
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	42a3      	cmp	r3, r4
 8015956:	d1fb      	bne.n	8015950 <_malloc_r+0xdc>
 8015958:	2300      	movs	r3, #0
 801595a:	6053      	str	r3, [r2, #4]
 801595c:	e7de      	b.n	801591c <_malloc_r+0xa8>
 801595e:	230c      	movs	r3, #12
 8015960:	6033      	str	r3, [r6, #0]
 8015962:	4630      	mov	r0, r6
 8015964:	f000 f80c 	bl	8015980 <__malloc_unlock>
 8015968:	e794      	b.n	8015894 <_malloc_r+0x20>
 801596a:	6005      	str	r5, [r0, #0]
 801596c:	e7d6      	b.n	801591c <_malloc_r+0xa8>
 801596e:	bf00      	nop
 8015970:	20011750 	.word	0x20011750

08015974 <__malloc_lock>:
 8015974:	4801      	ldr	r0, [pc, #4]	@ (801597c <__malloc_lock+0x8>)
 8015976:	f000 bb12 	b.w	8015f9e <__retarget_lock_acquire_recursive>
 801597a:	bf00      	nop
 801597c:	20011894 	.word	0x20011894

08015980 <__malloc_unlock>:
 8015980:	4801      	ldr	r0, [pc, #4]	@ (8015988 <__malloc_unlock+0x8>)
 8015982:	f000 bb0d 	b.w	8015fa0 <__retarget_lock_release_recursive>
 8015986:	bf00      	nop
 8015988:	20011894 	.word	0x20011894

0801598c <rand>:
 801598c:	4b16      	ldr	r3, [pc, #88]	@ (80159e8 <rand+0x5c>)
 801598e:	b510      	push	{r4, lr}
 8015990:	681c      	ldr	r4, [r3, #0]
 8015992:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015994:	b9b3      	cbnz	r3, 80159c4 <rand+0x38>
 8015996:	2018      	movs	r0, #24
 8015998:	f7ff ff42 	bl	8015820 <malloc>
 801599c:	4602      	mov	r2, r0
 801599e:	6320      	str	r0, [r4, #48]	@ 0x30
 80159a0:	b920      	cbnz	r0, 80159ac <rand+0x20>
 80159a2:	4b12      	ldr	r3, [pc, #72]	@ (80159ec <rand+0x60>)
 80159a4:	4812      	ldr	r0, [pc, #72]	@ (80159f0 <rand+0x64>)
 80159a6:	2152      	movs	r1, #82	@ 0x52
 80159a8:	f000 fb0a 	bl	8015fc0 <__assert_func>
 80159ac:	4911      	ldr	r1, [pc, #68]	@ (80159f4 <rand+0x68>)
 80159ae:	4b12      	ldr	r3, [pc, #72]	@ (80159f8 <rand+0x6c>)
 80159b0:	e9c0 1300 	strd	r1, r3, [r0]
 80159b4:	4b11      	ldr	r3, [pc, #68]	@ (80159fc <rand+0x70>)
 80159b6:	6083      	str	r3, [r0, #8]
 80159b8:	230b      	movs	r3, #11
 80159ba:	8183      	strh	r3, [r0, #12]
 80159bc:	2100      	movs	r1, #0
 80159be:	2001      	movs	r0, #1
 80159c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80159c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80159c6:	480e      	ldr	r0, [pc, #56]	@ (8015a00 <rand+0x74>)
 80159c8:	690b      	ldr	r3, [r1, #16]
 80159ca:	694c      	ldr	r4, [r1, #20]
 80159cc:	4a0d      	ldr	r2, [pc, #52]	@ (8015a04 <rand+0x78>)
 80159ce:	4358      	muls	r0, r3
 80159d0:	fb02 0004 	mla	r0, r2, r4, r0
 80159d4:	fba3 3202 	umull	r3, r2, r3, r2
 80159d8:	3301      	adds	r3, #1
 80159da:	eb40 0002 	adc.w	r0, r0, r2
 80159de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80159e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80159e6:	bd10      	pop	{r4, pc}
 80159e8:	20002098 	.word	0x20002098
 80159ec:	08018e9b 	.word	0x08018e9b
 80159f0:	08018eb2 	.word	0x08018eb2
 80159f4:	abcd330e 	.word	0xabcd330e
 80159f8:	e66d1234 	.word	0xe66d1234
 80159fc:	0005deec 	.word	0x0005deec
 8015a00:	5851f42d 	.word	0x5851f42d
 8015a04:	4c957f2d 	.word	0x4c957f2d

08015a08 <std>:
 8015a08:	2300      	movs	r3, #0
 8015a0a:	b510      	push	{r4, lr}
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8015a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a16:	6083      	str	r3, [r0, #8]
 8015a18:	8181      	strh	r1, [r0, #12]
 8015a1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8015a1c:	81c2      	strh	r2, [r0, #14]
 8015a1e:	6183      	str	r3, [r0, #24]
 8015a20:	4619      	mov	r1, r3
 8015a22:	2208      	movs	r2, #8
 8015a24:	305c      	adds	r0, #92	@ 0x5c
 8015a26:	f000 fa23 	bl	8015e70 <memset>
 8015a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8015a60 <std+0x58>)
 8015a2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8015a64 <std+0x5c>)
 8015a30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015a32:	4b0d      	ldr	r3, [pc, #52]	@ (8015a68 <std+0x60>)
 8015a34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015a36:	4b0d      	ldr	r3, [pc, #52]	@ (8015a6c <std+0x64>)
 8015a38:	6323      	str	r3, [r4, #48]	@ 0x30
 8015a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8015a70 <std+0x68>)
 8015a3c:	6224      	str	r4, [r4, #32]
 8015a3e:	429c      	cmp	r4, r3
 8015a40:	d006      	beq.n	8015a50 <std+0x48>
 8015a42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015a46:	4294      	cmp	r4, r2
 8015a48:	d002      	beq.n	8015a50 <std+0x48>
 8015a4a:	33d0      	adds	r3, #208	@ 0xd0
 8015a4c:	429c      	cmp	r4, r3
 8015a4e:	d105      	bne.n	8015a5c <std+0x54>
 8015a50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a58:	f000 baa0 	b.w	8015f9c <__retarget_lock_init_recursive>
 8015a5c:	bd10      	pop	{r4, pc}
 8015a5e:	bf00      	nop
 8015a60:	08015c6d 	.word	0x08015c6d
 8015a64:	08015c8f 	.word	0x08015c8f
 8015a68:	08015cc7 	.word	0x08015cc7
 8015a6c:	08015ceb 	.word	0x08015ceb
 8015a70:	20011754 	.word	0x20011754

08015a74 <stdio_exit_handler>:
 8015a74:	4a02      	ldr	r2, [pc, #8]	@ (8015a80 <stdio_exit_handler+0xc>)
 8015a76:	4903      	ldr	r1, [pc, #12]	@ (8015a84 <stdio_exit_handler+0x10>)
 8015a78:	4803      	ldr	r0, [pc, #12]	@ (8015a88 <stdio_exit_handler+0x14>)
 8015a7a:	f000 b869 	b.w	8015b50 <_fwalk_sglue>
 8015a7e:	bf00      	nop
 8015a80:	2000208c 	.word	0x2000208c
 8015a84:	08016735 	.word	0x08016735
 8015a88:	2000209c 	.word	0x2000209c

08015a8c <cleanup_stdio>:
 8015a8c:	6841      	ldr	r1, [r0, #4]
 8015a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8015ac0 <cleanup_stdio+0x34>)
 8015a90:	4299      	cmp	r1, r3
 8015a92:	b510      	push	{r4, lr}
 8015a94:	4604      	mov	r4, r0
 8015a96:	d001      	beq.n	8015a9c <cleanup_stdio+0x10>
 8015a98:	f000 fe4c 	bl	8016734 <_fflush_r>
 8015a9c:	68a1      	ldr	r1, [r4, #8]
 8015a9e:	4b09      	ldr	r3, [pc, #36]	@ (8015ac4 <cleanup_stdio+0x38>)
 8015aa0:	4299      	cmp	r1, r3
 8015aa2:	d002      	beq.n	8015aaa <cleanup_stdio+0x1e>
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	f000 fe45 	bl	8016734 <_fflush_r>
 8015aaa:	68e1      	ldr	r1, [r4, #12]
 8015aac:	4b06      	ldr	r3, [pc, #24]	@ (8015ac8 <cleanup_stdio+0x3c>)
 8015aae:	4299      	cmp	r1, r3
 8015ab0:	d004      	beq.n	8015abc <cleanup_stdio+0x30>
 8015ab2:	4620      	mov	r0, r4
 8015ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ab8:	f000 be3c 	b.w	8016734 <_fflush_r>
 8015abc:	bd10      	pop	{r4, pc}
 8015abe:	bf00      	nop
 8015ac0:	20011754 	.word	0x20011754
 8015ac4:	200117bc 	.word	0x200117bc
 8015ac8:	20011824 	.word	0x20011824

08015acc <global_stdio_init.part.0>:
 8015acc:	b510      	push	{r4, lr}
 8015ace:	4b0b      	ldr	r3, [pc, #44]	@ (8015afc <global_stdio_init.part.0+0x30>)
 8015ad0:	4c0b      	ldr	r4, [pc, #44]	@ (8015b00 <global_stdio_init.part.0+0x34>)
 8015ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8015b04 <global_stdio_init.part.0+0x38>)
 8015ad4:	601a      	str	r2, [r3, #0]
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	2200      	movs	r2, #0
 8015ada:	2104      	movs	r1, #4
 8015adc:	f7ff ff94 	bl	8015a08 <std>
 8015ae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015ae4:	2201      	movs	r2, #1
 8015ae6:	2109      	movs	r1, #9
 8015ae8:	f7ff ff8e 	bl	8015a08 <std>
 8015aec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015af0:	2202      	movs	r2, #2
 8015af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015af6:	2112      	movs	r1, #18
 8015af8:	f7ff bf86 	b.w	8015a08 <std>
 8015afc:	2001188c 	.word	0x2001188c
 8015b00:	20011754 	.word	0x20011754
 8015b04:	08015a75 	.word	0x08015a75

08015b08 <__sfp_lock_acquire>:
 8015b08:	4801      	ldr	r0, [pc, #4]	@ (8015b10 <__sfp_lock_acquire+0x8>)
 8015b0a:	f000 ba48 	b.w	8015f9e <__retarget_lock_acquire_recursive>
 8015b0e:	bf00      	nop
 8015b10:	20011895 	.word	0x20011895

08015b14 <__sfp_lock_release>:
 8015b14:	4801      	ldr	r0, [pc, #4]	@ (8015b1c <__sfp_lock_release+0x8>)
 8015b16:	f000 ba43 	b.w	8015fa0 <__retarget_lock_release_recursive>
 8015b1a:	bf00      	nop
 8015b1c:	20011895 	.word	0x20011895

08015b20 <__sinit>:
 8015b20:	b510      	push	{r4, lr}
 8015b22:	4604      	mov	r4, r0
 8015b24:	f7ff fff0 	bl	8015b08 <__sfp_lock_acquire>
 8015b28:	6a23      	ldr	r3, [r4, #32]
 8015b2a:	b11b      	cbz	r3, 8015b34 <__sinit+0x14>
 8015b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b30:	f7ff bff0 	b.w	8015b14 <__sfp_lock_release>
 8015b34:	4b04      	ldr	r3, [pc, #16]	@ (8015b48 <__sinit+0x28>)
 8015b36:	6223      	str	r3, [r4, #32]
 8015b38:	4b04      	ldr	r3, [pc, #16]	@ (8015b4c <__sinit+0x2c>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d1f5      	bne.n	8015b2c <__sinit+0xc>
 8015b40:	f7ff ffc4 	bl	8015acc <global_stdio_init.part.0>
 8015b44:	e7f2      	b.n	8015b2c <__sinit+0xc>
 8015b46:	bf00      	nop
 8015b48:	08015a8d 	.word	0x08015a8d
 8015b4c:	2001188c 	.word	0x2001188c

08015b50 <_fwalk_sglue>:
 8015b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b54:	4607      	mov	r7, r0
 8015b56:	4688      	mov	r8, r1
 8015b58:	4614      	mov	r4, r2
 8015b5a:	2600      	movs	r6, #0
 8015b5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b60:	f1b9 0901 	subs.w	r9, r9, #1
 8015b64:	d505      	bpl.n	8015b72 <_fwalk_sglue+0x22>
 8015b66:	6824      	ldr	r4, [r4, #0]
 8015b68:	2c00      	cmp	r4, #0
 8015b6a:	d1f7      	bne.n	8015b5c <_fwalk_sglue+0xc>
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b72:	89ab      	ldrh	r3, [r5, #12]
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d907      	bls.n	8015b88 <_fwalk_sglue+0x38>
 8015b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b7c:	3301      	adds	r3, #1
 8015b7e:	d003      	beq.n	8015b88 <_fwalk_sglue+0x38>
 8015b80:	4629      	mov	r1, r5
 8015b82:	4638      	mov	r0, r7
 8015b84:	47c0      	blx	r8
 8015b86:	4306      	orrs	r6, r0
 8015b88:	3568      	adds	r5, #104	@ 0x68
 8015b8a:	e7e9      	b.n	8015b60 <_fwalk_sglue+0x10>

08015b8c <iprintf>:
 8015b8c:	b40f      	push	{r0, r1, r2, r3}
 8015b8e:	b507      	push	{r0, r1, r2, lr}
 8015b90:	4906      	ldr	r1, [pc, #24]	@ (8015bac <iprintf+0x20>)
 8015b92:	ab04      	add	r3, sp, #16
 8015b94:	6808      	ldr	r0, [r1, #0]
 8015b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b9a:	6881      	ldr	r1, [r0, #8]
 8015b9c:	9301      	str	r3, [sp, #4]
 8015b9e:	f000 faa1 	bl	80160e4 <_vfiprintf_r>
 8015ba2:	b003      	add	sp, #12
 8015ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ba8:	b004      	add	sp, #16
 8015baa:	4770      	bx	lr
 8015bac:	20002098 	.word	0x20002098

08015bb0 <_puts_r>:
 8015bb0:	6a03      	ldr	r3, [r0, #32]
 8015bb2:	b570      	push	{r4, r5, r6, lr}
 8015bb4:	6884      	ldr	r4, [r0, #8]
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	460e      	mov	r6, r1
 8015bba:	b90b      	cbnz	r3, 8015bc0 <_puts_r+0x10>
 8015bbc:	f7ff ffb0 	bl	8015b20 <__sinit>
 8015bc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015bc2:	07db      	lsls	r3, r3, #31
 8015bc4:	d405      	bmi.n	8015bd2 <_puts_r+0x22>
 8015bc6:	89a3      	ldrh	r3, [r4, #12]
 8015bc8:	0598      	lsls	r0, r3, #22
 8015bca:	d402      	bmi.n	8015bd2 <_puts_r+0x22>
 8015bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bce:	f000 f9e6 	bl	8015f9e <__retarget_lock_acquire_recursive>
 8015bd2:	89a3      	ldrh	r3, [r4, #12]
 8015bd4:	0719      	lsls	r1, r3, #28
 8015bd6:	d502      	bpl.n	8015bde <_puts_r+0x2e>
 8015bd8:	6923      	ldr	r3, [r4, #16]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d135      	bne.n	8015c4a <_puts_r+0x9a>
 8015bde:	4621      	mov	r1, r4
 8015be0:	4628      	mov	r0, r5
 8015be2:	f000 f8c5 	bl	8015d70 <__swsetup_r>
 8015be6:	b380      	cbz	r0, 8015c4a <_puts_r+0x9a>
 8015be8:	f04f 35ff 	mov.w	r5, #4294967295
 8015bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015bee:	07da      	lsls	r2, r3, #31
 8015bf0:	d405      	bmi.n	8015bfe <_puts_r+0x4e>
 8015bf2:	89a3      	ldrh	r3, [r4, #12]
 8015bf4:	059b      	lsls	r3, r3, #22
 8015bf6:	d402      	bmi.n	8015bfe <_puts_r+0x4e>
 8015bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bfa:	f000 f9d1 	bl	8015fa0 <__retarget_lock_release_recursive>
 8015bfe:	4628      	mov	r0, r5
 8015c00:	bd70      	pop	{r4, r5, r6, pc}
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	da04      	bge.n	8015c10 <_puts_r+0x60>
 8015c06:	69a2      	ldr	r2, [r4, #24]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	dc17      	bgt.n	8015c3c <_puts_r+0x8c>
 8015c0c:	290a      	cmp	r1, #10
 8015c0e:	d015      	beq.n	8015c3c <_puts_r+0x8c>
 8015c10:	6823      	ldr	r3, [r4, #0]
 8015c12:	1c5a      	adds	r2, r3, #1
 8015c14:	6022      	str	r2, [r4, #0]
 8015c16:	7019      	strb	r1, [r3, #0]
 8015c18:	68a3      	ldr	r3, [r4, #8]
 8015c1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015c1e:	3b01      	subs	r3, #1
 8015c20:	60a3      	str	r3, [r4, #8]
 8015c22:	2900      	cmp	r1, #0
 8015c24:	d1ed      	bne.n	8015c02 <_puts_r+0x52>
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	da11      	bge.n	8015c4e <_puts_r+0x9e>
 8015c2a:	4622      	mov	r2, r4
 8015c2c:	210a      	movs	r1, #10
 8015c2e:	4628      	mov	r0, r5
 8015c30:	f000 f85f 	bl	8015cf2 <__swbuf_r>
 8015c34:	3001      	adds	r0, #1
 8015c36:	d0d7      	beq.n	8015be8 <_puts_r+0x38>
 8015c38:	250a      	movs	r5, #10
 8015c3a:	e7d7      	b.n	8015bec <_puts_r+0x3c>
 8015c3c:	4622      	mov	r2, r4
 8015c3e:	4628      	mov	r0, r5
 8015c40:	f000 f857 	bl	8015cf2 <__swbuf_r>
 8015c44:	3001      	adds	r0, #1
 8015c46:	d1e7      	bne.n	8015c18 <_puts_r+0x68>
 8015c48:	e7ce      	b.n	8015be8 <_puts_r+0x38>
 8015c4a:	3e01      	subs	r6, #1
 8015c4c:	e7e4      	b.n	8015c18 <_puts_r+0x68>
 8015c4e:	6823      	ldr	r3, [r4, #0]
 8015c50:	1c5a      	adds	r2, r3, #1
 8015c52:	6022      	str	r2, [r4, #0]
 8015c54:	220a      	movs	r2, #10
 8015c56:	701a      	strb	r2, [r3, #0]
 8015c58:	e7ee      	b.n	8015c38 <_puts_r+0x88>
	...

08015c5c <puts>:
 8015c5c:	4b02      	ldr	r3, [pc, #8]	@ (8015c68 <puts+0xc>)
 8015c5e:	4601      	mov	r1, r0
 8015c60:	6818      	ldr	r0, [r3, #0]
 8015c62:	f7ff bfa5 	b.w	8015bb0 <_puts_r>
 8015c66:	bf00      	nop
 8015c68:	20002098 	.word	0x20002098

08015c6c <__sread>:
 8015c6c:	b510      	push	{r4, lr}
 8015c6e:	460c      	mov	r4, r1
 8015c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c74:	f000 f934 	bl	8015ee0 <_read_r>
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	bfab      	itete	ge
 8015c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8015c80:	181b      	addge	r3, r3, r0
 8015c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015c86:	bfac      	ite	ge
 8015c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015c8a:	81a3      	strhlt	r3, [r4, #12]
 8015c8c:	bd10      	pop	{r4, pc}

08015c8e <__swrite>:
 8015c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c92:	461f      	mov	r7, r3
 8015c94:	898b      	ldrh	r3, [r1, #12]
 8015c96:	05db      	lsls	r3, r3, #23
 8015c98:	4605      	mov	r5, r0
 8015c9a:	460c      	mov	r4, r1
 8015c9c:	4616      	mov	r6, r2
 8015c9e:	d505      	bpl.n	8015cac <__swrite+0x1e>
 8015ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ca4:	2302      	movs	r3, #2
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	f000 f908 	bl	8015ebc <_lseek_r>
 8015cac:	89a3      	ldrh	r3, [r4, #12]
 8015cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015cb6:	81a3      	strh	r3, [r4, #12]
 8015cb8:	4632      	mov	r2, r6
 8015cba:	463b      	mov	r3, r7
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc2:	f000 b92f 	b.w	8015f24 <_write_r>

08015cc6 <__sseek>:
 8015cc6:	b510      	push	{r4, lr}
 8015cc8:	460c      	mov	r4, r1
 8015cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cce:	f000 f8f5 	bl	8015ebc <_lseek_r>
 8015cd2:	1c43      	adds	r3, r0, #1
 8015cd4:	89a3      	ldrh	r3, [r4, #12]
 8015cd6:	bf15      	itete	ne
 8015cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015ce2:	81a3      	strheq	r3, [r4, #12]
 8015ce4:	bf18      	it	ne
 8015ce6:	81a3      	strhne	r3, [r4, #12]
 8015ce8:	bd10      	pop	{r4, pc}

08015cea <__sclose>:
 8015cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cee:	f000 b8d5 	b.w	8015e9c <_close_r>

08015cf2 <__swbuf_r>:
 8015cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cf4:	460e      	mov	r6, r1
 8015cf6:	4614      	mov	r4, r2
 8015cf8:	4605      	mov	r5, r0
 8015cfa:	b118      	cbz	r0, 8015d04 <__swbuf_r+0x12>
 8015cfc:	6a03      	ldr	r3, [r0, #32]
 8015cfe:	b90b      	cbnz	r3, 8015d04 <__swbuf_r+0x12>
 8015d00:	f7ff ff0e 	bl	8015b20 <__sinit>
 8015d04:	69a3      	ldr	r3, [r4, #24]
 8015d06:	60a3      	str	r3, [r4, #8]
 8015d08:	89a3      	ldrh	r3, [r4, #12]
 8015d0a:	071a      	lsls	r2, r3, #28
 8015d0c:	d501      	bpl.n	8015d12 <__swbuf_r+0x20>
 8015d0e:	6923      	ldr	r3, [r4, #16]
 8015d10:	b943      	cbnz	r3, 8015d24 <__swbuf_r+0x32>
 8015d12:	4621      	mov	r1, r4
 8015d14:	4628      	mov	r0, r5
 8015d16:	f000 f82b 	bl	8015d70 <__swsetup_r>
 8015d1a:	b118      	cbz	r0, 8015d24 <__swbuf_r+0x32>
 8015d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8015d20:	4638      	mov	r0, r7
 8015d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d24:	6823      	ldr	r3, [r4, #0]
 8015d26:	6922      	ldr	r2, [r4, #16]
 8015d28:	1a98      	subs	r0, r3, r2
 8015d2a:	6963      	ldr	r3, [r4, #20]
 8015d2c:	b2f6      	uxtb	r6, r6
 8015d2e:	4283      	cmp	r3, r0
 8015d30:	4637      	mov	r7, r6
 8015d32:	dc05      	bgt.n	8015d40 <__swbuf_r+0x4e>
 8015d34:	4621      	mov	r1, r4
 8015d36:	4628      	mov	r0, r5
 8015d38:	f000 fcfc 	bl	8016734 <_fflush_r>
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	d1ed      	bne.n	8015d1c <__swbuf_r+0x2a>
 8015d40:	68a3      	ldr	r3, [r4, #8]
 8015d42:	3b01      	subs	r3, #1
 8015d44:	60a3      	str	r3, [r4, #8]
 8015d46:	6823      	ldr	r3, [r4, #0]
 8015d48:	1c5a      	adds	r2, r3, #1
 8015d4a:	6022      	str	r2, [r4, #0]
 8015d4c:	701e      	strb	r6, [r3, #0]
 8015d4e:	6962      	ldr	r2, [r4, #20]
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d004      	beq.n	8015d60 <__swbuf_r+0x6e>
 8015d56:	89a3      	ldrh	r3, [r4, #12]
 8015d58:	07db      	lsls	r3, r3, #31
 8015d5a:	d5e1      	bpl.n	8015d20 <__swbuf_r+0x2e>
 8015d5c:	2e0a      	cmp	r6, #10
 8015d5e:	d1df      	bne.n	8015d20 <__swbuf_r+0x2e>
 8015d60:	4621      	mov	r1, r4
 8015d62:	4628      	mov	r0, r5
 8015d64:	f000 fce6 	bl	8016734 <_fflush_r>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d0d9      	beq.n	8015d20 <__swbuf_r+0x2e>
 8015d6c:	e7d6      	b.n	8015d1c <__swbuf_r+0x2a>
	...

08015d70 <__swsetup_r>:
 8015d70:	b538      	push	{r3, r4, r5, lr}
 8015d72:	4b29      	ldr	r3, [pc, #164]	@ (8015e18 <__swsetup_r+0xa8>)
 8015d74:	4605      	mov	r5, r0
 8015d76:	6818      	ldr	r0, [r3, #0]
 8015d78:	460c      	mov	r4, r1
 8015d7a:	b118      	cbz	r0, 8015d84 <__swsetup_r+0x14>
 8015d7c:	6a03      	ldr	r3, [r0, #32]
 8015d7e:	b90b      	cbnz	r3, 8015d84 <__swsetup_r+0x14>
 8015d80:	f7ff fece 	bl	8015b20 <__sinit>
 8015d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d88:	0719      	lsls	r1, r3, #28
 8015d8a:	d422      	bmi.n	8015dd2 <__swsetup_r+0x62>
 8015d8c:	06da      	lsls	r2, r3, #27
 8015d8e:	d407      	bmi.n	8015da0 <__swsetup_r+0x30>
 8015d90:	2209      	movs	r2, #9
 8015d92:	602a      	str	r2, [r5, #0]
 8015d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d98:	81a3      	strh	r3, [r4, #12]
 8015d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8015d9e:	e033      	b.n	8015e08 <__swsetup_r+0x98>
 8015da0:	0758      	lsls	r0, r3, #29
 8015da2:	d512      	bpl.n	8015dca <__swsetup_r+0x5a>
 8015da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015da6:	b141      	cbz	r1, 8015dba <__swsetup_r+0x4a>
 8015da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015dac:	4299      	cmp	r1, r3
 8015dae:	d002      	beq.n	8015db6 <__swsetup_r+0x46>
 8015db0:	4628      	mov	r0, r5
 8015db2:	f000 f923 	bl	8015ffc <_free_r>
 8015db6:	2300      	movs	r3, #0
 8015db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8015dba:	89a3      	ldrh	r3, [r4, #12]
 8015dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015dc0:	81a3      	strh	r3, [r4, #12]
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	6063      	str	r3, [r4, #4]
 8015dc6:	6923      	ldr	r3, [r4, #16]
 8015dc8:	6023      	str	r3, [r4, #0]
 8015dca:	89a3      	ldrh	r3, [r4, #12]
 8015dcc:	f043 0308 	orr.w	r3, r3, #8
 8015dd0:	81a3      	strh	r3, [r4, #12]
 8015dd2:	6923      	ldr	r3, [r4, #16]
 8015dd4:	b94b      	cbnz	r3, 8015dea <__swsetup_r+0x7a>
 8015dd6:	89a3      	ldrh	r3, [r4, #12]
 8015dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015de0:	d003      	beq.n	8015dea <__swsetup_r+0x7a>
 8015de2:	4621      	mov	r1, r4
 8015de4:	4628      	mov	r0, r5
 8015de6:	f000 fd05 	bl	80167f4 <__smakebuf_r>
 8015dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dee:	f013 0201 	ands.w	r2, r3, #1
 8015df2:	d00a      	beq.n	8015e0a <__swsetup_r+0x9a>
 8015df4:	2200      	movs	r2, #0
 8015df6:	60a2      	str	r2, [r4, #8]
 8015df8:	6962      	ldr	r2, [r4, #20]
 8015dfa:	4252      	negs	r2, r2
 8015dfc:	61a2      	str	r2, [r4, #24]
 8015dfe:	6922      	ldr	r2, [r4, #16]
 8015e00:	b942      	cbnz	r2, 8015e14 <__swsetup_r+0xa4>
 8015e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015e06:	d1c5      	bne.n	8015d94 <__swsetup_r+0x24>
 8015e08:	bd38      	pop	{r3, r4, r5, pc}
 8015e0a:	0799      	lsls	r1, r3, #30
 8015e0c:	bf58      	it	pl
 8015e0e:	6962      	ldrpl	r2, [r4, #20]
 8015e10:	60a2      	str	r2, [r4, #8]
 8015e12:	e7f4      	b.n	8015dfe <__swsetup_r+0x8e>
 8015e14:	2000      	movs	r0, #0
 8015e16:	e7f7      	b.n	8015e08 <__swsetup_r+0x98>
 8015e18:	20002098 	.word	0x20002098

08015e1c <memcmp>:
 8015e1c:	b510      	push	{r4, lr}
 8015e1e:	3901      	subs	r1, #1
 8015e20:	4402      	add	r2, r0
 8015e22:	4290      	cmp	r0, r2
 8015e24:	d101      	bne.n	8015e2a <memcmp+0xe>
 8015e26:	2000      	movs	r0, #0
 8015e28:	e005      	b.n	8015e36 <memcmp+0x1a>
 8015e2a:	7803      	ldrb	r3, [r0, #0]
 8015e2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015e30:	42a3      	cmp	r3, r4
 8015e32:	d001      	beq.n	8015e38 <memcmp+0x1c>
 8015e34:	1b18      	subs	r0, r3, r4
 8015e36:	bd10      	pop	{r4, pc}
 8015e38:	3001      	adds	r0, #1
 8015e3a:	e7f2      	b.n	8015e22 <memcmp+0x6>

08015e3c <memmove>:
 8015e3c:	4288      	cmp	r0, r1
 8015e3e:	b510      	push	{r4, lr}
 8015e40:	eb01 0402 	add.w	r4, r1, r2
 8015e44:	d902      	bls.n	8015e4c <memmove+0x10>
 8015e46:	4284      	cmp	r4, r0
 8015e48:	4623      	mov	r3, r4
 8015e4a:	d807      	bhi.n	8015e5c <memmove+0x20>
 8015e4c:	1e43      	subs	r3, r0, #1
 8015e4e:	42a1      	cmp	r1, r4
 8015e50:	d008      	beq.n	8015e64 <memmove+0x28>
 8015e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e5a:	e7f8      	b.n	8015e4e <memmove+0x12>
 8015e5c:	4402      	add	r2, r0
 8015e5e:	4601      	mov	r1, r0
 8015e60:	428a      	cmp	r2, r1
 8015e62:	d100      	bne.n	8015e66 <memmove+0x2a>
 8015e64:	bd10      	pop	{r4, pc}
 8015e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e6e:	e7f7      	b.n	8015e60 <memmove+0x24>

08015e70 <memset>:
 8015e70:	4402      	add	r2, r0
 8015e72:	4603      	mov	r3, r0
 8015e74:	4293      	cmp	r3, r2
 8015e76:	d100      	bne.n	8015e7a <memset+0xa>
 8015e78:	4770      	bx	lr
 8015e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8015e7e:	e7f9      	b.n	8015e74 <memset+0x4>

08015e80 <strchr>:
 8015e80:	b2c9      	uxtb	r1, r1
 8015e82:	4603      	mov	r3, r0
 8015e84:	4618      	mov	r0, r3
 8015e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e8a:	b112      	cbz	r2, 8015e92 <strchr+0x12>
 8015e8c:	428a      	cmp	r2, r1
 8015e8e:	d1f9      	bne.n	8015e84 <strchr+0x4>
 8015e90:	4770      	bx	lr
 8015e92:	2900      	cmp	r1, #0
 8015e94:	bf18      	it	ne
 8015e96:	2000      	movne	r0, #0
 8015e98:	4770      	bx	lr
	...

08015e9c <_close_r>:
 8015e9c:	b538      	push	{r3, r4, r5, lr}
 8015e9e:	4d06      	ldr	r5, [pc, #24]	@ (8015eb8 <_close_r+0x1c>)
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	4608      	mov	r0, r1
 8015ea6:	602b      	str	r3, [r5, #0]
 8015ea8:	f7eb ff1c 	bl	8001ce4 <_close>
 8015eac:	1c43      	adds	r3, r0, #1
 8015eae:	d102      	bne.n	8015eb6 <_close_r+0x1a>
 8015eb0:	682b      	ldr	r3, [r5, #0]
 8015eb2:	b103      	cbz	r3, 8015eb6 <_close_r+0x1a>
 8015eb4:	6023      	str	r3, [r4, #0]
 8015eb6:	bd38      	pop	{r3, r4, r5, pc}
 8015eb8:	20011890 	.word	0x20011890

08015ebc <_lseek_r>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	4d07      	ldr	r5, [pc, #28]	@ (8015edc <_lseek_r+0x20>)
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	4608      	mov	r0, r1
 8015ec4:	4611      	mov	r1, r2
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	602a      	str	r2, [r5, #0]
 8015eca:	461a      	mov	r2, r3
 8015ecc:	f7eb ff14 	bl	8001cf8 <_lseek>
 8015ed0:	1c43      	adds	r3, r0, #1
 8015ed2:	d102      	bne.n	8015eda <_lseek_r+0x1e>
 8015ed4:	682b      	ldr	r3, [r5, #0]
 8015ed6:	b103      	cbz	r3, 8015eda <_lseek_r+0x1e>
 8015ed8:	6023      	str	r3, [r4, #0]
 8015eda:	bd38      	pop	{r3, r4, r5, pc}
 8015edc:	20011890 	.word	0x20011890

08015ee0 <_read_r>:
 8015ee0:	b538      	push	{r3, r4, r5, lr}
 8015ee2:	4d07      	ldr	r5, [pc, #28]	@ (8015f00 <_read_r+0x20>)
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	4608      	mov	r0, r1
 8015ee8:	4611      	mov	r1, r2
 8015eea:	2200      	movs	r2, #0
 8015eec:	602a      	str	r2, [r5, #0]
 8015eee:	461a      	mov	r2, r3
 8015ef0:	f7fc fab4 	bl	801245c <_read>
 8015ef4:	1c43      	adds	r3, r0, #1
 8015ef6:	d102      	bne.n	8015efe <_read_r+0x1e>
 8015ef8:	682b      	ldr	r3, [r5, #0]
 8015efa:	b103      	cbz	r3, 8015efe <_read_r+0x1e>
 8015efc:	6023      	str	r3, [r4, #0]
 8015efe:	bd38      	pop	{r3, r4, r5, pc}
 8015f00:	20011890 	.word	0x20011890

08015f04 <_sbrk_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4d06      	ldr	r5, [pc, #24]	@ (8015f20 <_sbrk_r+0x1c>)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	4608      	mov	r0, r1
 8015f0e:	602b      	str	r3, [r5, #0]
 8015f10:	f7eb fef4 	bl	8001cfc <_sbrk>
 8015f14:	1c43      	adds	r3, r0, #1
 8015f16:	d102      	bne.n	8015f1e <_sbrk_r+0x1a>
 8015f18:	682b      	ldr	r3, [r5, #0]
 8015f1a:	b103      	cbz	r3, 8015f1e <_sbrk_r+0x1a>
 8015f1c:	6023      	str	r3, [r4, #0]
 8015f1e:	bd38      	pop	{r3, r4, r5, pc}
 8015f20:	20011890 	.word	0x20011890

08015f24 <_write_r>:
 8015f24:	b538      	push	{r3, r4, r5, lr}
 8015f26:	4d07      	ldr	r5, [pc, #28]	@ (8015f44 <_write_r+0x20>)
 8015f28:	4604      	mov	r4, r0
 8015f2a:	4608      	mov	r0, r1
 8015f2c:	4611      	mov	r1, r2
 8015f2e:	2200      	movs	r2, #0
 8015f30:	602a      	str	r2, [r5, #0]
 8015f32:	461a      	mov	r2, r3
 8015f34:	f7ea fda8 	bl	8000a88 <_write>
 8015f38:	1c43      	adds	r3, r0, #1
 8015f3a:	d102      	bne.n	8015f42 <_write_r+0x1e>
 8015f3c:	682b      	ldr	r3, [r5, #0]
 8015f3e:	b103      	cbz	r3, 8015f42 <_write_r+0x1e>
 8015f40:	6023      	str	r3, [r4, #0]
 8015f42:	bd38      	pop	{r3, r4, r5, pc}
 8015f44:	20011890 	.word	0x20011890

08015f48 <__errno>:
 8015f48:	4b01      	ldr	r3, [pc, #4]	@ (8015f50 <__errno+0x8>)
 8015f4a:	6818      	ldr	r0, [r3, #0]
 8015f4c:	4770      	bx	lr
 8015f4e:	bf00      	nop
 8015f50:	20002098 	.word	0x20002098

08015f54 <__libc_init_array>:
 8015f54:	b570      	push	{r4, r5, r6, lr}
 8015f56:	4d0d      	ldr	r5, [pc, #52]	@ (8015f8c <__libc_init_array+0x38>)
 8015f58:	4c0d      	ldr	r4, [pc, #52]	@ (8015f90 <__libc_init_array+0x3c>)
 8015f5a:	1b64      	subs	r4, r4, r5
 8015f5c:	10a4      	asrs	r4, r4, #2
 8015f5e:	2600      	movs	r6, #0
 8015f60:	42a6      	cmp	r6, r4
 8015f62:	d109      	bne.n	8015f78 <__libc_init_array+0x24>
 8015f64:	4d0b      	ldr	r5, [pc, #44]	@ (8015f94 <__libc_init_array+0x40>)
 8015f66:	4c0c      	ldr	r4, [pc, #48]	@ (8015f98 <__libc_init_array+0x44>)
 8015f68:	f000 fcee 	bl	8016948 <_init>
 8015f6c:	1b64      	subs	r4, r4, r5
 8015f6e:	10a4      	asrs	r4, r4, #2
 8015f70:	2600      	movs	r6, #0
 8015f72:	42a6      	cmp	r6, r4
 8015f74:	d105      	bne.n	8015f82 <__libc_init_array+0x2e>
 8015f76:	bd70      	pop	{r4, r5, r6, pc}
 8015f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f7c:	4798      	blx	r3
 8015f7e:	3601      	adds	r6, #1
 8015f80:	e7ee      	b.n	8015f60 <__libc_init_array+0xc>
 8015f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f86:	4798      	blx	r3
 8015f88:	3601      	adds	r6, #1
 8015f8a:	e7f2      	b.n	8015f72 <__libc_init_array+0x1e>
 8015f8c:	0808fa10 	.word	0x0808fa10
 8015f90:	0808fa10 	.word	0x0808fa10
 8015f94:	0808fa10 	.word	0x0808fa10
 8015f98:	0808fa14 	.word	0x0808fa14

08015f9c <__retarget_lock_init_recursive>:
 8015f9c:	4770      	bx	lr

08015f9e <__retarget_lock_acquire_recursive>:
 8015f9e:	4770      	bx	lr

08015fa0 <__retarget_lock_release_recursive>:
 8015fa0:	4770      	bx	lr

08015fa2 <memcpy>:
 8015fa2:	440a      	add	r2, r1
 8015fa4:	4291      	cmp	r1, r2
 8015fa6:	f100 33ff 	add.w	r3, r0, #4294967295
 8015faa:	d100      	bne.n	8015fae <memcpy+0xc>
 8015fac:	4770      	bx	lr
 8015fae:	b510      	push	{r4, lr}
 8015fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fb8:	4291      	cmp	r1, r2
 8015fba:	d1f9      	bne.n	8015fb0 <memcpy+0xe>
 8015fbc:	bd10      	pop	{r4, pc}
	...

08015fc0 <__assert_func>:
 8015fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015fc2:	4614      	mov	r4, r2
 8015fc4:	461a      	mov	r2, r3
 8015fc6:	4b09      	ldr	r3, [pc, #36]	@ (8015fec <__assert_func+0x2c>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	4605      	mov	r5, r0
 8015fcc:	68d8      	ldr	r0, [r3, #12]
 8015fce:	b14c      	cbz	r4, 8015fe4 <__assert_func+0x24>
 8015fd0:	4b07      	ldr	r3, [pc, #28]	@ (8015ff0 <__assert_func+0x30>)
 8015fd2:	9100      	str	r1, [sp, #0]
 8015fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015fd8:	4906      	ldr	r1, [pc, #24]	@ (8015ff4 <__assert_func+0x34>)
 8015fda:	462b      	mov	r3, r5
 8015fdc:	f000 fbd2 	bl	8016784 <fiprintf>
 8015fe0:	f000 fc66 	bl	80168b0 <abort>
 8015fe4:	4b04      	ldr	r3, [pc, #16]	@ (8015ff8 <__assert_func+0x38>)
 8015fe6:	461c      	mov	r4, r3
 8015fe8:	e7f3      	b.n	8015fd2 <__assert_func+0x12>
 8015fea:	bf00      	nop
 8015fec:	20002098 	.word	0x20002098
 8015ff0:	08018f0a 	.word	0x08018f0a
 8015ff4:	08018f17 	.word	0x08018f17
 8015ff8:	08016c0d 	.word	0x08016c0d

08015ffc <_free_r>:
 8015ffc:	b538      	push	{r3, r4, r5, lr}
 8015ffe:	4605      	mov	r5, r0
 8016000:	2900      	cmp	r1, #0
 8016002:	d041      	beq.n	8016088 <_free_r+0x8c>
 8016004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016008:	1f0c      	subs	r4, r1, #4
 801600a:	2b00      	cmp	r3, #0
 801600c:	bfb8      	it	lt
 801600e:	18e4      	addlt	r4, r4, r3
 8016010:	f7ff fcb0 	bl	8015974 <__malloc_lock>
 8016014:	4a1d      	ldr	r2, [pc, #116]	@ (801608c <_free_r+0x90>)
 8016016:	6813      	ldr	r3, [r2, #0]
 8016018:	b933      	cbnz	r3, 8016028 <_free_r+0x2c>
 801601a:	6063      	str	r3, [r4, #4]
 801601c:	6014      	str	r4, [r2, #0]
 801601e:	4628      	mov	r0, r5
 8016020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016024:	f7ff bcac 	b.w	8015980 <__malloc_unlock>
 8016028:	42a3      	cmp	r3, r4
 801602a:	d908      	bls.n	801603e <_free_r+0x42>
 801602c:	6820      	ldr	r0, [r4, #0]
 801602e:	1821      	adds	r1, r4, r0
 8016030:	428b      	cmp	r3, r1
 8016032:	bf01      	itttt	eq
 8016034:	6819      	ldreq	r1, [r3, #0]
 8016036:	685b      	ldreq	r3, [r3, #4]
 8016038:	1809      	addeq	r1, r1, r0
 801603a:	6021      	streq	r1, [r4, #0]
 801603c:	e7ed      	b.n	801601a <_free_r+0x1e>
 801603e:	461a      	mov	r2, r3
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	b10b      	cbz	r3, 8016048 <_free_r+0x4c>
 8016044:	42a3      	cmp	r3, r4
 8016046:	d9fa      	bls.n	801603e <_free_r+0x42>
 8016048:	6811      	ldr	r1, [r2, #0]
 801604a:	1850      	adds	r0, r2, r1
 801604c:	42a0      	cmp	r0, r4
 801604e:	d10b      	bne.n	8016068 <_free_r+0x6c>
 8016050:	6820      	ldr	r0, [r4, #0]
 8016052:	4401      	add	r1, r0
 8016054:	1850      	adds	r0, r2, r1
 8016056:	4283      	cmp	r3, r0
 8016058:	6011      	str	r1, [r2, #0]
 801605a:	d1e0      	bne.n	801601e <_free_r+0x22>
 801605c:	6818      	ldr	r0, [r3, #0]
 801605e:	685b      	ldr	r3, [r3, #4]
 8016060:	6053      	str	r3, [r2, #4]
 8016062:	4408      	add	r0, r1
 8016064:	6010      	str	r0, [r2, #0]
 8016066:	e7da      	b.n	801601e <_free_r+0x22>
 8016068:	d902      	bls.n	8016070 <_free_r+0x74>
 801606a:	230c      	movs	r3, #12
 801606c:	602b      	str	r3, [r5, #0]
 801606e:	e7d6      	b.n	801601e <_free_r+0x22>
 8016070:	6820      	ldr	r0, [r4, #0]
 8016072:	1821      	adds	r1, r4, r0
 8016074:	428b      	cmp	r3, r1
 8016076:	bf04      	itt	eq
 8016078:	6819      	ldreq	r1, [r3, #0]
 801607a:	685b      	ldreq	r3, [r3, #4]
 801607c:	6063      	str	r3, [r4, #4]
 801607e:	bf04      	itt	eq
 8016080:	1809      	addeq	r1, r1, r0
 8016082:	6021      	streq	r1, [r4, #0]
 8016084:	6054      	str	r4, [r2, #4]
 8016086:	e7ca      	b.n	801601e <_free_r+0x22>
 8016088:	bd38      	pop	{r3, r4, r5, pc}
 801608a:	bf00      	nop
 801608c:	20011750 	.word	0x20011750

08016090 <__sfputc_r>:
 8016090:	6893      	ldr	r3, [r2, #8]
 8016092:	3b01      	subs	r3, #1
 8016094:	2b00      	cmp	r3, #0
 8016096:	b410      	push	{r4}
 8016098:	6093      	str	r3, [r2, #8]
 801609a:	da08      	bge.n	80160ae <__sfputc_r+0x1e>
 801609c:	6994      	ldr	r4, [r2, #24]
 801609e:	42a3      	cmp	r3, r4
 80160a0:	db01      	blt.n	80160a6 <__sfputc_r+0x16>
 80160a2:	290a      	cmp	r1, #10
 80160a4:	d103      	bne.n	80160ae <__sfputc_r+0x1e>
 80160a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160aa:	f7ff be22 	b.w	8015cf2 <__swbuf_r>
 80160ae:	6813      	ldr	r3, [r2, #0]
 80160b0:	1c58      	adds	r0, r3, #1
 80160b2:	6010      	str	r0, [r2, #0]
 80160b4:	7019      	strb	r1, [r3, #0]
 80160b6:	4608      	mov	r0, r1
 80160b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160bc:	4770      	bx	lr

080160be <__sfputs_r>:
 80160be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c0:	4606      	mov	r6, r0
 80160c2:	460f      	mov	r7, r1
 80160c4:	4614      	mov	r4, r2
 80160c6:	18d5      	adds	r5, r2, r3
 80160c8:	42ac      	cmp	r4, r5
 80160ca:	d101      	bne.n	80160d0 <__sfputs_r+0x12>
 80160cc:	2000      	movs	r0, #0
 80160ce:	e007      	b.n	80160e0 <__sfputs_r+0x22>
 80160d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160d4:	463a      	mov	r2, r7
 80160d6:	4630      	mov	r0, r6
 80160d8:	f7ff ffda 	bl	8016090 <__sfputc_r>
 80160dc:	1c43      	adds	r3, r0, #1
 80160de:	d1f3      	bne.n	80160c8 <__sfputs_r+0xa>
 80160e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080160e4 <_vfiprintf_r>:
 80160e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e8:	460d      	mov	r5, r1
 80160ea:	b09d      	sub	sp, #116	@ 0x74
 80160ec:	4614      	mov	r4, r2
 80160ee:	4698      	mov	r8, r3
 80160f0:	4606      	mov	r6, r0
 80160f2:	b118      	cbz	r0, 80160fc <_vfiprintf_r+0x18>
 80160f4:	6a03      	ldr	r3, [r0, #32]
 80160f6:	b90b      	cbnz	r3, 80160fc <_vfiprintf_r+0x18>
 80160f8:	f7ff fd12 	bl	8015b20 <__sinit>
 80160fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80160fe:	07d9      	lsls	r1, r3, #31
 8016100:	d405      	bmi.n	801610e <_vfiprintf_r+0x2a>
 8016102:	89ab      	ldrh	r3, [r5, #12]
 8016104:	059a      	lsls	r2, r3, #22
 8016106:	d402      	bmi.n	801610e <_vfiprintf_r+0x2a>
 8016108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801610a:	f7ff ff48 	bl	8015f9e <__retarget_lock_acquire_recursive>
 801610e:	89ab      	ldrh	r3, [r5, #12]
 8016110:	071b      	lsls	r3, r3, #28
 8016112:	d501      	bpl.n	8016118 <_vfiprintf_r+0x34>
 8016114:	692b      	ldr	r3, [r5, #16]
 8016116:	b99b      	cbnz	r3, 8016140 <_vfiprintf_r+0x5c>
 8016118:	4629      	mov	r1, r5
 801611a:	4630      	mov	r0, r6
 801611c:	f7ff fe28 	bl	8015d70 <__swsetup_r>
 8016120:	b170      	cbz	r0, 8016140 <_vfiprintf_r+0x5c>
 8016122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016124:	07dc      	lsls	r4, r3, #31
 8016126:	d504      	bpl.n	8016132 <_vfiprintf_r+0x4e>
 8016128:	f04f 30ff 	mov.w	r0, #4294967295
 801612c:	b01d      	add	sp, #116	@ 0x74
 801612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016132:	89ab      	ldrh	r3, [r5, #12]
 8016134:	0598      	lsls	r0, r3, #22
 8016136:	d4f7      	bmi.n	8016128 <_vfiprintf_r+0x44>
 8016138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801613a:	f7ff ff31 	bl	8015fa0 <__retarget_lock_release_recursive>
 801613e:	e7f3      	b.n	8016128 <_vfiprintf_r+0x44>
 8016140:	2300      	movs	r3, #0
 8016142:	9309      	str	r3, [sp, #36]	@ 0x24
 8016144:	2320      	movs	r3, #32
 8016146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801614a:	f8cd 800c 	str.w	r8, [sp, #12]
 801614e:	2330      	movs	r3, #48	@ 0x30
 8016150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016300 <_vfiprintf_r+0x21c>
 8016154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016158:	f04f 0901 	mov.w	r9, #1
 801615c:	4623      	mov	r3, r4
 801615e:	469a      	mov	sl, r3
 8016160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016164:	b10a      	cbz	r2, 801616a <_vfiprintf_r+0x86>
 8016166:	2a25      	cmp	r2, #37	@ 0x25
 8016168:	d1f9      	bne.n	801615e <_vfiprintf_r+0x7a>
 801616a:	ebba 0b04 	subs.w	fp, sl, r4
 801616e:	d00b      	beq.n	8016188 <_vfiprintf_r+0xa4>
 8016170:	465b      	mov	r3, fp
 8016172:	4622      	mov	r2, r4
 8016174:	4629      	mov	r1, r5
 8016176:	4630      	mov	r0, r6
 8016178:	f7ff ffa1 	bl	80160be <__sfputs_r>
 801617c:	3001      	adds	r0, #1
 801617e:	f000 80a7 	beq.w	80162d0 <_vfiprintf_r+0x1ec>
 8016182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016184:	445a      	add	r2, fp
 8016186:	9209      	str	r2, [sp, #36]	@ 0x24
 8016188:	f89a 3000 	ldrb.w	r3, [sl]
 801618c:	2b00      	cmp	r3, #0
 801618e:	f000 809f 	beq.w	80162d0 <_vfiprintf_r+0x1ec>
 8016192:	2300      	movs	r3, #0
 8016194:	f04f 32ff 	mov.w	r2, #4294967295
 8016198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801619c:	f10a 0a01 	add.w	sl, sl, #1
 80161a0:	9304      	str	r3, [sp, #16]
 80161a2:	9307      	str	r3, [sp, #28]
 80161a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80161a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80161aa:	4654      	mov	r4, sl
 80161ac:	2205      	movs	r2, #5
 80161ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161b2:	4853      	ldr	r0, [pc, #332]	@ (8016300 <_vfiprintf_r+0x21c>)
 80161b4:	f7ea f84c 	bl	8000250 <memchr>
 80161b8:	9a04      	ldr	r2, [sp, #16]
 80161ba:	b9d8      	cbnz	r0, 80161f4 <_vfiprintf_r+0x110>
 80161bc:	06d1      	lsls	r1, r2, #27
 80161be:	bf44      	itt	mi
 80161c0:	2320      	movmi	r3, #32
 80161c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161c6:	0713      	lsls	r3, r2, #28
 80161c8:	bf44      	itt	mi
 80161ca:	232b      	movmi	r3, #43	@ 0x2b
 80161cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161d0:	f89a 3000 	ldrb.w	r3, [sl]
 80161d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80161d6:	d015      	beq.n	8016204 <_vfiprintf_r+0x120>
 80161d8:	9a07      	ldr	r2, [sp, #28]
 80161da:	4654      	mov	r4, sl
 80161dc:	2000      	movs	r0, #0
 80161de:	f04f 0c0a 	mov.w	ip, #10
 80161e2:	4621      	mov	r1, r4
 80161e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161e8:	3b30      	subs	r3, #48	@ 0x30
 80161ea:	2b09      	cmp	r3, #9
 80161ec:	d94b      	bls.n	8016286 <_vfiprintf_r+0x1a2>
 80161ee:	b1b0      	cbz	r0, 801621e <_vfiprintf_r+0x13a>
 80161f0:	9207      	str	r2, [sp, #28]
 80161f2:	e014      	b.n	801621e <_vfiprintf_r+0x13a>
 80161f4:	eba0 0308 	sub.w	r3, r0, r8
 80161f8:	fa09 f303 	lsl.w	r3, r9, r3
 80161fc:	4313      	orrs	r3, r2
 80161fe:	9304      	str	r3, [sp, #16]
 8016200:	46a2      	mov	sl, r4
 8016202:	e7d2      	b.n	80161aa <_vfiprintf_r+0xc6>
 8016204:	9b03      	ldr	r3, [sp, #12]
 8016206:	1d19      	adds	r1, r3, #4
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	9103      	str	r1, [sp, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	bfbb      	ittet	lt
 8016210:	425b      	neglt	r3, r3
 8016212:	f042 0202 	orrlt.w	r2, r2, #2
 8016216:	9307      	strge	r3, [sp, #28]
 8016218:	9307      	strlt	r3, [sp, #28]
 801621a:	bfb8      	it	lt
 801621c:	9204      	strlt	r2, [sp, #16]
 801621e:	7823      	ldrb	r3, [r4, #0]
 8016220:	2b2e      	cmp	r3, #46	@ 0x2e
 8016222:	d10a      	bne.n	801623a <_vfiprintf_r+0x156>
 8016224:	7863      	ldrb	r3, [r4, #1]
 8016226:	2b2a      	cmp	r3, #42	@ 0x2a
 8016228:	d132      	bne.n	8016290 <_vfiprintf_r+0x1ac>
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	1d1a      	adds	r2, r3, #4
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	9203      	str	r2, [sp, #12]
 8016232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016236:	3402      	adds	r4, #2
 8016238:	9305      	str	r3, [sp, #20]
 801623a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016310 <_vfiprintf_r+0x22c>
 801623e:	7821      	ldrb	r1, [r4, #0]
 8016240:	2203      	movs	r2, #3
 8016242:	4650      	mov	r0, sl
 8016244:	f7ea f804 	bl	8000250 <memchr>
 8016248:	b138      	cbz	r0, 801625a <_vfiprintf_r+0x176>
 801624a:	9b04      	ldr	r3, [sp, #16]
 801624c:	eba0 000a 	sub.w	r0, r0, sl
 8016250:	2240      	movs	r2, #64	@ 0x40
 8016252:	4082      	lsls	r2, r0
 8016254:	4313      	orrs	r3, r2
 8016256:	3401      	adds	r4, #1
 8016258:	9304      	str	r3, [sp, #16]
 801625a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801625e:	4829      	ldr	r0, [pc, #164]	@ (8016304 <_vfiprintf_r+0x220>)
 8016260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016264:	2206      	movs	r2, #6
 8016266:	f7e9 fff3 	bl	8000250 <memchr>
 801626a:	2800      	cmp	r0, #0
 801626c:	d03f      	beq.n	80162ee <_vfiprintf_r+0x20a>
 801626e:	4b26      	ldr	r3, [pc, #152]	@ (8016308 <_vfiprintf_r+0x224>)
 8016270:	bb1b      	cbnz	r3, 80162ba <_vfiprintf_r+0x1d6>
 8016272:	9b03      	ldr	r3, [sp, #12]
 8016274:	3307      	adds	r3, #7
 8016276:	f023 0307 	bic.w	r3, r3, #7
 801627a:	3308      	adds	r3, #8
 801627c:	9303      	str	r3, [sp, #12]
 801627e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016280:	443b      	add	r3, r7
 8016282:	9309      	str	r3, [sp, #36]	@ 0x24
 8016284:	e76a      	b.n	801615c <_vfiprintf_r+0x78>
 8016286:	fb0c 3202 	mla	r2, ip, r2, r3
 801628a:	460c      	mov	r4, r1
 801628c:	2001      	movs	r0, #1
 801628e:	e7a8      	b.n	80161e2 <_vfiprintf_r+0xfe>
 8016290:	2300      	movs	r3, #0
 8016292:	3401      	adds	r4, #1
 8016294:	9305      	str	r3, [sp, #20]
 8016296:	4619      	mov	r1, r3
 8016298:	f04f 0c0a 	mov.w	ip, #10
 801629c:	4620      	mov	r0, r4
 801629e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162a2:	3a30      	subs	r2, #48	@ 0x30
 80162a4:	2a09      	cmp	r2, #9
 80162a6:	d903      	bls.n	80162b0 <_vfiprintf_r+0x1cc>
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d0c6      	beq.n	801623a <_vfiprintf_r+0x156>
 80162ac:	9105      	str	r1, [sp, #20]
 80162ae:	e7c4      	b.n	801623a <_vfiprintf_r+0x156>
 80162b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80162b4:	4604      	mov	r4, r0
 80162b6:	2301      	movs	r3, #1
 80162b8:	e7f0      	b.n	801629c <_vfiprintf_r+0x1b8>
 80162ba:	ab03      	add	r3, sp, #12
 80162bc:	9300      	str	r3, [sp, #0]
 80162be:	462a      	mov	r2, r5
 80162c0:	4b12      	ldr	r3, [pc, #72]	@ (801630c <_vfiprintf_r+0x228>)
 80162c2:	a904      	add	r1, sp, #16
 80162c4:	4630      	mov	r0, r6
 80162c6:	f3af 8000 	nop.w
 80162ca:	4607      	mov	r7, r0
 80162cc:	1c78      	adds	r0, r7, #1
 80162ce:	d1d6      	bne.n	801627e <_vfiprintf_r+0x19a>
 80162d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80162d2:	07d9      	lsls	r1, r3, #31
 80162d4:	d405      	bmi.n	80162e2 <_vfiprintf_r+0x1fe>
 80162d6:	89ab      	ldrh	r3, [r5, #12]
 80162d8:	059a      	lsls	r2, r3, #22
 80162da:	d402      	bmi.n	80162e2 <_vfiprintf_r+0x1fe>
 80162dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80162de:	f7ff fe5f 	bl	8015fa0 <__retarget_lock_release_recursive>
 80162e2:	89ab      	ldrh	r3, [r5, #12]
 80162e4:	065b      	lsls	r3, r3, #25
 80162e6:	f53f af1f 	bmi.w	8016128 <_vfiprintf_r+0x44>
 80162ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162ec:	e71e      	b.n	801612c <_vfiprintf_r+0x48>
 80162ee:	ab03      	add	r3, sp, #12
 80162f0:	9300      	str	r3, [sp, #0]
 80162f2:	462a      	mov	r2, r5
 80162f4:	4b05      	ldr	r3, [pc, #20]	@ (801630c <_vfiprintf_r+0x228>)
 80162f6:	a904      	add	r1, sp, #16
 80162f8:	4630      	mov	r0, r6
 80162fa:	f000 f879 	bl	80163f0 <_printf_i>
 80162fe:	e7e4      	b.n	80162ca <_vfiprintf_r+0x1e6>
 8016300:	08018f46 	.word	0x08018f46
 8016304:	08018f50 	.word	0x08018f50
 8016308:	00000000 	.word	0x00000000
 801630c:	080160bf 	.word	0x080160bf
 8016310:	08018f4c 	.word	0x08018f4c

08016314 <_printf_common>:
 8016314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016318:	4616      	mov	r6, r2
 801631a:	4698      	mov	r8, r3
 801631c:	688a      	ldr	r2, [r1, #8]
 801631e:	690b      	ldr	r3, [r1, #16]
 8016320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016324:	4293      	cmp	r3, r2
 8016326:	bfb8      	it	lt
 8016328:	4613      	movlt	r3, r2
 801632a:	6033      	str	r3, [r6, #0]
 801632c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016330:	4607      	mov	r7, r0
 8016332:	460c      	mov	r4, r1
 8016334:	b10a      	cbz	r2, 801633a <_printf_common+0x26>
 8016336:	3301      	adds	r3, #1
 8016338:	6033      	str	r3, [r6, #0]
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	0699      	lsls	r1, r3, #26
 801633e:	bf42      	ittt	mi
 8016340:	6833      	ldrmi	r3, [r6, #0]
 8016342:	3302      	addmi	r3, #2
 8016344:	6033      	strmi	r3, [r6, #0]
 8016346:	6825      	ldr	r5, [r4, #0]
 8016348:	f015 0506 	ands.w	r5, r5, #6
 801634c:	d106      	bne.n	801635c <_printf_common+0x48>
 801634e:	f104 0a19 	add.w	sl, r4, #25
 8016352:	68e3      	ldr	r3, [r4, #12]
 8016354:	6832      	ldr	r2, [r6, #0]
 8016356:	1a9b      	subs	r3, r3, r2
 8016358:	42ab      	cmp	r3, r5
 801635a:	dc26      	bgt.n	80163aa <_printf_common+0x96>
 801635c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016360:	6822      	ldr	r2, [r4, #0]
 8016362:	3b00      	subs	r3, #0
 8016364:	bf18      	it	ne
 8016366:	2301      	movne	r3, #1
 8016368:	0692      	lsls	r2, r2, #26
 801636a:	d42b      	bmi.n	80163c4 <_printf_common+0xb0>
 801636c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016370:	4641      	mov	r1, r8
 8016372:	4638      	mov	r0, r7
 8016374:	47c8      	blx	r9
 8016376:	3001      	adds	r0, #1
 8016378:	d01e      	beq.n	80163b8 <_printf_common+0xa4>
 801637a:	6823      	ldr	r3, [r4, #0]
 801637c:	6922      	ldr	r2, [r4, #16]
 801637e:	f003 0306 	and.w	r3, r3, #6
 8016382:	2b04      	cmp	r3, #4
 8016384:	bf02      	ittt	eq
 8016386:	68e5      	ldreq	r5, [r4, #12]
 8016388:	6833      	ldreq	r3, [r6, #0]
 801638a:	1aed      	subeq	r5, r5, r3
 801638c:	68a3      	ldr	r3, [r4, #8]
 801638e:	bf0c      	ite	eq
 8016390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016394:	2500      	movne	r5, #0
 8016396:	4293      	cmp	r3, r2
 8016398:	bfc4      	itt	gt
 801639a:	1a9b      	subgt	r3, r3, r2
 801639c:	18ed      	addgt	r5, r5, r3
 801639e:	2600      	movs	r6, #0
 80163a0:	341a      	adds	r4, #26
 80163a2:	42b5      	cmp	r5, r6
 80163a4:	d11a      	bne.n	80163dc <_printf_common+0xc8>
 80163a6:	2000      	movs	r0, #0
 80163a8:	e008      	b.n	80163bc <_printf_common+0xa8>
 80163aa:	2301      	movs	r3, #1
 80163ac:	4652      	mov	r2, sl
 80163ae:	4641      	mov	r1, r8
 80163b0:	4638      	mov	r0, r7
 80163b2:	47c8      	blx	r9
 80163b4:	3001      	adds	r0, #1
 80163b6:	d103      	bne.n	80163c0 <_printf_common+0xac>
 80163b8:	f04f 30ff 	mov.w	r0, #4294967295
 80163bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163c0:	3501      	adds	r5, #1
 80163c2:	e7c6      	b.n	8016352 <_printf_common+0x3e>
 80163c4:	18e1      	adds	r1, r4, r3
 80163c6:	1c5a      	adds	r2, r3, #1
 80163c8:	2030      	movs	r0, #48	@ 0x30
 80163ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80163ce:	4422      	add	r2, r4
 80163d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80163d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80163d8:	3302      	adds	r3, #2
 80163da:	e7c7      	b.n	801636c <_printf_common+0x58>
 80163dc:	2301      	movs	r3, #1
 80163de:	4622      	mov	r2, r4
 80163e0:	4641      	mov	r1, r8
 80163e2:	4638      	mov	r0, r7
 80163e4:	47c8      	blx	r9
 80163e6:	3001      	adds	r0, #1
 80163e8:	d0e6      	beq.n	80163b8 <_printf_common+0xa4>
 80163ea:	3601      	adds	r6, #1
 80163ec:	e7d9      	b.n	80163a2 <_printf_common+0x8e>
	...

080163f0 <_printf_i>:
 80163f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80163f4:	7e0f      	ldrb	r7, [r1, #24]
 80163f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80163f8:	2f78      	cmp	r7, #120	@ 0x78
 80163fa:	4691      	mov	r9, r2
 80163fc:	4680      	mov	r8, r0
 80163fe:	460c      	mov	r4, r1
 8016400:	469a      	mov	sl, r3
 8016402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016406:	d807      	bhi.n	8016418 <_printf_i+0x28>
 8016408:	2f62      	cmp	r7, #98	@ 0x62
 801640a:	d80a      	bhi.n	8016422 <_printf_i+0x32>
 801640c:	2f00      	cmp	r7, #0
 801640e:	f000 80d1 	beq.w	80165b4 <_printf_i+0x1c4>
 8016412:	2f58      	cmp	r7, #88	@ 0x58
 8016414:	f000 80b8 	beq.w	8016588 <_printf_i+0x198>
 8016418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801641c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016420:	e03a      	b.n	8016498 <_printf_i+0xa8>
 8016422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016426:	2b15      	cmp	r3, #21
 8016428:	d8f6      	bhi.n	8016418 <_printf_i+0x28>
 801642a:	a101      	add	r1, pc, #4	@ (adr r1, 8016430 <_printf_i+0x40>)
 801642c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016430:	08016489 	.word	0x08016489
 8016434:	0801649d 	.word	0x0801649d
 8016438:	08016419 	.word	0x08016419
 801643c:	08016419 	.word	0x08016419
 8016440:	08016419 	.word	0x08016419
 8016444:	08016419 	.word	0x08016419
 8016448:	0801649d 	.word	0x0801649d
 801644c:	08016419 	.word	0x08016419
 8016450:	08016419 	.word	0x08016419
 8016454:	08016419 	.word	0x08016419
 8016458:	08016419 	.word	0x08016419
 801645c:	0801659b 	.word	0x0801659b
 8016460:	080164c7 	.word	0x080164c7
 8016464:	08016555 	.word	0x08016555
 8016468:	08016419 	.word	0x08016419
 801646c:	08016419 	.word	0x08016419
 8016470:	080165bd 	.word	0x080165bd
 8016474:	08016419 	.word	0x08016419
 8016478:	080164c7 	.word	0x080164c7
 801647c:	08016419 	.word	0x08016419
 8016480:	08016419 	.word	0x08016419
 8016484:	0801655d 	.word	0x0801655d
 8016488:	6833      	ldr	r3, [r6, #0]
 801648a:	1d1a      	adds	r2, r3, #4
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	6032      	str	r2, [r6, #0]
 8016490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016498:	2301      	movs	r3, #1
 801649a:	e09c      	b.n	80165d6 <_printf_i+0x1e6>
 801649c:	6833      	ldr	r3, [r6, #0]
 801649e:	6820      	ldr	r0, [r4, #0]
 80164a0:	1d19      	adds	r1, r3, #4
 80164a2:	6031      	str	r1, [r6, #0]
 80164a4:	0606      	lsls	r6, r0, #24
 80164a6:	d501      	bpl.n	80164ac <_printf_i+0xbc>
 80164a8:	681d      	ldr	r5, [r3, #0]
 80164aa:	e003      	b.n	80164b4 <_printf_i+0xc4>
 80164ac:	0645      	lsls	r5, r0, #25
 80164ae:	d5fb      	bpl.n	80164a8 <_printf_i+0xb8>
 80164b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80164b4:	2d00      	cmp	r5, #0
 80164b6:	da03      	bge.n	80164c0 <_printf_i+0xd0>
 80164b8:	232d      	movs	r3, #45	@ 0x2d
 80164ba:	426d      	negs	r5, r5
 80164bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80164c0:	4858      	ldr	r0, [pc, #352]	@ (8016624 <_printf_i+0x234>)
 80164c2:	230a      	movs	r3, #10
 80164c4:	e011      	b.n	80164ea <_printf_i+0xfa>
 80164c6:	6821      	ldr	r1, [r4, #0]
 80164c8:	6833      	ldr	r3, [r6, #0]
 80164ca:	0608      	lsls	r0, r1, #24
 80164cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80164d0:	d402      	bmi.n	80164d8 <_printf_i+0xe8>
 80164d2:	0649      	lsls	r1, r1, #25
 80164d4:	bf48      	it	mi
 80164d6:	b2ad      	uxthmi	r5, r5
 80164d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80164da:	4852      	ldr	r0, [pc, #328]	@ (8016624 <_printf_i+0x234>)
 80164dc:	6033      	str	r3, [r6, #0]
 80164de:	bf14      	ite	ne
 80164e0:	230a      	movne	r3, #10
 80164e2:	2308      	moveq	r3, #8
 80164e4:	2100      	movs	r1, #0
 80164e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80164ea:	6866      	ldr	r6, [r4, #4]
 80164ec:	60a6      	str	r6, [r4, #8]
 80164ee:	2e00      	cmp	r6, #0
 80164f0:	db05      	blt.n	80164fe <_printf_i+0x10e>
 80164f2:	6821      	ldr	r1, [r4, #0]
 80164f4:	432e      	orrs	r6, r5
 80164f6:	f021 0104 	bic.w	r1, r1, #4
 80164fa:	6021      	str	r1, [r4, #0]
 80164fc:	d04b      	beq.n	8016596 <_printf_i+0x1a6>
 80164fe:	4616      	mov	r6, r2
 8016500:	fbb5 f1f3 	udiv	r1, r5, r3
 8016504:	fb03 5711 	mls	r7, r3, r1, r5
 8016508:	5dc7      	ldrb	r7, [r0, r7]
 801650a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801650e:	462f      	mov	r7, r5
 8016510:	42bb      	cmp	r3, r7
 8016512:	460d      	mov	r5, r1
 8016514:	d9f4      	bls.n	8016500 <_printf_i+0x110>
 8016516:	2b08      	cmp	r3, #8
 8016518:	d10b      	bne.n	8016532 <_printf_i+0x142>
 801651a:	6823      	ldr	r3, [r4, #0]
 801651c:	07df      	lsls	r7, r3, #31
 801651e:	d508      	bpl.n	8016532 <_printf_i+0x142>
 8016520:	6923      	ldr	r3, [r4, #16]
 8016522:	6861      	ldr	r1, [r4, #4]
 8016524:	4299      	cmp	r1, r3
 8016526:	bfde      	ittt	le
 8016528:	2330      	movle	r3, #48	@ 0x30
 801652a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801652e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016532:	1b92      	subs	r2, r2, r6
 8016534:	6122      	str	r2, [r4, #16]
 8016536:	f8cd a000 	str.w	sl, [sp]
 801653a:	464b      	mov	r3, r9
 801653c:	aa03      	add	r2, sp, #12
 801653e:	4621      	mov	r1, r4
 8016540:	4640      	mov	r0, r8
 8016542:	f7ff fee7 	bl	8016314 <_printf_common>
 8016546:	3001      	adds	r0, #1
 8016548:	d14a      	bne.n	80165e0 <_printf_i+0x1f0>
 801654a:	f04f 30ff 	mov.w	r0, #4294967295
 801654e:	b004      	add	sp, #16
 8016550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016554:	6823      	ldr	r3, [r4, #0]
 8016556:	f043 0320 	orr.w	r3, r3, #32
 801655a:	6023      	str	r3, [r4, #0]
 801655c:	4832      	ldr	r0, [pc, #200]	@ (8016628 <_printf_i+0x238>)
 801655e:	2778      	movs	r7, #120	@ 0x78
 8016560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016564:	6823      	ldr	r3, [r4, #0]
 8016566:	6831      	ldr	r1, [r6, #0]
 8016568:	061f      	lsls	r7, r3, #24
 801656a:	f851 5b04 	ldr.w	r5, [r1], #4
 801656e:	d402      	bmi.n	8016576 <_printf_i+0x186>
 8016570:	065f      	lsls	r7, r3, #25
 8016572:	bf48      	it	mi
 8016574:	b2ad      	uxthmi	r5, r5
 8016576:	6031      	str	r1, [r6, #0]
 8016578:	07d9      	lsls	r1, r3, #31
 801657a:	bf44      	itt	mi
 801657c:	f043 0320 	orrmi.w	r3, r3, #32
 8016580:	6023      	strmi	r3, [r4, #0]
 8016582:	b11d      	cbz	r5, 801658c <_printf_i+0x19c>
 8016584:	2310      	movs	r3, #16
 8016586:	e7ad      	b.n	80164e4 <_printf_i+0xf4>
 8016588:	4826      	ldr	r0, [pc, #152]	@ (8016624 <_printf_i+0x234>)
 801658a:	e7e9      	b.n	8016560 <_printf_i+0x170>
 801658c:	6823      	ldr	r3, [r4, #0]
 801658e:	f023 0320 	bic.w	r3, r3, #32
 8016592:	6023      	str	r3, [r4, #0]
 8016594:	e7f6      	b.n	8016584 <_printf_i+0x194>
 8016596:	4616      	mov	r6, r2
 8016598:	e7bd      	b.n	8016516 <_printf_i+0x126>
 801659a:	6833      	ldr	r3, [r6, #0]
 801659c:	6825      	ldr	r5, [r4, #0]
 801659e:	6961      	ldr	r1, [r4, #20]
 80165a0:	1d18      	adds	r0, r3, #4
 80165a2:	6030      	str	r0, [r6, #0]
 80165a4:	062e      	lsls	r6, r5, #24
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	d501      	bpl.n	80165ae <_printf_i+0x1be>
 80165aa:	6019      	str	r1, [r3, #0]
 80165ac:	e002      	b.n	80165b4 <_printf_i+0x1c4>
 80165ae:	0668      	lsls	r0, r5, #25
 80165b0:	d5fb      	bpl.n	80165aa <_printf_i+0x1ba>
 80165b2:	8019      	strh	r1, [r3, #0]
 80165b4:	2300      	movs	r3, #0
 80165b6:	6123      	str	r3, [r4, #16]
 80165b8:	4616      	mov	r6, r2
 80165ba:	e7bc      	b.n	8016536 <_printf_i+0x146>
 80165bc:	6833      	ldr	r3, [r6, #0]
 80165be:	1d1a      	adds	r2, r3, #4
 80165c0:	6032      	str	r2, [r6, #0]
 80165c2:	681e      	ldr	r6, [r3, #0]
 80165c4:	6862      	ldr	r2, [r4, #4]
 80165c6:	2100      	movs	r1, #0
 80165c8:	4630      	mov	r0, r6
 80165ca:	f7e9 fe41 	bl	8000250 <memchr>
 80165ce:	b108      	cbz	r0, 80165d4 <_printf_i+0x1e4>
 80165d0:	1b80      	subs	r0, r0, r6
 80165d2:	6060      	str	r0, [r4, #4]
 80165d4:	6863      	ldr	r3, [r4, #4]
 80165d6:	6123      	str	r3, [r4, #16]
 80165d8:	2300      	movs	r3, #0
 80165da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80165de:	e7aa      	b.n	8016536 <_printf_i+0x146>
 80165e0:	6923      	ldr	r3, [r4, #16]
 80165e2:	4632      	mov	r2, r6
 80165e4:	4649      	mov	r1, r9
 80165e6:	4640      	mov	r0, r8
 80165e8:	47d0      	blx	sl
 80165ea:	3001      	adds	r0, #1
 80165ec:	d0ad      	beq.n	801654a <_printf_i+0x15a>
 80165ee:	6823      	ldr	r3, [r4, #0]
 80165f0:	079b      	lsls	r3, r3, #30
 80165f2:	d413      	bmi.n	801661c <_printf_i+0x22c>
 80165f4:	68e0      	ldr	r0, [r4, #12]
 80165f6:	9b03      	ldr	r3, [sp, #12]
 80165f8:	4298      	cmp	r0, r3
 80165fa:	bfb8      	it	lt
 80165fc:	4618      	movlt	r0, r3
 80165fe:	e7a6      	b.n	801654e <_printf_i+0x15e>
 8016600:	2301      	movs	r3, #1
 8016602:	4632      	mov	r2, r6
 8016604:	4649      	mov	r1, r9
 8016606:	4640      	mov	r0, r8
 8016608:	47d0      	blx	sl
 801660a:	3001      	adds	r0, #1
 801660c:	d09d      	beq.n	801654a <_printf_i+0x15a>
 801660e:	3501      	adds	r5, #1
 8016610:	68e3      	ldr	r3, [r4, #12]
 8016612:	9903      	ldr	r1, [sp, #12]
 8016614:	1a5b      	subs	r3, r3, r1
 8016616:	42ab      	cmp	r3, r5
 8016618:	dcf2      	bgt.n	8016600 <_printf_i+0x210>
 801661a:	e7eb      	b.n	80165f4 <_printf_i+0x204>
 801661c:	2500      	movs	r5, #0
 801661e:	f104 0619 	add.w	r6, r4, #25
 8016622:	e7f5      	b.n	8016610 <_printf_i+0x220>
 8016624:	08018e58 	.word	0x08018e58
 8016628:	08018f57 	.word	0x08018f57

0801662c <__sflush_r>:
 801662c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016634:	0716      	lsls	r6, r2, #28
 8016636:	4605      	mov	r5, r0
 8016638:	460c      	mov	r4, r1
 801663a:	d454      	bmi.n	80166e6 <__sflush_r+0xba>
 801663c:	684b      	ldr	r3, [r1, #4]
 801663e:	2b00      	cmp	r3, #0
 8016640:	dc02      	bgt.n	8016648 <__sflush_r+0x1c>
 8016642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016644:	2b00      	cmp	r3, #0
 8016646:	dd48      	ble.n	80166da <__sflush_r+0xae>
 8016648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801664a:	2e00      	cmp	r6, #0
 801664c:	d045      	beq.n	80166da <__sflush_r+0xae>
 801664e:	2300      	movs	r3, #0
 8016650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016654:	682f      	ldr	r7, [r5, #0]
 8016656:	6a21      	ldr	r1, [r4, #32]
 8016658:	602b      	str	r3, [r5, #0]
 801665a:	d030      	beq.n	80166be <__sflush_r+0x92>
 801665c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	0759      	lsls	r1, r3, #29
 8016662:	d505      	bpl.n	8016670 <__sflush_r+0x44>
 8016664:	6863      	ldr	r3, [r4, #4]
 8016666:	1ad2      	subs	r2, r2, r3
 8016668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801666a:	b10b      	cbz	r3, 8016670 <__sflush_r+0x44>
 801666c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801666e:	1ad2      	subs	r2, r2, r3
 8016670:	2300      	movs	r3, #0
 8016672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016674:	6a21      	ldr	r1, [r4, #32]
 8016676:	4628      	mov	r0, r5
 8016678:	47b0      	blx	r6
 801667a:	1c43      	adds	r3, r0, #1
 801667c:	89a3      	ldrh	r3, [r4, #12]
 801667e:	d106      	bne.n	801668e <__sflush_r+0x62>
 8016680:	6829      	ldr	r1, [r5, #0]
 8016682:	291d      	cmp	r1, #29
 8016684:	d82b      	bhi.n	80166de <__sflush_r+0xb2>
 8016686:	4a2a      	ldr	r2, [pc, #168]	@ (8016730 <__sflush_r+0x104>)
 8016688:	40ca      	lsrs	r2, r1
 801668a:	07d6      	lsls	r6, r2, #31
 801668c:	d527      	bpl.n	80166de <__sflush_r+0xb2>
 801668e:	2200      	movs	r2, #0
 8016690:	6062      	str	r2, [r4, #4]
 8016692:	04d9      	lsls	r1, r3, #19
 8016694:	6922      	ldr	r2, [r4, #16]
 8016696:	6022      	str	r2, [r4, #0]
 8016698:	d504      	bpl.n	80166a4 <__sflush_r+0x78>
 801669a:	1c42      	adds	r2, r0, #1
 801669c:	d101      	bne.n	80166a2 <__sflush_r+0x76>
 801669e:	682b      	ldr	r3, [r5, #0]
 80166a0:	b903      	cbnz	r3, 80166a4 <__sflush_r+0x78>
 80166a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80166a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166a6:	602f      	str	r7, [r5, #0]
 80166a8:	b1b9      	cbz	r1, 80166da <__sflush_r+0xae>
 80166aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166ae:	4299      	cmp	r1, r3
 80166b0:	d002      	beq.n	80166b8 <__sflush_r+0x8c>
 80166b2:	4628      	mov	r0, r5
 80166b4:	f7ff fca2 	bl	8015ffc <_free_r>
 80166b8:	2300      	movs	r3, #0
 80166ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80166bc:	e00d      	b.n	80166da <__sflush_r+0xae>
 80166be:	2301      	movs	r3, #1
 80166c0:	4628      	mov	r0, r5
 80166c2:	47b0      	blx	r6
 80166c4:	4602      	mov	r2, r0
 80166c6:	1c50      	adds	r0, r2, #1
 80166c8:	d1c9      	bne.n	801665e <__sflush_r+0x32>
 80166ca:	682b      	ldr	r3, [r5, #0]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d0c6      	beq.n	801665e <__sflush_r+0x32>
 80166d0:	2b1d      	cmp	r3, #29
 80166d2:	d001      	beq.n	80166d8 <__sflush_r+0xac>
 80166d4:	2b16      	cmp	r3, #22
 80166d6:	d11e      	bne.n	8016716 <__sflush_r+0xea>
 80166d8:	602f      	str	r7, [r5, #0]
 80166da:	2000      	movs	r0, #0
 80166dc:	e022      	b.n	8016724 <__sflush_r+0xf8>
 80166de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166e2:	b21b      	sxth	r3, r3
 80166e4:	e01b      	b.n	801671e <__sflush_r+0xf2>
 80166e6:	690f      	ldr	r7, [r1, #16]
 80166e8:	2f00      	cmp	r7, #0
 80166ea:	d0f6      	beq.n	80166da <__sflush_r+0xae>
 80166ec:	0793      	lsls	r3, r2, #30
 80166ee:	680e      	ldr	r6, [r1, #0]
 80166f0:	bf08      	it	eq
 80166f2:	694b      	ldreq	r3, [r1, #20]
 80166f4:	600f      	str	r7, [r1, #0]
 80166f6:	bf18      	it	ne
 80166f8:	2300      	movne	r3, #0
 80166fa:	eba6 0807 	sub.w	r8, r6, r7
 80166fe:	608b      	str	r3, [r1, #8]
 8016700:	f1b8 0f00 	cmp.w	r8, #0
 8016704:	dde9      	ble.n	80166da <__sflush_r+0xae>
 8016706:	6a21      	ldr	r1, [r4, #32]
 8016708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801670a:	4643      	mov	r3, r8
 801670c:	463a      	mov	r2, r7
 801670e:	4628      	mov	r0, r5
 8016710:	47b0      	blx	r6
 8016712:	2800      	cmp	r0, #0
 8016714:	dc08      	bgt.n	8016728 <__sflush_r+0xfc>
 8016716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801671a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801671e:	81a3      	strh	r3, [r4, #12]
 8016720:	f04f 30ff 	mov.w	r0, #4294967295
 8016724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016728:	4407      	add	r7, r0
 801672a:	eba8 0800 	sub.w	r8, r8, r0
 801672e:	e7e7      	b.n	8016700 <__sflush_r+0xd4>
 8016730:	20400001 	.word	0x20400001

08016734 <_fflush_r>:
 8016734:	b538      	push	{r3, r4, r5, lr}
 8016736:	690b      	ldr	r3, [r1, #16]
 8016738:	4605      	mov	r5, r0
 801673a:	460c      	mov	r4, r1
 801673c:	b913      	cbnz	r3, 8016744 <_fflush_r+0x10>
 801673e:	2500      	movs	r5, #0
 8016740:	4628      	mov	r0, r5
 8016742:	bd38      	pop	{r3, r4, r5, pc}
 8016744:	b118      	cbz	r0, 801674e <_fflush_r+0x1a>
 8016746:	6a03      	ldr	r3, [r0, #32]
 8016748:	b90b      	cbnz	r3, 801674e <_fflush_r+0x1a>
 801674a:	f7ff f9e9 	bl	8015b20 <__sinit>
 801674e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d0f3      	beq.n	801673e <_fflush_r+0xa>
 8016756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016758:	07d0      	lsls	r0, r2, #31
 801675a:	d404      	bmi.n	8016766 <_fflush_r+0x32>
 801675c:	0599      	lsls	r1, r3, #22
 801675e:	d402      	bmi.n	8016766 <_fflush_r+0x32>
 8016760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016762:	f7ff fc1c 	bl	8015f9e <__retarget_lock_acquire_recursive>
 8016766:	4628      	mov	r0, r5
 8016768:	4621      	mov	r1, r4
 801676a:	f7ff ff5f 	bl	801662c <__sflush_r>
 801676e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016770:	07da      	lsls	r2, r3, #31
 8016772:	4605      	mov	r5, r0
 8016774:	d4e4      	bmi.n	8016740 <_fflush_r+0xc>
 8016776:	89a3      	ldrh	r3, [r4, #12]
 8016778:	059b      	lsls	r3, r3, #22
 801677a:	d4e1      	bmi.n	8016740 <_fflush_r+0xc>
 801677c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801677e:	f7ff fc0f 	bl	8015fa0 <__retarget_lock_release_recursive>
 8016782:	e7dd      	b.n	8016740 <_fflush_r+0xc>

08016784 <fiprintf>:
 8016784:	b40e      	push	{r1, r2, r3}
 8016786:	b503      	push	{r0, r1, lr}
 8016788:	4601      	mov	r1, r0
 801678a:	ab03      	add	r3, sp, #12
 801678c:	4805      	ldr	r0, [pc, #20]	@ (80167a4 <fiprintf+0x20>)
 801678e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016792:	6800      	ldr	r0, [r0, #0]
 8016794:	9301      	str	r3, [sp, #4]
 8016796:	f7ff fca5 	bl	80160e4 <_vfiprintf_r>
 801679a:	b002      	add	sp, #8
 801679c:	f85d eb04 	ldr.w	lr, [sp], #4
 80167a0:	b003      	add	sp, #12
 80167a2:	4770      	bx	lr
 80167a4:	20002098 	.word	0x20002098

080167a8 <__swhatbuf_r>:
 80167a8:	b570      	push	{r4, r5, r6, lr}
 80167aa:	460c      	mov	r4, r1
 80167ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167b0:	2900      	cmp	r1, #0
 80167b2:	b096      	sub	sp, #88	@ 0x58
 80167b4:	4615      	mov	r5, r2
 80167b6:	461e      	mov	r6, r3
 80167b8:	da0d      	bge.n	80167d6 <__swhatbuf_r+0x2e>
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80167c0:	f04f 0100 	mov.w	r1, #0
 80167c4:	bf14      	ite	ne
 80167c6:	2340      	movne	r3, #64	@ 0x40
 80167c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80167cc:	2000      	movs	r0, #0
 80167ce:	6031      	str	r1, [r6, #0]
 80167d0:	602b      	str	r3, [r5, #0]
 80167d2:	b016      	add	sp, #88	@ 0x58
 80167d4:	bd70      	pop	{r4, r5, r6, pc}
 80167d6:	466a      	mov	r2, sp
 80167d8:	f000 f848 	bl	801686c <_fstat_r>
 80167dc:	2800      	cmp	r0, #0
 80167de:	dbec      	blt.n	80167ba <__swhatbuf_r+0x12>
 80167e0:	9901      	ldr	r1, [sp, #4]
 80167e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80167e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80167ea:	4259      	negs	r1, r3
 80167ec:	4159      	adcs	r1, r3
 80167ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80167f2:	e7eb      	b.n	80167cc <__swhatbuf_r+0x24>

080167f4 <__smakebuf_r>:
 80167f4:	898b      	ldrh	r3, [r1, #12]
 80167f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80167f8:	079d      	lsls	r5, r3, #30
 80167fa:	4606      	mov	r6, r0
 80167fc:	460c      	mov	r4, r1
 80167fe:	d507      	bpl.n	8016810 <__smakebuf_r+0x1c>
 8016800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016804:	6023      	str	r3, [r4, #0]
 8016806:	6123      	str	r3, [r4, #16]
 8016808:	2301      	movs	r3, #1
 801680a:	6163      	str	r3, [r4, #20]
 801680c:	b003      	add	sp, #12
 801680e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016810:	ab01      	add	r3, sp, #4
 8016812:	466a      	mov	r2, sp
 8016814:	f7ff ffc8 	bl	80167a8 <__swhatbuf_r>
 8016818:	9f00      	ldr	r7, [sp, #0]
 801681a:	4605      	mov	r5, r0
 801681c:	4639      	mov	r1, r7
 801681e:	4630      	mov	r0, r6
 8016820:	f7ff f828 	bl	8015874 <_malloc_r>
 8016824:	b948      	cbnz	r0, 801683a <__smakebuf_r+0x46>
 8016826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801682a:	059a      	lsls	r2, r3, #22
 801682c:	d4ee      	bmi.n	801680c <__smakebuf_r+0x18>
 801682e:	f023 0303 	bic.w	r3, r3, #3
 8016832:	f043 0302 	orr.w	r3, r3, #2
 8016836:	81a3      	strh	r3, [r4, #12]
 8016838:	e7e2      	b.n	8016800 <__smakebuf_r+0xc>
 801683a:	89a3      	ldrh	r3, [r4, #12]
 801683c:	6020      	str	r0, [r4, #0]
 801683e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016842:	81a3      	strh	r3, [r4, #12]
 8016844:	9b01      	ldr	r3, [sp, #4]
 8016846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801684a:	b15b      	cbz	r3, 8016864 <__smakebuf_r+0x70>
 801684c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016850:	4630      	mov	r0, r6
 8016852:	f000 f81d 	bl	8016890 <_isatty_r>
 8016856:	b128      	cbz	r0, 8016864 <__smakebuf_r+0x70>
 8016858:	89a3      	ldrh	r3, [r4, #12]
 801685a:	f023 0303 	bic.w	r3, r3, #3
 801685e:	f043 0301 	orr.w	r3, r3, #1
 8016862:	81a3      	strh	r3, [r4, #12]
 8016864:	89a3      	ldrh	r3, [r4, #12]
 8016866:	431d      	orrs	r5, r3
 8016868:	81a5      	strh	r5, [r4, #12]
 801686a:	e7cf      	b.n	801680c <__smakebuf_r+0x18>

0801686c <_fstat_r>:
 801686c:	b538      	push	{r3, r4, r5, lr}
 801686e:	4d07      	ldr	r5, [pc, #28]	@ (801688c <_fstat_r+0x20>)
 8016870:	2300      	movs	r3, #0
 8016872:	4604      	mov	r4, r0
 8016874:	4608      	mov	r0, r1
 8016876:	4611      	mov	r1, r2
 8016878:	602b      	str	r3, [r5, #0]
 801687a:	f7eb fa36 	bl	8001cea <_fstat>
 801687e:	1c43      	adds	r3, r0, #1
 8016880:	d102      	bne.n	8016888 <_fstat_r+0x1c>
 8016882:	682b      	ldr	r3, [r5, #0]
 8016884:	b103      	cbz	r3, 8016888 <_fstat_r+0x1c>
 8016886:	6023      	str	r3, [r4, #0]
 8016888:	bd38      	pop	{r3, r4, r5, pc}
 801688a:	bf00      	nop
 801688c:	20011890 	.word	0x20011890

08016890 <_isatty_r>:
 8016890:	b538      	push	{r3, r4, r5, lr}
 8016892:	4d06      	ldr	r5, [pc, #24]	@ (80168ac <_isatty_r+0x1c>)
 8016894:	2300      	movs	r3, #0
 8016896:	4604      	mov	r4, r0
 8016898:	4608      	mov	r0, r1
 801689a:	602b      	str	r3, [r5, #0]
 801689c:	f7eb fa2a 	bl	8001cf4 <_isatty>
 80168a0:	1c43      	adds	r3, r0, #1
 80168a2:	d102      	bne.n	80168aa <_isatty_r+0x1a>
 80168a4:	682b      	ldr	r3, [r5, #0]
 80168a6:	b103      	cbz	r3, 80168aa <_isatty_r+0x1a>
 80168a8:	6023      	str	r3, [r4, #0]
 80168aa:	bd38      	pop	{r3, r4, r5, pc}
 80168ac:	20011890 	.word	0x20011890

080168b0 <abort>:
 80168b0:	b508      	push	{r3, lr}
 80168b2:	2006      	movs	r0, #6
 80168b4:	f000 f82c 	bl	8016910 <raise>
 80168b8:	2001      	movs	r0, #1
 80168ba:	f7eb fa0d 	bl	8001cd8 <_exit>

080168be <_raise_r>:
 80168be:	291f      	cmp	r1, #31
 80168c0:	b538      	push	{r3, r4, r5, lr}
 80168c2:	4605      	mov	r5, r0
 80168c4:	460c      	mov	r4, r1
 80168c6:	d904      	bls.n	80168d2 <_raise_r+0x14>
 80168c8:	2316      	movs	r3, #22
 80168ca:	6003      	str	r3, [r0, #0]
 80168cc:	f04f 30ff 	mov.w	r0, #4294967295
 80168d0:	bd38      	pop	{r3, r4, r5, pc}
 80168d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80168d4:	b112      	cbz	r2, 80168dc <_raise_r+0x1e>
 80168d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80168da:	b94b      	cbnz	r3, 80168f0 <_raise_r+0x32>
 80168dc:	4628      	mov	r0, r5
 80168de:	f000 f831 	bl	8016944 <_getpid_r>
 80168e2:	4622      	mov	r2, r4
 80168e4:	4601      	mov	r1, r0
 80168e6:	4628      	mov	r0, r5
 80168e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168ec:	f000 b818 	b.w	8016920 <_kill_r>
 80168f0:	2b01      	cmp	r3, #1
 80168f2:	d00a      	beq.n	801690a <_raise_r+0x4c>
 80168f4:	1c59      	adds	r1, r3, #1
 80168f6:	d103      	bne.n	8016900 <_raise_r+0x42>
 80168f8:	2316      	movs	r3, #22
 80168fa:	6003      	str	r3, [r0, #0]
 80168fc:	2001      	movs	r0, #1
 80168fe:	e7e7      	b.n	80168d0 <_raise_r+0x12>
 8016900:	2100      	movs	r1, #0
 8016902:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016906:	4620      	mov	r0, r4
 8016908:	4798      	blx	r3
 801690a:	2000      	movs	r0, #0
 801690c:	e7e0      	b.n	80168d0 <_raise_r+0x12>
	...

08016910 <raise>:
 8016910:	4b02      	ldr	r3, [pc, #8]	@ (801691c <raise+0xc>)
 8016912:	4601      	mov	r1, r0
 8016914:	6818      	ldr	r0, [r3, #0]
 8016916:	f7ff bfd2 	b.w	80168be <_raise_r>
 801691a:	bf00      	nop
 801691c:	20002098 	.word	0x20002098

08016920 <_kill_r>:
 8016920:	b538      	push	{r3, r4, r5, lr}
 8016922:	4d07      	ldr	r5, [pc, #28]	@ (8016940 <_kill_r+0x20>)
 8016924:	2300      	movs	r3, #0
 8016926:	4604      	mov	r4, r0
 8016928:	4608      	mov	r0, r1
 801692a:	4611      	mov	r1, r2
 801692c:	602b      	str	r3, [r5, #0]
 801692e:	f7eb f9cb 	bl	8001cc8 <_kill>
 8016932:	1c43      	adds	r3, r0, #1
 8016934:	d102      	bne.n	801693c <_kill_r+0x1c>
 8016936:	682b      	ldr	r3, [r5, #0]
 8016938:	b103      	cbz	r3, 801693c <_kill_r+0x1c>
 801693a:	6023      	str	r3, [r4, #0]
 801693c:	bd38      	pop	{r3, r4, r5, pc}
 801693e:	bf00      	nop
 8016940:	20011890 	.word	0x20011890

08016944 <_getpid_r>:
 8016944:	f7eb b9be 	b.w	8001cc4 <_getpid>

08016948 <_init>:
 8016948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801694a:	bf00      	nop
 801694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801694e:	bc08      	pop	{r3}
 8016950:	469e      	mov	lr, r3
 8016952:	4770      	bx	lr

08016954 <_fini>:
 8016954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016956:	bf00      	nop
 8016958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801695a:	bc08      	pop	{r3}
 801695c:	469e      	mov	lr, r3
 801695e:	4770      	bx	lr
